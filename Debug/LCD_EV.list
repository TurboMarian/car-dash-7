
LCD_EV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002e96c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002400  0802eb1c  0802eb1c  0003eb1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000c8c8  08030f1c  08030f1c  00040f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000020  0803d7e4  0803d7e4  0004d7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000014c  0803d804  0803d804  0004d804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  0803d950  0803d950  00050100  2**0
                  CONTENTS
  7 .ARM          00000008  0803d950  0803d950  0004d950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  0803d958  0803d958  00050100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  0803d958  0803d958  0004d958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0803d96c  0803d96c  0004d96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000100  20000000  0803d974  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ccmram       00000000  10000000  10000000  00050100  2**0
                  CONTENTS
 13 .bss          00011530  20000100  20000100  00050100  2**2
                  ALLOC
 14 ._user_heap_stack 00000c00  20011630  20011630  00050100  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  00050100  2**0
                  CONTENTS, READONLY
 16 .debug_info   000af7ff  00000000  00000000  00050130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00013100  00000000  00000000  000ff92f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000042b8  00000000  00000000  00112a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003e08  00000000  00000000  00116ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000116b7  00000000  00000000  0011aaf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004db47  00000000  00000000  0012c1a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00120dbc  00000000  00000000  00179cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  0029aaaa  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0001267c  00000000  00000000  0029ab7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000100 	.word	0x20000100
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0802eb04 	.word	0x0802eb04

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000104 	.word	0x20000104
 80001ec:	0802eb04 	.word	0x0802eb04

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b974 	b.w	8000e0c <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468e      	mov	lr, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14d      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4694      	mov	ip, r2
 8000b4e:	d969      	bls.n	8000c24 <__udivmoddi4+0xe8>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b152      	cbz	r2, 8000b6c <__udivmoddi4+0x30>
 8000b56:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5a:	f1c2 0120 	rsb	r1, r2, #32
 8000b5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b66:	ea41 0e03 	orr.w	lr, r1, r3
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	0c21      	lsrs	r1, r4, #16
 8000b72:	fbbe f6f8 	udiv	r6, lr, r8
 8000b76:	fa1f f78c 	uxth.w	r7, ip
 8000b7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b82:	fb06 f107 	mul.w	r1, r6, r7
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b92:	f080 811f 	bcs.w	8000dd4 <__udivmoddi4+0x298>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 811c 	bls.w	8000dd4 <__udivmoddi4+0x298>
 8000b9c:	3e02      	subs	r6, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 f707 	mul.w	r7, r0, r7
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x92>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc0:	f080 810a 	bcs.w	8000dd8 <__udivmoddi4+0x29c>
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	f240 8107 	bls.w	8000dd8 <__udivmoddi4+0x29c>
 8000bca:	4464      	add	r4, ip
 8000bcc:	3802      	subs	r0, #2
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	1be4      	subs	r4, r4, r7
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	b11d      	cbz	r5, 8000be0 <__udivmoddi4+0xa4>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000be0:	4631      	mov	r1, r6
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xc2>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80ef 	beq.w	8000dce <__udivmoddi4+0x292>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x160>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd4>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80f9 	bhi.w	8000e02 <__udivmoddi4+0x2c6>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	469e      	mov	lr, r3
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa4>
 8000c1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xec>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 8092 	bne.w	8000d56 <__udivmoddi4+0x21a>
 8000c32:	eba1 010c 	sub.w	r1, r1, ip
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f fe8c 	uxth.w	lr, ip
 8000c3e:	2601      	movs	r6, #1
 8000c40:	0c20      	lsrs	r0, r4, #16
 8000c42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c46:	fb07 1113 	mls	r1, r7, r3, r1
 8000c4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c4e:	fb0e f003 	mul.w	r0, lr, r3
 8000c52:	4288      	cmp	r0, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x12c>
 8000c56:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x12a>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f200 80cb 	bhi.w	8000dfc <__udivmoddi4+0x2c0>
 8000c66:	4643      	mov	r3, r8
 8000c68:	1a09      	subs	r1, r1, r0
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c70:	fb07 1110 	mls	r1, r7, r0, r1
 8000c74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c78:	fb0e fe00 	mul.w	lr, lr, r0
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x156>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x154>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f200 80bb 	bhi.w	8000e06 <__udivmoddi4+0x2ca>
 8000c90:	4608      	mov	r0, r1
 8000c92:	eba4 040e 	sub.w	r4, r4, lr
 8000c96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c9a:	e79c      	b.n	8000bd6 <__udivmoddi4+0x9a>
 8000c9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ca0:	40b3      	lsls	r3, r6
 8000ca2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ca6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000caa:	fa20 f407 	lsr.w	r4, r0, r7
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	431c      	orrs	r4, r3
 8000cb4:	40f9      	lsrs	r1, r7
 8000cb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cba:	fa00 f306 	lsl.w	r3, r0, r6
 8000cbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cc2:	0c20      	lsrs	r0, r4, #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ccc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b8>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce4:	f080 8088 	bcs.w	8000df8 <__udivmoddi4+0x2bc>
 8000ce8:	4288      	cmp	r0, r1
 8000cea:	f240 8085 	bls.w	8000df8 <__udivmoddi4+0x2bc>
 8000cee:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000d00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d08:	458e      	cmp	lr, r1
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1e2>
 8000d0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d14:	d26c      	bcs.n	8000df0 <__udivmoddi4+0x2b4>
 8000d16:	458e      	cmp	lr, r1
 8000d18:	d96a      	bls.n	8000df0 <__udivmoddi4+0x2b4>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4461      	add	r1, ip
 8000d1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d22:	fba0 9402 	umull	r9, r4, r0, r2
 8000d26:	eba1 010e 	sub.w	r1, r1, lr
 8000d2a:	42a1      	cmp	r1, r4
 8000d2c:	46c8      	mov	r8, r9
 8000d2e:	46a6      	mov	lr, r4
 8000d30:	d356      	bcc.n	8000de0 <__udivmoddi4+0x2a4>
 8000d32:	d053      	beq.n	8000ddc <__udivmoddi4+0x2a0>
 8000d34:	b15d      	cbz	r5, 8000d4e <__udivmoddi4+0x212>
 8000d36:	ebb3 0208 	subs.w	r2, r3, r8
 8000d3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d42:	fa22 f306 	lsr.w	r3, r2, r6
 8000d46:	40f1      	lsrs	r1, r6
 8000d48:	431f      	orrs	r7, r3
 8000d4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d4e:	2600      	movs	r6, #0
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	f1c2 0320 	rsb	r3, r2, #32
 8000d5a:	40d8      	lsrs	r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	fa21 f303 	lsr.w	r3, r1, r3
 8000d64:	4091      	lsls	r1, r2
 8000d66:	4301      	orrs	r1, r0
 8000d68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d74:	fb07 3610 	mls	r6, r7, r0, r3
 8000d78:	0c0b      	lsrs	r3, r1, #16
 8000d7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d82:	429e      	cmp	r6, r3
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x260>
 8000d8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d92:	d22f      	bcs.n	8000df4 <__udivmoddi4+0x2b8>
 8000d94:	429e      	cmp	r6, r3
 8000d96:	d92d      	bls.n	8000df4 <__udivmoddi4+0x2b8>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	b289      	uxth	r1, r1
 8000da0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000da4:	fb07 3316 	mls	r3, r7, r6, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb06 f30e 	mul.w	r3, r6, lr
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x28a>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dbc:	d216      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d914      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000dc2:	3e02      	subs	r6, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	1ac9      	subs	r1, r1, r3
 8000dc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dcc:	e738      	b.n	8000c40 <__udivmoddi4+0x104>
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e705      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e3      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6f8      	b.n	8000bce <__udivmoddi4+0x92>
 8000ddc:	454b      	cmp	r3, r9
 8000dde:	d2a9      	bcs.n	8000d34 <__udivmoddi4+0x1f8>
 8000de0:	ebb9 0802 	subs.w	r8, r9, r2
 8000de4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7a3      	b.n	8000d34 <__udivmoddi4+0x1f8>
 8000dec:	4646      	mov	r6, r8
 8000dee:	e7ea      	b.n	8000dc6 <__udivmoddi4+0x28a>
 8000df0:	4620      	mov	r0, r4
 8000df2:	e794      	b.n	8000d1e <__udivmoddi4+0x1e2>
 8000df4:	4640      	mov	r0, r8
 8000df6:	e7d1      	b.n	8000d9c <__udivmoddi4+0x260>
 8000df8:	46d0      	mov	r8, sl
 8000dfa:	e77b      	b.n	8000cf4 <__udivmoddi4+0x1b8>
 8000dfc:	3b02      	subs	r3, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	e732      	b.n	8000c68 <__udivmoddi4+0x12c>
 8000e02:	4630      	mov	r0, r6
 8000e04:	e709      	b.n	8000c1a <__udivmoddi4+0xde>
 8000e06:	4464      	add	r4, ip
 8000e08:	3802      	subs	r0, #2
 8000e0a:	e742      	b.n	8000c92 <__udivmoddi4+0x156>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <calcBuf>:
/**
 * Internal function, calculates the HI or LO values for the 800 kHz WS2812 signal and puts them into a buffer for the Timer-DMA
 *
 */
void calcBuf(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
  uint32_t n;
  uint32_t pos;
  WS2812_RGB_t led;

  pos=0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
  // set timings for all LEDs
  for(n=0;n<WS2812_NUM_LEDS_CH1;n++) {
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	f000 bce5 	b.w	80017ec <calcBuf+0x9dc>
    led=WS2812_LED_BUF_CH1[n];
 8000e22:	49ab      	ldr	r1, [pc, #684]	; (80010d0 <calcBuf+0x2c0>)
 8000e24:	68fa      	ldr	r2, [r7, #12]
 8000e26:	4613      	mov	r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	4413      	add	r3, r2
 8000e2c:	18ca      	adds	r2, r1, r3
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	8811      	ldrh	r1, [r2, #0]
 8000e32:	7892      	ldrb	r2, [r2, #2]
 8000e34:	8019      	strh	r1, [r3, #0]
 8000e36:	709a      	strb	r2, [r3, #2]

    // Col:Green , Bit:7..0
    WS2812_TIM_BUF[pos++]=((led.green&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8000e38:	797b      	ldrb	r3, [r7, #5]
 8000e3a:	b25b      	sxtb	r3, r3
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	da13      	bge.n	8000e68 <calcBuf+0x58>
 8000e40:	4ba4      	ldr	r3, [pc, #656]	; (80010d4 <calcBuf+0x2c4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fb64 	bl	8000514 <__aeabi_ui2d>
 8000e4c:	a39c      	add	r3, pc, #624	; (adr r3, 80010c0 <calcBuf+0x2b0>)
 8000e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e52:	f7ff fd03 	bl	800085c <__aeabi_ddiv>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4610      	mov	r0, r2
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f7ff fde5 	bl	8000a2c <__aeabi_d2uiz>
 8000e62:	4603      	mov	r3, r0
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	e012      	b.n	8000e8e <calcBuf+0x7e>
 8000e68:	4b9a      	ldr	r3, [pc, #616]	; (80010d4 <calcBuf+0x2c4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fb50 	bl	8000514 <__aeabi_ui2d>
 8000e74:	a394      	add	r3, pc, #592	; (adr r3, 80010c8 <calcBuf+0x2b8>)
 8000e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7a:	f7ff fcef 	bl	800085c <__aeabi_ddiv>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	460b      	mov	r3, r1
 8000e82:	4610      	mov	r0, r2
 8000e84:	4619      	mov	r1, r3
 8000e86:	f7ff fdd1 	bl	8000a2c <__aeabi_d2uiz>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1c59      	adds	r1, r3, #1
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	4990      	ldr	r1, [pc, #576]	; (80010d8 <calcBuf+0x2c8>)
 8000e96:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8000e9a:	797b      	ldrb	r3, [r7, #5]
 8000e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d013      	beq.n	8000ecc <calcBuf+0xbc>
 8000ea4:	4b8b      	ldr	r3, [pc, #556]	; (80010d4 <calcBuf+0x2c4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fb32 	bl	8000514 <__aeabi_ui2d>
 8000eb0:	a383      	add	r3, pc, #524	; (adr r3, 80010c0 <calcBuf+0x2b0>)
 8000eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb6:	f7ff fcd1 	bl	800085c <__aeabi_ddiv>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f7ff fdb3 	bl	8000a2c <__aeabi_d2uiz>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	e012      	b.n	8000ef2 <calcBuf+0xe2>
 8000ecc:	4b81      	ldr	r3, [pc, #516]	; (80010d4 <calcBuf+0x2c4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fb1e 	bl	8000514 <__aeabi_ui2d>
 8000ed8:	a37b      	add	r3, pc, #492	; (adr r3, 80010c8 <calcBuf+0x2b8>)
 8000eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ede:	f7ff fcbd 	bl	800085c <__aeabi_ddiv>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f7ff fd9f 	bl	8000a2c <__aeabi_d2uiz>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1c59      	adds	r1, r3, #1
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	4977      	ldr	r1, [pc, #476]	; (80010d8 <calcBuf+0x2c8>)
 8000efa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8000efe:	797b      	ldrb	r3, [r7, #5]
 8000f00:	f003 0320 	and.w	r3, r3, #32
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d013      	beq.n	8000f30 <calcBuf+0x120>
 8000f08:	4b72      	ldr	r3, [pc, #456]	; (80010d4 <calcBuf+0x2c4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fb00 	bl	8000514 <__aeabi_ui2d>
 8000f14:	a36a      	add	r3, pc, #424	; (adr r3, 80010c0 <calcBuf+0x2b0>)
 8000f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1a:	f7ff fc9f 	bl	800085c <__aeabi_ddiv>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4610      	mov	r0, r2
 8000f24:	4619      	mov	r1, r3
 8000f26:	f7ff fd81 	bl	8000a2c <__aeabi_d2uiz>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	e012      	b.n	8000f56 <calcBuf+0x146>
 8000f30:	4b68      	ldr	r3, [pc, #416]	; (80010d4 <calcBuf+0x2c4>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff faec 	bl	8000514 <__aeabi_ui2d>
 8000f3c:	a362      	add	r3, pc, #392	; (adr r3, 80010c8 <calcBuf+0x2b8>)
 8000f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f42:	f7ff fc8b 	bl	800085c <__aeabi_ddiv>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f7ff fd6d 	bl	8000a2c <__aeabi_d2uiz>
 8000f52:	4603      	mov	r3, r0
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1c59      	adds	r1, r3, #1
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	495e      	ldr	r1, [pc, #376]	; (80010d8 <calcBuf+0x2c8>)
 8000f5e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8000f62:	797b      	ldrb	r3, [r7, #5]
 8000f64:	f003 0310 	and.w	r3, r3, #16
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d013      	beq.n	8000f94 <calcBuf+0x184>
 8000f6c:	4b59      	ldr	r3, [pc, #356]	; (80010d4 <calcBuf+0x2c4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff face 	bl	8000514 <__aeabi_ui2d>
 8000f78:	a351      	add	r3, pc, #324	; (adr r3, 80010c0 <calcBuf+0x2b0>)
 8000f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7e:	f7ff fc6d 	bl	800085c <__aeabi_ddiv>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	4610      	mov	r0, r2
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f7ff fd4f 	bl	8000a2c <__aeabi_d2uiz>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	e012      	b.n	8000fba <calcBuf+0x1aa>
 8000f94:	4b4f      	ldr	r3, [pc, #316]	; (80010d4 <calcBuf+0x2c4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff faba 	bl	8000514 <__aeabi_ui2d>
 8000fa0:	a349      	add	r3, pc, #292	; (adr r3, 80010c8 <calcBuf+0x2b8>)
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	f7ff fc59 	bl	800085c <__aeabi_ddiv>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	4610      	mov	r0, r2
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f7ff fd3b 	bl	8000a2c <__aeabi_d2uiz>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1c59      	adds	r1, r3, #1
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	4945      	ldr	r1, [pc, #276]	; (80010d8 <calcBuf+0x2c8>)
 8000fc2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8000fc6:	797b      	ldrb	r3, [r7, #5]
 8000fc8:	f003 0308 	and.w	r3, r3, #8
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d013      	beq.n	8000ff8 <calcBuf+0x1e8>
 8000fd0:	4b40      	ldr	r3, [pc, #256]	; (80010d4 <calcBuf+0x2c4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fa9c 	bl	8000514 <__aeabi_ui2d>
 8000fdc:	a338      	add	r3, pc, #224	; (adr r3, 80010c0 <calcBuf+0x2b0>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff fc3b 	bl	800085c <__aeabi_ddiv>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fd1d 	bl	8000a2c <__aeabi_d2uiz>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	e012      	b.n	800101e <calcBuf+0x20e>
 8000ff8:	4b36      	ldr	r3, [pc, #216]	; (80010d4 <calcBuf+0x2c4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fa88 	bl	8000514 <__aeabi_ui2d>
 8001004:	a330      	add	r3, pc, #192	; (adr r3, 80010c8 <calcBuf+0x2b8>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff fc27 	bl	800085c <__aeabi_ddiv>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f7ff fd09 	bl	8000a2c <__aeabi_d2uiz>
 800101a:	4603      	mov	r3, r0
 800101c:	b29a      	uxth	r2, r3
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1c59      	adds	r1, r3, #1
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	492c      	ldr	r1, [pc, #176]	; (80010d8 <calcBuf+0x2c8>)
 8001026:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800102a:	797b      	ldrb	r3, [r7, #5]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	2b00      	cmp	r3, #0
 8001032:	d013      	beq.n	800105c <calcBuf+0x24c>
 8001034:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <calcBuf+0x2c4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fa6a 	bl	8000514 <__aeabi_ui2d>
 8001040:	a31f      	add	r3, pc, #124	; (adr r3, 80010c0 <calcBuf+0x2b0>)
 8001042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001046:	f7ff fc09 	bl	800085c <__aeabi_ddiv>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
 8001052:	f7ff fceb 	bl	8000a2c <__aeabi_d2uiz>
 8001056:	4603      	mov	r3, r0
 8001058:	b29a      	uxth	r2, r3
 800105a:	e012      	b.n	8001082 <calcBuf+0x272>
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <calcBuf+0x2c4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fa56 	bl	8000514 <__aeabi_ui2d>
 8001068:	a317      	add	r3, pc, #92	; (adr r3, 80010c8 <calcBuf+0x2b8>)
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	f7ff fbf5 	bl	800085c <__aeabi_ddiv>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	f7ff fcd7 	bl	8000a2c <__aeabi_d2uiz>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	1c59      	adds	r1, r3, #1
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	4913      	ldr	r1, [pc, #76]	; (80010d8 <calcBuf+0x2c8>)
 800108a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800108e:	797b      	ldrb	r3, [r7, #5]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d021      	beq.n	80010dc <calcBuf+0x2cc>
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <calcBuf+0x2c4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa38 	bl	8000514 <__aeabi_ui2d>
 80010a4:	a306      	add	r3, pc, #24	; (adr r3, 80010c0 <calcBuf+0x2b0>)
 80010a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010aa:	f7ff fbd7 	bl	800085c <__aeabi_ddiv>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	f7ff fcb9 	bl	8000a2c <__aeabi_d2uiz>
 80010ba:	4603      	mov	r3, r0
 80010bc:	b29a      	uxth	r2, r3
 80010be:	e020      	b.n	8001102 <calcBuf+0x2f2>
 80010c0:	08d3dcb1 	.word	0x08d3dcb1
 80010c4:	40013dcb 	.word	0x40013dcb
 80010c8:	8ba2e8ba 	.word	0x8ba2e8ba
 80010cc:	4016ba2e 	.word	0x4016ba2e
 80010d0:	2000fdb8 	.word	0x2000fdb8
 80010d4:	2000fd10 	.word	0x2000fd10
 80010d8:	2000f410 	.word	0x2000f410
 80010dc:	4bb2      	ldr	r3, [pc, #712]	; (80013a8 <calcBuf+0x598>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fa16 	bl	8000514 <__aeabi_ui2d>
 80010e8:	a3ab      	add	r3, pc, #684	; (adr r3, 8001398 <calcBuf+0x588>)
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	f7ff fbb5 	bl	800085c <__aeabi_ddiv>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff fc97 	bl	8000a2c <__aeabi_d2uiz>
 80010fe:	4603      	mov	r3, r0
 8001100:	b29a      	uxth	r2, r3
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	1c59      	adds	r1, r3, #1
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	49a8      	ldr	r1, [pc, #672]	; (80013ac <calcBuf+0x59c>)
 800110a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800110e:	797b      	ldrb	r3, [r7, #5]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <calcBuf+0x330>
 8001118:	4ba3      	ldr	r3, [pc, #652]	; (80013a8 <calcBuf+0x598>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f9f8 	bl	8000514 <__aeabi_ui2d>
 8001124:	a39e      	add	r3, pc, #632	; (adr r3, 80013a0 <calcBuf+0x590>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	f7ff fb97 	bl	800085c <__aeabi_ddiv>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	f7ff fc79 	bl	8000a2c <__aeabi_d2uiz>
 800113a:	4603      	mov	r3, r0
 800113c:	b29a      	uxth	r2, r3
 800113e:	e012      	b.n	8001166 <calcBuf+0x356>
 8001140:	4b99      	ldr	r3, [pc, #612]	; (80013a8 <calcBuf+0x598>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9e4 	bl	8000514 <__aeabi_ui2d>
 800114c:	a392      	add	r3, pc, #584	; (adr r3, 8001398 <calcBuf+0x588>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff fb83 	bl	800085c <__aeabi_ddiv>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff fc65 	bl	8000a2c <__aeabi_d2uiz>
 8001162:	4603      	mov	r3, r0
 8001164:	b29a      	uxth	r2, r3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1c59      	adds	r1, r3, #1
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	498f      	ldr	r1, [pc, #572]	; (80013ac <calcBuf+0x59c>)
 800116e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Col:Red , Bit:7..0
    WS2812_TIM_BUF[pos++]=((led.red&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001172:	793b      	ldrb	r3, [r7, #4]
 8001174:	b25b      	sxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	da13      	bge.n	80011a2 <calcBuf+0x392>
 800117a:	4b8b      	ldr	r3, [pc, #556]	; (80013a8 <calcBuf+0x598>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f9c7 	bl	8000514 <__aeabi_ui2d>
 8001186:	a386      	add	r3, pc, #536	; (adr r3, 80013a0 <calcBuf+0x590>)
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	f7ff fb66 	bl	800085c <__aeabi_ddiv>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	f7ff fc48 	bl	8000a2c <__aeabi_d2uiz>
 800119c:	4603      	mov	r3, r0
 800119e:	b29a      	uxth	r2, r3
 80011a0:	e012      	b.n	80011c8 <calcBuf+0x3b8>
 80011a2:	4b81      	ldr	r3, [pc, #516]	; (80013a8 <calcBuf+0x598>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f9b3 	bl	8000514 <__aeabi_ui2d>
 80011ae:	a37a      	add	r3, pc, #488	; (adr r3, 8001398 <calcBuf+0x588>)
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f7ff fb52 	bl	800085c <__aeabi_ddiv>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f7ff fc34 	bl	8000a2c <__aeabi_d2uiz>
 80011c4:	4603      	mov	r3, r0
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	1c59      	adds	r1, r3, #1
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	4977      	ldr	r1, [pc, #476]	; (80013ac <calcBuf+0x59c>)
 80011d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80011d4:	793b      	ldrb	r3, [r7, #4]
 80011d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d013      	beq.n	8001206 <calcBuf+0x3f6>
 80011de:	4b72      	ldr	r3, [pc, #456]	; (80013a8 <calcBuf+0x598>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f995 	bl	8000514 <__aeabi_ui2d>
 80011ea:	a36d      	add	r3, pc, #436	; (adr r3, 80013a0 <calcBuf+0x590>)
 80011ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f0:	f7ff fb34 	bl	800085c <__aeabi_ddiv>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f7ff fc16 	bl	8000a2c <__aeabi_d2uiz>
 8001200:	4603      	mov	r3, r0
 8001202:	b29a      	uxth	r2, r3
 8001204:	e012      	b.n	800122c <calcBuf+0x41c>
 8001206:	4b68      	ldr	r3, [pc, #416]	; (80013a8 <calcBuf+0x598>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f981 	bl	8000514 <__aeabi_ui2d>
 8001212:	a361      	add	r3, pc, #388	; (adr r3, 8001398 <calcBuf+0x588>)
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	f7ff fb20 	bl	800085c <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fc02 	bl	8000a2c <__aeabi_d2uiz>
 8001228:	4603      	mov	r3, r0
 800122a:	b29a      	uxth	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	1c59      	adds	r1, r3, #1
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	495e      	ldr	r1, [pc, #376]	; (80013ac <calcBuf+0x59c>)
 8001234:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001238:	793b      	ldrb	r3, [r7, #4]
 800123a:	f003 0320 	and.w	r3, r3, #32
 800123e:	2b00      	cmp	r3, #0
 8001240:	d013      	beq.n	800126a <calcBuf+0x45a>
 8001242:	4b59      	ldr	r3, [pc, #356]	; (80013a8 <calcBuf+0x598>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f963 	bl	8000514 <__aeabi_ui2d>
 800124e:	a354      	add	r3, pc, #336	; (adr r3, 80013a0 <calcBuf+0x590>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f7ff fb02 	bl	800085c <__aeabi_ddiv>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fbe4 	bl	8000a2c <__aeabi_d2uiz>
 8001264:	4603      	mov	r3, r0
 8001266:	b29a      	uxth	r2, r3
 8001268:	e012      	b.n	8001290 <calcBuf+0x480>
 800126a:	4b4f      	ldr	r3, [pc, #316]	; (80013a8 <calcBuf+0x598>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f94f 	bl	8000514 <__aeabi_ui2d>
 8001276:	a348      	add	r3, pc, #288	; (adr r3, 8001398 <calcBuf+0x588>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff faee 	bl	800085c <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	f7ff fbd0 	bl	8000a2c <__aeabi_d2uiz>
 800128c:	4603      	mov	r3, r0
 800128e:	b29a      	uxth	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	1c59      	adds	r1, r3, #1
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	4945      	ldr	r1, [pc, #276]	; (80013ac <calcBuf+0x59c>)
 8001298:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800129c:	793b      	ldrb	r3, [r7, #4]
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d013      	beq.n	80012ce <calcBuf+0x4be>
 80012a6:	4b40      	ldr	r3, [pc, #256]	; (80013a8 <calcBuf+0x598>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff f931 	bl	8000514 <__aeabi_ui2d>
 80012b2:	a33b      	add	r3, pc, #236	; (adr r3, 80013a0 <calcBuf+0x590>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	f7ff fad0 	bl	800085c <__aeabi_ddiv>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4610      	mov	r0, r2
 80012c2:	4619      	mov	r1, r3
 80012c4:	f7ff fbb2 	bl	8000a2c <__aeabi_d2uiz>
 80012c8:	4603      	mov	r3, r0
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	e012      	b.n	80012f4 <calcBuf+0x4e4>
 80012ce:	4b36      	ldr	r3, [pc, #216]	; (80013a8 <calcBuf+0x598>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f91d 	bl	8000514 <__aeabi_ui2d>
 80012da:	a32f      	add	r3, pc, #188	; (adr r3, 8001398 <calcBuf+0x588>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	f7ff fabc 	bl	800085c <__aeabi_ddiv>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	f7ff fb9e 	bl	8000a2c <__aeabi_d2uiz>
 80012f0:	4603      	mov	r3, r0
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	1c59      	adds	r1, r3, #1
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	492c      	ldr	r1, [pc, #176]	; (80013ac <calcBuf+0x59c>)
 80012fc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001300:	793b      	ldrb	r3, [r7, #4]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b00      	cmp	r3, #0
 8001308:	d013      	beq.n	8001332 <calcBuf+0x522>
 800130a:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <calcBuf+0x598>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f8ff 	bl	8000514 <__aeabi_ui2d>
 8001316:	a322      	add	r3, pc, #136	; (adr r3, 80013a0 <calcBuf+0x590>)
 8001318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131c:	f7ff fa9e 	bl	800085c <__aeabi_ddiv>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f7ff fb80 	bl	8000a2c <__aeabi_d2uiz>
 800132c:	4603      	mov	r3, r0
 800132e:	b29a      	uxth	r2, r3
 8001330:	e012      	b.n	8001358 <calcBuf+0x548>
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <calcBuf+0x598>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f8eb 	bl	8000514 <__aeabi_ui2d>
 800133e:	a316      	add	r3, pc, #88	; (adr r3, 8001398 <calcBuf+0x588>)
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	f7ff fa8a 	bl	800085c <__aeabi_ddiv>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fb6c 	bl	8000a2c <__aeabi_d2uiz>
 8001354:	4603      	mov	r3, r0
 8001356:	b29a      	uxth	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	1c59      	adds	r1, r3, #1
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	4913      	ldr	r1, [pc, #76]	; (80013ac <calcBuf+0x59c>)
 8001360:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001364:	793b      	ldrb	r3, [r7, #4]
 8001366:	f003 0304 	and.w	r3, r3, #4
 800136a:	2b00      	cmp	r3, #0
 800136c:	d020      	beq.n	80013b0 <calcBuf+0x5a0>
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <calcBuf+0x598>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f8cd 	bl	8000514 <__aeabi_ui2d>
 800137a:	a309      	add	r3, pc, #36	; (adr r3, 80013a0 <calcBuf+0x590>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7ff fa6c 	bl	800085c <__aeabi_ddiv>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fb4e 	bl	8000a2c <__aeabi_d2uiz>
 8001390:	4603      	mov	r3, r0
 8001392:	b29a      	uxth	r2, r3
 8001394:	e01f      	b.n	80013d6 <calcBuf+0x5c6>
 8001396:	bf00      	nop
 8001398:	8ba2e8ba 	.word	0x8ba2e8ba
 800139c:	4016ba2e 	.word	0x4016ba2e
 80013a0:	08d3dcb1 	.word	0x08d3dcb1
 80013a4:	40013dcb 	.word	0x40013dcb
 80013a8:	2000fd10 	.word	0x2000fd10
 80013ac:	2000f410 	.word	0x2000f410
 80013b0:	4bb3      	ldr	r3, [pc, #716]	; (8001680 <calcBuf+0x870>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f8ac 	bl	8000514 <__aeabi_ui2d>
 80013bc:	a3ac      	add	r3, pc, #688	; (adr r3, 8001670 <calcBuf+0x860>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	f7ff fa4b 	bl	800085c <__aeabi_ddiv>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff fb2d 	bl	8000a2c <__aeabi_d2uiz>
 80013d2:	4603      	mov	r3, r0
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	1c59      	adds	r1, r3, #1
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	49a9      	ldr	r1, [pc, #676]	; (8001684 <calcBuf+0x874>)
 80013de:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80013e2:	793b      	ldrb	r3, [r7, #4]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d013      	beq.n	8001414 <calcBuf+0x604>
 80013ec:	4ba4      	ldr	r3, [pc, #656]	; (8001680 <calcBuf+0x870>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f88e 	bl	8000514 <__aeabi_ui2d>
 80013f8:	a39f      	add	r3, pc, #636	; (adr r3, 8001678 <calcBuf+0x868>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff fa2d 	bl	800085c <__aeabi_ddiv>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff fb0f 	bl	8000a2c <__aeabi_d2uiz>
 800140e:	4603      	mov	r3, r0
 8001410:	b29a      	uxth	r2, r3
 8001412:	e012      	b.n	800143a <calcBuf+0x62a>
 8001414:	4b9a      	ldr	r3, [pc, #616]	; (8001680 <calcBuf+0x870>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f87a 	bl	8000514 <__aeabi_ui2d>
 8001420:	a393      	add	r3, pc, #588	; (adr r3, 8001670 <calcBuf+0x860>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	f7ff fa19 	bl	800085c <__aeabi_ddiv>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4610      	mov	r0, r2
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff fafb 	bl	8000a2c <__aeabi_d2uiz>
 8001436:	4603      	mov	r3, r0
 8001438:	b29a      	uxth	r2, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	1c59      	adds	r1, r3, #1
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	4990      	ldr	r1, [pc, #576]	; (8001684 <calcBuf+0x874>)
 8001442:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001446:	793b      	ldrb	r3, [r7, #4]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d013      	beq.n	8001478 <calcBuf+0x668>
 8001450:	4b8b      	ldr	r3, [pc, #556]	; (8001680 <calcBuf+0x870>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f85c 	bl	8000514 <__aeabi_ui2d>
 800145c:	a386      	add	r3, pc, #536	; (adr r3, 8001678 <calcBuf+0x868>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	f7ff f9fb 	bl	800085c <__aeabi_ddiv>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fadd 	bl	8000a2c <__aeabi_d2uiz>
 8001472:	4603      	mov	r3, r0
 8001474:	b29a      	uxth	r2, r3
 8001476:	e012      	b.n	800149e <calcBuf+0x68e>
 8001478:	4b81      	ldr	r3, [pc, #516]	; (8001680 <calcBuf+0x870>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f848 	bl	8000514 <__aeabi_ui2d>
 8001484:	a37a      	add	r3, pc, #488	; (adr r3, 8001670 <calcBuf+0x860>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7ff f9e7 	bl	800085c <__aeabi_ddiv>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff fac9 	bl	8000a2c <__aeabi_d2uiz>
 800149a:	4603      	mov	r3, r0
 800149c:	b29a      	uxth	r2, r3
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	1c59      	adds	r1, r3, #1
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	4977      	ldr	r1, [pc, #476]	; (8001684 <calcBuf+0x874>)
 80014a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	// Col:Blue , Bit:7..0
	WS2812_TIM_BUF[pos++]=((led.blue&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80014aa:	79bb      	ldrb	r3, [r7, #6]
 80014ac:	b25b      	sxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	da13      	bge.n	80014da <calcBuf+0x6ca>
 80014b2:	4b73      	ldr	r3, [pc, #460]	; (8001680 <calcBuf+0x870>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f82b 	bl	8000514 <__aeabi_ui2d>
 80014be:	a36e      	add	r3, pc, #440	; (adr r3, 8001678 <calcBuf+0x868>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f9ca 	bl	800085c <__aeabi_ddiv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff faac 	bl	8000a2c <__aeabi_d2uiz>
 80014d4:	4603      	mov	r3, r0
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	e012      	b.n	8001500 <calcBuf+0x6f0>
 80014da:	4b69      	ldr	r3, [pc, #420]	; (8001680 <calcBuf+0x870>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f817 	bl	8000514 <__aeabi_ui2d>
 80014e6:	a362      	add	r3, pc, #392	; (adr r3, 8001670 <calcBuf+0x860>)
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	f7ff f9b6 	bl	800085c <__aeabi_ddiv>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fa98 	bl	8000a2c <__aeabi_d2uiz>
 80014fc:	4603      	mov	r3, r0
 80014fe:	b29a      	uxth	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	1c59      	adds	r1, r3, #1
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	495f      	ldr	r1, [pc, #380]	; (8001684 <calcBuf+0x874>)
 8001508:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800150c:	79bb      	ldrb	r3, [r7, #6]
 800150e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001512:	2b00      	cmp	r3, #0
 8001514:	d013      	beq.n	800153e <calcBuf+0x72e>
 8001516:	4b5a      	ldr	r3, [pc, #360]	; (8001680 <calcBuf+0x870>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe fff9 	bl	8000514 <__aeabi_ui2d>
 8001522:	a355      	add	r3, pc, #340	; (adr r3, 8001678 <calcBuf+0x868>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7ff f998 	bl	800085c <__aeabi_ddiv>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	f7ff fa7a 	bl	8000a2c <__aeabi_d2uiz>
 8001538:	4603      	mov	r3, r0
 800153a:	b29a      	uxth	r2, r3
 800153c:	e012      	b.n	8001564 <calcBuf+0x754>
 800153e:	4b50      	ldr	r3, [pc, #320]	; (8001680 <calcBuf+0x870>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe ffe5 	bl	8000514 <__aeabi_ui2d>
 800154a:	a349      	add	r3, pc, #292	; (adr r3, 8001670 <calcBuf+0x860>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	f7ff f984 	bl	800085c <__aeabi_ddiv>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	f7ff fa66 	bl	8000a2c <__aeabi_d2uiz>
 8001560:	4603      	mov	r3, r0
 8001562:	b29a      	uxth	r2, r3
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	1c59      	adds	r1, r3, #1
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	4946      	ldr	r1, [pc, #280]	; (8001684 <calcBuf+0x874>)
 800156c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001570:	79bb      	ldrb	r3, [r7, #6]
 8001572:	f003 0320 	and.w	r3, r3, #32
 8001576:	2b00      	cmp	r3, #0
 8001578:	d013      	beq.n	80015a2 <calcBuf+0x792>
 800157a:	4b41      	ldr	r3, [pc, #260]	; (8001680 <calcBuf+0x870>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001580:	4618      	mov	r0, r3
 8001582:	f7fe ffc7 	bl	8000514 <__aeabi_ui2d>
 8001586:	a33c      	add	r3, pc, #240	; (adr r3, 8001678 <calcBuf+0x868>)
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	f7ff f966 	bl	800085c <__aeabi_ddiv>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4610      	mov	r0, r2
 8001596:	4619      	mov	r1, r3
 8001598:	f7ff fa48 	bl	8000a2c <__aeabi_d2uiz>
 800159c:	4603      	mov	r3, r0
 800159e:	b29a      	uxth	r2, r3
 80015a0:	e012      	b.n	80015c8 <calcBuf+0x7b8>
 80015a2:	4b37      	ldr	r3, [pc, #220]	; (8001680 <calcBuf+0x870>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ffb3 	bl	8000514 <__aeabi_ui2d>
 80015ae:	a330      	add	r3, pc, #192	; (adr r3, 8001670 <calcBuf+0x860>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7ff f952 	bl	800085c <__aeabi_ddiv>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fa34 	bl	8000a2c <__aeabi_d2uiz>
 80015c4:	4603      	mov	r3, r0
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	1c59      	adds	r1, r3, #1
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	492d      	ldr	r1, [pc, #180]	; (8001684 <calcBuf+0x874>)
 80015d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80015d4:	79bb      	ldrb	r3, [r7, #6]
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d013      	beq.n	8001606 <calcBuf+0x7f6>
 80015de:	4b28      	ldr	r3, [pc, #160]	; (8001680 <calcBuf+0x870>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7fe ff95 	bl	8000514 <__aeabi_ui2d>
 80015ea:	a323      	add	r3, pc, #140	; (adr r3, 8001678 <calcBuf+0x868>)
 80015ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f0:	f7ff f934 	bl	800085c <__aeabi_ddiv>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff fa16 	bl	8000a2c <__aeabi_d2uiz>
 8001600:	4603      	mov	r3, r0
 8001602:	b29a      	uxth	r2, r3
 8001604:	e012      	b.n	800162c <calcBuf+0x81c>
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <calcBuf+0x870>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	4618      	mov	r0, r3
 800160e:	f7fe ff81 	bl	8000514 <__aeabi_ui2d>
 8001612:	a317      	add	r3, pc, #92	; (adr r3, 8001670 <calcBuf+0x860>)
 8001614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001618:	f7ff f920 	bl	800085c <__aeabi_ddiv>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fa02 	bl	8000a2c <__aeabi_d2uiz>
 8001628:	4603      	mov	r3, r0
 800162a:	b29a      	uxth	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	1c59      	adds	r1, r3, #1
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	4914      	ldr	r1, [pc, #80]	; (8001684 <calcBuf+0x874>)
 8001634:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001638:	79bb      	ldrb	r3, [r7, #6]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d022      	beq.n	8001688 <calcBuf+0x878>
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <calcBuf+0x870>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff63 	bl	8000514 <__aeabi_ui2d>
 800164e:	a30a      	add	r3, pc, #40	; (adr r3, 8001678 <calcBuf+0x868>)
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	f7ff f902 	bl	800085c <__aeabi_ddiv>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f7ff f9e4 	bl	8000a2c <__aeabi_d2uiz>
 8001664:	4603      	mov	r3, r0
 8001666:	b29a      	uxth	r2, r3
 8001668:	e021      	b.n	80016ae <calcBuf+0x89e>
 800166a:	bf00      	nop
 800166c:	f3af 8000 	nop.w
 8001670:	8ba2e8ba 	.word	0x8ba2e8ba
 8001674:	4016ba2e 	.word	0x4016ba2e
 8001678:	08d3dcb1 	.word	0x08d3dcb1
 800167c:	40013dcb 	.word	0x40013dcb
 8001680:	2000fd10 	.word	0x2000fd10
 8001684:	2000f410 	.word	0x2000f410
 8001688:	4b69      	ldr	r3, [pc, #420]	; (8001830 <calcBuf+0xa20>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff40 	bl	8000514 <__aeabi_ui2d>
 8001694:	a362      	add	r3, pc, #392	; (adr r3, 8001820 <calcBuf+0xa10>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7ff f8df 	bl	800085c <__aeabi_ddiv>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f7ff f9c1 	bl	8000a2c <__aeabi_d2uiz>
 80016aa:	4603      	mov	r3, r0
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	1c59      	adds	r1, r3, #1
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	495f      	ldr	r1, [pc, #380]	; (8001834 <calcBuf+0xa24>)
 80016b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80016ba:	79bb      	ldrb	r3, [r7, #6]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d013      	beq.n	80016ec <calcBuf+0x8dc>
 80016c4:	4b5a      	ldr	r3, [pc, #360]	; (8001830 <calcBuf+0xa20>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe ff22 	bl	8000514 <__aeabi_ui2d>
 80016d0:	a355      	add	r3, pc, #340	; (adr r3, 8001828 <calcBuf+0xa18>)
 80016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d6:	f7ff f8c1 	bl	800085c <__aeabi_ddiv>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	f7ff f9a3 	bl	8000a2c <__aeabi_d2uiz>
 80016e6:	4603      	mov	r3, r0
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	e012      	b.n	8001712 <calcBuf+0x902>
 80016ec:	4b50      	ldr	r3, [pc, #320]	; (8001830 <calcBuf+0xa20>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe ff0e 	bl	8000514 <__aeabi_ui2d>
 80016f8:	a349      	add	r3, pc, #292	; (adr r3, 8001820 <calcBuf+0xa10>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	f7ff f8ad 	bl	800085c <__aeabi_ddiv>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f7ff f98f 	bl	8000a2c <__aeabi_d2uiz>
 800170e:	4603      	mov	r3, r0
 8001710:	b29a      	uxth	r2, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	1c59      	adds	r1, r3, #1
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	4946      	ldr	r1, [pc, #280]	; (8001834 <calcBuf+0xa24>)
 800171a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800171e:	79bb      	ldrb	r3, [r7, #6]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d013      	beq.n	8001750 <calcBuf+0x940>
 8001728:	4b41      	ldr	r3, [pc, #260]	; (8001830 <calcBuf+0xa20>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fef0 	bl	8000514 <__aeabi_ui2d>
 8001734:	a33c      	add	r3, pc, #240	; (adr r3, 8001828 <calcBuf+0xa18>)
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	f7ff f88f 	bl	800085c <__aeabi_ddiv>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	f7ff f971 	bl	8000a2c <__aeabi_d2uiz>
 800174a:	4603      	mov	r3, r0
 800174c:	b29a      	uxth	r2, r3
 800174e:	e012      	b.n	8001776 <calcBuf+0x966>
 8001750:	4b37      	ldr	r3, [pc, #220]	; (8001830 <calcBuf+0xa20>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fedc 	bl	8000514 <__aeabi_ui2d>
 800175c:	a330      	add	r3, pc, #192	; (adr r3, 8001820 <calcBuf+0xa10>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7ff f87b 	bl	800085c <__aeabi_ddiv>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff f95d 	bl	8000a2c <__aeabi_d2uiz>
 8001772:	4603      	mov	r3, r0
 8001774:	b29a      	uxth	r2, r3
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	1c59      	adds	r1, r3, #1
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	492d      	ldr	r1, [pc, #180]	; (8001834 <calcBuf+0xa24>)
 800177e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001782:	79bb      	ldrb	r3, [r7, #6]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b00      	cmp	r3, #0
 800178a:	d013      	beq.n	80017b4 <calcBuf+0x9a4>
 800178c:	4b28      	ldr	r3, [pc, #160]	; (8001830 <calcBuf+0xa20>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe febe 	bl	8000514 <__aeabi_ui2d>
 8001798:	a323      	add	r3, pc, #140	; (adr r3, 8001828 <calcBuf+0xa18>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7ff f85d 	bl	800085c <__aeabi_ddiv>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f7ff f93f 	bl	8000a2c <__aeabi_d2uiz>
 80017ae:	4603      	mov	r3, r0
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	e012      	b.n	80017da <calcBuf+0x9ca>
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <calcBuf+0xa20>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe feaa 	bl	8000514 <__aeabi_ui2d>
 80017c0:	a317      	add	r3, pc, #92	; (adr r3, 8001820 <calcBuf+0xa10>)
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	f7ff f849 	bl	800085c <__aeabi_ddiv>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4610      	mov	r0, r2
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff f92b 	bl	8000a2c <__aeabi_d2uiz>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	1c59      	adds	r1, r3, #1
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	4914      	ldr	r1, [pc, #80]	; (8001834 <calcBuf+0xa24>)
 80017e2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(n=0;n<WS2812_NUM_LEDS_CH1;n++) {
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3301      	adds	r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b2d      	cmp	r3, #45	; 0x2d
 80017f0:	f67f ab17 	bls.w	8000e22 <calcBuf+0x12>
  }

  // short pause after all LEDs have been updated
  for(n=0;n<48;n++) {
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	e009      	b.n	800180e <calcBuf+0x9fe>
    WS2812_TIM_BUF[pos++]=0;
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	60ba      	str	r2, [r7, #8]
 8001800:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <calcBuf+0xa24>)
 8001802:	2100      	movs	r1, #0
 8001804:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(n=0;n<48;n++) {
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3301      	adds	r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2b2f      	cmp	r3, #47	; 0x2f
 8001812:	d9f2      	bls.n	80017fa <calcBuf+0x9ea>
  }
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	8ba2e8ba 	.word	0x8ba2e8ba
 8001824:	4016ba2e 	.word	0x4016ba2e
 8001828:	08d3dcb1 	.word	0x08d3dcb1
 800182c:	40013dcb 	.word	0x40013dcb
 8001830:	2000fd10 	.word	0x2000fd10
 8001834:	2000f410 	.word	0x2000f410

08001838 <startDMA>:

/**
 * Internal function; start DMA transfer
 */
void startDMA(void) {
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	//uint8_t test[8] = {10};
	dma_ready = 0;
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <startDMA+0x1c>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t *)WS2812_TIM_BUF, WS2812_BUFLEN);
 8001842:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001846:	4a04      	ldr	r2, [pc, #16]	; (8001858 <startDMA+0x20>)
 8001848:	2104      	movs	r1, #4
 800184a:	4804      	ldr	r0, [pc, #16]	; (800185c <startDMA+0x24>)
 800184c:	f007 fcd4 	bl	80091f8 <HAL_TIM_PWM_Start_DMA>
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000004 	.word	0x20000004
 8001858:	2000f410 	.word	0x2000f410
 800185c:	2000fd10 	.word	0x2000fd10

08001860 <WS2812_Refresh>:

void WS2812_Refresh(void) {
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	while(!dma_ready);
 8001864:	bf00      	nop
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <WS2812_Refresh+0x1c>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0fb      	beq.n	8001866 <WS2812_Refresh+0x6>
	calcBuf();
 800186e:	f7ff facf 	bl	8000e10 <calcBuf>
	startDMA();
 8001872:	f7ff ffe1 	bl	8001838 <startDMA>
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000004 	.word	0x20000004

08001880 <WS2812_Clear>:

/**
 * Set all LEDs to 0 (off) and update
 */
void WS2812_Clear(uint8_t refresh) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
	uint16_t num;

	for(num = 0; num < WS2812_NUM_LEDS_CH1; num++) {
 800188a:	2300      	movs	r3, #0
 800188c:	81fb      	strh	r3, [r7, #14]
 800188e:	e01a      	b.n	80018c6 <WS2812_Clear+0x46>
		WS2812_LED_BUF_CH1[num] = (WS2812_RGB_t){0,0,0};
 8001890:	89fa      	ldrh	r2, [r7, #14]
 8001892:	4913      	ldr	r1, [pc, #76]	; (80018e0 <WS2812_Clear+0x60>)
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	440b      	add	r3, r1
 800189c:	2100      	movs	r1, #0
 800189e:	7019      	strb	r1, [r3, #0]
 80018a0:	490f      	ldr	r1, [pc, #60]	; (80018e0 <WS2812_Clear+0x60>)
 80018a2:	4613      	mov	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	440b      	add	r3, r1
 80018aa:	3301      	adds	r3, #1
 80018ac:	2100      	movs	r1, #0
 80018ae:	7019      	strb	r1, [r3, #0]
 80018b0:	490b      	ldr	r1, [pc, #44]	; (80018e0 <WS2812_Clear+0x60>)
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	3302      	adds	r3, #2
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
	for(num = 0; num < WS2812_NUM_LEDS_CH1; num++) {
 80018c0:	89fb      	ldrh	r3, [r7, #14]
 80018c2:	3301      	adds	r3, #1
 80018c4:	81fb      	strh	r3, [r7, #14]
 80018c6:	89fb      	ldrh	r3, [r7, #14]
 80018c8:	2b2d      	cmp	r3, #45	; 0x2d
 80018ca:	d9e1      	bls.n	8001890 <WS2812_Clear+0x10>
	}

	 if(refresh==1) WS2812_Refresh();
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <WS2812_Clear+0x56>
 80018d2:	f7ff ffc5 	bl	8001860 <WS2812_Refresh>
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000fdb8 	.word	0x2000fdb8

080018e4 <WS2812_One_RGB>:

/**
 * Set one LED (R, G, B values). If refresh == 1, update LEDs, otherwise just update buffer (if several function calls are to be done before refresh)
 */
void WS2812_One_RGB(uint32_t nr, WS2812_RGB_t rgb_col, uint8_t refresh)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	4613      	mov	r3, r2
 80018f0:	71fb      	strb	r3, [r7, #7]
  if(nr<WS2812_NUM_LEDS_CH1) {
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b2d      	cmp	r3, #45	; 0x2d
 80018f6:	d811      	bhi.n	800191c <WS2812_One_RGB+0x38>
	  WS2812_LED_BUF_CH1[nr]=rgb_col;
 80018f8:	490a      	ldr	r1, [pc, #40]	; (8001924 <WS2812_One_RGB+0x40>)
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	4613      	mov	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4413      	add	r3, r2
 8001902:	440b      	add	r3, r1
 8001904:	461a      	mov	r2, r3
 8001906:	f107 0308 	add.w	r3, r7, #8
 800190a:	8819      	ldrh	r1, [r3, #0]
 800190c:	789b      	ldrb	r3, [r3, #2]
 800190e:	8011      	strh	r1, [r2, #0]
 8001910:	7093      	strb	r3, [r2, #2]

    if(refresh==1) WS2812_Refresh();
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <WS2812_One_RGB+0x38>
 8001918:	f7ff ffa2 	bl	8001860 <WS2812_Refresh>
  }
}
 800191c:	bf00      	nop
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000fdb8 	.word	0x2000fdb8

08001928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	BufferIsSet = 0;
 800192c:	4b2f      	ldr	r3, [pc, #188]	; (80019ec <main+0xc4>)
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001932:	f002 fe13 	bl	800455c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001936:	f000 f881 	bl	8001a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800193a:	f000 fca3 	bl	8002284 <MX_GPIO_Init>
  MX_LTDC_Init();
 800193e:	f000 fa7b 	bl	8001e38 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8001942:	f000 f9f1 	bl	8001d28 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001946:	f000 fc3f 	bl	80021c8 <MX_FMC_Init>
  MX_CRC_Init();
 800194a:	f000 f9d9 	bl	8001d00 <MX_CRC_Init>
  MX_TIM13_Init();
 800194e:	f000 fb95 	bl	800207c <MX_TIM13_Init>
  MX_CAN1_Init();
 8001952:	f000 f931 	bl	8001bb8 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001956:	f000 f99d 	bl	8001c94 <MX_CAN2_Init>
  MX_I2C2_Init();
 800195a:	f000 fa2d 	bl	8001db8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 800195e:	f000 faed 	bl	8001f3c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001962:	f00a f83f 	bl	800b9e4 <MX_FATFS_Init>
  MX_ADC1_Init();
 8001966:	f000 f8d5 	bl	8001b14 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 800196a:	f000 fbff 	bl	800216c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800196e:	f000 fb05 	bl	8001f7c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001972:	f000 fbd1 	bl	8002118 <MX_USART1_UART_Init>
  MX_TouchGFX_Init();
 8001976:	f00d ff51 	bl	800f81c <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 800197a:	2100      	movs	r1, #0
 800197c:	481c      	ldr	r0, [pc, #112]	; (80019f0 <main+0xc8>)
 800197e:	f007 fb73 	bl	8009068 <HAL_TIM_PWM_Start>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001982:	f00a fb13 	bl	800bfac <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of START_Task */
  START_TaskHandle = osThreadNew(Start_START_Task, NULL, &START_Task_attributes);
 8001986:	4a1b      	ldr	r2, [pc, #108]	; (80019f4 <main+0xcc>)
 8001988:	2100      	movs	r1, #0
 800198a:	481b      	ldr	r0, [pc, #108]	; (80019f8 <main+0xd0>)
 800198c:	f00a fb8f 	bl	800c0ae <osThreadNew>
 8001990:	4603      	mov	r3, r0
 8001992:	4a1a      	ldr	r2, [pc, #104]	; (80019fc <main+0xd4>)
 8001994:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001996:	4a1a      	ldr	r2, [pc, #104]	; (8001a00 <main+0xd8>)
 8001998:	2100      	movs	r1, #0
 800199a:	481a      	ldr	r0, [pc, #104]	; (8001a04 <main+0xdc>)
 800199c:	f00a fb87 	bl	800c0ae <osThreadNew>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4a19      	ldr	r2, [pc, #100]	; (8001a08 <main+0xe0>)
 80019a4:	6013      	str	r3, [r2, #0]

  /* creation of CAN_Task */
  CAN_TaskHandle = osThreadNew(Start_CAN_Task, NULL, &CAN_Task_attributes);
 80019a6:	4a19      	ldr	r2, [pc, #100]	; (8001a0c <main+0xe4>)
 80019a8:	2100      	movs	r1, #0
 80019aa:	4819      	ldr	r0, [pc, #100]	; (8001a10 <main+0xe8>)
 80019ac:	f00a fb7f 	bl	800c0ae <osThreadNew>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4a18      	ldr	r2, [pc, #96]	; (8001a14 <main+0xec>)
 80019b4:	6013      	str	r3, [r2, #0]

  /* creation of BTN_Task */
  BTN_TaskHandle = osThreadNew(Start_BTN_Task, NULL, &BTN_Task_attributes);
 80019b6:	4a18      	ldr	r2, [pc, #96]	; (8001a18 <main+0xf0>)
 80019b8:	2100      	movs	r1, #0
 80019ba:	4818      	ldr	r0, [pc, #96]	; (8001a1c <main+0xf4>)
 80019bc:	f00a fb77 	bl	800c0ae <osThreadNew>
 80019c0:	4603      	mov	r3, r0
 80019c2:	4a17      	ldr	r2, [pc, #92]	; (8001a20 <main+0xf8>)
 80019c4:	6013      	str	r3, [r2, #0]

  /* creation of RGB_Task */
  RGB_TaskHandle = osThreadNew(Start_RGB_Task, NULL, &RGB_Task_attributes);
 80019c6:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <main+0xfc>)
 80019c8:	2100      	movs	r1, #0
 80019ca:	4817      	ldr	r0, [pc, #92]	; (8001a28 <main+0x100>)
 80019cc:	f00a fb6f 	bl	800c0ae <osThreadNew>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4a16      	ldr	r2, [pc, #88]	; (8001a2c <main+0x104>)
 80019d4:	6013      	str	r3, [r2, #0]

  /* creation of BMS_Task */
  BMS_TaskHandle = osThreadNew(Start_BMS_Task, NULL, &BMS_Task_attributes);
 80019d6:	4a16      	ldr	r2, [pc, #88]	; (8001a30 <main+0x108>)
 80019d8:	2100      	movs	r1, #0
 80019da:	4816      	ldr	r0, [pc, #88]	; (8001a34 <main+0x10c>)
 80019dc:	f00a fb67 	bl	800c0ae <osThreadNew>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4a15      	ldr	r2, [pc, #84]	; (8001a38 <main+0x110>)
 80019e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80019e6:	f00a fb27 	bl	800c038 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 80019ea:	e7fe      	b.n	80019ea <main+0xc2>
 80019ec:	2000fe48 	.word	0x2000fe48
 80019f0:	20010738 	.word	0x20010738
 80019f4:	0802f9dc 	.word	0x0802f9dc
 80019f8:	080025d1 	.word	0x080025d1
 80019fc:	20010614 	.word	0x20010614
 8001a00:	0802fa00 	.word	0x0802fa00
 8001a04:	0800f829 	.word	0x0800f829
 8001a08:	20010730 	.word	0x20010730
 8001a0c:	0802fa24 	.word	0x0802fa24
 8001a10:	08002631 	.word	0x08002631
 8001a14:	20011058 	.word	0x20011058
 8001a18:	0802fa48 	.word	0x0802fa48
 8001a1c:	080030fd 	.word	0x080030fd
 8001a20:	20010fcc 	.word	0x20010fcc
 8001a24:	0802fa6c 	.word	0x0802fa6c
 8001a28:	080031fd 	.word	0x080031fd
 8001a2c:	2000fe44 	.word	0x2000fe44
 8001a30:	0802fa90 	.word	0x0802fa90
 8001a34:	080033ed 	.word	0x080033ed
 8001a38:	20010734 	.word	0x20010734

08001a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b094      	sub	sp, #80	; 0x50
 8001a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a42:	f107 0320 	add.w	r3, r7, #32
 8001a46:	2230      	movs	r2, #48	; 0x30
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f02c f8c4 	bl	802dbd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <SystemClock_Config+0xd0>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	4a28      	ldr	r2, [pc, #160]	; (8001b0c <SystemClock_Config+0xd0>)
 8001a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a70:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <SystemClock_Config+0xd0>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <SystemClock_Config+0xd4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a22      	ldr	r2, [pc, #136]	; (8001b10 <SystemClock_Config+0xd4>)
 8001a86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <SystemClock_Config+0xd4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001aa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001aac:	2306      	movs	r3, #6
 8001aae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ab0:	23a8      	movs	r3, #168	; 0xa8
 8001ab2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ab8:	2307      	movs	r3, #7
 8001aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001abc:	f107 0320 	add.w	r3, r7, #32
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f005 fa3b 	bl	8006f3c <HAL_RCC_OscConfig>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001acc:	f001 fe12 	bl	80036f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad0:	230f      	movs	r3, #15
 8001ad2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001adc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ae0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2105      	movs	r1, #5
 8001aee:	4618      	mov	r0, r3
 8001af0:	f005 fc9c 	bl	800742c <HAL_RCC_ClockConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001afa:	f001 fdfb 	bl	80036f4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001afe:	f005 fd7b 	bl	80075f8 <HAL_RCC_EnableCSS>
}
 8001b02:	bf00      	nop
 8001b04:	3750      	adds	r7, #80	; 0x50
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40007000 	.word	0x40007000

08001b14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b26:	4b21      	ldr	r3, [pc, #132]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b28:	4a21      	ldr	r2, [pc, #132]	; (8001bb0 <MX_ADC1_Init+0x9c>)
 8001b2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b32:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b40:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b46:	4b19      	ldr	r3, [pc, #100]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b4e:	4b17      	ldr	r3, [pc, #92]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b54:	4b15      	ldr	r3, [pc, #84]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b56:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <MX_ADC1_Init+0xa0>)
 8001b58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b5a:	4b14      	ldr	r3, [pc, #80]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b6e:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b74:	480d      	ldr	r0, [pc, #52]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b76:	f002 fd43 	bl	8004600 <HAL_ADC_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b80:	f001 fdb8 	bl	80036f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001b84:	230b      	movs	r3, #11
 8001b86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b90:	463b      	mov	r3, r7
 8001b92:	4619      	mov	r1, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_ADC1_Init+0x98>)
 8001b96:	f002 fd77 	bl	8004688 <HAL_ADC_ConfigChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ba0:	f001 fda8 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	200106c0 	.word	0x200106c0
 8001bb0:	40012000 	.word	0x40012000
 8001bb4:	0f000001 	.word	0x0f000001

08001bb8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08c      	sub	sp, #48	; 0x30
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001bbe:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <MX_CAN1_Init+0xd0>)
 8001bc0:	4a32      	ldr	r2, [pc, #200]	; (8001c8c <MX_CAN1_Init+0xd4>)
 8001bc2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 8001bc4:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <MX_CAN1_Init+0xd0>)
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001bca:	4b2f      	ldr	r3, [pc, #188]	; (8001c88 <MX_CAN1_Init+0xd0>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001bd0:	4b2d      	ldr	r3, [pc, #180]	; (8001c88 <MX_CAN1_Init+0xd0>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001bd6:	4b2c      	ldr	r3, [pc, #176]	; (8001c88 <MX_CAN1_Init+0xd0>)
 8001bd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bdc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001bde:	4b2a      	ldr	r3, [pc, #168]	; (8001c88 <MX_CAN1_Init+0xd0>)
 8001be0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001be4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001be6:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <MX_CAN1_Init+0xd0>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001bec:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <MX_CAN1_Init+0xd0>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001bf2:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <MX_CAN1_Init+0xd0>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001bf8:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <MX_CAN1_Init+0xd0>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001bfe:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <MX_CAN1_Init+0xd0>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c04:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <MX_CAN1_Init+0xd0>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c0a:	481f      	ldr	r0, [pc, #124]	; (8001c88 <MX_CAN1_Init+0xd0>)
 8001c0c:	f002 ff6a 	bl	8004ae4 <HAL_CAN_Init>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001c16:	f001 fd6d 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	sFilterConfig.FilterBank = 15;
 8001c1a:	230f      	movs	r3, #15
 8001c1c:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001c22:	2301      	movs	r3, #1
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = 0x0000;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = 0x0000;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
	//sFilterConfig.SlaveStartFilterBank = 14;
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	4619      	mov	r1, r3
 8001c44:	4810      	ldr	r0, [pc, #64]	; (8001c88 <MX_CAN1_Init+0xd0>)
 8001c46:	f003 f849 	bl	8004cdc <HAL_CAN_ConfigFilter>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <MX_CAN1_Init+0x9c>
		/* Filter configuration Error */
		Error_Handler();
 8001c50:	f001 fd50 	bl	80036f4 <Error_Handler>
	}
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001c54:	480c      	ldr	r0, [pc, #48]	; (8001c88 <MX_CAN1_Init+0xd0>)
 8001c56:	f003 f921 	bl	8004e9c <HAL_CAN_Start>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_CAN1_Init+0xac>
		/* Start Error */
		Error_Handler();
 8001c60:	f001 fd48 	bl	80036f4 <Error_Handler>
	}

	__HAL_RCC_CAN1_CLK_ENABLE();
 8001c64:	2300      	movs	r3, #0
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <MX_CAN1_Init+0xd8>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	4a08      	ldr	r2, [pc, #32]	; (8001c90 <MX_CAN1_Init+0xd8>)
 8001c6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c72:	6413      	str	r3, [r2, #64]	; 0x40
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <MX_CAN1_Init+0xd8>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	687b      	ldr	r3, [r7, #4]
	//__HAL_RCC_CAN2_CLK_ENABLE();
  /* USER CODE END CAN1_Init 2 */

}
 8001c80:	bf00      	nop
 8001c82:	3730      	adds	r7, #48	; 0x30
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	200110a4 	.word	0x200110a4
 8001c8c:	40006400 	.word	0x40006400
 8001c90:	40023800 	.word	0x40023800

08001c94 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001c98:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <MX_CAN2_Init+0x64>)
 8001c9a:	4a18      	ldr	r2, [pc, #96]	; (8001cfc <MX_CAN2_Init+0x68>)
 8001c9c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 12;
 8001c9e:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <MX_CAN2_Init+0x64>)
 8001ca0:	220c      	movs	r2, #12
 8001ca2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001ca4:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <MX_CAN2_Init+0x64>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001caa:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <MX_CAN2_Init+0x64>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_CAN2_Init+0x64>)
 8001cb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cb6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <MX_CAN2_Init+0x64>)
 8001cba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001cbe:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <MX_CAN2_Init+0x64>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <MX_CAN2_Init+0x64>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <MX_CAN2_Init+0x64>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <MX_CAN2_Init+0x64>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001cd8:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <MX_CAN2_Init+0x64>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <MX_CAN2_Init+0x64>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001ce4:	4804      	ldr	r0, [pc, #16]	; (8001cf8 <MX_CAN2_Init+0x64>)
 8001ce6:	f002 fefd 	bl	8004ae4 <HAL_CAN_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001cf0:	f001 fd00 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20010708 	.word	0x20010708
 8001cfc:	40006800 	.word	0x40006800

08001d00 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <MX_CRC_Init+0x20>)
 8001d06:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <MX_CRC_Init+0x24>)
 8001d08:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001d0a:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_CRC_Init+0x20>)
 8001d0c:	f003 fe12 	bl	8005934 <HAL_CRC_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001d16:	f001 fced 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20010358 	.word	0x20010358
 8001d24:	40023000 	.word	0x40023000

08001d28 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001d2c:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <MX_DMA2D_Init+0x88>)
 8001d2e:	4a21      	ldr	r2, [pc, #132]	; (8001db4 <MX_DMA2D_Init+0x8c>)
 8001d30:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_BLEND;
 8001d32:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <MX_DMA2D_Init+0x88>)
 8001d34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d38:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <MX_DMA2D_Init+0x88>)
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001d40:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <MX_DMA2D_Init+0x88>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[0].InputOffset = 0;
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <MX_DMA2D_Init+0x88>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 8001d4c:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <MX_DMA2D_Init+0x88>)
 8001d4e:	2202      	movs	r2, #2
 8001d50:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <MX_DMA2D_Init+0x88>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	621a      	str	r2, [r3, #32]
  hdma2d.LayerCfg[0].InputAlpha = 0;
 8001d58:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <MX_DMA2D_Init+0x88>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001d5e:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <MX_DMA2D_Init+0x88>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <MX_DMA2D_Init+0x88>)
 8001d66:	2202      	movs	r2, #2
 8001d68:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <MX_DMA2D_Init+0x88>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <MX_DMA2D_Init+0x88>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001d76:	480e      	ldr	r0, [pc, #56]	; (8001db0 <MX_DMA2D_Init+0x88>)
 8001d78:	f003 fe8a 	bl	8005a90 <HAL_DMA2D_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 8001d82:	f001 fcb7 	bl	80036f4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 0) != HAL_OK)
 8001d86:	2100      	movs	r1, #0
 8001d88:	4809      	ldr	r0, [pc, #36]	; (8001db0 <MX_DMA2D_Init+0x88>)
 8001d8a:	f003 ffdb 	bl	8005d44 <HAL_DMA2D_ConfigLayer>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 8001d94:	f001 fcae 	bl	80036f4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001d98:	2101      	movs	r1, #1
 8001d9a:	4805      	ldr	r0, [pc, #20]	; (8001db0 <MX_DMA2D_Init+0x88>)
 8001d9c:	f003 ffd2 	bl	8005d44 <HAL_DMA2D_ConfigLayer>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_DMA2D_Init+0x82>
  {
    Error_Handler();
 8001da6:	f001 fca5 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	2001105c 	.word	0x2001105c
 8001db4:	4002b000 	.word	0x4002b000

08001db8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001dbe:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <MX_I2C2_Init+0x78>)
 8001dc0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001dc4:	4a1b      	ldr	r2, [pc, #108]	; (8001e34 <MX_I2C2_Init+0x7c>)
 8001dc6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dc8:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001dce:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dd4:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001dd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dda:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ddc:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001de2:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001de8:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dee:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001df4:	480d      	ldr	r0, [pc, #52]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001df6:	f004 fa2f 	bl	8006258 <HAL_I2C_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e00:	f001 fc78 	bl	80036f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e04:	2100      	movs	r1, #0
 8001e06:	4809      	ldr	r0, [pc, #36]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001e08:	f004 fb6a 	bl	80064e0 <HAL_I2CEx_ConfigAnalogFilter>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001e12:	f001 fc6f 	bl	80036f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e16:	2100      	movs	r1, #0
 8001e18:	4804      	ldr	r0, [pc, #16]	; (8001e2c <MX_I2C2_Init+0x74>)
 8001e1a:	f004 fb9d 	bl	8006558 <HAL_I2CEx_ConfigDigitalFilter>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001e24:	f001 fc66 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	20010360 	.word	0x20010360
 8001e30:	40005800 	.word	0x40005800
 8001e34:	00061a80 	.word	0x00061a80

08001e38 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08e      	sub	sp, #56	; 0x38
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	2234      	movs	r2, #52	; 0x34
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f02b fec7 	bl	802dbd8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001e4a:	4b3a      	ldr	r3, [pc, #232]	; (8001f34 <MX_LTDC_Init+0xfc>)
 8001e4c:	4a3a      	ldr	r2, [pc, #232]	; (8001f38 <MX_LTDC_Init+0x100>)
 8001e4e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001e50:	4b38      	ldr	r3, [pc, #224]	; (8001f34 <MX_LTDC_Init+0xfc>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001e56:	4b37      	ldr	r3, [pc, #220]	; (8001f34 <MX_LTDC_Init+0xfc>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001e5c:	4b35      	ldr	r3, [pc, #212]	; (8001f34 <MX_LTDC_Init+0xfc>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001e62:	4b34      	ldr	r3, [pc, #208]	; (8001f34 <MX_LTDC_Init+0xfc>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 20;
 8001e68:	4b32      	ldr	r3, [pc, #200]	; (8001f34 <MX_LTDC_Init+0xfc>)
 8001e6a:	2214      	movs	r2, #20
 8001e6c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001e6e:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <MX_LTDC_Init+0xfc>)
 8001e70:	2203      	movs	r2, #3
 8001e72:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 160;
 8001e74:	4b2f      	ldr	r3, [pc, #188]	; (8001f34 <MX_LTDC_Init+0xfc>)
 8001e76:	22a0      	movs	r2, #160	; 0xa0
 8001e78:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 15;
 8001e7a:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <MX_LTDC_Init+0xfc>)
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 960;
 8001e80:	4b2c      	ldr	r3, [pc, #176]	; (8001f34 <MX_LTDC_Init+0xfc>)
 8001e82:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 495;
 8001e88:	4b2a      	ldr	r3, [pc, #168]	; (8001f34 <MX_LTDC_Init+0xfc>)
 8001e8a:	f240 12ef 	movw	r2, #495	; 0x1ef
 8001e8e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1120;
 8001e90:	4b28      	ldr	r3, [pc, #160]	; (8001f34 <MX_LTDC_Init+0xfc>)
 8001e92:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8001e96:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 515;
 8001e98:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <MX_LTDC_Init+0xfc>)
 8001e9a:	f240 2203 	movw	r2, #515	; 0x203
 8001e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001ea0:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <MX_LTDC_Init+0xfc>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001ea8:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <MX_LTDC_Init+0xfc>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001eb0:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <MX_LTDC_Init+0xfc>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001eb8:	481e      	ldr	r0, [pc, #120]	; (8001f34 <MX_LTDC_Init+0xfc>)
 8001eba:	f004 fb8d 	bl	80065d8 <HAL_LTDC_Init>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001ec4:	f001 fc16 	bl	80036f4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8001ecc:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001ed0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001ed6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001eda:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001edc:	2302      	movs	r3, #2
 8001ede:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001ee0:	23ff      	movs	r3, #255	; 0xff
 8001ee2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001ee8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001eec:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001eee:	2307      	movs	r3, #7
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001ef2:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8001ef8:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001efc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8001efe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001f02:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	2200      	movs	r2, #0
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4805      	ldr	r0, [pc, #20]	; (8001f34 <MX_LTDC_Init+0xfc>)
 8001f1e:	f004 fce3 	bl	80068e8 <HAL_LTDC_ConfigLayer>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001f28:	f001 fbe4 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001f2c:	bf00      	nop
 8001f2e:	3738      	adds	r7, #56	; 0x38
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20010618 	.word	0x20010618
 8001f38:	40016800 	.word	0x40016800

08001f3c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <MX_SDIO_SD_Init+0x38>)
 8001f42:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <MX_SDIO_SD_Init+0x3c>)
 8001f44:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <MX_SDIO_SD_Init+0x38>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <MX_SDIO_SD_Init+0x38>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001f52:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <MX_SDIO_SD_Init+0x38>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <MX_SDIO_SD_Init+0x38>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <MX_SDIO_SD_Init+0x38>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001f64:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <MX_SDIO_SD_Init+0x38>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	20010fd0 	.word	0x20010fd0
 8001f78:	40012c00 	.word	0x40012c00

08001f7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08e      	sub	sp, #56	; 0x38
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f90:	f107 0320 	add.w	r3, r7, #32
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
 8001fa8:	615a      	str	r2, [r3, #20]
 8001faa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fac:	4b32      	ldr	r3, [pc, #200]	; (8002078 <MX_TIM2_Init+0xfc>)
 8001fae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001fb4:	4b30      	ldr	r3, [pc, #192]	; (8002078 <MX_TIM2_Init+0xfc>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fba:	4b2f      	ldr	r3, [pc, #188]	; (8002078 <MX_TIM2_Init+0xfc>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001fc0:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <MX_TIM2_Init+0xfc>)
 8001fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <MX_TIM2_Init+0xfc>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fce:	4b2a      	ldr	r3, [pc, #168]	; (8002078 <MX_TIM2_Init+0xfc>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fd4:	4828      	ldr	r0, [pc, #160]	; (8002078 <MX_TIM2_Init+0xfc>)
 8001fd6:	f006 ff2d 	bl	8008e34 <HAL_TIM_Base_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001fe0:	f001 fb88 	bl	80036f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4821      	ldr	r0, [pc, #132]	; (8002078 <MX_TIM2_Init+0xfc>)
 8001ff2:	f007 fb8b 	bl	800970c <HAL_TIM_ConfigClockSource>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001ffc:	f001 fb7a 	bl	80036f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002000:	481d      	ldr	r0, [pc, #116]	; (8002078 <MX_TIM2_Init+0xfc>)
 8002002:	f006 ffd7 	bl	8008fb4 <HAL_TIM_PWM_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800200c:	f001 fb72 	bl	80036f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002010:	2300      	movs	r3, #0
 8002012:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002018:	f107 0320 	add.w	r3, r7, #32
 800201c:	4619      	mov	r1, r3
 800201e:	4816      	ldr	r0, [pc, #88]	; (8002078 <MX_TIM2_Init+0xfc>)
 8002020:	f008 f83a 	bl	800a098 <HAL_TIMEx_MasterConfigSynchronization>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800202a:	f001 fb63 	bl	80036f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800202e:	2360      	movs	r3, #96	; 0x60
 8002030:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	2204      	movs	r2, #4
 8002042:	4619      	mov	r1, r3
 8002044:	480c      	ldr	r0, [pc, #48]	; (8002078 <MX_TIM2_Init+0xfc>)
 8002046:	f007 fa9f 	bl	8009588 <HAL_TIM_PWM_ConfigChannel>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002050:	f001 fb50 	bl	80036f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	2208      	movs	r2, #8
 8002058:	4619      	mov	r1, r3
 800205a:	4807      	ldr	r0, [pc, #28]	; (8002078 <MX_TIM2_Init+0xfc>)
 800205c:	f007 fa94 	bl	8009588 <HAL_TIM_PWM_ConfigChannel>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8002066:	f001 fb45 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800206a:	4803      	ldr	r0, [pc, #12]	; (8002078 <MX_TIM2_Init+0xfc>)
 800206c:	f001 ff10 	bl	8003e90 <HAL_TIM_MspPostInit>

}
 8002070:	bf00      	nop
 8002072:	3738      	adds	r7, #56	; 0x38
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	2000fd10 	.word	0x2000fd10

0800207c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
 8002090:	615a      	str	r2, [r3, #20]
 8002092:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002094:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <MX_TIM13_Init+0x94>)
 8002096:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <MX_TIM13_Init+0x98>)
 8002098:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 90-1;
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <MX_TIM13_Init+0x94>)
 800209c:	2259      	movs	r2, #89	; 0x59
 800209e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <MX_TIM13_Init+0x94>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 80020a6:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <MX_TIM13_Init+0x94>)
 80020a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020ac:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ae:	4b18      	ldr	r3, [pc, #96]	; (8002110 <MX_TIM13_Init+0x94>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020b4:	4b16      	ldr	r3, [pc, #88]	; (8002110 <MX_TIM13_Init+0x94>)
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80020ba:	4815      	ldr	r0, [pc, #84]	; (8002110 <MX_TIM13_Init+0x94>)
 80020bc:	f006 feba 	bl	8008e34 <HAL_TIM_Base_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80020c6:	f001 fb15 	bl	80036f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80020ca:	4811      	ldr	r0, [pc, #68]	; (8002110 <MX_TIM13_Init+0x94>)
 80020cc:	f006 ff72 	bl	8008fb4 <HAL_TIM_PWM_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80020d6:	f001 fb0d 	bl	80036f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020da:	2360      	movs	r3, #96	; 0x60
 80020dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	2200      	movs	r2, #0
 80020ee:	4619      	mov	r1, r3
 80020f0:	4807      	ldr	r0, [pc, #28]	; (8002110 <MX_TIM13_Init+0x94>)
 80020f2:	f007 fa49 	bl	8009588 <HAL_TIM_PWM_ConfigChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80020fc:	f001 fafa 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002100:	4803      	ldr	r0, [pc, #12]	; (8002110 <MX_TIM13_Init+0x94>)
 8002102:	f001 fec5 	bl	8003e90 <HAL_TIM_MspPostInit>

}
 8002106:	bf00      	nop
 8002108:	3720      	adds	r7, #32
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20010738 	.word	0x20010738
 8002114:	40001c00 	.word	0x40001c00

08002118 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 800211e:	4a12      	ldr	r2, [pc, #72]	; (8002168 <MX_USART1_UART_Init+0x50>)
 8002120:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 8002124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002128:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002136:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 800213e:	220c      	movs	r2, #12
 8002140:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002142:	4b08      	ldr	r3, [pc, #32]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800214e:	4805      	ldr	r0, [pc, #20]	; (8002164 <MX_USART1_UART_Init+0x4c>)
 8002150:	f008 f81e 	bl	800a190 <HAL_UART_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800215a:	f001 facb 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20010780 	.word	0x20010780
 8002168:	40011000 	.word	0x40011000

0800216c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002172:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002176:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800217a:	2204      	movs	r2, #4
 800217c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002180:	2202      	movs	r2, #2
 8002182:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002184:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800218c:	2202      	movs	r2, #2
 800218e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002192:	2200      	movs	r2, #0
 8002194:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002198:	2200      	movs	r2, #0
 800219a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800219e:	2200      	movs	r2, #0
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80021ae:	4805      	ldr	r0, [pc, #20]	; (80021c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021b0:	f004 fda7 	bl	8006d02 <HAL_PCD_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80021ba:	f001 fa9b 	bl	80036f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	2000fe4c 	.word	0x2000fe4c

080021c8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08c      	sub	sp, #48	; 0x30
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]
 80021dc:	611a      	str	r2, [r3, #16]
 80021de:	615a      	str	r2, [r3, #20]
 80021e0:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80021e2:	4b26      	ldr	r3, [pc, #152]	; (800227c <MX_FMC_Init+0xb4>)
 80021e4:	4a26      	ldr	r2, [pc, #152]	; (8002280 <MX_FMC_Init+0xb8>)
 80021e6:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80021e8:	4b24      	ldr	r3, [pc, #144]	; (800227c <MX_FMC_Init+0xb4>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80021ee:	4b23      	ldr	r3, [pc, #140]	; (800227c <MX_FMC_Init+0xb4>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80021f4:	4b21      	ldr	r3, [pc, #132]	; (800227c <MX_FMC_Init+0xb4>)
 80021f6:	2208      	movs	r2, #8
 80021f8:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <MX_FMC_Init+0xb4>)
 80021fc:	2210      	movs	r2, #16
 80021fe:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002200:	4b1e      	ldr	r3, [pc, #120]	; (800227c <MX_FMC_Init+0xb4>)
 8002202:	2240      	movs	r2, #64	; 0x40
 8002204:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <MX_FMC_Init+0xb4>)
 8002208:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800220c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800220e:	4b1b      	ldr	r3, [pc, #108]	; (800227c <MX_FMC_Init+0xb4>)
 8002210:	2200      	movs	r2, #0
 8002212:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <MX_FMC_Init+0xb4>)
 8002216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800221a:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800221c:	4b17      	ldr	r3, [pc, #92]	; (800227c <MX_FMC_Init+0xb4>)
 800221e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002222:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8002224:	4b15      	ldr	r3, [pc, #84]	; (800227c <MX_FMC_Init+0xb4>)
 8002226:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800222a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800222c:	2302      	movs	r3, #2
 800222e:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 8;
 8002230:	2308      	movs	r3, #8
 8002232:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 6;
 8002234:	2306      	movs	r3, #6
 8002236:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 8002238:	2307      	movs	r3, #7
 800223a:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 5;
 800223c:	2305      	movs	r3, #5
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8002240:	2302      	movs	r3, #2
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8002244:	2302      	movs	r3, #2
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	4619      	mov	r1, r3
 800224e:	480b      	ldr	r0, [pc, #44]	; (800227c <MX_FMC_Init+0xb4>)
 8002250:	f006 fd63 	bl	8008d1a <HAL_SDRAM_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 800225a:	f001 fa4b 	bl	80036f4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	FMC_SDRAM_CommandTypeDef command;
	if (SDRAM_Initialization_Sequence(&hsdram1, &command) != HAL_OK) {
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	4619      	mov	r1, r3
 8002262:	4806      	ldr	r0, [pc, #24]	; (800227c <MX_FMC_Init+0xb4>)
 8002264:	f001 fa68 	bl	8003738 <SDRAM_Initialization_Sequence>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_FMC_Init+0xaa>
		Error_Handler();
 800226e:	f001 fa41 	bl	80036f4 <Error_Handler>
	}
  /* USER CODE END FMC_Init 2 */
}
 8002272:	bf00      	nop
 8002274:	3730      	adds	r7, #48	; 0x30
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200110e4 	.word	0x200110e4
 8002280:	a0000140 	.word	0xa0000140

08002284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b090      	sub	sp, #64	; 0x40
 8002288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	60da      	str	r2, [r3, #12]
 8002298:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
 800229e:	4ba9      	ldr	r3, [pc, #676]	; (8002544 <MX_GPIO_Init+0x2c0>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4aa8      	ldr	r2, [pc, #672]	; (8002544 <MX_GPIO_Init+0x2c0>)
 80022a4:	f043 0310 	orr.w	r3, r3, #16
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4ba6      	ldr	r3, [pc, #664]	; (8002544 <MX_GPIO_Init+0x2c0>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
 80022ba:	4ba2      	ldr	r3, [pc, #648]	; (8002544 <MX_GPIO_Init+0x2c0>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4aa1      	ldr	r2, [pc, #644]	; (8002544 <MX_GPIO_Init+0x2c0>)
 80022c0:	f043 0304 	orr.w	r3, r3, #4
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b9f      	ldr	r3, [pc, #636]	; (8002544 <MX_GPIO_Init+0x2c0>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
 80022d6:	4b9b      	ldr	r3, [pc, #620]	; (8002544 <MX_GPIO_Init+0x2c0>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a9a      	ldr	r2, [pc, #616]	; (8002544 <MX_GPIO_Init+0x2c0>)
 80022dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b98      	ldr	r3, [pc, #608]	; (8002544 <MX_GPIO_Init+0x2c0>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ea:	623b      	str	r3, [r7, #32]
 80022ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	4b94      	ldr	r3, [pc, #592]	; (8002544 <MX_GPIO_Init+0x2c0>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	4a93      	ldr	r2, [pc, #588]	; (8002544 <MX_GPIO_Init+0x2c0>)
 80022f8:	f043 0320 	orr.w	r3, r3, #32
 80022fc:	6313      	str	r3, [r2, #48]	; 0x30
 80022fe:	4b91      	ldr	r3, [pc, #580]	; (8002544 <MX_GPIO_Init+0x2c0>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	61fb      	str	r3, [r7, #28]
 8002308:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	4b8d      	ldr	r3, [pc, #564]	; (8002544 <MX_GPIO_Init+0x2c0>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a8c      	ldr	r2, [pc, #560]	; (8002544 <MX_GPIO_Init+0x2c0>)
 8002314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b8a      	ldr	r3, [pc, #552]	; (8002544 <MX_GPIO_Init+0x2c0>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	4b86      	ldr	r3, [pc, #536]	; (8002544 <MX_GPIO_Init+0x2c0>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4a85      	ldr	r2, [pc, #532]	; (8002544 <MX_GPIO_Init+0x2c0>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4b83      	ldr	r3, [pc, #524]	; (8002544 <MX_GPIO_Init+0x2c0>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	4b7f      	ldr	r3, [pc, #508]	; (8002544 <MX_GPIO_Init+0x2c0>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	4a7e      	ldr	r2, [pc, #504]	; (8002544 <MX_GPIO_Init+0x2c0>)
 800234c:	f043 0302 	orr.w	r3, r3, #2
 8002350:	6313      	str	r3, [r2, #48]	; 0x30
 8002352:	4b7c      	ldr	r3, [pc, #496]	; (8002544 <MX_GPIO_Init+0x2c0>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b78      	ldr	r3, [pc, #480]	; (8002544 <MX_GPIO_Init+0x2c0>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a77      	ldr	r2, [pc, #476]	; (8002544 <MX_GPIO_Init+0x2c0>)
 8002368:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b75      	ldr	r3, [pc, #468]	; (8002544 <MX_GPIO_Init+0x2c0>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	4b71      	ldr	r3, [pc, #452]	; (8002544 <MX_GPIO_Init+0x2c0>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a70      	ldr	r2, [pc, #448]	; (8002544 <MX_GPIO_Init+0x2c0>)
 8002384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b6e      	ldr	r3, [pc, #440]	; (8002544 <MX_GPIO_Init+0x2c0>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	4b6a      	ldr	r3, [pc, #424]	; (8002544 <MX_GPIO_Init+0x2c0>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a69      	ldr	r2, [pc, #420]	; (8002544 <MX_GPIO_Init+0x2c0>)
 80023a0:	f043 0308 	orr.w	r3, r3, #8
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b67      	ldr	r3, [pc, #412]	; (8002544 <MX_GPIO_Init+0x2c0>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	607b      	str	r3, [r7, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	4b63      	ldr	r3, [pc, #396]	; (8002544 <MX_GPIO_Init+0x2c0>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a62      	ldr	r2, [pc, #392]	; (8002544 <MX_GPIO_Init+0x2c0>)
 80023bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b60      	ldr	r3, [pc, #384]	; (8002544 <MX_GPIO_Init+0x2c0>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OUT_S0_Pin|OUT_E_Pin, GPIO_PIN_RESET);
 80023ce:	2200      	movs	r2, #0
 80023d0:	210c      	movs	r1, #12
 80023d2:	485d      	ldr	r0, [pc, #372]	; (8002548 <MX_GPIO_Init+0x2c4>)
 80023d4:	f003 ff0c 	bl	80061f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MULTISENSE_EN5_Pin|LED_PJ12_Pin|LED_PJ13_Pin|LED_PJ14_Pin
 80023d8:	2200      	movs	r2, #0
 80023da:	f24f 0108 	movw	r1, #61448	; 0xf008
 80023de:	485b      	ldr	r0, [pc, #364]	; (800254c <MX_GPIO_Init+0x2c8>)
 80023e0:	f003 ff06 	bl	80061f0 <HAL_GPIO_WritePin>
                          |LED_PJ15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, MULTISENSE_RST_Pin|MULTISENSE_SEL0_Pin|MULTISENSE_SEL1_Pin|CAN2_SEL0_Pin
 80023e4:	2200      	movs	r2, #0
 80023e6:	21fc      	movs	r1, #252	; 0xfc
 80023e8:	4859      	ldr	r0, [pc, #356]	; (8002550 <MX_GPIO_Init+0x2cc>)
 80023ea:	f003 ff01 	bl	80061f0 <HAL_GPIO_WritePin>
                          |CAN1_SEL0_Pin|CAN2_SEL0K7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PI3_GPIO_Port, LED_PI3_Pin, GPIO_PIN_RESET);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2108      	movs	r1, #8
 80023f2:	4858      	ldr	r0, [pc, #352]	; (8002554 <MX_GPIO_Init+0x2d0>)
 80023f4:	f003 fefc 	bl	80061f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PUD_S0_Pin|PUD_S1_Pin|PUD_S2_Pin|PUD_E_Pin, GPIO_PIN_RESET);
 80023f8:	2200      	movs	r2, #0
 80023fa:	21b8      	movs	r1, #184	; 0xb8
 80023fc:	4856      	ldr	r0, [pc, #344]	; (8002558 <MX_GPIO_Init+0x2d4>)
 80023fe:	f003 fef7 	bl	80061f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IN_E_Pin|IN_S0_Pin|IN_S1_Pin|IN_S2_Pin
 8002402:	2200      	movs	r2, #0
 8002404:	f44f 41ec 	mov.w	r1, #30208	; 0x7600
 8002408:	4854      	ldr	r0, [pc, #336]	; (800255c <MX_GPIO_Init+0x2d8>)
 800240a:	f003 fef1 	bl	80061f0 <HAL_GPIO_WritePin>
                          |IN_S3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin;
 800240e:	230c      	movs	r3, #12
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002412:	2300      	movs	r3, #0
 8002414:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800241a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800241e:	4619      	mov	r1, r3
 8002420:	484f      	ldr	r0, [pc, #316]	; (8002560 <MX_GPIO_Init+0x2dc>)
 8002422:	f003 fd21 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : HALL_OUT_1_PI12_Pin */
  GPIO_InitStruct.Pin = HALL_OUT_1_PI12_Pin;
 8002426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800242c:	2300      	movs	r3, #0
 800242e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HALL_OUT_1_PI12_GPIO_Port, &GPIO_InitStruct);
 8002434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002438:	4619      	mov	r1, r3
 800243a:	4846      	ldr	r0, [pc, #280]	; (8002554 <MX_GPIO_Init+0x2d0>)
 800243c:	f003 fd14 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_S0_Pin OUT_E_Pin */
  GPIO_InitStruct.Pin = OUT_S0_Pin|OUT_E_Pin;
 8002440:	230c      	movs	r3, #12
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002444:	2301      	movs	r3, #1
 8002446:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244c:	2300      	movs	r3, #0
 800244e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002450:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002454:	4619      	mov	r1, r3
 8002456:	483c      	ldr	r0, [pc, #240]	; (8002548 <MX_GPIO_Init+0x2c4>)
 8002458:	f003 fd06 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MULTISENSE_EN5_Pin LED_PJ12_Pin LED_PJ13_Pin LED_PJ14_Pin
                           LED_PJ15_Pin */
  GPIO_InitStruct.Pin = MULTISENSE_EN5_Pin|LED_PJ12_Pin|LED_PJ13_Pin|LED_PJ14_Pin
 800245c:	f24f 0308 	movw	r3, #61448	; 0xf008
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED_PJ15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002462:	2301      	movs	r3, #1
 8002464:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2300      	movs	r3, #0
 800246c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800246e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002472:	4619      	mov	r1, r3
 8002474:	4835      	ldr	r0, [pc, #212]	; (800254c <MX_GPIO_Init+0x2c8>)
 8002476:	f003 fcf7 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_3_Pin BTN_4_Pin */
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_4_Pin;
 800247a:	23c0      	movs	r3, #192	; 0xc0
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800247e:	2300      	movs	r3, #0
 8002480:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002486:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800248a:	4619      	mov	r1, r3
 800248c:	482f      	ldr	r0, [pc, #188]	; (800254c <MX_GPIO_Init+0x2c8>)
 800248e:	f003 fceb 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MULTISENSE_RST_Pin MULTISENSE_SEL0_Pin MULTISENSE_SEL1_Pin CAN2_SEL0_Pin
                           CAN1_SEL0_Pin CAN2_SEL0K7_Pin */
  GPIO_InitStruct.Pin = MULTISENSE_RST_Pin|MULTISENSE_SEL0_Pin|MULTISENSE_SEL1_Pin|CAN2_SEL0_Pin
 8002492:	23fc      	movs	r3, #252	; 0xfc
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |CAN1_SEL0_Pin|CAN2_SEL0K7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002496:	2301      	movs	r3, #1
 8002498:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249e:	2300      	movs	r3, #0
 80024a0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80024a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a6:	4619      	mov	r1, r3
 80024a8:	4829      	ldr	r0, [pc, #164]	; (8002550 <MX_GPIO_Init+0x2cc>)
 80024aa:	f003 fcdd 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_ENT_Pin */
  GPIO_InitStruct.Pin = SDIO_ENT_Pin;
 80024ae:	2308      	movs	r3, #8
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024b2:	2300      	movs	r3, #0
 80024b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDIO_ENT_GPIO_Port, &GPIO_InitStruct);
 80024ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024be:	4619      	mov	r1, r3
 80024c0:	4826      	ldr	r0, [pc, #152]	; (800255c <MX_GPIO_Init+0x2d8>)
 80024c2:	f003 fcd1 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PI3_Pin */
  GPIO_InitStruct.Pin = LED_PI3_Pin;
 80024c6:	2308      	movs	r3, #8
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ca:	2301      	movs	r3, #1
 80024cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d2:	2300      	movs	r3, #0
 80024d4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED_PI3_GPIO_Port, &GPIO_InitStruct);
 80024d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024da:	4619      	mov	r1, r3
 80024dc:	481d      	ldr	r0, [pc, #116]	; (8002554 <MX_GPIO_Init+0x2d0>)
 80024de:	f003 fcc3 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PUD_S0_Pin PUD_S1_Pin PUD_S2_Pin PUD_E_Pin */
  GPIO_InitStruct.Pin = PUD_S0_Pin|PUD_S1_Pin|PUD_S2_Pin|PUD_E_Pin;
 80024e2:	23b8      	movs	r3, #184	; 0xb8
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e6:	2301      	movs	r3, #1
 80024e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ee:	2300      	movs	r3, #0
 80024f0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f6:	4619      	mov	r1, r3
 80024f8:	4817      	ldr	r0, [pc, #92]	; (8002558 <MX_GPIO_Init+0x2d4>)
 80024fa:	f003 fcb5 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_E_Pin IN_S0_Pin IN_S1_Pin IN_S2_Pin
                           IN_S3_Pin */
  GPIO_InitStruct.Pin = IN_E_Pin|IN_S0_Pin|IN_S1_Pin|IN_S2_Pin
 80024fe:	f44f 43ec 	mov.w	r3, #30208	; 0x7600
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |IN_S3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002504:	2301      	movs	r3, #1
 8002506:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002508:	2300      	movs	r3, #0
 800250a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250c:	2300      	movs	r3, #0
 800250e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002510:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002514:	4619      	mov	r1, r3
 8002516:	4811      	ldr	r0, [pc, #68]	; (800255c <MX_GPIO_Init+0x2d8>)
 8002518:	f003 fca6 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800251c:	2338      	movs	r3, #56	; 0x38
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002528:	2303      	movs	r3, #3
 800252a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800252c:	2305      	movs	r3, #5
 800252e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002530:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002534:	4619      	mov	r1, r3
 8002536:	480b      	ldr	r0, [pc, #44]	; (8002564 <MX_GPIO_Init+0x2e0>)
 8002538:	f003 fc96 	bl	8005e68 <HAL_GPIO_Init>

}
 800253c:	bf00      	nop
 800253e:	3740      	adds	r7, #64	; 0x40
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40023800 	.word	0x40023800
 8002548:	40021c00 	.word	0x40021c00
 800254c:	40022400 	.word	0x40022400
 8002550:	40022800 	.word	0x40022800
 8002554:	40022000 	.word	0x40022000
 8002558:	40020c00 	.word	0x40020c00
 800255c:	40021800 	.word	0x40021800
 8002560:	40021000 	.word	0x40021000
 8002564:	40020400 	.word	0x40020400

08002568 <mapInt>:
float mapFloat(float x, float in_min, float in_max, float out_min,
		float out_max) {
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

long mapInt(float x, float in_min, float in_max, int out_min, int out_max) {
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	ed87 0a05 	vstr	s0, [r7, #20]
 8002572:	edc7 0a04 	vstr	s1, [r7, #16]
 8002576:	ed87 1a03 	vstr	s2, [r7, #12]
 800257a:	60b8      	str	r0, [r7, #8]
 800257c:	6079      	str	r1, [r7, #4]
	return (int) ((x - in_min) * (out_max - out_min) / (in_max - in_min)
 800257e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002582:	edd7 7a04 	vldr	s15, [r7, #16]
 8002586:	ee37 7a67 	vsub.f32	s14, s14, s15
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	ee07 3a90 	vmov	s15, r3
 8002594:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002598:	ee67 6a27 	vmul.f32	s13, s14, s15
 800259c:	ed97 7a03 	vldr	s14, [r7, #12]
 80025a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80025a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
			+ out_min);
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025b6:	ee77 7a27 	vadd.f32	s15, s14, s15
	return (int) ((x - in_min) * (out_max - out_min) / (in_max - in_min)
 80025ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025be:	ee17 3a90 	vmov	r3, s15
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <Start_START_Task>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_START_Task */
void Start_START_Task(void *argument)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//htim13.Instance->CCR1 = (htim13.Instance->ARR) * 0.99;
	Current_Status.LED_BRIGHTNESS = LED_DEFAULT_BRIGHTNESS;
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <Start_START_Task+0x54>)
 80025da:	2205      	movs	r2, #5
 80025dc:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	Current_Status.LCD_BRIGHTNESS = LCD_DEFAULT_BRIGHTNESS;
 80025e0:	4b10      	ldr	r3, [pc, #64]	; (8002624 <Start_START_Task+0x54>)
 80025e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80025e6:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	Current_Status.LCD_BRIGHTNESS_CHANGED = 1;
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <Start_START_Task+0x54>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	/* Infinite loop */
	for (;;) {
		if (Current_Status.LCD_BRIGHTNESS_CHANGED == 1) {
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <Start_START_Task+0x54>)
 80025f4:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d109      	bne.n	8002610 <Start_START_Task+0x40>
			htim13.Instance->CCR1 = Current_Status.LCD_BRIGHTNESS;
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <Start_START_Task+0x54>)
 80025fe:	f8b3 209a 	ldrh.w	r2, [r3, #154]	; 0x9a
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <Start_START_Task+0x58>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	635a      	str	r2, [r3, #52]	; 0x34
			Current_Status.LCD_BRIGHTNESS_CHANGED = 0;
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <Start_START_Task+0x54>)
 800260a:	2200      	movs	r2, #0
 800260c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
//		Current_Status.ECT = 50;
//		Current_Status.IAT = 50;
//        Current_Status.RPM = Current_Status.RPM <= 8000 ? Current_Status.RPM + 25 : 0;

		HAL_GPIO_TogglePin(LED_PJ13_GPIO_Port, LED_PJ13_Pin);
 8002610:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002614:	4805      	ldr	r0, [pc, #20]	; (800262c <Start_START_Task+0x5c>)
 8002616:	f003 fe04 	bl	8006222 <HAL_GPIO_TogglePin>
		osDelay(250);
 800261a:	20fa      	movs	r0, #250	; 0xfa
 800261c:	f009 fdd9 	bl	800c1d2 <osDelay>
		if (Current_Status.LCD_BRIGHTNESS_CHANGED == 1) {
 8002620:	e7e7      	b.n	80025f2 <Start_START_Task+0x22>
 8002622:	bf00      	nop
 8002624:	200103b4 	.word	0x200103b4
 8002628:	20010738 	.word	0x20010738
 800262c:	40022400 	.word	0x40022400

08002630 <Start_CAN_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_CAN_Task */
void Start_CAN_Task(void *argument)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08e      	sub	sp, #56	; 0x38
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_CAN_Task */
	/* Infinite loop */
	Current_Status.CAN_PROTOCOL = CAN_BMW_PHEV;
 8002638:	4b9c      	ldr	r3, [pc, #624]	; (80028ac <Start_CAN_Task+0x27c>)
 800263a:	2203      	movs	r2, #3
 800263c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Current_Status.CAN_TICK = 0;
 8002640:	4b9a      	ldr	r3, [pc, #616]	; (80028ac <Start_CAN_Task+0x27c>)
 8002642:	2200      	movs	r2, #0
 8002644:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	Current_Status.BMS_TICK = 0;
 8002648:	4b98      	ldr	r3, [pc, #608]	; (80028ac <Start_CAN_Task+0x27c>)
 800264a:	2200      	movs	r2, #0
 800264c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	Current_Status.CAN_TIMEOUT = 100;
 8002650:	4b96      	ldr	r3, [pc, #600]	; (80028ac <Start_CAN_Task+0x27c>)
 8002652:	2264      	movs	r2, #100	; 0x64
 8002654:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

	HAL_GPIO_WritePin(CAN1_SEL0_GPIO_Port, CAN1_SEL0_Pin, SET);
 8002658:	2201      	movs	r2, #1
 800265a:	2140      	movs	r1, #64	; 0x40
 800265c:	4894      	ldr	r0, [pc, #592]	; (80028b0 <Start_CAN_Task+0x280>)
 800265e:	f003 fdc7 	bl	80061f0 <HAL_GPIO_WritePin>

	for (;;) {
		if (CAN_ENABLED) {
			if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8002662:	4b94      	ldr	r3, [pc, #592]	; (80028b4 <Start_CAN_Task+0x284>)
 8002664:	4a94      	ldr	r2, [pc, #592]	; (80028b8 <Start_CAN_Task+0x288>)
 8002666:	2100      	movs	r1, #0
 8002668:	4894      	ldr	r0, [pc, #592]	; (80028bc <Start_CAN_Task+0x28c>)
 800266a:	f002 fd36 	bl	80050da <HAL_CAN_GetRxMessage>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	f040 84b2 	bne.w	8002fda <Start_CAN_Task+0x9aa>
				switch (Current_Status.CAN_PROTOCOL) {
 8002676:	4b8d      	ldr	r3, [pc, #564]	; (80028ac <Start_CAN_Task+0x27c>)
 8002678:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800267c:	2b03      	cmp	r3, #3
 800267e:	f040 8342 	bne.w	8002d06 <Start_CAN_Task+0x6d6>
					case CAN_BMW_PHEV:
						Current_Status.BMS_TICK = Current_Status.CAN_TICK + 1;
 8002682:	4b8a      	ldr	r3, [pc, #552]	; (80028ac <Start_CAN_Task+0x27c>)
 8002684:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002688:	3301      	adds	r3, #1
 800268a:	4a88      	ldr	r2, [pc, #544]	; (80028ac <Start_CAN_Task+0x27c>)
 800268c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
						if (RxHeader.StdId > 0x99 && RxHeader.StdId < 0x180)//do BMS magic if ids are ones identified to be modules
 8002690:	4b89      	ldr	r3, [pc, #548]	; (80028b8 <Start_CAN_Task+0x288>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b99      	cmp	r3, #153	; 0x99
 8002696:	f240 82db 	bls.w	8002c50 <Start_CAN_Task+0x620>
 800269a:	4b87      	ldr	r3, [pc, #540]	; (80028b8 <Start_CAN_Task+0x288>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80026a2:	f080 82d5 	bcs.w	8002c50 <Start_CAN_Task+0x620>
						  {
							int Id = (RxHeader.StdId & 0x0F0);
 80026a6:	4b84      	ldr	r3, [pc, #528]	; (80028b8 <Start_CAN_Task+0x288>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ae:	637b      	str	r3, [r7, #52]	; 0x34
							int CMU = (RxHeader.StdId & 0x00F);
 80026b0:	4b81      	ldr	r3, [pc, #516]	; (80028b8 <Start_CAN_Task+0x288>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 030f 	and.w	r3, r3, #15
 80026b8:	613b      	str	r3, [r7, #16]
							Current_Status.BATTERY_MODULES[CMU].ENABLED = true;
 80026ba:	497c      	ldr	r1, [pc, #496]	; (80028ac <Start_CAN_Task+0x27c>)
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	4613      	mov	r3, r2
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	33ac      	adds	r3, #172	; 0xac
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
							Current_Status.BATTERY_MODULES[CMU].TICK = Current_Status.BMS_TICK;
 80026ce:	4b77      	ldr	r3, [pc, #476]	; (80028ac <Start_CAN_Task+0x27c>)
 80026d0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80026d4:	4875      	ldr	r0, [pc, #468]	; (80028ac <Start_CAN_Task+0x27c>)
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4613      	mov	r3, r2
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4403      	add	r3, r0
 80026e2:	33b0      	adds	r3, #176	; 0xb0
 80026e4:	6019      	str	r1, [r3, #0]
 80026e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e8:	2b70      	cmp	r3, #112	; 0x70
 80026ea:	d033      	beq.n	8002754 <Start_CAN_Task+0x124>
 80026ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ee:	2b70      	cmp	r3, #112	; 0x70
 80026f0:	dc33      	bgt.n	800275a <Start_CAN_Task+0x12a>
 80026f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f4:	2b60      	cmp	r3, #96	; 0x60
 80026f6:	d02a      	beq.n	800274e <Start_CAN_Task+0x11e>
 80026f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fa:	2b60      	cmp	r3, #96	; 0x60
 80026fc:	dc2d      	bgt.n	800275a <Start_CAN_Task+0x12a>
 80026fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002700:	2b50      	cmp	r3, #80	; 0x50
 8002702:	d021      	beq.n	8002748 <Start_CAN_Task+0x118>
 8002704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002706:	2b50      	cmp	r3, #80	; 0x50
 8002708:	dc27      	bgt.n	800275a <Start_CAN_Task+0x12a>
 800270a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270c:	2b40      	cmp	r3, #64	; 0x40
 800270e:	d018      	beq.n	8002742 <Start_CAN_Task+0x112>
 8002710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002712:	2b40      	cmp	r3, #64	; 0x40
 8002714:	dc21      	bgt.n	800275a <Start_CAN_Task+0x12a>
 8002716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002718:	2b30      	cmp	r3, #48	; 0x30
 800271a:	d00f      	beq.n	800273c <Start_CAN_Task+0x10c>
 800271c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800271e:	2b30      	cmp	r3, #48	; 0x30
 8002720:	dc1b      	bgt.n	800275a <Start_CAN_Task+0x12a>
 8002722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <Start_CAN_Task+0x100>
 8002728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272a:	2b20      	cmp	r3, #32
 800272c:	d003      	beq.n	8002736 <Start_CAN_Task+0x106>
 800272e:	e014      	b.n	800275a <Start_CAN_Task+0x12a>
							switch (Id)
							  {
							    case 0x000:
							      Id = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	637b      	str	r3, [r7, #52]	; 0x34
							      break;
 8002734:	e011      	b.n	800275a <Start_CAN_Task+0x12a>
							    case 0x020:
							      Id = 1;
 8002736:	2301      	movs	r3, #1
 8002738:	637b      	str	r3, [r7, #52]	; 0x34
							      break;
 800273a:	e00e      	b.n	800275a <Start_CAN_Task+0x12a>
							    case 0x030:
							      Id = 2;
 800273c:	2302      	movs	r3, #2
 800273e:	637b      	str	r3, [r7, #52]	; 0x34
							      break;
 8002740:	e00b      	b.n	800275a <Start_CAN_Task+0x12a>

							    case 0x040:
							      Id = 3;
 8002742:	2303      	movs	r3, #3
 8002744:	637b      	str	r3, [r7, #52]	; 0x34
							      break;
 8002746:	e008      	b.n	800275a <Start_CAN_Task+0x12a>

							    case 0x050:
							      Id = 4;
 8002748:	2304      	movs	r3, #4
 800274a:	637b      	str	r3, [r7, #52]	; 0x34
							      break;
 800274c:	e005      	b.n	800275a <Start_CAN_Task+0x12a>

							    case 0x060:
							      Id = 5;
 800274e:	2305      	movs	r3, #5
 8002750:	637b      	str	r3, [r7, #52]	; 0x34
							      break;
 8002752:	e002      	b.n	800275a <Start_CAN_Task+0x12a>

							    case 0x070:
							      Id = 6;
 8002754:	2306      	movs	r3, #6
 8002756:	637b      	str	r3, [r7, #52]	; 0x34
							      break;
 8002758:	bf00      	nop
 800275a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275c:	2b06      	cmp	r3, #6
 800275e:	f200 8284 	bhi.w	8002c6a <Start_CAN_Task+0x63a>
 8002762:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <Start_CAN_Task+0x138>)
 8002764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002768:	08002785 	.word	0x08002785
 800276c:	080027e3 	.word	0x080027e3
 8002770:	080028c1 	.word	0x080028c1
 8002774:	08002989 	.word	0x08002989
 8002778:	08002a51 	.word	0x08002a51
 800277c:	08002b21 	.word	0x08002b21
 8002780:	08002be9 	.word	0x08002be9
							  }

							switch (Id)
							  {
							    case 0:
							    	Current_Status.BATTERY_MODULES[CMU].ERROR = RxData[0] + (RxData[1] << 8) + (RxData[2] << 16) + (RxData[3] << 24);
 8002784:	4b4b      	ldr	r3, [pc, #300]	; (80028b4 <Start_CAN_Task+0x284>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	4b4a      	ldr	r3, [pc, #296]	; (80028b4 <Start_CAN_Task+0x284>)
 800278c:	785b      	ldrb	r3, [r3, #1]
 800278e:	021b      	lsls	r3, r3, #8
 8002790:	441a      	add	r2, r3
 8002792:	4b48      	ldr	r3, [pc, #288]	; (80028b4 <Start_CAN_Task+0x284>)
 8002794:	789b      	ldrb	r3, [r3, #2]
 8002796:	041b      	lsls	r3, r3, #16
 8002798:	441a      	add	r2, r3
 800279a:	4b46      	ldr	r3, [pc, #280]	; (80028b4 <Start_CAN_Task+0x284>)
 800279c:	78db      	ldrb	r3, [r3, #3]
 800279e:	061b      	lsls	r3, r3, #24
 80027a0:	4413      	add	r3, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	4941      	ldr	r1, [pc, #260]	; (80028ac <Start_CAN_Task+0x27c>)
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	4613      	mov	r3, r2
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	33b8      	adds	r3, #184	; 0xb8
 80027b4:	6018      	str	r0, [r3, #0]
							    	Current_Status.BATTERY_MODULES[CMU].BALANCE = (RxData[5]<< 8) + RxData[4];
 80027b6:	4b3f      	ldr	r3, [pc, #252]	; (80028b4 <Start_CAN_Task+0x284>)
 80027b8:	795b      	ldrb	r3, [r3, #5]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	4a3d      	ldr	r2, [pc, #244]	; (80028b4 <Start_CAN_Task+0x284>)
 80027be:	7912      	ldrb	r2, [r2, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	bf14      	ite	ne
 80027c6:	2301      	movne	r3, #1
 80027c8:	2300      	moveq	r3, #0
 80027ca:	b2d8      	uxtb	r0, r3
 80027cc:	4937      	ldr	r1, [pc, #220]	; (80028ac <Start_CAN_Task+0x27c>)
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4613      	mov	r3, r2
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	33b4      	adds	r3, #180	; 0xb4
 80027dc:	4602      	mov	r2, r0
 80027de:	701a      	strb	r2, [r3, #0]
							      break;
 80027e0:	e243      	b.n	8002c6a <Start_CAN_Task+0x63a>
							    case 1:
							      if (Current_Status.BATTERY_MODULES[CMU].BALANCE == 0 && Current_Status.BATTERY_MODULES[CMU].IGNORE == 0)
 80027e2:	4932      	ldr	r1, [pc, #200]	; (80028ac <Start_CAN_Task+0x27c>)
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	4613      	mov	r3, r2
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	33b4      	adds	r3, #180	; 0xb4
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	f083 0301 	eor.w	r3, r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 822a 	beq.w	8002c54 <Start_CAN_Task+0x624>
 8002800:	492a      	ldr	r1, [pc, #168]	; (80028ac <Start_CAN_Task+0x27c>)
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4613      	mov	r3, r2
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	33b5      	adds	r3, #181	; 0xb5
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	f083 0301 	eor.w	r3, r3, #1
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 821b 	beq.w	8002c54 <Start_CAN_Task+0x624>
							      {
							        Current_Status.BATTERY_MODULES[CMU].CELLS[0] = (uint16_t)(RxData[0] + (RxData[1] & 0x3F) * 256);
 800281e:	4b25      	ldr	r3, [pc, #148]	; (80028b4 <Start_CAN_Task+0x284>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	b29a      	uxth	r2, r3
 8002824:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <Start_CAN_Task+0x284>)
 8002826:	785b      	ldrb	r3, [r3, #1]
 8002828:	b29b      	uxth	r3, r3
 800282a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800282e:	b29b      	uxth	r3, r3
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	b29b      	uxth	r3, r3
 8002834:	4413      	add	r3, r2
 8002836:	b298      	uxth	r0, r3
 8002838:	491c      	ldr	r1, [pc, #112]	; (80028ac <Start_CAN_Task+0x27c>)
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4613      	mov	r3, r2
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	33bc      	adds	r3, #188	; 0xbc
 8002848:	4602      	mov	r2, r0
 800284a:	801a      	strh	r2, [r3, #0]
							        Current_Status.BATTERY_MODULES[CMU].CELLS[1] = (uint16_t)(RxData[2] + (RxData[3] & 0x3F) * 256);
 800284c:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <Start_CAN_Task+0x284>)
 800284e:	789b      	ldrb	r3, [r3, #2]
 8002850:	b29a      	uxth	r2, r3
 8002852:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <Start_CAN_Task+0x284>)
 8002854:	78db      	ldrb	r3, [r3, #3]
 8002856:	b29b      	uxth	r3, r3
 8002858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800285c:	b29b      	uxth	r3, r3
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	b29b      	uxth	r3, r3
 8002862:	4413      	add	r3, r2
 8002864:	b298      	uxth	r0, r3
 8002866:	4911      	ldr	r1, [pc, #68]	; (80028ac <Start_CAN_Task+0x27c>)
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4613      	mov	r3, r2
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	4413      	add	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	33be      	adds	r3, #190	; 0xbe
 8002876:	4602      	mov	r2, r0
 8002878:	801a      	strh	r2, [r3, #0]
							        Current_Status.BATTERY_MODULES[CMU].CELLS[2] = (uint16_t)(RxData[4] + (RxData[5] & 0x3F) * 256);
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <Start_CAN_Task+0x284>)
 800287c:	791b      	ldrb	r3, [r3, #4]
 800287e:	b29a      	uxth	r2, r3
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <Start_CAN_Task+0x284>)
 8002882:	795b      	ldrb	r3, [r3, #5]
 8002884:	b29b      	uxth	r3, r3
 8002886:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800288a:	b29b      	uxth	r3, r3
 800288c:	021b      	lsls	r3, r3, #8
 800288e:	b29b      	uxth	r3, r3
 8002890:	4413      	add	r3, r2
 8002892:	b298      	uxth	r0, r3
 8002894:	4905      	ldr	r1, [pc, #20]	; (80028ac <Start_CAN_Task+0x27c>)
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4613      	mov	r3, r2
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	33c0      	adds	r3, #192	; 0xc0
 80028a4:	4602      	mov	r2, r0
 80028a6:	801a      	strh	r2, [r3, #0]
							      }
							      break;
 80028a8:	e1d4      	b.n	8002c54 <Start_CAN_Task+0x624>
 80028aa:	bf00      	nop
 80028ac:	200103b4 	.word	0x200103b4
 80028b0:	40022800 	.word	0x40022800
 80028b4:	2001109c 	.word	0x2001109c
 80028b8:	20011118 	.word	0x20011118
 80028bc:	200110a4 	.word	0x200110a4

							    case 2:
							      if (Current_Status.BATTERY_MODULES[CMU].BALANCE == 0 && Current_Status.BATTERY_MODULES[CMU].IGNORE == 0)
 80028c0:	4995      	ldr	r1, [pc, #596]	; (8002b18 <Start_CAN_Task+0x4e8>)
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4613      	mov	r3, r2
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	33b4      	adds	r3, #180	; 0xb4
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	f083 0301 	eor.w	r3, r3, #1
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 81bd 	beq.w	8002c58 <Start_CAN_Task+0x628>
 80028de:	498e      	ldr	r1, [pc, #568]	; (8002b18 <Start_CAN_Task+0x4e8>)
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4613      	mov	r3, r2
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	33b5      	adds	r3, #181	; 0xb5
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	f083 0301 	eor.w	r3, r3, #1
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 81ae 	beq.w	8002c58 <Start_CAN_Task+0x628>
							      {
							        Current_Status.BATTERY_MODULES[CMU].CELLS[3] = (uint16_t)(RxData[0] + (RxData[1] & 0x3F) * 256);
 80028fc:	4b87      	ldr	r3, [pc, #540]	; (8002b1c <Start_CAN_Task+0x4ec>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	b29a      	uxth	r2, r3
 8002902:	4b86      	ldr	r3, [pc, #536]	; (8002b1c <Start_CAN_Task+0x4ec>)
 8002904:	785b      	ldrb	r3, [r3, #1]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800290c:	b29b      	uxth	r3, r3
 800290e:	021b      	lsls	r3, r3, #8
 8002910:	b29b      	uxth	r3, r3
 8002912:	4413      	add	r3, r2
 8002914:	b298      	uxth	r0, r3
 8002916:	4980      	ldr	r1, [pc, #512]	; (8002b18 <Start_CAN_Task+0x4e8>)
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4613      	mov	r3, r2
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	33c2      	adds	r3, #194	; 0xc2
 8002926:	4602      	mov	r2, r0
 8002928:	801a      	strh	r2, [r3, #0]
							        Current_Status.BATTERY_MODULES[CMU].CELLS[4] = (uint16_t)(RxData[2] + (RxData[3] & 0x3F) * 256);
 800292a:	4b7c      	ldr	r3, [pc, #496]	; (8002b1c <Start_CAN_Task+0x4ec>)
 800292c:	789b      	ldrb	r3, [r3, #2]
 800292e:	b29a      	uxth	r2, r3
 8002930:	4b7a      	ldr	r3, [pc, #488]	; (8002b1c <Start_CAN_Task+0x4ec>)
 8002932:	78db      	ldrb	r3, [r3, #3]
 8002934:	b29b      	uxth	r3, r3
 8002936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800293a:	b29b      	uxth	r3, r3
 800293c:	021b      	lsls	r3, r3, #8
 800293e:	b29b      	uxth	r3, r3
 8002940:	4413      	add	r3, r2
 8002942:	b298      	uxth	r0, r3
 8002944:	4974      	ldr	r1, [pc, #464]	; (8002b18 <Start_CAN_Task+0x4e8>)
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4613      	mov	r3, r2
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	33c4      	adds	r3, #196	; 0xc4
 8002954:	4602      	mov	r2, r0
 8002956:	801a      	strh	r2, [r3, #0]
							        Current_Status.BATTERY_MODULES[CMU].CELLS[5] = (uint16_t)(RxData[4] + (RxData[5] & 0x3F) * 256);
 8002958:	4b70      	ldr	r3, [pc, #448]	; (8002b1c <Start_CAN_Task+0x4ec>)
 800295a:	791b      	ldrb	r3, [r3, #4]
 800295c:	b29a      	uxth	r2, r3
 800295e:	4b6f      	ldr	r3, [pc, #444]	; (8002b1c <Start_CAN_Task+0x4ec>)
 8002960:	795b      	ldrb	r3, [r3, #5]
 8002962:	b29b      	uxth	r3, r3
 8002964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002968:	b29b      	uxth	r3, r3
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	b29b      	uxth	r3, r3
 800296e:	4413      	add	r3, r2
 8002970:	b298      	uxth	r0, r3
 8002972:	4969      	ldr	r1, [pc, #420]	; (8002b18 <Start_CAN_Task+0x4e8>)
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4613      	mov	r3, r2
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	33c6      	adds	r3, #198	; 0xc6
 8002982:	4602      	mov	r2, r0
 8002984:	801a      	strh	r2, [r3, #0]
							      }
							      break;
 8002986:	e167      	b.n	8002c58 <Start_CAN_Task+0x628>

							    case 3:
							      if (Current_Status.BATTERY_MODULES[CMU].BALANCE == 0 && Current_Status.BATTERY_MODULES[CMU].IGNORE == 0)
 8002988:	4963      	ldr	r1, [pc, #396]	; (8002b18 <Start_CAN_Task+0x4e8>)
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4613      	mov	r3, r2
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	33b4      	adds	r3, #180	; 0xb4
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	f083 0301 	eor.w	r3, r3, #1
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 815b 	beq.w	8002c5c <Start_CAN_Task+0x62c>
 80029a6:	495c      	ldr	r1, [pc, #368]	; (8002b18 <Start_CAN_Task+0x4e8>)
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4613      	mov	r3, r2
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	33b5      	adds	r3, #181	; 0xb5
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	f083 0301 	eor.w	r3, r3, #1
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 814c 	beq.w	8002c5c <Start_CAN_Task+0x62c>
							      {
							        Current_Status.BATTERY_MODULES[CMU].CELLS[6] = (uint16_t)(RxData[0] + (RxData[1] & 0x3F) * 256);
 80029c4:	4b55      	ldr	r3, [pc, #340]	; (8002b1c <Start_CAN_Task+0x4ec>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	4b54      	ldr	r3, [pc, #336]	; (8002b1c <Start_CAN_Task+0x4ec>)
 80029cc:	785b      	ldrb	r3, [r3, #1]
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	b29b      	uxth	r3, r3
 80029da:	4413      	add	r3, r2
 80029dc:	b298      	uxth	r0, r3
 80029de:	494e      	ldr	r1, [pc, #312]	; (8002b18 <Start_CAN_Task+0x4e8>)
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4613      	mov	r3, r2
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	33c8      	adds	r3, #200	; 0xc8
 80029ee:	4602      	mov	r2, r0
 80029f0:	801a      	strh	r2, [r3, #0]
							        Current_Status.BATTERY_MODULES[CMU].CELLS[7] = (uint16_t)(RxData[2] + (RxData[3] & 0x3F) * 256);
 80029f2:	4b4a      	ldr	r3, [pc, #296]	; (8002b1c <Start_CAN_Task+0x4ec>)
 80029f4:	789b      	ldrb	r3, [r3, #2]
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	4b48      	ldr	r3, [pc, #288]	; (8002b1c <Start_CAN_Task+0x4ec>)
 80029fa:	78db      	ldrb	r3, [r3, #3]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	021b      	lsls	r3, r3, #8
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	4413      	add	r3, r2
 8002a0a:	b298      	uxth	r0, r3
 8002a0c:	4942      	ldr	r1, [pc, #264]	; (8002b18 <Start_CAN_Task+0x4e8>)
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4613      	mov	r3, r2
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	33ca      	adds	r3, #202	; 0xca
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	801a      	strh	r2, [r3, #0]
							        Current_Status.BATTERY_MODULES[CMU].CELLS[8] = (uint16_t)(RxData[4] + (RxData[5] & 0x3F) * 256);
 8002a20:	4b3e      	ldr	r3, [pc, #248]	; (8002b1c <Start_CAN_Task+0x4ec>)
 8002a22:	791b      	ldrb	r3, [r3, #4]
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	4b3d      	ldr	r3, [pc, #244]	; (8002b1c <Start_CAN_Task+0x4ec>)
 8002a28:	795b      	ldrb	r3, [r3, #5]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	b298      	uxth	r0, r3
 8002a3a:	4937      	ldr	r1, [pc, #220]	; (8002b18 <Start_CAN_Task+0x4e8>)
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	4413      	add	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	440b      	add	r3, r1
 8002a48:	33cc      	adds	r3, #204	; 0xcc
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	801a      	strh	r2, [r3, #0]
							      }
							      break;
 8002a4e:	e105      	b.n	8002c5c <Start_CAN_Task+0x62c>

							    case 4:
							      if (Current_Status.BATTERY_MODULES[CMU].BALANCE == 0 && Current_Status.BATTERY_MODULES[CMU].IGNORE == 0)
 8002a50:	4931      	ldr	r1, [pc, #196]	; (8002b18 <Start_CAN_Task+0x4e8>)
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4613      	mov	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	33b4      	adds	r3, #180	; 0xb4
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	f083 0301 	eor.w	r3, r3, #1
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80f9 	beq.w	8002c60 <Start_CAN_Task+0x630>
 8002a6e:	492a      	ldr	r1, [pc, #168]	; (8002b18 <Start_CAN_Task+0x4e8>)
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4613      	mov	r3, r2
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	33b5      	adds	r3, #181	; 0xb5
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	f083 0301 	eor.w	r3, r3, #1
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80ea 	beq.w	8002c60 <Start_CAN_Task+0x630>
							      {
							        Current_Status.BATTERY_MODULES[CMU].CELLS[9] = (uint16_t)(RxData[0] + (RxData[1] & 0x3F) * 256);
 8002a8c:	4b23      	ldr	r3, [pc, #140]	; (8002b1c <Start_CAN_Task+0x4ec>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <Start_CAN_Task+0x4ec>)
 8002a94:	785b      	ldrb	r3, [r3, #1]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	021b      	lsls	r3, r3, #8
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	b298      	uxth	r0, r3
 8002aa6:	491c      	ldr	r1, [pc, #112]	; (8002b18 <Start_CAN_Task+0x4e8>)
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	33ce      	adds	r3, #206	; 0xce
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	801a      	strh	r2, [r3, #0]
							        Current_Status.BATTERY_MODULES[CMU].CELLS[10] = (uint16_t)(RxData[2] + (RxData[3] & 0x3F) * 256);
 8002aba:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <Start_CAN_Task+0x4ec>)
 8002abc:	789b      	ldrb	r3, [r3, #2]
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <Start_CAN_Task+0x4ec>)
 8002ac2:	78db      	ldrb	r3, [r3, #3]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	021b      	lsls	r3, r3, #8
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	b298      	uxth	r0, r3
 8002ad4:	4910      	ldr	r1, [pc, #64]	; (8002b18 <Start_CAN_Task+0x4e8>)
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	33d0      	adds	r3, #208	; 0xd0
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	801a      	strh	r2, [r3, #0]
							        Current_Status.BATTERY_MODULES[CMU].CELLS[11] = (uint16_t)(RxData[4] + (RxData[5] & 0x3F) * 256);
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <Start_CAN_Task+0x4ec>)
 8002aea:	791b      	ldrb	r3, [r3, #4]
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <Start_CAN_Task+0x4ec>)
 8002af0:	795b      	ldrb	r3, [r3, #5]
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	b298      	uxth	r0, r3
 8002b02:	4905      	ldr	r1, [pc, #20]	; (8002b18 <Start_CAN_Task+0x4e8>)
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	33d2      	adds	r3, #210	; 0xd2
 8002b12:	4602      	mov	r2, r0
 8002b14:	801a      	strh	r2, [r3, #0]
							      }
							      break;
 8002b16:	e0a3      	b.n	8002c60 <Start_CAN_Task+0x630>
 8002b18:	200103b4 	.word	0x200103b4
 8002b1c:	2001109c 	.word	0x2001109c

							    case 5:
							      if (Current_Status.BATTERY_MODULES[CMU].BALANCE == 0 && Current_Status.BATTERY_MODULES[CMU].IGNORE == 0)
 8002b20:	49a3      	ldr	r1, [pc, #652]	; (8002db0 <Start_CAN_Task+0x780>)
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4613      	mov	r3, r2
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	33b4      	adds	r3, #180	; 0xb4
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	f083 0301 	eor.w	r3, r3, #1
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 8093 	beq.w	8002c64 <Start_CAN_Task+0x634>
 8002b3e:	499c      	ldr	r1, [pc, #624]	; (8002db0 <Start_CAN_Task+0x780>)
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4613      	mov	r3, r2
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	33b5      	adds	r3, #181	; 0xb5
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	f083 0301 	eor.w	r3, r3, #1
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 8084 	beq.w	8002c64 <Start_CAN_Task+0x634>
							      {
							        Current_Status.BATTERY_MODULES[CMU].CELLS[12] = (uint16_t)(RxData[0] + (RxData[1] & 0x3F) * 256);
 8002b5c:	4b95      	ldr	r3, [pc, #596]	; (8002db4 <Start_CAN_Task+0x784>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	4b94      	ldr	r3, [pc, #592]	; (8002db4 <Start_CAN_Task+0x784>)
 8002b64:	785b      	ldrb	r3, [r3, #1]
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	b298      	uxth	r0, r3
 8002b76:	498e      	ldr	r1, [pc, #568]	; (8002db0 <Start_CAN_Task+0x780>)
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	33d4      	adds	r3, #212	; 0xd4
 8002b86:	4602      	mov	r2, r0
 8002b88:	801a      	strh	r2, [r3, #0]
							        Current_Status.BATTERY_MODULES[CMU].CELLS[13] = (uint16_t)(RxData[2] + (RxData[3] & 0x3F) * 256);
 8002b8a:	4b8a      	ldr	r3, [pc, #552]	; (8002db4 <Start_CAN_Task+0x784>)
 8002b8c:	789b      	ldrb	r3, [r3, #2]
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	4b88      	ldr	r3, [pc, #544]	; (8002db4 <Start_CAN_Task+0x784>)
 8002b92:	78db      	ldrb	r3, [r3, #3]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	021b      	lsls	r3, r3, #8
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	b298      	uxth	r0, r3
 8002ba4:	4982      	ldr	r1, [pc, #520]	; (8002db0 <Start_CAN_Task+0x780>)
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	33d6      	adds	r3, #214	; 0xd6
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	801a      	strh	r2, [r3, #0]
							        Current_Status.BATTERY_MODULES[CMU].CELLS[14] = (uint16_t)(RxData[4] + (RxData[5] & 0x3F) * 256);
 8002bb8:	4b7e      	ldr	r3, [pc, #504]	; (8002db4 <Start_CAN_Task+0x784>)
 8002bba:	791b      	ldrb	r3, [r3, #4]
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	4b7d      	ldr	r3, [pc, #500]	; (8002db4 <Start_CAN_Task+0x784>)
 8002bc0:	795b      	ldrb	r3, [r3, #5]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	b298      	uxth	r0, r3
 8002bd2:	4977      	ldr	r1, [pc, #476]	; (8002db0 <Start_CAN_Task+0x780>)
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	33d8      	adds	r3, #216	; 0xd8
 8002be2:	4602      	mov	r2, r0
 8002be4:	801a      	strh	r2, [r3, #0]
							      }
							      break;
 8002be6:	e03d      	b.n	8002c64 <Start_CAN_Task+0x634>


							    case 6:
							      if (Current_Status.BATTERY_MODULES[CMU].BALANCE == 0 && Current_Status.BATTERY_MODULES[CMU].IGNORE == 0)
 8002be8:	4971      	ldr	r1, [pc, #452]	; (8002db0 <Start_CAN_Task+0x780>)
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4613      	mov	r3, r2
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	33b4      	adds	r3, #180	; 0xb4
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	f083 0301 	eor.w	r3, r3, #1
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d031      	beq.n	8002c68 <Start_CAN_Task+0x638>
 8002c04:	496a      	ldr	r1, [pc, #424]	; (8002db0 <Start_CAN_Task+0x780>)
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	33b5      	adds	r3, #181	; 0xb5
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	f083 0301 	eor.w	r3, r3, #1
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d023      	beq.n	8002c68 <Start_CAN_Task+0x638>
							      {
							        Current_Status.BATTERY_MODULES[CMU].CELLS[15] = (uint16_t)(RxData[0] + (RxData[1] & 0x3F) * 256);
 8002c20:	4b64      	ldr	r3, [pc, #400]	; (8002db4 <Start_CAN_Task+0x784>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	4b63      	ldr	r3, [pc, #396]	; (8002db4 <Start_CAN_Task+0x784>)
 8002c28:	785b      	ldrb	r3, [r3, #1]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	021b      	lsls	r3, r3, #8
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	b298      	uxth	r0, r3
 8002c3a:	495d      	ldr	r1, [pc, #372]	; (8002db0 <Start_CAN_Task+0x780>)
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	4413      	add	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	33da      	adds	r3, #218	; 0xda
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	801a      	strh	r2, [r3, #0]
							      }
							      break;
 8002c4e:	e00b      	b.n	8002c68 <Start_CAN_Task+0x638>
							  }
						  }
 8002c50:	bf00      	nop
 8002c52:	e00a      	b.n	8002c6a <Start_CAN_Task+0x63a>
							      break;
 8002c54:	bf00      	nop
 8002c56:	e008      	b.n	8002c6a <Start_CAN_Task+0x63a>
							      break;
 8002c58:	bf00      	nop
 8002c5a:	e006      	b.n	8002c6a <Start_CAN_Task+0x63a>
							      break;
 8002c5c:	bf00      	nop
 8002c5e:	e004      	b.n	8002c6a <Start_CAN_Task+0x63a>
							      break;
 8002c60:	bf00      	nop
 8002c62:	e002      	b.n	8002c6a <Start_CAN_Task+0x63a>
							      break;
 8002c64:	bf00      	nop
 8002c66:	e000      	b.n	8002c6a <Start_CAN_Task+0x63a>
							      break;
 8002c68:	bf00      	nop
						  if ((RxHeader.StdId & 0xFF0) == 0x180)    // Determine if ID is standard (11 bits) or extended (29 bits)
 8002c6a:	4b53      	ldr	r3, [pc, #332]	; (8002db8 <Start_CAN_Task+0x788>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8002c72:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002c76:	d145      	bne.n	8002d04 <Start_CAN_Task+0x6d4>
						  {
								int CMU = (RxHeader.StdId & 0x00F);
 8002c78:	4b4f      	ldr	r3, [pc, #316]	; (8002db8 <Start_CAN_Task+0x788>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	60fb      	str	r3, [r7, #12]
							  	for (int i = 0; i < (sizeof Current_Status.BATTERY_MODULES[CMU].TEMPS / sizeof Current_Status.BATTERY_MODULES[CMU].TEMPS[0]) - 1; i++)
 8002c82:	2300      	movs	r3, #0
 8002c84:	633b      	str	r3, [r7, #48]	; 0x30
 8002c86:	e03a      	b.n	8002cfe <Start_CAN_Task+0x6ce>
								{
									Current_Status.BATTERY_MODULES[CMU].TEMPS[i] = RxData[i] - 40;
 8002c88:	4a4a      	ldr	r2, [pc, #296]	; (8002db4 <Start_CAN_Task+0x784>)
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8c:	4413      	add	r3, r2
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b28      	subs	r3, #40	; 0x28
 8002c94:	b298      	uxth	r0, r3
 8002c96:	4946      	ldr	r1, [pc, #280]	; (8002db0 <Start_CAN_Task+0x780>)
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	4413      	add	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ca4:	4413      	add	r3, r2
 8002ca6:	336c      	adds	r3, #108	; 0x6c
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	440b      	add	r3, r1
 8002cac:	4602      	mov	r2, r0
 8002cae:	809a      	strh	r2, [r3, #4]
									if (Current_Status.BATTERY_MODULES[CMU].TEMPS[i] > -40)
									{
									  Current_Status.BATTERY_MODULES[CMU].TEMPS[i] = Current_Status.BATTERY_MODULES[CMU].TEMPS[i] + Current_Status.BATTERY_MODULES[CMU].TEMPOFF;
 8002cb0:	493f      	ldr	r1, [pc, #252]	; (8002db0 <Start_CAN_Task+0x780>)
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	4413      	add	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cbe:	4413      	add	r3, r2
 8002cc0:	336c      	adds	r3, #108	; 0x6c
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	440b      	add	r3, r1
 8002cc6:	8899      	ldrh	r1, [r3, #4]
 8002cc8:	4839      	ldr	r0, [pc, #228]	; (8002db0 <Start_CAN_Task+0x780>)
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4403      	add	r3, r0
 8002cd6:	33e4      	adds	r3, #228	; 0xe4
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	440b      	add	r3, r1
 8002cdc:	b298      	uxth	r0, r3
 8002cde:	4934      	ldr	r1, [pc, #208]	; (8002db0 <Start_CAN_Task+0x780>)
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	4413      	add	r3, r2
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cec:	4413      	add	r3, r2
 8002cee:	336c      	adds	r3, #108	; 0x6c
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	440b      	add	r3, r1
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	809a      	strh	r2, [r3, #4]
							  	for (int i = 0; i < (sizeof Current_Status.BATTERY_MODULES[CMU].TEMPS / sizeof Current_Status.BATTERY_MODULES[CMU].TEMPS[0]) - 1; i++)
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d9c1      	bls.n	8002c88 <Start_CAN_Task+0x658>
									}
								}
						  }
						break;
 8002d04:	bf00      	nop
				}


				Current_Status.BATTERY_VOLTAGE = 0;
 8002d06:	4b2a      	ldr	r3, [pc, #168]	; (8002db0 <Start_CAN_Task+0x780>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
				//Current_Status.CAN_TICK = Current_Status.CAN_TICK + 1;
				for (int i = 0; i < (sizeof Current_Status.BATTERY_MODULES / sizeof Current_Status.BATTERY_MODULES[0]); i++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d12:	e159      	b.n	8002fc8 <Start_CAN_Task+0x998>
				{
					Current_Status.BATTERY_MODULES[i].ENABLED = Current_Status.BMS_TICK <= Current_Status.BATTERY_MODULES[i].TICK + Current_Status.CAN_TIMEOUT;
 8002d14:	4b26      	ldr	r3, [pc, #152]	; (8002db0 <Start_CAN_Task+0x780>)
 8002d16:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002d1a:	4825      	ldr	r0, [pc, #148]	; (8002db0 <Start_CAN_Task+0x780>)
 8002d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d1e:	4613      	mov	r3, r2
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4403      	add	r3, r0
 8002d28:	33b0      	adds	r3, #176	; 0xb0
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a20      	ldr	r2, [pc, #128]	; (8002db0 <Start_CAN_Task+0x780>)
 8002d2e:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 8002d32:	4413      	add	r3, r2
 8002d34:	4299      	cmp	r1, r3
 8002d36:	bf94      	ite	ls
 8002d38:	2301      	movls	r3, #1
 8002d3a:	2300      	movhi	r3, #0
 8002d3c:	b2d8      	uxtb	r0, r3
 8002d3e:	491c      	ldr	r1, [pc, #112]	; (8002db0 <Start_CAN_Task+0x780>)
 8002d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d42:	4613      	mov	r3, r2
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	33ac      	adds	r3, #172	; 0xac
 8002d4e:	4602      	mov	r2, r0
 8002d50:	701a      	strb	r2, [r3, #0]

					if(Current_Status.BATTERY_MODULES[i].ENABLED)
 8002d52:	4917      	ldr	r1, [pc, #92]	; (8002db0 <Start_CAN_Task+0x780>)
 8002d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d56:	4613      	mov	r3, r2
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	4413      	add	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	33ac      	adds	r3, #172	; 0xac
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80d8 	beq.w	8002f1a <Start_CAN_Task+0x8ea>
					{
						Current_Status.BATTERY_MODULES[i].LOWEST_CELL_VOLTAGE = 5000;
 8002d6a:	4911      	ldr	r1, [pc, #68]	; (8002db0 <Start_CAN_Task+0x780>)
 8002d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d6e:	4613      	mov	r3, r2
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	33e8      	adds	r3, #232	; 0xe8
 8002d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7e:	801a      	strh	r2, [r3, #0]
						Current_Status.BATTERY_MODULES[i].HIGHEST_CELL_VOLTAGE = 1;
 8002d80:	490b      	ldr	r1, [pc, #44]	; (8002db0 <Start_CAN_Task+0x780>)
 8002d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d84:	4613      	mov	r3, r2
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	33ec      	adds	r3, #236	; 0xec
 8002d90:	2201      	movs	r2, #1
 8002d92:	801a      	strh	r2, [r3, #0]
						Current_Status.BATTERY_MODULES[i].VOLTAGE = 0;
 8002d94:	4906      	ldr	r1, [pc, #24]	; (8002db0 <Start_CAN_Task+0x780>)
 8002d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d98:	4613      	mov	r3, r2
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	33e6      	adds	r3, #230	; 0xe6
 8002da4:	2200      	movs	r2, #0
 8002da6:	801a      	strh	r2, [r3, #0]
						for (int y = 0; y < (sizeof Current_Status.BATTERY_MODULES[i].CELLS / sizeof Current_Status.BATTERY_MODULES[i].CELLS[0]); ++y) {
 8002da8:	2300      	movs	r3, #0
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dac:	e0b0      	b.n	8002f10 <Start_CAN_Task+0x8e0>
 8002dae:	bf00      	nop
 8002db0:	200103b4 	.word	0x200103b4
 8002db4:	2001109c 	.word	0x2001109c
 8002db8:	20011118 	.word	0x20011118

							if (Current_Status.BATTERY_MODULES[i].LOWEST_CELL_VOLTAGE > Current_Status.BATTERY_MODULES[i].CELLS[y])
 8002dbc:	49b2      	ldr	r1, [pc, #712]	; (8003088 <Start_CAN_Task+0xa58>)
 8002dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	33e8      	adds	r3, #232	; 0xe8
 8002dcc:	8819      	ldrh	r1, [r3, #0]
 8002dce:	48ae      	ldr	r0, [pc, #696]	; (8003088 <Start_CAN_Task+0xa58>)
 8002dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	4413      	add	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ddc:	4413      	add	r3, r2
 8002dde:	335c      	adds	r3, #92	; 0x5c
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	4403      	add	r3, r0
 8002de4:	889b      	ldrh	r3, [r3, #4]
 8002de6:	4299      	cmp	r1, r3
 8002de8:	d921      	bls.n	8002e2e <Start_CAN_Task+0x7fe>
							{
								Current_Status.BATTERY_MODULES[i].LOWEST_CELL_VOLTAGE = Current_Status.BATTERY_MODULES[i].CELLS[y];
 8002dea:	49a7      	ldr	r1, [pc, #668]	; (8003088 <Start_CAN_Task+0xa58>)
 8002dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dee:	4613      	mov	r3, r2
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	4413      	add	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002df8:	4413      	add	r3, r2
 8002dfa:	335c      	adds	r3, #92	; 0x5c
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	440b      	add	r3, r1
 8002e00:	8898      	ldrh	r0, [r3, #4]
 8002e02:	49a1      	ldr	r1, [pc, #644]	; (8003088 <Start_CAN_Task+0xa58>)
 8002e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e06:	4613      	mov	r3, r2
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	33e8      	adds	r3, #232	; 0xe8
 8002e12:	4602      	mov	r2, r0
 8002e14:	801a      	strh	r2, [r3, #0]
								Current_Status.BATTERY_MODULES[i].LOWEST_CELL_ID = y;
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	b2d8      	uxtb	r0, r3
 8002e1a:	499b      	ldr	r1, [pc, #620]	; (8003088 <Start_CAN_Task+0xa58>)
 8002e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e1e:	4613      	mov	r3, r2
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	33ea      	adds	r3, #234	; 0xea
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	701a      	strb	r2, [r3, #0]
							}
							if (Current_Status.BATTERY_MODULES[i].HIGHEST_CELL_VOLTAGE < Current_Status.BATTERY_MODULES[i].CELLS[y])
 8002e2e:	4996      	ldr	r1, [pc, #600]	; (8003088 <Start_CAN_Task+0xa58>)
 8002e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e32:	4613      	mov	r3, r2
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	33ec      	adds	r3, #236	; 0xec
 8002e3e:	8819      	ldrh	r1, [r3, #0]
 8002e40:	4891      	ldr	r0, [pc, #580]	; (8003088 <Start_CAN_Task+0xa58>)
 8002e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e44:	4613      	mov	r3, r2
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	4413      	add	r3, r2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e4e:	4413      	add	r3, r2
 8002e50:	335c      	adds	r3, #92	; 0x5c
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	4403      	add	r3, r0
 8002e56:	889b      	ldrh	r3, [r3, #4]
 8002e58:	4299      	cmp	r1, r3
 8002e5a:	d221      	bcs.n	8002ea0 <Start_CAN_Task+0x870>
							{
								Current_Status.BATTERY_MODULES[i].HIGHEST_CELL_VOLTAGE = Current_Status.BATTERY_MODULES[i].CELLS[y];
 8002e5c:	498a      	ldr	r1, [pc, #552]	; (8003088 <Start_CAN_Task+0xa58>)
 8002e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e60:	4613      	mov	r3, r2
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	4413      	add	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e6a:	4413      	add	r3, r2
 8002e6c:	335c      	adds	r3, #92	; 0x5c
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	440b      	add	r3, r1
 8002e72:	8898      	ldrh	r0, [r3, #4]
 8002e74:	4984      	ldr	r1, [pc, #528]	; (8003088 <Start_CAN_Task+0xa58>)
 8002e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e78:	4613      	mov	r3, r2
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	33ec      	adds	r3, #236	; 0xec
 8002e84:	4602      	mov	r2, r0
 8002e86:	801a      	strh	r2, [r3, #0]
								Current_Status.BATTERY_MODULES[i].HIGHEST_CELL_ID = y;
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	b2d8      	uxtb	r0, r3
 8002e8c:	497e      	ldr	r1, [pc, #504]	; (8003088 <Start_CAN_Task+0xa58>)
 8002e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	33ee      	adds	r3, #238	; 0xee
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	701a      	strb	r2, [r3, #0]
							}
							Current_Status.BATTERY_MODULES[i].VOLTAGE = Current_Status.BATTERY_MODULES[i].VOLTAGE + Current_Status.BATTERY_MODULES[i].CELLS[y];
 8002ea0:	4979      	ldr	r1, [pc, #484]	; (8003088 <Start_CAN_Task+0xa58>)
 8002ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	33e6      	adds	r3, #230	; 0xe6
 8002eb0:	8819      	ldrh	r1, [r3, #0]
 8002eb2:	4875      	ldr	r0, [pc, #468]	; (8003088 <Start_CAN_Task+0xa58>)
 8002eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	4413      	add	r3, r2
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ec0:	4413      	add	r3, r2
 8002ec2:	335c      	adds	r3, #92	; 0x5c
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4403      	add	r3, r0
 8002ec8:	889b      	ldrh	r3, [r3, #4]
 8002eca:	440b      	add	r3, r1
 8002ecc:	b298      	uxth	r0, r3
 8002ece:	496e      	ldr	r1, [pc, #440]	; (8003088 <Start_CAN_Task+0xa58>)
 8002ed0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	33e6      	adds	r3, #230	; 0xe6
 8002ede:	4602      	mov	r2, r0
 8002ee0:	801a      	strh	r2, [r3, #0]
							Current_Status.BATTERY_VOLTAGE = Current_Status.BATTERY_VOLTAGE + Current_Status.BATTERY_MODULES[i].CELLS[y];
 8002ee2:	4b69      	ldr	r3, [pc, #420]	; (8003088 <Start_CAN_Task+0xa58>)
 8002ee4:	f8b3 1244 	ldrh.w	r1, [r3, #580]	; 0x244
 8002ee8:	4867      	ldr	r0, [pc, #412]	; (8003088 <Start_CAN_Task+0xa58>)
 8002eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eec:	4613      	mov	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	4413      	add	r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ef6:	4413      	add	r3, r2
 8002ef8:	335c      	adds	r3, #92	; 0x5c
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4403      	add	r3, r0
 8002efe:	889b      	ldrh	r3, [r3, #4]
 8002f00:	440b      	add	r3, r1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	4b60      	ldr	r3, [pc, #384]	; (8003088 <Start_CAN_Task+0xa58>)
 8002f06:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
						for (int y = 0; y < (sizeof Current_Status.BATTERY_MODULES[i].CELLS / sizeof Current_Status.BATTERY_MODULES[i].CELLS[0]); ++y) {
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f12:	2b0f      	cmp	r3, #15
 8002f14:	f67f af52 	bls.w	8002dbc <Start_CAN_Task+0x78c>
 8002f18:	e053      	b.n	8002fc2 <Start_CAN_Task+0x992>
						}
					} else {
						Current_Status.BATTERY_MODULES[i].LOWEST_CELL_ID = 99;
 8002f1a:	495b      	ldr	r1, [pc, #364]	; (8003088 <Start_CAN_Task+0xa58>)
 8002f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	33ea      	adds	r3, #234	; 0xea
 8002f2a:	2263      	movs	r2, #99	; 0x63
 8002f2c:	701a      	strb	r2, [r3, #0]
						Current_Status.BATTERY_MODULES[i].HIGHEST_CELL_ID = 99;
 8002f2e:	4956      	ldr	r1, [pc, #344]	; (8003088 <Start_CAN_Task+0xa58>)
 8002f30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f32:	4613      	mov	r3, r2
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	33ee      	adds	r3, #238	; 0xee
 8002f3e:	2263      	movs	r2, #99	; 0x63
 8002f40:	701a      	strb	r2, [r3, #0]
						Current_Status.BATTERY_MODULES[i].TICK = 0;
 8002f42:	4951      	ldr	r1, [pc, #324]	; (8003088 <Start_CAN_Task+0xa58>)
 8002f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	33b0      	adds	r3, #176	; 0xb0
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
						Current_Status.BATTERY_MODULES[i].VOLTAGE = 0;
 8002f56:	494c      	ldr	r1, [pc, #304]	; (8003088 <Start_CAN_Task+0xa58>)
 8002f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	33e6      	adds	r3, #230	; 0xe6
 8002f66:	2200      	movs	r2, #0
 8002f68:	801a      	strh	r2, [r3, #0]
						for (int y = 0; y < (sizeof Current_Status.BATTERY_MODULES[i].CELLS / sizeof Current_Status.BATTERY_MODULES[i].CELLS[0]); ++y) {
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6e:	e00f      	b.n	8002f90 <Start_CAN_Task+0x960>
							Current_Status.BATTERY_MODULES[i].CELLS[y] = 0;
 8002f70:	4945      	ldr	r1, [pc, #276]	; (8003088 <Start_CAN_Task+0xa58>)
 8002f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f74:	4613      	mov	r3, r2
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	4413      	add	r3, r2
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7e:	4413      	add	r3, r2
 8002f80:	335c      	adds	r3, #92	; 0x5c
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	440b      	add	r3, r1
 8002f86:	2200      	movs	r2, #0
 8002f88:	809a      	strh	r2, [r3, #4]
						for (int y = 0; y < (sizeof Current_Status.BATTERY_MODULES[i].CELLS / sizeof Current_Status.BATTERY_MODULES[i].CELLS[0]); ++y) {
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	2b0f      	cmp	r3, #15
 8002f94:	d9ec      	bls.n	8002f70 <Start_CAN_Task+0x940>
						}
						for (int y = 0; y < (sizeof Current_Status.BATTERY_MODULES[i].TEMPS / sizeof Current_Status.BATTERY_MODULES[i].TEMPS[0]); ++y) {
 8002f96:	2300      	movs	r3, #0
 8002f98:	623b      	str	r3, [r7, #32]
 8002f9a:	e00f      	b.n	8002fbc <Start_CAN_Task+0x98c>
							Current_Status.BATTERY_MODULES[i].TEMPS[y] = 0;
 8002f9c:	493a      	ldr	r1, [pc, #232]	; (8003088 <Start_CAN_Task+0xa58>)
 8002f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	4413      	add	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	6a3a      	ldr	r2, [r7, #32]
 8002faa:	4413      	add	r3, r2
 8002fac:	336c      	adds	r3, #108	; 0x6c
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	440b      	add	r3, r1
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	809a      	strh	r2, [r3, #4]
						for (int y = 0; y < (sizeof Current_Status.BATTERY_MODULES[i].TEMPS / sizeof Current_Status.BATTERY_MODULES[i].TEMPS[0]); ++y) {
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	623b      	str	r3, [r7, #32]
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d9ec      	bls.n	8002f9c <Start_CAN_Task+0x96c>
				for (int i = 0; i < (sizeof Current_Status.BATTERY_MODULES / sizeof Current_Status.BATTERY_MODULES[0]); i++)
 8002fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	f67f aea2 	bls.w	8002d14 <Start_CAN_Task+0x6e4>
						}
					}
				}


				HAL_GPIO_TogglePin(LED_PJ15_GPIO_Port, LED_PJ15_Pin);
 8002fd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fd4:	482d      	ldr	r0, [pc, #180]	; (800308c <Start_CAN_Task+0xa5c>)
 8002fd6:	f003 f924 	bl	8006222 <HAL_GPIO_TogglePin>
//				Current_Status.RPM_360 =
//						Current_Status.RPM_360 >= 360 ?
//								360 : Current_Status.RPM_360;

			}
			Current_Status.CAN_TICK = Current_Status.CAN_TICK == 4294967200 ? 0 : Current_Status.CAN_TICK + 1;
 8002fda:	4b2b      	ldr	r3, [pc, #172]	; (8003088 <Start_CAN_Task+0xa58>)
 8002fdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002fe0:	f113 0f60 	cmn.w	r3, #96	; 0x60
 8002fe4:	d004      	beq.n	8002ff0 <Start_CAN_Task+0x9c0>
 8002fe6:	4b28      	ldr	r3, [pc, #160]	; (8003088 <Start_CAN_Task+0xa58>)
 8002fe8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002fec:	3301      	adds	r3, #1
 8002fee:	e000      	b.n	8002ff2 <Start_CAN_Task+0x9c2>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	4a25      	ldr	r2, [pc, #148]	; (8003088 <Start_CAN_Task+0xa58>)
 8002ff4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
			if(Current_Status.BMS_TICK + Current_Status.CAN_TIMEOUT <= Current_Status.CAN_TICK)
 8002ff8:	4b23      	ldr	r3, [pc, #140]	; (8003088 <Start_CAN_Task+0xa58>)
 8002ffa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ffe:	4a22      	ldr	r2, [pc, #136]	; (8003088 <Start_CAN_Task+0xa58>)
 8003000:	f892 209e 	ldrb.w	r2, [r2, #158]	; 0x9e
 8003004:	441a      	add	r2, r3
 8003006:	4b20      	ldr	r3, [pc, #128]	; (8003088 <Start_CAN_Task+0xa58>)
 8003008:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800300c:	429a      	cmp	r2, r3
 800300e:	d86e      	bhi.n	80030ee <Start_CAN_Task+0xabe>
			{
				Current_Status.BATTERY_VOLTAGE = 0;
 8003010:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <Start_CAN_Task+0xa58>)
 8003012:	2200      	movs	r2, #0
 8003014:	f8a3 2244 	strh.w	r2, [r3, #580]	; 0x244
				for (int i = 0; i < (sizeof Current_Status.BATTERY_MODULES / sizeof Current_Status.BATTERY_MODULES[0]); i++)
 8003018:	2300      	movs	r3, #0
 800301a:	61fb      	str	r3, [r7, #28]
 800301c:	e064      	b.n	80030e8 <Start_CAN_Task+0xab8>
				{
					Current_Status.BATTERY_MODULES[i].ENABLED = false;
 800301e:	491a      	ldr	r1, [pc, #104]	; (8003088 <Start_CAN_Task+0xa58>)
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	4613      	mov	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	33ac      	adds	r3, #172	; 0xac
 800302e:	2200      	movs	r2, #0
 8003030:	701a      	strb	r2, [r3, #0]
					Current_Status.BATTERY_MODULES[i].LOWEST_CELL_ID = 99;
 8003032:	4915      	ldr	r1, [pc, #84]	; (8003088 <Start_CAN_Task+0xa58>)
 8003034:	69fa      	ldr	r2, [r7, #28]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	33ea      	adds	r3, #234	; 0xea
 8003042:	2263      	movs	r2, #99	; 0x63
 8003044:	701a      	strb	r2, [r3, #0]
					Current_Status.BATTERY_MODULES[i].HIGHEST_CELL_ID = 99;
 8003046:	4910      	ldr	r1, [pc, #64]	; (8003088 <Start_CAN_Task+0xa58>)
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	4613      	mov	r3, r2
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	4413      	add	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	33ee      	adds	r3, #238	; 0xee
 8003056:	2263      	movs	r2, #99	; 0x63
 8003058:	701a      	strb	r2, [r3, #0]
					Current_Status.BATTERY_MODULES[i].TICK = 0;
 800305a:	490b      	ldr	r1, [pc, #44]	; (8003088 <Start_CAN_Task+0xa58>)
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	4613      	mov	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	33b0      	adds	r3, #176	; 0xb0
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
					Current_Status.BATTERY_MODULES[i].VOLTAGE = 0;
 800306e:	4906      	ldr	r1, [pc, #24]	; (8003088 <Start_CAN_Task+0xa58>)
 8003070:	69fa      	ldr	r2, [r7, #28]
 8003072:	4613      	mov	r3, r2
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	440b      	add	r3, r1
 800307c:	33e6      	adds	r3, #230	; 0xe6
 800307e:	2200      	movs	r2, #0
 8003080:	801a      	strh	r2, [r3, #0]
					for (int y = 0; y < (sizeof Current_Status.BATTERY_MODULES[i].CELLS / sizeof Current_Status.BATTERY_MODULES[i].CELLS[0]); ++y) {
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]
 8003086:	e013      	b.n	80030b0 <Start_CAN_Task+0xa80>
 8003088:	200103b4 	.word	0x200103b4
 800308c:	40022400 	.word	0x40022400
						Current_Status.BATTERY_MODULES[i].CELLS[y] = 0;
 8003090:	4919      	ldr	r1, [pc, #100]	; (80030f8 <Start_CAN_Task+0xac8>)
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	4613      	mov	r3, r2
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	4413      	add	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4413      	add	r3, r2
 80030a0:	335c      	adds	r3, #92	; 0x5c
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	440b      	add	r3, r1
 80030a6:	2200      	movs	r2, #0
 80030a8:	809a      	strh	r2, [r3, #4]
					for (int y = 0; y < (sizeof Current_Status.BATTERY_MODULES[i].CELLS / sizeof Current_Status.BATTERY_MODULES[i].CELLS[0]); ++y) {
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	3301      	adds	r3, #1
 80030ae:	61bb      	str	r3, [r7, #24]
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2b0f      	cmp	r3, #15
 80030b4:	d9ec      	bls.n	8003090 <Start_CAN_Task+0xa60>
					}
					for (int y = 0; y < (sizeof Current_Status.BATTERY_MODULES[i].TEMPS / sizeof Current_Status.BATTERY_MODULES[i].TEMPS[0]); ++y) {
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	e00f      	b.n	80030dc <Start_CAN_Task+0xaac>
						Current_Status.BATTERY_MODULES[i].TEMPS[y] = 0;
 80030bc:	490e      	ldr	r1, [pc, #56]	; (80030f8 <Start_CAN_Task+0xac8>)
 80030be:	69fa      	ldr	r2, [r7, #28]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	4413      	add	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4413      	add	r3, r2
 80030cc:	336c      	adds	r3, #108	; 0x6c
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	440b      	add	r3, r1
 80030d2:	2200      	movs	r2, #0
 80030d4:	809a      	strh	r2, [r3, #4]
					for (int y = 0; y < (sizeof Current_Status.BATTERY_MODULES[i].TEMPS / sizeof Current_Status.BATTERY_MODULES[i].TEMPS[0]); ++y) {
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	3301      	adds	r3, #1
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d9ec      	bls.n	80030bc <Start_CAN_Task+0xa8c>
				for (int i = 0; i < (sizeof Current_Status.BATTERY_MODULES / sizeof Current_Status.BATTERY_MODULES[0]); i++)
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	3301      	adds	r3, #1
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	2b05      	cmp	r3, #5
 80030ec:	d997      	bls.n	800301e <Start_CAN_Task+0x9ee>
					}
				}
			}


			osDelay(1);
 80030ee:	2001      	movs	r0, #1
 80030f0:	f009 f86f 	bl	800c1d2 <osDelay>
		if (CAN_ENABLED) {
 80030f4:	f7ff bab5 	b.w	8002662 <Start_CAN_Task+0x32>
 80030f8:	200103b4 	.word	0x200103b4

080030fc <Start_BTN_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_BTN_Task */
void Start_BTN_Task(void *argument)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]

	//htim9.Instance->CCR1 = crr1 - 1; //left
	//htim9.Instance->CCR2 = crr2 - 1; //right

	for (;;) {
		Current_Status.BTN_TOP_RIGHT = HAL_GPIO_ReadPin(BTN_1_GPIO_Port,
 8003104:	2104      	movs	r1, #4
 8003106:	4839      	ldr	r0, [pc, #228]	; (80031ec <Start_BTN_Task+0xf0>)
 8003108:	f003 f85a 	bl	80061c0 <HAL_GPIO_ReadPin>
 800310c:	4603      	mov	r3, r0
 800310e:	461a      	mov	r2, r3
 8003110:	4b37      	ldr	r3, [pc, #220]	; (80031f0 <Start_BTN_Task+0xf4>)
 8003112:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		BTN_1_Pin);
		Current_Status.BTN_TOP_LEFT = HAL_GPIO_ReadPin(BTN_3_GPIO_Port,
 8003116:	2140      	movs	r1, #64	; 0x40
 8003118:	4836      	ldr	r0, [pc, #216]	; (80031f4 <Start_BTN_Task+0xf8>)
 800311a:	f003 f851 	bl	80061c0 <HAL_GPIO_ReadPin>
 800311e:	4603      	mov	r3, r0
 8003120:	461a      	mov	r2, r3
 8003122:	4b33      	ldr	r3, [pc, #204]	; (80031f0 <Start_BTN_Task+0xf4>)
 8003124:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

		//Current_Status.RPM = Current_Status.LCD_BRIGHTNESS;
		//Current_Status.IND_LEFT = Current_Status.BTN_TOP_LEFT;
		//Current_Status.IND_RIGHT = Current_Status.BTN_TOP_RIGHT;

		Current_Status.BTN_BOTTOM_RIGHT = HAL_GPIO_ReadPin(BTN_2_GPIO_Port,
 8003128:	2108      	movs	r1, #8
 800312a:	4830      	ldr	r0, [pc, #192]	; (80031ec <Start_BTN_Task+0xf0>)
 800312c:	f003 f848 	bl	80061c0 <HAL_GPIO_ReadPin>
 8003130:	4603      	mov	r3, r0
 8003132:	461a      	mov	r2, r3
 8003134:	4b2e      	ldr	r3, [pc, #184]	; (80031f0 <Start_BTN_Task+0xf4>)
 8003136:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
		BTN_2_Pin);
		Current_Status.BTN_BOTTOM_LEFT = HAL_GPIO_ReadPin(BTN_4_GPIO_Port,
 800313a:	2180      	movs	r1, #128	; 0x80
 800313c:	482d      	ldr	r0, [pc, #180]	; (80031f4 <Start_BTN_Task+0xf8>)
 800313e:	f003 f83f 	bl	80061c0 <HAL_GPIO_ReadPin>
 8003142:	4603      	mov	r3, r0
 8003144:	461a      	mov	r2, r3
 8003146:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <Start_BTN_Task+0xf4>)
 8003148:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
		BTN_4_Pin);

		if (Current_Status.BTN_BOTTOM_LEFT == 1
 800314c:	4b28      	ldr	r3, [pc, #160]	; (80031f0 <Start_BTN_Task+0xf4>)
 800314e:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8003152:	2b01      	cmp	r3, #1
 8003154:	d11a      	bne.n	800318c <Start_BTN_Task+0x90>
				&& Current_Status.LCD_BRIGHTNESS_CHANGED == 0) {
 8003156:	4b26      	ldr	r3, [pc, #152]	; (80031f0 <Start_BTN_Task+0xf4>)
 8003158:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800315c:	2b00      	cmp	r3, #0
 800315e:	d115      	bne.n	800318c <Start_BTN_Task+0x90>
			Current_Status.LCD_BRIGHTNESS =
					Current_Status.LCD_BRIGHTNESS >= 50 ?
 8003160:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <Start_BTN_Task+0xf4>)
 8003162:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
			Current_Status.LCD_BRIGHTNESS =
 8003166:	2b31      	cmp	r3, #49	; 0x31
 8003168:	d905      	bls.n	8003176 <Start_BTN_Task+0x7a>
							Current_Status.LCD_BRIGHTNESS - 50 :
 800316a:	4b21      	ldr	r3, [pc, #132]	; (80031f0 <Start_BTN_Task+0xf4>)
 800316c:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
			Current_Status.LCD_BRIGHTNESS =
 8003170:	3b32      	subs	r3, #50	; 0x32
 8003172:	b29b      	uxth	r3, r3
 8003174:	e002      	b.n	800317c <Start_BTN_Task+0x80>
 8003176:	4b1e      	ldr	r3, [pc, #120]	; (80031f0 <Start_BTN_Task+0xf4>)
 8003178:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 800317c:	4a1c      	ldr	r2, [pc, #112]	; (80031f0 <Start_BTN_Task+0xf4>)
 800317e:	f8a2 309a 	strh.w	r3, [r2, #154]	; 0x9a
							Current_Status.LCD_BRIGHTNESS;
			Current_Status.LCD_BRIGHTNESS_CHANGED = 1;
 8003182:	4b1b      	ldr	r3, [pc, #108]	; (80031f0 <Start_BTN_Task+0xf4>)
 8003184:	2201      	movs	r2, #1
 8003186:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 800318a:	e024      	b.n	80031d6 <Start_BTN_Task+0xda>
		} else if (Current_Status.BTN_BOTTOM_RIGHT == 1
 800318c:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <Start_BTN_Task+0xf4>)
 800318e:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8003192:	2b01      	cmp	r3, #1
 8003194:	d11b      	bne.n	80031ce <Start_BTN_Task+0xd2>
				&& Current_Status.LCD_BRIGHTNESS_CHANGED == 0) {
 8003196:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <Start_BTN_Task+0xf4>)
 8003198:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800319c:	2b00      	cmp	r3, #0
 800319e:	d116      	bne.n	80031ce <Start_BTN_Task+0xd2>
			Current_Status.LCD_BRIGHTNESS =
					Current_Status.LCD_BRIGHTNESS <= 1000 ?
 80031a0:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <Start_BTN_Task+0xf4>)
 80031a2:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
			Current_Status.LCD_BRIGHTNESS =
 80031a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031aa:	d805      	bhi.n	80031b8 <Start_BTN_Task+0xbc>
							Current_Status.LCD_BRIGHTNESS + 50 :
 80031ac:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <Start_BTN_Task+0xf4>)
 80031ae:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
			Current_Status.LCD_BRIGHTNESS =
 80031b2:	3332      	adds	r3, #50	; 0x32
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	e002      	b.n	80031be <Start_BTN_Task+0xc2>
 80031b8:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <Start_BTN_Task+0xf4>)
 80031ba:	f8b3 309a 	ldrh.w	r3, [r3, #154]	; 0x9a
 80031be:	4a0c      	ldr	r2, [pc, #48]	; (80031f0 <Start_BTN_Task+0xf4>)
 80031c0:	f8a2 309a 	strh.w	r3, [r2, #154]	; 0x9a
							Current_Status.LCD_BRIGHTNESS;
			Current_Status.LCD_BRIGHTNESS_CHANGED = 1;
 80031c4:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <Start_BTN_Task+0xf4>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 80031cc:	e003      	b.n	80031d6 <Start_BTN_Task+0xda>
		} else {
			Current_Status.LCD_BRIGHTNESS_CHANGED = 0;
 80031ce:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <Start_BTN_Task+0xf4>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}

		uint8_t in16 = HAL_GPIO_ReadPin(HALL_OUT_1_PI12_GPIO_Port,
 80031d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031da:	4807      	ldr	r0, [pc, #28]	; (80031f8 <Start_BTN_Task+0xfc>)
 80031dc:	f002 fff0 	bl	80061c0 <HAL_GPIO_ReadPin>
 80031e0:	4603      	mov	r3, r0
 80031e2:	73fb      	strb	r3, [r7, #15]
//		Current_Status.IND_RIGHT =
//				in16 == 0 && htim9.Instance->CNT < crr2 ? true : false;

		//Current_Status.ECT = htim9.Instance->CNT;

		osDelay(1);
 80031e4:	2001      	movs	r0, #1
 80031e6:	f008 fff4 	bl	800c1d2 <osDelay>
	for (;;) {
 80031ea:	e78b      	b.n	8003104 <Start_BTN_Task+0x8>
 80031ec:	40021000 	.word	0x40021000
 80031f0:	200103b4 	.word	0x200103b4
 80031f4:	40022400 	.word	0x40022400
 80031f8:	40022000 	.word	0x40022000

080031fc <Start_RGB_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_RGB_Task */
void Start_RGB_Task(void *argument)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	; 0x28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_RGB_Task */

	/* Infinite loop */
	for (;;) {
		if (RGB_ENABLED) {
			WS2812_Clear(0);
 8003204:	2000      	movs	r0, #0
 8003206:	f7fe fb3b 	bl	8001880 <WS2812_Clear>
			uint8_t RPMLED = 24;
 800320a:	2318      	movs	r3, #24
 800320c:	77fb      	strb	r3, [r7, #31]

			uint16_t lowRange = mapInt(Current_Status.RPM, PROTECTION_RPM_LOW,
 800320e:	4b72      	ldr	r3, [pc, #456]	; (80033d8 <Start_RGB_Task+0x1dc>)
 8003210:	889b      	ldrh	r3, [r3, #4]
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321a:	7ffb      	ldrb	r3, [r7, #31]
 800321c:	3b06      	subs	r3, #6
 800321e:	2101      	movs	r1, #1
 8003220:	4618      	mov	r0, r3
 8003222:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 80033dc <Start_RGB_Task+0x1e0>
 8003226:	eddf 0a6e 	vldr	s1, [pc, #440]	; 80033e0 <Start_RGB_Task+0x1e4>
 800322a:	eeb0 0a67 	vmov.f32	s0, s15
 800322e:	f7ff f99b 	bl	8002568 <mapInt>
 8003232:	4603      	mov	r3, r0
 8003234:	83bb      	strh	r3, [r7, #28]
					0, RPMLED - PROTECTION_RPM_LED, 1);
			lowRange =
					lowRange > RPMLED - PROTECTION_RPM_LED ?
 8003236:	7ffb      	ldrb	r3, [r7, #31]
 8003238:	1f5a      	subs	r2, r3, #5
 800323a:	8bbb      	ldrh	r3, [r7, #28]
			lowRange =
 800323c:	429a      	cmp	r2, r3
 800323e:	dc04      	bgt.n	800324a <Start_RGB_Task+0x4e>
							RPMLED - PROTECTION_RPM_LED : lowRange;
 8003240:	7ffb      	ldrb	r3, [r7, #31]
 8003242:	b29b      	uxth	r3, r3
			lowRange =
 8003244:	3b06      	subs	r3, #6
 8003246:	b29b      	uxth	r3, r3
 8003248:	e000      	b.n	800324c <Start_RGB_Task+0x50>
 800324a:	8bbb      	ldrh	r3, [r7, #28]
 800324c:	83bb      	strh	r3, [r7, #28]
			lowRange = lowRange < 1 ? 1 : lowRange;
 800324e:	8bbb      	ldrh	r3, [r7, #28]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <Start_RGB_Task+0x5c>
 8003254:	8bbb      	ldrh	r3, [r7, #28]
 8003256:	e000      	b.n	800325a <Start_RGB_Task+0x5e>
 8003258:	2301      	movs	r3, #1
 800325a:	83bb      	strh	r3, [r7, #28]

			for (int i = 1; i <= lowRange; i++) {
 800325c:	2301      	movs	r3, #1
 800325e:	627b      	str	r3, [r7, #36]	; 0x24
 8003260:	e029      	b.n	80032b6 <Start_RGB_Task+0xba>
				WS2812_RGB_t color;
				if (Current_Status.ENGINE_PROTECTION == 1) {
 8003262:	4b5d      	ldr	r3, [pc, #372]	; (80033d8 <Start_RGB_Task+0x1dc>)
 8003264:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003268:	2b01      	cmp	r3, #1
 800326a:	d106      	bne.n	800327a <Start_RGB_Task+0x7e>
					color.red = 255;
 800326c:	23ff      	movs	r3, #255	; 0xff
 800326e:	753b      	strb	r3, [r7, #20]
					color.green = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	757b      	strb	r3, [r7, #21]
					color.blue = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	75bb      	strb	r3, [r7, #22]
 8003278:	e012      	b.n	80032a0 <Start_RGB_Task+0xa4>
				} else {
					color.red = (int) (0 * Current_Status.LED_BRIGHTNESS / 100);
 800327a:	2300      	movs	r3, #0
 800327c:	753b      	strb	r3, [r7, #20]
					color.green = (int) (255 * Current_Status.LED_BRIGHTNESS
 800327e:	4b56      	ldr	r3, [pc, #344]	; (80033d8 <Start_RGB_Task+0x1dc>)
 8003280:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8003284:	461a      	mov	r2, r3
 8003286:	4613      	mov	r3, r2
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	1a9b      	subs	r3, r3, r2
 800328c:	4a55      	ldr	r2, [pc, #340]	; (80033e4 <Start_RGB_Task+0x1e8>)
 800328e:	fb82 1203 	smull	r1, r2, r2, r3
 8003292:	1152      	asrs	r2, r2, #5
 8003294:	17db      	asrs	r3, r3, #31
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	b2db      	uxtb	r3, r3
 800329a:	757b      	strb	r3, [r7, #21]
							/ 100);
					color.blue =
 800329c:	2300      	movs	r3, #0
 800329e:	75bb      	strb	r3, [r7, #22]
							(int) (0 * Current_Status.LED_BRIGHTNESS / 100);
				}
				WS2812_One_RGB((RPMLED - i) + (LED_NUMBER - RPMLED), color, 0);
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	f1c3 032e 	rsb	r3, r3, #46	; 0x2e
 80032a6:	2200      	movs	r2, #0
 80032a8:	6979      	ldr	r1, [r7, #20]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fe fb1a 	bl	80018e4 <WS2812_One_RGB>
			for (int i = 1; i <= lowRange; i++) {
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	3301      	adds	r3, #1
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
 80032b6:	8bbb      	ldrh	r3, [r7, #28]
 80032b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ba:	429a      	cmp	r2, r3
 80032bc:	ddd1      	ble.n	8003262 <Start_RGB_Task+0x66>
			}

			if (Current_Status.RPM > PROTECTION_RPM_LOW) {
 80032be:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <Start_RGB_Task+0x1dc>)
 80032c0:	889b      	ldrh	r3, [r3, #4]
 80032c2:	f641 1264 	movw	r2, #6500	; 0x1964
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d945      	bls.n	8003356 <Start_RGB_Task+0x15a>
				uint16_t highRange = mapInt(Current_Status.RPM,
 80032ca:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <Start_RGB_Task+0x1dc>)
 80032cc:	889b      	ldrh	r3, [r3, #4]
 80032ce:	ee07 3a90 	vmov	s15, r3
 80032d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d6:	2101      	movs	r1, #1
 80032d8:	2006      	movs	r0, #6
 80032da:	ed9f 1a41 	vldr	s2, [pc, #260]	; 80033e0 <Start_RGB_Task+0x1e4>
 80032de:	eddf 0a42 	vldr	s1, [pc, #264]	; 80033e8 <Start_RGB_Task+0x1ec>
 80032e2:	eeb0 0a67 	vmov.f32	s0, s15
 80032e6:	f7ff f93f 	bl	8002568 <mapInt>
 80032ea:	4603      	mov	r3, r0
 80032ec:	837b      	strh	r3, [r7, #26]
				PROTECTION_RPM_HIGH, PROTECTION_RPM_LOW,
				PROTECTION_RPM_LED, 1);

				Current_Status.GPS_SATTELITES = highRange;
 80032ee:	4a3a      	ldr	r2, [pc, #232]	; (80033d8 <Start_RGB_Task+0x1dc>)
 80032f0:	8b7b      	ldrh	r3, [r7, #26]
 80032f2:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
				for (int i = 1; i <= highRange; i++) {
 80032f6:	2301      	movs	r3, #1
 80032f8:	623b      	str	r3, [r7, #32]
 80032fa:	e028      	b.n	800334e <Start_RGB_Task+0x152>
					WS2812_RGB_t color;
					color.red = (int) (255
							* (Current_Status.ENGINE_PROTECTION == 1 ?
 80032fc:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <Start_RGB_Task+0x1dc>)
 80032fe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
					color.red = (int) (255
 8003302:	2b01      	cmp	r3, #1
 8003304:	d00e      	beq.n	8003324 <Start_RGB_Task+0x128>
									100 : Current_Status.LED_BRIGHTNESS) / 100);
 8003306:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <Start_RGB_Task+0x1dc>)
 8003308:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800330c:	461a      	mov	r2, r3
							* (Current_Status.ENGINE_PROTECTION == 1 ?
 800330e:	4613      	mov	r3, r2
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	1a9b      	subs	r3, r3, r2
					color.red = (int) (255
 8003314:	4a33      	ldr	r2, [pc, #204]	; (80033e4 <Start_RGB_Task+0x1e8>)
 8003316:	fb82 1203 	smull	r1, r2, r2, r3
 800331a:	1152      	asrs	r2, r2, #5
 800331c:	17db      	asrs	r3, r3, #31
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e000      	b.n	8003326 <Start_RGB_Task+0x12a>
 8003324:	23ff      	movs	r3, #255	; 0xff
 8003326:	743b      	strb	r3, [r7, #16]
					color.green = (int) (0
 8003328:	2300      	movs	r3, #0
 800332a:	747b      	strb	r3, [r7, #17]
							* (Current_Status.ENGINE_PROTECTION == 1 ?
									100 : Current_Status.LED_BRIGHTNESS) / 100);
					color.blue = (int) (0
 800332c:	2300      	movs	r3, #0
 800332e:	74bb      	strb	r3, [r7, #18]
							* (Current_Status.ENGINE_PROTECTION == 1 ?
									100 : Current_Status.LED_BRIGHTNESS) / 100);

					WS2812_One_RGB(
							(PROTECTION_RPM_LED - i) + (LED_NUMBER - RPMLED),
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	f1c3 0206 	rsb	r2, r3, #6
 8003336:	7ffb      	ldrb	r3, [r7, #31]
 8003338:	f1c3 032e 	rsb	r3, r3, #46	; 0x2e
 800333c:	4413      	add	r3, r2
					WS2812_One_RGB(
 800333e:	2200      	movs	r2, #0
 8003340:	6939      	ldr	r1, [r7, #16]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe face 	bl	80018e4 <WS2812_One_RGB>
				for (int i = 1; i <= highRange; i++) {
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	3301      	adds	r3, #1
 800334c:	623b      	str	r3, [r7, #32]
 800334e:	8b7b      	ldrh	r3, [r7, #26]
 8003350:	6a3a      	ldr	r2, [r7, #32]
 8003352:	429a      	cmp	r2, r3
 8003354:	ddd2      	ble.n	80032fc <Start_RGB_Task+0x100>
			//		WS2812_One_RGB(4, (WS2812_RGB_t){(255 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100)}, 0); //orange
			//		WS2812_One_RGB(5, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100)}, 0);//green
			//
			//		WS2812_One_RGB(18, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100)}, 0); //red
			//		WS2812_One_RGB(20, (WS2812_RGB_t){(0 * Current_Status.LED_BRIGHTNESS / 100), (0 * Current_Status.LED_BRIGHTNESS / 100), (255 * Current_Status.LED_BRIGHTNESS / 100)}, 0); //orange
			if (Current_Status.IND_LEFT) {
 8003356:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <Start_RGB_Task+0x1dc>)
 8003358:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800335c:	2b00      	cmp	r3, #0
 800335e:	d017      	beq.n	8003390 <Start_RGB_Task+0x194>
				WS2812_One_RGB(21,
						(WS2812_RGB_t ) { (0
 8003360:	2300      	movs	r3, #0
 8003362:	733b      	strb	r3, [r7, #12]
										* Current_Status.LED_BRIGHTNESS / 100),
										(255 * Current_Status.LED_BRIGHTNESS
 8003364:	4b1c      	ldr	r3, [pc, #112]	; (80033d8 <Start_RGB_Task+0x1dc>)
 8003366:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800336a:	461a      	mov	r2, r3
 800336c:	4613      	mov	r3, r2
 800336e:	021b      	lsls	r3, r3, #8
 8003370:	1a9b      	subs	r3, r3, r2
												/ 100), (0
 8003372:	4a1c      	ldr	r2, [pc, #112]	; (80033e4 <Start_RGB_Task+0x1e8>)
 8003374:	fb82 1203 	smull	r1, r2, r2, r3
 8003378:	1152      	asrs	r2, r2, #5
 800337a:	17db      	asrs	r3, r3, #31
 800337c:	1ad3      	subs	r3, r2, r3
						(WS2812_RGB_t ) { (0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	737b      	strb	r3, [r7, #13]
 8003382:	2300      	movs	r3, #0
 8003384:	73bb      	strb	r3, [r7, #14]
				WS2812_One_RGB(21,
 8003386:	2200      	movs	r2, #0
 8003388:	68f9      	ldr	r1, [r7, #12]
 800338a:	2015      	movs	r0, #21
 800338c:	f7fe faaa 	bl	80018e4 <WS2812_One_RGB>
												* Current_Status.LED_BRIGHTNESS
												/ 100) }, 0);	  //green
			}
			if (Current_Status.IND_RIGHT) {
 8003390:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <Start_RGB_Task+0x1dc>)
 8003392:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8003396:	2b00      	cmp	r3, #0
 8003398:	d017      	beq.n	80033ca <Start_RGB_Task+0x1ce>
				WS2812_One_RGB(0,
						(WS2812_RGB_t ) { (0
 800339a:	2300      	movs	r3, #0
 800339c:	723b      	strb	r3, [r7, #8]
										* Current_Status.LED_BRIGHTNESS / 100),
										(255 * Current_Status.LED_BRIGHTNESS
 800339e:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <Start_RGB_Task+0x1dc>)
 80033a0:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80033a4:	461a      	mov	r2, r3
 80033a6:	4613      	mov	r3, r2
 80033a8:	021b      	lsls	r3, r3, #8
 80033aa:	1a9b      	subs	r3, r3, r2
												/ 100), (0
 80033ac:	4a0d      	ldr	r2, [pc, #52]	; (80033e4 <Start_RGB_Task+0x1e8>)
 80033ae:	fb82 1203 	smull	r1, r2, r2, r3
 80033b2:	1152      	asrs	r2, r2, #5
 80033b4:	17db      	asrs	r3, r3, #31
 80033b6:	1ad3      	subs	r3, r2, r3
						(WS2812_RGB_t ) { (0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	727b      	strb	r3, [r7, #9]
 80033bc:	2300      	movs	r3, #0
 80033be:	72bb      	strb	r3, [r7, #10]
				WS2812_One_RGB(0,
 80033c0:	2200      	movs	r2, #0
 80033c2:	68b9      	ldr	r1, [r7, #8]
 80033c4:	2000      	movs	r0, #0
 80033c6:	f7fe fa8d 	bl	80018e4 <WS2812_One_RGB>
												* Current_Status.LED_BRIGHTNESS
												/ 100) }, 0);	  //green
			}

			WS2812_Refresh();
 80033ca:	f7fe fa49 	bl	8001860 <WS2812_Refresh>
			osDelay(84);
 80033ce:	2054      	movs	r0, #84	; 0x54
 80033d0:	f008 feff 	bl	800c1d2 <osDelay>
		if (RGB_ENABLED) {
 80033d4:	e716      	b.n	8003204 <Start_RGB_Task+0x8>
 80033d6:	bf00      	nop
 80033d8:	200103b4 	.word	0x200103b4
 80033dc:	00000000 	.word	0x00000000
 80033e0:	45cb2000 	.word	0x45cb2000
 80033e4:	51eb851f 	.word	0x51eb851f
 80033e8:	45f3c000 	.word	0x45f3c000

080033ec <Start_BMS_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_BMS_Task */
void Start_BMS_Task(void *argument)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b0dc      	sub	sp, #368	; 0x170
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80033f6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80033fa:	6018      	str	r0, [r3, #0]
  /* Infinite loop */

	CAN_TxHeaderTypeDef   TxHeader;
	uint8_t               TxData[8];
	uint32_t              TxMailbox;
	uint8_t               mescycle = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
	uint8_t               nextmes = 0;
 8003402:	2300      	movs	r3, #0
 8003404:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e
	uint8_t               testcycle = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	f887 316d 	strb.w	r3, [r7, #365]	; 0x16d
	uint8_t               balancecells;
	uint8_t               balancepauze = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	const uint8_t finalxor [12] = {0xCF, 0xF5, 0xBB, 0x81, 0x27, 0x1D, 0x53, 0x69, 0x02, 0x38, 0x76, 0x4C};
 8003414:	4ab4      	ldr	r2, [pc, #720]	; (80036e8 <Start_BMS_Task+0x2fc>)
 8003416:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800341a:	ca07      	ldmia	r2, {r0, r1, r2}
 800341c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	uint8_t  remainder;



	for (int dividend = 0; dividend < 256; ++dividend)
 8003420:	2300      	movs	r3, #0
 8003422:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8003426:	e032      	b.n	800348e <Start_BMS_Task+0xa2>
	{
		remainder = dividend << (WIDTH - 8);
 8003428:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800342c:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b

		for (uint8_t bit = 8; bit > 0; --bit)
 8003430:	2308      	movs	r3, #8
 8003432:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
 8003436:	e017      	b.n	8003468 <Start_BMS_Task+0x7c>
		{
			if (remainder & TOPBIT)
 8003438:	f997 316b 	ldrsb.w	r3, [r7, #363]	; 0x16b
 800343c:	2b00      	cmp	r3, #0
 800343e:	da09      	bge.n	8003454 <Start_BMS_Task+0x68>
			{
				remainder = (remainder << 1) ^ POLYNOMIAL;
 8003440:	f897 316b 	ldrb.w	r3, [r7, #363]	; 0x16b
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	b25b      	sxtb	r3, r3
 8003448:	f083 031d 	eor.w	r3, r3, #29
 800344c:	b25b      	sxtb	r3, r3
 800344e:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
 8003452:	e004      	b.n	800345e <Start_BMS_Task+0x72>
			}
			else
			{
				remainder = (remainder << 1);
 8003454:	f897 316b 	ldrb.w	r3, [r7, #363]	; 0x16b
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
		for (uint8_t bit = 8; bit > 0; --bit)
 800345e:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8003462:	3b01      	subs	r3, #1
 8003464:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
 8003468:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1e3      	bne.n	8003438 <Start_BMS_Task+0x4c>
			}
		}
		crcTable[dividend] = remainder;
 8003470:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003474:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 8003478:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800347c:	4413      	add	r3, r2
 800347e:	f897 216b 	ldrb.w	r2, [r7, #363]	; 0x16b
 8003482:	701a      	strb	r2, [r3, #0]
	for (int dividend = 0; dividend < 256; ++dividend)
 8003484:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003488:	3301      	adds	r3, #1
 800348a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800348e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003492:	2bff      	cmp	r3, #255	; 0xff
 8003494:	ddc8      	ble.n	8003428 <Start_BMS_Task+0x3c>
	}

	for (int i = 0; i < (sizeof Current_Status.BATTERY_MODULES / sizeof Current_Status.BATTERY_MODULES[0]); ++i) {
 8003496:	2300      	movs	r3, #0
 8003498:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800349c:	e025      	b.n	80034ea <Start_BMS_Task+0xfe>
		Current_Status.BATTERY_MODULES[i].LOWEST_CELL_ID = 99;
 800349e:	4993      	ldr	r1, [pc, #588]	; (80036ec <Start_BMS_Task+0x300>)
 80034a0:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	33ea      	adds	r3, #234	; 0xea
 80034b0:	2263      	movs	r2, #99	; 0x63
 80034b2:	701a      	strb	r2, [r3, #0]
		Current_Status.BATTERY_MODULES[i].HIGHEST_CELL_ID = 99;
 80034b4:	498d      	ldr	r1, [pc, #564]	; (80036ec <Start_BMS_Task+0x300>)
 80034b6:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80034ba:	4613      	mov	r3, r2
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	33ee      	adds	r3, #238	; 0xee
 80034c6:	2263      	movs	r2, #99	; 0x63
 80034c8:	701a      	strb	r2, [r3, #0]
		Current_Status.BATTERY_MODULES[i].TICK = 0;
 80034ca:	4988      	ldr	r1, [pc, #544]	; (80036ec <Start_BMS_Task+0x300>)
 80034cc:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80034d0:	4613      	mov	r3, r2
 80034d2:	011b      	lsls	r3, r3, #4
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	33b0      	adds	r3, #176	; 0xb0
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < (sizeof Current_Status.BATTERY_MODULES / sizeof Current_Status.BATTERY_MODULES[0]); ++i) {
 80034e0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80034e4:	3301      	adds	r3, #1
 80034e6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80034ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80034ee:	2b05      	cmp	r3, #5
 80034f0:	d9d5      	bls.n	800349e <Start_BMS_Task+0xb2>
	}


  for(;;)
  {
	  if(Current_Status.CAN_PROTOCOL == CAN_BMW_PHEV)
 80034f2:	4b7e      	ldr	r3, [pc, #504]	; (80036ec <Start_BMS_Task+0x300>)
 80034f4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d1fa      	bne.n	80034f2 <Start_BMS_Task+0x106>
	  {
		if (nextmes == 6)
 80034fc:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 8003500:	2b06      	cmp	r3, #6
 8003502:	d117      	bne.n	8003534 <Start_BMS_Task+0x148>
		{
			mescycle ++;
 8003504:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8003508:	3301      	adds	r3, #1
 800350a:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
			nextmes = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e

			if (testcycle < 4)
 8003514:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 8003518:	2b03      	cmp	r3, #3
 800351a:	d804      	bhi.n	8003526 <Start_BMS_Task+0x13a>
			{
				testcycle++;
 800351c:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 8003520:	3301      	adds	r3, #1
 8003522:	f887 316d 	strb.w	r3, [r7, #365]	; 0x16d
			}
			if (mescycle == 0xF)
 8003526:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800352a:	2b0f      	cmp	r3, #15
 800352c:	d102      	bne.n	8003534 <Start_BMS_Task+0x148>
			{
				mescycle = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
			}
		}

		if (balancepauze == 1)
 8003534:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8003538:	2b01      	cmp	r3, #1
 800353a:	d102      	bne.n	8003542 <Start_BMS_Task+0x156>
		{
			balancecells = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	f887 316c 	strb.w	r3, [r7, #364]	; 0x16c
		}

		TxHeader.IDE = CAN_ID_STD;
 8003542:	2300      	movs	r3, #0
 8003544:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
		TxHeader.RTR = CAN_RTR_DATA;
 8003548:	2300      	movs	r3, #0
 800354a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
		TxHeader.DLC = 8;
 800354e:	2308      	movs	r3, #8
 8003550:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

		TxHeader.StdId = 0x080 | (nextmes);
 8003554:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 8003558:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800355c:	b2db      	uxtb	r3, r3
 800355e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		TxData[0] = 0xC7;
 8003562:	23c7      	movs	r3, #199	; 0xc7
 8003564:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124
		TxData[1] = 0x10;
 8003568:	2310      	movs	r3, #16
 800356a:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
		TxData[2] = 0x00;
 800356e:	2300      	movs	r3, #0
 8003570:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
		TxData[3] = 0x00;
 8003574:	2300      	movs	r3, #0
 8003576:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

		if (testcycle < 3)
 800357a:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 800357e:	2b02      	cmp	r3, #2
 8003580:	d806      	bhi.n	8003590 <Start_BMS_Task+0x1a4>
		{
			TxData[4] = 0x20;
 8003582:	2320      	movs	r3, #32
 8003584:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
			TxData[5] = 0x00;
 8003588:	2300      	movs	r3, #0
 800358a:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
 800358e:	e00d      	b.n	80035ac <Start_BMS_Task+0x1c0>
		}
		else
		{
			if (balancecells == 1)
 8003590:	f897 316c 	ldrb.w	r3, [r7, #364]	; 0x16c
 8003594:	2b01      	cmp	r3, #1
 8003596:	d103      	bne.n	80035a0 <Start_BMS_Task+0x1b4>
			{
				TxData[4] = 0x48;
 8003598:	2348      	movs	r3, #72	; 0x48
 800359a:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
 800359e:	e002      	b.n	80035a6 <Start_BMS_Task+0x1ba>
			}
			else
			{
				TxData[4] = 0x40;
 80035a0:	2340      	movs	r3, #64	; 0x40
 80035a2:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
			}
			TxData[5] = 0x01;
 80035a6:	2301      	movs	r3, #1
 80035a8:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
		}

		TxData[6] = mescycle << 4;
 80035ac:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
		if (testcycle == 2)
 80035b8:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d105      	bne.n	80035cc <Start_BMS_Task+0x1e0>
		{
			TxData[6] = TxData[6] + 0x04;
 80035c0:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 80035c4:	3304      	adds	r3, #4
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
		//CALCULATE NEXT CRC



		unsigned char canmes [11];
		int meslen = TxHeader.DLC + 1; //remove one for crc and add two for id bytes
 80035cc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80035d0:	3301      	adds	r3, #1
 80035d2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
		canmes [1] = TxHeader.StdId;
 80035d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80035e0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80035e4:	705a      	strb	r2, [r3, #1]
		canmes [0] = TxHeader.StdId >> 8;
 80035e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035ea:	0a1b      	lsrs	r3, r3, #8
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80035f2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80035f6:	701a      	strb	r2, [r3, #0]

		for (int i = 0; i < (TxHeader.DLC - 1); i++)
 80035f8:	2300      	movs	r3, #0
 80035fa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80035fe:	e012      	b.n	8003626 <Start_BMS_Task+0x23a>
		{
			canmes[i + 2] = TxData[i];
 8003600:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003604:	3302      	adds	r3, #2
 8003606:	f507 7192 	add.w	r1, r7, #292	; 0x124
 800360a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800360e:	440a      	add	r2, r1
 8003610:	7811      	ldrb	r1, [r2, #0]
 8003612:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8003616:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 800361a:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < (TxHeader.DLC - 1); i++)
 800361c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003620:	3301      	adds	r3, #1
 8003622:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003626:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800362a:	1e5a      	subs	r2, r3, #1
 800362c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003630:	429a      	cmp	r2, r3
 8003632:	d8e5      	bhi.n	8003600 <Start_BMS_Task+0x214>
		}

		uint8_t crcData;
		uint8_t crcRemainder = 0xFF;
 8003634:	23ff      	movs	r3, #255	; 0xff
 8003636:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

		for (int i = 0; i < meslen; ++i)
 800363a:	2300      	movs	r3, #0
 800363c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003640:	e021      	b.n	8003686 <Start_BMS_Task+0x29a>
		{
			crcData = canmes[i] ^ (crcRemainder >> (WIDTH - 8));
 8003642:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003646:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 800364a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800364e:	4413      	add	r3, r2
 8003650:	781a      	ldrb	r2, [r3, #0]
 8003652:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8003656:	4053      	eors	r3, r2
 8003658:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
			crcRemainder = crcTable[crcData] ^ (crcRemainder << 8);
 800365c:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8003660:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8003664:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003668:	5cd3      	ldrb	r3, [r2, r3]
 800366a:	b25a      	sxtb	r2, r3
 800366c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	b25b      	sxtb	r3, r3
 8003674:	4053      	eors	r3, r2
 8003676:	b25b      	sxtb	r3, r3
 8003678:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		for (int i = 0; i < meslen; ++i)
 800367c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003680:	3301      	adds	r3, #1
 8003682:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003686:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800368a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800368e:	429a      	cmp	r2, r3
 8003690:	dbd7      	blt.n	8003642 <Start_BMS_Task+0x256>
		}
		crcRemainder = crcRemainder^(finalxor[nextmes]);
 8003692:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 8003696:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800369a:	443b      	add	r3, r7
 800369c:	f813 2c5c 	ldrb.w	r2, [r3, #-92]
 80036a0:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80036a4:	4053      	eors	r3, r2
 80036a6:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
		TxData[7] = crcRemainder;
 80036aa:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80036ae:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
		osDelay(2);
 80036b2:	2002      	movs	r0, #2
 80036b4:	f008 fd8d 	bl	800c1d2 <osDelay>
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80036b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80036bc:	f507 7292 	add.w	r2, r7, #292	; 0x124
 80036c0:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 80036c4:	480a      	ldr	r0, [pc, #40]	; (80036f0 <Start_BMS_Task+0x304>)
 80036c6:	f001 fc2d 	bl	8004f24 <HAL_CAN_AddTxMessage>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <Start_BMS_Task+0x2e8>
		{
		 Error_Handler ();
 80036d0:	f000 f810 	bl	80036f4 <Error_Handler>
		}
		//
		nextmes ++;
 80036d4:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 80036d8:	3301      	adds	r3, #1
 80036da:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e
		osDelay(5);
 80036de:	2005      	movs	r0, #5
 80036e0:	f008 fd77 	bl	800c1d2 <osDelay>
	  if(Current_Status.CAN_PROTOCOL == CAN_BMW_PHEV)
 80036e4:	e705      	b.n	80034f2 <Start_BMS_Task+0x106>
 80036e6:	bf00      	nop
 80036e8:	0802eb68 	.word	0x0802eb68
 80036ec:	200103b4 	.word	0x200103b4
 80036f0:	200110a4 	.word	0x200110a4

080036f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036f8:	b672      	cpsid	i
}
 80036fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80036fc:	e7fe      	b.n	80036fc <Error_Handler+0x8>
	...

08003700 <SDRAM_delay>:

SDRAM_HandleTypeDef hsdram1;
FMC_SDRAM_CommandTypeDef command;

void SDRAM_delay(__IO uint32_t nCount)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8003708:	2300      	movs	r3, #0
 800370a:	60fb      	str	r3, [r7, #12]
	
  for(index = (100000 * nCount); index != 0; index--);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a09      	ldr	r2, [pc, #36]	; (8003734 <SDRAM_delay+0x34>)
 8003710:	fb02 f303 	mul.w	r3, r2, r3
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	e002      	b.n	800371e <SDRAM_delay+0x1e>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3b01      	subs	r3, #1
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f9      	bne.n	8003718 <SDRAM_delay+0x18>

}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	000186a0 	.word	0x000186a0

08003738 <SDRAM_Initialization_Sequence>:


HAL_StatusTypeDef SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t tmpmrd = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	60bb      	str	r3, [r7, #8]
  
  /* Configure a clock configuration enable command */
  Command->CommandMode 					= FMC_SDRAM_CMD_CLK_ENABLE;	// ����SDRAMʱ�� 
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2201      	movs	r2, #1
 800374e:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK; 	// ѡ��Ҫ���Ƶ�����
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	2208      	movs	r2, #8
 8003754:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2201      	movs	r2, #1
 800375a:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2200      	movs	r2, #0
 8003760:	60da      	str	r2, [r3, #12]
  
  status = HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 8003762:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003766:	6839      	ldr	r1, [r7, #0]
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f005 fb2e 	bl	8008dca <HAL_SDRAM_SendCommand>
 800376e:	4603      	mov	r3, r0
 8003770:	73fb      	strb	r3, [r7, #15]
  SDRAM_delay(1);		// ��ʱ�ȴ�
 8003772:	2001      	movs	r0, #1
 8003774:	f7ff ffc4 	bl	8003700 <SDRAM_delay>
  
  /* Configure a PALL (precharge all) command */ 
  Command->CommandMode 					= FMC_SDRAM_CMD_PALL;		// Ԥ�������
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2202      	movs	r2, #2
 800377c:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;	// ѡ��Ҫ���Ƶ�����
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2208      	movs	r2, #8
 8003782:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	2201      	movs	r2, #1
 8003788:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2200      	movs	r2, #0
 800378e:	60da      	str	r2, [r3, #12]
  
  status = HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);  // ���Ϳ���ָ��
 8003790:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003794:	6839      	ldr	r1, [r7, #0]
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f005 fb17 	bl	8008dca <HAL_SDRAM_SendCommand>
 800379c:	4603      	mov	r3, r0
 800379e:	73fb      	strb	r3, [r7, #15]
  
  /* Configure a Auto-Refresh command */ 
  Command->CommandMode 					= FMC_SDRAM_CMD_AUTOREFRESH_MODE;	// ʹ���Զ�ˢ��
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2203      	movs	r2, #3
 80037a4:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;          // ѡ��Ҫ���Ƶ�����
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2208      	movs	r2, #8
 80037aa:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber			= 8;                                // �Զ�ˢ�´���
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2208      	movs	r2, #8
 80037b0:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2200      	movs	r2, #0
 80037b6:	60da      	str	r2, [r3, #12]
  
  status = HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 80037b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037bc:	6839      	ldr	r1, [r7, #0]
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f005 fb03 	bl	8008dca <HAL_SDRAM_SendCommand>
 80037c4:	4603      	mov	r3, r0
 80037c6:	73fb      	strb	r3, [r7, #15]
  
  /* Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 80037c8:	f240 2331 	movw	r3, #561	; 0x231
 80037cc:	60bb      	str	r3, [r7, #8]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command->CommandMode					= FMC_SDRAM_CMD_LOAD_MODE;	// ����ģʽ�Ĵ�������
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2204      	movs	r2, #4
 80037d2:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;	// ѡ��Ҫ���Ƶ�����
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2208      	movs	r2, #8
 80037d8:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2201      	movs	r2, #1
 80037de:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= tmpmrd;
 80037e0:	68ba      	ldr	r2, [r7, #8]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	60da      	str	r2, [r3, #12]
  
  status = HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 80037e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037ea:	6839      	ldr	r1, [r7, #0]
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f005 faec 	bl	8008dca <HAL_SDRAM_SendCommand>
 80037f2:	4603      	mov	r3, r0
 80037f4:	73fb      	strb	r3, [r7, #15]
  
  hsdram->Instance->SDRTR |= ((uint32_t)((1386)<< 1));	// ����ˢ�¼����� 
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6812      	ldr	r2, [r2, #0]
 8003800:	f443 632d 	orr.w	r3, r3, #2768	; 0xad0
 8003804:	f043 0304 	orr.w	r3, r3, #4
 8003808:	6153      	str	r3, [r2, #20]

  return status;
 800380a:	7bfb      	ldrb	r3, [r7, #15]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800381a:	2300      	movs	r3, #0
 800381c:	607b      	str	r3, [r7, #4]
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <HAL_MspInit+0x54>)
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	4a11      	ldr	r2, [pc, #68]	; (8003868 <HAL_MspInit+0x54>)
 8003824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003828:	6453      	str	r3, [r2, #68]	; 0x44
 800382a:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <HAL_MspInit+0x54>)
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003832:	607b      	str	r3, [r7, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	603b      	str	r3, [r7, #0]
 800383a:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <HAL_MspInit+0x54>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	4a0a      	ldr	r2, [pc, #40]	; (8003868 <HAL_MspInit+0x54>)
 8003840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003844:	6413      	str	r3, [r2, #64]	; 0x40
 8003846:	4b08      	ldr	r3, [pc, #32]	; (8003868 <HAL_MspInit+0x54>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003852:	2200      	movs	r2, #0
 8003854:	210f      	movs	r1, #15
 8003856:	f06f 0001 	mvn.w	r0, #1
 800385a:	f002 f841 	bl	80058e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40023800 	.word	0x40023800

0800386c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08a      	sub	sp, #40	; 0x28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003874:	f107 0314 	add.w	r3, r7, #20
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a17      	ldr	r2, [pc, #92]	; (80038e8 <HAL_ADC_MspInit+0x7c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d127      	bne.n	80038de <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	4b16      	ldr	r3, [pc, #88]	; (80038ec <HAL_ADC_MspInit+0x80>)
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	4a15      	ldr	r2, [pc, #84]	; (80038ec <HAL_ADC_MspInit+0x80>)
 8003898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389c:	6453      	str	r3, [r2, #68]	; 0x44
 800389e:	4b13      	ldr	r3, [pc, #76]	; (80038ec <HAL_ADC_MspInit+0x80>)
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <HAL_ADC_MspInit+0x80>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	4a0e      	ldr	r2, [pc, #56]	; (80038ec <HAL_ADC_MspInit+0x80>)
 80038b4:	f043 0304 	orr.w	r3, r3, #4
 80038b8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ba:	4b0c      	ldr	r3, [pc, #48]	; (80038ec <HAL_ADC_MspInit+0x80>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = MULTISENSE_ADC_Pin;
 80038c6:	2302      	movs	r3, #2
 80038c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038ca:	2303      	movs	r3, #3
 80038cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MULTISENSE_ADC_GPIO_Port, &GPIO_InitStruct);
 80038d2:	f107 0314 	add.w	r3, r7, #20
 80038d6:	4619      	mov	r1, r3
 80038d8:	4805      	ldr	r0, [pc, #20]	; (80038f0 <HAL_ADC_MspInit+0x84>)
 80038da:	f002 fac5 	bl	8005e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80038de:	bf00      	nop
 80038e0:	3728      	adds	r7, #40	; 0x28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40012000 	.word	0x40012000
 80038ec:	40023800 	.word	0x40023800
 80038f0:	40020800 	.word	0x40020800

080038f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08c      	sub	sp, #48	; 0x30
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038fc:	f107 031c 	add.w	r3, r7, #28
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	609a      	str	r2, [r3, #8]
 8003908:	60da      	str	r2, [r3, #12]
 800390a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a4b      	ldr	r2, [pc, #300]	; (8003a40 <HAL_CAN_MspInit+0x14c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d13e      	bne.n	8003994 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003916:	4b4b      	ldr	r3, [pc, #300]	; (8003a44 <HAL_CAN_MspInit+0x150>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3301      	adds	r3, #1
 800391c:	4a49      	ldr	r2, [pc, #292]	; (8003a44 <HAL_CAN_MspInit+0x150>)
 800391e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003920:	4b48      	ldr	r3, [pc, #288]	; (8003a44 <HAL_CAN_MspInit+0x150>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d10d      	bne.n	8003944 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003928:	2300      	movs	r3, #0
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	4b46      	ldr	r3, [pc, #280]	; (8003a48 <HAL_CAN_MspInit+0x154>)
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	4a45      	ldr	r2, [pc, #276]	; (8003a48 <HAL_CAN_MspInit+0x154>)
 8003932:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003936:	6413      	str	r3, [r2, #64]	; 0x40
 8003938:	4b43      	ldr	r3, [pc, #268]	; (8003a48 <HAL_CAN_MspInit+0x154>)
 800393a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	4b3f      	ldr	r3, [pc, #252]	; (8003a48 <HAL_CAN_MspInit+0x154>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	4a3e      	ldr	r2, [pc, #248]	; (8003a48 <HAL_CAN_MspInit+0x154>)
 800394e:	f043 0302 	orr.w	r3, r3, #2
 8003952:	6313      	str	r3, [r2, #48]	; 0x30
 8003954:	4b3c      	ldr	r3, [pc, #240]	; (8003a48 <HAL_CAN_MspInit+0x154>)
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003960:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003966:	2302      	movs	r3, #2
 8003968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396a:	2300      	movs	r3, #0
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800396e:	2303      	movs	r3, #3
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003972:	2309      	movs	r3, #9
 8003974:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003976:	f107 031c 	add.w	r3, r7, #28
 800397a:	4619      	mov	r1, r3
 800397c:	4833      	ldr	r0, [pc, #204]	; (8003a4c <HAL_CAN_MspInit+0x158>)
 800397e:	f002 fa73 	bl	8005e68 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8003982:	2200      	movs	r2, #0
 8003984:	2105      	movs	r1, #5
 8003986:	2014      	movs	r0, #20
 8003988:	f001 ffaa 	bl	80058e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800398c:	2014      	movs	r0, #20
 800398e:	f001 ffc3 	bl	8005918 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003992:	e050      	b.n	8003a36 <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a2d      	ldr	r2, [pc, #180]	; (8003a50 <HAL_CAN_MspInit+0x15c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d14b      	bne.n	8003a36 <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	4b29      	ldr	r3, [pc, #164]	; (8003a48 <HAL_CAN_MspInit+0x154>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	4a28      	ldr	r2, [pc, #160]	; (8003a48 <HAL_CAN_MspInit+0x154>)
 80039a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039ac:	6413      	str	r3, [r2, #64]	; 0x40
 80039ae:	4b26      	ldr	r3, [pc, #152]	; (8003a48 <HAL_CAN_MspInit+0x154>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80039ba:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <HAL_CAN_MspInit+0x150>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3301      	adds	r3, #1
 80039c0:	4a20      	ldr	r2, [pc, #128]	; (8003a44 <HAL_CAN_MspInit+0x150>)
 80039c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80039c4:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <HAL_CAN_MspInit+0x150>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d10d      	bne.n	80039e8 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	4b1d      	ldr	r3, [pc, #116]	; (8003a48 <HAL_CAN_MspInit+0x154>)
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	4a1c      	ldr	r2, [pc, #112]	; (8003a48 <HAL_CAN_MspInit+0x154>)
 80039d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039da:	6413      	str	r3, [r2, #64]	; 0x40
 80039dc:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <HAL_CAN_MspInit+0x154>)
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e8:	2300      	movs	r3, #0
 80039ea:	60bb      	str	r3, [r7, #8]
 80039ec:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <HAL_CAN_MspInit+0x154>)
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	4a15      	ldr	r2, [pc, #84]	; (8003a48 <HAL_CAN_MspInit+0x154>)
 80039f2:	f043 0302 	orr.w	r3, r3, #2
 80039f6:	6313      	str	r3, [r2, #48]	; 0x30
 80039f8:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <HAL_CAN_MspInit+0x154>)
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003a04:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a12:	2303      	movs	r3, #3
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003a16:	2309      	movs	r3, #9
 8003a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a1a:	f107 031c 	add.w	r3, r7, #28
 8003a1e:	4619      	mov	r1, r3
 8003a20:	480a      	ldr	r0, [pc, #40]	; (8003a4c <HAL_CAN_MspInit+0x158>)
 8003a22:	f002 fa21 	bl	8005e68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8003a26:	2200      	movs	r2, #0
 8003a28:	2105      	movs	r1, #5
 8003a2a:	2040      	movs	r0, #64	; 0x40
 8003a2c:	f001 ff58 	bl	80058e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003a30:	2040      	movs	r0, #64	; 0x40
 8003a32:	f001 ff71 	bl	8005918 <HAL_NVIC_EnableIRQ>
}
 8003a36:	bf00      	nop
 8003a38:	3730      	adds	r7, #48	; 0x30
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40006400 	.word	0x40006400
 8003a44:	2000011c 	.word	0x2000011c
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40020400 	.word	0x40020400
 8003a50:	40006800 	.word	0x40006800

08003a54 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <HAL_CRC_MspInit+0x3c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d10d      	bne.n	8003a82 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <HAL_CRC_MspInit+0x40>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	4a09      	ldr	r2, [pc, #36]	; (8003a94 <HAL_CRC_MspInit+0x40>)
 8003a70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a74:	6313      	str	r3, [r2, #48]	; 0x30
 8003a76:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <HAL_CRC_MspInit+0x40>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003a82:	bf00      	nop
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40023000 	.word	0x40023000
 8003a94:	40023800 	.word	0x40023800

08003a98 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a0e      	ldr	r2, [pc, #56]	; (8003ae0 <HAL_DMA2D_MspInit+0x48>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d115      	bne.n	8003ad6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <HAL_DMA2D_MspInit+0x4c>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	4a0c      	ldr	r2, [pc, #48]	; (8003ae4 <HAL_DMA2D_MspInit+0x4c>)
 8003ab4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aba:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <HAL_DMA2D_MspInit+0x4c>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	2105      	movs	r1, #5
 8003aca:	205a      	movs	r0, #90	; 0x5a
 8003acc:	f001 ff08 	bl	80058e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003ad0:	205a      	movs	r0, #90	; 0x5a
 8003ad2:	f001 ff21 	bl	8005918 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	4002b000 	.word	0x4002b000
 8003ae4:	40023800 	.word	0x40023800

08003ae8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	; 0x28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af0:	f107 0314 	add.w	r3, r7, #20
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	60da      	str	r2, [r3, #12]
 8003afe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a19      	ldr	r2, [pc, #100]	; (8003b6c <HAL_I2C_MspInit+0x84>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d12b      	bne.n	8003b62 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	4b18      	ldr	r3, [pc, #96]	; (8003b70 <HAL_I2C_MspInit+0x88>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	4a17      	ldr	r2, [pc, #92]	; (8003b70 <HAL_I2C_MspInit+0x88>)
 8003b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b18:	6313      	str	r3, [r2, #48]	; 0x30
 8003b1a:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <HAL_I2C_MspInit+0x88>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003b26:	2330      	movs	r3, #48	; 0x30
 8003b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b2a:	2312      	movs	r3, #18
 8003b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b32:	2303      	movs	r3, #3
 8003b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003b36:	2304      	movs	r3, #4
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003b3a:	f107 0314 	add.w	r3, r7, #20
 8003b3e:	4619      	mov	r1, r3
 8003b40:	480c      	ldr	r0, [pc, #48]	; (8003b74 <HAL_I2C_MspInit+0x8c>)
 8003b42:	f002 f991 	bl	8005e68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <HAL_I2C_MspInit+0x88>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	4a08      	ldr	r2, [pc, #32]	; (8003b70 <HAL_I2C_MspInit+0x88>)
 8003b50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b54:	6413      	str	r3, [r2, #64]	; 0x40
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <HAL_I2C_MspInit+0x88>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003b62:	bf00      	nop
 8003b64:	3728      	adds	r7, #40	; 0x28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40005800 	.word	0x40005800
 8003b70:	40023800 	.word	0x40023800
 8003b74:	40021c00 	.word	0x40021c00

08003b78 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b09a      	sub	sp, #104	; 0x68
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	60da      	str	r2, [r3, #12]
 8003b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b94:	2230      	movs	r2, #48	; 0x30
 8003b96:	2100      	movs	r1, #0
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f02a f81d 	bl	802dbd8 <memset>
  if(hltdc->Instance==LTDC)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a65      	ldr	r2, [pc, #404]	; (8003d38 <HAL_LTDC_MspInit+0x1c0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	f040 80c2 	bne.w	8003d2e <HAL_LTDC_MspInit+0x1b6>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003baa:	2308      	movs	r3, #8
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8003bae:	2332      	movs	r3, #50	; 0x32
 8003bb0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f003 fe52 	bl	8007868 <HAL_RCCEx_PeriphCLKConfig>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8003bca:	f7ff fd93 	bl	80036f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	623b      	str	r3, [r7, #32]
 8003bd2:	4b5a      	ldr	r3, [pc, #360]	; (8003d3c <HAL_LTDC_MspInit+0x1c4>)
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	4a59      	ldr	r2, [pc, #356]	; (8003d3c <HAL_LTDC_MspInit+0x1c4>)
 8003bd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bde:	4b57      	ldr	r3, [pc, #348]	; (8003d3c <HAL_LTDC_MspInit+0x1c4>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003be6:	623b      	str	r3, [r7, #32]
 8003be8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	4b53      	ldr	r3, [pc, #332]	; (8003d3c <HAL_LTDC_MspInit+0x1c4>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	4a52      	ldr	r2, [pc, #328]	; (8003d3c <HAL_LTDC_MspInit+0x1c4>)
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfa:	4b50      	ldr	r3, [pc, #320]	; (8003d3c <HAL_LTDC_MspInit+0x1c4>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c02:	61fb      	str	r3, [r7, #28]
 8003c04:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	4b4c      	ldr	r3, [pc, #304]	; (8003d3c <HAL_LTDC_MspInit+0x1c4>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	4a4b      	ldr	r2, [pc, #300]	; (8003d3c <HAL_LTDC_MspInit+0x1c4>)
 8003c10:	f043 0320 	orr.w	r3, r3, #32
 8003c14:	6313      	str	r3, [r2, #48]	; 0x30
 8003c16:	4b49      	ldr	r3, [pc, #292]	; (8003d3c <HAL_LTDC_MspInit+0x1c4>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	61bb      	str	r3, [r7, #24]
 8003c20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	4b45      	ldr	r3, [pc, #276]	; (8003d3c <HAL_LTDC_MspInit+0x1c4>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	4a44      	ldr	r2, [pc, #272]	; (8003d3c <HAL_LTDC_MspInit+0x1c4>)
 8003c2c:	f043 0302 	orr.w	r3, r3, #2
 8003c30:	6313      	str	r3, [r2, #48]	; 0x30
 8003c32:	4b42      	ldr	r3, [pc, #264]	; (8003d3c <HAL_LTDC_MspInit+0x1c4>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	4b3e      	ldr	r3, [pc, #248]	; (8003d3c <HAL_LTDC_MspInit+0x1c4>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	4a3d      	ldr	r2, [pc, #244]	; (8003d3c <HAL_LTDC_MspInit+0x1c4>)
 8003c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4e:	4b3b      	ldr	r3, [pc, #236]	; (8003d3c <HAL_LTDC_MspInit+0x1c4>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	4b37      	ldr	r3, [pc, #220]	; (8003d3c <HAL_LTDC_MspInit+0x1c4>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	4a36      	ldr	r2, [pc, #216]	; (8003d3c <HAL_LTDC_MspInit+0x1c4>)
 8003c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c68:	6313      	str	r3, [r2, #48]	; 0x30
 8003c6a:	4b34      	ldr	r3, [pc, #208]	; (8003d3c <HAL_LTDC_MspInit+0x1c4>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8003c76:	f240 63f7 	movw	r3, #1783	; 0x6f7
 8003c7a:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c80:	2301      	movs	r3, #1
 8003c82:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c84:	2303      	movs	r3, #3
 8003c86:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c88:	230e      	movs	r3, #14
 8003c8a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003c8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c90:	4619      	mov	r1, r3
 8003c92:	482b      	ldr	r0, [pc, #172]	; (8003d40 <HAL_LTDC_MspInit+0x1c8>)
 8003c94:	f002 f8e8 	bl	8005e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c9c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003caa:	230e      	movs	r3, #14
 8003cac:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003cae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4823      	ldr	r0, [pc, #140]	; (8003d44 <HAL_LTDC_MspInit+0x1cc>)
 8003cb6:	f002 f8d7 	bl	8005e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003cba:	2302      	movs	r3, #2
 8003cbc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003cca:	2309      	movs	r3, #9
 8003ccc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	481c      	ldr	r0, [pc, #112]	; (8003d48 <HAL_LTDC_MspInit+0x1d0>)
 8003cd6:	f002 f8c7 	bl	8005e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13
 8003cda:	f44f 436e 	mov.w	r3, #60928	; 0xee00
 8003cde:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003cec:	230e      	movs	r3, #14
 8003cee:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003cf0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4815      	ldr	r0, [pc, #84]	; (8003d4c <HAL_LTDC_MspInit+0x1d4>)
 8003cf8:	f002 f8b6 	bl	8005e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8003cfc:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003d00:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d02:	2302      	movs	r3, #2
 8003d04:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d06:	2301      	movs	r3, #1
 8003d08:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d0e:	230e      	movs	r3, #14
 8003d10:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d16:	4619      	mov	r1, r3
 8003d18:	480d      	ldr	r0, [pc, #52]	; (8003d50 <HAL_LTDC_MspInit+0x1d8>)
 8003d1a:	f002 f8a5 	bl	8005e68 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2105      	movs	r1, #5
 8003d22:	2058      	movs	r0, #88	; 0x58
 8003d24:	f001 fddc 	bl	80058e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003d28:	2058      	movs	r0, #88	; 0x58
 8003d2a:	f001 fdf5 	bl	8005918 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003d2e:	bf00      	nop
 8003d30:	3768      	adds	r7, #104	; 0x68
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40016800 	.word	0x40016800
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	40022000 	.word	0x40022000
 8003d44:	40021400 	.word	0x40021400
 8003d48:	40020400 	.word	0x40020400
 8003d4c:	40021c00 	.word	0x40021c00
 8003d50:	40021800 	.word	0x40021800

08003d54 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08a      	sub	sp, #40	; 0x28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d5c:	f107 0314 	add.w	r3, r7, #20
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	60da      	str	r2, [r3, #12]
 8003d6a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a28      	ldr	r2, [pc, #160]	; (8003e14 <HAL_SD_MspInit+0xc0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d14a      	bne.n	8003e0c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	4b27      	ldr	r3, [pc, #156]	; (8003e18 <HAL_SD_MspInit+0xc4>)
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	4a26      	ldr	r2, [pc, #152]	; (8003e18 <HAL_SD_MspInit+0xc4>)
 8003d80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003d84:	6453      	str	r3, [r2, #68]	; 0x44
 8003d86:	4b24      	ldr	r3, [pc, #144]	; (8003e18 <HAL_SD_MspInit+0xc4>)
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <HAL_SD_MspInit+0xc4>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	4a1f      	ldr	r2, [pc, #124]	; (8003e18 <HAL_SD_MspInit+0xc4>)
 8003d9c:	f043 0304 	orr.w	r3, r3, #4
 8003da0:	6313      	str	r3, [r2, #48]	; 0x30
 8003da2:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <HAL_SD_MspInit+0xc4>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	4b19      	ldr	r3, [pc, #100]	; (8003e18 <HAL_SD_MspInit+0xc4>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	4a18      	ldr	r2, [pc, #96]	; (8003e18 <HAL_SD_MspInit+0xc4>)
 8003db8:	f043 0308 	orr.w	r3, r3, #8
 8003dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dbe:	4b16      	ldr	r3, [pc, #88]	; (8003e18 <HAL_SD_MspInit+0xc4>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003dca:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003dce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003ddc:	230c      	movs	r3, #12
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003de0:	f107 0314 	add.w	r3, r7, #20
 8003de4:	4619      	mov	r1, r3
 8003de6:	480d      	ldr	r0, [pc, #52]	; (8003e1c <HAL_SD_MspInit+0xc8>)
 8003de8:	f002 f83e 	bl	8005e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003dec:	2304      	movs	r3, #4
 8003dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df0:	2302      	movs	r3, #2
 8003df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003df4:	2301      	movs	r3, #1
 8003df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003dfc:	230c      	movs	r3, #12
 8003dfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e00:	f107 0314 	add.w	r3, r7, #20
 8003e04:	4619      	mov	r1, r3
 8003e06:	4806      	ldr	r0, [pc, #24]	; (8003e20 <HAL_SD_MspInit+0xcc>)
 8003e08:	f002 f82e 	bl	8005e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003e0c:	bf00      	nop
 8003e0e:	3728      	adds	r7, #40	; 0x28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40012c00 	.word	0x40012c00
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40020800 	.word	0x40020800
 8003e20:	40020c00 	.word	0x40020c00

08003e24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e34:	d10e      	bne.n	8003e54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <HAL_TIM_Base_MspInit+0x64>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	4a12      	ldr	r2, [pc, #72]	; (8003e88 <HAL_TIM_Base_MspInit+0x64>)
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	6413      	str	r3, [r2, #64]	; 0x40
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <HAL_TIM_Base_MspInit+0x64>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003e52:	e012      	b.n	8003e7a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM13)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <HAL_TIM_Base_MspInit+0x68>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d10d      	bne.n	8003e7a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	4b09      	ldr	r3, [pc, #36]	; (8003e88 <HAL_TIM_Base_MspInit+0x64>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	4a08      	ldr	r2, [pc, #32]	; (8003e88 <HAL_TIM_Base_MspInit+0x64>)
 8003e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6e:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <HAL_TIM_Base_MspInit+0x64>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	68bb      	ldr	r3, [r7, #8]
}
 8003e7a:	bf00      	nop
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40001c00 	.word	0x40001c00

08003e90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	; 0x28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e98:	f107 0314 	add.w	r3, r7, #20
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	60da      	str	r2, [r3, #12]
 8003ea6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb0:	d11e      	bne.n	8003ef0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	4b22      	ldr	r3, [pc, #136]	; (8003f40 <HAL_TIM_MspPostInit+0xb0>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	4a21      	ldr	r2, [pc, #132]	; (8003f40 <HAL_TIM_MspPostInit+0xb0>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec2:	4b1f      	ldr	r3, [pc, #124]	; (8003f40 <HAL_TIM_MspPostInit+0xb0>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = LED_TIM2_CH2_PA1_Pin|LED_TIM2_CH3_PA2_Pin;
 8003ece:	2306      	movs	r3, #6
 8003ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eda:	2300      	movs	r3, #0
 8003edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee2:	f107 0314 	add.w	r3, r7, #20
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4816      	ldr	r0, [pc, #88]	; (8003f44 <HAL_TIM_MspPostInit+0xb4>)
 8003eea:	f001 ffbd 	bl	8005e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003eee:	e023      	b.n	8003f38 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM13)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a14      	ldr	r2, [pc, #80]	; (8003f48 <HAL_TIM_MspPostInit+0xb8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d11e      	bne.n	8003f38 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003efa:	2300      	movs	r3, #0
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	4b10      	ldr	r3, [pc, #64]	; (8003f40 <HAL_TIM_MspPostInit+0xb0>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	4a0f      	ldr	r2, [pc, #60]	; (8003f40 <HAL_TIM_MspPostInit+0xb0>)
 8003f04:	f043 0320 	orr.w	r3, r3, #32
 8003f08:	6313      	str	r3, [r2, #48]	; 0x30
 8003f0a:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <HAL_TIM_MspPostInit+0xb0>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f24:	2300      	movs	r3, #0
 8003f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003f28:	2309      	movs	r3, #9
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f2c:	f107 0314 	add.w	r3, r7, #20
 8003f30:	4619      	mov	r1, r3
 8003f32:	4806      	ldr	r0, [pc, #24]	; (8003f4c <HAL_TIM_MspPostInit+0xbc>)
 8003f34:	f001 ff98 	bl	8005e68 <HAL_GPIO_Init>
}
 8003f38:	bf00      	nop
 8003f3a:	3728      	adds	r7, #40	; 0x28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40023800 	.word	0x40023800
 8003f44:	40020000 	.word	0x40020000
 8003f48:	40001c00 	.word	0x40001c00
 8003f4c:	40021400 	.word	0x40021400

08003f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	; 0x28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f58:	f107 0314 	add.w	r3, r7, #20
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	605a      	str	r2, [r3, #4]
 8003f62:	609a      	str	r2, [r3, #8]
 8003f64:	60da      	str	r2, [r3, #12]
 8003f66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a19      	ldr	r2, [pc, #100]	; (8003fd4 <HAL_UART_MspInit+0x84>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d12c      	bne.n	8003fcc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	4b18      	ldr	r3, [pc, #96]	; (8003fd8 <HAL_UART_MspInit+0x88>)
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	4a17      	ldr	r2, [pc, #92]	; (8003fd8 <HAL_UART_MspInit+0x88>)
 8003f7c:	f043 0310 	orr.w	r3, r3, #16
 8003f80:	6453      	str	r3, [r2, #68]	; 0x44
 8003f82:	4b15      	ldr	r3, [pc, #84]	; (8003fd8 <HAL_UART_MspInit+0x88>)
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	f003 0310 	and.w	r3, r3, #16
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <HAL_UART_MspInit+0x88>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	4a10      	ldr	r2, [pc, #64]	; (8003fd8 <HAL_UART_MspInit+0x88>)
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9e:	4b0e      	ldr	r3, [pc, #56]	; (8003fd8 <HAL_UART_MspInit+0x88>)
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003faa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003fbc:	2307      	movs	r3, #7
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc0:	f107 0314 	add.w	r3, r7, #20
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4805      	ldr	r0, [pc, #20]	; (8003fdc <HAL_UART_MspInit+0x8c>)
 8003fc8:	f001 ff4e 	bl	8005e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003fcc:	bf00      	nop
 8003fce:	3728      	adds	r7, #40	; 0x28
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40011000 	.word	0x40011000
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	40020000 	.word	0x40020000

08003fe0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08a      	sub	sp, #40	; 0x28
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe8:	f107 0314 	add.w	r3, r7, #20
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	60da      	str	r2, [r3, #12]
 8003ff6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004000:	d132      	bne.n	8004068 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004002:	2300      	movs	r3, #0
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	4b1a      	ldr	r3, [pc, #104]	; (8004070 <HAL_PCD_MspInit+0x90>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	4a19      	ldr	r2, [pc, #100]	; (8004070 <HAL_PCD_MspInit+0x90>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	6313      	str	r3, [r2, #48]	; 0x30
 8004012:	4b17      	ldr	r3, [pc, #92]	; (8004070 <HAL_PCD_MspInit+0x90>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800401e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004024:	2302      	movs	r3, #2
 8004026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004028:	2300      	movs	r3, #0
 800402a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800402c:	2303      	movs	r3, #3
 800402e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004030:	230a      	movs	r3, #10
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004034:	f107 0314 	add.w	r3, r7, #20
 8004038:	4619      	mov	r1, r3
 800403a:	480e      	ldr	r0, [pc, #56]	; (8004074 <HAL_PCD_MspInit+0x94>)
 800403c:	f001 ff14 	bl	8005e68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004040:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <HAL_PCD_MspInit+0x90>)
 8004042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004044:	4a0a      	ldr	r2, [pc, #40]	; (8004070 <HAL_PCD_MspInit+0x90>)
 8004046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800404a:	6353      	str	r3, [r2, #52]	; 0x34
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	4b07      	ldr	r3, [pc, #28]	; (8004070 <HAL_PCD_MspInit+0x90>)
 8004052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004054:	4a06      	ldr	r2, [pc, #24]	; (8004070 <HAL_PCD_MspInit+0x90>)
 8004056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800405a:	6453      	str	r3, [r2, #68]	; 0x44
 800405c:	4b04      	ldr	r3, [pc, #16]	; (8004070 <HAL_PCD_MspInit+0x90>)
 800405e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004068:	bf00      	nop
 800406a:	3728      	adds	r7, #40	; 0x28
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40023800 	.word	0x40023800
 8004074:	40020000 	.word	0x40020000

08004078 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800407e:	1d3b      	adds	r3, r7, #4
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	609a      	str	r2, [r3, #8]
 8004088:	60da      	str	r2, [r3, #12]
 800408a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800408c:	4b3f      	ldr	r3, [pc, #252]	; (800418c <HAL_FMC_MspInit+0x114>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d177      	bne.n	8004184 <HAL_FMC_MspInit+0x10c>
    return;
  }
  FMC_Initialized = 1;
 8004094:	4b3d      	ldr	r3, [pc, #244]	; (800418c <HAL_FMC_MspInit+0x114>)
 8004096:	2201      	movs	r2, #1
 8004098:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800409a:	2300      	movs	r3, #0
 800409c:	603b      	str	r3, [r7, #0]
 800409e:	4b3c      	ldr	r3, [pc, #240]	; (8004190 <HAL_FMC_MspInit+0x118>)
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	4a3b      	ldr	r2, [pc, #236]	; (8004190 <HAL_FMC_MspInit+0x118>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	6393      	str	r3, [r2, #56]	; 0x38
 80040aa:	4b39      	ldr	r3, [pc, #228]	; (8004190 <HAL_FMC_MspInit+0x118>)
 80040ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80040b6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80040ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040bc:	2302      	movs	r3, #2
 80040be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040c4:	2303      	movs	r3, #3
 80040c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040c8:	230c      	movs	r3, #12
 80040ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040cc:	1d3b      	adds	r3, r7, #4
 80040ce:	4619      	mov	r1, r3
 80040d0:	4830      	ldr	r0, [pc, #192]	; (8004194 <HAL_FMC_MspInit+0x11c>)
 80040d2:	f001 fec9 	bl	8005e68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80040d6:	2301      	movs	r3, #1
 80040d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040da:	2302      	movs	r3, #2
 80040dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e2:	2303      	movs	r3, #3
 80040e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80040e6:	230c      	movs	r3, #12
 80040e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040ea:	1d3b      	adds	r3, r7, #4
 80040ec:	4619      	mov	r1, r3
 80040ee:	482a      	ldr	r0, [pc, #168]	; (8004198 <HAL_FMC_MspInit+0x120>)
 80040f0:	f001 feba 	bl	8005e68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80040f4:	f248 1337 	movw	r3, #33079	; 0x8137
 80040f8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040fa:	2302      	movs	r3, #2
 80040fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004102:	2303      	movs	r3, #3
 8004104:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004106:	230c      	movs	r3, #12
 8004108:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800410a:	1d3b      	adds	r3, r7, #4
 800410c:	4619      	mov	r1, r3
 800410e:	4823      	ldr	r0, [pc, #140]	; (800419c <HAL_FMC_MspInit+0x124>)
 8004110:	f001 feaa 	bl	8005e68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004114:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004118:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411a:	2302      	movs	r3, #2
 800411c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004122:	2303      	movs	r3, #3
 8004124:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004126:	230c      	movs	r3, #12
 8004128:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800412a:	1d3b      	adds	r3, r7, #4
 800412c:	4619      	mov	r1, r3
 800412e:	481c      	ldr	r0, [pc, #112]	; (80041a0 <HAL_FMC_MspInit+0x128>)
 8004130:	f001 fe9a 	bl	8005e68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004134:	23c0      	movs	r3, #192	; 0xc0
 8004136:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004138:	2302      	movs	r3, #2
 800413a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004140:	2303      	movs	r3, #3
 8004142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004144:	230c      	movs	r3, #12
 8004146:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004148:	1d3b      	adds	r3, r7, #4
 800414a:	4619      	mov	r1, r3
 800414c:	4815      	ldr	r0, [pc, #84]	; (80041a4 <HAL_FMC_MspInit+0x12c>)
 800414e:	f001 fe8b 	bl	8005e68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8004152:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004156:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004158:	2302      	movs	r3, #2
 800415a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004160:	2303      	movs	r3, #3
 8004162:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004164:	230c      	movs	r3, #12
 8004166:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004168:	1d3b      	adds	r3, r7, #4
 800416a:	4619      	mov	r1, r3
 800416c:	480e      	ldr	r0, [pc, #56]	; (80041a8 <HAL_FMC_MspInit+0x130>)
 800416e:	f001 fe7b 	bl	8005e68 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 5, 0);
 8004172:	2200      	movs	r2, #0
 8004174:	2105      	movs	r1, #5
 8004176:	2030      	movs	r0, #48	; 0x30
 8004178:	f001 fbb2 	bl	80058e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 800417c:	2030      	movs	r0, #48	; 0x30
 800417e:	f001 fbcb 	bl	8005918 <HAL_NVIC_EnableIRQ>
 8004182:	e000      	b.n	8004186 <HAL_FMC_MspInit+0x10e>
    return;
 8004184:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20000120 	.word	0x20000120
 8004190:	40023800 	.word	0x40023800
 8004194:	40021400 	.word	0x40021400
 8004198:	40020800 	.word	0x40020800
 800419c:	40021800 	.word	0x40021800
 80041a0:	40021000 	.word	0x40021000
 80041a4:	40021c00 	.word	0x40021c00
 80041a8:	40020c00 	.word	0x40020c00

080041ac <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80041b4:	f7ff ff60 	bl	8004078 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80041b8:	bf00      	nop
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08e      	sub	sp, #56	; 0x38
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	4b33      	ldr	r3, [pc, #204]	; (80042a4 <HAL_InitTick+0xe4>)
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	4a32      	ldr	r2, [pc, #200]	; (80042a4 <HAL_InitTick+0xe4>)
 80041da:	f043 0310 	orr.w	r3, r3, #16
 80041de:	6413      	str	r3, [r2, #64]	; 0x40
 80041e0:	4b30      	ldr	r3, [pc, #192]	; (80042a4 <HAL_InitTick+0xe4>)
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80041ec:	f107 0210 	add.w	r2, r7, #16
 80041f0:	f107 0314 	add.w	r3, r7, #20
 80041f4:	4611      	mov	r1, r2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f003 fb04 	bl	8007804 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d103      	bne.n	800420e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004206:	f003 fad5 	bl	80077b4 <HAL_RCC_GetPCLK1Freq>
 800420a:	6378      	str	r0, [r7, #52]	; 0x34
 800420c:	e004      	b.n	8004218 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800420e:	f003 fad1 	bl	80077b4 <HAL_RCC_GetPCLK1Freq>
 8004212:	4603      	mov	r3, r0
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800421a:	4a23      	ldr	r2, [pc, #140]	; (80042a8 <HAL_InitTick+0xe8>)
 800421c:	fba2 2303 	umull	r2, r3, r2, r3
 8004220:	0c9b      	lsrs	r3, r3, #18
 8004222:	3b01      	subs	r3, #1
 8004224:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004226:	4b21      	ldr	r3, [pc, #132]	; (80042ac <HAL_InitTick+0xec>)
 8004228:	4a21      	ldr	r2, [pc, #132]	; (80042b0 <HAL_InitTick+0xf0>)
 800422a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800422c:	4b1f      	ldr	r3, [pc, #124]	; (80042ac <HAL_InitTick+0xec>)
 800422e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004232:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004234:	4a1d      	ldr	r2, [pc, #116]	; (80042ac <HAL_InitTick+0xec>)
 8004236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004238:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800423a:	4b1c      	ldr	r3, [pc, #112]	; (80042ac <HAL_InitTick+0xec>)
 800423c:	2200      	movs	r2, #0
 800423e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004240:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <HAL_InitTick+0xec>)
 8004242:	2200      	movs	r2, #0
 8004244:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004246:	4b19      	ldr	r3, [pc, #100]	; (80042ac <HAL_InitTick+0xec>)
 8004248:	2200      	movs	r2, #0
 800424a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800424c:	4817      	ldr	r0, [pc, #92]	; (80042ac <HAL_InitTick+0xec>)
 800424e:	f004 fdf1 	bl	8008e34 <HAL_TIM_Base_Init>
 8004252:	4603      	mov	r3, r0
 8004254:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004258:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800425c:	2b00      	cmp	r3, #0
 800425e:	d11b      	bne.n	8004298 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004260:	4812      	ldr	r0, [pc, #72]	; (80042ac <HAL_InitTick+0xec>)
 8004262:	f004 fe37 	bl	8008ed4 <HAL_TIM_Base_Start_IT>
 8004266:	4603      	mov	r3, r0
 8004268:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800426c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004270:	2b00      	cmp	r3, #0
 8004272:	d111      	bne.n	8004298 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004274:	2036      	movs	r0, #54	; 0x36
 8004276:	f001 fb4f 	bl	8005918 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b0f      	cmp	r3, #15
 800427e:	d808      	bhi.n	8004292 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004280:	2200      	movs	r2, #0
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	2036      	movs	r0, #54	; 0x36
 8004286:	f001 fb2b 	bl	80058e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800428a:	4a0a      	ldr	r2, [pc, #40]	; (80042b4 <HAL_InitTick+0xf4>)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	e002      	b.n	8004298 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004298:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800429c:	4618      	mov	r0, r3
 800429e:	3738      	adds	r7, #56	; 0x38
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40023800 	.word	0x40023800
 80042a8:	431bde83 	.word	0x431bde83
 80042ac:	20011138 	.word	0x20011138
 80042b0:	40001000 	.word	0x40001000
 80042b4:	2000000c 	.word	0x2000000c

080042b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042bc:	e7fe      	b.n	80042bc <NMI_Handler+0x4>

080042be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042be:	b480      	push	{r7}
 80042c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042c2:	e7fe      	b.n	80042c2 <HardFault_Handler+0x4>

080042c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042c4:	b480      	push	{r7}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042c8:	e7fe      	b.n	80042c8 <MemManage_Handler+0x4>

080042ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042ca:	b480      	push	{r7}
 80042cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042ce:	e7fe      	b.n	80042ce <BusFault_Handler+0x4>

080042d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042d4:	e7fe      	b.n	80042d4 <UsageFault_Handler+0x4>

080042d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80042d6:	b480      	push	{r7}
 80042d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80042e8:	4802      	ldr	r0, [pc, #8]	; (80042f4 <CAN1_RX0_IRQHandler+0x10>)
 80042ea:	f001 f808 	bl	80052fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80042ee:	bf00      	nop
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	200110a4 	.word	0x200110a4

080042f8 <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 80042fc:	4802      	ldr	r0, [pc, #8]	; (8004308 <FMC_IRQHandler+0x10>)
 80042fe:	f004 fd40 	bl	8008d82 <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 8004302:	bf00      	nop
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	200110e4 	.word	0x200110e4

0800430c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0

  /* USER CODE END TIM6_DAC_IRQn 0 */
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004310:	bf00      	nop
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
	...

0800431c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004320:	4802      	ldr	r0, [pc, #8]	; (800432c <CAN2_RX0_IRQHandler+0x10>)
 8004322:	f000 ffec 	bl	80052fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004326:	bf00      	nop
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20010708 	.word	0x20010708

08004330 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004334:	4802      	ldr	r0, [pc, #8]	; (8004340 <LTDC_IRQHandler+0x10>)
 8004336:	f002 fa1f 	bl	8006778 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20010618 	.word	0x20010618

08004344 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004348:	4802      	ldr	r0, [pc, #8]	; (8004354 <DMA2D_IRQHandler+0x10>)
 800434a:	f001 fbea 	bl	8005b22 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	2001105c 	.word	0x2001105c

08004358 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
	return 1;
 800435c:	2301      	movs	r3, #1
}
 800435e:	4618      	mov	r0, r3
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <_kill>:

int _kill(int pid, int sig)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004372:	f029 fadd 	bl	802d930 <__errno>
 8004376:	4603      	mov	r3, r0
 8004378:	2216      	movs	r2, #22
 800437a:	601a      	str	r2, [r3, #0]
	return -1;
 800437c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004380:	4618      	mov	r0, r3
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <_exit>:

void _exit (int status)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004390:	f04f 31ff 	mov.w	r1, #4294967295
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff ffe7 	bl	8004368 <_kill>
	while (1) {}		/* Make sure we hang here */
 800439a:	e7fe      	b.n	800439a <_exit+0x12>

0800439c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	e00a      	b.n	80043c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80043ae:	f3af 8000 	nop.w
 80043b2:	4601      	mov	r1, r0
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	60ba      	str	r2, [r7, #8]
 80043ba:	b2ca      	uxtb	r2, r1
 80043bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	3301      	adds	r3, #1
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	dbf0      	blt.n	80043ae <_read+0x12>
	}

return len;
 80043cc:	687b      	ldr	r3, [r7, #4]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b086      	sub	sp, #24
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	e009      	b.n	80043fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	60ba      	str	r2, [r7, #8]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	3301      	adds	r3, #1
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	429a      	cmp	r2, r3
 8004402:	dbf1      	blt.n	80043e8 <_write+0x12>
	}
	return len;
 8004404:	687b      	ldr	r3, [r7, #4]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <_close>:

int _close(int file)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
	return -1;
 8004416:	f04f 33ff 	mov.w	r3, #4294967295
}
 800441a:	4618      	mov	r0, r3
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004436:	605a      	str	r2, [r3, #4]
	return 0;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <_isatty>:

int _isatty(int file)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
	return 1;
 800444e:	2301      	movs	r3, #1
}
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
	return 0;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b086      	sub	sp, #24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004480:	4a14      	ldr	r2, [pc, #80]	; (80044d4 <_sbrk+0x5c>)
 8004482:	4b15      	ldr	r3, [pc, #84]	; (80044d8 <_sbrk+0x60>)
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800448c:	4b13      	ldr	r3, [pc, #76]	; (80044dc <_sbrk+0x64>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d102      	bne.n	800449a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004494:	4b11      	ldr	r3, [pc, #68]	; (80044dc <_sbrk+0x64>)
 8004496:	4a12      	ldr	r2, [pc, #72]	; (80044e0 <_sbrk+0x68>)
 8004498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800449a:	4b10      	ldr	r3, [pc, #64]	; (80044dc <_sbrk+0x64>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4413      	add	r3, r2
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d207      	bcs.n	80044b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044a8:	f029 fa42 	bl	802d930 <__errno>
 80044ac:	4603      	mov	r3, r0
 80044ae:	220c      	movs	r2, #12
 80044b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044b2:	f04f 33ff 	mov.w	r3, #4294967295
 80044b6:	e009      	b.n	80044cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044b8:	4b08      	ldr	r3, [pc, #32]	; (80044dc <_sbrk+0x64>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044be:	4b07      	ldr	r3, [pc, #28]	; (80044dc <_sbrk+0x64>)
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4413      	add	r3, r2
 80044c6:	4a05      	ldr	r2, [pc, #20]	; (80044dc <_sbrk+0x64>)
 80044c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044ca:	68fb      	ldr	r3, [r7, #12]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20030000 	.word	0x20030000
 80044d8:	00000800 	.word	0x00000800
 80044dc:	20000124 	.word	0x20000124
 80044e0:	20011630 	.word	0x20011630

080044e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044e8:	4b06      	ldr	r3, [pc, #24]	; (8004504 <SystemInit+0x20>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ee:	4a05      	ldr	r2, [pc, #20]	; (8004504 <SystemInit+0x20>)
 80044f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044f8:	bf00      	nop
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	e000ed00 	.word	0xe000ed00

08004508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004508:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004540 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800450c:	480d      	ldr	r0, [pc, #52]	; (8004544 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800450e:	490e      	ldr	r1, [pc, #56]	; (8004548 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004510:	4a0e      	ldr	r2, [pc, #56]	; (800454c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004514:	e002      	b.n	800451c <LoopCopyDataInit>

08004516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800451a:	3304      	adds	r3, #4

0800451c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800451c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800451e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004520:	d3f9      	bcc.n	8004516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004522:	4a0b      	ldr	r2, [pc, #44]	; (8004550 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004524:	4c0b      	ldr	r4, [pc, #44]	; (8004554 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004528:	e001      	b.n	800452e <LoopFillZerobss>

0800452a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800452a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800452c:	3204      	adds	r2, #4

0800452e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800452e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004530:	d3fb      	bcc.n	800452a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004532:	f7ff ffd7 	bl	80044e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004536:	f029 fb09 	bl	802db4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800453a:	f7fd f9f5 	bl	8001928 <main>
  bx  lr    
 800453e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004540:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004548:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 800454c:	0803d974 	.word	0x0803d974
  ldr r2, =_sbss
 8004550:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8004554:	20011630 	.word	0x20011630

08004558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004558:	e7fe      	b.n	8004558 <ADC_IRQHandler>
	...

0800455c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004560:	4b0e      	ldr	r3, [pc, #56]	; (800459c <HAL_Init+0x40>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a0d      	ldr	r2, [pc, #52]	; (800459c <HAL_Init+0x40>)
 8004566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800456a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800456c:	4b0b      	ldr	r3, [pc, #44]	; (800459c <HAL_Init+0x40>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a0a      	ldr	r2, [pc, #40]	; (800459c <HAL_Init+0x40>)
 8004572:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004576:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004578:	4b08      	ldr	r3, [pc, #32]	; (800459c <HAL_Init+0x40>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a07      	ldr	r2, [pc, #28]	; (800459c <HAL_Init+0x40>)
 800457e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004582:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004584:	2003      	movs	r0, #3
 8004586:	f001 f9a0 	bl	80058ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800458a:	200f      	movs	r0, #15
 800458c:	f7ff fe18 	bl	80041c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004590:	f7ff f940 	bl	8003814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	40023c00 	.word	0x40023c00

080045a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  return uwTick;
 80045a4:	4b03      	ldr	r3, [pc, #12]	; (80045b4 <HAL_GetTick+0x14>)
 80045a6:	681b      	ldr	r3, [r3, #0]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	20011180 	.word	0x20011180

080045b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045c0:	f7ff ffee 	bl	80045a0 <HAL_GetTick>
 80045c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d0:	d005      	beq.n	80045de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045d2:	4b0a      	ldr	r3, [pc, #40]	; (80045fc <HAL_Delay+0x44>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4413      	add	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045de:	bf00      	nop
 80045e0:	f7ff ffde 	bl	80045a0 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d8f7      	bhi.n	80045e0 <HAL_Delay+0x28>
  {
  }
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000010 	.word	0x20000010

08004600 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e033      	b.n	800467e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7ff f924 	bl	800386c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2b00      	cmp	r3, #0
 800463c:	d118      	bne.n	8004670 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004646:	f023 0302 	bic.w	r3, r3, #2
 800464a:	f043 0202 	orr.w	r2, r3, #2
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f94a 	bl	80048ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f023 0303 	bic.w	r3, r3, #3
 8004666:	f043 0201 	orr.w	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	641a      	str	r2, [r3, #64]	; 0x40
 800466e:	e001      	b.n	8004674 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800467c:	7bfb      	ldrb	r3, [r7, #15]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004692:	2300      	movs	r3, #0
 8004694:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x1c>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e113      	b.n	80048cc <HAL_ADC_ConfigChannel+0x244>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b09      	cmp	r3, #9
 80046b2:	d925      	bls.n	8004700 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68d9      	ldr	r1, [r3, #12]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	461a      	mov	r2, r3
 80046c2:	4613      	mov	r3, r2
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	4413      	add	r3, r2
 80046c8:	3b1e      	subs	r3, #30
 80046ca:	2207      	movs	r2, #7
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	43da      	mvns	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	400a      	ands	r2, r1
 80046d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68d9      	ldr	r1, [r3, #12]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	4618      	mov	r0, r3
 80046ec:	4603      	mov	r3, r0
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	4403      	add	r3, r0
 80046f2:	3b1e      	subs	r3, #30
 80046f4:	409a      	lsls	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	60da      	str	r2, [r3, #12]
 80046fe:	e022      	b.n	8004746 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6919      	ldr	r1, [r3, #16]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	461a      	mov	r2, r3
 800470e:	4613      	mov	r3, r2
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	4413      	add	r3, r2
 8004714:	2207      	movs	r2, #7
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43da      	mvns	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	400a      	ands	r2, r1
 8004722:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6919      	ldr	r1, [r3, #16]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	b29b      	uxth	r3, r3
 8004734:	4618      	mov	r0, r3
 8004736:	4603      	mov	r3, r0
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	4403      	add	r3, r0
 800473c:	409a      	lsls	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b06      	cmp	r3, #6
 800474c:	d824      	bhi.n	8004798 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	3b05      	subs	r3, #5
 8004760:	221f      	movs	r2, #31
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	43da      	mvns	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	400a      	ands	r2, r1
 800476e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	b29b      	uxth	r3, r3
 800477c:	4618      	mov	r0, r3
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	3b05      	subs	r3, #5
 800478a:	fa00 f203 	lsl.w	r2, r0, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	635a      	str	r2, [r3, #52]	; 0x34
 8004796:	e04c      	b.n	8004832 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b0c      	cmp	r3, #12
 800479e:	d824      	bhi.n	80047ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	4613      	mov	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	3b23      	subs	r3, #35	; 0x23
 80047b2:	221f      	movs	r2, #31
 80047b4:	fa02 f303 	lsl.w	r3, r2, r3
 80047b8:	43da      	mvns	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	400a      	ands	r2, r1
 80047c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	4618      	mov	r0, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	3b23      	subs	r3, #35	; 0x23
 80047dc:	fa00 f203 	lsl.w	r2, r0, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
 80047e8:	e023      	b.n	8004832 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	3b41      	subs	r3, #65	; 0x41
 80047fc:	221f      	movs	r2, #31
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	43da      	mvns	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	400a      	ands	r2, r1
 800480a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	b29b      	uxth	r3, r3
 8004818:	4618      	mov	r0, r3
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	3b41      	subs	r3, #65	; 0x41
 8004826:	fa00 f203 	lsl.w	r2, r0, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004832:	4b29      	ldr	r3, [pc, #164]	; (80048d8 <HAL_ADC_ConfigChannel+0x250>)
 8004834:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a28      	ldr	r2, [pc, #160]	; (80048dc <HAL_ADC_ConfigChannel+0x254>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d10f      	bne.n	8004860 <HAL_ADC_ConfigChannel+0x1d8>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b12      	cmp	r3, #18
 8004846:	d10b      	bne.n	8004860 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a1d      	ldr	r2, [pc, #116]	; (80048dc <HAL_ADC_ConfigChannel+0x254>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d12b      	bne.n	80048c2 <HAL_ADC_ConfigChannel+0x23a>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a1c      	ldr	r2, [pc, #112]	; (80048e0 <HAL_ADC_ConfigChannel+0x258>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d003      	beq.n	800487c <HAL_ADC_ConfigChannel+0x1f4>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b11      	cmp	r3, #17
 800487a:	d122      	bne.n	80048c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a11      	ldr	r2, [pc, #68]	; (80048e0 <HAL_ADC_ConfigChannel+0x258>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d111      	bne.n	80048c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800489e:	4b11      	ldr	r3, [pc, #68]	; (80048e4 <HAL_ADC_ConfigChannel+0x25c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a11      	ldr	r2, [pc, #68]	; (80048e8 <HAL_ADC_ConfigChannel+0x260>)
 80048a4:	fba2 2303 	umull	r2, r3, r2, r3
 80048a8:	0c9a      	lsrs	r2, r3, #18
 80048aa:	4613      	mov	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80048b4:	e002      	b.n	80048bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	3b01      	subs	r3, #1
 80048ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1f9      	bne.n	80048b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	40012300 	.word	0x40012300
 80048dc:	40012000 	.word	0x40012000
 80048e0:	10000012 	.word	0x10000012
 80048e4:	20000008 	.word	0x20000008
 80048e8:	431bde83 	.word	0x431bde83

080048ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048f4:	4b79      	ldr	r3, [pc, #484]	; (8004adc <ADC_Init+0x1f0>)
 80048f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	431a      	orrs	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004920:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6859      	ldr	r1, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	021a      	lsls	r2, r3, #8
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004944:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6859      	ldr	r1, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004966:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6899      	ldr	r1, [r3, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	4a58      	ldr	r2, [pc, #352]	; (8004ae0 <ADC_Init+0x1f4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d022      	beq.n	80049ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004992:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6899      	ldr	r1, [r3, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6899      	ldr	r1, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	609a      	str	r2, [r3, #8]
 80049c8:	e00f      	b.n	80049ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80049d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80049e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0202 	bic.w	r2, r2, #2
 80049f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6899      	ldr	r1, [r3, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	7e1b      	ldrb	r3, [r3, #24]
 8004a04:	005a      	lsls	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01b      	beq.n	8004a50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004a36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6859      	ldr	r1, [r3, #4]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	3b01      	subs	r3, #1
 8004a44:	035a      	lsls	r2, r3, #13
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	e007      	b.n	8004a60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	051a      	lsls	r2, r3, #20
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004a94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6899      	ldr	r1, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004aa2:	025a      	lsls	r2, r3, #9
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6899      	ldr	r1, [r3, #8]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	029a      	lsls	r2, r3, #10
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	609a      	str	r2, [r3, #8]
}
 8004ad0:	bf00      	nop
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	40012300 	.word	0x40012300
 8004ae0:	0f000001 	.word	0x0f000001

08004ae4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e0ed      	b.n	8004cd2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d102      	bne.n	8004b08 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fe fef6 	bl	80038f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b18:	f7ff fd42 	bl	80045a0 <HAL_GetTick>
 8004b1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b1e:	e012      	b.n	8004b46 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b20:	f7ff fd3e 	bl	80045a0 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	2b0a      	cmp	r3, #10
 8004b2c:	d90b      	bls.n	8004b46 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2205      	movs	r2, #5
 8004b3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e0c5      	b.n	8004cd2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0e5      	beq.n	8004b20 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0202 	bic.w	r2, r2, #2
 8004b62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b64:	f7ff fd1c 	bl	80045a0 <HAL_GetTick>
 8004b68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b6a:	e012      	b.n	8004b92 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b6c:	f7ff fd18 	bl	80045a0 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b0a      	cmp	r3, #10
 8004b78:	d90b      	bls.n	8004b92 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2205      	movs	r2, #5
 8004b8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e09f      	b.n	8004cd2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e5      	bne.n	8004b6c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	7e1b      	ldrb	r3, [r3, #24]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d108      	bne.n	8004bba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	e007      	b.n	8004bca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	7e5b      	ldrb	r3, [r3, #25]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d108      	bne.n	8004be4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	e007      	b.n	8004bf4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	7e9b      	ldrb	r3, [r3, #26]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d108      	bne.n	8004c0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0220 	orr.w	r2, r2, #32
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	e007      	b.n	8004c1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0220 	bic.w	r2, r2, #32
 8004c1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	7edb      	ldrb	r3, [r3, #27]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d108      	bne.n	8004c38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0210 	bic.w	r2, r2, #16
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	e007      	b.n	8004c48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0210 	orr.w	r2, r2, #16
 8004c46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	7f1b      	ldrb	r3, [r3, #28]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d108      	bne.n	8004c62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0208 	orr.w	r2, r2, #8
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	e007      	b.n	8004c72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0208 	bic.w	r2, r2, #8
 8004c70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	7f5b      	ldrb	r3, [r3, #29]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d108      	bne.n	8004c8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0204 	orr.w	r2, r2, #4
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	e007      	b.n	8004c9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0204 	bic.w	r2, r2, #4
 8004c9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	ea42 0103 	orr.w	r1, r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	1e5a      	subs	r2, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b087      	sub	sp, #28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cf2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004cf4:	7cfb      	ldrb	r3, [r7, #19]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d003      	beq.n	8004d02 <HAL_CAN_ConfigFilter+0x26>
 8004cfa:	7cfb      	ldrb	r3, [r7, #19]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	f040 80be 	bne.w	8004e7e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004d02:	4b65      	ldr	r3, [pc, #404]	; (8004e98 <HAL_CAN_ConfigFilter+0x1bc>)
 8004d04:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d0c:	f043 0201 	orr.w	r2, r3, #1
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d1c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	021b      	lsls	r3, r3, #8
 8004d32:	431a      	orrs	r2, r3
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f003 031f 	and.w	r3, r3, #31
 8004d42:	2201      	movs	r2, #1
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	43db      	mvns	r3, r3
 8004d54:	401a      	ands	r2, r3
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d123      	bne.n	8004dac <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	401a      	ands	r2, r3
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004d86:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	3248      	adds	r2, #72	; 0x48
 8004d8c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004da0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004da2:	6979      	ldr	r1, [r7, #20]
 8004da4:	3348      	adds	r3, #72	; 0x48
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	440b      	add	r3, r1
 8004daa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d122      	bne.n	8004dfa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004dd4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	3248      	adds	r2, #72	; 0x48
 8004dda:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004dee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004df0:	6979      	ldr	r1, [r7, #20]
 8004df2:	3348      	adds	r3, #72	; 0x48
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	440b      	add	r3, r1
 8004df8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d109      	bne.n	8004e16 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	401a      	ands	r2, r3
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004e14:	e007      	b.n	8004e26 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d109      	bne.n	8004e42 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	43db      	mvns	r3, r3
 8004e38:	401a      	ands	r2, r3
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004e40:	e007      	b.n	8004e52 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d107      	bne.n	8004e6a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	431a      	orrs	r2, r3
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e70:	f023 0201 	bic.w	r2, r3, #1
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e006      	b.n	8004e8c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
  }
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	371c      	adds	r7, #28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	40006400 	.word	0x40006400

08004e9c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d12e      	bne.n	8004f0e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0201 	bic.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ec8:	f7ff fb6a 	bl	80045a0 <HAL_GetTick>
 8004ecc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004ece:	e012      	b.n	8004ef6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ed0:	f7ff fb66 	bl	80045a0 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b0a      	cmp	r3, #10
 8004edc:	d90b      	bls.n	8004ef6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2205      	movs	r2, #5
 8004eee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e012      	b.n	8004f1c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e5      	bne.n	8004ed0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	e006      	b.n	8004f1c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
  }
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b089      	sub	sp, #36	; 0x24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f38:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f42:	7ffb      	ldrb	r3, [r7, #31]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d003      	beq.n	8004f50 <HAL_CAN_AddTxMessage+0x2c>
 8004f48:	7ffb      	ldrb	r3, [r7, #31]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	f040 80b8 	bne.w	80050c0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10a      	bne.n	8004f70 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d105      	bne.n	8004f70 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 80a0 	beq.w	80050b0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	0e1b      	lsrs	r3, r3, #24
 8004f74:	f003 0303 	and.w	r3, r3, #3
 8004f78:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d907      	bls.n	8004f90 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f84:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e09e      	b.n	80050ce <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004f90:	2201      	movs	r2, #1
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	409a      	lsls	r2, r3
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10d      	bne.n	8004fbe <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004fac:	68f9      	ldr	r1, [r7, #12]
 8004fae:	6809      	ldr	r1, [r1, #0]
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	3318      	adds	r3, #24
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	440b      	add	r3, r1
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	e00f      	b.n	8004fde <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004fc8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004fce:	68f9      	ldr	r1, [r7, #12]
 8004fd0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004fd2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	3318      	adds	r3, #24
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	440b      	add	r3, r1
 8004fdc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6819      	ldr	r1, [r3, #0]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	691a      	ldr	r2, [r3, #16]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	3318      	adds	r3, #24
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	440b      	add	r3, r1
 8004fee:	3304      	adds	r3, #4
 8004ff0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	7d1b      	ldrb	r3, [r3, #20]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d111      	bne.n	800501e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	3318      	adds	r3, #24
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	4413      	add	r3, r2
 8005006:	3304      	adds	r3, #4
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	6811      	ldr	r1, [r2, #0]
 800500e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	3318      	adds	r3, #24
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	440b      	add	r3, r1
 800501a:	3304      	adds	r3, #4
 800501c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3307      	adds	r3, #7
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	061a      	lsls	r2, r3, #24
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	3306      	adds	r3, #6
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	041b      	lsls	r3, r3, #16
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3305      	adds	r3, #5
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	021b      	lsls	r3, r3, #8
 8005038:	4313      	orrs	r3, r2
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	3204      	adds	r2, #4
 800503e:	7812      	ldrb	r2, [r2, #0]
 8005040:	4610      	mov	r0, r2
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	6811      	ldr	r1, [r2, #0]
 8005046:	ea43 0200 	orr.w	r2, r3, r0
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	440b      	add	r3, r1
 8005050:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005054:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3303      	adds	r3, #3
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	061a      	lsls	r2, r3, #24
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3302      	adds	r3, #2
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	041b      	lsls	r3, r3, #16
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3301      	adds	r3, #1
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	4313      	orrs	r3, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	7812      	ldrb	r2, [r2, #0]
 8005076:	4610      	mov	r0, r2
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	6811      	ldr	r1, [r2, #0]
 800507c:	ea43 0200 	orr.w	r2, r3, r0
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	440b      	add	r3, r1
 8005086:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800508a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	3318      	adds	r3, #24
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	4413      	add	r3, r2
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	6811      	ldr	r1, [r2, #0]
 800509e:	f043 0201 	orr.w	r2, r3, #1
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	3318      	adds	r3, #24
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	440b      	add	r3, r1
 80050aa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	e00e      	b.n	80050ce <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e006      	b.n	80050ce <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
  }
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3724      	adds	r7, #36	; 0x24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80050da:	b480      	push	{r7}
 80050dc:	b087      	sub	sp, #28
 80050de:	af00      	add	r7, sp, #0
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	60b9      	str	r1, [r7, #8]
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050ee:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80050f0:	7dfb      	ldrb	r3, [r7, #23]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d003      	beq.n	80050fe <HAL_CAN_GetRxMessage+0x24>
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	f040 80f3 	bne.w	80052e4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10e      	bne.n	8005122 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d116      	bne.n	8005140 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e0e7      	b.n	80052f2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	f003 0303 	and.w	r3, r3, #3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d107      	bne.n	8005140 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0d8      	b.n	80052f2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	331b      	adds	r3, #27
 8005148:	011b      	lsls	r3, r3, #4
 800514a:	4413      	add	r3, r2
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0204 	and.w	r2, r3, #4
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10c      	bne.n	8005178 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	331b      	adds	r3, #27
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	4413      	add	r3, r2
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	0d5b      	lsrs	r3, r3, #21
 800516e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	601a      	str	r2, [r3, #0]
 8005176:	e00b      	b.n	8005190 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	331b      	adds	r3, #27
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	4413      	add	r3, r2
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	08db      	lsrs	r3, r3, #3
 8005188:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	331b      	adds	r3, #27
 8005198:	011b      	lsls	r3, r3, #4
 800519a:	4413      	add	r3, r2
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0202 	and.w	r2, r3, #2
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	331b      	adds	r3, #27
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	4413      	add	r3, r2
 80051b2:	3304      	adds	r3, #4
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 020f 	and.w	r2, r3, #15
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	331b      	adds	r3, #27
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	4413      	add	r3, r2
 80051ca:	3304      	adds	r3, #4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	0a1b      	lsrs	r3, r3, #8
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	331b      	adds	r3, #27
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	4413      	add	r3, r2
 80051e2:	3304      	adds	r3, #4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	0c1b      	lsrs	r3, r3, #16
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	4413      	add	r3, r2
 800520e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	0a1a      	lsrs	r2, r3, #8
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	3301      	adds	r3, #1
 800521a:	b2d2      	uxtb	r2, r2
 800521c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	011b      	lsls	r3, r3, #4
 8005226:	4413      	add	r3, r2
 8005228:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	0c1a      	lsrs	r2, r3, #16
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	3302      	adds	r3, #2
 8005234:	b2d2      	uxtb	r2, r2
 8005236:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	4413      	add	r3, r2
 8005242:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	0e1a      	lsrs	r2, r3, #24
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	3303      	adds	r3, #3
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	4413      	add	r3, r2
 800525c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	3304      	adds	r3, #4
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	4413      	add	r3, r2
 8005274:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	0a1a      	lsrs	r2, r3, #8
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	3305      	adds	r3, #5
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	4413      	add	r3, r2
 800528e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	0c1a      	lsrs	r2, r3, #16
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	3306      	adds	r3, #6
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	0e1a      	lsrs	r2, r3, #24
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	3307      	adds	r3, #7
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d108      	bne.n	80052d0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0220 	orr.w	r2, r2, #32
 80052cc:	60da      	str	r2, [r3, #12]
 80052ce:	e007      	b.n	80052e0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	691a      	ldr	r2, [r3, #16]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0220 	orr.w	r2, r2, #32
 80052de:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	e006      	b.n	80052f2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
  }
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	371c      	adds	r7, #28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b08a      	sub	sp, #40	; 0x28
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005306:	2300      	movs	r3, #0
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d07c      	beq.n	800543e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d023      	beq.n	8005396 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2201      	movs	r2, #1
 8005354:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f983 	bl	800566c <HAL_CAN_TxMailbox0CompleteCallback>
 8005366:	e016      	b.n	8005396 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	d004      	beq.n	800537c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
 800537a:	e00c      	b.n	8005396 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	f003 0308 	and.w	r3, r3, #8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d004      	beq.n	8005390 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
 800538e:	e002      	b.n	8005396 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f989 	bl	80056a8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539c:	2b00      	cmp	r3, #0
 800539e:	d024      	beq.n	80053ea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f963 	bl	8005680 <HAL_CAN_TxMailbox1CompleteCallback>
 80053ba:	e016      	b.n	80053ea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d004      	beq.n	80053d0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24
 80053ce:	e00c      	b.n	80053ea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d004      	beq.n	80053e4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
 80053e2:	e002      	b.n	80053ea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f969 	bl	80056bc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d024      	beq.n	800543e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80053fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 f943 	bl	8005694 <HAL_CAN_TxMailbox2CompleteCallback>
 800540e:	e016      	b.n	800543e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d004      	beq.n	8005424 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
 8005422:	e00c      	b.n	800543e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d004      	beq.n	8005438 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
 8005436:	e002      	b.n	800543e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f949 	bl	80056d0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	f003 0308 	and.w	r3, r3, #8
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00c      	beq.n	8005462 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	2b00      	cmp	r3, #0
 8005450:	d007      	beq.n	8005462 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005458:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2210      	movs	r2, #16
 8005460:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	f003 0304 	and.w	r3, r3, #4
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00b      	beq.n	8005484 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d006      	beq.n	8005484 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2208      	movs	r2, #8
 800547c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f93a 	bl	80056f8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d009      	beq.n	80054a2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0303 	and.w	r3, r3, #3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f921 	bl	80056e4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00c      	beq.n	80054c6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f003 0310 	and.w	r3, r3, #16
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d007      	beq.n	80054c6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2210      	movs	r2, #16
 80054c4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	f003 0320 	and.w	r3, r3, #32
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00b      	beq.n	80054e8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d006      	beq.n	80054e8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2208      	movs	r2, #8
 80054e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f91c 	bl	8005720 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	f003 0310 	and.w	r3, r3, #16
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f003 0303 	and.w	r3, r3, #3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f903 	bl	800570c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00b      	beq.n	8005528 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f003 0310 	and.w	r3, r3, #16
 8005516:	2b00      	cmp	r3, #0
 8005518:	d006      	beq.n	8005528 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2210      	movs	r2, #16
 8005520:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f906 	bl	8005734 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00b      	beq.n	800554a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	f003 0308 	and.w	r3, r3, #8
 8005538:	2b00      	cmp	r3, #0
 800553a:	d006      	beq.n	800554a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2208      	movs	r2, #8
 8005542:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f8ff 	bl	8005748 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d07b      	beq.n	800564c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b00      	cmp	r3, #0
 800555c:	d072      	beq.n	8005644 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005564:	2b00      	cmp	r3, #0
 8005566:	d008      	beq.n	800557a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005580:	2b00      	cmp	r3, #0
 8005582:	d008      	beq.n	8005596 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	f043 0302 	orr.w	r3, r3, #2
 8005594:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800559c:	2b00      	cmp	r3, #0
 800559e:	d008      	beq.n	80055b2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	f043 0304 	orr.w	r3, r3, #4
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d043      	beq.n	8005644 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d03e      	beq.n	8005644 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055cc:	2b60      	cmp	r3, #96	; 0x60
 80055ce:	d02b      	beq.n	8005628 <HAL_CAN_IRQHandler+0x32a>
 80055d0:	2b60      	cmp	r3, #96	; 0x60
 80055d2:	d82e      	bhi.n	8005632 <HAL_CAN_IRQHandler+0x334>
 80055d4:	2b50      	cmp	r3, #80	; 0x50
 80055d6:	d022      	beq.n	800561e <HAL_CAN_IRQHandler+0x320>
 80055d8:	2b50      	cmp	r3, #80	; 0x50
 80055da:	d82a      	bhi.n	8005632 <HAL_CAN_IRQHandler+0x334>
 80055dc:	2b40      	cmp	r3, #64	; 0x40
 80055de:	d019      	beq.n	8005614 <HAL_CAN_IRQHandler+0x316>
 80055e0:	2b40      	cmp	r3, #64	; 0x40
 80055e2:	d826      	bhi.n	8005632 <HAL_CAN_IRQHandler+0x334>
 80055e4:	2b30      	cmp	r3, #48	; 0x30
 80055e6:	d010      	beq.n	800560a <HAL_CAN_IRQHandler+0x30c>
 80055e8:	2b30      	cmp	r3, #48	; 0x30
 80055ea:	d822      	bhi.n	8005632 <HAL_CAN_IRQHandler+0x334>
 80055ec:	2b10      	cmp	r3, #16
 80055ee:	d002      	beq.n	80055f6 <HAL_CAN_IRQHandler+0x2f8>
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	d005      	beq.n	8005600 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80055f4:	e01d      	b.n	8005632 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	f043 0308 	orr.w	r3, r3, #8
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055fe:	e019      	b.n	8005634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	f043 0310 	orr.w	r3, r3, #16
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005608:	e014      	b.n	8005634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	f043 0320 	orr.w	r3, r3, #32
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005612:	e00f      	b.n	8005634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800561a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800561c:	e00a      	b.n	8005634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005626:	e005      	b.n	8005634 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800562e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005630:	e000      	b.n	8005634 <HAL_CAN_IRQHandler+0x336>
            break;
 8005632:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005642:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2204      	movs	r2, #4
 800564a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800564c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564e:	2b00      	cmp	r3, #0
 8005650:	d008      	beq.n	8005664 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	431a      	orrs	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f87c 	bl	800575c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005664:	bf00      	nop
 8005666:	3728      	adds	r7, #40	; 0x28
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005780:	4b0c      	ldr	r3, [pc, #48]	; (80057b4 <__NVIC_SetPriorityGrouping+0x44>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800578c:	4013      	ands	r3, r2
 800578e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800579c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057a2:	4a04      	ldr	r2, [pc, #16]	; (80057b4 <__NVIC_SetPriorityGrouping+0x44>)
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	60d3      	str	r3, [r2, #12]
}
 80057a8:	bf00      	nop
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	e000ed00 	.word	0xe000ed00

080057b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057bc:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <__NVIC_GetPriorityGrouping+0x18>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	0a1b      	lsrs	r3, r3, #8
 80057c2:	f003 0307 	and.w	r3, r3, #7
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	e000ed00 	.word	0xe000ed00

080057d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	db0b      	blt.n	80057fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057e6:	79fb      	ldrb	r3, [r7, #7]
 80057e8:	f003 021f 	and.w	r2, r3, #31
 80057ec:	4907      	ldr	r1, [pc, #28]	; (800580c <__NVIC_EnableIRQ+0x38>)
 80057ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f2:	095b      	lsrs	r3, r3, #5
 80057f4:	2001      	movs	r0, #1
 80057f6:	fa00 f202 	lsl.w	r2, r0, r2
 80057fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	e000e100 	.word	0xe000e100

08005810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	4603      	mov	r3, r0
 8005818:	6039      	str	r1, [r7, #0]
 800581a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800581c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005820:	2b00      	cmp	r3, #0
 8005822:	db0a      	blt.n	800583a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	b2da      	uxtb	r2, r3
 8005828:	490c      	ldr	r1, [pc, #48]	; (800585c <__NVIC_SetPriority+0x4c>)
 800582a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800582e:	0112      	lsls	r2, r2, #4
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	440b      	add	r3, r1
 8005834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005838:	e00a      	b.n	8005850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	b2da      	uxtb	r2, r3
 800583e:	4908      	ldr	r1, [pc, #32]	; (8005860 <__NVIC_SetPriority+0x50>)
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	3b04      	subs	r3, #4
 8005848:	0112      	lsls	r2, r2, #4
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	440b      	add	r3, r1
 800584e:	761a      	strb	r2, [r3, #24]
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	e000e100 	.word	0xe000e100
 8005860:	e000ed00 	.word	0xe000ed00

08005864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005864:	b480      	push	{r7}
 8005866:	b089      	sub	sp, #36	; 0x24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	f1c3 0307 	rsb	r3, r3, #7
 800587e:	2b04      	cmp	r3, #4
 8005880:	bf28      	it	cs
 8005882:	2304      	movcs	r3, #4
 8005884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	3304      	adds	r3, #4
 800588a:	2b06      	cmp	r3, #6
 800588c:	d902      	bls.n	8005894 <NVIC_EncodePriority+0x30>
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	3b03      	subs	r3, #3
 8005892:	e000      	b.n	8005896 <NVIC_EncodePriority+0x32>
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005898:	f04f 32ff 	mov.w	r2, #4294967295
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	43da      	mvns	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	401a      	ands	r2, r3
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058ac:	f04f 31ff 	mov.w	r1, #4294967295
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	fa01 f303 	lsl.w	r3, r1, r3
 80058b6:	43d9      	mvns	r1, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058bc:	4313      	orrs	r3, r2
         );
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3724      	adds	r7, #36	; 0x24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b082      	sub	sp, #8
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff ff4c 	bl	8005770 <__NVIC_SetPriorityGrouping>
}
 80058d8:	bf00      	nop
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	4603      	mov	r3, r0
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058f2:	f7ff ff61 	bl	80057b8 <__NVIC_GetPriorityGrouping>
 80058f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	6978      	ldr	r0, [r7, #20]
 80058fe:	f7ff ffb1 	bl	8005864 <NVIC_EncodePriority>
 8005902:	4602      	mov	r2, r0
 8005904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005908:	4611      	mov	r1, r2
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff ff80 	bl	8005810 <__NVIC_SetPriority>
}
 8005910:	bf00      	nop
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	4603      	mov	r3, r0
 8005920:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff ff54 	bl	80057d4 <__NVIC_EnableIRQ>
}
 800592c:	bf00      	nop
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e00e      	b.n	8005964 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	795b      	ldrb	r3, [r3, #5]
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d105      	bne.n	800595c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7fe f87c 	bl	8003a54 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005982:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800598a:	2b01      	cmp	r3, #1
 800598c:	d101      	bne.n	8005992 <HAL_DMA_Start_IT+0x26>
 800598e:	2302      	movs	r3, #2
 8005990:	e040      	b.n	8005a14 <HAL_DMA_Start_IT+0xa8>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d12f      	bne.n	8005a06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2202      	movs	r2, #2
 80059aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	68b9      	ldr	r1, [r7, #8]
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 f83a 	bl	8005a34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c4:	223f      	movs	r2, #63	; 0x3f
 80059c6:	409a      	lsls	r2, r3
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0216 	orr.w	r2, r2, #22
 80059da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d007      	beq.n	80059f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0208 	orr.w	r2, r2, #8
 80059f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0201 	orr.w	r2, r2, #1
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	e005      	b.n	8005a12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005a0e:	2302      	movs	r3, #2
 8005a10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	2b40      	cmp	r3, #64	; 0x40
 8005a60:	d108      	bne.n	8005a74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005a72:	e007      	b.n	8005a84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	60da      	str	r2, [r3, #12]
}
 8005a84:	bf00      	nop
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e03b      	b.n	8005b1a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fd ffee 	bl	8003a98 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae0:	f023 0107 	bic.w	r1, r3, #7
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005afa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	68d1      	ldr	r1, [r2, #12]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6812      	ldr	r2, [r2, #0]
 8005b06:	430b      	orrs	r3, r1
 8005b08:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b084      	sub	sp, #16
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d026      	beq.n	8005b92 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d021      	beq.n	8005b92 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b5c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b62:	f043 0201 	orr.w	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2204      	movs	r2, #4
 8005b76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f003 0320 	and.w	r3, r3, #32
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d026      	beq.n	8005bea <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d021      	beq.n	8005bea <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bb4:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc2:	f043 0202 	orr.w	r2, r3, #2
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2204      	movs	r2, #4
 8005bce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f003 0308 	and.w	r3, r3, #8
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d026      	beq.n	8005c42 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d021      	beq.n	8005c42 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c0c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2208      	movs	r2, #8
 8005c14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1a:	f043 0204 	orr.w	r2, r3, #4
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2204      	movs	r2, #4
 8005c26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d013      	beq.n	8005c74 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00e      	beq.n	8005c74 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c64:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2204      	movs	r2, #4
 8005c6c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f853 	bl	8005d1a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d024      	beq.n	8005cc8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d01f      	beq.n	8005cc8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c96:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d003      	beq.n	8005cc8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f003 0310 	and.w	r3, r3, #16
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01f      	beq.n	8005d12 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d01a      	beq.n	8005d12 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cea:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2210      	movs	r2, #16
 8005cf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f80e 	bl	8005d2e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005d12:	bf00      	nop
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
	...

08005d44 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d101      	bne.n	8005d64 <HAL_DMA2D_ConfigLayer+0x20>
 8005d60:	2302      	movs	r3, #2
 8005d62:	e079      	b.n	8005e58 <HAL_DMA2D_ConfigLayer+0x114>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	3318      	adds	r3, #24
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	685a      	ldr	r2, [r3, #4]
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	041b      	lsls	r3, r3, #16
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005d8e:	4b35      	ldr	r3, [pc, #212]	; (8005e64 <HAL_DMA2D_ConfigLayer+0x120>)
 8005d90:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	2b0a      	cmp	r3, #10
 8005d98:	d003      	beq.n	8005da2 <HAL_DMA2D_ConfigLayer+0x5e>
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	2b09      	cmp	r3, #9
 8005da0:	d107      	bne.n	8005db2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]
 8005db0:	e005      	b.n	8005dbe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	061b      	lsls	r3, r3, #24
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d120      	bne.n	8005e06 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	43db      	mvns	r3, r3
 8005dce:	ea02 0103 	and.w	r1, r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	6812      	ldr	r2, [r2, #0]
 8005de4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b0a      	cmp	r3, #10
 8005dec:	d003      	beq.n	8005df6 <HAL_DMA2D_ConfigLayer+0xb2>
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2b09      	cmp	r3, #9
 8005df4:	d127      	bne.n	8005e46 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005e02:	629a      	str	r2, [r3, #40]	; 0x28
 8005e04:	e01f      	b.n	8005e46 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	69da      	ldr	r2, [r3, #28]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	43db      	mvns	r3, r3
 8005e10:	ea02 0103 	and.w	r1, r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	6812      	ldr	r2, [r2, #0]
 8005e26:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2b0a      	cmp	r3, #10
 8005e2e:	d003      	beq.n	8005e38 <HAL_DMA2D_ConfigLayer+0xf4>
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2b09      	cmp	r3, #9
 8005e36:	d106      	bne.n	8005e46 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	68da      	ldr	r2, [r3, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005e44:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	371c      	adds	r7, #28
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	ff03000f 	.word	0xff03000f

08005e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b089      	sub	sp, #36	; 0x24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e7e:	2300      	movs	r3, #0
 8005e80:	61fb      	str	r3, [r7, #28]
 8005e82:	e177      	b.n	8006174 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e84:	2201      	movs	r2, #1
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	4013      	ands	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	f040 8166 	bne.w	800616e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d005      	beq.n	8005eba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d130      	bne.n	8005f1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	43db      	mvns	r3, r3
 8005ecc:	69ba      	ldr	r2, [r7, #24]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	fa02 f303 	lsl.w	r3, r2, r3
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	4013      	ands	r3, r2
 8005efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	091b      	lsrs	r3, r3, #4
 8005f06:	f003 0201 	and.w	r2, r3, #1
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f003 0303 	and.w	r3, r3, #3
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	d017      	beq.n	8005f58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	2203      	movs	r2, #3
 8005f34:	fa02 f303 	lsl.w	r3, r2, r3
 8005f38:	43db      	mvns	r3, r3
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	005b      	lsls	r3, r3, #1
 8005f48:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f003 0303 	and.w	r3, r3, #3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d123      	bne.n	8005fac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	08da      	lsrs	r2, r3, #3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	3208      	adds	r2, #8
 8005f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	f003 0307 	and.w	r3, r3, #7
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	220f      	movs	r2, #15
 8005f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f80:	43db      	mvns	r3, r3
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	4013      	ands	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	f003 0307 	and.w	r3, r3, #7
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	fa02 f303 	lsl.w	r3, r2, r3
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	08da      	lsrs	r2, r3, #3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3208      	adds	r2, #8
 8005fa6:	69b9      	ldr	r1, [r7, #24]
 8005fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	2203      	movs	r2, #3
 8005fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbc:	43db      	mvns	r3, r3
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f003 0203 	and.w	r2, r3, #3
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 80c0 	beq.w	800616e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	4b66      	ldr	r3, [pc, #408]	; (800618c <HAL_GPIO_Init+0x324>)
 8005ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff6:	4a65      	ldr	r2, [pc, #404]	; (800618c <HAL_GPIO_Init+0x324>)
 8005ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8005ffe:	4b63      	ldr	r3, [pc, #396]	; (800618c <HAL_GPIO_Init+0x324>)
 8006000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800600a:	4a61      	ldr	r2, [pc, #388]	; (8006190 <HAL_GPIO_Init+0x328>)
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	089b      	lsrs	r3, r3, #2
 8006010:	3302      	adds	r3, #2
 8006012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	220f      	movs	r2, #15
 8006022:	fa02 f303 	lsl.w	r3, r2, r3
 8006026:	43db      	mvns	r3, r3
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	4013      	ands	r3, r2
 800602c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a58      	ldr	r2, [pc, #352]	; (8006194 <HAL_GPIO_Init+0x32c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d037      	beq.n	80060a6 <HAL_GPIO_Init+0x23e>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a57      	ldr	r2, [pc, #348]	; (8006198 <HAL_GPIO_Init+0x330>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d031      	beq.n	80060a2 <HAL_GPIO_Init+0x23a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a56      	ldr	r2, [pc, #344]	; (800619c <HAL_GPIO_Init+0x334>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d02b      	beq.n	800609e <HAL_GPIO_Init+0x236>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a55      	ldr	r2, [pc, #340]	; (80061a0 <HAL_GPIO_Init+0x338>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d025      	beq.n	800609a <HAL_GPIO_Init+0x232>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a54      	ldr	r2, [pc, #336]	; (80061a4 <HAL_GPIO_Init+0x33c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d01f      	beq.n	8006096 <HAL_GPIO_Init+0x22e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a53      	ldr	r2, [pc, #332]	; (80061a8 <HAL_GPIO_Init+0x340>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d019      	beq.n	8006092 <HAL_GPIO_Init+0x22a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a52      	ldr	r2, [pc, #328]	; (80061ac <HAL_GPIO_Init+0x344>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d013      	beq.n	800608e <HAL_GPIO_Init+0x226>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a51      	ldr	r2, [pc, #324]	; (80061b0 <HAL_GPIO_Init+0x348>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00d      	beq.n	800608a <HAL_GPIO_Init+0x222>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a50      	ldr	r2, [pc, #320]	; (80061b4 <HAL_GPIO_Init+0x34c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d007      	beq.n	8006086 <HAL_GPIO_Init+0x21e>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a4f      	ldr	r2, [pc, #316]	; (80061b8 <HAL_GPIO_Init+0x350>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d101      	bne.n	8006082 <HAL_GPIO_Init+0x21a>
 800607e:	2309      	movs	r3, #9
 8006080:	e012      	b.n	80060a8 <HAL_GPIO_Init+0x240>
 8006082:	230a      	movs	r3, #10
 8006084:	e010      	b.n	80060a8 <HAL_GPIO_Init+0x240>
 8006086:	2308      	movs	r3, #8
 8006088:	e00e      	b.n	80060a8 <HAL_GPIO_Init+0x240>
 800608a:	2307      	movs	r3, #7
 800608c:	e00c      	b.n	80060a8 <HAL_GPIO_Init+0x240>
 800608e:	2306      	movs	r3, #6
 8006090:	e00a      	b.n	80060a8 <HAL_GPIO_Init+0x240>
 8006092:	2305      	movs	r3, #5
 8006094:	e008      	b.n	80060a8 <HAL_GPIO_Init+0x240>
 8006096:	2304      	movs	r3, #4
 8006098:	e006      	b.n	80060a8 <HAL_GPIO_Init+0x240>
 800609a:	2303      	movs	r3, #3
 800609c:	e004      	b.n	80060a8 <HAL_GPIO_Init+0x240>
 800609e:	2302      	movs	r3, #2
 80060a0:	e002      	b.n	80060a8 <HAL_GPIO_Init+0x240>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <HAL_GPIO_Init+0x240>
 80060a6:	2300      	movs	r3, #0
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	f002 0203 	and.w	r2, r2, #3
 80060ae:	0092      	lsls	r2, r2, #2
 80060b0:	4093      	lsls	r3, r2
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060b8:	4935      	ldr	r1, [pc, #212]	; (8006190 <HAL_GPIO_Init+0x328>)
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	089b      	lsrs	r3, r3, #2
 80060be:	3302      	adds	r3, #2
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060c6:	4b3d      	ldr	r3, [pc, #244]	; (80061bc <HAL_GPIO_Init+0x354>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	43db      	mvns	r3, r3
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	4013      	ands	r3, r2
 80060d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060ea:	4a34      	ldr	r2, [pc, #208]	; (80061bc <HAL_GPIO_Init+0x354>)
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060f0:	4b32      	ldr	r3, [pc, #200]	; (80061bc <HAL_GPIO_Init+0x354>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	43db      	mvns	r3, r3
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	4013      	ands	r3, r2
 80060fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	4313      	orrs	r3, r2
 8006112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006114:	4a29      	ldr	r2, [pc, #164]	; (80061bc <HAL_GPIO_Init+0x354>)
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800611a:	4b28      	ldr	r3, [pc, #160]	; (80061bc <HAL_GPIO_Init+0x354>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	43db      	mvns	r3, r3
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	4013      	ands	r3, r2
 8006128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800613e:	4a1f      	ldr	r2, [pc, #124]	; (80061bc <HAL_GPIO_Init+0x354>)
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006144:	4b1d      	ldr	r3, [pc, #116]	; (80061bc <HAL_GPIO_Init+0x354>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	43db      	mvns	r3, r3
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	4013      	ands	r3, r2
 8006152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006168:	4a14      	ldr	r2, [pc, #80]	; (80061bc <HAL_GPIO_Init+0x354>)
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	3301      	adds	r3, #1
 8006172:	61fb      	str	r3, [r7, #28]
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	2b0f      	cmp	r3, #15
 8006178:	f67f ae84 	bls.w	8005e84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800617c:	bf00      	nop
 800617e:	bf00      	nop
 8006180:	3724      	adds	r7, #36	; 0x24
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40023800 	.word	0x40023800
 8006190:	40013800 	.word	0x40013800
 8006194:	40020000 	.word	0x40020000
 8006198:	40020400 	.word	0x40020400
 800619c:	40020800 	.word	0x40020800
 80061a0:	40020c00 	.word	0x40020c00
 80061a4:	40021000 	.word	0x40021000
 80061a8:	40021400 	.word	0x40021400
 80061ac:	40021800 	.word	0x40021800
 80061b0:	40021c00 	.word	0x40021c00
 80061b4:	40022000 	.word	0x40022000
 80061b8:	40022400 	.word	0x40022400
 80061bc:	40013c00 	.word	0x40013c00

080061c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691a      	ldr	r2, [r3, #16]
 80061d0:	887b      	ldrh	r3, [r7, #2]
 80061d2:	4013      	ands	r3, r2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061d8:	2301      	movs	r3, #1
 80061da:	73fb      	strb	r3, [r7, #15]
 80061dc:	e001      	b.n	80061e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061de:	2300      	movs	r3, #0
 80061e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	460b      	mov	r3, r1
 80061fa:	807b      	strh	r3, [r7, #2]
 80061fc:	4613      	mov	r3, r2
 80061fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006200:	787b      	ldrb	r3, [r7, #1]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006206:	887a      	ldrh	r2, [r7, #2]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800620c:	e003      	b.n	8006216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800620e:	887b      	ldrh	r3, [r7, #2]
 8006210:	041a      	lsls	r2, r3, #16
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	619a      	str	r2, [r3, #24]
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006222:	b480      	push	{r7}
 8006224:	b085      	sub	sp, #20
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
 800622a:	460b      	mov	r3, r1
 800622c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006234:	887a      	ldrh	r2, [r7, #2]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4013      	ands	r3, r2
 800623a:	041a      	lsls	r2, r3, #16
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	43d9      	mvns	r1, r3
 8006240:	887b      	ldrh	r3, [r7, #2]
 8006242:	400b      	ands	r3, r1
 8006244:	431a      	orrs	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	619a      	str	r2, [r3, #24]
}
 800624a:	bf00      	nop
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
	...

08006258 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e12b      	b.n	80064c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b00      	cmp	r3, #0
 8006274:	d106      	bne.n	8006284 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7fd fc32 	bl	8003ae8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2224      	movs	r2, #36	; 0x24
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 0201 	bic.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80062bc:	f001 fa7a 	bl	80077b4 <HAL_RCC_GetPCLK1Freq>
 80062c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	4a81      	ldr	r2, [pc, #516]	; (80064cc <HAL_I2C_Init+0x274>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d807      	bhi.n	80062dc <HAL_I2C_Init+0x84>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4a80      	ldr	r2, [pc, #512]	; (80064d0 <HAL_I2C_Init+0x278>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	bf94      	ite	ls
 80062d4:	2301      	movls	r3, #1
 80062d6:	2300      	movhi	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	e006      	b.n	80062ea <HAL_I2C_Init+0x92>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4a7d      	ldr	r2, [pc, #500]	; (80064d4 <HAL_I2C_Init+0x27c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	bf94      	ite	ls
 80062e4:	2301      	movls	r3, #1
 80062e6:	2300      	movhi	r3, #0
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e0e7      	b.n	80064c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4a78      	ldr	r2, [pc, #480]	; (80064d8 <HAL_I2C_Init+0x280>)
 80062f6:	fba2 2303 	umull	r2, r3, r2, r3
 80062fa:	0c9b      	lsrs	r3, r3, #18
 80062fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	430a      	orrs	r2, r1
 8006310:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	4a6a      	ldr	r2, [pc, #424]	; (80064cc <HAL_I2C_Init+0x274>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d802      	bhi.n	800632c <HAL_I2C_Init+0xd4>
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	3301      	adds	r3, #1
 800632a:	e009      	b.n	8006340 <HAL_I2C_Init+0xe8>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006332:	fb02 f303 	mul.w	r3, r2, r3
 8006336:	4a69      	ldr	r2, [pc, #420]	; (80064dc <HAL_I2C_Init+0x284>)
 8006338:	fba2 2303 	umull	r2, r3, r2, r3
 800633c:	099b      	lsrs	r3, r3, #6
 800633e:	3301      	adds	r3, #1
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	6812      	ldr	r2, [r2, #0]
 8006344:	430b      	orrs	r3, r1
 8006346:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006352:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	495c      	ldr	r1, [pc, #368]	; (80064cc <HAL_I2C_Init+0x274>)
 800635c:	428b      	cmp	r3, r1
 800635e:	d819      	bhi.n	8006394 <HAL_I2C_Init+0x13c>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	1e59      	subs	r1, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	fbb1 f3f3 	udiv	r3, r1, r3
 800636e:	1c59      	adds	r1, r3, #1
 8006370:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006374:	400b      	ands	r3, r1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <HAL_I2C_Init+0x138>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	1e59      	subs	r1, r3, #1
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	fbb1 f3f3 	udiv	r3, r1, r3
 8006388:	3301      	adds	r3, #1
 800638a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800638e:	e051      	b.n	8006434 <HAL_I2C_Init+0x1dc>
 8006390:	2304      	movs	r3, #4
 8006392:	e04f      	b.n	8006434 <HAL_I2C_Init+0x1dc>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d111      	bne.n	80063c0 <HAL_I2C_Init+0x168>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	1e58      	subs	r0, r3, #1
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6859      	ldr	r1, [r3, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	440b      	add	r3, r1
 80063aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80063ae:	3301      	adds	r3, #1
 80063b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	bf0c      	ite	eq
 80063b8:	2301      	moveq	r3, #1
 80063ba:	2300      	movne	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	e012      	b.n	80063e6 <HAL_I2C_Init+0x18e>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	1e58      	subs	r0, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6859      	ldr	r1, [r3, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	440b      	add	r3, r1
 80063ce:	0099      	lsls	r1, r3, #2
 80063d0:	440b      	add	r3, r1
 80063d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80063d6:	3301      	adds	r3, #1
 80063d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063dc:	2b00      	cmp	r3, #0
 80063de:	bf0c      	ite	eq
 80063e0:	2301      	moveq	r3, #1
 80063e2:	2300      	movne	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <HAL_I2C_Init+0x196>
 80063ea:	2301      	movs	r3, #1
 80063ec:	e022      	b.n	8006434 <HAL_I2C_Init+0x1dc>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10e      	bne.n	8006414 <HAL_I2C_Init+0x1bc>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	1e58      	subs	r0, r3, #1
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6859      	ldr	r1, [r3, #4]
 80063fe:	460b      	mov	r3, r1
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	440b      	add	r3, r1
 8006404:	fbb0 f3f3 	udiv	r3, r0, r3
 8006408:	3301      	adds	r3, #1
 800640a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800640e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006412:	e00f      	b.n	8006434 <HAL_I2C_Init+0x1dc>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	1e58      	subs	r0, r3, #1
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6859      	ldr	r1, [r3, #4]
 800641c:	460b      	mov	r3, r1
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	440b      	add	r3, r1
 8006422:	0099      	lsls	r1, r3, #2
 8006424:	440b      	add	r3, r1
 8006426:	fbb0 f3f3 	udiv	r3, r0, r3
 800642a:	3301      	adds	r3, #1
 800642c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006430:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	6809      	ldr	r1, [r1, #0]
 8006438:	4313      	orrs	r3, r2
 800643a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	69da      	ldr	r2, [r3, #28]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a1b      	ldr	r3, [r3, #32]
 800644e:	431a      	orrs	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006462:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	6911      	ldr	r1, [r2, #16]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	68d2      	ldr	r2, [r2, #12]
 800646e:	4311      	orrs	r1, r2
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6812      	ldr	r2, [r2, #0]
 8006474:	430b      	orrs	r3, r1
 8006476:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695a      	ldr	r2, [r3, #20]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	431a      	orrs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0201 	orr.w	r2, r2, #1
 80064a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	000186a0 	.word	0x000186a0
 80064d0:	001e847f 	.word	0x001e847f
 80064d4:	003d08ff 	.word	0x003d08ff
 80064d8:	431bde83 	.word	0x431bde83
 80064dc:	10624dd3 	.word	0x10624dd3

080064e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	d129      	bne.n	800654a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2224      	movs	r2, #36	; 0x24
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0201 	bic.w	r2, r2, #1
 800650c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0210 	bic.w	r2, r2, #16
 800651c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f042 0201 	orr.w	r2, r2, #1
 800653c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2220      	movs	r2, #32
 8006542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	e000      	b.n	800654c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800654a:	2302      	movs	r3, #2
  }
}
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006562:	2300      	movs	r3, #0
 8006564:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b20      	cmp	r3, #32
 8006570:	d12a      	bne.n	80065c8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2224      	movs	r2, #36	; 0x24
 8006576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 0201 	bic.w	r2, r2, #1
 8006588:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006592:	89fb      	ldrh	r3, [r7, #14]
 8006594:	f023 030f 	bic.w	r3, r3, #15
 8006598:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	b29a      	uxth	r2, r3
 800659e:	89fb      	ldrh	r3, [r7, #14]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	89fa      	ldrh	r2, [r7, #14]
 80065aa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f042 0201 	orr.w	r2, r2, #1
 80065ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2220      	movs	r2, #32
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80065c4:	2300      	movs	r3, #0
 80065c6:	e000      	b.n	80065ca <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80065c8:	2302      	movs	r3, #2
  }
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
	...

080065d8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e0bf      	b.n	800676a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d106      	bne.n	8006604 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7fd faba 	bl	8003b78 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2202      	movs	r2, #2
 8006608:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699a      	ldr	r2, [r3, #24]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800661a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6999      	ldr	r1, [r3, #24]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006630:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6899      	ldr	r1, [r3, #8]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	4b4a      	ldr	r3, [pc, #296]	; (8006774 <HAL_LTDC_Init+0x19c>)
 800664c:	400b      	ands	r3, r1
 800664e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	041b      	lsls	r3, r3, #16
 8006656:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6899      	ldr	r1, [r3, #8]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	699a      	ldr	r2, [r3, #24]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	431a      	orrs	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68d9      	ldr	r1, [r3, #12]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	4b3e      	ldr	r3, [pc, #248]	; (8006774 <HAL_LTDC_Init+0x19c>)
 800667a:	400b      	ands	r3, r1
 800667c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	041b      	lsls	r3, r3, #16
 8006684:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68d9      	ldr	r1, [r3, #12]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a1a      	ldr	r2, [r3, #32]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6919      	ldr	r1, [r3, #16]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	4b33      	ldr	r3, [pc, #204]	; (8006774 <HAL_LTDC_Init+0x19c>)
 80066a8:	400b      	ands	r3, r1
 80066aa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	041b      	lsls	r3, r3, #16
 80066b2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6919      	ldr	r1, [r3, #16]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	431a      	orrs	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6959      	ldr	r1, [r3, #20]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	4b27      	ldr	r3, [pc, #156]	; (8006774 <HAL_LTDC_Init+0x19c>)
 80066d6:	400b      	ands	r3, r1
 80066d8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066de:	041b      	lsls	r3, r3, #16
 80066e0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6959      	ldr	r1, [r3, #20]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066fe:	021b      	lsls	r3, r3, #8
 8006700:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006708:	041b      	lsls	r3, r3, #16
 800670a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800671a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	4313      	orrs	r3, r2
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0206 	orr.w	r2, r2, #6
 8006746:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699a      	ldr	r2, [r3, #24]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0201 	orr.w	r2, r2, #1
 8006756:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	f000f800 	.word	0xf000f800

08006778 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006786:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f003 0304 	and.w	r3, r3, #4
 8006796:	2b00      	cmp	r3, #0
 8006798:	d023      	beq.n	80067e2 <HAL_LTDC_IRQHandler+0x6a>
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	f003 0304 	and.w	r3, r3, #4
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d01e      	beq.n	80067e2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0204 	bic.w	r2, r2, #4
 80067b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2204      	movs	r2, #4
 80067ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80067c2:	f043 0201 	orr.w	r2, r3, #1
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2204      	movs	r2, #4
 80067d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 f86f 	bl	80068c0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d023      	beq.n	8006834 <HAL_LTDC_IRQHandler+0xbc>
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d01e      	beq.n	8006834 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0202 	bic.w	r2, r2, #2
 8006804:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2202      	movs	r2, #2
 800680c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006814:	f043 0202 	orr.w	r2, r3, #2
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2204      	movs	r2, #4
 8006822:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f846 	bl	80068c0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d01b      	beq.n	8006876 <HAL_LTDC_IRQHandler+0xfe>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b00      	cmp	r3, #0
 8006846:	d016      	beq.n	8006876 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0201 	bic.w	r2, r2, #1
 8006856:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2201      	movs	r2, #1
 800685e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f012 fdf1 	bl	8019458 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f003 0308 	and.w	r3, r3, #8
 800687c:	2b00      	cmp	r3, #0
 800687e:	d01b      	beq.n	80068b8 <HAL_LTDC_IRQHandler+0x140>
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f003 0308 	and.w	r3, r3, #8
 8006886:	2b00      	cmp	r3, #0
 8006888:	d016      	beq.n	80068b8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0208 	bic.w	r2, r2, #8
 8006898:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2208      	movs	r2, #8
 80068a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f80e 	bl	80068d4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80068b8:	bf00      	nop
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80068e8:	b5b0      	push	{r4, r5, r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d101      	bne.n	8006902 <HAL_LTDC_ConfigLayer+0x1a>
 80068fe:	2302      	movs	r3, #2
 8006900:	e02c      	b.n	800695c <HAL_LTDC_ConfigLayer+0x74>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2202      	movs	r2, #2
 800690e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2134      	movs	r1, #52	; 0x34
 8006918:	fb01 f303 	mul.w	r3, r1, r3
 800691c:	4413      	add	r3, r2
 800691e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	4614      	mov	r4, r2
 8006926:	461d      	mov	r5, r3
 8006928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800692a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800692c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800692e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006934:	682b      	ldr	r3, [r5, #0]
 8006936:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	68b9      	ldr	r1, [r7, #8]
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 f849 	bl	80069d4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2201      	movs	r2, #1
 8006948:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bdb0      	pop	{r4, r5, r7, pc}

08006964 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_LTDC_ProgramLineEvent+0x18>
 8006978:	2302      	movs	r3, #2
 800697a:	e023      	b.n	80069c4 <HAL_LTDC_ProgramLineEvent+0x60>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0201 	bic.w	r2, r2, #1
 800699a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800699c:	4a0c      	ldr	r2, [pc, #48]	; (80069d0 <HAL_LTDC_ProgramLineEvent+0x6c>)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f042 0201 	orr.w	r2, r2, #1
 80069b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	40016800 	.word	0x40016800

080069d4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b089      	sub	sp, #36	; 0x24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	0c1b      	lsrs	r3, r3, #16
 80069ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069f0:	4413      	add	r3, r2
 80069f2:	041b      	lsls	r3, r3, #16
 80069f4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	01db      	lsls	r3, r3, #7
 8006a00:	4413      	add	r3, r2
 8006a02:	3384      	adds	r3, #132	; 0x84
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	6812      	ldr	r2, [r2, #0]
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	01d2      	lsls	r2, r2, #7
 8006a10:	440a      	add	r2, r1
 8006a12:	3284      	adds	r2, #132	; 0x84
 8006a14:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006a18:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	0c1b      	lsrs	r3, r3, #16
 8006a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a2a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a2c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4619      	mov	r1, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	01db      	lsls	r3, r3, #7
 8006a38:	440b      	add	r3, r1
 8006a3a:	3384      	adds	r3, #132	; 0x84
 8006a3c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a42:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a52:	4413      	add	r3, r2
 8006a54:	041b      	lsls	r3, r3, #16
 8006a56:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	01db      	lsls	r3, r3, #7
 8006a62:	4413      	add	r3, r2
 8006a64:	3384      	adds	r3, #132	; 0x84
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	6812      	ldr	r2, [r2, #0]
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	01d2      	lsls	r2, r2, #7
 8006a72:	440a      	add	r2, r1
 8006a74:	3284      	adds	r2, #132	; 0x84
 8006a76:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006a7a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a8a:	4413      	add	r3, r2
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4619      	mov	r1, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	01db      	lsls	r3, r3, #7
 8006a98:	440b      	add	r3, r1
 8006a9a:	3384      	adds	r3, #132	; 0x84
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	01db      	lsls	r3, r3, #7
 8006aae:	4413      	add	r3, r2
 8006ab0:	3384      	adds	r3, #132	; 0x84
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	6812      	ldr	r2, [r2, #0]
 8006ab8:	4611      	mov	r1, r2
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	01d2      	lsls	r2, r2, #7
 8006abe:	440a      	add	r2, r1
 8006ac0:	3284      	adds	r2, #132	; 0x84
 8006ac2:	f023 0307 	bic.w	r3, r3, #7
 8006ac6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	461a      	mov	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	01db      	lsls	r3, r3, #7
 8006ad2:	4413      	add	r3, r2
 8006ad4:	3384      	adds	r3, #132	; 0x84
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006ae4:	021b      	lsls	r3, r3, #8
 8006ae6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006aee:	041b      	lsls	r3, r3, #16
 8006af0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	061b      	lsls	r3, r3, #24
 8006af8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	01db      	lsls	r3, r3, #7
 8006b04:	4413      	add	r3, r2
 8006b06:	3384      	adds	r3, #132	; 0x84
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	01db      	lsls	r3, r3, #7
 8006b14:	4413      	add	r3, r2
 8006b16:	3384      	adds	r3, #132	; 0x84
 8006b18:	461a      	mov	r2, r3
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b24:	461a      	mov	r2, r3
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	431a      	orrs	r2, r3
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4619      	mov	r1, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	01db      	lsls	r3, r3, #7
 8006b38:	440b      	add	r3, r1
 8006b3a:	3384      	adds	r3, #132	; 0x84
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	01db      	lsls	r3, r3, #7
 8006b4e:	4413      	add	r3, r2
 8006b50:	3384      	adds	r3, #132	; 0x84
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	6812      	ldr	r2, [r2, #0]
 8006b58:	4611      	mov	r1, r2
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	01d2      	lsls	r2, r2, #7
 8006b5e:	440a      	add	r2, r1
 8006b60:	3284      	adds	r2, #132	; 0x84
 8006b62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b66:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	01db      	lsls	r3, r3, #7
 8006b72:	4413      	add	r3, r2
 8006b74:	3384      	adds	r3, #132	; 0x84
 8006b76:	461a      	mov	r2, r3
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	01db      	lsls	r3, r3, #7
 8006b88:	4413      	add	r3, r2
 8006b8a:	3384      	adds	r3, #132	; 0x84
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	6812      	ldr	r2, [r2, #0]
 8006b92:	4611      	mov	r1, r2
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	01d2      	lsls	r2, r2, #7
 8006b98:	440a      	add	r2, r1
 8006b9a:	3284      	adds	r2, #132	; 0x84
 8006b9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006ba0:	f023 0307 	bic.w	r3, r3, #7
 8006ba4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	69da      	ldr	r2, [r3, #28]
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	68f9      	ldr	r1, [r7, #12]
 8006bb0:	6809      	ldr	r1, [r1, #0]
 8006bb2:	4608      	mov	r0, r1
 8006bb4:	6879      	ldr	r1, [r7, #4]
 8006bb6:	01c9      	lsls	r1, r1, #7
 8006bb8:	4401      	add	r1, r0
 8006bba:	3184      	adds	r1, #132	; 0x84
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	01db      	lsls	r3, r3, #7
 8006bca:	4413      	add	r3, r2
 8006bcc:	3384      	adds	r3, #132	; 0x84
 8006bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	01db      	lsls	r3, r3, #7
 8006bda:	4413      	add	r3, r2
 8006bdc:	3384      	adds	r3, #132	; 0x84
 8006bde:	461a      	mov	r2, r3
 8006be0:	2300      	movs	r3, #0
 8006be2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	461a      	mov	r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	01db      	lsls	r3, r3, #7
 8006bee:	4413      	add	r3, r2
 8006bf0:	3384      	adds	r3, #132	; 0x84
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d102      	bne.n	8006c08 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006c02:	2304      	movs	r3, #4
 8006c04:	61fb      	str	r3, [r7, #28]
 8006c06:	e01b      	b.n	8006c40 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d102      	bne.n	8006c16 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006c10:	2303      	movs	r3, #3
 8006c12:	61fb      	str	r3, [r7, #28]
 8006c14:	e014      	b.n	8006c40 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	d00b      	beq.n	8006c36 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d007      	beq.n	8006c36 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c2a:	2b03      	cmp	r3, #3
 8006c2c:	d003      	beq.n	8006c36 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c32:	2b07      	cmp	r3, #7
 8006c34:	d102      	bne.n	8006c3c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006c36:	2302      	movs	r3, #2
 8006c38:	61fb      	str	r3, [r7, #28]
 8006c3a:	e001      	b.n	8006c40 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	461a      	mov	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	01db      	lsls	r3, r3, #7
 8006c4a:	4413      	add	r3, r2
 8006c4c:	3384      	adds	r3, #132	; 0x84
 8006c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	6812      	ldr	r2, [r2, #0]
 8006c54:	4611      	mov	r1, r2
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	01d2      	lsls	r2, r2, #7
 8006c5a:	440a      	add	r2, r1
 8006c5c:	3284      	adds	r2, #132	; 0x84
 8006c5e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006c62:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c68:	69fa      	ldr	r2, [r7, #28]
 8006c6a:	fb02 f303 	mul.w	r3, r2, r3
 8006c6e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	6859      	ldr	r1, [r3, #4]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	1acb      	subs	r3, r1, r3
 8006c7a:	69f9      	ldr	r1, [r7, #28]
 8006c7c:	fb01 f303 	mul.w	r3, r1, r3
 8006c80:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006c82:	68f9      	ldr	r1, [r7, #12]
 8006c84:	6809      	ldr	r1, [r1, #0]
 8006c86:	4608      	mov	r0, r1
 8006c88:	6879      	ldr	r1, [r7, #4]
 8006c8a:	01c9      	lsls	r1, r1, #7
 8006c8c:	4401      	add	r1, r0
 8006c8e:	3184      	adds	r1, #132	; 0x84
 8006c90:	4313      	orrs	r3, r2
 8006c92:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	01db      	lsls	r3, r3, #7
 8006c9e:	4413      	add	r3, r2
 8006ca0:	3384      	adds	r3, #132	; 0x84
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	6812      	ldr	r2, [r2, #0]
 8006ca8:	4611      	mov	r1, r2
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	01d2      	lsls	r2, r2, #7
 8006cae:	440a      	add	r2, r1
 8006cb0:	3284      	adds	r2, #132	; 0x84
 8006cb2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006cb6:	f023 0307 	bic.w	r3, r3, #7
 8006cba:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	01db      	lsls	r3, r3, #7
 8006cc6:	4413      	add	r3, r2
 8006cc8:	3384      	adds	r3, #132	; 0x84
 8006cca:	461a      	mov	r2, r3
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	01db      	lsls	r3, r3, #7
 8006cdc:	4413      	add	r3, r2
 8006cde:	3384      	adds	r3, #132	; 0x84
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	6812      	ldr	r2, [r2, #0]
 8006ce6:	4611      	mov	r1, r2
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	01d2      	lsls	r2, r2, #7
 8006cec:	440a      	add	r2, r1
 8006cee:	3284      	adds	r2, #132	; 0x84
 8006cf0:	f043 0301 	orr.w	r3, r3, #1
 8006cf4:	6013      	str	r3, [r2, #0]
}
 8006cf6:	bf00      	nop
 8006cf8:	3724      	adds	r7, #36	; 0x24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006d02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d04:	b08f      	sub	sp, #60	; 0x3c
 8006d06:	af0a      	add	r7, sp, #40	; 0x28
 8006d08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e10f      	b.n	8006f34 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d106      	bne.n	8006d34 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fd f956 	bl	8003fe0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2203      	movs	r2, #3
 8006d38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d102      	bne.n	8006d4e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f004 fba5 	bl	800b4a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	603b      	str	r3, [r7, #0]
 8006d5e:	687e      	ldr	r6, [r7, #4]
 8006d60:	466d      	mov	r5, sp
 8006d62:	f106 0410 	add.w	r4, r6, #16
 8006d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d72:	e885 0003 	stmia.w	r5, {r0, r1}
 8006d76:	1d33      	adds	r3, r6, #4
 8006d78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d7a:	6838      	ldr	r0, [r7, #0]
 8006d7c:	f004 fb30 	bl	800b3e0 <USB_CoreInit>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d005      	beq.n	8006d92 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2202      	movs	r2, #2
 8006d8a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e0d0      	b.n	8006f34 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2100      	movs	r1, #0
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f004 fb93 	bl	800b4c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d9e:	2300      	movs	r3, #0
 8006da0:	73fb      	strb	r3, [r7, #15]
 8006da2:	e04a      	b.n	8006e3a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006da4:	7bfa      	ldrb	r2, [r7, #15]
 8006da6:	6879      	ldr	r1, [r7, #4]
 8006da8:	4613      	mov	r3, r2
 8006daa:	00db      	lsls	r3, r3, #3
 8006dac:	4413      	add	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	440b      	add	r3, r1
 8006db2:	333d      	adds	r3, #61	; 0x3d
 8006db4:	2201      	movs	r2, #1
 8006db6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006db8:	7bfa      	ldrb	r2, [r7, #15]
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	00db      	lsls	r3, r3, #3
 8006dc0:	4413      	add	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	440b      	add	r3, r1
 8006dc6:	333c      	adds	r3, #60	; 0x3c
 8006dc8:	7bfa      	ldrb	r2, [r7, #15]
 8006dca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006dcc:	7bfa      	ldrb	r2, [r7, #15]
 8006dce:	7bfb      	ldrb	r3, [r7, #15]
 8006dd0:	b298      	uxth	r0, r3
 8006dd2:	6879      	ldr	r1, [r7, #4]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	4413      	add	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	440b      	add	r3, r1
 8006dde:	3344      	adds	r3, #68	; 0x44
 8006de0:	4602      	mov	r2, r0
 8006de2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006de4:	7bfa      	ldrb	r2, [r7, #15]
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	4613      	mov	r3, r2
 8006dea:	00db      	lsls	r3, r3, #3
 8006dec:	4413      	add	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	440b      	add	r3, r1
 8006df2:	3340      	adds	r3, #64	; 0x40
 8006df4:	2200      	movs	r2, #0
 8006df6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006df8:	7bfa      	ldrb	r2, [r7, #15]
 8006dfa:	6879      	ldr	r1, [r7, #4]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	4413      	add	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	440b      	add	r3, r1
 8006e06:	3348      	adds	r3, #72	; 0x48
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006e0c:	7bfa      	ldrb	r2, [r7, #15]
 8006e0e:	6879      	ldr	r1, [r7, #4]
 8006e10:	4613      	mov	r3, r2
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	440b      	add	r3, r1
 8006e1a:	334c      	adds	r3, #76	; 0x4c
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006e20:	7bfa      	ldrb	r2, [r7, #15]
 8006e22:	6879      	ldr	r1, [r7, #4]
 8006e24:	4613      	mov	r3, r2
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	440b      	add	r3, r1
 8006e2e:	3354      	adds	r3, #84	; 0x54
 8006e30:	2200      	movs	r2, #0
 8006e32:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
 8006e36:	3301      	adds	r3, #1
 8006e38:	73fb      	strb	r3, [r7, #15]
 8006e3a:	7bfa      	ldrb	r2, [r7, #15]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d3af      	bcc.n	8006da4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e44:	2300      	movs	r3, #0
 8006e46:	73fb      	strb	r3, [r7, #15]
 8006e48:	e044      	b.n	8006ed4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006e4a:	7bfa      	ldrb	r2, [r7, #15]
 8006e4c:	6879      	ldr	r1, [r7, #4]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	440b      	add	r3, r1
 8006e58:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006e60:	7bfa      	ldrb	r2, [r7, #15]
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	4613      	mov	r3, r2
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	4413      	add	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	440b      	add	r3, r1
 8006e6e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006e72:	7bfa      	ldrb	r2, [r7, #15]
 8006e74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006e76:	7bfa      	ldrb	r2, [r7, #15]
 8006e78:	6879      	ldr	r1, [r7, #4]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	00db      	lsls	r3, r3, #3
 8006e7e:	4413      	add	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	440b      	add	r3, r1
 8006e84:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006e88:	2200      	movs	r2, #0
 8006e8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006e8c:	7bfa      	ldrb	r2, [r7, #15]
 8006e8e:	6879      	ldr	r1, [r7, #4]
 8006e90:	4613      	mov	r3, r2
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	4413      	add	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	440b      	add	r3, r1
 8006e9a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006ea2:	7bfa      	ldrb	r2, [r7, #15]
 8006ea4:	6879      	ldr	r1, [r7, #4]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	00db      	lsls	r3, r3, #3
 8006eaa:	4413      	add	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	440b      	add	r3, r1
 8006eb0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006eb8:	7bfa      	ldrb	r2, [r7, #15]
 8006eba:	6879      	ldr	r1, [r7, #4]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	4413      	add	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	440b      	add	r3, r1
 8006ec6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006eca:	2200      	movs	r2, #0
 8006ecc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	73fb      	strb	r3, [r7, #15]
 8006ed4:	7bfa      	ldrb	r2, [r7, #15]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d3b5      	bcc.n	8006e4a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	603b      	str	r3, [r7, #0]
 8006ee4:	687e      	ldr	r6, [r7, #4]
 8006ee6:	466d      	mov	r5, sp
 8006ee8:	f106 0410 	add.w	r4, r6, #16
 8006eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ef4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ef8:	e885 0003 	stmia.w	r5, {r0, r1}
 8006efc:	1d33      	adds	r3, r6, #4
 8006efe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f00:	6838      	ldr	r0, [r7, #0]
 8006f02:	f004 fb2b 	bl	800b55c <USB_DevInit>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d005      	beq.n	8006f18 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e00d      	b.n	8006f34 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f004 fcf6 	bl	800b91e <USB_DevDisconnect>

  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e267      	b.n	800741e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d075      	beq.n	8007046 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f5a:	4b88      	ldr	r3, [pc, #544]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 030c 	and.w	r3, r3, #12
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d00c      	beq.n	8006f80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f66:	4b85      	ldr	r3, [pc, #532]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f6e:	2b08      	cmp	r3, #8
 8006f70:	d112      	bne.n	8006f98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f72:	4b82      	ldr	r3, [pc, #520]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f7e:	d10b      	bne.n	8006f98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f80:	4b7e      	ldr	r3, [pc, #504]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d05b      	beq.n	8007044 <HAL_RCC_OscConfig+0x108>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d157      	bne.n	8007044 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e242      	b.n	800741e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa0:	d106      	bne.n	8006fb0 <HAL_RCC_OscConfig+0x74>
 8006fa2:	4b76      	ldr	r3, [pc, #472]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a75      	ldr	r2, [pc, #468]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8006fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	e01d      	b.n	8006fec <HAL_RCC_OscConfig+0xb0>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fb8:	d10c      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x98>
 8006fba:	4b70      	ldr	r3, [pc, #448]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a6f      	ldr	r2, [pc, #444]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8006fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	4b6d      	ldr	r3, [pc, #436]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a6c      	ldr	r2, [pc, #432]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8006fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	e00b      	b.n	8006fec <HAL_RCC_OscConfig+0xb0>
 8006fd4:	4b69      	ldr	r3, [pc, #420]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a68      	ldr	r2, [pc, #416]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8006fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fde:	6013      	str	r3, [r2, #0]
 8006fe0:	4b66      	ldr	r3, [pc, #408]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a65      	ldr	r2, [pc, #404]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8006fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d013      	beq.n	800701c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ff4:	f7fd fad4 	bl	80045a0 <HAL_GetTick>
 8006ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ffa:	e008      	b.n	800700e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ffc:	f7fd fad0 	bl	80045a0 <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	2b64      	cmp	r3, #100	; 0x64
 8007008:	d901      	bls.n	800700e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e207      	b.n	800741e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800700e:	4b5b      	ldr	r3, [pc, #364]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0f0      	beq.n	8006ffc <HAL_RCC_OscConfig+0xc0>
 800701a:	e014      	b.n	8007046 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800701c:	f7fd fac0 	bl	80045a0 <HAL_GetTick>
 8007020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007022:	e008      	b.n	8007036 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007024:	f7fd fabc 	bl	80045a0 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b64      	cmp	r3, #100	; 0x64
 8007030:	d901      	bls.n	8007036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e1f3      	b.n	800741e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007036:	4b51      	ldr	r3, [pc, #324]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1f0      	bne.n	8007024 <HAL_RCC_OscConfig+0xe8>
 8007042:	e000      	b.n	8007046 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d063      	beq.n	800711a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007052:	4b4a      	ldr	r3, [pc, #296]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f003 030c 	and.w	r3, r3, #12
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00b      	beq.n	8007076 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800705e:	4b47      	ldr	r3, [pc, #284]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007066:	2b08      	cmp	r3, #8
 8007068:	d11c      	bne.n	80070a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800706a:	4b44      	ldr	r3, [pc, #272]	; (800717c <HAL_RCC_OscConfig+0x240>)
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d116      	bne.n	80070a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007076:	4b41      	ldr	r3, [pc, #260]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <HAL_RCC_OscConfig+0x152>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d001      	beq.n	800708e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e1c7      	b.n	800741e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800708e:	4b3b      	ldr	r3, [pc, #236]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	4937      	ldr	r1, [pc, #220]	; (800717c <HAL_RCC_OscConfig+0x240>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070a2:	e03a      	b.n	800711a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d020      	beq.n	80070ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070ac:	4b34      	ldr	r3, [pc, #208]	; (8007180 <HAL_RCC_OscConfig+0x244>)
 80070ae:	2201      	movs	r2, #1
 80070b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b2:	f7fd fa75 	bl	80045a0 <HAL_GetTick>
 80070b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070b8:	e008      	b.n	80070cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070ba:	f7fd fa71 	bl	80045a0 <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d901      	bls.n	80070cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e1a8      	b.n	800741e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070cc:	4b2b      	ldr	r3, [pc, #172]	; (800717c <HAL_RCC_OscConfig+0x240>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d0f0      	beq.n	80070ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070d8:	4b28      	ldr	r3, [pc, #160]	; (800717c <HAL_RCC_OscConfig+0x240>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	00db      	lsls	r3, r3, #3
 80070e6:	4925      	ldr	r1, [pc, #148]	; (800717c <HAL_RCC_OscConfig+0x240>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	600b      	str	r3, [r1, #0]
 80070ec:	e015      	b.n	800711a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070ee:	4b24      	ldr	r3, [pc, #144]	; (8007180 <HAL_RCC_OscConfig+0x244>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f4:	f7fd fa54 	bl	80045a0 <HAL_GetTick>
 80070f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070fa:	e008      	b.n	800710e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070fc:	f7fd fa50 	bl	80045a0 <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	2b02      	cmp	r3, #2
 8007108:	d901      	bls.n	800710e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e187      	b.n	800741e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800710e:	4b1b      	ldr	r3, [pc, #108]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1f0      	bne.n	80070fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0308 	and.w	r3, r3, #8
 8007122:	2b00      	cmp	r3, #0
 8007124:	d036      	beq.n	8007194 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d016      	beq.n	800715c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800712e:	4b15      	ldr	r3, [pc, #84]	; (8007184 <HAL_RCC_OscConfig+0x248>)
 8007130:	2201      	movs	r2, #1
 8007132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007134:	f7fd fa34 	bl	80045a0 <HAL_GetTick>
 8007138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800713a:	e008      	b.n	800714e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800713c:	f7fd fa30 	bl	80045a0 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b02      	cmp	r3, #2
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e167      	b.n	800741e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800714e:	4b0b      	ldr	r3, [pc, #44]	; (800717c <HAL_RCC_OscConfig+0x240>)
 8007150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d0f0      	beq.n	800713c <HAL_RCC_OscConfig+0x200>
 800715a:	e01b      	b.n	8007194 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800715c:	4b09      	ldr	r3, [pc, #36]	; (8007184 <HAL_RCC_OscConfig+0x248>)
 800715e:	2200      	movs	r2, #0
 8007160:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007162:	f7fd fa1d 	bl	80045a0 <HAL_GetTick>
 8007166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007168:	e00e      	b.n	8007188 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800716a:	f7fd fa19 	bl	80045a0 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	2b02      	cmp	r3, #2
 8007176:	d907      	bls.n	8007188 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007178:	2303      	movs	r3, #3
 800717a:	e150      	b.n	800741e <HAL_RCC_OscConfig+0x4e2>
 800717c:	40023800 	.word	0x40023800
 8007180:	42470000 	.word	0x42470000
 8007184:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007188:	4b88      	ldr	r3, [pc, #544]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 800718a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1ea      	bne.n	800716a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0304 	and.w	r3, r3, #4
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 8097 	beq.w	80072d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071a2:	2300      	movs	r3, #0
 80071a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071a6:	4b81      	ldr	r3, [pc, #516]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10f      	bne.n	80071d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071b2:	2300      	movs	r3, #0
 80071b4:	60bb      	str	r3, [r7, #8]
 80071b6:	4b7d      	ldr	r3, [pc, #500]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	4a7c      	ldr	r2, [pc, #496]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 80071bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c0:	6413      	str	r3, [r2, #64]	; 0x40
 80071c2:	4b7a      	ldr	r3, [pc, #488]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ca:	60bb      	str	r3, [r7, #8]
 80071cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071ce:	2301      	movs	r3, #1
 80071d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071d2:	4b77      	ldr	r3, [pc, #476]	; (80073b0 <HAL_RCC_OscConfig+0x474>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d118      	bne.n	8007210 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071de:	4b74      	ldr	r3, [pc, #464]	; (80073b0 <HAL_RCC_OscConfig+0x474>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a73      	ldr	r2, [pc, #460]	; (80073b0 <HAL_RCC_OscConfig+0x474>)
 80071e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071ea:	f7fd f9d9 	bl	80045a0 <HAL_GetTick>
 80071ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071f0:	e008      	b.n	8007204 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071f2:	f7fd f9d5 	bl	80045a0 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d901      	bls.n	8007204 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e10c      	b.n	800741e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007204:	4b6a      	ldr	r3, [pc, #424]	; (80073b0 <HAL_RCC_OscConfig+0x474>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0f0      	beq.n	80071f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d106      	bne.n	8007226 <HAL_RCC_OscConfig+0x2ea>
 8007218:	4b64      	ldr	r3, [pc, #400]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 800721a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800721c:	4a63      	ldr	r2, [pc, #396]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 800721e:	f043 0301 	orr.w	r3, r3, #1
 8007222:	6713      	str	r3, [r2, #112]	; 0x70
 8007224:	e01c      	b.n	8007260 <HAL_RCC_OscConfig+0x324>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	2b05      	cmp	r3, #5
 800722c:	d10c      	bne.n	8007248 <HAL_RCC_OscConfig+0x30c>
 800722e:	4b5f      	ldr	r3, [pc, #380]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 8007230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007232:	4a5e      	ldr	r2, [pc, #376]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 8007234:	f043 0304 	orr.w	r3, r3, #4
 8007238:	6713      	str	r3, [r2, #112]	; 0x70
 800723a:	4b5c      	ldr	r3, [pc, #368]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 800723c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723e:	4a5b      	ldr	r2, [pc, #364]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 8007240:	f043 0301 	orr.w	r3, r3, #1
 8007244:	6713      	str	r3, [r2, #112]	; 0x70
 8007246:	e00b      	b.n	8007260 <HAL_RCC_OscConfig+0x324>
 8007248:	4b58      	ldr	r3, [pc, #352]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 800724a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724c:	4a57      	ldr	r2, [pc, #348]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 800724e:	f023 0301 	bic.w	r3, r3, #1
 8007252:	6713      	str	r3, [r2, #112]	; 0x70
 8007254:	4b55      	ldr	r3, [pc, #340]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 8007256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007258:	4a54      	ldr	r2, [pc, #336]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 800725a:	f023 0304 	bic.w	r3, r3, #4
 800725e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d015      	beq.n	8007294 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007268:	f7fd f99a 	bl	80045a0 <HAL_GetTick>
 800726c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800726e:	e00a      	b.n	8007286 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007270:	f7fd f996 	bl	80045a0 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	f241 3288 	movw	r2, #5000	; 0x1388
 800727e:	4293      	cmp	r3, r2
 8007280:	d901      	bls.n	8007286 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e0cb      	b.n	800741e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007286:	4b49      	ldr	r3, [pc, #292]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 8007288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728a:	f003 0302 	and.w	r3, r3, #2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d0ee      	beq.n	8007270 <HAL_RCC_OscConfig+0x334>
 8007292:	e014      	b.n	80072be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007294:	f7fd f984 	bl	80045a0 <HAL_GetTick>
 8007298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800729a:	e00a      	b.n	80072b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800729c:	f7fd f980 	bl	80045a0 <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d901      	bls.n	80072b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e0b5      	b.n	800741e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072b2:	4b3e      	ldr	r3, [pc, #248]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 80072b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1ee      	bne.n	800729c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072be:	7dfb      	ldrb	r3, [r7, #23]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d105      	bne.n	80072d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072c4:	4b39      	ldr	r3, [pc, #228]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 80072c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c8:	4a38      	ldr	r2, [pc, #224]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 80072ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 80a1 	beq.w	800741c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072da:	4b34      	ldr	r3, [pc, #208]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	f003 030c 	and.w	r3, r3, #12
 80072e2:	2b08      	cmp	r3, #8
 80072e4:	d05c      	beq.n	80073a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d141      	bne.n	8007372 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072ee:	4b31      	ldr	r3, [pc, #196]	; (80073b4 <HAL_RCC_OscConfig+0x478>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072f4:	f7fd f954 	bl	80045a0 <HAL_GetTick>
 80072f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072fa:	e008      	b.n	800730e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072fc:	f7fd f950 	bl	80045a0 <HAL_GetTick>
 8007300:	4602      	mov	r2, r0
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	2b02      	cmp	r3, #2
 8007308:	d901      	bls.n	800730e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e087      	b.n	800741e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800730e:	4b27      	ldr	r3, [pc, #156]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1f0      	bne.n	80072fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	69da      	ldr	r2, [r3, #28]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	431a      	orrs	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	019b      	lsls	r3, r3, #6
 800732a:	431a      	orrs	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007330:	085b      	lsrs	r3, r3, #1
 8007332:	3b01      	subs	r3, #1
 8007334:	041b      	lsls	r3, r3, #16
 8007336:	431a      	orrs	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733c:	061b      	lsls	r3, r3, #24
 800733e:	491b      	ldr	r1, [pc, #108]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 8007340:	4313      	orrs	r3, r2
 8007342:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007344:	4b1b      	ldr	r3, [pc, #108]	; (80073b4 <HAL_RCC_OscConfig+0x478>)
 8007346:	2201      	movs	r2, #1
 8007348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800734a:	f7fd f929 	bl	80045a0 <HAL_GetTick>
 800734e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007350:	e008      	b.n	8007364 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007352:	f7fd f925 	bl	80045a0 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	2b02      	cmp	r3, #2
 800735e:	d901      	bls.n	8007364 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e05c      	b.n	800741e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007364:	4b11      	ldr	r3, [pc, #68]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d0f0      	beq.n	8007352 <HAL_RCC_OscConfig+0x416>
 8007370:	e054      	b.n	800741c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007372:	4b10      	ldr	r3, [pc, #64]	; (80073b4 <HAL_RCC_OscConfig+0x478>)
 8007374:	2200      	movs	r2, #0
 8007376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007378:	f7fd f912 	bl	80045a0 <HAL_GetTick>
 800737c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800737e:	e008      	b.n	8007392 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007380:	f7fd f90e 	bl	80045a0 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	2b02      	cmp	r3, #2
 800738c:	d901      	bls.n	8007392 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e045      	b.n	800741e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007392:	4b06      	ldr	r3, [pc, #24]	; (80073ac <HAL_RCC_OscConfig+0x470>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1f0      	bne.n	8007380 <HAL_RCC_OscConfig+0x444>
 800739e:	e03d      	b.n	800741c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d107      	bne.n	80073b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e038      	b.n	800741e <HAL_RCC_OscConfig+0x4e2>
 80073ac:	40023800 	.word	0x40023800
 80073b0:	40007000 	.word	0x40007000
 80073b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073b8:	4b1b      	ldr	r3, [pc, #108]	; (8007428 <HAL_RCC_OscConfig+0x4ec>)
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d028      	beq.n	8007418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d121      	bne.n	8007418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073de:	429a      	cmp	r2, r3
 80073e0:	d11a      	bne.n	8007418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80073e8:	4013      	ands	r3, r2
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d111      	bne.n	8007418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fe:	085b      	lsrs	r3, r3, #1
 8007400:	3b01      	subs	r3, #1
 8007402:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007404:	429a      	cmp	r2, r3
 8007406:	d107      	bne.n	8007418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007412:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007414:	429a      	cmp	r2, r3
 8007416:	d001      	beq.n	800741c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e000      	b.n	800741e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3718      	adds	r7, #24
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	40023800 	.word	0x40023800

0800742c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d101      	bne.n	8007440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e0cc      	b.n	80075da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007440:	4b68      	ldr	r3, [pc, #416]	; (80075e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 030f 	and.w	r3, r3, #15
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	429a      	cmp	r2, r3
 800744c:	d90c      	bls.n	8007468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800744e:	4b65      	ldr	r3, [pc, #404]	; (80075e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007450:	683a      	ldr	r2, [r7, #0]
 8007452:	b2d2      	uxtb	r2, r2
 8007454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007456:	4b63      	ldr	r3, [pc, #396]	; (80075e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	429a      	cmp	r2, r3
 8007462:	d001      	beq.n	8007468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e0b8      	b.n	80075da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d020      	beq.n	80074b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0304 	and.w	r3, r3, #4
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007480:	4b59      	ldr	r3, [pc, #356]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	4a58      	ldr	r2, [pc, #352]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800748a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0308 	and.w	r3, r3, #8
 8007494:	2b00      	cmp	r3, #0
 8007496:	d005      	beq.n	80074a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007498:	4b53      	ldr	r3, [pc, #332]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	4a52      	ldr	r2, [pc, #328]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 800749e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80074a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074a4:	4b50      	ldr	r3, [pc, #320]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	494d      	ldr	r1, [pc, #308]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d044      	beq.n	800754c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d107      	bne.n	80074da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ca:	4b47      	ldr	r3, [pc, #284]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d119      	bne.n	800750a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e07f      	b.n	80075da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d003      	beq.n	80074ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074e6:	2b03      	cmp	r3, #3
 80074e8:	d107      	bne.n	80074fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074ea:	4b3f      	ldr	r3, [pc, #252]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d109      	bne.n	800750a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e06f      	b.n	80075da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074fa:	4b3b      	ldr	r3, [pc, #236]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d101      	bne.n	800750a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e067      	b.n	80075da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800750a:	4b37      	ldr	r3, [pc, #220]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f023 0203 	bic.w	r2, r3, #3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	4934      	ldr	r1, [pc, #208]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007518:	4313      	orrs	r3, r2
 800751a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800751c:	f7fd f840 	bl	80045a0 <HAL_GetTick>
 8007520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007522:	e00a      	b.n	800753a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007524:	f7fd f83c 	bl	80045a0 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007532:	4293      	cmp	r3, r2
 8007534:	d901      	bls.n	800753a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007536:	2303      	movs	r3, #3
 8007538:	e04f      	b.n	80075da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800753a:	4b2b      	ldr	r3, [pc, #172]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 020c 	and.w	r2, r3, #12
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	429a      	cmp	r2, r3
 800754a:	d1eb      	bne.n	8007524 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800754c:	4b25      	ldr	r3, [pc, #148]	; (80075e4 <HAL_RCC_ClockConfig+0x1b8>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 030f 	and.w	r3, r3, #15
 8007554:	683a      	ldr	r2, [r7, #0]
 8007556:	429a      	cmp	r2, r3
 8007558:	d20c      	bcs.n	8007574 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800755a:	4b22      	ldr	r3, [pc, #136]	; (80075e4 <HAL_RCC_ClockConfig+0x1b8>)
 800755c:	683a      	ldr	r2, [r7, #0]
 800755e:	b2d2      	uxtb	r2, r2
 8007560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007562:	4b20      	ldr	r3, [pc, #128]	; (80075e4 <HAL_RCC_ClockConfig+0x1b8>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 030f 	and.w	r3, r3, #15
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	429a      	cmp	r2, r3
 800756e:	d001      	beq.n	8007574 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e032      	b.n	80075da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b00      	cmp	r3, #0
 800757e:	d008      	beq.n	8007592 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007580:	4b19      	ldr	r3, [pc, #100]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	4916      	ldr	r1, [pc, #88]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 800758e:	4313      	orrs	r3, r2
 8007590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0308 	and.w	r3, r3, #8
 800759a:	2b00      	cmp	r3, #0
 800759c:	d009      	beq.n	80075b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800759e:	4b12      	ldr	r3, [pc, #72]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	00db      	lsls	r3, r3, #3
 80075ac:	490e      	ldr	r1, [pc, #56]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80075b2:	f000 f82d 	bl	8007610 <HAL_RCC_GetSysClockFreq>
 80075b6:	4602      	mov	r2, r0
 80075b8:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <HAL_RCC_ClockConfig+0x1bc>)
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	091b      	lsrs	r3, r3, #4
 80075be:	f003 030f 	and.w	r3, r3, #15
 80075c2:	490a      	ldr	r1, [pc, #40]	; (80075ec <HAL_RCC_ClockConfig+0x1c0>)
 80075c4:	5ccb      	ldrb	r3, [r1, r3]
 80075c6:	fa22 f303 	lsr.w	r3, r2, r3
 80075ca:	4a09      	ldr	r2, [pc, #36]	; (80075f0 <HAL_RCC_ClockConfig+0x1c4>)
 80075cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80075ce:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <HAL_RCC_ClockConfig+0x1c8>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fc fdf4 	bl	80041c0 <HAL_InitTick>

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	40023c00 	.word	0x40023c00
 80075e8:	40023800 	.word	0x40023800
 80075ec:	0802fab4 	.word	0x0802fab4
 80075f0:	20000008 	.word	0x20000008
 80075f4:	2000000c 	.word	0x2000000c

080075f8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80075f8:	b480      	push	{r7}
 80075fa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80075fc:	4b03      	ldr	r3, [pc, #12]	; (800760c <HAL_RCC_EnableCSS+0x14>)
 80075fe:	2201      	movs	r2, #1
 8007600:	601a      	str	r2, [r3, #0]
}
 8007602:	bf00      	nop
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	4247004c 	.word	0x4247004c

08007610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007614:	b090      	sub	sp, #64	; 0x40
 8007616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007618:	2300      	movs	r3, #0
 800761a:	637b      	str	r3, [r7, #52]	; 0x34
 800761c:	2300      	movs	r3, #0
 800761e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007620:	2300      	movs	r3, #0
 8007622:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007624:	2300      	movs	r3, #0
 8007626:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007628:	4b59      	ldr	r3, [pc, #356]	; (8007790 <HAL_RCC_GetSysClockFreq+0x180>)
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f003 030c 	and.w	r3, r3, #12
 8007630:	2b08      	cmp	r3, #8
 8007632:	d00d      	beq.n	8007650 <HAL_RCC_GetSysClockFreq+0x40>
 8007634:	2b08      	cmp	r3, #8
 8007636:	f200 80a1 	bhi.w	800777c <HAL_RCC_GetSysClockFreq+0x16c>
 800763a:	2b00      	cmp	r3, #0
 800763c:	d002      	beq.n	8007644 <HAL_RCC_GetSysClockFreq+0x34>
 800763e:	2b04      	cmp	r3, #4
 8007640:	d003      	beq.n	800764a <HAL_RCC_GetSysClockFreq+0x3a>
 8007642:	e09b      	b.n	800777c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007644:	4b53      	ldr	r3, [pc, #332]	; (8007794 <HAL_RCC_GetSysClockFreq+0x184>)
 8007646:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007648:	e09b      	b.n	8007782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800764a:	4b53      	ldr	r3, [pc, #332]	; (8007798 <HAL_RCC_GetSysClockFreq+0x188>)
 800764c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800764e:	e098      	b.n	8007782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007650:	4b4f      	ldr	r3, [pc, #316]	; (8007790 <HAL_RCC_GetSysClockFreq+0x180>)
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007658:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800765a:	4b4d      	ldr	r3, [pc, #308]	; (8007790 <HAL_RCC_GetSysClockFreq+0x180>)
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d028      	beq.n	80076b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007666:	4b4a      	ldr	r3, [pc, #296]	; (8007790 <HAL_RCC_GetSysClockFreq+0x180>)
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	099b      	lsrs	r3, r3, #6
 800766c:	2200      	movs	r2, #0
 800766e:	623b      	str	r3, [r7, #32]
 8007670:	627a      	str	r2, [r7, #36]	; 0x24
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007678:	2100      	movs	r1, #0
 800767a:	4b47      	ldr	r3, [pc, #284]	; (8007798 <HAL_RCC_GetSysClockFreq+0x188>)
 800767c:	fb03 f201 	mul.w	r2, r3, r1
 8007680:	2300      	movs	r3, #0
 8007682:	fb00 f303 	mul.w	r3, r0, r3
 8007686:	4413      	add	r3, r2
 8007688:	4a43      	ldr	r2, [pc, #268]	; (8007798 <HAL_RCC_GetSysClockFreq+0x188>)
 800768a:	fba0 1202 	umull	r1, r2, r0, r2
 800768e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007690:	460a      	mov	r2, r1
 8007692:	62ba      	str	r2, [r7, #40]	; 0x28
 8007694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007696:	4413      	add	r3, r2
 8007698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800769a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800769c:	2200      	movs	r2, #0
 800769e:	61bb      	str	r3, [r7, #24]
 80076a0:	61fa      	str	r2, [r7, #28]
 80076a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80076aa:	f7f9 fa2f 	bl	8000b0c <__aeabi_uldivmod>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	4613      	mov	r3, r2
 80076b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076b6:	e053      	b.n	8007760 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076b8:	4b35      	ldr	r3, [pc, #212]	; (8007790 <HAL_RCC_GetSysClockFreq+0x180>)
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	099b      	lsrs	r3, r3, #6
 80076be:	2200      	movs	r2, #0
 80076c0:	613b      	str	r3, [r7, #16]
 80076c2:	617a      	str	r2, [r7, #20]
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80076ca:	f04f 0b00 	mov.w	fp, #0
 80076ce:	4652      	mov	r2, sl
 80076d0:	465b      	mov	r3, fp
 80076d2:	f04f 0000 	mov.w	r0, #0
 80076d6:	f04f 0100 	mov.w	r1, #0
 80076da:	0159      	lsls	r1, r3, #5
 80076dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076e0:	0150      	lsls	r0, r2, #5
 80076e2:	4602      	mov	r2, r0
 80076e4:	460b      	mov	r3, r1
 80076e6:	ebb2 080a 	subs.w	r8, r2, sl
 80076ea:	eb63 090b 	sbc.w	r9, r3, fp
 80076ee:	f04f 0200 	mov.w	r2, #0
 80076f2:	f04f 0300 	mov.w	r3, #0
 80076f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80076fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80076fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007702:	ebb2 0408 	subs.w	r4, r2, r8
 8007706:	eb63 0509 	sbc.w	r5, r3, r9
 800770a:	f04f 0200 	mov.w	r2, #0
 800770e:	f04f 0300 	mov.w	r3, #0
 8007712:	00eb      	lsls	r3, r5, #3
 8007714:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007718:	00e2      	lsls	r2, r4, #3
 800771a:	4614      	mov	r4, r2
 800771c:	461d      	mov	r5, r3
 800771e:	eb14 030a 	adds.w	r3, r4, sl
 8007722:	603b      	str	r3, [r7, #0]
 8007724:	eb45 030b 	adc.w	r3, r5, fp
 8007728:	607b      	str	r3, [r7, #4]
 800772a:	f04f 0200 	mov.w	r2, #0
 800772e:	f04f 0300 	mov.w	r3, #0
 8007732:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007736:	4629      	mov	r1, r5
 8007738:	028b      	lsls	r3, r1, #10
 800773a:	4621      	mov	r1, r4
 800773c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007740:	4621      	mov	r1, r4
 8007742:	028a      	lsls	r2, r1, #10
 8007744:	4610      	mov	r0, r2
 8007746:	4619      	mov	r1, r3
 8007748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800774a:	2200      	movs	r2, #0
 800774c:	60bb      	str	r3, [r7, #8]
 800774e:	60fa      	str	r2, [r7, #12]
 8007750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007754:	f7f9 f9da 	bl	8000b0c <__aeabi_uldivmod>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	4613      	mov	r3, r2
 800775e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007760:	4b0b      	ldr	r3, [pc, #44]	; (8007790 <HAL_RCC_GetSysClockFreq+0x180>)
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	0c1b      	lsrs	r3, r3, #16
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	3301      	adds	r3, #1
 800776c:	005b      	lsls	r3, r3, #1
 800776e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007770:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007774:	fbb2 f3f3 	udiv	r3, r2, r3
 8007778:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800777a:	e002      	b.n	8007782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800777c:	4b05      	ldr	r3, [pc, #20]	; (8007794 <HAL_RCC_GetSysClockFreq+0x184>)
 800777e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007784:	4618      	mov	r0, r3
 8007786:	3740      	adds	r7, #64	; 0x40
 8007788:	46bd      	mov	sp, r7
 800778a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800778e:	bf00      	nop
 8007790:	40023800 	.word	0x40023800
 8007794:	00f42400 	.word	0x00f42400
 8007798:	00b71b00 	.word	0x00b71b00

0800779c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800779c:	b480      	push	{r7}
 800779e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077a0:	4b03      	ldr	r3, [pc, #12]	; (80077b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80077a2:	681b      	ldr	r3, [r3, #0]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	20000008 	.word	0x20000008

080077b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80077b8:	f7ff fff0 	bl	800779c <HAL_RCC_GetHCLKFreq>
 80077bc:	4602      	mov	r2, r0
 80077be:	4b05      	ldr	r3, [pc, #20]	; (80077d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	0a9b      	lsrs	r3, r3, #10
 80077c4:	f003 0307 	and.w	r3, r3, #7
 80077c8:	4903      	ldr	r1, [pc, #12]	; (80077d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077ca:	5ccb      	ldrb	r3, [r1, r3]
 80077cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	40023800 	.word	0x40023800
 80077d8:	0802fac4 	.word	0x0802fac4

080077dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80077e0:	f7ff ffdc 	bl	800779c <HAL_RCC_GetHCLKFreq>
 80077e4:	4602      	mov	r2, r0
 80077e6:	4b05      	ldr	r3, [pc, #20]	; (80077fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	0b5b      	lsrs	r3, r3, #13
 80077ec:	f003 0307 	and.w	r3, r3, #7
 80077f0:	4903      	ldr	r1, [pc, #12]	; (8007800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80077f2:	5ccb      	ldrb	r3, [r1, r3]
 80077f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	40023800 	.word	0x40023800
 8007800:	0802fac4 	.word	0x0802fac4

08007804 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	220f      	movs	r2, #15
 8007812:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007814:	4b12      	ldr	r3, [pc, #72]	; (8007860 <HAL_RCC_GetClockConfig+0x5c>)
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f003 0203 	and.w	r2, r3, #3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007820:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <HAL_RCC_GetClockConfig+0x5c>)
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800782c:	4b0c      	ldr	r3, [pc, #48]	; (8007860 <HAL_RCC_GetClockConfig+0x5c>)
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007838:	4b09      	ldr	r3, [pc, #36]	; (8007860 <HAL_RCC_GetClockConfig+0x5c>)
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	08db      	lsrs	r3, r3, #3
 800783e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007846:	4b07      	ldr	r3, [pc, #28]	; (8007864 <HAL_RCC_GetClockConfig+0x60>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 020f 	and.w	r2, r3, #15
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	601a      	str	r2, [r3, #0]
}
 8007852:	bf00      	nop
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	40023800 	.word	0x40023800
 8007864:	40023c00 	.word	0x40023c00

08007868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007870:	2300      	movs	r3, #0
 8007872:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007874:	2300      	movs	r3, #0
 8007876:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10b      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800788c:	2b00      	cmp	r3, #0
 800788e:	d105      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007898:	2b00      	cmp	r3, #0
 800789a:	d075      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800789c:	4b91      	ldr	r3, [pc, #580]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800789e:	2200      	movs	r2, #0
 80078a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80078a2:	f7fc fe7d 	bl	80045a0 <HAL_GetTick>
 80078a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078a8:	e008      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80078aa:	f7fc fe79 	bl	80045a0 <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d901      	bls.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e189      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078bc:	4b8a      	ldr	r3, [pc, #552]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1f0      	bne.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0301 	and.w	r3, r3, #1
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d009      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	019a      	lsls	r2, r3, #6
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	071b      	lsls	r3, r3, #28
 80078e0:	4981      	ldr	r1, [pc, #516]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0302 	and.w	r3, r3, #2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d01f      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80078f4:	4b7c      	ldr	r3, [pc, #496]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078fa:	0f1b      	lsrs	r3, r3, #28
 80078fc:	f003 0307 	and.w	r3, r3, #7
 8007900:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	019a      	lsls	r2, r3, #6
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	061b      	lsls	r3, r3, #24
 800790e:	431a      	orrs	r2, r3
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	071b      	lsls	r3, r3, #28
 8007914:	4974      	ldr	r1, [pc, #464]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007916:	4313      	orrs	r3, r2
 8007918:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800791c:	4b72      	ldr	r3, [pc, #456]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800791e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007922:	f023 021f 	bic.w	r2, r3, #31
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	3b01      	subs	r3, #1
 800792c:	496e      	ldr	r1, [pc, #440]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800792e:	4313      	orrs	r3, r2
 8007930:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00d      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	019a      	lsls	r2, r3, #6
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	061b      	lsls	r3, r3, #24
 800794c:	431a      	orrs	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	071b      	lsls	r3, r3, #28
 8007954:	4964      	ldr	r1, [pc, #400]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007956:	4313      	orrs	r3, r2
 8007958:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800795c:	4b61      	ldr	r3, [pc, #388]	; (8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800795e:	2201      	movs	r2, #1
 8007960:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007962:	f7fc fe1d 	bl	80045a0 <HAL_GetTick>
 8007966:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007968:	e008      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800796a:	f7fc fe19 	bl	80045a0 <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	2b02      	cmp	r3, #2
 8007976:	d901      	bls.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e129      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800797c:	4b5a      	ldr	r3, [pc, #360]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d0f0      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	2b00      	cmp	r3, #0
 8007992:	d105      	bne.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800799c:	2b00      	cmp	r3, #0
 800799e:	d079      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80079a0:	4b52      	ldr	r3, [pc, #328]	; (8007aec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80079a6:	f7fc fdfb 	bl	80045a0 <HAL_GetTick>
 80079aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079ac:	e008      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80079ae:	f7fc fdf7 	bl	80045a0 <HAL_GetTick>
 80079b2:	4602      	mov	r2, r0
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d901      	bls.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e107      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079c0:	4b49      	ldr	r3, [pc, #292]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079cc:	d0ef      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0304 	and.w	r3, r3, #4
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d020      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80079da:	4b43      	ldr	r3, [pc, #268]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80079dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e0:	0f1b      	lsrs	r3, r3, #28
 80079e2:	f003 0307 	and.w	r3, r3, #7
 80079e6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	019a      	lsls	r2, r3, #6
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	061b      	lsls	r3, r3, #24
 80079f4:	431a      	orrs	r2, r3
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	071b      	lsls	r3, r3, #28
 80079fa:	493b      	ldr	r1, [pc, #236]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007a02:	4b39      	ldr	r3, [pc, #228]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a08:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a1b      	ldr	r3, [r3, #32]
 8007a10:	3b01      	subs	r3, #1
 8007a12:	021b      	lsls	r3, r3, #8
 8007a14:	4934      	ldr	r1, [pc, #208]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0308 	and.w	r3, r3, #8
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d01e      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a28:	4b2f      	ldr	r3, [pc, #188]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a2e:	0e1b      	lsrs	r3, r3, #24
 8007a30:	f003 030f 	and.w	r3, r3, #15
 8007a34:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	019a      	lsls	r2, r3, #6
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	061b      	lsls	r3, r3, #24
 8007a40:	431a      	orrs	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	071b      	lsls	r3, r3, #28
 8007a48:	4927      	ldr	r1, [pc, #156]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007a50:	4b25      	ldr	r3, [pc, #148]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5e:	4922      	ldr	r1, [pc, #136]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007a66:	4b21      	ldr	r3, [pc, #132]	; (8007aec <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007a68:	2201      	movs	r2, #1
 8007a6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a6c:	f7fc fd98 	bl	80045a0 <HAL_GetTick>
 8007a70:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a72:	e008      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007a74:	f7fc fd94 	bl	80045a0 <HAL_GetTick>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d901      	bls.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e0a4      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a86:	4b18      	ldr	r3, [pc, #96]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a92:	d1ef      	bne.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 0320 	and.w	r3, r3, #32
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 808b 	beq.w	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	60fb      	str	r3, [r7, #12]
 8007aa6:	4b10      	ldr	r3, [pc, #64]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aaa:	4a0f      	ldr	r2, [pc, #60]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8007ab2:	4b0d      	ldr	r3, [pc, #52]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aba:	60fb      	str	r3, [r7, #12]
 8007abc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007abe:	4b0c      	ldr	r3, [pc, #48]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a0b      	ldr	r2, [pc, #44]	; (8007af0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ac8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007aca:	f7fc fd69 	bl	80045a0 <HAL_GetTick>
 8007ace:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007ad0:	e010      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007ad2:	f7fc fd65 	bl	80045a0 <HAL_GetTick>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d909      	bls.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e075      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007ae4:	42470068 	.word	0x42470068
 8007ae8:	40023800 	.word	0x40023800
 8007aec:	42470070 	.word	0x42470070
 8007af0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007af4:	4b38      	ldr	r3, [pc, #224]	; (8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d0e8      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b00:	4b36      	ldr	r3, [pc, #216]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b08:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d02f      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d028      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b1e:	4b2f      	ldr	r3, [pc, #188]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b26:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b28:	4b2d      	ldr	r3, [pc, #180]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b2e:	4b2c      	ldr	r3, [pc, #176]	; (8007be0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007b34:	4a29      	ldr	r2, [pc, #164]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b3a:	4b28      	ldr	r3, [pc, #160]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d114      	bne.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007b46:	f7fc fd2b 	bl	80045a0 <HAL_GetTick>
 8007b4a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b4c:	e00a      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b4e:	f7fc fd27 	bl	80045a0 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d901      	bls.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e035      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b64:	4b1d      	ldr	r3, [pc, #116]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b68:	f003 0302 	and.w	r3, r3, #2
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0ee      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b7c:	d10d      	bne.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007b7e:	4b17      	ldr	r3, [pc, #92]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b92:	4912      	ldr	r1, [pc, #72]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	608b      	str	r3, [r1, #8]
 8007b98:	e005      	b.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007b9a:	4b10      	ldr	r3, [pc, #64]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	4a0f      	ldr	r2, [pc, #60]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007ba0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007ba4:	6093      	str	r3, [r2, #8]
 8007ba6:	4b0d      	ldr	r3, [pc, #52]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007ba8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bb2:	490a      	ldr	r1, [pc, #40]	; (8007bdc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0310 	and.w	r3, r3, #16
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d004      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007bca:	4b06      	ldr	r3, [pc, #24]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007bcc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3718      	adds	r7, #24
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	40007000 	.word	0x40007000
 8007bdc:	40023800 	.word	0x40023800
 8007be0:	42470e40 	.word	0x42470e40
 8007be4:	424711e0 	.word	0x424711e0

08007be8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e022      	b.n	8007c40 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d105      	bne.n	8007c12 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7fc f8a1 	bl	8003d54 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2203      	movs	r2, #3
 8007c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f814 	bl	8007c48 <HAL_SD_InitCard>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d001      	beq.n	8007c2a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e00a      	b.n	8007c40 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007c48:	b5b0      	push	{r4, r5, r7, lr}
 8007c4a:	b08e      	sub	sp, #56	; 0x38
 8007c4c:	af04      	add	r7, sp, #16
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007c50:	2300      	movs	r3, #0
 8007c52:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007c54:	2300      	movs	r3, #0
 8007c56:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007c60:	2300      	movs	r3, #0
 8007c62:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007c64:	2376      	movs	r3, #118	; 0x76
 8007c66:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681d      	ldr	r5, [r3, #0]
 8007c6c:	466c      	mov	r4, sp
 8007c6e:	f107 0314 	add.w	r3, r7, #20
 8007c72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007c76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007c7a:	f107 0308 	add.w	r3, r7, #8
 8007c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007c80:	4628      	mov	r0, r5
 8007c82:	f002 fe4a 	bl	800a91a <SDIO_Init>
 8007c86:	4603      	mov	r3, r0
 8007c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e04f      	b.n	8007d38 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007c98:	4b29      	ldr	r3, [pc, #164]	; (8007d40 <HAL_SD_InitCard+0xf8>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f002 fe71 	bl	800a98a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007ca8:	4b25      	ldr	r3, [pc, #148]	; (8007d40 <HAL_SD_InitCard+0xf8>)
 8007caa:	2201      	movs	r2, #1
 8007cac:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007cae:	2002      	movs	r0, #2
 8007cb0:	f7fc fc82 	bl	80045b8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fe11 	bl	80088dc <SD_PowerON>
 8007cba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00b      	beq.n	8007cda <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e02e      	b.n	8007d38 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fd30 	bl	8008740 <SD_InitCard>
 8007ce0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00b      	beq.n	8007d00 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e01b      	b.n	8007d38 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f002 fed0 	bl	800aaae <SDMMC_CmdBlockLength>
 8007d0e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00f      	beq.n	8007d36 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a0a      	ldr	r2, [pc, #40]	; (8007d44 <HAL_SD_InitCard+0xfc>)
 8007d1c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d22:	6a3b      	ldr	r3, [r7, #32]
 8007d24:	431a      	orrs	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e000      	b.n	8007d38 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007d36:	2300      	movs	r3, #0
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3728      	adds	r7, #40	; 0x28
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8007d40:	422580a0 	.word	0x422580a0
 8007d44:	004005ff 	.word	0x004005ff

08007d48 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b08c      	sub	sp, #48	; 0x30
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d107      	bne.n	8007d70 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e0c0      	b.n	8007ef2 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	f040 80b9 	bne.w	8007ef0 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	441a      	add	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d907      	bls.n	8007da2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d96:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e0a7      	b.n	8007ef2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2203      	movs	r2, #3
 8007da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2200      	movs	r2, #0
 8007db0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	6812      	ldr	r2, [r2, #0]
 8007dbc:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8007dc0:	f043 0302 	orr.w	r3, r3, #2
 8007dc4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dca:	4a4c      	ldr	r2, [pc, #304]	; (8007efc <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007dcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd2:	4a4b      	ldr	r2, [pc, #300]	; (8007f00 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007dd4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dda:	2200      	movs	r2, #0
 8007ddc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de2:	2200      	movs	r2, #0
 8007de4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	689a      	ldr	r2, [r3, #8]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3380      	adds	r3, #128	; 0x80
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	025b      	lsls	r3, r3, #9
 8007e14:	089b      	lsrs	r3, r3, #2
 8007e16:	f7fd fda9 	bl	800596c <HAL_DMA_Start_IT>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d017      	beq.n	8007e50 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007e2e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a33      	ldr	r2, [pc, #204]	; (8007f04 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007e36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e050      	b.n	8007ef2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007e50:	4b2d      	ldr	r3, [pc, #180]	; (8007f08 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8007e52:	2201      	movs	r2, #1
 8007e54:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d002      	beq.n	8007e64 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	025b      	lsls	r3, r3, #9
 8007e62:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e64:	f04f 33ff 	mov.w	r3, #4294967295
 8007e68:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	025b      	lsls	r3, r3, #9
 8007e6e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007e70:	2390      	movs	r3, #144	; 0x90
 8007e72:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007e74:	2302      	movs	r3, #2
 8007e76:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f107 0210 	add.w	r2, r7, #16
 8007e88:	4611      	mov	r1, r2
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f002 fde3 	bl	800aa56 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d90a      	bls.n	8007eac <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2282      	movs	r2, #130	; 0x82
 8007e9a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f002 fe47 	bl	800ab36 <SDMMC_CmdReadMultiBlock>
 8007ea8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007eaa:	e009      	b.n	8007ec0 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2281      	movs	r2, #129	; 0x81
 8007eb0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f002 fe1a 	bl	800aaf2 <SDMMC_CmdReadSingleBlock>
 8007ebe:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8007ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d012      	beq.n	8007eec <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a0e      	ldr	r2, [pc, #56]	; (8007f04 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007ecc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e002      	b.n	8007ef2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	e000      	b.n	8007ef2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8007ef0:	2302      	movs	r3, #2
  }
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3730      	adds	r7, #48	; 0x30
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	0800862b 	.word	0x0800862b
 8007f00:	0800869d 	.word	0x0800869d
 8007f04:	004005ff 	.word	0x004005ff
 8007f08:	4225858c 	.word	0x4225858c

08007f0c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08c      	sub	sp, #48	; 0x30
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d107      	bne.n	8007f34 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f28:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e0c5      	b.n	80080c0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	f040 80be 	bne.w	80080be <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	441a      	add	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d907      	bls.n	8007f66 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e0ac      	b.n	80080c0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2203      	movs	r2, #3
 8007f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2200      	movs	r2, #0
 8007f74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	6812      	ldr	r2, [r2, #0]
 8007f80:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8007f84:	f043 0302 	orr.w	r3, r3, #2
 8007f88:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8e:	4a4e      	ldr	r2, [pc, #312]	; (80080c8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007f90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f96:	4a4d      	ldr	r2, [pc, #308]	; (80080cc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007f98:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d002      	beq.n	8007fb0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8007faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fac:	025b      	lsls	r3, r3, #9
 8007fae:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d90a      	bls.n	8007fcc <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	22a0      	movs	r2, #160	; 0xa0
 8007fba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f002 fdfb 	bl	800abbe <SDMMC_CmdWriteMultiBlock>
 8007fc8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007fca:	e009      	b.n	8007fe0 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2290      	movs	r2, #144	; 0x90
 8007fd0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f002 fdce 	bl	800ab7a <SDMMC_CmdWriteSingleBlock>
 8007fde:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d012      	beq.n	800800c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a39      	ldr	r2, [pc, #228]	; (80080d0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007fec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff4:	431a      	orrs	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e059      	b.n	80080c0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800800c:	4b31      	ldr	r3, [pc, #196]	; (80080d4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800800e:	2201      	movs	r2, #1
 8008010:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008016:	2240      	movs	r2, #64	; 0x40
 8008018:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	430a      	orrs	r2, r1
 8008034:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800803a:	68b9      	ldr	r1, [r7, #8]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3380      	adds	r3, #128	; 0x80
 8008042:	461a      	mov	r2, r3
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	025b      	lsls	r3, r3, #9
 8008048:	089b      	lsrs	r3, r3, #2
 800804a:	f7fd fc8f 	bl	800596c <HAL_DMA_Start_IT>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d01c      	beq.n	800808e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	6812      	ldr	r2, [r2, #0]
 800805e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8008062:	f023 0302 	bic.w	r3, r3, #2
 8008066:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a18      	ldr	r2, [pc, #96]	; (80080d0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800806e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008074:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e018      	b.n	80080c0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800808e:	f04f 33ff 	mov.w	r3, #4294967295
 8008092:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	025b      	lsls	r3, r3, #9
 8008098:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800809a:	2390      	movs	r3, #144	; 0x90
 800809c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800809e:	2300      	movs	r3, #0
 80080a0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80080a6:	2301      	movs	r3, #1
 80080a8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f107 0210 	add.w	r2, r7, #16
 80080b2:	4611      	mov	r1, r2
 80080b4:	4618      	mov	r0, r3
 80080b6:	f002 fcce 	bl	800aa56 <SDIO_ConfigData>

      return HAL_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	e000      	b.n	80080c0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80080be:	2302      	movs	r3, #2
  }
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3730      	adds	r7, #48	; 0x30
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	08008601 	.word	0x08008601
 80080cc:	0800869d 	.word	0x0800869d
 80080d0:	004005ff 	.word	0x004005ff
 80080d4:	4225858c 	.word	0x4225858c

080080d8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080fa:	0f9b      	lsrs	r3, r3, #30
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008106:	0e9b      	lsrs	r3, r3, #26
 8008108:	b2db      	uxtb	r3, r3
 800810a:	f003 030f 	and.w	r3, r3, #15
 800810e:	b2da      	uxtb	r2, r3
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008118:	0e1b      	lsrs	r3, r3, #24
 800811a:	b2db      	uxtb	r3, r3
 800811c:	f003 0303 	and.w	r3, r3, #3
 8008120:	b2da      	uxtb	r2, r3
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800812a:	0c1b      	lsrs	r3, r3, #16
 800812c:	b2da      	uxtb	r2, r3
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008136:	0a1b      	lsrs	r3, r3, #8
 8008138:	b2da      	uxtb	r2, r3
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008142:	b2da      	uxtb	r2, r3
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800814c:	0d1b      	lsrs	r3, r3, #20
 800814e:	b29a      	uxth	r2, r3
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008158:	0c1b      	lsrs	r3, r3, #16
 800815a:	b2db      	uxtb	r3, r3
 800815c:	f003 030f 	and.w	r3, r3, #15
 8008160:	b2da      	uxtb	r2, r3
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800816a:	0bdb      	lsrs	r3, r3, #15
 800816c:	b2db      	uxtb	r3, r3
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	b2da      	uxtb	r2, r3
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800817c:	0b9b      	lsrs	r3, r3, #14
 800817e:	b2db      	uxtb	r3, r3
 8008180:	f003 0301 	and.w	r3, r3, #1
 8008184:	b2da      	uxtb	r2, r3
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800818e:	0b5b      	lsrs	r3, r3, #13
 8008190:	b2db      	uxtb	r3, r3
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	b2da      	uxtb	r2, r3
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081a0:	0b1b      	lsrs	r3, r3, #12
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2200      	movs	r2, #0
 80081b2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d163      	bne.n	8008284 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081c0:	009a      	lsls	r2, r3, #2
 80081c2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80081c6:	4013      	ands	r3, r2
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80081cc:	0f92      	lsrs	r2, r2, #30
 80081ce:	431a      	orrs	r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081d8:	0edb      	lsrs	r3, r3, #27
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	f003 0307 	and.w	r3, r3, #7
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ea:	0e1b      	lsrs	r3, r3, #24
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	f003 0307 	and.w	r3, r3, #7
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081fc:	0d5b      	lsrs	r3, r3, #21
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	f003 0307 	and.w	r3, r3, #7
 8008204:	b2da      	uxtb	r2, r3
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800820e:	0c9b      	lsrs	r3, r3, #18
 8008210:	b2db      	uxtb	r3, r3
 8008212:	f003 0307 	and.w	r3, r3, #7
 8008216:	b2da      	uxtb	r2, r3
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008220:	0bdb      	lsrs	r3, r3, #15
 8008222:	b2db      	uxtb	r3, r3
 8008224:	f003 0307 	and.w	r3, r3, #7
 8008228:	b2da      	uxtb	r2, r3
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	1c5a      	adds	r2, r3, #1
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	7e1b      	ldrb	r3, [r3, #24]
 800823c:	b2db      	uxtb	r3, r3
 800823e:	f003 0307 	and.w	r3, r3, #7
 8008242:	3302      	adds	r3, #2
 8008244:	2201      	movs	r2, #1
 8008246:	fa02 f303 	lsl.w	r3, r2, r3
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800824e:	fb03 f202 	mul.w	r2, r3, r2
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	7a1b      	ldrb	r3, [r3, #8]
 800825a:	b2db      	uxtb	r3, r3
 800825c:	f003 030f 	and.w	r3, r3, #15
 8008260:	2201      	movs	r2, #1
 8008262:	409a      	lsls	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008270:	0a52      	lsrs	r2, r2, #9
 8008272:	fb03 f202 	mul.w	r2, r3, r2
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008280:	661a      	str	r2, [r3, #96]	; 0x60
 8008282:	e031      	b.n	80082e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008288:	2b01      	cmp	r3, #1
 800828a:	d11d      	bne.n	80082c8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008290:	041b      	lsls	r3, r3, #16
 8008292:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800829a:	0c1b      	lsrs	r3, r3, #16
 800829c:	431a      	orrs	r2, r3
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	3301      	adds	r3, #1
 80082a8:	029a      	lsls	r2, r3, #10
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082bc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	661a      	str	r2, [r3, #96]	; 0x60
 80082c6:	e00f      	b.n	80082e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a58      	ldr	r2, [pc, #352]	; (8008430 <HAL_SD_GetCardCSD+0x344>)
 80082ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e09d      	b.n	8008424 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082ec:	0b9b      	lsrs	r3, r3, #14
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	f003 0301 	and.w	r3, r3, #1
 80082f4:	b2da      	uxtb	r2, r3
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082fe:	09db      	lsrs	r3, r3, #7
 8008300:	b2db      	uxtb	r3, r3
 8008302:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008306:	b2da      	uxtb	r2, r3
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008310:	b2db      	uxtb	r3, r3
 8008312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008316:	b2da      	uxtb	r2, r3
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008320:	0fdb      	lsrs	r3, r3, #31
 8008322:	b2da      	uxtb	r2, r3
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832c:	0f5b      	lsrs	r3, r3, #29
 800832e:	b2db      	uxtb	r3, r3
 8008330:	f003 0303 	and.w	r3, r3, #3
 8008334:	b2da      	uxtb	r2, r3
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833e:	0e9b      	lsrs	r3, r3, #26
 8008340:	b2db      	uxtb	r3, r3
 8008342:	f003 0307 	and.w	r3, r3, #7
 8008346:	b2da      	uxtb	r2, r3
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008350:	0d9b      	lsrs	r3, r3, #22
 8008352:	b2db      	uxtb	r3, r3
 8008354:	f003 030f 	and.w	r3, r3, #15
 8008358:	b2da      	uxtb	r2, r3
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008362:	0d5b      	lsrs	r3, r3, #21
 8008364:	b2db      	uxtb	r3, r3
 8008366:	f003 0301 	and.w	r3, r3, #1
 800836a:	b2da      	uxtb	r2, r3
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800837e:	0c1b      	lsrs	r3, r3, #16
 8008380:	b2db      	uxtb	r3, r3
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	b2da      	uxtb	r2, r3
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008392:	0bdb      	lsrs	r3, r3, #15
 8008394:	b2db      	uxtb	r3, r3
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	b2da      	uxtb	r2, r3
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083a6:	0b9b      	lsrs	r3, r3, #14
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	b2da      	uxtb	r2, r3
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ba:	0b5b      	lsrs	r3, r3, #13
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ce:	0b1b      	lsrs	r3, r3, #12
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	f003 0301 	and.w	r3, r3, #1
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e2:	0a9b      	lsrs	r3, r3, #10
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	f003 0303 	and.w	r3, r3, #3
 80083ea:	b2da      	uxtb	r2, r3
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f6:	0a1b      	lsrs	r3, r3, #8
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	f003 0303 	and.w	r3, r3, #3
 80083fe:	b2da      	uxtb	r2, r3
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800840a:	085b      	lsrs	r3, r3, #1
 800840c:	b2db      	uxtb	r3, r3
 800840e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008412:	b2da      	uxtb	r2, r3
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	004005ff 	.word	0x004005ff

08008434 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800848c:	b5b0      	push	{r4, r5, r7, lr}
 800848e:	b08e      	sub	sp, #56	; 0x38
 8008490:	af04      	add	r7, sp, #16
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2203      	movs	r2, #3
 80084a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a8:	2b03      	cmp	r3, #3
 80084aa:	d02e      	beq.n	800850a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b2:	d106      	bne.n	80084c2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	639a      	str	r2, [r3, #56]	; 0x38
 80084c0:	e029      	b.n	8008516 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084c8:	d10a      	bne.n	80084e0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fabc 	bl	8008a48 <SD_WideBus_Enable>
 80084d0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084d6:	6a3b      	ldr	r3, [r7, #32]
 80084d8:	431a      	orrs	r2, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	639a      	str	r2, [r3, #56]	; 0x38
 80084de:	e01a      	b.n	8008516 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10a      	bne.n	80084fc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 faf9 	bl	8008ade <SD_WideBus_Disable>
 80084ec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084f2:	6a3b      	ldr	r3, [r7, #32]
 80084f4:	431a      	orrs	r2, r3
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	639a      	str	r2, [r3, #56]	; 0x38
 80084fa:	e00c      	b.n	8008516 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008500:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	639a      	str	r2, [r3, #56]	; 0x38
 8008508:	e005      	b.n	8008516 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00b      	beq.n	8008536 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a26      	ldr	r2, [pc, #152]	; (80085bc <HAL_SD_ConfigWideBusOperation+0x130>)
 8008524:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008534:	e01f      	b.n	8008576 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	695b      	ldr	r3, [r3, #20]
 8008550:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681d      	ldr	r5, [r3, #0]
 800855c:	466c      	mov	r4, sp
 800855e:	f107 0314 	add.w	r3, r7, #20
 8008562:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008566:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800856a:	f107 0308 	add.w	r3, r7, #8
 800856e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008570:	4628      	mov	r0, r5
 8008572:	f002 f9d2 	bl	800a91a <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800857e:	4618      	mov	r0, r3
 8008580:	f002 fa95 	bl	800aaae <SDMMC_CmdBlockLength>
 8008584:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00c      	beq.n	80085a6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a0a      	ldr	r2, [pc, #40]	; (80085bc <HAL_SD_ConfigWideBusOperation+0x130>)
 8008592:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	431a      	orrs	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80085ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3728      	adds	r7, #40	; 0x28
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bdb0      	pop	{r4, r5, r7, pc}
 80085ba:	bf00      	nop
 80085bc:	004005ff 	.word	0x004005ff

080085c0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80085c8:	2300      	movs	r3, #0
 80085ca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80085cc:	f107 030c 	add.w	r3, r7, #12
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 fa10 	bl	80089f8 <SD_SendStatus>
 80085d8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d005      	beq.n	80085ec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	431a      	orrs	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	0a5b      	lsrs	r3, r3, #9
 80085f0:	f003 030f 	and.w	r3, r3, #15
 80085f4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80085f6:	693b      	ldr	r3, [r7, #16]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3718      	adds	r7, #24
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800861c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800861e:	bf00      	nop
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b084      	sub	sp, #16
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008636:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863c:	2b82      	cmp	r3, #130	; 0x82
 800863e:	d111      	bne.n	8008664 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4618      	mov	r0, r3
 8008646:	f002 fadd 	bl	800ac04 <SDMMC_CmdStopTransfer>
 800864a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d008      	beq.n	8008664 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	431a      	orrs	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f7ff fd3a 	bl	80080d8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f022 0208 	bic.w	r2, r2, #8
 8008672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f240 523a 	movw	r2, #1338	; 0x53a
 800867c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f003 fa33 	bl	800baf8 <HAL_SD_RxCpltCallback>
#endif
}
 8008692:	bf00      	nop
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
	...

0800869c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b086      	sub	sp, #24
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f7fd f9b6 	bl	8005a1c <HAL_DMA_GetError>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d03e      	beq.n	8008734 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086bc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d002      	beq.n	80086d2 <SD_DMAError+0x36>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d12d      	bne.n	800872e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a19      	ldr	r2, [pc, #100]	; (800873c <SD_DMAError+0xa0>)
 80086d8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80086e8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80086f6:	6978      	ldr	r0, [r7, #20]
 80086f8:	f7ff ff62 	bl	80085c0 <HAL_SD_GetCardState>
 80086fc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2b06      	cmp	r3, #6
 8008702:	d002      	beq.n	800870a <SD_DMAError+0x6e>
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2b05      	cmp	r3, #5
 8008708:	d10a      	bne.n	8008720 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4618      	mov	r0, r3
 8008710:	f002 fa78 	bl	800ac04 <SDMMC_CmdStopTransfer>
 8008714:	4602      	mov	r2, r0
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871a:	431a      	orrs	r2, r3
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2200      	movs	r2, #0
 800872c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800872e:	6978      	ldr	r0, [r7, #20]
 8008730:	f7ff fcd2 	bl	80080d8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008734:	bf00      	nop
 8008736:	3718      	adds	r7, #24
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	004005ff 	.word	0x004005ff

08008740 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008740:	b5b0      	push	{r4, r5, r7, lr}
 8008742:	b094      	sub	sp, #80	; 0x50
 8008744:	af04      	add	r7, sp, #16
 8008746:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008748:	2301      	movs	r3, #1
 800874a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4618      	mov	r0, r3
 8008752:	f002 f928 	bl	800a9a6 <SDIO_GetPowerState>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d102      	bne.n	8008762 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800875c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008760:	e0b8      	b.n	80088d4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008766:	2b03      	cmp	r3, #3
 8008768:	d02f      	beq.n	80087ca <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4618      	mov	r0, r3
 8008770:	f002 fb52 	bl	800ae18 <SDMMC_CmdSendCID>
 8008774:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <SD_InitCard+0x40>
    {
      return errorstate;
 800877c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800877e:	e0a9      	b.n	80088d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2100      	movs	r1, #0
 8008786:	4618      	mov	r0, r3
 8008788:	f002 f952 	bl	800aa30 <SDIO_GetResponse>
 800878c:	4602      	mov	r2, r0
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	2104      	movs	r1, #4
 8008798:	4618      	mov	r0, r3
 800879a:	f002 f949 	bl	800aa30 <SDIO_GetResponse>
 800879e:	4602      	mov	r2, r0
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2108      	movs	r1, #8
 80087aa:	4618      	mov	r0, r3
 80087ac:	f002 f940 	bl	800aa30 <SDIO_GetResponse>
 80087b0:	4602      	mov	r2, r0
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	210c      	movs	r1, #12
 80087bc:	4618      	mov	r0, r3
 80087be:	f002 f937 	bl	800aa30 <SDIO_GetResponse>
 80087c2:	4602      	mov	r2, r0
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d00d      	beq.n	80087ee <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f107 020e 	add.w	r2, r7, #14
 80087da:	4611      	mov	r1, r2
 80087dc:	4618      	mov	r0, r3
 80087de:	f002 fb58 	bl	800ae92 <SDMMC_CmdSetRelAdd>
 80087e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80087e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <SD_InitCard+0xae>
    {
      return errorstate;
 80087ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ec:	e072      	b.n	80088d4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	d036      	beq.n	8008864 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80087f6:	89fb      	ldrh	r3, [r7, #14]
 80087f8:	461a      	mov	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008806:	041b      	lsls	r3, r3, #16
 8008808:	4619      	mov	r1, r3
 800880a:	4610      	mov	r0, r2
 800880c:	f002 fb22 	bl	800ae54 <SDMMC_CmdSendCSD>
 8008810:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008814:	2b00      	cmp	r3, #0
 8008816:	d001      	beq.n	800881c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800881a:	e05b      	b.n	80088d4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2100      	movs	r1, #0
 8008822:	4618      	mov	r0, r3
 8008824:	f002 f904 	bl	800aa30 <SDIO_GetResponse>
 8008828:	4602      	mov	r2, r0
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2104      	movs	r1, #4
 8008834:	4618      	mov	r0, r3
 8008836:	f002 f8fb 	bl	800aa30 <SDIO_GetResponse>
 800883a:	4602      	mov	r2, r0
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2108      	movs	r1, #8
 8008846:	4618      	mov	r0, r3
 8008848:	f002 f8f2 	bl	800aa30 <SDIO_GetResponse>
 800884c:	4602      	mov	r2, r0
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	210c      	movs	r1, #12
 8008858:	4618      	mov	r0, r3
 800885a:	f002 f8e9 	bl	800aa30 <SDIO_GetResponse>
 800885e:	4602      	mov	r2, r0
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2104      	movs	r1, #4
 800886a:	4618      	mov	r0, r3
 800886c:	f002 f8e0 	bl	800aa30 <SDIO_GetResponse>
 8008870:	4603      	mov	r3, r0
 8008872:	0d1a      	lsrs	r2, r3, #20
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008878:	f107 0310 	add.w	r3, r7, #16
 800887c:	4619      	mov	r1, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7ff fc34 	bl	80080ec <HAL_SD_GetCardCSD>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d002      	beq.n	8008890 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800888a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800888e:	e021      	b.n	80088d4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6819      	ldr	r1, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008898:	041b      	lsls	r3, r3, #16
 800889a:	2200      	movs	r2, #0
 800889c:	461c      	mov	r4, r3
 800889e:	4615      	mov	r5, r2
 80088a0:	4622      	mov	r2, r4
 80088a2:	462b      	mov	r3, r5
 80088a4:	4608      	mov	r0, r1
 80088a6:	f002 f9cf 	bl	800ac48 <SDMMC_CmdSelDesel>
 80088aa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80088ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d001      	beq.n	80088b6 <SD_InitCard+0x176>
  {
    return errorstate;
 80088b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b4:	e00e      	b.n	80088d4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681d      	ldr	r5, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	466c      	mov	r4, sp
 80088be:	f103 0210 	add.w	r2, r3, #16
 80088c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80088c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80088c8:	3304      	adds	r3, #4
 80088ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088cc:	4628      	mov	r0, r5
 80088ce:	f002 f824 	bl	800a91a <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3740      	adds	r7, #64	; 0x40
 80088d8:	46bd      	mov	sp, r7
 80088da:	bdb0      	pop	{r4, r5, r7, pc}

080088dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80088e8:	2300      	movs	r3, #0
 80088ea:	617b      	str	r3, [r7, #20]
 80088ec:	2300      	movs	r3, #0
 80088ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f002 f9ca 	bl	800ac8e <SDMMC_CmdGoIdleState>
 80088fa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d001      	beq.n	8008906 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	e072      	b.n	80089ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4618      	mov	r0, r3
 800890c:	f002 f9dd 	bl	800acca <SDMMC_CmdOperCond>
 8008910:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00d      	beq.n	8008934 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4618      	mov	r0, r3
 8008924:	f002 f9b3 	bl	800ac8e <SDMMC_CmdGoIdleState>
 8008928:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d004      	beq.n	800893a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	e05b      	b.n	80089ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800893e:	2b01      	cmp	r3, #1
 8008940:	d137      	bne.n	80089b2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2100      	movs	r1, #0
 8008948:	4618      	mov	r0, r3
 800894a:	f002 f9dd 	bl	800ad08 <SDMMC_CmdAppCommand>
 800894e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d02d      	beq.n	80089b2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008956:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800895a:	e047      	b.n	80089ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2100      	movs	r1, #0
 8008962:	4618      	mov	r0, r3
 8008964:	f002 f9d0 	bl	800ad08 <SDMMC_CmdAppCommand>
 8008968:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d001      	beq.n	8008974 <SD_PowerON+0x98>
    {
      return errorstate;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	e03b      	b.n	80089ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	491e      	ldr	r1, [pc, #120]	; (80089f4 <SD_PowerON+0x118>)
 800897a:	4618      	mov	r0, r3
 800897c:	f002 f9e6 	bl	800ad4c <SDMMC_CmdAppOperCommand>
 8008980:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d002      	beq.n	800898e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008988:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800898c:	e02e      	b.n	80089ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2100      	movs	r1, #0
 8008994:	4618      	mov	r0, r3
 8008996:	f002 f84b 	bl	800aa30 <SDIO_GetResponse>
 800899a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	0fdb      	lsrs	r3, r3, #31
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d101      	bne.n	80089a8 <SD_PowerON+0xcc>
 80089a4:	2301      	movs	r3, #1
 80089a6:	e000      	b.n	80089aa <SD_PowerON+0xce>
 80089a8:	2300      	movs	r3, #0
 80089aa:	613b      	str	r3, [r7, #16]

    count++;
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	3301      	adds	r3, #1
 80089b0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d802      	bhi.n	80089c2 <SD_PowerON+0xe6>
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d0cc      	beq.n	800895c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d902      	bls.n	80089d2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80089cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089d0:	e00c      	b.n	80089ec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d003      	beq.n	80089e4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	645a      	str	r2, [r3, #68]	; 0x44
 80089e2:	e002      	b.n	80089ea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3718      	adds	r7, #24
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	c1100000 	.word	0xc1100000

080089f8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d102      	bne.n	8008a0e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008a08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a0c:	e018      	b.n	8008a40 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a16:	041b      	lsls	r3, r3, #16
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4610      	mov	r0, r2
 8008a1c:	f002 fa5a 	bl	800aed4 <SDMMC_CmdSendStatus>
 8008a20:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	e009      	b.n	8008a40 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2100      	movs	r1, #0
 8008a32:	4618      	mov	r0, r3
 8008a34:	f001 fffc 	bl	800aa30 <SDIO_GetResponse>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008a50:	2300      	movs	r3, #0
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	2300      	movs	r3, #0
 8008a56:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f001 ffe6 	bl	800aa30 <SDIO_GetResponse>
 8008a64:	4603      	mov	r3, r0
 8008a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a6e:	d102      	bne.n	8008a76 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008a70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a74:	e02f      	b.n	8008ad6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008a76:	f107 030c 	add.w	r3, r7, #12
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f879 	bl	8008b74 <SD_FindSCR>
 8008a82:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	e023      	b.n	8008ad6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d01c      	beq.n	8008ad2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa0:	041b      	lsls	r3, r3, #16
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	f002 f92f 	bl	800ad08 <SDMMC_CmdAppCommand>
 8008aaa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	e00f      	b.n	8008ad6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2102      	movs	r1, #2
 8008abc:	4618      	mov	r0, r3
 8008abe:	f002 f968 	bl	800ad92 <SDMMC_CmdBusWidth>
 8008ac2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d001      	beq.n	8008ace <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	e003      	b.n	8008ad6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	e001      	b.n	8008ad6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008ad2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3718      	adds	r7, #24
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b086      	sub	sp, #24
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	60fb      	str	r3, [r7, #12]
 8008aea:	2300      	movs	r3, #0
 8008aec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2100      	movs	r1, #0
 8008af4:	4618      	mov	r0, r3
 8008af6:	f001 ff9b 	bl	800aa30 <SDIO_GetResponse>
 8008afa:	4603      	mov	r3, r0
 8008afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b04:	d102      	bne.n	8008b0c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b0a:	e02f      	b.n	8008b6c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008b0c:	f107 030c 	add.w	r3, r7, #12
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f82e 	bl	8008b74 <SD_FindSCR>
 8008b18:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d001      	beq.n	8008b24 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	e023      	b.n	8008b6c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d01c      	beq.n	8008b68 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b36:	041b      	lsls	r3, r3, #16
 8008b38:	4619      	mov	r1, r3
 8008b3a:	4610      	mov	r0, r2
 8008b3c:	f002 f8e4 	bl	800ad08 <SDMMC_CmdAppCommand>
 8008b40:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d001      	beq.n	8008b4c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	e00f      	b.n	8008b6c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2100      	movs	r1, #0
 8008b52:	4618      	mov	r0, r3
 8008b54:	f002 f91d 	bl	800ad92 <SDMMC_CmdBusWidth>
 8008b58:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	e003      	b.n	8008b6c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008b64:	2300      	movs	r3, #0
 8008b66:	e001      	b.n	8008b6c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3718      	adds	r7, #24
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008b74:	b590      	push	{r4, r7, lr}
 8008b76:	b08f      	sub	sp, #60	; 0x3c
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008b7e:	f7fb fd0f 	bl	80045a0 <HAL_GetTick>
 8008b82:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008b84:	2300      	movs	r3, #0
 8008b86:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008b88:	2300      	movs	r3, #0
 8008b8a:	60bb      	str	r3, [r7, #8]
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2108      	movs	r1, #8
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f001 ff87 	bl	800aaae <SDMMC_CmdBlockLength>
 8008ba0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d001      	beq.n	8008bac <SD_FindSCR+0x38>
  {
    return errorstate;
 8008ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008baa:	e0b2      	b.n	8008d12 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bb4:	041b      	lsls	r3, r3, #16
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	4610      	mov	r0, r2
 8008bba:	f002 f8a5 	bl	800ad08 <SDMMC_CmdAppCommand>
 8008bbe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <SD_FindSCR+0x56>
  {
    return errorstate;
 8008bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc8:	e0a3      	b.n	8008d12 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008bca:	f04f 33ff 	mov.w	r3, #4294967295
 8008bce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008bd0:	2308      	movs	r3, #8
 8008bd2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008bd4:	2330      	movs	r3, #48	; 0x30
 8008bd6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008bd8:	2302      	movs	r3, #2
 8008bda:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008be0:	2301      	movs	r3, #1
 8008be2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f107 0210 	add.w	r2, r7, #16
 8008bec:	4611      	mov	r1, r2
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f001 ff31 	bl	800aa56 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f002 f8ec 	bl	800add6 <SDMMC_CmdSendSCR>
 8008bfe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d02a      	beq.n	8008c5c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8008c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c08:	e083      	b.n	8008d12 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00f      	beq.n	8008c38 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6819      	ldr	r1, [r3, #0]
 8008c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	f107 0208 	add.w	r2, r7, #8
 8008c24:	18d4      	adds	r4, r2, r3
 8008c26:	4608      	mov	r0, r1
 8008c28:	f001 fea2 	bl	800a970 <SDIO_ReadFIFO>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	6023      	str	r3, [r4, #0]
      index++;
 8008c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c32:	3301      	adds	r3, #1
 8008c34:	637b      	str	r3, [r7, #52]	; 0x34
 8008c36:	e006      	b.n	8008c46 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d012      	beq.n	8008c6c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008c46:	f7fb fcab 	bl	80045a0 <HAL_GetTick>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c54:	d102      	bne.n	8008c5c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008c56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c5a:	e05a      	b.n	8008d12 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c62:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d0cf      	beq.n	8008c0a <SD_FindSCR+0x96>
 8008c6a:	e000      	b.n	8008c6e <SD_FindSCR+0xfa>
      break;
 8008c6c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c74:	f003 0308 	and.w	r3, r3, #8
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d005      	beq.n	8008c88 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2208      	movs	r2, #8
 8008c82:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008c84:	2308      	movs	r3, #8
 8008c86:	e044      	b.n	8008d12 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c8e:	f003 0302 	and.w	r3, r3, #2
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d005      	beq.n	8008ca2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008c9e:	2302      	movs	r3, #2
 8008ca0:	e037      	b.n	8008d12 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca8:	f003 0320 	and.w	r3, r3, #32
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d005      	beq.n	8008cbc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2220      	movs	r2, #32
 8008cb6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008cb8:	2320      	movs	r3, #32
 8008cba:	e02a      	b.n	8008d12 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f240 523a 	movw	r2, #1338	; 0x53a
 8008cc4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	061a      	lsls	r2, r3, #24
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	021b      	lsls	r3, r3, #8
 8008cce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008cd2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	0a1b      	lsrs	r3, r3, #8
 8008cd8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008cdc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	0e1b      	lsrs	r3, r3, #24
 8008ce2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce6:	601a      	str	r2, [r3, #0]
    scr++;
 8008ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cea:	3304      	adds	r3, #4
 8008cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	061a      	lsls	r2, r3, #24
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	021b      	lsls	r3, r3, #8
 8008cf6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008cfa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	0a1b      	lsrs	r3, r3, #8
 8008d00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d04:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	0e1b      	lsrs	r3, r3, #24
 8008d0a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	373c      	adds	r7, #60	; 0x3c
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd90      	pop	{r4, r7, pc}

08008d1a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d101      	bne.n	8008d2e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e025      	b.n	8008d7a <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d106      	bne.n	8008d48 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7fb fa32 	bl	80041ac <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	3304      	adds	r3, #4
 8008d58:	4619      	mov	r1, r3
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	f001 fcda 	bl	800a714 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6818      	ldr	r0, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	6839      	ldr	r1, [r7, #0]
 8008d6c:	f001 fd2f 	bl	800a7ce <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b082      	sub	sp, #8
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if (__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	f003 0301 	and.w	r3, r3, #1
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d10a      	bne.n	8008dae <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f80c 	bl	8008db6 <HAL_SDRAM_RefreshErrorCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	695a      	ldr	r2, [r3, #20]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f042 0201 	orr.w	r2, r2, #1
 8008dac:	615a      	str	r2, [r3, #20]
  }
}
 8008dae:	bf00      	nop
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}

08008db6 <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b083      	sub	sp, #12
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */
}
 8008dbe:	bf00      	nop
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b086      	sub	sp, #24
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	60f8      	str	r0, [r7, #12]
 8008dd2:	60b9      	str	r1, [r7, #8]
 8008dd4:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008ddc:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8008dde:	7dfb      	ldrb	r3, [r7, #23]
 8008de0:	2b02      	cmp	r3, #2
 8008de2:	d101      	bne.n	8008de8 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008de4:	2302      	movs	r3, #2
 8008de6:	e021      	b.n	8008e2c <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008de8:	7dfb      	ldrb	r3, [r7, #23]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d002      	beq.n	8008df4 <HAL_SDRAM_SendCommand+0x2a>
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
 8008df0:	2b05      	cmp	r3, #5
 8008df2:	d118      	bne.n	8008e26 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2202      	movs	r2, #2
 8008df8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	68b9      	ldr	r1, [r7, #8]
 8008e04:	4618      	mov	r0, r3
 8008e06:	f001 fd4b 	bl	800a8a0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d104      	bne.n	8008e1c <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2205      	movs	r2, #5
 8008e16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008e1a:	e006      	b.n	8008e2a <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008e24:	e001      	b.n	8008e2a <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e000      	b.n	8008e2c <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3718      	adds	r7, #24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e041      	b.n	8008eca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d106      	bne.n	8008e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7fa ffe2 	bl	8003e24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2202      	movs	r2, #2
 8008e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	3304      	adds	r3, #4
 8008e70:	4619      	mov	r1, r3
 8008e72:	4610      	mov	r0, r2
 8008e74:	f000 fe00 	bl	8009a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3708      	adds	r7, #8
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
	...

08008ed4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d001      	beq.n	8008eec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e04e      	b.n	8008f8a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2202      	movs	r2, #2
 8008ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	68da      	ldr	r2, [r3, #12]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f042 0201 	orr.w	r2, r2, #1
 8008f02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a23      	ldr	r2, [pc, #140]	; (8008f98 <HAL_TIM_Base_Start_IT+0xc4>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d022      	beq.n	8008f54 <HAL_TIM_Base_Start_IT+0x80>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f16:	d01d      	beq.n	8008f54 <HAL_TIM_Base_Start_IT+0x80>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a1f      	ldr	r2, [pc, #124]	; (8008f9c <HAL_TIM_Base_Start_IT+0xc8>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d018      	beq.n	8008f54 <HAL_TIM_Base_Start_IT+0x80>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a1e      	ldr	r2, [pc, #120]	; (8008fa0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d013      	beq.n	8008f54 <HAL_TIM_Base_Start_IT+0x80>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a1c      	ldr	r2, [pc, #112]	; (8008fa4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d00e      	beq.n	8008f54 <HAL_TIM_Base_Start_IT+0x80>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a1b      	ldr	r2, [pc, #108]	; (8008fa8 <HAL_TIM_Base_Start_IT+0xd4>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d009      	beq.n	8008f54 <HAL_TIM_Base_Start_IT+0x80>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a19      	ldr	r2, [pc, #100]	; (8008fac <HAL_TIM_Base_Start_IT+0xd8>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d004      	beq.n	8008f54 <HAL_TIM_Base_Start_IT+0x80>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a18      	ldr	r2, [pc, #96]	; (8008fb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d111      	bne.n	8008f78 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f003 0307 	and.w	r3, r3, #7
 8008f5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2b06      	cmp	r3, #6
 8008f64:	d010      	beq.n	8008f88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f042 0201 	orr.w	r2, r2, #1
 8008f74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f76:	e007      	b.n	8008f88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f042 0201 	orr.w	r2, r2, #1
 8008f86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	40010000 	.word	0x40010000
 8008f9c:	40000400 	.word	0x40000400
 8008fa0:	40000800 	.word	0x40000800
 8008fa4:	40000c00 	.word	0x40000c00
 8008fa8:	40010400 	.word	0x40010400
 8008fac:	40014000 	.word	0x40014000
 8008fb0:	40001800 	.word	0x40001800

08008fb4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d101      	bne.n	8008fc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e041      	b.n	800904a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d106      	bne.n	8008fe0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f839 	bl	8009052 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	3304      	adds	r3, #4
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	4610      	mov	r0, r2
 8008ff4:	f000 fd40 	bl	8009a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2201      	movs	r2, #1
 800902c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009052:	b480      	push	{r7}
 8009054:	b083      	sub	sp, #12
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800905a:	bf00      	nop
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
	...

08009068 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d109      	bne.n	800908c <HAL_TIM_PWM_Start+0x24>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800907e:	b2db      	uxtb	r3, r3
 8009080:	2b01      	cmp	r3, #1
 8009082:	bf14      	ite	ne
 8009084:	2301      	movne	r3, #1
 8009086:	2300      	moveq	r3, #0
 8009088:	b2db      	uxtb	r3, r3
 800908a:	e022      	b.n	80090d2 <HAL_TIM_PWM_Start+0x6a>
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	2b04      	cmp	r3, #4
 8009090:	d109      	bne.n	80090a6 <HAL_TIM_PWM_Start+0x3e>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b01      	cmp	r3, #1
 800909c:	bf14      	ite	ne
 800909e:	2301      	movne	r3, #1
 80090a0:	2300      	moveq	r3, #0
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	e015      	b.n	80090d2 <HAL_TIM_PWM_Start+0x6a>
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	2b08      	cmp	r3, #8
 80090aa:	d109      	bne.n	80090c0 <HAL_TIM_PWM_Start+0x58>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	bf14      	ite	ne
 80090b8:	2301      	movne	r3, #1
 80090ba:	2300      	moveq	r3, #0
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	e008      	b.n	80090d2 <HAL_TIM_PWM_Start+0x6a>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	bf14      	ite	ne
 80090cc:	2301      	movne	r3, #1
 80090ce:	2300      	moveq	r3, #0
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e07c      	b.n	80091d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d104      	bne.n	80090ea <HAL_TIM_PWM_Start+0x82>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2202      	movs	r2, #2
 80090e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090e8:	e013      	b.n	8009112 <HAL_TIM_PWM_Start+0xaa>
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	2b04      	cmp	r3, #4
 80090ee:	d104      	bne.n	80090fa <HAL_TIM_PWM_Start+0x92>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2202      	movs	r2, #2
 80090f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090f8:	e00b      	b.n	8009112 <HAL_TIM_PWM_Start+0xaa>
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	2b08      	cmp	r3, #8
 80090fe:	d104      	bne.n	800910a <HAL_TIM_PWM_Start+0xa2>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2202      	movs	r2, #2
 8009104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009108:	e003      	b.n	8009112 <HAL_TIM_PWM_Start+0xaa>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2202      	movs	r2, #2
 800910e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2201      	movs	r2, #1
 8009118:	6839      	ldr	r1, [r7, #0]
 800911a:	4618      	mov	r0, r3
 800911c:	f000 ff96 	bl	800a04c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a2d      	ldr	r2, [pc, #180]	; (80091dc <HAL_TIM_PWM_Start+0x174>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d004      	beq.n	8009134 <HAL_TIM_PWM_Start+0xcc>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a2c      	ldr	r2, [pc, #176]	; (80091e0 <HAL_TIM_PWM_Start+0x178>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d101      	bne.n	8009138 <HAL_TIM_PWM_Start+0xd0>
 8009134:	2301      	movs	r3, #1
 8009136:	e000      	b.n	800913a <HAL_TIM_PWM_Start+0xd2>
 8009138:	2300      	movs	r3, #0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d007      	beq.n	800914e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800914c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a22      	ldr	r2, [pc, #136]	; (80091dc <HAL_TIM_PWM_Start+0x174>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d022      	beq.n	800919e <HAL_TIM_PWM_Start+0x136>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009160:	d01d      	beq.n	800919e <HAL_TIM_PWM_Start+0x136>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a1f      	ldr	r2, [pc, #124]	; (80091e4 <HAL_TIM_PWM_Start+0x17c>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d018      	beq.n	800919e <HAL_TIM_PWM_Start+0x136>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a1d      	ldr	r2, [pc, #116]	; (80091e8 <HAL_TIM_PWM_Start+0x180>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d013      	beq.n	800919e <HAL_TIM_PWM_Start+0x136>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a1c      	ldr	r2, [pc, #112]	; (80091ec <HAL_TIM_PWM_Start+0x184>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d00e      	beq.n	800919e <HAL_TIM_PWM_Start+0x136>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a16      	ldr	r2, [pc, #88]	; (80091e0 <HAL_TIM_PWM_Start+0x178>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d009      	beq.n	800919e <HAL_TIM_PWM_Start+0x136>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a18      	ldr	r2, [pc, #96]	; (80091f0 <HAL_TIM_PWM_Start+0x188>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d004      	beq.n	800919e <HAL_TIM_PWM_Start+0x136>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a16      	ldr	r2, [pc, #88]	; (80091f4 <HAL_TIM_PWM_Start+0x18c>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d111      	bne.n	80091c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	f003 0307 	and.w	r3, r3, #7
 80091a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2b06      	cmp	r3, #6
 80091ae:	d010      	beq.n	80091d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f042 0201 	orr.w	r2, r2, #1
 80091be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091c0:	e007      	b.n	80091d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f042 0201 	orr.w	r2, r2, #1
 80091d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	40010000 	.word	0x40010000
 80091e0:	40010400 	.word	0x40010400
 80091e4:	40000400 	.word	0x40000400
 80091e8:	40000800 	.word	0x40000800
 80091ec:	40000c00 	.word	0x40000c00
 80091f0:	40014000 	.word	0x40014000
 80091f4:	40001800 	.word	0x40001800

080091f8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
 8009204:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d109      	bne.n	8009224 <HAL_TIM_PWM_Start_DMA+0x2c>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009216:	b2db      	uxtb	r3, r3
 8009218:	2b02      	cmp	r3, #2
 800921a:	bf0c      	ite	eq
 800921c:	2301      	moveq	r3, #1
 800921e:	2300      	movne	r3, #0
 8009220:	b2db      	uxtb	r3, r3
 8009222:	e022      	b.n	800926a <HAL_TIM_PWM_Start_DMA+0x72>
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	2b04      	cmp	r3, #4
 8009228:	d109      	bne.n	800923e <HAL_TIM_PWM_Start_DMA+0x46>
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009230:	b2db      	uxtb	r3, r3
 8009232:	2b02      	cmp	r3, #2
 8009234:	bf0c      	ite	eq
 8009236:	2301      	moveq	r3, #1
 8009238:	2300      	movne	r3, #0
 800923a:	b2db      	uxtb	r3, r3
 800923c:	e015      	b.n	800926a <HAL_TIM_PWM_Start_DMA+0x72>
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	2b08      	cmp	r3, #8
 8009242:	d109      	bne.n	8009258 <HAL_TIM_PWM_Start_DMA+0x60>
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800924a:	b2db      	uxtb	r3, r3
 800924c:	2b02      	cmp	r3, #2
 800924e:	bf0c      	ite	eq
 8009250:	2301      	moveq	r3, #1
 8009252:	2300      	movne	r3, #0
 8009254:	b2db      	uxtb	r3, r3
 8009256:	e008      	b.n	800926a <HAL_TIM_PWM_Start_DMA+0x72>
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b02      	cmp	r3, #2
 8009262:	bf0c      	ite	eq
 8009264:	2301      	moveq	r3, #1
 8009266:	2300      	movne	r3, #0
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d001      	beq.n	8009272 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800926e:	2302      	movs	r3, #2
 8009270:	e171      	b.n	8009556 <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d109      	bne.n	800928c <HAL_TIM_PWM_Start_DMA+0x94>
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800927e:	b2db      	uxtb	r3, r3
 8009280:	2b01      	cmp	r3, #1
 8009282:	bf0c      	ite	eq
 8009284:	2301      	moveq	r3, #1
 8009286:	2300      	movne	r3, #0
 8009288:	b2db      	uxtb	r3, r3
 800928a:	e022      	b.n	80092d2 <HAL_TIM_PWM_Start_DMA+0xda>
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	2b04      	cmp	r3, #4
 8009290:	d109      	bne.n	80092a6 <HAL_TIM_PWM_Start_DMA+0xae>
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b01      	cmp	r3, #1
 800929c:	bf0c      	ite	eq
 800929e:	2301      	moveq	r3, #1
 80092a0:	2300      	movne	r3, #0
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	e015      	b.n	80092d2 <HAL_TIM_PWM_Start_DMA+0xda>
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	2b08      	cmp	r3, #8
 80092aa:	d109      	bne.n	80092c0 <HAL_TIM_PWM_Start_DMA+0xc8>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	bf0c      	ite	eq
 80092b8:	2301      	moveq	r3, #1
 80092ba:	2300      	movne	r3, #0
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	e008      	b.n	80092d2 <HAL_TIM_PWM_Start_DMA+0xda>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	bf0c      	ite	eq
 80092cc:	2301      	moveq	r3, #1
 80092ce:	2300      	movne	r3, #0
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d024      	beq.n	8009320 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d104      	bne.n	80092e6 <HAL_TIM_PWM_Start_DMA+0xee>
 80092dc:	887b      	ldrh	r3, [r7, #2]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d001      	beq.n	80092e6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e137      	b.n	8009556 <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d104      	bne.n	80092f6 <HAL_TIM_PWM_Start_DMA+0xfe>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2202      	movs	r2, #2
 80092f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092f4:	e016      	b.n	8009324 <HAL_TIM_PWM_Start_DMA+0x12c>
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2b04      	cmp	r3, #4
 80092fa:	d104      	bne.n	8009306 <HAL_TIM_PWM_Start_DMA+0x10e>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2202      	movs	r2, #2
 8009300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009304:	e00e      	b.n	8009324 <HAL_TIM_PWM_Start_DMA+0x12c>
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2b08      	cmp	r3, #8
 800930a:	d104      	bne.n	8009316 <HAL_TIM_PWM_Start_DMA+0x11e>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2202      	movs	r2, #2
 8009310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009314:	e006      	b.n	8009324 <HAL_TIM_PWM_Start_DMA+0x12c>
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2202      	movs	r2, #2
 800931a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800931e:	e001      	b.n	8009324 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e118      	b.n	8009556 <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	2b0c      	cmp	r3, #12
 8009328:	f200 80ae 	bhi.w	8009488 <HAL_TIM_PWM_Start_DMA+0x290>
 800932c:	a201      	add	r2, pc, #4	; (adr r2, 8009334 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800932e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009332:	bf00      	nop
 8009334:	08009369 	.word	0x08009369
 8009338:	08009489 	.word	0x08009489
 800933c:	08009489 	.word	0x08009489
 8009340:	08009489 	.word	0x08009489
 8009344:	080093b1 	.word	0x080093b1
 8009348:	08009489 	.word	0x08009489
 800934c:	08009489 	.word	0x08009489
 8009350:	08009489 	.word	0x08009489
 8009354:	080093f9 	.word	0x080093f9
 8009358:	08009489 	.word	0x08009489
 800935c:	08009489 	.word	0x08009489
 8009360:	08009489 	.word	0x08009489
 8009364:	08009441 	.word	0x08009441
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936c:	4a7c      	ldr	r2, [pc, #496]	; (8009560 <HAL_TIM_PWM_Start_DMA+0x368>)
 800936e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009374:	4a7b      	ldr	r2, [pc, #492]	; (8009564 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009376:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937c:	4a7a      	ldr	r2, [pc, #488]	; (8009568 <HAL_TIM_PWM_Start_DMA+0x370>)
 800937e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009384:	6879      	ldr	r1, [r7, #4]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	3334      	adds	r3, #52	; 0x34
 800938c:	461a      	mov	r2, r3
 800938e:	887b      	ldrh	r3, [r7, #2]
 8009390:	f7fc faec 	bl	800596c <HAL_DMA_Start_IT>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
 800939c:	e0db      	b.n	8009556 <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68da      	ldr	r2, [r3, #12]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093ac:	60da      	str	r2, [r3, #12]
      break;
 80093ae:	e06e      	b.n	800948e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b4:	4a6a      	ldr	r2, [pc, #424]	; (8009560 <HAL_TIM_PWM_Start_DMA+0x368>)
 80093b6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093bc:	4a69      	ldr	r2, [pc, #420]	; (8009564 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80093be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c4:	4a68      	ldr	r2, [pc, #416]	; (8009568 <HAL_TIM_PWM_Start_DMA+0x370>)
 80093c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80093cc:	6879      	ldr	r1, [r7, #4]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3338      	adds	r3, #56	; 0x38
 80093d4:	461a      	mov	r2, r3
 80093d6:	887b      	ldrh	r3, [r7, #2]
 80093d8:	f7fc fac8 	bl	800596c <HAL_DMA_Start_IT>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e0b7      	b.n	8009556 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68da      	ldr	r2, [r3, #12]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80093f4:	60da      	str	r2, [r3, #12]
      break;
 80093f6:	e04a      	b.n	800948e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fc:	4a58      	ldr	r2, [pc, #352]	; (8009560 <HAL_TIM_PWM_Start_DMA+0x368>)
 80093fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009404:	4a57      	ldr	r2, [pc, #348]	; (8009564 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8009406:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940c:	4a56      	ldr	r2, [pc, #344]	; (8009568 <HAL_TIM_PWM_Start_DMA+0x370>)
 800940e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009414:	6879      	ldr	r1, [r7, #4]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	333c      	adds	r3, #60	; 0x3c
 800941c:	461a      	mov	r2, r3
 800941e:	887b      	ldrh	r3, [r7, #2]
 8009420:	f7fc faa4 	bl	800596c <HAL_DMA_Start_IT>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d001      	beq.n	800942e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e093      	b.n	8009556 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68da      	ldr	r2, [r3, #12]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800943c:	60da      	str	r2, [r3, #12]
      break;
 800943e:	e026      	b.n	800948e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009444:	4a46      	ldr	r2, [pc, #280]	; (8009560 <HAL_TIM_PWM_Start_DMA+0x368>)
 8009446:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944c:	4a45      	ldr	r2, [pc, #276]	; (8009564 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800944e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009454:	4a44      	ldr	r2, [pc, #272]	; (8009568 <HAL_TIM_PWM_Start_DMA+0x370>)
 8009456:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800945c:	6879      	ldr	r1, [r7, #4]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3340      	adds	r3, #64	; 0x40
 8009464:	461a      	mov	r2, r3
 8009466:	887b      	ldrh	r3, [r7, #2]
 8009468:	f7fc fa80 	bl	800596c <HAL_DMA_Start_IT>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e06f      	b.n	8009556 <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68da      	ldr	r2, [r3, #12]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009484:	60da      	str	r2, [r3, #12]
      break;
 8009486:	e002      	b.n	800948e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	75fb      	strb	r3, [r7, #23]
      break;
 800948c:	bf00      	nop
  }

  if (status == HAL_OK)
 800948e:	7dfb      	ldrb	r3, [r7, #23]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d15f      	bne.n	8009554 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2201      	movs	r2, #1
 800949a:	68b9      	ldr	r1, [r7, #8]
 800949c:	4618      	mov	r0, r3
 800949e:	f000 fdd5 	bl	800a04c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a31      	ldr	r2, [pc, #196]	; (800956c <HAL_TIM_PWM_Start_DMA+0x374>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d004      	beq.n	80094b6 <HAL_TIM_PWM_Start_DMA+0x2be>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a2f      	ldr	r2, [pc, #188]	; (8009570 <HAL_TIM_PWM_Start_DMA+0x378>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d101      	bne.n	80094ba <HAL_TIM_PWM_Start_DMA+0x2c2>
 80094b6:	2301      	movs	r3, #1
 80094b8:	e000      	b.n	80094bc <HAL_TIM_PWM_Start_DMA+0x2c4>
 80094ba:	2300      	movs	r3, #0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d007      	beq.n	80094d0 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094ce:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a25      	ldr	r2, [pc, #148]	; (800956c <HAL_TIM_PWM_Start_DMA+0x374>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d022      	beq.n	8009520 <HAL_TIM_PWM_Start_DMA+0x328>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094e2:	d01d      	beq.n	8009520 <HAL_TIM_PWM_Start_DMA+0x328>
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a22      	ldr	r2, [pc, #136]	; (8009574 <HAL_TIM_PWM_Start_DMA+0x37c>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d018      	beq.n	8009520 <HAL_TIM_PWM_Start_DMA+0x328>
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a21      	ldr	r2, [pc, #132]	; (8009578 <HAL_TIM_PWM_Start_DMA+0x380>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d013      	beq.n	8009520 <HAL_TIM_PWM_Start_DMA+0x328>
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a1f      	ldr	r2, [pc, #124]	; (800957c <HAL_TIM_PWM_Start_DMA+0x384>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d00e      	beq.n	8009520 <HAL_TIM_PWM_Start_DMA+0x328>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a1a      	ldr	r2, [pc, #104]	; (8009570 <HAL_TIM_PWM_Start_DMA+0x378>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d009      	beq.n	8009520 <HAL_TIM_PWM_Start_DMA+0x328>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a1b      	ldr	r2, [pc, #108]	; (8009580 <HAL_TIM_PWM_Start_DMA+0x388>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d004      	beq.n	8009520 <HAL_TIM_PWM_Start_DMA+0x328>
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4a1a      	ldr	r2, [pc, #104]	; (8009584 <HAL_TIM_PWM_Start_DMA+0x38c>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d111      	bne.n	8009544 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f003 0307 	and.w	r3, r3, #7
 800952a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	2b06      	cmp	r3, #6
 8009530:	d010      	beq.n	8009554 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f042 0201 	orr.w	r2, r2, #1
 8009540:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009542:	e007      	b.n	8009554 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f042 0201 	orr.w	r2, r2, #1
 8009552:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009554:	7dfb      	ldrb	r3, [r7, #23]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3718      	adds	r7, #24
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	08009969 	.word	0x08009969
 8009564:	08009a11 	.word	0x08009a11
 8009568:	080098d7 	.word	0x080098d7
 800956c:	40010000 	.word	0x40010000
 8009570:	40010400 	.word	0x40010400
 8009574:	40000400 	.word	0x40000400
 8009578:	40000800 	.word	0x40000800
 800957c:	40000c00 	.word	0x40000c00
 8009580:	40014000 	.word	0x40014000
 8009584:	40001800 	.word	0x40001800

08009588 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d101      	bne.n	80095a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80095a2:	2302      	movs	r3, #2
 80095a4:	e0ae      	b.n	8009704 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b0c      	cmp	r3, #12
 80095b2:	f200 809f 	bhi.w	80096f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80095b6:	a201      	add	r2, pc, #4	; (adr r2, 80095bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80095b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095bc:	080095f1 	.word	0x080095f1
 80095c0:	080096f5 	.word	0x080096f5
 80095c4:	080096f5 	.word	0x080096f5
 80095c8:	080096f5 	.word	0x080096f5
 80095cc:	08009631 	.word	0x08009631
 80095d0:	080096f5 	.word	0x080096f5
 80095d4:	080096f5 	.word	0x080096f5
 80095d8:	080096f5 	.word	0x080096f5
 80095dc:	08009673 	.word	0x08009673
 80095e0:	080096f5 	.word	0x080096f5
 80095e4:	080096f5 	.word	0x080096f5
 80095e8:	080096f5 	.word	0x080096f5
 80095ec:	080096b3 	.word	0x080096b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68b9      	ldr	r1, [r7, #8]
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 fade 	bl	8009bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	699a      	ldr	r2, [r3, #24]
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f042 0208 	orr.w	r2, r2, #8
 800960a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	699a      	ldr	r2, [r3, #24]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f022 0204 	bic.w	r2, r2, #4
 800961a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	6999      	ldr	r1, [r3, #24]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	691a      	ldr	r2, [r3, #16]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	430a      	orrs	r2, r1
 800962c:	619a      	str	r2, [r3, #24]
      break;
 800962e:	e064      	b.n	80096fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68b9      	ldr	r1, [r7, #8]
 8009636:	4618      	mov	r0, r3
 8009638:	f000 fb2e 	bl	8009c98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	699a      	ldr	r2, [r3, #24]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800964a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	699a      	ldr	r2, [r3, #24]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800965a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	6999      	ldr	r1, [r3, #24]
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	021a      	lsls	r2, r3, #8
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	430a      	orrs	r2, r1
 800966e:	619a      	str	r2, [r3, #24]
      break;
 8009670:	e043      	b.n	80096fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68b9      	ldr	r1, [r7, #8]
 8009678:	4618      	mov	r0, r3
 800967a:	f000 fb83 	bl	8009d84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	69da      	ldr	r2, [r3, #28]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f042 0208 	orr.w	r2, r2, #8
 800968c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	69da      	ldr	r2, [r3, #28]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f022 0204 	bic.w	r2, r2, #4
 800969c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	69d9      	ldr	r1, [r3, #28]
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	691a      	ldr	r2, [r3, #16]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	430a      	orrs	r2, r1
 80096ae:	61da      	str	r2, [r3, #28]
      break;
 80096b0:	e023      	b.n	80096fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68b9      	ldr	r1, [r7, #8]
 80096b8:	4618      	mov	r0, r3
 80096ba:	f000 fbd7 	bl	8009e6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	69da      	ldr	r2, [r3, #28]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	69da      	ldr	r2, [r3, #28]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	69d9      	ldr	r1, [r3, #28]
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	021a      	lsls	r2, r3, #8
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	430a      	orrs	r2, r1
 80096f0:	61da      	str	r2, [r3, #28]
      break;
 80096f2:	e002      	b.n	80096fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	75fb      	strb	r3, [r7, #23]
      break;
 80096f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009702:	7dfb      	ldrb	r3, [r7, #23]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3718      	adds	r7, #24
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009720:	2b01      	cmp	r3, #1
 8009722:	d101      	bne.n	8009728 <HAL_TIM_ConfigClockSource+0x1c>
 8009724:	2302      	movs	r3, #2
 8009726:	e0b4      	b.n	8009892 <HAL_TIM_ConfigClockSource+0x186>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2202      	movs	r2, #2
 8009734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800974e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009760:	d03e      	beq.n	80097e0 <HAL_TIM_ConfigClockSource+0xd4>
 8009762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009766:	f200 8087 	bhi.w	8009878 <HAL_TIM_ConfigClockSource+0x16c>
 800976a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800976e:	f000 8086 	beq.w	800987e <HAL_TIM_ConfigClockSource+0x172>
 8009772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009776:	d87f      	bhi.n	8009878 <HAL_TIM_ConfigClockSource+0x16c>
 8009778:	2b70      	cmp	r3, #112	; 0x70
 800977a:	d01a      	beq.n	80097b2 <HAL_TIM_ConfigClockSource+0xa6>
 800977c:	2b70      	cmp	r3, #112	; 0x70
 800977e:	d87b      	bhi.n	8009878 <HAL_TIM_ConfigClockSource+0x16c>
 8009780:	2b60      	cmp	r3, #96	; 0x60
 8009782:	d050      	beq.n	8009826 <HAL_TIM_ConfigClockSource+0x11a>
 8009784:	2b60      	cmp	r3, #96	; 0x60
 8009786:	d877      	bhi.n	8009878 <HAL_TIM_ConfigClockSource+0x16c>
 8009788:	2b50      	cmp	r3, #80	; 0x50
 800978a:	d03c      	beq.n	8009806 <HAL_TIM_ConfigClockSource+0xfa>
 800978c:	2b50      	cmp	r3, #80	; 0x50
 800978e:	d873      	bhi.n	8009878 <HAL_TIM_ConfigClockSource+0x16c>
 8009790:	2b40      	cmp	r3, #64	; 0x40
 8009792:	d058      	beq.n	8009846 <HAL_TIM_ConfigClockSource+0x13a>
 8009794:	2b40      	cmp	r3, #64	; 0x40
 8009796:	d86f      	bhi.n	8009878 <HAL_TIM_ConfigClockSource+0x16c>
 8009798:	2b30      	cmp	r3, #48	; 0x30
 800979a:	d064      	beq.n	8009866 <HAL_TIM_ConfigClockSource+0x15a>
 800979c:	2b30      	cmp	r3, #48	; 0x30
 800979e:	d86b      	bhi.n	8009878 <HAL_TIM_ConfigClockSource+0x16c>
 80097a0:	2b20      	cmp	r3, #32
 80097a2:	d060      	beq.n	8009866 <HAL_TIM_ConfigClockSource+0x15a>
 80097a4:	2b20      	cmp	r3, #32
 80097a6:	d867      	bhi.n	8009878 <HAL_TIM_ConfigClockSource+0x16c>
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d05c      	beq.n	8009866 <HAL_TIM_ConfigClockSource+0x15a>
 80097ac:	2b10      	cmp	r3, #16
 80097ae:	d05a      	beq.n	8009866 <HAL_TIM_ConfigClockSource+0x15a>
 80097b0:	e062      	b.n	8009878 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6818      	ldr	r0, [r3, #0]
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	6899      	ldr	r1, [r3, #8]
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	685a      	ldr	r2, [r3, #4]
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	f000 fc23 	bl	800a00c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80097d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	609a      	str	r2, [r3, #8]
      break;
 80097de:	e04f      	b.n	8009880 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6818      	ldr	r0, [r3, #0]
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	6899      	ldr	r1, [r3, #8]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	f000 fc0c 	bl	800a00c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	689a      	ldr	r2, [r3, #8]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009802:	609a      	str	r2, [r3, #8]
      break;
 8009804:	e03c      	b.n	8009880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6818      	ldr	r0, [r3, #0]
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	6859      	ldr	r1, [r3, #4]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	461a      	mov	r2, r3
 8009814:	f000 fb80 	bl	8009f18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2150      	movs	r1, #80	; 0x50
 800981e:	4618      	mov	r0, r3
 8009820:	f000 fbd9 	bl	8009fd6 <TIM_ITRx_SetConfig>
      break;
 8009824:	e02c      	b.n	8009880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6818      	ldr	r0, [r3, #0]
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	6859      	ldr	r1, [r3, #4]
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	461a      	mov	r2, r3
 8009834:	f000 fb9f 	bl	8009f76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2160      	movs	r1, #96	; 0x60
 800983e:	4618      	mov	r0, r3
 8009840:	f000 fbc9 	bl	8009fd6 <TIM_ITRx_SetConfig>
      break;
 8009844:	e01c      	b.n	8009880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6818      	ldr	r0, [r3, #0]
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	6859      	ldr	r1, [r3, #4]
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	461a      	mov	r2, r3
 8009854:	f000 fb60 	bl	8009f18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2140      	movs	r1, #64	; 0x40
 800985e:	4618      	mov	r0, r3
 8009860:	f000 fbb9 	bl	8009fd6 <TIM_ITRx_SetConfig>
      break;
 8009864:	e00c      	b.n	8009880 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4619      	mov	r1, r3
 8009870:	4610      	mov	r0, r2
 8009872:	f000 fbb0 	bl	8009fd6 <TIM_ITRx_SetConfig>
      break;
 8009876:	e003      	b.n	8009880 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	73fb      	strb	r3, [r7, #15]
      break;
 800987c:	e000      	b.n	8009880 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800987e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009890:	7bfb      	ldrb	r3, [r7, #15]
}
 8009892:	4618      	mov	r0, r3
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800989a:	b480      	push	{r7}
 800989c:	b083      	sub	sp, #12
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098a2:	bf00      	nop
 80098a4:	370c      	adds	r7, #12
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b083      	sub	sp, #12
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80098b6:	bf00      	nop
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr

080098c2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80098c2:	b480      	push	{r7}
 80098c4:	b083      	sub	sp, #12
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80098ca:	bf00      	nop
 80098cc:	370c      	adds	r7, #12
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b084      	sub	sp, #16
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d107      	bne.n	80098fe <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2201      	movs	r2, #1
 80098f2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2201      	movs	r2, #1
 80098f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098fc:	e02a      	b.n	8009954 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	429a      	cmp	r2, r3
 8009906:	d107      	bne.n	8009918 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2202      	movs	r2, #2
 800990c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009916:	e01d      	b.n	8009954 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	429a      	cmp	r2, r3
 8009920:	d107      	bne.n	8009932 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2204      	movs	r2, #4
 8009926:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009930:	e010      	b.n	8009954 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	429a      	cmp	r2, r3
 800993a:	d107      	bne.n	800994c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2208      	movs	r2, #8
 8009940:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800994a:	e003      	b.n	8009954 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f7ff ffb4 	bl	80098c2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2200      	movs	r2, #0
 800995e:	771a      	strb	r2, [r3, #28]
}
 8009960:	bf00      	nop
 8009962:	3710      	adds	r7, #16
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009974:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	429a      	cmp	r2, r3
 800997e:	d10b      	bne.n	8009998 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2201      	movs	r2, #1
 8009984:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	69db      	ldr	r3, [r3, #28]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d136      	bne.n	80099fc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009996:	e031      	b.n	80099fc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d10b      	bne.n	80099ba <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2202      	movs	r2, #2
 80099a6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	69db      	ldr	r3, [r3, #28]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d125      	bne.n	80099fc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099b8:	e020      	b.n	80099fc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d10b      	bne.n	80099dc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	2204      	movs	r2, #4
 80099c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d114      	bne.n	80099fc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099da:	e00f      	b.n	80099fc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d10a      	bne.n	80099fc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2208      	movs	r2, #8
 80099ea:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	69db      	ldr	r3, [r3, #28]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d103      	bne.n	80099fc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f7ff ff4c 	bl	800989a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	771a      	strb	r2, [r3, #28]
}
 8009a08:	bf00      	nop
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a1c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d103      	bne.n	8009a30 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	771a      	strb	r2, [r3, #28]
 8009a2e:	e019      	b.n	8009a64 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d103      	bne.n	8009a42 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2202      	movs	r2, #2
 8009a3e:	771a      	strb	r2, [r3, #28]
 8009a40:	e010      	b.n	8009a64 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d103      	bne.n	8009a54 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2204      	movs	r2, #4
 8009a50:	771a      	strb	r2, [r3, #28]
 8009a52:	e007      	b.n	8009a64 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d102      	bne.n	8009a64 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2208      	movs	r2, #8
 8009a62:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f7ff ff22 	bl	80098ae <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	771a      	strb	r2, [r3, #28]
}
 8009a70:	bf00      	nop
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a40      	ldr	r2, [pc, #256]	; (8009b8c <TIM_Base_SetConfig+0x114>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d013      	beq.n	8009ab8 <TIM_Base_SetConfig+0x40>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a96:	d00f      	beq.n	8009ab8 <TIM_Base_SetConfig+0x40>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a3d      	ldr	r2, [pc, #244]	; (8009b90 <TIM_Base_SetConfig+0x118>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d00b      	beq.n	8009ab8 <TIM_Base_SetConfig+0x40>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a3c      	ldr	r2, [pc, #240]	; (8009b94 <TIM_Base_SetConfig+0x11c>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d007      	beq.n	8009ab8 <TIM_Base_SetConfig+0x40>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a3b      	ldr	r2, [pc, #236]	; (8009b98 <TIM_Base_SetConfig+0x120>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d003      	beq.n	8009ab8 <TIM_Base_SetConfig+0x40>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a3a      	ldr	r2, [pc, #232]	; (8009b9c <TIM_Base_SetConfig+0x124>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d108      	bne.n	8009aca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a2f      	ldr	r2, [pc, #188]	; (8009b8c <TIM_Base_SetConfig+0x114>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d02b      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ad8:	d027      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a2c      	ldr	r2, [pc, #176]	; (8009b90 <TIM_Base_SetConfig+0x118>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d023      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a2b      	ldr	r2, [pc, #172]	; (8009b94 <TIM_Base_SetConfig+0x11c>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d01f      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	4a2a      	ldr	r2, [pc, #168]	; (8009b98 <TIM_Base_SetConfig+0x120>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d01b      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a29      	ldr	r2, [pc, #164]	; (8009b9c <TIM_Base_SetConfig+0x124>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d017      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a28      	ldr	r2, [pc, #160]	; (8009ba0 <TIM_Base_SetConfig+0x128>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d013      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4a27      	ldr	r2, [pc, #156]	; (8009ba4 <TIM_Base_SetConfig+0x12c>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d00f      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a26      	ldr	r2, [pc, #152]	; (8009ba8 <TIM_Base_SetConfig+0x130>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d00b      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a25      	ldr	r2, [pc, #148]	; (8009bac <TIM_Base_SetConfig+0x134>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d007      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a24      	ldr	r2, [pc, #144]	; (8009bb0 <TIM_Base_SetConfig+0x138>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d003      	beq.n	8009b2a <TIM_Base_SetConfig+0xb2>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a23      	ldr	r2, [pc, #140]	; (8009bb4 <TIM_Base_SetConfig+0x13c>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d108      	bne.n	8009b3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	695b      	ldr	r3, [r3, #20]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	689a      	ldr	r2, [r3, #8]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a0a      	ldr	r2, [pc, #40]	; (8009b8c <TIM_Base_SetConfig+0x114>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d003      	beq.n	8009b70 <TIM_Base_SetConfig+0xf8>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a0c      	ldr	r2, [pc, #48]	; (8009b9c <TIM_Base_SetConfig+0x124>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d103      	bne.n	8009b78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	691a      	ldr	r2, [r3, #16]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	615a      	str	r2, [r3, #20]
}
 8009b7e:	bf00      	nop
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	40010000 	.word	0x40010000
 8009b90:	40000400 	.word	0x40000400
 8009b94:	40000800 	.word	0x40000800
 8009b98:	40000c00 	.word	0x40000c00
 8009b9c:	40010400 	.word	0x40010400
 8009ba0:	40014000 	.word	0x40014000
 8009ba4:	40014400 	.word	0x40014400
 8009ba8:	40014800 	.word	0x40014800
 8009bac:	40001800 	.word	0x40001800
 8009bb0:	40001c00 	.word	0x40001c00
 8009bb4:	40002000 	.word	0x40002000

08009bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b087      	sub	sp, #28
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	f023 0201 	bic.w	r2, r3, #1
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f023 0303 	bic.w	r3, r3, #3
 8009bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	f023 0302 	bic.w	r3, r3, #2
 8009c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a20      	ldr	r2, [pc, #128]	; (8009c90 <TIM_OC1_SetConfig+0xd8>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d003      	beq.n	8009c1c <TIM_OC1_SetConfig+0x64>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a1f      	ldr	r2, [pc, #124]	; (8009c94 <TIM_OC1_SetConfig+0xdc>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d10c      	bne.n	8009c36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	f023 0308 	bic.w	r3, r3, #8
 8009c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	f023 0304 	bic.w	r3, r3, #4
 8009c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a15      	ldr	r2, [pc, #84]	; (8009c90 <TIM_OC1_SetConfig+0xd8>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d003      	beq.n	8009c46 <TIM_OC1_SetConfig+0x8e>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a14      	ldr	r2, [pc, #80]	; (8009c94 <TIM_OC1_SetConfig+0xdc>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d111      	bne.n	8009c6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	695b      	ldr	r3, [r3, #20]
 8009c5a:	693a      	ldr	r2, [r7, #16]
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	699b      	ldr	r3, [r3, #24]
 8009c64:	693a      	ldr	r2, [r7, #16]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	693a      	ldr	r2, [r7, #16]
 8009c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	685a      	ldr	r2, [r3, #4]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	697a      	ldr	r2, [r7, #20]
 8009c82:	621a      	str	r2, [r3, #32]
}
 8009c84:	bf00      	nop
 8009c86:	371c      	adds	r7, #28
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr
 8009c90:	40010000 	.word	0x40010000
 8009c94:	40010400 	.word	0x40010400

08009c98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b087      	sub	sp, #28
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a1b      	ldr	r3, [r3, #32]
 8009ca6:	f023 0210 	bic.w	r2, r3, #16
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	699b      	ldr	r3, [r3, #24]
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	021b      	lsls	r3, r3, #8
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	f023 0320 	bic.w	r3, r3, #32
 8009ce2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	689b      	ldr	r3, [r3, #8]
 8009ce8:	011b      	lsls	r3, r3, #4
 8009cea:	697a      	ldr	r2, [r7, #20]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a22      	ldr	r2, [pc, #136]	; (8009d7c <TIM_OC2_SetConfig+0xe4>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d003      	beq.n	8009d00 <TIM_OC2_SetConfig+0x68>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a21      	ldr	r2, [pc, #132]	; (8009d80 <TIM_OC2_SetConfig+0xe8>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d10d      	bne.n	8009d1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	011b      	lsls	r3, r3, #4
 8009d0e:	697a      	ldr	r2, [r7, #20]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a17      	ldr	r2, [pc, #92]	; (8009d7c <TIM_OC2_SetConfig+0xe4>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d003      	beq.n	8009d2c <TIM_OC2_SetConfig+0x94>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a16      	ldr	r2, [pc, #88]	; (8009d80 <TIM_OC2_SetConfig+0xe8>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d113      	bne.n	8009d54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	695b      	ldr	r3, [r3, #20]
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	693a      	ldr	r2, [r7, #16]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	693a      	ldr	r2, [r7, #16]
 8009d50:	4313      	orrs	r3, r2
 8009d52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	693a      	ldr	r2, [r7, #16]
 8009d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	685a      	ldr	r2, [r3, #4]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	697a      	ldr	r2, [r7, #20]
 8009d6c:	621a      	str	r2, [r3, #32]
}
 8009d6e:	bf00      	nop
 8009d70:	371c      	adds	r7, #28
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	40010000 	.word	0x40010000
 8009d80:	40010400 	.word	0x40010400

08009d84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b087      	sub	sp, #28
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a1b      	ldr	r3, [r3, #32]
 8009d92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
 8009d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	69db      	ldr	r3, [r3, #28]
 8009daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f023 0303 	bic.w	r3, r3, #3
 8009dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	68fa      	ldr	r2, [r7, #12]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	021b      	lsls	r3, r3, #8
 8009dd4:	697a      	ldr	r2, [r7, #20]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a21      	ldr	r2, [pc, #132]	; (8009e64 <TIM_OC3_SetConfig+0xe0>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d003      	beq.n	8009dea <TIM_OC3_SetConfig+0x66>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a20      	ldr	r2, [pc, #128]	; (8009e68 <TIM_OC3_SetConfig+0xe4>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d10d      	bne.n	8009e06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009df0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	021b      	lsls	r3, r3, #8
 8009df8:	697a      	ldr	r2, [r7, #20]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009e04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a16      	ldr	r2, [pc, #88]	; (8009e64 <TIM_OC3_SetConfig+0xe0>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d003      	beq.n	8009e16 <TIM_OC3_SetConfig+0x92>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a15      	ldr	r2, [pc, #84]	; (8009e68 <TIM_OC3_SetConfig+0xe4>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d113      	bne.n	8009e3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	695b      	ldr	r3, [r3, #20]
 8009e2a:	011b      	lsls	r3, r3, #4
 8009e2c:	693a      	ldr	r2, [r7, #16]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	699b      	ldr	r3, [r3, #24]
 8009e36:	011b      	lsls	r3, r3, #4
 8009e38:	693a      	ldr	r2, [r7, #16]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	685a      	ldr	r2, [r3, #4]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	697a      	ldr	r2, [r7, #20]
 8009e56:	621a      	str	r2, [r3, #32]
}
 8009e58:	bf00      	nop
 8009e5a:	371c      	adds	r7, #28
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr
 8009e64:	40010000 	.word	0x40010000
 8009e68:	40010400 	.word	0x40010400

08009e6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b087      	sub	sp, #28
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a1b      	ldr	r3, [r3, #32]
 8009e7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a1b      	ldr	r3, [r3, #32]
 8009e86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	69db      	ldr	r3, [r3, #28]
 8009e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ea2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	021b      	lsls	r3, r3, #8
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009eb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	031b      	lsls	r3, r3, #12
 8009ebe:	693a      	ldr	r2, [r7, #16]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a12      	ldr	r2, [pc, #72]	; (8009f10 <TIM_OC4_SetConfig+0xa4>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d003      	beq.n	8009ed4 <TIM_OC4_SetConfig+0x68>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a11      	ldr	r2, [pc, #68]	; (8009f14 <TIM_OC4_SetConfig+0xa8>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d109      	bne.n	8009ee8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	695b      	ldr	r3, [r3, #20]
 8009ee0:	019b      	lsls	r3, r3, #6
 8009ee2:	697a      	ldr	r2, [r7, #20]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	685a      	ldr	r2, [r3, #4]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	693a      	ldr	r2, [r7, #16]
 8009f00:	621a      	str	r2, [r3, #32]
}
 8009f02:	bf00      	nop
 8009f04:	371c      	adds	r7, #28
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr
 8009f0e:	bf00      	nop
 8009f10:	40010000 	.word	0x40010000
 8009f14:	40010400 	.word	0x40010400

08009f18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b087      	sub	sp, #28
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	6a1b      	ldr	r3, [r3, #32]
 8009f28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6a1b      	ldr	r3, [r3, #32]
 8009f2e:	f023 0201 	bic.w	r2, r3, #1
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	699b      	ldr	r3, [r3, #24]
 8009f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	011b      	lsls	r3, r3, #4
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f023 030a 	bic.w	r3, r3, #10
 8009f54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f56:	697a      	ldr	r2, [r7, #20]
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	693a      	ldr	r2, [r7, #16]
 8009f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	697a      	ldr	r2, [r7, #20]
 8009f68:	621a      	str	r2, [r3, #32]
}
 8009f6a:	bf00      	nop
 8009f6c:	371c      	adds	r7, #28
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f76:	b480      	push	{r7}
 8009f78:	b087      	sub	sp, #28
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	60f8      	str	r0, [r7, #12]
 8009f7e:	60b9      	str	r1, [r7, #8]
 8009f80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	f023 0210 	bic.w	r2, r3, #16
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6a1b      	ldr	r3, [r3, #32]
 8009f98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009fa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	031b      	lsls	r3, r3, #12
 8009fa6:	697a      	ldr	r2, [r7, #20]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009fb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	011b      	lsls	r3, r3, #4
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	697a      	ldr	r2, [r7, #20]
 8009fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	693a      	ldr	r2, [r7, #16]
 8009fc8:	621a      	str	r2, [r3, #32]
}
 8009fca:	bf00      	nop
 8009fcc:	371c      	adds	r7, #28
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr

08009fd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009fd6:	b480      	push	{r7}
 8009fd8:	b085      	sub	sp, #20
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	f043 0307 	orr.w	r3, r3, #7
 8009ff8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	609a      	str	r2, [r3, #8]
}
 800a000:	bf00      	nop
 800a002:	3714      	adds	r7, #20
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b087      	sub	sp, #28
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
 800a018:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a026:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	021a      	lsls	r2, r3, #8
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	431a      	orrs	r2, r3
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	4313      	orrs	r3, r2
 800a034:	697a      	ldr	r2, [r7, #20]
 800a036:	4313      	orrs	r3, r2
 800a038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	697a      	ldr	r2, [r7, #20]
 800a03e:	609a      	str	r2, [r3, #8]
}
 800a040:	bf00      	nop
 800a042:	371c      	adds	r7, #28
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b087      	sub	sp, #28
 800a050:	af00      	add	r7, sp, #0
 800a052:	60f8      	str	r0, [r7, #12]
 800a054:	60b9      	str	r1, [r7, #8]
 800a056:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	f003 031f 	and.w	r3, r3, #31
 800a05e:	2201      	movs	r2, #1
 800a060:	fa02 f303 	lsl.w	r3, r2, r3
 800a064:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	6a1a      	ldr	r2, [r3, #32]
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	43db      	mvns	r3, r3
 800a06e:	401a      	ands	r2, r3
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6a1a      	ldr	r2, [r3, #32]
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	f003 031f 	and.w	r3, r3, #31
 800a07e:	6879      	ldr	r1, [r7, #4]
 800a080:	fa01 f303 	lsl.w	r3, r1, r3
 800a084:	431a      	orrs	r2, r3
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	621a      	str	r2, [r3, #32]
}
 800a08a:	bf00      	nop
 800a08c:	371c      	adds	r7, #28
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
	...

0800a098 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d101      	bne.n	800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0ac:	2302      	movs	r3, #2
 800a0ae:	e05a      	b.n	800a166 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2202      	movs	r2, #2
 800a0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a21      	ldr	r2, [pc, #132]	; (800a174 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d022      	beq.n	800a13a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0fc:	d01d      	beq.n	800a13a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a1d      	ldr	r2, [pc, #116]	; (800a178 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d018      	beq.n	800a13a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a1b      	ldr	r2, [pc, #108]	; (800a17c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d013      	beq.n	800a13a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a1a      	ldr	r2, [pc, #104]	; (800a180 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d00e      	beq.n	800a13a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a18      	ldr	r2, [pc, #96]	; (800a184 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d009      	beq.n	800a13a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a17      	ldr	r2, [pc, #92]	; (800a188 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d004      	beq.n	800a13a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a15      	ldr	r2, [pc, #84]	; (800a18c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d10c      	bne.n	800a154 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a140:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	68ba      	ldr	r2, [r7, #8]
 800a148:	4313      	orrs	r3, r2
 800a14a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68ba      	ldr	r2, [r7, #8]
 800a152:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	40010000 	.word	0x40010000
 800a178:	40000400 	.word	0x40000400
 800a17c:	40000800 	.word	0x40000800
 800a180:	40000c00 	.word	0x40000c00
 800a184:	40010400 	.word	0x40010400
 800a188:	40014000 	.word	0x40014000
 800a18c:	40001800 	.word	0x40001800

0800a190 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d101      	bne.n	800a1a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e03f      	b.n	800a222 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d106      	bne.n	800a1bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7f9 feca 	bl	8003f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2224      	movs	r2, #36	; 0x24
 800a1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68da      	ldr	r2, [r3, #12]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a1d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f829 	bl	800a22c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	691a      	ldr	r2, [r3, #16]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a1e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	695a      	ldr	r2, [r3, #20]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a1f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68da      	ldr	r2, [r3, #12]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a208:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2220      	movs	r2, #32
 800a214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2220      	movs	r2, #32
 800a21c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3708      	adds	r7, #8
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
	...

0800a22c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a22c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a230:	b0c0      	sub	sp, #256	; 0x100
 800a232:	af00      	add	r7, sp, #0
 800a234:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a248:	68d9      	ldr	r1, [r3, #12]
 800a24a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	ea40 0301 	orr.w	r3, r0, r1
 800a254:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a25a:	689a      	ldr	r2, [r3, #8]
 800a25c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	431a      	orrs	r2, r3
 800a264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a268:	695b      	ldr	r3, [r3, #20]
 800a26a:	431a      	orrs	r2, r3
 800a26c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a270:	69db      	ldr	r3, [r3, #28]
 800a272:	4313      	orrs	r3, r2
 800a274:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a284:	f021 010c 	bic.w	r1, r1, #12
 800a288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a292:	430b      	orrs	r3, r1
 800a294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	695b      	ldr	r3, [r3, #20]
 800a29e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a2a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2a6:	6999      	ldr	r1, [r3, #24]
 800a2a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	ea40 0301 	orr.w	r3, r0, r1
 800a2b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a2b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	4b8f      	ldr	r3, [pc, #572]	; (800a4f8 <UART_SetConfig+0x2cc>)
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	d005      	beq.n	800a2cc <UART_SetConfig+0xa0>
 800a2c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	4b8d      	ldr	r3, [pc, #564]	; (800a4fc <UART_SetConfig+0x2d0>)
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d104      	bne.n	800a2d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a2cc:	f7fd fa86 	bl	80077dc <HAL_RCC_GetPCLK2Freq>
 800a2d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a2d4:	e003      	b.n	800a2de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a2d6:	f7fd fa6d 	bl	80077b4 <HAL_RCC_GetPCLK1Freq>
 800a2da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2e2:	69db      	ldr	r3, [r3, #28]
 800a2e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2e8:	f040 810c 	bne.w	800a504 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a2ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a2f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a2fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a2fe:	4622      	mov	r2, r4
 800a300:	462b      	mov	r3, r5
 800a302:	1891      	adds	r1, r2, r2
 800a304:	65b9      	str	r1, [r7, #88]	; 0x58
 800a306:	415b      	adcs	r3, r3
 800a308:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a30a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a30e:	4621      	mov	r1, r4
 800a310:	eb12 0801 	adds.w	r8, r2, r1
 800a314:	4629      	mov	r1, r5
 800a316:	eb43 0901 	adc.w	r9, r3, r1
 800a31a:	f04f 0200 	mov.w	r2, #0
 800a31e:	f04f 0300 	mov.w	r3, #0
 800a322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a32a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a32e:	4690      	mov	r8, r2
 800a330:	4699      	mov	r9, r3
 800a332:	4623      	mov	r3, r4
 800a334:	eb18 0303 	adds.w	r3, r8, r3
 800a338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a33c:	462b      	mov	r3, r5
 800a33e:	eb49 0303 	adc.w	r3, r9, r3
 800a342:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a352:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a356:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a35a:	460b      	mov	r3, r1
 800a35c:	18db      	adds	r3, r3, r3
 800a35e:	653b      	str	r3, [r7, #80]	; 0x50
 800a360:	4613      	mov	r3, r2
 800a362:	eb42 0303 	adc.w	r3, r2, r3
 800a366:	657b      	str	r3, [r7, #84]	; 0x54
 800a368:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a36c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a370:	f7f6 fbcc 	bl	8000b0c <__aeabi_uldivmod>
 800a374:	4602      	mov	r2, r0
 800a376:	460b      	mov	r3, r1
 800a378:	4b61      	ldr	r3, [pc, #388]	; (800a500 <UART_SetConfig+0x2d4>)
 800a37a:	fba3 2302 	umull	r2, r3, r3, r2
 800a37e:	095b      	lsrs	r3, r3, #5
 800a380:	011c      	lsls	r4, r3, #4
 800a382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a386:	2200      	movs	r2, #0
 800a388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a38c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a390:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a394:	4642      	mov	r2, r8
 800a396:	464b      	mov	r3, r9
 800a398:	1891      	adds	r1, r2, r2
 800a39a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a39c:	415b      	adcs	r3, r3
 800a39e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a3a4:	4641      	mov	r1, r8
 800a3a6:	eb12 0a01 	adds.w	sl, r2, r1
 800a3aa:	4649      	mov	r1, r9
 800a3ac:	eb43 0b01 	adc.w	fp, r3, r1
 800a3b0:	f04f 0200 	mov.w	r2, #0
 800a3b4:	f04f 0300 	mov.w	r3, #0
 800a3b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a3bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a3c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a3c4:	4692      	mov	sl, r2
 800a3c6:	469b      	mov	fp, r3
 800a3c8:	4643      	mov	r3, r8
 800a3ca:	eb1a 0303 	adds.w	r3, sl, r3
 800a3ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a3d2:	464b      	mov	r3, r9
 800a3d4:	eb4b 0303 	adc.w	r3, fp, r3
 800a3d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a3dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a3ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	18db      	adds	r3, r3, r3
 800a3f4:	643b      	str	r3, [r7, #64]	; 0x40
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	eb42 0303 	adc.w	r3, r2, r3
 800a3fc:	647b      	str	r3, [r7, #68]	; 0x44
 800a3fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a402:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a406:	f7f6 fb81 	bl	8000b0c <__aeabi_uldivmod>
 800a40a:	4602      	mov	r2, r0
 800a40c:	460b      	mov	r3, r1
 800a40e:	4611      	mov	r1, r2
 800a410:	4b3b      	ldr	r3, [pc, #236]	; (800a500 <UART_SetConfig+0x2d4>)
 800a412:	fba3 2301 	umull	r2, r3, r3, r1
 800a416:	095b      	lsrs	r3, r3, #5
 800a418:	2264      	movs	r2, #100	; 0x64
 800a41a:	fb02 f303 	mul.w	r3, r2, r3
 800a41e:	1acb      	subs	r3, r1, r3
 800a420:	00db      	lsls	r3, r3, #3
 800a422:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a426:	4b36      	ldr	r3, [pc, #216]	; (800a500 <UART_SetConfig+0x2d4>)
 800a428:	fba3 2302 	umull	r2, r3, r3, r2
 800a42c:	095b      	lsrs	r3, r3, #5
 800a42e:	005b      	lsls	r3, r3, #1
 800a430:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a434:	441c      	add	r4, r3
 800a436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a43a:	2200      	movs	r2, #0
 800a43c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a440:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a444:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a448:	4642      	mov	r2, r8
 800a44a:	464b      	mov	r3, r9
 800a44c:	1891      	adds	r1, r2, r2
 800a44e:	63b9      	str	r1, [r7, #56]	; 0x38
 800a450:	415b      	adcs	r3, r3
 800a452:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a454:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a458:	4641      	mov	r1, r8
 800a45a:	1851      	adds	r1, r2, r1
 800a45c:	6339      	str	r1, [r7, #48]	; 0x30
 800a45e:	4649      	mov	r1, r9
 800a460:	414b      	adcs	r3, r1
 800a462:	637b      	str	r3, [r7, #52]	; 0x34
 800a464:	f04f 0200 	mov.w	r2, #0
 800a468:	f04f 0300 	mov.w	r3, #0
 800a46c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a470:	4659      	mov	r1, fp
 800a472:	00cb      	lsls	r3, r1, #3
 800a474:	4651      	mov	r1, sl
 800a476:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a47a:	4651      	mov	r1, sl
 800a47c:	00ca      	lsls	r2, r1, #3
 800a47e:	4610      	mov	r0, r2
 800a480:	4619      	mov	r1, r3
 800a482:	4603      	mov	r3, r0
 800a484:	4642      	mov	r2, r8
 800a486:	189b      	adds	r3, r3, r2
 800a488:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a48c:	464b      	mov	r3, r9
 800a48e:	460a      	mov	r2, r1
 800a490:	eb42 0303 	adc.w	r3, r2, r3
 800a494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a4a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a4a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	18db      	adds	r3, r3, r3
 800a4b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	eb42 0303 	adc.w	r3, r2, r3
 800a4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a4be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a4c2:	f7f6 fb23 	bl	8000b0c <__aeabi_uldivmod>
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	4b0d      	ldr	r3, [pc, #52]	; (800a500 <UART_SetConfig+0x2d4>)
 800a4cc:	fba3 1302 	umull	r1, r3, r3, r2
 800a4d0:	095b      	lsrs	r3, r3, #5
 800a4d2:	2164      	movs	r1, #100	; 0x64
 800a4d4:	fb01 f303 	mul.w	r3, r1, r3
 800a4d8:	1ad3      	subs	r3, r2, r3
 800a4da:	00db      	lsls	r3, r3, #3
 800a4dc:	3332      	adds	r3, #50	; 0x32
 800a4de:	4a08      	ldr	r2, [pc, #32]	; (800a500 <UART_SetConfig+0x2d4>)
 800a4e0:	fba2 2303 	umull	r2, r3, r2, r3
 800a4e4:	095b      	lsrs	r3, r3, #5
 800a4e6:	f003 0207 	and.w	r2, r3, #7
 800a4ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4422      	add	r2, r4
 800a4f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a4f4:	e105      	b.n	800a702 <UART_SetConfig+0x4d6>
 800a4f6:	bf00      	nop
 800a4f8:	40011000 	.word	0x40011000
 800a4fc:	40011400 	.word	0x40011400
 800a500:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a508:	2200      	movs	r2, #0
 800a50a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a50e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a512:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a516:	4642      	mov	r2, r8
 800a518:	464b      	mov	r3, r9
 800a51a:	1891      	adds	r1, r2, r2
 800a51c:	6239      	str	r1, [r7, #32]
 800a51e:	415b      	adcs	r3, r3
 800a520:	627b      	str	r3, [r7, #36]	; 0x24
 800a522:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a526:	4641      	mov	r1, r8
 800a528:	1854      	adds	r4, r2, r1
 800a52a:	4649      	mov	r1, r9
 800a52c:	eb43 0501 	adc.w	r5, r3, r1
 800a530:	f04f 0200 	mov.w	r2, #0
 800a534:	f04f 0300 	mov.w	r3, #0
 800a538:	00eb      	lsls	r3, r5, #3
 800a53a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a53e:	00e2      	lsls	r2, r4, #3
 800a540:	4614      	mov	r4, r2
 800a542:	461d      	mov	r5, r3
 800a544:	4643      	mov	r3, r8
 800a546:	18e3      	adds	r3, r4, r3
 800a548:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a54c:	464b      	mov	r3, r9
 800a54e:	eb45 0303 	adc.w	r3, r5, r3
 800a552:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a562:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a566:	f04f 0200 	mov.w	r2, #0
 800a56a:	f04f 0300 	mov.w	r3, #0
 800a56e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a572:	4629      	mov	r1, r5
 800a574:	008b      	lsls	r3, r1, #2
 800a576:	4621      	mov	r1, r4
 800a578:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a57c:	4621      	mov	r1, r4
 800a57e:	008a      	lsls	r2, r1, #2
 800a580:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a584:	f7f6 fac2 	bl	8000b0c <__aeabi_uldivmod>
 800a588:	4602      	mov	r2, r0
 800a58a:	460b      	mov	r3, r1
 800a58c:	4b60      	ldr	r3, [pc, #384]	; (800a710 <UART_SetConfig+0x4e4>)
 800a58e:	fba3 2302 	umull	r2, r3, r3, r2
 800a592:	095b      	lsrs	r3, r3, #5
 800a594:	011c      	lsls	r4, r3, #4
 800a596:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a59a:	2200      	movs	r2, #0
 800a59c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a5a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a5a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a5a8:	4642      	mov	r2, r8
 800a5aa:	464b      	mov	r3, r9
 800a5ac:	1891      	adds	r1, r2, r2
 800a5ae:	61b9      	str	r1, [r7, #24]
 800a5b0:	415b      	adcs	r3, r3
 800a5b2:	61fb      	str	r3, [r7, #28]
 800a5b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a5b8:	4641      	mov	r1, r8
 800a5ba:	1851      	adds	r1, r2, r1
 800a5bc:	6139      	str	r1, [r7, #16]
 800a5be:	4649      	mov	r1, r9
 800a5c0:	414b      	adcs	r3, r1
 800a5c2:	617b      	str	r3, [r7, #20]
 800a5c4:	f04f 0200 	mov.w	r2, #0
 800a5c8:	f04f 0300 	mov.w	r3, #0
 800a5cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a5d0:	4659      	mov	r1, fp
 800a5d2:	00cb      	lsls	r3, r1, #3
 800a5d4:	4651      	mov	r1, sl
 800a5d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5da:	4651      	mov	r1, sl
 800a5dc:	00ca      	lsls	r2, r1, #3
 800a5de:	4610      	mov	r0, r2
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	4642      	mov	r2, r8
 800a5e6:	189b      	adds	r3, r3, r2
 800a5e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a5ec:	464b      	mov	r3, r9
 800a5ee:	460a      	mov	r2, r1
 800a5f0:	eb42 0303 	adc.w	r3, r2, r3
 800a5f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a5f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	67bb      	str	r3, [r7, #120]	; 0x78
 800a602:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a604:	f04f 0200 	mov.w	r2, #0
 800a608:	f04f 0300 	mov.w	r3, #0
 800a60c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a610:	4649      	mov	r1, r9
 800a612:	008b      	lsls	r3, r1, #2
 800a614:	4641      	mov	r1, r8
 800a616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a61a:	4641      	mov	r1, r8
 800a61c:	008a      	lsls	r2, r1, #2
 800a61e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a622:	f7f6 fa73 	bl	8000b0c <__aeabi_uldivmod>
 800a626:	4602      	mov	r2, r0
 800a628:	460b      	mov	r3, r1
 800a62a:	4b39      	ldr	r3, [pc, #228]	; (800a710 <UART_SetConfig+0x4e4>)
 800a62c:	fba3 1302 	umull	r1, r3, r3, r2
 800a630:	095b      	lsrs	r3, r3, #5
 800a632:	2164      	movs	r1, #100	; 0x64
 800a634:	fb01 f303 	mul.w	r3, r1, r3
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	011b      	lsls	r3, r3, #4
 800a63c:	3332      	adds	r3, #50	; 0x32
 800a63e:	4a34      	ldr	r2, [pc, #208]	; (800a710 <UART_SetConfig+0x4e4>)
 800a640:	fba2 2303 	umull	r2, r3, r2, r3
 800a644:	095b      	lsrs	r3, r3, #5
 800a646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a64a:	441c      	add	r4, r3
 800a64c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a650:	2200      	movs	r2, #0
 800a652:	673b      	str	r3, [r7, #112]	; 0x70
 800a654:	677a      	str	r2, [r7, #116]	; 0x74
 800a656:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a65a:	4642      	mov	r2, r8
 800a65c:	464b      	mov	r3, r9
 800a65e:	1891      	adds	r1, r2, r2
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	415b      	adcs	r3, r3
 800a664:	60fb      	str	r3, [r7, #12]
 800a666:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a66a:	4641      	mov	r1, r8
 800a66c:	1851      	adds	r1, r2, r1
 800a66e:	6039      	str	r1, [r7, #0]
 800a670:	4649      	mov	r1, r9
 800a672:	414b      	adcs	r3, r1
 800a674:	607b      	str	r3, [r7, #4]
 800a676:	f04f 0200 	mov.w	r2, #0
 800a67a:	f04f 0300 	mov.w	r3, #0
 800a67e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a682:	4659      	mov	r1, fp
 800a684:	00cb      	lsls	r3, r1, #3
 800a686:	4651      	mov	r1, sl
 800a688:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a68c:	4651      	mov	r1, sl
 800a68e:	00ca      	lsls	r2, r1, #3
 800a690:	4610      	mov	r0, r2
 800a692:	4619      	mov	r1, r3
 800a694:	4603      	mov	r3, r0
 800a696:	4642      	mov	r2, r8
 800a698:	189b      	adds	r3, r3, r2
 800a69a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a69c:	464b      	mov	r3, r9
 800a69e:	460a      	mov	r2, r1
 800a6a0:	eb42 0303 	adc.w	r3, r2, r3
 800a6a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	663b      	str	r3, [r7, #96]	; 0x60
 800a6b0:	667a      	str	r2, [r7, #100]	; 0x64
 800a6b2:	f04f 0200 	mov.w	r2, #0
 800a6b6:	f04f 0300 	mov.w	r3, #0
 800a6ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a6be:	4649      	mov	r1, r9
 800a6c0:	008b      	lsls	r3, r1, #2
 800a6c2:	4641      	mov	r1, r8
 800a6c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6c8:	4641      	mov	r1, r8
 800a6ca:	008a      	lsls	r2, r1, #2
 800a6cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a6d0:	f7f6 fa1c 	bl	8000b0c <__aeabi_uldivmod>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	4b0d      	ldr	r3, [pc, #52]	; (800a710 <UART_SetConfig+0x4e4>)
 800a6da:	fba3 1302 	umull	r1, r3, r3, r2
 800a6de:	095b      	lsrs	r3, r3, #5
 800a6e0:	2164      	movs	r1, #100	; 0x64
 800a6e2:	fb01 f303 	mul.w	r3, r1, r3
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	011b      	lsls	r3, r3, #4
 800a6ea:	3332      	adds	r3, #50	; 0x32
 800a6ec:	4a08      	ldr	r2, [pc, #32]	; (800a710 <UART_SetConfig+0x4e4>)
 800a6ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a6f2:	095b      	lsrs	r3, r3, #5
 800a6f4:	f003 020f 	and.w	r2, r3, #15
 800a6f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4422      	add	r2, r4
 800a700:	609a      	str	r2, [r3, #8]
}
 800a702:	bf00      	nop
 800a704:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a708:	46bd      	mov	sp, r7
 800a70a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a70e:	bf00      	nop
 800a710:	51eb851f 	.word	0x51eb851f

0800a714 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d123      	bne.n	800a76e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a72e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	6851      	ldr	r1, [r2, #4]
 800a736:	683a      	ldr	r2, [r7, #0]
 800a738:	6892      	ldr	r2, [r2, #8]
 800a73a:	4311      	orrs	r1, r2
 800a73c:	683a      	ldr	r2, [r7, #0]
 800a73e:	68d2      	ldr	r2, [r2, #12]
 800a740:	4311      	orrs	r1, r2
 800a742:	683a      	ldr	r2, [r7, #0]
 800a744:	6912      	ldr	r2, [r2, #16]
 800a746:	4311      	orrs	r1, r2
 800a748:	683a      	ldr	r2, [r7, #0]
 800a74a:	6952      	ldr	r2, [r2, #20]
 800a74c:	4311      	orrs	r1, r2
 800a74e:	683a      	ldr	r2, [r7, #0]
 800a750:	6992      	ldr	r2, [r2, #24]
 800a752:	4311      	orrs	r1, r2
 800a754:	683a      	ldr	r2, [r7, #0]
 800a756:	69d2      	ldr	r2, [r2, #28]
 800a758:	4311      	orrs	r1, r2
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	6a12      	ldr	r2, [r2, #32]
 800a75e:	4311      	orrs	r1, r2
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a764:	430a      	orrs	r2, r1
 800a766:	431a      	orrs	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	601a      	str	r2, [r3, #0]
 800a76c:	e028      	b.n	800a7c0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	69d9      	ldr	r1, [r3, #28]
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	6a1b      	ldr	r3, [r3, #32]
 800a77e:	4319      	orrs	r1, r3
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a784:	430b      	orrs	r3, r1
 800a786:	431a      	orrs	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a794:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a798:	683a      	ldr	r2, [r7, #0]
 800a79a:	6851      	ldr	r1, [r2, #4]
 800a79c:	683a      	ldr	r2, [r7, #0]
 800a79e:	6892      	ldr	r2, [r2, #8]
 800a7a0:	4311      	orrs	r1, r2
 800a7a2:	683a      	ldr	r2, [r7, #0]
 800a7a4:	68d2      	ldr	r2, [r2, #12]
 800a7a6:	4311      	orrs	r1, r2
 800a7a8:	683a      	ldr	r2, [r7, #0]
 800a7aa:	6912      	ldr	r2, [r2, #16]
 800a7ac:	4311      	orrs	r1, r2
 800a7ae:	683a      	ldr	r2, [r7, #0]
 800a7b0:	6952      	ldr	r2, [r2, #20]
 800a7b2:	4311      	orrs	r1, r2
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	6992      	ldr	r2, [r2, #24]
 800a7b8:	430a      	orrs	r2, r1
 800a7ba:	431a      	orrs	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	370c      	adds	r7, #12
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a7ce:	b480      	push	{r7}
 800a7d0:	b085      	sub	sp, #20
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	60f8      	str	r0, [r7, #12]
 800a7d6:	60b9      	str	r1, [r7, #8]
 800a7d8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d128      	bne.n	800a832 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	689b      	ldr	r3, [r3, #8]
 800a7e4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	1e59      	subs	r1, r3, #1
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	685b      	ldr	r3, [r3, #4]
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	011b      	lsls	r3, r3, #4
 800a7f6:	4319      	orrs	r1, r3
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	3b01      	subs	r3, #1
 800a7fe:	021b      	lsls	r3, r3, #8
 800a800:	4319      	orrs	r1, r3
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	3b01      	subs	r3, #1
 800a808:	031b      	lsls	r3, r3, #12
 800a80a:	4319      	orrs	r1, r3
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	691b      	ldr	r3, [r3, #16]
 800a810:	3b01      	subs	r3, #1
 800a812:	041b      	lsls	r3, r3, #16
 800a814:	4319      	orrs	r1, r3
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	3b01      	subs	r3, #1
 800a81c:	051b      	lsls	r3, r3, #20
 800a81e:	4319      	orrs	r1, r3
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	699b      	ldr	r3, [r3, #24]
 800a824:	3b01      	subs	r3, #1
 800a826:	061b      	lsls	r3, r3, #24
 800a828:	430b      	orrs	r3, r1
 800a82a:	431a      	orrs	r2, r3
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	609a      	str	r2, [r3, #8]
 800a830:	e02f      	b.n	800a892 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a83a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	68d2      	ldr	r2, [r2, #12]
 800a842:	3a01      	subs	r2, #1
 800a844:	0311      	lsls	r1, r2, #12
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	6952      	ldr	r2, [r2, #20]
 800a84a:	3a01      	subs	r2, #1
 800a84c:	0512      	lsls	r2, r2, #20
 800a84e:	430a      	orrs	r2, r1
 800a850:	431a      	orrs	r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	1e59      	subs	r1, r3, #1
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	3b01      	subs	r3, #1
 800a86a:	011b      	lsls	r3, r3, #4
 800a86c:	4319      	orrs	r1, r3
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	3b01      	subs	r3, #1
 800a874:	021b      	lsls	r3, r3, #8
 800a876:	4319      	orrs	r1, r3
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	691b      	ldr	r3, [r3, #16]
 800a87c:	3b01      	subs	r3, #1
 800a87e:	041b      	lsls	r3, r3, #16
 800a880:	4319      	orrs	r1, r3
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	699b      	ldr	r3, [r3, #24]
 800a886:	3b01      	subs	r3, #1
 800a888:	061b      	lsls	r3, r3, #24
 800a88a:	430b      	orrs	r3, r1
 800a88c:	431a      	orrs	r2, r3
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3714      	adds	r7, #20
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	691b      	ldr	r3, [r3, #16]
 800a8b4:	0d9b      	lsrs	r3, r3, #22
 800a8b6:	059b      	lsls	r3, r3, #22
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	6811      	ldr	r1, [r2, #0]
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	6852      	ldr	r2, [r2, #4]
 800a8c0:	4311      	orrs	r1, r2
 800a8c2:	68ba      	ldr	r2, [r7, #8]
 800a8c4:	6892      	ldr	r2, [r2, #8]
 800a8c6:	3a01      	subs	r2, #1
 800a8c8:	0152      	lsls	r2, r2, #5
 800a8ca:	4311      	orrs	r1, r2
 800a8cc:	68ba      	ldr	r2, [r7, #8]
 800a8ce:	68d2      	ldr	r2, [r2, #12]
 800a8d0:	0252      	lsls	r2, r2, #9
 800a8d2:	430a      	orrs	r2, r1
 800a8d4:	431a      	orrs	r2, r3
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800a8da:	f7f9 fe61 	bl	80045a0 <HAL_GetTick>
 800a8de:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a8e0:	e010      	b.n	800a904 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e8:	d00c      	beq.n	800a904 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d007      	beq.n	800a900 <FMC_SDRAM_SendCommand+0x60>
 800a8f0:	f7f9 fe56 	bl	80045a0 <HAL_GetTick>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	1ad3      	subs	r3, r2, r3
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d201      	bcs.n	800a904 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800a900:	2303      	movs	r3, #3
 800a902:	e006      	b.n	800a912 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	699b      	ldr	r3, [r3, #24]
 800a908:	f003 0320 	and.w	r3, r3, #32
 800a90c:	2b20      	cmp	r3, #32
 800a90e:	d0e8      	beq.n	800a8e2 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3718      	adds	r7, #24
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a91a:	b084      	sub	sp, #16
 800a91c:	b480      	push	{r7}
 800a91e:	b085      	sub	sp, #20
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	f107 001c 	add.w	r0, r7, #28
 800a928:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a92c:	2300      	movs	r3, #0
 800a92e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a930:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a932:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a934:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a938:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a93c:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a940:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a944:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a946:	68fa      	ldr	r2, [r7, #12]
 800a948:	4313      	orrs	r3, r2
 800a94a:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a954:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	431a      	orrs	r2, r3
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3714      	adds	r7, #20
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	b004      	add	sp, #16
 800a96e:	4770      	bx	lr

0800a970 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a97e:	4618      	mov	r0, r3
 800a980:	370c      	adds	r7, #12
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr

0800a98a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a98a:	b480      	push	{r7}
 800a98c:	b083      	sub	sp, #12
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2203      	movs	r2, #3
 800a996:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	370c      	adds	r7, #12
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b083      	sub	sp, #12
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 0303 	and.w	r3, r3, #3
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	370c      	adds	r7, #12
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr

0800a9c2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a9c2:	b480      	push	{r7}
 800a9c4:	b085      	sub	sp, #20
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
 800a9ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a9e0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a9e6:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a9ec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a9ee:	68fa      	ldr	r2, [r7, #12]
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a9fc:	f023 030f 	bic.w	r3, r3, #15
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	431a      	orrs	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3714      	adds	r7, #20
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr

0800aa16 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800aa16:	b480      	push	{r7}
 800aa18:	b083      	sub	sp, #12
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	b2db      	uxtb	r3, r3
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	3314      	adds	r3, #20
 800aa3e:	461a      	mov	r2, r3
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	4413      	add	r3, r2
 800aa44:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
}  
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3714      	adds	r7, #20
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr

0800aa56 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800aa56:	b480      	push	{r7}
 800aa58:	b085      	sub	sp, #20
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	6078      	str	r0, [r7, #4]
 800aa5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aa60:	2300      	movs	r3, #0
 800aa62:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	685a      	ldr	r2, [r3, #4]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa7c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800aa82:	431a      	orrs	r2, r3
                       Data->DPSM);
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800aa88:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa94:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	431a      	orrs	r2, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aaa0:	2300      	movs	r3, #0

}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800aaae:	b580      	push	{r7, lr}
 800aab0:	b088      	sub	sp, #32
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800aabc:	2310      	movs	r3, #16
 800aabe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aac0:	2340      	movs	r3, #64	; 0x40
 800aac2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aac4:	2300      	movs	r3, #0
 800aac6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aacc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aace:	f107 0308 	add.w	r3, r7, #8
 800aad2:	4619      	mov	r1, r3
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f7ff ff74 	bl	800a9c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800aada:	f241 3288 	movw	r2, #5000	; 0x1388
 800aade:	2110      	movs	r1, #16
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 fa19 	bl	800af18 <SDMMC_GetCmdResp1>
 800aae6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aae8:	69fb      	ldr	r3, [r7, #28]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3720      	adds	r7, #32
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b088      	sub	sp, #32
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
 800aafa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ab00:	2311      	movs	r3, #17
 800ab02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab04:	2340      	movs	r3, #64	; 0x40
 800ab06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab12:	f107 0308 	add.w	r3, r7, #8
 800ab16:	4619      	mov	r1, r3
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f7ff ff52 	bl	800a9c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ab1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab22:	2111      	movs	r1, #17
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 f9f7 	bl	800af18 <SDMMC_GetCmdResp1>
 800ab2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab2c:	69fb      	ldr	r3, [r7, #28]
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3720      	adds	r7, #32
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b088      	sub	sp, #32
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
 800ab3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ab44:	2312      	movs	r3, #18
 800ab46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab48:	2340      	movs	r3, #64	; 0x40
 800ab4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab56:	f107 0308 	add.w	r3, r7, #8
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f7ff ff30 	bl	800a9c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ab62:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab66:	2112      	movs	r1, #18
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 f9d5 	bl	800af18 <SDMMC_GetCmdResp1>
 800ab6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab70:	69fb      	ldr	r3, [r7, #28]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3720      	adds	r7, #32
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b088      	sub	sp, #32
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
 800ab82:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ab88:	2318      	movs	r3, #24
 800ab8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ab8c:	2340      	movs	r3, #64	; 0x40
 800ab8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ab90:	2300      	movs	r3, #0
 800ab92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ab94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ab9a:	f107 0308 	add.w	r3, r7, #8
 800ab9e:	4619      	mov	r1, r3
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f7ff ff0e 	bl	800a9c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800aba6:	f241 3288 	movw	r2, #5000	; 0x1388
 800abaa:	2118      	movs	r1, #24
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 f9b3 	bl	800af18 <SDMMC_GetCmdResp1>
 800abb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abb4:	69fb      	ldr	r3, [r7, #28]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3720      	adds	r7, #32
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b088      	sub	sp, #32
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800abcc:	2319      	movs	r3, #25
 800abce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800abd0:	2340      	movs	r3, #64	; 0x40
 800abd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800abd4:	2300      	movs	r3, #0
 800abd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800abd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abdc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800abde:	f107 0308 	add.w	r3, r7, #8
 800abe2:	4619      	mov	r1, r3
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f7ff feec 	bl	800a9c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800abea:	f241 3288 	movw	r2, #5000	; 0x1388
 800abee:	2119      	movs	r1, #25
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 f991 	bl	800af18 <SDMMC_GetCmdResp1>
 800abf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abf8:	69fb      	ldr	r3, [r7, #28]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3720      	adds	r7, #32
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
	...

0800ac04 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b088      	sub	sp, #32
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ac10:	230c      	movs	r3, #12
 800ac12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac14:	2340      	movs	r3, #64	; 0x40
 800ac16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac22:	f107 0308 	add.w	r3, r7, #8
 800ac26:	4619      	mov	r1, r3
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f7ff feca 	bl	800a9c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ac2e:	4a05      	ldr	r2, [pc, #20]	; (800ac44 <SDMMC_CmdStopTransfer+0x40>)
 800ac30:	210c      	movs	r1, #12
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 f970 	bl	800af18 <SDMMC_GetCmdResp1>
 800ac38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac3a:	69fb      	ldr	r3, [r7, #28]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3720      	adds	r7, #32
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	05f5e100 	.word	0x05f5e100

0800ac48 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b08a      	sub	sp, #40	; 0x28
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ac58:	2307      	movs	r3, #7
 800ac5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ac5c:	2340      	movs	r3, #64	; 0x40
 800ac5e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ac60:	2300      	movs	r3, #0
 800ac62:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ac64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac68:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ac6a:	f107 0310 	add.w	r3, r7, #16
 800ac6e:	4619      	mov	r1, r3
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f7ff fea6 	bl	800a9c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ac76:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac7a:	2107      	movs	r1, #7
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f000 f94b 	bl	800af18 <SDMMC_GetCmdResp1>
 800ac82:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3728      	adds	r7, #40	; 0x28
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b088      	sub	sp, #32
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ac96:	2300      	movs	r3, #0
 800ac98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aca2:	2300      	movs	r3, #0
 800aca4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800acac:	f107 0308 	add.w	r3, r7, #8
 800acb0:	4619      	mov	r1, r3
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f7ff fe85 	bl	800a9c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 fb65 	bl	800b388 <SDMMC_GetCmdError>
 800acbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acc0:	69fb      	ldr	r3, [r7, #28]
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3720      	adds	r7, #32
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800acca:	b580      	push	{r7, lr}
 800accc:	b088      	sub	sp, #32
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800acd2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800acd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800acd8:	2308      	movs	r3, #8
 800acda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800acdc:	2340      	movs	r3, #64	; 0x40
 800acde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ace0:	2300      	movs	r3, #0
 800ace2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ace4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ace8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800acea:	f107 0308 	add.w	r3, r7, #8
 800acee:	4619      	mov	r1, r3
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7ff fe66 	bl	800a9c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 faf8 	bl	800b2ec <SDMMC_GetCmdResp7>
 800acfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acfe:	69fb      	ldr	r3, [r7, #28]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3720      	adds	r7, #32
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b088      	sub	sp, #32
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ad16:	2337      	movs	r3, #55	; 0x37
 800ad18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad1a:	2340      	movs	r3, #64	; 0x40
 800ad1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad28:	f107 0308 	add.w	r3, r7, #8
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f7ff fe47 	bl	800a9c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ad34:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad38:	2137      	movs	r1, #55	; 0x37
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 f8ec 	bl	800af18 <SDMMC_GetCmdResp1>
 800ad40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad42:	69fb      	ldr	r3, [r7, #28]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3720      	adds	r7, #32
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b088      	sub	sp, #32
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ad62:	2329      	movs	r3, #41	; 0x29
 800ad64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad66:	2340      	movs	r3, #64	; 0x40
 800ad68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad74:	f107 0308 	add.w	r3, r7, #8
 800ad78:	4619      	mov	r1, r3
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f7ff fe21 	bl	800a9c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f9ff 	bl	800b184 <SDMMC_GetCmdResp3>
 800ad86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad88:	69fb      	ldr	r3, [r7, #28]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3720      	adds	r7, #32
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b088      	sub	sp, #32
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
 800ad9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ada0:	2306      	movs	r3, #6
 800ada2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ada4:	2340      	movs	r3, #64	; 0x40
 800ada6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ada8:	2300      	movs	r3, #0
 800adaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800adac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800adb2:	f107 0308 	add.w	r3, r7, #8
 800adb6:	4619      	mov	r1, r3
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f7ff fe02 	bl	800a9c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800adbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800adc2:	2106      	movs	r1, #6
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 f8a7 	bl	800af18 <SDMMC_GetCmdResp1>
 800adca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adcc:	69fb      	ldr	r3, [r7, #28]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3720      	adds	r7, #32
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}

0800add6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800add6:	b580      	push	{r7, lr}
 800add8:	b088      	sub	sp, #32
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800adde:	2300      	movs	r3, #0
 800ade0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ade2:	2333      	movs	r3, #51	; 0x33
 800ade4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ade6:	2340      	movs	r3, #64	; 0x40
 800ade8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800adea:	2300      	movs	r3, #0
 800adec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800adee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adf2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800adf4:	f107 0308 	add.w	r3, r7, #8
 800adf8:	4619      	mov	r1, r3
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f7ff fde1 	bl	800a9c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800ae00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae04:	2133      	movs	r1, #51	; 0x33
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 f886 	bl	800af18 <SDMMC_GetCmdResp1>
 800ae0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae0e:	69fb      	ldr	r3, [r7, #28]
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3720      	adds	r7, #32
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b088      	sub	sp, #32
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ae20:	2300      	movs	r3, #0
 800ae22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ae24:	2302      	movs	r3, #2
 800ae26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ae28:	23c0      	movs	r3, #192	; 0xc0
 800ae2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae36:	f107 0308 	add.w	r3, r7, #8
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7ff fdc0 	bl	800a9c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 f956 	bl	800b0f4 <SDMMC_GetCmdResp2>
 800ae48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae4a:	69fb      	ldr	r3, [r7, #28]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3720      	adds	r7, #32
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b088      	sub	sp, #32
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ae62:	2309      	movs	r3, #9
 800ae64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ae66:	23c0      	movs	r3, #192	; 0xc0
 800ae68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae74:	f107 0308 	add.w	r3, r7, #8
 800ae78:	4619      	mov	r1, r3
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7ff fda1 	bl	800a9c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f937 	bl	800b0f4 <SDMMC_GetCmdResp2>
 800ae86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae88:	69fb      	ldr	r3, [r7, #28]
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3720      	adds	r7, #32
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b088      	sub	sp, #32
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
 800ae9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800aea0:	2303      	movs	r3, #3
 800aea2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aea4:	2340      	movs	r3, #64	; 0x40
 800aea6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aeac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aeb2:	f107 0308 	add.w	r3, r7, #8
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f7ff fd82 	bl	800a9c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800aebe:	683a      	ldr	r2, [r7, #0]
 800aec0:	2103      	movs	r1, #3
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 f99c 	bl	800b200 <SDMMC_GetCmdResp6>
 800aec8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aeca:	69fb      	ldr	r3, [r7, #28]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3720      	adds	r7, #32
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b088      	sub	sp, #32
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800aee2:	230d      	movs	r3, #13
 800aee4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800aee6:	2340      	movs	r3, #64	; 0x40
 800aee8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aeea:	2300      	movs	r3, #0
 800aeec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aeee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aef2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aef4:	f107 0308 	add.w	r3, r7, #8
 800aef8:	4619      	mov	r1, r3
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f7ff fd61 	bl	800a9c2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800af00:	f241 3288 	movw	r2, #5000	; 0x1388
 800af04:	210d      	movs	r1, #13
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 f806 	bl	800af18 <SDMMC_GetCmdResp1>
 800af0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af0e:	69fb      	ldr	r3, [r7, #28]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3720      	adds	r7, #32
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b088      	sub	sp, #32
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	460b      	mov	r3, r1
 800af22:	607a      	str	r2, [r7, #4]
 800af24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800af26:	4b70      	ldr	r3, [pc, #448]	; (800b0e8 <SDMMC_GetCmdResp1+0x1d0>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a70      	ldr	r2, [pc, #448]	; (800b0ec <SDMMC_GetCmdResp1+0x1d4>)
 800af2c:	fba2 2303 	umull	r2, r3, r2, r3
 800af30:	0a5a      	lsrs	r2, r3, #9
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	fb02 f303 	mul.w	r3, r2, r3
 800af38:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	1e5a      	subs	r2, r3, #1
 800af3e:	61fa      	str	r2, [r7, #28]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d102      	bne.n	800af4a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af48:	e0c9      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af4e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800af56:	2b00      	cmp	r3, #0
 800af58:	d0ef      	beq.n	800af3a <SDMMC_GetCmdResp1+0x22>
 800af5a:	69bb      	ldr	r3, [r7, #24]
 800af5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1ea      	bne.n	800af3a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af68:	f003 0304 	and.w	r3, r3, #4
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d004      	beq.n	800af7a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2204      	movs	r2, #4
 800af74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af76:	2304      	movs	r3, #4
 800af78:	e0b1      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af7e:	f003 0301 	and.w	r3, r3, #1
 800af82:	2b00      	cmp	r3, #0
 800af84:	d004      	beq.n	800af90 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2201      	movs	r2, #1
 800af8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af8c:	2301      	movs	r3, #1
 800af8e:	e0a6      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	22c5      	movs	r2, #197	; 0xc5
 800af94:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800af96:	68f8      	ldr	r0, [r7, #12]
 800af98:	f7ff fd3d 	bl	800aa16 <SDIO_GetCommandResponse>
 800af9c:	4603      	mov	r3, r0
 800af9e:	461a      	mov	r2, r3
 800afa0:	7afb      	ldrb	r3, [r7, #11]
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d001      	beq.n	800afaa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afa6:	2301      	movs	r3, #1
 800afa8:	e099      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800afaa:	2100      	movs	r1, #0
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f7ff fd3f 	bl	800aa30 <SDIO_GetResponse>
 800afb2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800afb4:	697a      	ldr	r2, [r7, #20]
 800afb6:	4b4e      	ldr	r3, [pc, #312]	; (800b0f0 <SDMMC_GetCmdResp1+0x1d8>)
 800afb8:	4013      	ands	r3, r2
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d101      	bne.n	800afc2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800afbe:	2300      	movs	r3, #0
 800afc0:	e08d      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	da02      	bge.n	800afce <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800afc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800afcc:	e087      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d001      	beq.n	800afdc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800afd8:	2340      	movs	r3, #64	; 0x40
 800afda:	e080      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d001      	beq.n	800afea <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800afe6:	2380      	movs	r3, #128	; 0x80
 800afe8:	e079      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d002      	beq.n	800affa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800aff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aff8:	e071      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b000:	2b00      	cmp	r3, #0
 800b002:	d002      	beq.n	800b00a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b004:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b008:	e069      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b010:	2b00      	cmp	r3, #0
 800b012:	d002      	beq.n	800b01a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b018:	e061      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b020:	2b00      	cmp	r3, #0
 800b022:	d002      	beq.n	800b02a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b024:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b028:	e059      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b030:	2b00      	cmp	r3, #0
 800b032:	d002      	beq.n	800b03a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b038:	e051      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b048:	e049      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b050:	2b00      	cmp	r3, #0
 800b052:	d002      	beq.n	800b05a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b054:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b058:	e041      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b060:	2b00      	cmp	r3, #0
 800b062:	d002      	beq.n	800b06a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b064:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b068:	e039      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b070:	2b00      	cmp	r3, #0
 800b072:	d002      	beq.n	800b07a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b078:	e031      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b080:	2b00      	cmp	r3, #0
 800b082:	d002      	beq.n	800b08a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b084:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b088:	e029      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b090:	2b00      	cmp	r3, #0
 800b092:	d002      	beq.n	800b09a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b094:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b098:	e021      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d002      	beq.n	800b0aa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b0a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b0a8:	e019      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d002      	beq.n	800b0ba <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b0b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b0b8:	e011      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d002      	beq.n	800b0ca <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b0c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b0c8:	e009      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	f003 0308 	and.w	r3, r3, #8
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d002      	beq.n	800b0da <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b0d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b0d8:	e001      	b.n	800b0de <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b0da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3720      	adds	r7, #32
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	20000008 	.word	0x20000008
 800b0ec:	10624dd3 	.word	0x10624dd3
 800b0f0:	fdffe008 	.word	0xfdffe008

0800b0f4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b085      	sub	sp, #20
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b0fc:	4b1f      	ldr	r3, [pc, #124]	; (800b17c <SDMMC_GetCmdResp2+0x88>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a1f      	ldr	r2, [pc, #124]	; (800b180 <SDMMC_GetCmdResp2+0x8c>)
 800b102:	fba2 2303 	umull	r2, r3, r2, r3
 800b106:	0a5b      	lsrs	r3, r3, #9
 800b108:	f241 3288 	movw	r2, #5000	; 0x1388
 800b10c:	fb02 f303 	mul.w	r3, r2, r3
 800b110:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	1e5a      	subs	r2, r3, #1
 800b116:	60fa      	str	r2, [r7, #12]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d102      	bne.n	800b122 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b11c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b120:	e026      	b.n	800b170 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b126:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d0ef      	beq.n	800b112 <SDMMC_GetCmdResp2+0x1e>
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d1ea      	bne.n	800b112 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b140:	f003 0304 	and.w	r3, r3, #4
 800b144:	2b00      	cmp	r3, #0
 800b146:	d004      	beq.n	800b152 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2204      	movs	r2, #4
 800b14c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b14e:	2304      	movs	r3, #4
 800b150:	e00e      	b.n	800b170 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b156:	f003 0301 	and.w	r3, r3, #1
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d004      	beq.n	800b168 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2201      	movs	r2, #1
 800b162:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b164:	2301      	movs	r3, #1
 800b166:	e003      	b.n	800b170 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	22c5      	movs	r2, #197	; 0xc5
 800b16c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b16e:	2300      	movs	r3, #0
}
 800b170:	4618      	mov	r0, r3
 800b172:	3714      	adds	r7, #20
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	20000008 	.word	0x20000008
 800b180:	10624dd3 	.word	0x10624dd3

0800b184 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b18c:	4b1a      	ldr	r3, [pc, #104]	; (800b1f8 <SDMMC_GetCmdResp3+0x74>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a1a      	ldr	r2, [pc, #104]	; (800b1fc <SDMMC_GetCmdResp3+0x78>)
 800b192:	fba2 2303 	umull	r2, r3, r2, r3
 800b196:	0a5b      	lsrs	r3, r3, #9
 800b198:	f241 3288 	movw	r2, #5000	; 0x1388
 800b19c:	fb02 f303 	mul.w	r3, r2, r3
 800b1a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	1e5a      	subs	r2, r3, #1
 800b1a6:	60fa      	str	r2, [r7, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d102      	bne.n	800b1b2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1b0:	e01b      	b.n	800b1ea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d0ef      	beq.n	800b1a2 <SDMMC_GetCmdResp3+0x1e>
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1ea      	bne.n	800b1a2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d0:	f003 0304 	and.w	r3, r3, #4
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d004      	beq.n	800b1e2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2204      	movs	r2, #4
 800b1dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1de:	2304      	movs	r3, #4
 800b1e0:	e003      	b.n	800b1ea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	22c5      	movs	r2, #197	; 0xc5
 800b1e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3714      	adds	r7, #20
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	20000008 	.word	0x20000008
 800b1fc:	10624dd3 	.word	0x10624dd3

0800b200 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b088      	sub	sp, #32
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	460b      	mov	r3, r1
 800b20a:	607a      	str	r2, [r7, #4]
 800b20c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b20e:	4b35      	ldr	r3, [pc, #212]	; (800b2e4 <SDMMC_GetCmdResp6+0xe4>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a35      	ldr	r2, [pc, #212]	; (800b2e8 <SDMMC_GetCmdResp6+0xe8>)
 800b214:	fba2 2303 	umull	r2, r3, r2, r3
 800b218:	0a5b      	lsrs	r3, r3, #9
 800b21a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b21e:	fb02 f303 	mul.w	r3, r2, r3
 800b222:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	1e5a      	subs	r2, r3, #1
 800b228:	61fa      	str	r2, [r7, #28]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d102      	bne.n	800b234 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b22e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b232:	e052      	b.n	800b2da <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b238:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b240:	2b00      	cmp	r3, #0
 800b242:	d0ef      	beq.n	800b224 <SDMMC_GetCmdResp6+0x24>
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d1ea      	bne.n	800b224 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b252:	f003 0304 	and.w	r3, r3, #4
 800b256:	2b00      	cmp	r3, #0
 800b258:	d004      	beq.n	800b264 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2204      	movs	r2, #4
 800b25e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b260:	2304      	movs	r3, #4
 800b262:	e03a      	b.n	800b2da <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b268:	f003 0301 	and.w	r3, r3, #1
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d004      	beq.n	800b27a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2201      	movs	r2, #1
 800b274:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b276:	2301      	movs	r3, #1
 800b278:	e02f      	b.n	800b2da <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b27a:	68f8      	ldr	r0, [r7, #12]
 800b27c:	f7ff fbcb 	bl	800aa16 <SDIO_GetCommandResponse>
 800b280:	4603      	mov	r3, r0
 800b282:	461a      	mov	r2, r3
 800b284:	7afb      	ldrb	r3, [r7, #11]
 800b286:	4293      	cmp	r3, r2
 800b288:	d001      	beq.n	800b28e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b28a:	2301      	movs	r3, #1
 800b28c:	e025      	b.n	800b2da <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	22c5      	movs	r2, #197	; 0xc5
 800b292:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b294:	2100      	movs	r1, #0
 800b296:	68f8      	ldr	r0, [r7, #12]
 800b298:	f7ff fbca 	bl	800aa30 <SDIO_GetResponse>
 800b29c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d106      	bne.n	800b2b6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	0c1b      	lsrs	r3, r3, #16
 800b2ac:	b29a      	uxth	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	e011      	b.n	800b2da <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d002      	beq.n	800b2c6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b2c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2c4:	e009      	b.n	800b2da <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d002      	beq.n	800b2d6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b2d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2d4:	e001      	b.n	800b2da <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b2d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3720      	adds	r7, #32
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	20000008 	.word	0x20000008
 800b2e8:	10624dd3 	.word	0x10624dd3

0800b2ec <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b2f4:	4b22      	ldr	r3, [pc, #136]	; (800b380 <SDMMC_GetCmdResp7+0x94>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a22      	ldr	r2, [pc, #136]	; (800b384 <SDMMC_GetCmdResp7+0x98>)
 800b2fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b2fe:	0a5b      	lsrs	r3, r3, #9
 800b300:	f241 3288 	movw	r2, #5000	; 0x1388
 800b304:	fb02 f303 	mul.w	r3, r2, r3
 800b308:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	1e5a      	subs	r2, r3, #1
 800b30e:	60fa      	str	r2, [r7, #12]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d102      	bne.n	800b31a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b314:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b318:	e02c      	b.n	800b374 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b31e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b326:	2b00      	cmp	r3, #0
 800b328:	d0ef      	beq.n	800b30a <SDMMC_GetCmdResp7+0x1e>
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b330:	2b00      	cmp	r3, #0
 800b332:	d1ea      	bne.n	800b30a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b338:	f003 0304 	and.w	r3, r3, #4
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d004      	beq.n	800b34a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2204      	movs	r2, #4
 800b344:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b346:	2304      	movs	r3, #4
 800b348:	e014      	b.n	800b374 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b34e:	f003 0301 	and.w	r3, r3, #1
 800b352:	2b00      	cmp	r3, #0
 800b354:	d004      	beq.n	800b360 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2201      	movs	r2, #1
 800b35a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b35c:	2301      	movs	r3, #1
 800b35e:	e009      	b.n	800b374 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d002      	beq.n	800b372 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2240      	movs	r2, #64	; 0x40
 800b370:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b372:	2300      	movs	r3, #0
  
}
 800b374:	4618      	mov	r0, r3
 800b376:	3714      	adds	r7, #20
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr
 800b380:	20000008 	.word	0x20000008
 800b384:	10624dd3 	.word	0x10624dd3

0800b388 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b390:	4b11      	ldr	r3, [pc, #68]	; (800b3d8 <SDMMC_GetCmdError+0x50>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a11      	ldr	r2, [pc, #68]	; (800b3dc <SDMMC_GetCmdError+0x54>)
 800b396:	fba2 2303 	umull	r2, r3, r2, r3
 800b39a:	0a5b      	lsrs	r3, r3, #9
 800b39c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3a0:	fb02 f303 	mul.w	r3, r2, r3
 800b3a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	1e5a      	subs	r2, r3, #1
 800b3aa:	60fa      	str	r2, [r7, #12]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d102      	bne.n	800b3b6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3b4:	e009      	b.n	800b3ca <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d0f1      	beq.n	800b3a6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	22c5      	movs	r2, #197	; 0xc5
 800b3c6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b3c8:	2300      	movs	r3, #0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3714      	adds	r7, #20
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	20000008 	.word	0x20000008
 800b3dc:	10624dd3 	.word	0x10624dd3

0800b3e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b3e0:	b084      	sub	sp, #16
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b084      	sub	sp, #16
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
 800b3ea:	f107 001c 	add.w	r0, r7, #28
 800b3ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d122      	bne.n	800b43e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b40c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b422:	2b01      	cmp	r3, #1
 800b424:	d105      	bne.n	800b432 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 faa2 	bl	800b97c <USB_CoreReset>
 800b438:	4603      	mov	r3, r0
 800b43a:	73fb      	strb	r3, [r7, #15]
 800b43c:	e01a      	b.n	800b474 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 fa96 	bl	800b97c <USB_CoreReset>
 800b450:	4603      	mov	r3, r0
 800b452:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b456:	2b00      	cmp	r3, #0
 800b458:	d106      	bne.n	800b468 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b45e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	639a      	str	r2, [r3, #56]	; 0x38
 800b466:	e005      	b.n	800b474 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b476:	2b01      	cmp	r3, #1
 800b478:	d10b      	bne.n	800b492 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	f043 0206 	orr.w	r2, r3, #6
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	f043 0220 	orr.w	r2, r3, #32
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b492:	7bfb      	ldrb	r3, [r7, #15]
}
 800b494:	4618      	mov	r0, r3
 800b496:	3710      	adds	r7, #16
 800b498:	46bd      	mov	sp, r7
 800b49a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b49e:	b004      	add	sp, #16
 800b4a0:	4770      	bx	lr

0800b4a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b083      	sub	sp, #12
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	f023 0201 	bic.w	r2, r3, #1
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	370c      	adds	r7, #12
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b4e0:	78fb      	ldrb	r3, [r7, #3]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d115      	bne.n	800b512 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b4f2:	2001      	movs	r0, #1
 800b4f4:	f7f9 f860 	bl	80045b8 <HAL_Delay>
      ms++;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 fa2e 	bl	800b960 <USB_GetMode>
 800b504:	4603      	mov	r3, r0
 800b506:	2b01      	cmp	r3, #1
 800b508:	d01e      	beq.n	800b548 <USB_SetCurrentMode+0x84>
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2b31      	cmp	r3, #49	; 0x31
 800b50e:	d9f0      	bls.n	800b4f2 <USB_SetCurrentMode+0x2e>
 800b510:	e01a      	b.n	800b548 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b512:	78fb      	ldrb	r3, [r7, #3]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d115      	bne.n	800b544 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b524:	2001      	movs	r0, #1
 800b526:	f7f9 f847 	bl	80045b8 <HAL_Delay>
      ms++;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	3301      	adds	r3, #1
 800b52e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 fa15 	bl	800b960 <USB_GetMode>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d005      	beq.n	800b548 <USB_SetCurrentMode+0x84>
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2b31      	cmp	r3, #49	; 0x31
 800b540:	d9f0      	bls.n	800b524 <USB_SetCurrentMode+0x60>
 800b542:	e001      	b.n	800b548 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b544:	2301      	movs	r3, #1
 800b546:	e005      	b.n	800b554 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2b32      	cmp	r3, #50	; 0x32
 800b54c:	d101      	bne.n	800b552 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	e000      	b.n	800b554 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b552:	2300      	movs	r3, #0
}
 800b554:	4618      	mov	r0, r3
 800b556:	3710      	adds	r7, #16
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b55c:	b084      	sub	sp, #16
 800b55e:	b580      	push	{r7, lr}
 800b560:	b086      	sub	sp, #24
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b56a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b56e:	2300      	movs	r3, #0
 800b570:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b576:	2300      	movs	r3, #0
 800b578:	613b      	str	r3, [r7, #16]
 800b57a:	e009      	b.n	800b590 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b57c:	687a      	ldr	r2, [r7, #4]
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	3340      	adds	r3, #64	; 0x40
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	4413      	add	r3, r2
 800b586:	2200      	movs	r2, #0
 800b588:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	3301      	adds	r3, #1
 800b58e:	613b      	str	r3, [r7, #16]
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	2b0e      	cmp	r3, #14
 800b594:	d9f2      	bls.n	800b57c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d11c      	bne.n	800b5d6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5a2:	685b      	ldr	r3, [r3, #4]
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5aa:	f043 0302 	orr.w	r3, r3, #2
 800b5ae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5cc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	639a      	str	r2, [r3, #56]	; 0x38
 800b5d4:	e00b      	b.n	800b5ee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b600:	4619      	mov	r1, r3
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b608:	461a      	mov	r2, r3
 800b60a:	680b      	ldr	r3, [r1, #0]
 800b60c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b610:	2b01      	cmp	r3, #1
 800b612:	d10c      	bne.n	800b62e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b616:	2b00      	cmp	r3, #0
 800b618:	d104      	bne.n	800b624 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b61a:	2100      	movs	r1, #0
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 f965 	bl	800b8ec <USB_SetDevSpeed>
 800b622:	e008      	b.n	800b636 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b624:	2101      	movs	r1, #1
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f000 f960 	bl	800b8ec <USB_SetDevSpeed>
 800b62c:	e003      	b.n	800b636 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b62e:	2103      	movs	r1, #3
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f95b 	bl	800b8ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b636:	2110      	movs	r1, #16
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f8f3 	bl	800b824 <USB_FlushTxFifo>
 800b63e:	4603      	mov	r3, r0
 800b640:	2b00      	cmp	r3, #0
 800b642:	d001      	beq.n	800b648 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800b644:	2301      	movs	r3, #1
 800b646:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 f91f 	bl	800b88c <USB_FlushRxFifo>
 800b64e:	4603      	mov	r3, r0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d001      	beq.n	800b658 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800b654:	2301      	movs	r3, #1
 800b656:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b65e:	461a      	mov	r2, r3
 800b660:	2300      	movs	r3, #0
 800b662:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b66a:	461a      	mov	r2, r3
 800b66c:	2300      	movs	r3, #0
 800b66e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b676:	461a      	mov	r2, r3
 800b678:	2300      	movs	r3, #0
 800b67a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b67c:	2300      	movs	r3, #0
 800b67e:	613b      	str	r3, [r7, #16]
 800b680:	e043      	b.n	800b70a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	015a      	lsls	r2, r3, #5
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	4413      	add	r3, r2
 800b68a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b694:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b698:	d118      	bne.n	800b6cc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d10a      	bne.n	800b6b6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	015a      	lsls	r2, r3, #5
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	4413      	add	r3, r2
 800b6a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b6b2:	6013      	str	r3, [r2, #0]
 800b6b4:	e013      	b.n	800b6de <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	015a      	lsls	r2, r3, #5
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	4413      	add	r3, r2
 800b6be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b6c8:	6013      	str	r3, [r2, #0]
 800b6ca:	e008      	b.n	800b6de <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	015a      	lsls	r2, r3, #5
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6d8:	461a      	mov	r2, r3
 800b6da:	2300      	movs	r3, #0
 800b6dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	015a      	lsls	r2, r3, #5
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	015a      	lsls	r2, r3, #5
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	4413      	add	r3, r2
 800b6f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b702:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	3301      	adds	r3, #1
 800b708:	613b      	str	r3, [r7, #16]
 800b70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70c:	693a      	ldr	r2, [r7, #16]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d3b7      	bcc.n	800b682 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b712:	2300      	movs	r3, #0
 800b714:	613b      	str	r3, [r7, #16]
 800b716:	e043      	b.n	800b7a0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	015a      	lsls	r2, r3, #5
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	4413      	add	r3, r2
 800b720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b72a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b72e:	d118      	bne.n	800b762 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d10a      	bne.n	800b74c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	015a      	lsls	r2, r3, #5
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	4413      	add	r3, r2
 800b73e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b742:	461a      	mov	r2, r3
 800b744:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b748:	6013      	str	r3, [r2, #0]
 800b74a:	e013      	b.n	800b774 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	015a      	lsls	r2, r3, #5
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	4413      	add	r3, r2
 800b754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b758:	461a      	mov	r2, r3
 800b75a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b75e:	6013      	str	r3, [r2, #0]
 800b760:	e008      	b.n	800b774 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	015a      	lsls	r2, r3, #5
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	4413      	add	r3, r2
 800b76a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b76e:	461a      	mov	r2, r3
 800b770:	2300      	movs	r3, #0
 800b772:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	015a      	lsls	r2, r3, #5
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	4413      	add	r3, r2
 800b77c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b780:	461a      	mov	r2, r3
 800b782:	2300      	movs	r3, #0
 800b784:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	015a      	lsls	r2, r3, #5
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	4413      	add	r3, r2
 800b78e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b792:	461a      	mov	r2, r3
 800b794:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b798:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	3301      	adds	r3, #1
 800b79e:	613b      	str	r3, [r7, #16]
 800b7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a2:	693a      	ldr	r2, [r7, #16]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d3b7      	bcc.n	800b718 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7ae:	691b      	ldr	r3, [r3, #16]
 800b7b0:	68fa      	ldr	r2, [r7, #12]
 800b7b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b7c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d105      	bne.n	800b7dc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	699b      	ldr	r3, [r3, #24]
 800b7d4:	f043 0210 	orr.w	r2, r3, #16
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	699a      	ldr	r2, [r3, #24]
 800b7e0:	4b0f      	ldr	r3, [pc, #60]	; (800b820 <USB_DevInit+0x2c4>)
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b7e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d005      	beq.n	800b7fa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	699b      	ldr	r3, [r3, #24]
 800b7f2:	f043 0208 	orr.w	r2, r3, #8
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b7fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d107      	bne.n	800b810 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	699b      	ldr	r3, [r3, #24]
 800b804:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b808:	f043 0304 	orr.w	r3, r3, #4
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b810:	7dfb      	ldrb	r3, [r7, #23]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3718      	adds	r7, #24
 800b816:	46bd      	mov	sp, r7
 800b818:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b81c:	b004      	add	sp, #16
 800b81e:	4770      	bx	lr
 800b820:	803c3800 	.word	0x803c3800

0800b824 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b824:	b480      	push	{r7}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b82e:	2300      	movs	r3, #0
 800b830:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	3301      	adds	r3, #1
 800b836:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	4a13      	ldr	r2, [pc, #76]	; (800b888 <USB_FlushTxFifo+0x64>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d901      	bls.n	800b844 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b840:	2303      	movs	r3, #3
 800b842:	e01b      	b.n	800b87c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	691b      	ldr	r3, [r3, #16]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	daf2      	bge.n	800b832 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b84c:	2300      	movs	r3, #0
 800b84e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	019b      	lsls	r3, r3, #6
 800b854:	f043 0220 	orr.w	r2, r3, #32
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	3301      	adds	r3, #1
 800b860:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	4a08      	ldr	r2, [pc, #32]	; (800b888 <USB_FlushTxFifo+0x64>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d901      	bls.n	800b86e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b86a:	2303      	movs	r3, #3
 800b86c:	e006      	b.n	800b87c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	691b      	ldr	r3, [r3, #16]
 800b872:	f003 0320 	and.w	r3, r3, #32
 800b876:	2b20      	cmp	r3, #32
 800b878:	d0f0      	beq.n	800b85c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3714      	adds	r7, #20
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr
 800b888:	00030d40 	.word	0x00030d40

0800b88c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b894:	2300      	movs	r3, #0
 800b896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	3301      	adds	r3, #1
 800b89c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	4a11      	ldr	r2, [pc, #68]	; (800b8e8 <USB_FlushRxFifo+0x5c>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d901      	bls.n	800b8aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b8a6:	2303      	movs	r3, #3
 800b8a8:	e018      	b.n	800b8dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	691b      	ldr	r3, [r3, #16]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	daf2      	bge.n	800b898 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2210      	movs	r2, #16
 800b8ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	4a08      	ldr	r2, [pc, #32]	; (800b8e8 <USB_FlushRxFifo+0x5c>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d901      	bls.n	800b8ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b8ca:	2303      	movs	r3, #3
 800b8cc:	e006      	b.n	800b8dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	691b      	ldr	r3, [r3, #16]
 800b8d2:	f003 0310 	and.w	r3, r3, #16
 800b8d6:	2b10      	cmp	r3, #16
 800b8d8:	d0f0      	beq.n	800b8bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3714      	adds	r7, #20
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr
 800b8e8:	00030d40 	.word	0x00030d40

0800b8ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	78fb      	ldrb	r3, [r7, #3]
 800b906:	68f9      	ldr	r1, [r7, #12]
 800b908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b90c:	4313      	orrs	r3, r2
 800b90e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b910:	2300      	movs	r3, #0
}
 800b912:	4618      	mov	r0, r3
 800b914:	3714      	adds	r7, #20
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr

0800b91e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b91e:	b480      	push	{r7}
 800b920:	b085      	sub	sp, #20
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	68fa      	ldr	r2, [r7, #12]
 800b934:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b938:	f023 0303 	bic.w	r3, r3, #3
 800b93c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b944:	685b      	ldr	r3, [r3, #4]
 800b946:	68fa      	ldr	r2, [r7, #12]
 800b948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b94c:	f043 0302 	orr.w	r3, r3, #2
 800b950:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b952:	2300      	movs	r3, #0
}
 800b954:	4618      	mov	r0, r3
 800b956:	3714      	adds	r7, #20
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	695b      	ldr	r3, [r3, #20]
 800b96c:	f003 0301 	and.w	r3, r3, #1
}
 800b970:	4618      	mov	r0, r3
 800b972:	370c      	adds	r7, #12
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b984:	2300      	movs	r3, #0
 800b986:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	3301      	adds	r3, #1
 800b98c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	4a13      	ldr	r2, [pc, #76]	; (800b9e0 <USB_CoreReset+0x64>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d901      	bls.n	800b99a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b996:	2303      	movs	r3, #3
 800b998:	e01b      	b.n	800b9d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	daf2      	bge.n	800b988 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	f043 0201 	orr.w	r2, r3, #1
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	4a09      	ldr	r2, [pc, #36]	; (800b9e0 <USB_CoreReset+0x64>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d901      	bls.n	800b9c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b9c0:	2303      	movs	r3, #3
 800b9c2:	e006      	b.n	800b9d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	691b      	ldr	r3, [r3, #16]
 800b9c8:	f003 0301 	and.w	r3, r3, #1
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d0f0      	beq.n	800b9b2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3714      	adds	r7, #20
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr
 800b9de:	bf00      	nop
 800b9e0:	00030d40 	.word	0x00030d40

0800b9e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b9e8:	4904      	ldr	r1, [pc, #16]	; (800b9fc <MX_FATFS_Init+0x18>)
 800b9ea:	4805      	ldr	r0, [pc, #20]	; (800ba00 <MX_FATFS_Init+0x1c>)
 800b9ec:	f000 fa8a 	bl	800bf04 <FATFS_LinkDriver>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	4b03      	ldr	r3, [pc, #12]	; (800ba04 <MX_FATFS_Init+0x20>)
 800b9f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b9f8:	bf00      	nop
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	20011188 	.word	0x20011188
 800ba00:	0802facc 	.word	0x0802facc
 800ba04:	20011184 	.word	0x20011184

0800ba08 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ba12:	f000 f87b 	bl	800bb0c <BSP_SD_IsDetected>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d001      	beq.n	800ba20 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	e012      	b.n	800ba46 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ba20:	480b      	ldr	r0, [pc, #44]	; (800ba50 <BSP_SD_Init+0x48>)
 800ba22:	f7fc f8e1 	bl	8007be8 <HAL_SD_Init>
 800ba26:	4603      	mov	r3, r0
 800ba28:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ba2a:	79fb      	ldrb	r3, [r7, #7]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d109      	bne.n	800ba44 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ba30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ba34:	4806      	ldr	r0, [pc, #24]	; (800ba50 <BSP_SD_Init+0x48>)
 800ba36:	f7fc fd29 	bl	800848c <HAL_SD_ConfigWideBusOperation>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d001      	beq.n	800ba44 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ba44:	79fb      	ldrb	r3, [r7, #7]
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	20010fd0 	.word	0x20010fd0

0800ba54 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ba60:	2300      	movs	r3, #0
 800ba62:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	68ba      	ldr	r2, [r7, #8]
 800ba68:	68f9      	ldr	r1, [r7, #12]
 800ba6a:	4806      	ldr	r0, [pc, #24]	; (800ba84 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ba6c:	f7fc f96c 	bl	8007d48 <HAL_SD_ReadBlocks_DMA>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d001      	beq.n	800ba7a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ba76:	2301      	movs	r3, #1
 800ba78:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ba7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3718      	adds	r7, #24
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	20010fd0 	.word	0x20010fd0

0800ba88 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b086      	sub	sp, #24
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ba94:	2300      	movs	r3, #0
 800ba96:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	68ba      	ldr	r2, [r7, #8]
 800ba9c:	68f9      	ldr	r1, [r7, #12]
 800ba9e:	4806      	ldr	r0, [pc, #24]	; (800bab8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800baa0:	f7fc fa34 	bl	8007f0c <HAL_SD_WriteBlocks_DMA>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d001      	beq.n	800baae <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800baae:	7dfb      	ldrb	r3, [r7, #23]
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3718      	adds	r7, #24
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	20010fd0 	.word	0x20010fd0

0800babc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bac0:	4805      	ldr	r0, [pc, #20]	; (800bad8 <BSP_SD_GetCardState+0x1c>)
 800bac2:	f7fc fd7d 	bl	80085c0 <HAL_SD_GetCardState>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b04      	cmp	r3, #4
 800baca:	bf14      	ite	ne
 800bacc:	2301      	movne	r3, #1
 800bace:	2300      	moveq	r3, #0
 800bad0:	b2db      	uxtb	r3, r3
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	20010fd0 	.word	0x20010fd0

0800badc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800bae4:	6879      	ldr	r1, [r7, #4]
 800bae6:	4803      	ldr	r0, [pc, #12]	; (800baf4 <BSP_SD_GetCardInfo+0x18>)
 800bae8:	f7fc fca4 	bl	8008434 <HAL_SD_GetCardInfo>
}
 800baec:	bf00      	nop
 800baee:	3708      	adds	r7, #8
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	20010fd0 	.word	0x20010fd0

0800baf8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bb00:	f000 f9a2 	bl	800be48 <BSP_SD_ReadCpltCallback>
}
 800bb04:	bf00      	nop
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bb12:	2301      	movs	r3, #1
 800bb14:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bb16:	f000 f80b 	bl	800bb30 <BSP_PlatformIsDetected>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d101      	bne.n	800bb24 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bb20:	2300      	movs	r3, #0
 800bb22:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bb24:	79fb      	ldrb	r3, [r7, #7]
 800bb26:	b2db      	uxtb	r3, r3
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3708      	adds	r7, #8
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bb36:	2301      	movs	r3, #1
 800bb38:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bb3a:	2108      	movs	r1, #8
 800bb3c:	4806      	ldr	r0, [pc, #24]	; (800bb58 <BSP_PlatformIsDetected+0x28>)
 800bb3e:	f7fa fb3f 	bl	80061c0 <HAL_GPIO_ReadPin>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d001      	beq.n	800bb4c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bb4c:	79fb      	ldrb	r3, [r7, #7]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3708      	adds	r7, #8
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	40021800 	.word	0x40021800

0800bb5c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800bb64:	f000 fa8e 	bl	800c084 <osKernelGetTickCount>
 800bb68:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800bb6a:	e006      	b.n	800bb7a <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bb6c:	f7ff ffa6 	bl	800babc <BSP_SD_GetCardState>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d101      	bne.n	800bb7a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bb76:	2300      	movs	r3, #0
 800bb78:	e009      	b.n	800bb8e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800bb7a:	f000 fa83 	bl	800c084 <osKernelGetTickCount>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	1ad3      	subs	r3, r2, r3
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d8f0      	bhi.n	800bb6c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bb8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
	...

0800bb98 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	4603      	mov	r3, r0
 800bba0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bba2:	4b0b      	ldr	r3, [pc, #44]	; (800bbd0 <SD_CheckStatus+0x38>)
 800bba4:	2201      	movs	r2, #1
 800bba6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bba8:	f7ff ff88 	bl	800babc <BSP_SD_GetCardState>
 800bbac:	4603      	mov	r3, r0
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d107      	bne.n	800bbc2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bbb2:	4b07      	ldr	r3, [pc, #28]	; (800bbd0 <SD_CheckStatus+0x38>)
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	f023 0301 	bic.w	r3, r3, #1
 800bbbc:	b2da      	uxtb	r2, r3
 800bbbe:	4b04      	ldr	r3, [pc, #16]	; (800bbd0 <SD_CheckStatus+0x38>)
 800bbc0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bbc2:	4b03      	ldr	r3, [pc, #12]	; (800bbd0 <SD_CheckStatus+0x38>)
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	b2db      	uxtb	r3, r3
}
 800bbc8:	4618      	mov	r0, r3
 800bbca:	3708      	adds	r7, #8
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	20000011 	.word	0x20000011

0800bbd4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	4603      	mov	r3, r0
 800bbdc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800bbde:	4b1c      	ldr	r3, [pc, #112]	; (800bc50 <SD_initialize+0x7c>)
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800bbe4:	f000 fa06 	bl	800bff4 <osKernelGetState>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d129      	bne.n	800bc42 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800bbee:	f7ff ff0b 	bl	800ba08 <BSP_SD_Init>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d107      	bne.n	800bc08 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800bbf8:	79fb      	ldrb	r3, [r7, #7]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7ff ffcc 	bl	800bb98 <SD_CheckStatus>
 800bc00:	4603      	mov	r3, r0
 800bc02:	461a      	mov	r2, r3
 800bc04:	4b12      	ldr	r3, [pc, #72]	; (800bc50 <SD_initialize+0x7c>)
 800bc06:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800bc08:	4b11      	ldr	r3, [pc, #68]	; (800bc50 <SD_initialize+0x7c>)
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d017      	beq.n	800bc42 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800bc12:	4b10      	ldr	r3, [pc, #64]	; (800bc54 <SD_initialize+0x80>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d107      	bne.n	800bc2a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	2102      	movs	r1, #2
 800bc1e:	200a      	movs	r0, #10
 800bc20:	f000 fc12 	bl	800c448 <osMessageQueueNew>
 800bc24:	4603      	mov	r3, r0
 800bc26:	4a0b      	ldr	r2, [pc, #44]	; (800bc54 <SD_initialize+0x80>)
 800bc28:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800bc2a:	4b0a      	ldr	r3, [pc, #40]	; (800bc54 <SD_initialize+0x80>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d107      	bne.n	800bc42 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800bc32:	4b07      	ldr	r3, [pc, #28]	; (800bc50 <SD_initialize+0x7c>)
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	f043 0301 	orr.w	r3, r3, #1
 800bc3c:	b2da      	uxtb	r2, r3
 800bc3e:	4b04      	ldr	r3, [pc, #16]	; (800bc50 <SD_initialize+0x7c>)
 800bc40:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800bc42:	4b03      	ldr	r3, [pc, #12]	; (800bc50 <SD_initialize+0x7c>)
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	b2db      	uxtb	r3, r3
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	20000011 	.word	0x20000011
 800bc54:	20000128 	.word	0x20000128

0800bc58 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	4603      	mov	r3, r0
 800bc60:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bc62:	79fb      	ldrb	r3, [r7, #7]
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7ff ff97 	bl	800bb98 <SD_CheckStatus>
 800bc6a:	4603      	mov	r3, r0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3708      	adds	r7, #8
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b088      	sub	sp, #32
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60b9      	str	r1, [r7, #8]
 800bc7c:	607a      	str	r2, [r7, #4]
 800bc7e:	603b      	str	r3, [r7, #0]
 800bc80:	4603      	mov	r3, r0
 800bc82:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bc88:	f247 5030 	movw	r0, #30000	; 0x7530
 800bc8c:	f7ff ff66 	bl	800bb5c <SD_CheckStatusWithTimeout>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	da01      	bge.n	800bc9a <SD_read+0x26>
  {
    return res;
 800bc96:	7ffb      	ldrb	r3, [r7, #31]
 800bc98:	e02f      	b.n	800bcfa <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800bc9a:	683a      	ldr	r2, [r7, #0]
 800bc9c:	6879      	ldr	r1, [r7, #4]
 800bc9e:	68b8      	ldr	r0, [r7, #8]
 800bca0:	f7ff fed8 	bl	800ba54 <BSP_SD_ReadBlocks_DMA>
 800bca4:	4603      	mov	r3, r0
 800bca6:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800bca8:	7fbb      	ldrb	r3, [r7, #30]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d124      	bne.n	800bcf8 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800bcae:	4b15      	ldr	r3, [pc, #84]	; (800bd04 <SD_read+0x90>)
 800bcb0:	6818      	ldr	r0, [r3, #0]
 800bcb2:	f107 0112 	add.w	r1, r7, #18
 800bcb6:	f247 5330 	movw	r3, #30000	; 0x7530
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f000 fc98 	bl	800c5f0 <osMessageQueueGet>
 800bcc0:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800bcc2:	69bb      	ldr	r3, [r7, #24]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d117      	bne.n	800bcf8 <SD_read+0x84>
 800bcc8:	8a7b      	ldrh	r3, [r7, #18]
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d114      	bne.n	800bcf8 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800bcce:	f000 f9d9 	bl	800c084 <osKernelGetTickCount>
 800bcd2:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800bcd4:	e007      	b.n	800bce6 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bcd6:	f7ff fef1 	bl	800babc <BSP_SD_GetCardState>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d102      	bne.n	800bce6 <SD_read+0x72>
              {
                res = RES_OK;
 800bce0:	2300      	movs	r3, #0
 800bce2:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800bce4:	e008      	b.n	800bcf8 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800bce6:	f000 f9cd 	bl	800c084 <osKernelGetTickCount>
 800bcea:	4602      	mov	r2, r0
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	f247 522f 	movw	r2, #29999	; 0x752f
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d9ee      	bls.n	800bcd6 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800bcf8:	7ffb      	ldrb	r3, [r7, #31]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3720      	adds	r7, #32
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	20000128 	.word	0x20000128

0800bd08 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b088      	sub	sp, #32
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60b9      	str	r1, [r7, #8]
 800bd10:	607a      	str	r2, [r7, #4]
 800bd12:	603b      	str	r3, [r7, #0]
 800bd14:	4603      	mov	r3, r0
 800bd16:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bd1c:	f247 5030 	movw	r0, #30000	; 0x7530
 800bd20:	f7ff ff1c 	bl	800bb5c <SD_CheckStatusWithTimeout>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	da01      	bge.n	800bd2e <SD_write+0x26>
  {
    return res;
 800bd2a:	7ffb      	ldrb	r3, [r7, #31]
 800bd2c:	e02d      	b.n	800bd8a <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bd2e:	683a      	ldr	r2, [r7, #0]
 800bd30:	6879      	ldr	r1, [r7, #4]
 800bd32:	68b8      	ldr	r0, [r7, #8]
 800bd34:	f7ff fea8 	bl	800ba88 <BSP_SD_WriteBlocks_DMA>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d124      	bne.n	800bd88 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800bd3e:	4b15      	ldr	r3, [pc, #84]	; (800bd94 <SD_write+0x8c>)
 800bd40:	6818      	ldr	r0, [r3, #0]
 800bd42:	f107 0112 	add.w	r1, r7, #18
 800bd46:	f247 5330 	movw	r3, #30000	; 0x7530
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f000 fc50 	bl	800c5f0 <osMessageQueueGet>
 800bd50:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800bd52:	69bb      	ldr	r3, [r7, #24]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d117      	bne.n	800bd88 <SD_write+0x80>
 800bd58:	8a7b      	ldrh	r3, [r7, #18]
 800bd5a:	2b02      	cmp	r3, #2
 800bd5c:	d114      	bne.n	800bd88 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800bd5e:	f000 f991 	bl	800c084 <osKernelGetTickCount>
 800bd62:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800bd64:	e007      	b.n	800bd76 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bd66:	f7ff fea9 	bl	800babc <BSP_SD_GetCardState>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d102      	bne.n	800bd76 <SD_write+0x6e>
          {
            res = RES_OK;
 800bd70:	2300      	movs	r3, #0
 800bd72:	77fb      	strb	r3, [r7, #31]
            break;
 800bd74:	e008      	b.n	800bd88 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800bd76:	f000 f985 	bl	800c084 <osKernelGetTickCount>
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	1ad3      	subs	r3, r2, r3
 800bd80:	f247 522f 	movw	r2, #29999	; 0x752f
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d9ee      	bls.n	800bd66 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800bd88:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3720      	adds	r7, #32
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	20000128 	.word	0x20000128

0800bd98 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b08c      	sub	sp, #48	; 0x30
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	4603      	mov	r3, r0
 800bda0:	603a      	str	r2, [r7, #0]
 800bda2:	71fb      	strb	r3, [r7, #7]
 800bda4:	460b      	mov	r3, r1
 800bda6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bdae:	4b25      	ldr	r3, [pc, #148]	; (800be44 <SD_ioctl+0xac>)
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	f003 0301 	and.w	r3, r3, #1
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d001      	beq.n	800bdc0 <SD_ioctl+0x28>
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	e03c      	b.n	800be3a <SD_ioctl+0xa2>

  switch (cmd)
 800bdc0:	79bb      	ldrb	r3, [r7, #6]
 800bdc2:	2b03      	cmp	r3, #3
 800bdc4:	d834      	bhi.n	800be30 <SD_ioctl+0x98>
 800bdc6:	a201      	add	r2, pc, #4	; (adr r2, 800bdcc <SD_ioctl+0x34>)
 800bdc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdcc:	0800bddd 	.word	0x0800bddd
 800bdd0:	0800bde5 	.word	0x0800bde5
 800bdd4:	0800bdfd 	.word	0x0800bdfd
 800bdd8:	0800be17 	.word	0x0800be17
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bddc:	2300      	movs	r3, #0
 800bdde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bde2:	e028      	b.n	800be36 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bde4:	f107 030c 	add.w	r3, r7, #12
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7ff fe77 	bl	800badc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bdee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bdfa:	e01c      	b.n	800be36 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bdfc:	f107 030c 	add.w	r3, r7, #12
 800be00:	4618      	mov	r0, r3
 800be02:	f7ff fe6b 	bl	800badc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800be06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be08:	b29a      	uxth	r2, r3
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800be0e:	2300      	movs	r3, #0
 800be10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be14:	e00f      	b.n	800be36 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800be16:	f107 030c 	add.w	r3, r7, #12
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7ff fe5e 	bl	800badc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800be20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be22:	0a5a      	lsrs	r2, r3, #9
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800be28:	2300      	movs	r3, #0
 800be2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be2e:	e002      	b.n	800be36 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800be30:	2304      	movs	r3, #4
 800be32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800be36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3730      	adds	r7, #48	; 0x30
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	20000011 	.word	0x20000011

0800be48 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800be4e:	2301      	movs	r3, #1
 800be50:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800be52:	4b05      	ldr	r3, [pc, #20]	; (800be68 <BSP_SD_ReadCpltCallback+0x20>)
 800be54:	6818      	ldr	r0, [r3, #0]
 800be56:	1db9      	adds	r1, r7, #6
 800be58:	2300      	movs	r3, #0
 800be5a:	2200      	movs	r2, #0
 800be5c:	f000 fb68 	bl	800c530 <osMessageQueuePut>
#endif
}
 800be60:	bf00      	nop
 800be62:	3708      	adds	r7, #8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	20000128 	.word	0x20000128

0800be6c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b087      	sub	sp, #28
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	4613      	mov	r3, r2
 800be78:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800be7a:	2301      	movs	r3, #1
 800be7c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800be7e:	2300      	movs	r3, #0
 800be80:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800be82:	4b1f      	ldr	r3, [pc, #124]	; (800bf00 <FATFS_LinkDriverEx+0x94>)
 800be84:	7a5b      	ldrb	r3, [r3, #9]
 800be86:	b2db      	uxtb	r3, r3
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d131      	bne.n	800bef0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800be8c:	4b1c      	ldr	r3, [pc, #112]	; (800bf00 <FATFS_LinkDriverEx+0x94>)
 800be8e:	7a5b      	ldrb	r3, [r3, #9]
 800be90:	b2db      	uxtb	r3, r3
 800be92:	461a      	mov	r2, r3
 800be94:	4b1a      	ldr	r3, [pc, #104]	; (800bf00 <FATFS_LinkDriverEx+0x94>)
 800be96:	2100      	movs	r1, #0
 800be98:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800be9a:	4b19      	ldr	r3, [pc, #100]	; (800bf00 <FATFS_LinkDriverEx+0x94>)
 800be9c:	7a5b      	ldrb	r3, [r3, #9]
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	4a17      	ldr	r2, [pc, #92]	; (800bf00 <FATFS_LinkDriverEx+0x94>)
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	4413      	add	r3, r2
 800bea6:	68fa      	ldr	r2, [r7, #12]
 800bea8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800beaa:	4b15      	ldr	r3, [pc, #84]	; (800bf00 <FATFS_LinkDriverEx+0x94>)
 800beac:	7a5b      	ldrb	r3, [r3, #9]
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	461a      	mov	r2, r3
 800beb2:	4b13      	ldr	r3, [pc, #76]	; (800bf00 <FATFS_LinkDriverEx+0x94>)
 800beb4:	4413      	add	r3, r2
 800beb6:	79fa      	ldrb	r2, [r7, #7]
 800beb8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800beba:	4b11      	ldr	r3, [pc, #68]	; (800bf00 <FATFS_LinkDriverEx+0x94>)
 800bebc:	7a5b      	ldrb	r3, [r3, #9]
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	1c5a      	adds	r2, r3, #1
 800bec2:	b2d1      	uxtb	r1, r2
 800bec4:	4a0e      	ldr	r2, [pc, #56]	; (800bf00 <FATFS_LinkDriverEx+0x94>)
 800bec6:	7251      	strb	r1, [r2, #9]
 800bec8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800beca:	7dbb      	ldrb	r3, [r7, #22]
 800becc:	3330      	adds	r3, #48	; 0x30
 800bece:	b2da      	uxtb	r2, r3
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	3301      	adds	r3, #1
 800bed8:	223a      	movs	r2, #58	; 0x3a
 800beda:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	3302      	adds	r3, #2
 800bee0:	222f      	movs	r2, #47	; 0x2f
 800bee2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	3303      	adds	r3, #3
 800bee8:	2200      	movs	r2, #0
 800beea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800beec:	2300      	movs	r3, #0
 800beee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bef0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	371c      	adds	r7, #28
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	2000012c 	.word	0x2000012c

0800bf04 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bf0e:	2200      	movs	r2, #0
 800bf10:	6839      	ldr	r1, [r7, #0]
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f7ff ffaa 	bl	800be6c <FATFS_LinkDriverEx>
 800bf18:	4603      	mov	r3, r0
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
	...

0800bf24 <__NVIC_SetPriority>:
{
 800bf24:	b480      	push	{r7}
 800bf26:	b083      	sub	sp, #12
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	6039      	str	r1, [r7, #0]
 800bf2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bf30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	db0a      	blt.n	800bf4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	490c      	ldr	r1, [pc, #48]	; (800bf70 <__NVIC_SetPriority+0x4c>)
 800bf3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf42:	0112      	lsls	r2, r2, #4
 800bf44:	b2d2      	uxtb	r2, r2
 800bf46:	440b      	add	r3, r1
 800bf48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bf4c:	e00a      	b.n	800bf64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	b2da      	uxtb	r2, r3
 800bf52:	4908      	ldr	r1, [pc, #32]	; (800bf74 <__NVIC_SetPriority+0x50>)
 800bf54:	79fb      	ldrb	r3, [r7, #7]
 800bf56:	f003 030f 	and.w	r3, r3, #15
 800bf5a:	3b04      	subs	r3, #4
 800bf5c:	0112      	lsls	r2, r2, #4
 800bf5e:	b2d2      	uxtb	r2, r2
 800bf60:	440b      	add	r3, r1
 800bf62:	761a      	strb	r2, [r3, #24]
}
 800bf64:	bf00      	nop
 800bf66:	370c      	adds	r7, #12
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr
 800bf70:	e000e100 	.word	0xe000e100
 800bf74:	e000ed00 	.word	0xe000ed00

0800bf78 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bf7c:	4b05      	ldr	r3, [pc, #20]	; (800bf94 <SysTick_Handler+0x1c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bf80:	f002 fae4 	bl	800e54c <xTaskGetSchedulerState>
 800bf84:	4603      	mov	r3, r0
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d001      	beq.n	800bf8e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bf8a:	f003 f9cd 	bl	800f328 <xPortSysTickHandler>
  }
}
 800bf8e:	bf00      	nop
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop
 800bf94:	e000e010 	.word	0xe000e010

0800bf98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	f06f 0004 	mvn.w	r0, #4
 800bfa2:	f7ff ffbf 	bl	800bf24 <__NVIC_SetPriority>
#endif
}
 800bfa6:	bf00      	nop
 800bfa8:	bd80      	pop	{r7, pc}
	...

0800bfac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bfac:	b480      	push	{r7}
 800bfae:	b083      	sub	sp, #12
 800bfb0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bfb2:	f3ef 8305 	mrs	r3, IPSR
 800bfb6:	603b      	str	r3, [r7, #0]
  return(result);
 800bfb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d003      	beq.n	800bfc6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bfbe:	f06f 0305 	mvn.w	r3, #5
 800bfc2:	607b      	str	r3, [r7, #4]
 800bfc4:	e00c      	b.n	800bfe0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bfc6:	4b0a      	ldr	r3, [pc, #40]	; (800bff0 <osKernelInitialize+0x44>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d105      	bne.n	800bfda <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bfce:	4b08      	ldr	r3, [pc, #32]	; (800bff0 <osKernelInitialize+0x44>)
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	607b      	str	r3, [r7, #4]
 800bfd8:	e002      	b.n	800bfe0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bfda:	f04f 33ff 	mov.w	r3, #4294967295
 800bfde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bfe0:	687b      	ldr	r3, [r7, #4]
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	370c      	adds	r7, #12
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	20000138 	.word	0x20000138

0800bff4 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b082      	sub	sp, #8
 800bff8:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800bffa:	f002 faa7 	bl	800e54c <xTaskGetSchedulerState>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d004      	beq.n	800c00e <osKernelGetState+0x1a>
 800c004:	2b02      	cmp	r3, #2
 800c006:	d105      	bne.n	800c014 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800c008:	2302      	movs	r3, #2
 800c00a:	607b      	str	r3, [r7, #4]
      break;
 800c00c:	e00c      	b.n	800c028 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800c00e:	2303      	movs	r3, #3
 800c010:	607b      	str	r3, [r7, #4]
      break;
 800c012:	e009      	b.n	800c028 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800c014:	4b07      	ldr	r3, [pc, #28]	; (800c034 <osKernelGetState+0x40>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b01      	cmp	r3, #1
 800c01a:	d102      	bne.n	800c022 <osKernelGetState+0x2e>
        state = osKernelReady;
 800c01c:	2301      	movs	r3, #1
 800c01e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800c020:	e001      	b.n	800c026 <osKernelGetState+0x32>
        state = osKernelInactive;
 800c022:	2300      	movs	r3, #0
 800c024:	607b      	str	r3, [r7, #4]
      break;
 800c026:	bf00      	nop
  }

  return (state);
 800c028:	687b      	ldr	r3, [r7, #4]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3708      	adds	r7, #8
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	20000138 	.word	0x20000138

0800c038 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c03e:	f3ef 8305 	mrs	r3, IPSR
 800c042:	603b      	str	r3, [r7, #0]
  return(result);
 800c044:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c046:	2b00      	cmp	r3, #0
 800c048:	d003      	beq.n	800c052 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c04a:	f06f 0305 	mvn.w	r3, #5
 800c04e:	607b      	str	r3, [r7, #4]
 800c050:	e010      	b.n	800c074 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c052:	4b0b      	ldr	r3, [pc, #44]	; (800c080 <osKernelStart+0x48>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2b01      	cmp	r3, #1
 800c058:	d109      	bne.n	800c06e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c05a:	f7ff ff9d 	bl	800bf98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c05e:	4b08      	ldr	r3, [pc, #32]	; (800c080 <osKernelStart+0x48>)
 800c060:	2202      	movs	r2, #2
 800c062:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c064:	f001 fe04 	bl	800dc70 <vTaskStartScheduler>
      stat = osOK;
 800c068:	2300      	movs	r3, #0
 800c06a:	607b      	str	r3, [r7, #4]
 800c06c:	e002      	b.n	800c074 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c06e:	f04f 33ff 	mov.w	r3, #4294967295
 800c072:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c074:	687b      	ldr	r3, [r7, #4]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3708      	adds	r7, #8
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	20000138 	.word	0x20000138

0800c084 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c08a:	f3ef 8305 	mrs	r3, IPSR
 800c08e:	603b      	str	r3, [r7, #0]
  return(result);
 800c090:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c092:	2b00      	cmp	r3, #0
 800c094:	d003      	beq.n	800c09e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c096:	f001 ff17 	bl	800dec8 <xTaskGetTickCountFromISR>
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	e002      	b.n	800c0a4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c09e:	f001 ff03 	bl	800dea8 <xTaskGetTickCount>
 800c0a2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c0a4:	687b      	ldr	r3, [r7, #4]
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3708      	adds	r7, #8
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b08e      	sub	sp, #56	; 0x38
 800c0b2:	af04      	add	r7, sp, #16
 800c0b4:	60f8      	str	r0, [r7, #12]
 800c0b6:	60b9      	str	r1, [r7, #8]
 800c0b8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0be:	f3ef 8305 	mrs	r3, IPSR
 800c0c2:	617b      	str	r3, [r7, #20]
  return(result);
 800c0c4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d17e      	bne.n	800c1c8 <osThreadNew+0x11a>
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d07b      	beq.n	800c1c8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c0d0:	2340      	movs	r3, #64	; 0x40
 800c0d2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c0d4:	2318      	movs	r3, #24
 800c0d6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c0e0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d045      	beq.n	800c174 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d002      	beq.n	800c0f6 <osThreadNew+0x48>
        name = attr->name;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	699b      	ldr	r3, [r3, #24]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d002      	beq.n	800c104 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	699b      	ldr	r3, [r3, #24]
 800c102:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d008      	beq.n	800c11c <osThreadNew+0x6e>
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	2b38      	cmp	r3, #56	; 0x38
 800c10e:	d805      	bhi.n	800c11c <osThreadNew+0x6e>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	f003 0301 	and.w	r3, r3, #1
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d001      	beq.n	800c120 <osThreadNew+0x72>
        return (NULL);
 800c11c:	2300      	movs	r3, #0
 800c11e:	e054      	b.n	800c1ca <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	695b      	ldr	r3, [r3, #20]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d003      	beq.n	800c130 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	695b      	ldr	r3, [r3, #20]
 800c12c:	089b      	lsrs	r3, r3, #2
 800c12e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d00e      	beq.n	800c156 <osThreadNew+0xa8>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	2bbb      	cmp	r3, #187	; 0xbb
 800c13e:	d90a      	bls.n	800c156 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c144:	2b00      	cmp	r3, #0
 800c146:	d006      	beq.n	800c156 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	695b      	ldr	r3, [r3, #20]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d002      	beq.n	800c156 <osThreadNew+0xa8>
        mem = 1;
 800c150:	2301      	movs	r3, #1
 800c152:	61bb      	str	r3, [r7, #24]
 800c154:	e010      	b.n	800c178 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d10c      	bne.n	800c178 <osThreadNew+0xca>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d108      	bne.n	800c178 <osThreadNew+0xca>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d104      	bne.n	800c178 <osThreadNew+0xca>
          mem = 0;
 800c16e:	2300      	movs	r3, #0
 800c170:	61bb      	str	r3, [r7, #24]
 800c172:	e001      	b.n	800c178 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c174:	2300      	movs	r3, #0
 800c176:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c178:	69bb      	ldr	r3, [r7, #24]
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d110      	bne.n	800c1a0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c186:	9202      	str	r2, [sp, #8]
 800c188:	9301      	str	r3, [sp, #4]
 800c18a:	69fb      	ldr	r3, [r7, #28]
 800c18c:	9300      	str	r3, [sp, #0]
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	6a3a      	ldr	r2, [r7, #32]
 800c192:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f001 fb7f 	bl	800d898 <xTaskCreateStatic>
 800c19a:	4603      	mov	r3, r0
 800c19c:	613b      	str	r3, [r7, #16]
 800c19e:	e013      	b.n	800c1c8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d110      	bne.n	800c1c8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c1a6:	6a3b      	ldr	r3, [r7, #32]
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	f107 0310 	add.w	r3, r7, #16
 800c1ae:	9301      	str	r3, [sp, #4]
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	9300      	str	r3, [sp, #0]
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c1b8:	68f8      	ldr	r0, [r7, #12]
 800c1ba:	f001 fbca 	bl	800d952 <xTaskCreate>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	2b01      	cmp	r3, #1
 800c1c2:	d001      	beq.n	800c1c8 <osThreadNew+0x11a>
            hTask = NULL;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c1c8:	693b      	ldr	r3, [r7, #16]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3728      	adds	r7, #40	; 0x28
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b084      	sub	sp, #16
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1da:	f3ef 8305 	mrs	r3, IPSR
 800c1de:	60bb      	str	r3, [r7, #8]
  return(result);
 800c1e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d003      	beq.n	800c1ee <osDelay+0x1c>
    stat = osErrorISR;
 800c1e6:	f06f 0305 	mvn.w	r3, #5
 800c1ea:	60fb      	str	r3, [r7, #12]
 800c1ec:	e007      	b.n	800c1fe <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d002      	beq.n	800c1fe <osDelay+0x2c>
      vTaskDelay(ticks);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f001 fd05 	bl	800dc08 <vTaskDelay>
    }
  }

  return (stat);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
}
 800c200:	4618      	mov	r0, r3
 800c202:	3710      	adds	r7, #16
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c208:	b580      	push	{r7, lr}
 800c20a:	b08a      	sub	sp, #40	; 0x28
 800c20c:	af02      	add	r7, sp, #8
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c214:	2300      	movs	r3, #0
 800c216:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c218:	f3ef 8305 	mrs	r3, IPSR
 800c21c:	613b      	str	r3, [r7, #16]
  return(result);
 800c21e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c220:	2b00      	cmp	r3, #0
 800c222:	d175      	bne.n	800c310 <osSemaphoreNew+0x108>
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d072      	beq.n	800c310 <osSemaphoreNew+0x108>
 800c22a:	68ba      	ldr	r2, [r7, #8]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d86e      	bhi.n	800c310 <osSemaphoreNew+0x108>
    mem = -1;
 800c232:	f04f 33ff 	mov.w	r3, #4294967295
 800c236:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d015      	beq.n	800c26a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d006      	beq.n	800c254 <osSemaphoreNew+0x4c>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	2b4f      	cmp	r3, #79	; 0x4f
 800c24c:	d902      	bls.n	800c254 <osSemaphoreNew+0x4c>
        mem = 1;
 800c24e:	2301      	movs	r3, #1
 800c250:	61bb      	str	r3, [r7, #24]
 800c252:	e00c      	b.n	800c26e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d108      	bne.n	800c26e <osSemaphoreNew+0x66>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d104      	bne.n	800c26e <osSemaphoreNew+0x66>
          mem = 0;
 800c264:	2300      	movs	r3, #0
 800c266:	61bb      	str	r3, [r7, #24]
 800c268:	e001      	b.n	800c26e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c26a:	2300      	movs	r3, #0
 800c26c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c274:	d04c      	beq.n	800c310 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d128      	bne.n	800c2ce <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d10a      	bne.n	800c298 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	689b      	ldr	r3, [r3, #8]
 800c286:	2203      	movs	r2, #3
 800c288:	9200      	str	r2, [sp, #0]
 800c28a:	2200      	movs	r2, #0
 800c28c:	2100      	movs	r1, #0
 800c28e:	2001      	movs	r0, #1
 800c290:	f000 fb5c 	bl	800c94c <xQueueGenericCreateStatic>
 800c294:	61f8      	str	r0, [r7, #28]
 800c296:	e005      	b.n	800c2a4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c298:	2203      	movs	r2, #3
 800c29a:	2100      	movs	r1, #0
 800c29c:	2001      	movs	r0, #1
 800c29e:	f000 fbcd 	bl	800ca3c <xQueueGenericCreate>
 800c2a2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d022      	beq.n	800c2f0 <osSemaphoreNew+0xe8>
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d01f      	beq.n	800c2f0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	2100      	movs	r1, #0
 800c2b6:	69f8      	ldr	r0, [r7, #28]
 800c2b8:	f000 fc88 	bl	800cbcc <xQueueGenericSend>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d016      	beq.n	800c2f0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c2c2:	69f8      	ldr	r0, [r7, #28]
 800c2c4:	f001 f914 	bl	800d4f0 <vQueueDelete>
            hSemaphore = NULL;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	61fb      	str	r3, [r7, #28]
 800c2cc:	e010      	b.n	800c2f0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	d108      	bne.n	800c2e6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	689b      	ldr	r3, [r3, #8]
 800c2d8:	461a      	mov	r2, r3
 800c2da:	68b9      	ldr	r1, [r7, #8]
 800c2dc:	68f8      	ldr	r0, [r7, #12]
 800c2de:	f000 fc0a 	bl	800caf6 <xQueueCreateCountingSemaphoreStatic>
 800c2e2:	61f8      	str	r0, [r7, #28]
 800c2e4:	e004      	b.n	800c2f0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c2e6:	68b9      	ldr	r1, [r7, #8]
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	f000 fc3b 	bl	800cb64 <xQueueCreateCountingSemaphore>
 800c2ee:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c2f0:	69fb      	ldr	r3, [r7, #28]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00c      	beq.n	800c310 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d003      	beq.n	800c304 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	617b      	str	r3, [r7, #20]
 800c302:	e001      	b.n	800c308 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c304:	2300      	movs	r3, #0
 800c306:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c308:	6979      	ldr	r1, [r7, #20]
 800c30a:	69f8      	ldr	r0, [r7, #28]
 800c30c:	f001 fa3c 	bl	800d788 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c310:	69fb      	ldr	r3, [r7, #28]
}
 800c312:	4618      	mov	r0, r3
 800c314:	3720      	adds	r7, #32
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
	...

0800c31c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b086      	sub	sp, #24
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c32a:	2300      	movs	r3, #0
 800c32c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d103      	bne.n	800c33c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c334:	f06f 0303 	mvn.w	r3, #3
 800c338:	617b      	str	r3, [r7, #20]
 800c33a:	e039      	b.n	800c3b0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c33c:	f3ef 8305 	mrs	r3, IPSR
 800c340:	60fb      	str	r3, [r7, #12]
  return(result);
 800c342:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c344:	2b00      	cmp	r3, #0
 800c346:	d022      	beq.n	800c38e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d003      	beq.n	800c356 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c34e:	f06f 0303 	mvn.w	r3, #3
 800c352:	617b      	str	r3, [r7, #20]
 800c354:	e02c      	b.n	800c3b0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c356:	2300      	movs	r3, #0
 800c358:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c35a:	f107 0308 	add.w	r3, r7, #8
 800c35e:	461a      	mov	r2, r3
 800c360:	2100      	movs	r1, #0
 800c362:	6938      	ldr	r0, [r7, #16]
 800c364:	f001 f844 	bl	800d3f0 <xQueueReceiveFromISR>
 800c368:	4603      	mov	r3, r0
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d003      	beq.n	800c376 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c36e:	f06f 0302 	mvn.w	r3, #2
 800c372:	617b      	str	r3, [r7, #20]
 800c374:	e01c      	b.n	800c3b0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d019      	beq.n	800c3b0 <osSemaphoreAcquire+0x94>
 800c37c:	4b0f      	ldr	r3, [pc, #60]	; (800c3bc <osSemaphoreAcquire+0xa0>)
 800c37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c382:	601a      	str	r2, [r3, #0]
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	e010      	b.n	800c3b0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c38e:	6839      	ldr	r1, [r7, #0]
 800c390:	6938      	ldr	r0, [r7, #16]
 800c392:	f000 ff21 	bl	800d1d8 <xQueueSemaphoreTake>
 800c396:	4603      	mov	r3, r0
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d009      	beq.n	800c3b0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d003      	beq.n	800c3aa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c3a2:	f06f 0301 	mvn.w	r3, #1
 800c3a6:	617b      	str	r3, [r7, #20]
 800c3a8:	e002      	b.n	800c3b0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c3aa:	f06f 0302 	mvn.w	r3, #2
 800c3ae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c3b0:	697b      	ldr	r3, [r7, #20]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3718      	adds	r7, #24
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	e000ed04 	.word	0xe000ed04

0800c3c0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b086      	sub	sp, #24
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d103      	bne.n	800c3de <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c3d6:	f06f 0303 	mvn.w	r3, #3
 800c3da:	617b      	str	r3, [r7, #20]
 800c3dc:	e02c      	b.n	800c438 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3de:	f3ef 8305 	mrs	r3, IPSR
 800c3e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d01a      	beq.n	800c420 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c3ee:	f107 0308 	add.w	r3, r7, #8
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	6938      	ldr	r0, [r7, #16]
 800c3f6:	f000 fd82 	bl	800cefe <xQueueGiveFromISR>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d003      	beq.n	800c408 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c400:	f06f 0302 	mvn.w	r3, #2
 800c404:	617b      	str	r3, [r7, #20]
 800c406:	e017      	b.n	800c438 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d014      	beq.n	800c438 <osSemaphoreRelease+0x78>
 800c40e:	4b0d      	ldr	r3, [pc, #52]	; (800c444 <osSemaphoreRelease+0x84>)
 800c410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c414:	601a      	str	r2, [r3, #0]
 800c416:	f3bf 8f4f 	dsb	sy
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	e00b      	b.n	800c438 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c420:	2300      	movs	r3, #0
 800c422:	2200      	movs	r2, #0
 800c424:	2100      	movs	r1, #0
 800c426:	6938      	ldr	r0, [r7, #16]
 800c428:	f000 fbd0 	bl	800cbcc <xQueueGenericSend>
 800c42c:	4603      	mov	r3, r0
 800c42e:	2b01      	cmp	r3, #1
 800c430:	d002      	beq.n	800c438 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c432:	f06f 0302 	mvn.w	r3, #2
 800c436:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c438:	697b      	ldr	r3, [r7, #20]
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3718      	adds	r7, #24
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	e000ed04 	.word	0xe000ed04

0800c448 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c448:	b580      	push	{r7, lr}
 800c44a:	b08a      	sub	sp, #40	; 0x28
 800c44c:	af02      	add	r7, sp, #8
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c454:	2300      	movs	r3, #0
 800c456:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c458:	f3ef 8305 	mrs	r3, IPSR
 800c45c:	613b      	str	r3, [r7, #16]
  return(result);
 800c45e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c460:	2b00      	cmp	r3, #0
 800c462:	d15f      	bne.n	800c524 <osMessageQueueNew+0xdc>
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d05c      	beq.n	800c524 <osMessageQueueNew+0xdc>
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d059      	beq.n	800c524 <osMessageQueueNew+0xdc>
    mem = -1;
 800c470:	f04f 33ff 	mov.w	r3, #4294967295
 800c474:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d029      	beq.n	800c4d0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	689b      	ldr	r3, [r3, #8]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d012      	beq.n	800c4aa <osMessageQueueNew+0x62>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	2b4f      	cmp	r3, #79	; 0x4f
 800c48a:	d90e      	bls.n	800c4aa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c490:	2b00      	cmp	r3, #0
 800c492:	d00a      	beq.n	800c4aa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	695a      	ldr	r2, [r3, #20]
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	68b9      	ldr	r1, [r7, #8]
 800c49c:	fb01 f303 	mul.w	r3, r1, r3
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d302      	bcc.n	800c4aa <osMessageQueueNew+0x62>
        mem = 1;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	61bb      	str	r3, [r7, #24]
 800c4a8:	e014      	b.n	800c4d4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	689b      	ldr	r3, [r3, #8]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d110      	bne.n	800c4d4 <osMessageQueueNew+0x8c>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d10c      	bne.n	800c4d4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d108      	bne.n	800c4d4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	695b      	ldr	r3, [r3, #20]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d104      	bne.n	800c4d4 <osMessageQueueNew+0x8c>
          mem = 0;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	61bb      	str	r3, [r7, #24]
 800c4ce:	e001      	b.n	800c4d4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c4d4:	69bb      	ldr	r3, [r7, #24]
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d10b      	bne.n	800c4f2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	691a      	ldr	r2, [r3, #16]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	9100      	str	r1, [sp, #0]
 800c4e6:	68b9      	ldr	r1, [r7, #8]
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f000 fa2f 	bl	800c94c <xQueueGenericCreateStatic>
 800c4ee:	61f8      	str	r0, [r7, #28]
 800c4f0:	e008      	b.n	800c504 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d105      	bne.n	800c504 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	68b9      	ldr	r1, [r7, #8]
 800c4fc:	68f8      	ldr	r0, [r7, #12]
 800c4fe:	f000 fa9d 	bl	800ca3c <xQueueGenericCreate>
 800c502:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00c      	beq.n	800c524 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d003      	beq.n	800c518 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	617b      	str	r3, [r7, #20]
 800c516:	e001      	b.n	800c51c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c518:	2300      	movs	r3, #0
 800c51a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c51c:	6979      	ldr	r1, [r7, #20]
 800c51e:	69f8      	ldr	r0, [r7, #28]
 800c520:	f001 f932 	bl	800d788 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c524:	69fb      	ldr	r3, [r7, #28]
}
 800c526:	4618      	mov	r0, r3
 800c528:	3720      	adds	r7, #32
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
	...

0800c530 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c530:	b580      	push	{r7, lr}
 800c532:	b088      	sub	sp, #32
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	603b      	str	r3, [r7, #0]
 800c53c:	4613      	mov	r3, r2
 800c53e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c544:	2300      	movs	r3, #0
 800c546:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c548:	f3ef 8305 	mrs	r3, IPSR
 800c54c:	617b      	str	r3, [r7, #20]
  return(result);
 800c54e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c550:	2b00      	cmp	r3, #0
 800c552:	d028      	beq.n	800c5a6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c554:	69bb      	ldr	r3, [r7, #24]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d005      	beq.n	800c566 <osMessageQueuePut+0x36>
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d002      	beq.n	800c566 <osMessageQueuePut+0x36>
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d003      	beq.n	800c56e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c566:	f06f 0303 	mvn.w	r3, #3
 800c56a:	61fb      	str	r3, [r7, #28]
 800c56c:	e038      	b.n	800c5e0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c56e:	2300      	movs	r3, #0
 800c570:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c572:	f107 0210 	add.w	r2, r7, #16
 800c576:	2300      	movs	r3, #0
 800c578:	68b9      	ldr	r1, [r7, #8]
 800c57a:	69b8      	ldr	r0, [r7, #24]
 800c57c:	f000 fc24 	bl	800cdc8 <xQueueGenericSendFromISR>
 800c580:	4603      	mov	r3, r0
 800c582:	2b01      	cmp	r3, #1
 800c584:	d003      	beq.n	800c58e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c586:	f06f 0302 	mvn.w	r3, #2
 800c58a:	61fb      	str	r3, [r7, #28]
 800c58c:	e028      	b.n	800c5e0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d025      	beq.n	800c5e0 <osMessageQueuePut+0xb0>
 800c594:	4b15      	ldr	r3, [pc, #84]	; (800c5ec <osMessageQueuePut+0xbc>)
 800c596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c59a:	601a      	str	r2, [r3, #0]
 800c59c:	f3bf 8f4f 	dsb	sy
 800c5a0:	f3bf 8f6f 	isb	sy
 800c5a4:	e01c      	b.n	800c5e0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d002      	beq.n	800c5b2 <osMessageQueuePut+0x82>
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d103      	bne.n	800c5ba <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c5b2:	f06f 0303 	mvn.w	r3, #3
 800c5b6:	61fb      	str	r3, [r7, #28]
 800c5b8:	e012      	b.n	800c5e0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	683a      	ldr	r2, [r7, #0]
 800c5be:	68b9      	ldr	r1, [r7, #8]
 800c5c0:	69b8      	ldr	r0, [r7, #24]
 800c5c2:	f000 fb03 	bl	800cbcc <xQueueGenericSend>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d009      	beq.n	800c5e0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d003      	beq.n	800c5da <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c5d2:	f06f 0301 	mvn.w	r3, #1
 800c5d6:	61fb      	str	r3, [r7, #28]
 800c5d8:	e002      	b.n	800c5e0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c5da:	f06f 0302 	mvn.w	r3, #2
 800c5de:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c5e0:	69fb      	ldr	r3, [r7, #28]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3720      	adds	r7, #32
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	e000ed04 	.word	0xe000ed04

0800c5f0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b088      	sub	sp, #32
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	607a      	str	r2, [r7, #4]
 800c5fc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c602:	2300      	movs	r3, #0
 800c604:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c606:	f3ef 8305 	mrs	r3, IPSR
 800c60a:	617b      	str	r3, [r7, #20]
  return(result);
 800c60c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d028      	beq.n	800c664 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c612:	69bb      	ldr	r3, [r7, #24]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d005      	beq.n	800c624 <osMessageQueueGet+0x34>
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d002      	beq.n	800c624 <osMessageQueueGet+0x34>
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d003      	beq.n	800c62c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c624:	f06f 0303 	mvn.w	r3, #3
 800c628:	61fb      	str	r3, [r7, #28]
 800c62a:	e037      	b.n	800c69c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c62c:	2300      	movs	r3, #0
 800c62e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c630:	f107 0310 	add.w	r3, r7, #16
 800c634:	461a      	mov	r2, r3
 800c636:	68b9      	ldr	r1, [r7, #8]
 800c638:	69b8      	ldr	r0, [r7, #24]
 800c63a:	f000 fed9 	bl	800d3f0 <xQueueReceiveFromISR>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b01      	cmp	r3, #1
 800c642:	d003      	beq.n	800c64c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c644:	f06f 0302 	mvn.w	r3, #2
 800c648:	61fb      	str	r3, [r7, #28]
 800c64a:	e027      	b.n	800c69c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d024      	beq.n	800c69c <osMessageQueueGet+0xac>
 800c652:	4b15      	ldr	r3, [pc, #84]	; (800c6a8 <osMessageQueueGet+0xb8>)
 800c654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c658:	601a      	str	r2, [r3, #0]
 800c65a:	f3bf 8f4f 	dsb	sy
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	e01b      	b.n	800c69c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c664:	69bb      	ldr	r3, [r7, #24]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d002      	beq.n	800c670 <osMessageQueueGet+0x80>
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d103      	bne.n	800c678 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c670:	f06f 0303 	mvn.w	r3, #3
 800c674:	61fb      	str	r3, [r7, #28]
 800c676:	e011      	b.n	800c69c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c678:	683a      	ldr	r2, [r7, #0]
 800c67a:	68b9      	ldr	r1, [r7, #8]
 800c67c:	69b8      	ldr	r0, [r7, #24]
 800c67e:	f000 fccb 	bl	800d018 <xQueueReceive>
 800c682:	4603      	mov	r3, r0
 800c684:	2b01      	cmp	r3, #1
 800c686:	d009      	beq.n	800c69c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d003      	beq.n	800c696 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c68e:	f06f 0301 	mvn.w	r3, #1
 800c692:	61fb      	str	r3, [r7, #28]
 800c694:	e002      	b.n	800c69c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c696:	f06f 0302 	mvn.w	r3, #2
 800c69a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c69c:	69fb      	ldr	r3, [r7, #28]
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3720      	adds	r7, #32
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	e000ed04 	.word	0xe000ed04

0800c6ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c6ac:	b480      	push	{r7}
 800c6ae:	b085      	sub	sp, #20
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	60b9      	str	r1, [r7, #8]
 800c6b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	4a07      	ldr	r2, [pc, #28]	; (800c6d8 <vApplicationGetIdleTaskMemory+0x2c>)
 800c6bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	4a06      	ldr	r2, [pc, #24]	; (800c6dc <vApplicationGetIdleTaskMemory+0x30>)
 800c6c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2240      	movs	r2, #64	; 0x40
 800c6c8:	601a      	str	r2, [r3, #0]
}
 800c6ca:	bf00      	nop
 800c6cc:	3714      	adds	r7, #20
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop
 800c6d8:	2000013c 	.word	0x2000013c
 800c6dc:	200001f8 	.word	0x200001f8

0800c6e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c6e0:	b480      	push	{r7}
 800c6e2:	b085      	sub	sp, #20
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	4a07      	ldr	r2, [pc, #28]	; (800c70c <vApplicationGetTimerTaskMemory+0x2c>)
 800c6f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	4a06      	ldr	r2, [pc, #24]	; (800c710 <vApplicationGetTimerTaskMemory+0x30>)
 800c6f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2280      	movs	r2, #128	; 0x80
 800c6fc:	601a      	str	r2, [r3, #0]
}
 800c6fe:	bf00      	nop
 800c700:	3714      	adds	r7, #20
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop
 800c70c:	200002f8 	.word	0x200002f8
 800c710:	200003b4 	.word	0x200003b4

0800c714 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c714:	b480      	push	{r7}
 800c716:	b083      	sub	sp, #12
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f103 0208 	add.w	r2, r3, #8
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f04f 32ff 	mov.w	r2, #4294967295
 800c72c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f103 0208 	add.w	r2, r3, #8
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f103 0208 	add.w	r2, r3, #8
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c748:	bf00      	nop
 800c74a:	370c      	adds	r7, #12
 800c74c:	46bd      	mov	sp, r7
 800c74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c752:	4770      	bx	lr

0800c754 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2200      	movs	r2, #0
 800c760:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c762:	bf00      	nop
 800c764:	370c      	adds	r7, #12
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr

0800c76e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c76e:	b480      	push	{r7}
 800c770:	b085      	sub	sp, #20
 800c772:	af00      	add	r7, sp, #0
 800c774:	6078      	str	r0, [r7, #4]
 800c776:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	68fa      	ldr	r2, [r7, #12]
 800c782:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	689a      	ldr	r2, [r3, #8]
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	683a      	ldr	r2, [r7, #0]
 800c792:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	683a      	ldr	r2, [r7, #0]
 800c798:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	1c5a      	adds	r2, r3, #1
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	601a      	str	r2, [r3, #0]
}
 800c7aa:	bf00      	nop
 800c7ac:	3714      	adds	r7, #20
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr

0800c7b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7b6:	b480      	push	{r7}
 800c7b8:	b085      	sub	sp, #20
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7cc:	d103      	bne.n	800c7d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	691b      	ldr	r3, [r3, #16]
 800c7d2:	60fb      	str	r3, [r7, #12]
 800c7d4:	e00c      	b.n	800c7f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	3308      	adds	r3, #8
 800c7da:	60fb      	str	r3, [r7, #12]
 800c7dc:	e002      	b.n	800c7e4 <vListInsert+0x2e>
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	60fb      	str	r3, [r7, #12]
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	68ba      	ldr	r2, [r7, #8]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d2f6      	bcs.n	800c7de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	685a      	ldr	r2, [r3, #4]
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	683a      	ldr	r2, [r7, #0]
 800c7fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	68fa      	ldr	r2, [r7, #12]
 800c804:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	683a      	ldr	r2, [r7, #0]
 800c80a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	1c5a      	adds	r2, r3, #1
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	601a      	str	r2, [r3, #0]
}
 800c81c:	bf00      	nop
 800c81e:	3714      	adds	r7, #20
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr

0800c828 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c828:	b480      	push	{r7}
 800c82a:	b085      	sub	sp, #20
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	691b      	ldr	r3, [r3, #16]
 800c834:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	687a      	ldr	r2, [r7, #4]
 800c83c:	6892      	ldr	r2, [r2, #8]
 800c83e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	6852      	ldr	r2, [r2, #4]
 800c848:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	429a      	cmp	r2, r3
 800c852:	d103      	bne.n	800c85c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	689a      	ldr	r2, [r3, #8]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2200      	movs	r2, #0
 800c860:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	1e5a      	subs	r2, r3, #1
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
}
 800c870:	4618      	mov	r0, r3
 800c872:	3714      	adds	r7, #20
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr

0800c87c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d10a      	bne.n	800c8a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c894:	f383 8811 	msr	BASEPRI, r3
 800c898:	f3bf 8f6f 	isb	sy
 800c89c:	f3bf 8f4f 	dsb	sy
 800c8a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c8a2:	bf00      	nop
 800c8a4:	e7fe      	b.n	800c8a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c8a6:	f002 fcad 	bl	800f204 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8b2:	68f9      	ldr	r1, [r7, #12]
 800c8b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c8b6:	fb01 f303 	mul.w	r3, r1, r3
 800c8ba:	441a      	add	r2, r3
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	68f9      	ldr	r1, [r7, #12]
 800c8da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c8dc:	fb01 f303 	mul.w	r3, r1, r3
 800c8e0:	441a      	add	r2, r3
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	22ff      	movs	r2, #255	; 0xff
 800c8ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	22ff      	movs	r2, #255	; 0xff
 800c8f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d114      	bne.n	800c926 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	691b      	ldr	r3, [r3, #16]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d01a      	beq.n	800c93a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	3310      	adds	r3, #16
 800c908:	4618      	mov	r0, r3
 800c90a:	f001 fc5d 	bl	800e1c8 <xTaskRemoveFromEventList>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d012      	beq.n	800c93a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c914:	4b0c      	ldr	r3, [pc, #48]	; (800c948 <xQueueGenericReset+0xcc>)
 800c916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c91a:	601a      	str	r2, [r3, #0]
 800c91c:	f3bf 8f4f 	dsb	sy
 800c920:	f3bf 8f6f 	isb	sy
 800c924:	e009      	b.n	800c93a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	3310      	adds	r3, #16
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7ff fef2 	bl	800c714 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	3324      	adds	r3, #36	; 0x24
 800c934:	4618      	mov	r0, r3
 800c936:	f7ff feed 	bl	800c714 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c93a:	f002 fc93 	bl	800f264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c93e:	2301      	movs	r3, #1
}
 800c940:	4618      	mov	r0, r3
 800c942:	3710      	adds	r7, #16
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}
 800c948:	e000ed04 	.word	0xe000ed04

0800c94c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b08e      	sub	sp, #56	; 0x38
 800c950:	af02      	add	r7, sp, #8
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	607a      	str	r2, [r7, #4]
 800c958:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d10a      	bne.n	800c976 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c964:	f383 8811 	msr	BASEPRI, r3
 800c968:	f3bf 8f6f 	isb	sy
 800c96c:	f3bf 8f4f 	dsb	sy
 800c970:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c972:	bf00      	nop
 800c974:	e7fe      	b.n	800c974 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d10a      	bne.n	800c992 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c980:	f383 8811 	msr	BASEPRI, r3
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	f3bf 8f4f 	dsb	sy
 800c98c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c98e:	bf00      	nop
 800c990:	e7fe      	b.n	800c990 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d002      	beq.n	800c99e <xQueueGenericCreateStatic+0x52>
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d001      	beq.n	800c9a2 <xQueueGenericCreateStatic+0x56>
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e000      	b.n	800c9a4 <xQueueGenericCreateStatic+0x58>
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d10a      	bne.n	800c9be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ac:	f383 8811 	msr	BASEPRI, r3
 800c9b0:	f3bf 8f6f 	isb	sy
 800c9b4:	f3bf 8f4f 	dsb	sy
 800c9b8:	623b      	str	r3, [r7, #32]
}
 800c9ba:	bf00      	nop
 800c9bc:	e7fe      	b.n	800c9bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d102      	bne.n	800c9ca <xQueueGenericCreateStatic+0x7e>
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d101      	bne.n	800c9ce <xQueueGenericCreateStatic+0x82>
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	e000      	b.n	800c9d0 <xQueueGenericCreateStatic+0x84>
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d10a      	bne.n	800c9ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d8:	f383 8811 	msr	BASEPRI, r3
 800c9dc:	f3bf 8f6f 	isb	sy
 800c9e0:	f3bf 8f4f 	dsb	sy
 800c9e4:	61fb      	str	r3, [r7, #28]
}
 800c9e6:	bf00      	nop
 800c9e8:	e7fe      	b.n	800c9e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c9ea:	2350      	movs	r3, #80	; 0x50
 800c9ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	2b50      	cmp	r3, #80	; 0x50
 800c9f2:	d00a      	beq.n	800ca0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f8:	f383 8811 	msr	BASEPRI, r3
 800c9fc:	f3bf 8f6f 	isb	sy
 800ca00:	f3bf 8f4f 	dsb	sy
 800ca04:	61bb      	str	r3, [r7, #24]
}
 800ca06:	bf00      	nop
 800ca08:	e7fe      	b.n	800ca08 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ca0a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ca10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d00d      	beq.n	800ca32 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ca16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca18:	2201      	movs	r2, #1
 800ca1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ca22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca24:	9300      	str	r3, [sp, #0]
 800ca26:	4613      	mov	r3, r2
 800ca28:	687a      	ldr	r2, [r7, #4]
 800ca2a:	68b9      	ldr	r1, [r7, #8]
 800ca2c:	68f8      	ldr	r0, [r7, #12]
 800ca2e:	f000 f83f 	bl	800cab0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3730      	adds	r7, #48	; 0x30
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b08a      	sub	sp, #40	; 0x28
 800ca40:	af02      	add	r7, sp, #8
 800ca42:	60f8      	str	r0, [r7, #12]
 800ca44:	60b9      	str	r1, [r7, #8]
 800ca46:	4613      	mov	r3, r2
 800ca48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d10a      	bne.n	800ca66 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ca50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca54:	f383 8811 	msr	BASEPRI, r3
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	613b      	str	r3, [r7, #16]
}
 800ca62:	bf00      	nop
 800ca64:	e7fe      	b.n	800ca64 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	68ba      	ldr	r2, [r7, #8]
 800ca6a:	fb02 f303 	mul.w	r3, r2, r3
 800ca6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ca70:	69fb      	ldr	r3, [r7, #28]
 800ca72:	3350      	adds	r3, #80	; 0x50
 800ca74:	4618      	mov	r0, r3
 800ca76:	f002 fce7 	bl	800f448 <pvPortMalloc>
 800ca7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d011      	beq.n	800caa6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	3350      	adds	r3, #80	; 0x50
 800ca8a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca94:	79fa      	ldrb	r2, [r7, #7]
 800ca96:	69bb      	ldr	r3, [r7, #24]
 800ca98:	9300      	str	r3, [sp, #0]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	697a      	ldr	r2, [r7, #20]
 800ca9e:	68b9      	ldr	r1, [r7, #8]
 800caa0:	68f8      	ldr	r0, [r7, #12]
 800caa2:	f000 f805 	bl	800cab0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800caa6:	69bb      	ldr	r3, [r7, #24]
	}
 800caa8:	4618      	mov	r0, r3
 800caaa:	3720      	adds	r7, #32
 800caac:	46bd      	mov	sp, r7
 800caae:	bd80      	pop	{r7, pc}

0800cab0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	60f8      	str	r0, [r7, #12]
 800cab8:	60b9      	str	r1, [r7, #8]
 800caba:	607a      	str	r2, [r7, #4]
 800cabc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d103      	bne.n	800cacc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	69ba      	ldr	r2, [r7, #24]
 800cac8:	601a      	str	r2, [r3, #0]
 800caca:	e002      	b.n	800cad2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cacc:	69bb      	ldr	r3, [r7, #24]
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cad2:	69bb      	ldr	r3, [r7, #24]
 800cad4:	68fa      	ldr	r2, [r7, #12]
 800cad6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cad8:	69bb      	ldr	r3, [r7, #24]
 800cada:	68ba      	ldr	r2, [r7, #8]
 800cadc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cade:	2101      	movs	r1, #1
 800cae0:	69b8      	ldr	r0, [r7, #24]
 800cae2:	f7ff fecb 	bl	800c87c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	78fa      	ldrb	r2, [r7, #3]
 800caea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800caee:	bf00      	nop
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}

0800caf6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800caf6:	b580      	push	{r7, lr}
 800caf8:	b08a      	sub	sp, #40	; 0x28
 800cafa:	af02      	add	r7, sp, #8
 800cafc:	60f8      	str	r0, [r7, #12]
 800cafe:	60b9      	str	r1, [r7, #8]
 800cb00:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d10a      	bne.n	800cb1e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800cb08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0c:	f383 8811 	msr	BASEPRI, r3
 800cb10:	f3bf 8f6f 	isb	sy
 800cb14:	f3bf 8f4f 	dsb	sy
 800cb18:	61bb      	str	r3, [r7, #24]
}
 800cb1a:	bf00      	nop
 800cb1c:	e7fe      	b.n	800cb1c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cb1e:	68ba      	ldr	r2, [r7, #8]
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d90a      	bls.n	800cb3c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800cb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2a:	f383 8811 	msr	BASEPRI, r3
 800cb2e:	f3bf 8f6f 	isb	sy
 800cb32:	f3bf 8f4f 	dsb	sy
 800cb36:	617b      	str	r3, [r7, #20]
}
 800cb38:	bf00      	nop
 800cb3a:	e7fe      	b.n	800cb3a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cb3c:	2302      	movs	r3, #2
 800cb3e:	9300      	str	r3, [sp, #0]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2200      	movs	r2, #0
 800cb44:	2100      	movs	r1, #0
 800cb46:	68f8      	ldr	r0, [r7, #12]
 800cb48:	f7ff ff00 	bl	800c94c <xQueueGenericCreateStatic>
 800cb4c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800cb4e:	69fb      	ldr	r3, [r7, #28]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d002      	beq.n	800cb5a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	68ba      	ldr	r2, [r7, #8]
 800cb58:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cb5a:	69fb      	ldr	r3, [r7, #28]
	}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3720      	adds	r7, #32
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b086      	sub	sp, #24
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d10a      	bne.n	800cb8a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800cb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb78:	f383 8811 	msr	BASEPRI, r3
 800cb7c:	f3bf 8f6f 	isb	sy
 800cb80:	f3bf 8f4f 	dsb	sy
 800cb84:	613b      	str	r3, [r7, #16]
}
 800cb86:	bf00      	nop
 800cb88:	e7fe      	b.n	800cb88 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cb8a:	683a      	ldr	r2, [r7, #0]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d90a      	bls.n	800cba8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800cb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb96:	f383 8811 	msr	BASEPRI, r3
 800cb9a:	f3bf 8f6f 	isb	sy
 800cb9e:	f3bf 8f4f 	dsb	sy
 800cba2:	60fb      	str	r3, [r7, #12]
}
 800cba4:	bf00      	nop
 800cba6:	e7fe      	b.n	800cba6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cba8:	2202      	movs	r2, #2
 800cbaa:	2100      	movs	r1, #0
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f7ff ff45 	bl	800ca3c <xQueueGenericCreate>
 800cbb2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d002      	beq.n	800cbc0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	683a      	ldr	r2, [r7, #0]
 800cbbe:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cbc0:	697b      	ldr	r3, [r7, #20]
	}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3718      	adds	r7, #24
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
	...

0800cbcc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b08e      	sub	sp, #56	; 0x38
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	607a      	str	r2, [r7, #4]
 800cbd8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d10a      	bne.n	800cbfe <xQueueGenericSend+0x32>
	__asm volatile
 800cbe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbec:	f383 8811 	msr	BASEPRI, r3
 800cbf0:	f3bf 8f6f 	isb	sy
 800cbf4:	f3bf 8f4f 	dsb	sy
 800cbf8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cbfa:	bf00      	nop
 800cbfc:	e7fe      	b.n	800cbfc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d103      	bne.n	800cc0c <xQueueGenericSend+0x40>
 800cc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d101      	bne.n	800cc10 <xQueueGenericSend+0x44>
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	e000      	b.n	800cc12 <xQueueGenericSend+0x46>
 800cc10:	2300      	movs	r3, #0
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d10a      	bne.n	800cc2c <xQueueGenericSend+0x60>
	__asm volatile
 800cc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1a:	f383 8811 	msr	BASEPRI, r3
 800cc1e:	f3bf 8f6f 	isb	sy
 800cc22:	f3bf 8f4f 	dsb	sy
 800cc26:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc28:	bf00      	nop
 800cc2a:	e7fe      	b.n	800cc2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	2b02      	cmp	r3, #2
 800cc30:	d103      	bne.n	800cc3a <xQueueGenericSend+0x6e>
 800cc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d101      	bne.n	800cc3e <xQueueGenericSend+0x72>
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	e000      	b.n	800cc40 <xQueueGenericSend+0x74>
 800cc3e:	2300      	movs	r3, #0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d10a      	bne.n	800cc5a <xQueueGenericSend+0x8e>
	__asm volatile
 800cc44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc48:	f383 8811 	msr	BASEPRI, r3
 800cc4c:	f3bf 8f6f 	isb	sy
 800cc50:	f3bf 8f4f 	dsb	sy
 800cc54:	623b      	str	r3, [r7, #32]
}
 800cc56:	bf00      	nop
 800cc58:	e7fe      	b.n	800cc58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc5a:	f001 fc77 	bl	800e54c <xTaskGetSchedulerState>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d102      	bne.n	800cc6a <xQueueGenericSend+0x9e>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d101      	bne.n	800cc6e <xQueueGenericSend+0xa2>
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e000      	b.n	800cc70 <xQueueGenericSend+0xa4>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d10a      	bne.n	800cc8a <xQueueGenericSend+0xbe>
	__asm volatile
 800cc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc78:	f383 8811 	msr	BASEPRI, r3
 800cc7c:	f3bf 8f6f 	isb	sy
 800cc80:	f3bf 8f4f 	dsb	sy
 800cc84:	61fb      	str	r3, [r7, #28]
}
 800cc86:	bf00      	nop
 800cc88:	e7fe      	b.n	800cc88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc8a:	f002 fabb 	bl	800f204 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d302      	bcc.n	800cca0 <xQueueGenericSend+0xd4>
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	2b02      	cmp	r3, #2
 800cc9e:	d129      	bne.n	800ccf4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cca0:	683a      	ldr	r2, [r7, #0]
 800cca2:	68b9      	ldr	r1, [r7, #8]
 800cca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cca6:	f000 fc5e 	bl	800d566 <prvCopyDataToQueue>
 800ccaa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d010      	beq.n	800ccd6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb6:	3324      	adds	r3, #36	; 0x24
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f001 fa85 	bl	800e1c8 <xTaskRemoveFromEventList>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d013      	beq.n	800ccec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ccc4:	4b3f      	ldr	r3, [pc, #252]	; (800cdc4 <xQueueGenericSend+0x1f8>)
 800ccc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccca:	601a      	str	r2, [r3, #0]
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	f3bf 8f6f 	isb	sy
 800ccd4:	e00a      	b.n	800ccec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ccd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d007      	beq.n	800ccec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ccdc:	4b39      	ldr	r3, [pc, #228]	; (800cdc4 <xQueueGenericSend+0x1f8>)
 800ccde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cce2:	601a      	str	r2, [r3, #0]
 800cce4:	f3bf 8f4f 	dsb	sy
 800cce8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ccec:	f002 faba 	bl	800f264 <vPortExitCritical>
				return pdPASS;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	e063      	b.n	800cdbc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d103      	bne.n	800cd02 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ccfa:	f002 fab3 	bl	800f264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	e05c      	b.n	800cdbc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d106      	bne.n	800cd16 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd08:	f107 0314 	add.w	r3, r7, #20
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f001 fabf 	bl	800e290 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd12:	2301      	movs	r3, #1
 800cd14:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd16:	f002 faa5 	bl	800f264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd1a:	f001 f819 	bl	800dd50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd1e:	f002 fa71 	bl	800f204 <vPortEnterCritical>
 800cd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd28:	b25b      	sxtb	r3, r3
 800cd2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd2e:	d103      	bne.n	800cd38 <xQueueGenericSend+0x16c>
 800cd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd32:	2200      	movs	r2, #0
 800cd34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd3e:	b25b      	sxtb	r3, r3
 800cd40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd44:	d103      	bne.n	800cd4e <xQueueGenericSend+0x182>
 800cd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd4e:	f002 fa89 	bl	800f264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd52:	1d3a      	adds	r2, r7, #4
 800cd54:	f107 0314 	add.w	r3, r7, #20
 800cd58:	4611      	mov	r1, r2
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f001 faae 	bl	800e2bc <xTaskCheckForTimeOut>
 800cd60:	4603      	mov	r3, r0
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d124      	bne.n	800cdb0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cd66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd68:	f000 fcf5 	bl	800d756 <prvIsQueueFull>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d018      	beq.n	800cda4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd74:	3310      	adds	r3, #16
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	4611      	mov	r1, r2
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f001 f9d4 	bl	800e128 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cd80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd82:	f000 fc80 	bl	800d686 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cd86:	f000 fff1 	bl	800dd6c <xTaskResumeAll>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	f47f af7c 	bne.w	800cc8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cd92:	4b0c      	ldr	r3, [pc, #48]	; (800cdc4 <xQueueGenericSend+0x1f8>)
 800cd94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd98:	601a      	str	r2, [r3, #0]
 800cd9a:	f3bf 8f4f 	dsb	sy
 800cd9e:	f3bf 8f6f 	isb	sy
 800cda2:	e772      	b.n	800cc8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cda4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cda6:	f000 fc6e 	bl	800d686 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cdaa:	f000 ffdf 	bl	800dd6c <xTaskResumeAll>
 800cdae:	e76c      	b.n	800cc8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cdb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdb2:	f000 fc68 	bl	800d686 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cdb6:	f000 ffd9 	bl	800dd6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cdba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3738      	adds	r7, #56	; 0x38
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}
 800cdc4:	e000ed04 	.word	0xe000ed04

0800cdc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b090      	sub	sp, #64	; 0x40
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	607a      	str	r2, [r7, #4]
 800cdd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d10a      	bne.n	800cdf6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde4:	f383 8811 	msr	BASEPRI, r3
 800cde8:	f3bf 8f6f 	isb	sy
 800cdec:	f3bf 8f4f 	dsb	sy
 800cdf0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cdf2:	bf00      	nop
 800cdf4:	e7fe      	b.n	800cdf4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d103      	bne.n	800ce04 <xQueueGenericSendFromISR+0x3c>
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d101      	bne.n	800ce08 <xQueueGenericSendFromISR+0x40>
 800ce04:	2301      	movs	r3, #1
 800ce06:	e000      	b.n	800ce0a <xQueueGenericSendFromISR+0x42>
 800ce08:	2300      	movs	r3, #0
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10a      	bne.n	800ce24 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ce0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce12:	f383 8811 	msr	BASEPRI, r3
 800ce16:	f3bf 8f6f 	isb	sy
 800ce1a:	f3bf 8f4f 	dsb	sy
 800ce1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ce20:	bf00      	nop
 800ce22:	e7fe      	b.n	800ce22 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	2b02      	cmp	r3, #2
 800ce28:	d103      	bne.n	800ce32 <xQueueGenericSendFromISR+0x6a>
 800ce2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce2e:	2b01      	cmp	r3, #1
 800ce30:	d101      	bne.n	800ce36 <xQueueGenericSendFromISR+0x6e>
 800ce32:	2301      	movs	r3, #1
 800ce34:	e000      	b.n	800ce38 <xQueueGenericSendFromISR+0x70>
 800ce36:	2300      	movs	r3, #0
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d10a      	bne.n	800ce52 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ce3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce40:	f383 8811 	msr	BASEPRI, r3
 800ce44:	f3bf 8f6f 	isb	sy
 800ce48:	f3bf 8f4f 	dsb	sy
 800ce4c:	623b      	str	r3, [r7, #32]
}
 800ce4e:	bf00      	nop
 800ce50:	e7fe      	b.n	800ce50 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ce52:	f002 fab9 	bl	800f3c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ce56:	f3ef 8211 	mrs	r2, BASEPRI
 800ce5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce5e:	f383 8811 	msr	BASEPRI, r3
 800ce62:	f3bf 8f6f 	isb	sy
 800ce66:	f3bf 8f4f 	dsb	sy
 800ce6a:	61fa      	str	r2, [r7, #28]
 800ce6c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ce6e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ce70:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d302      	bcc.n	800ce84 <xQueueGenericSendFromISR+0xbc>
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	2b02      	cmp	r3, #2
 800ce82:	d12f      	bne.n	800cee4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ce84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce92:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce94:	683a      	ldr	r2, [r7, #0]
 800ce96:	68b9      	ldr	r1, [r7, #8]
 800ce98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce9a:	f000 fb64 	bl	800d566 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ce9e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cea6:	d112      	bne.n	800cece <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d016      	beq.n	800cede <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ceb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb2:	3324      	adds	r3, #36	; 0x24
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f001 f987 	bl	800e1c8 <xTaskRemoveFromEventList>
 800ceba:	4603      	mov	r3, r0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00e      	beq.n	800cede <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00b      	beq.n	800cede <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2201      	movs	r2, #1
 800ceca:	601a      	str	r2, [r3, #0]
 800cecc:	e007      	b.n	800cede <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cece:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ced2:	3301      	adds	r3, #1
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	b25a      	sxtb	r2, r3
 800ced8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cede:	2301      	movs	r3, #1
 800cee0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cee2:	e001      	b.n	800cee8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cee4:	2300      	movs	r3, #0
 800cee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cef2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3740      	adds	r7, #64	; 0x40
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b08e      	sub	sp, #56	; 0x38
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
 800cf06:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800cf0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d10a      	bne.n	800cf28 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800cf12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf16:	f383 8811 	msr	BASEPRI, r3
 800cf1a:	f3bf 8f6f 	isb	sy
 800cf1e:	f3bf 8f4f 	dsb	sy
 800cf22:	623b      	str	r3, [r7, #32]
}
 800cf24:	bf00      	nop
 800cf26:	e7fe      	b.n	800cf26 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cf28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00a      	beq.n	800cf46 <xQueueGiveFromISR+0x48>
	__asm volatile
 800cf30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf34:	f383 8811 	msr	BASEPRI, r3
 800cf38:	f3bf 8f6f 	isb	sy
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	61fb      	str	r3, [r7, #28]
}
 800cf42:	bf00      	nop
 800cf44:	e7fe      	b.n	800cf44 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d103      	bne.n	800cf56 <xQueueGiveFromISR+0x58>
 800cf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d101      	bne.n	800cf5a <xQueueGiveFromISR+0x5c>
 800cf56:	2301      	movs	r3, #1
 800cf58:	e000      	b.n	800cf5c <xQueueGiveFromISR+0x5e>
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d10a      	bne.n	800cf76 <xQueueGiveFromISR+0x78>
	__asm volatile
 800cf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf64:	f383 8811 	msr	BASEPRI, r3
 800cf68:	f3bf 8f6f 	isb	sy
 800cf6c:	f3bf 8f4f 	dsb	sy
 800cf70:	61bb      	str	r3, [r7, #24]
}
 800cf72:	bf00      	nop
 800cf74:	e7fe      	b.n	800cf74 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf76:	f002 fa27 	bl	800f3c8 <vPortValidateInterruptPriority>
	__asm volatile
 800cf7a:	f3ef 8211 	mrs	r2, BASEPRI
 800cf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf82:	f383 8811 	msr	BASEPRI, r3
 800cf86:	f3bf 8f6f 	isb	sy
 800cf8a:	f3bf 8f4f 	dsb	sy
 800cf8e:	617a      	str	r2, [r7, #20]
 800cf90:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cf92:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cf9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d22b      	bcs.n	800cffe <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb2:	1c5a      	adds	r2, r3, #1
 800cfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cfb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cfbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfc0:	d112      	bne.n	800cfe8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d016      	beq.n	800cff8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfcc:	3324      	adds	r3, #36	; 0x24
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f001 f8fa 	bl	800e1c8 <xTaskRemoveFromEventList>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d00e      	beq.n	800cff8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d00b      	beq.n	800cff8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	601a      	str	r2, [r3, #0]
 800cfe6:	e007      	b.n	800cff8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cfe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfec:	3301      	adds	r3, #1
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	b25a      	sxtb	r2, r3
 800cff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cff8:	2301      	movs	r3, #1
 800cffa:	637b      	str	r3, [r7, #52]	; 0x34
 800cffc:	e001      	b.n	800d002 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cffe:	2300      	movs	r3, #0
 800d000:	637b      	str	r3, [r7, #52]	; 0x34
 800d002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d004:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f383 8811 	msr	BASEPRI, r3
}
 800d00c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d010:	4618      	mov	r0, r3
 800d012:	3738      	adds	r7, #56	; 0x38
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b08c      	sub	sp, #48	; 0x30
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d024:	2300      	movs	r3, #0
 800d026:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d10a      	bne.n	800d048 <xQueueReceive+0x30>
	__asm volatile
 800d032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d036:	f383 8811 	msr	BASEPRI, r3
 800d03a:	f3bf 8f6f 	isb	sy
 800d03e:	f3bf 8f4f 	dsb	sy
 800d042:	623b      	str	r3, [r7, #32]
}
 800d044:	bf00      	nop
 800d046:	e7fe      	b.n	800d046 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d103      	bne.n	800d056 <xQueueReceive+0x3e>
 800d04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d052:	2b00      	cmp	r3, #0
 800d054:	d101      	bne.n	800d05a <xQueueReceive+0x42>
 800d056:	2301      	movs	r3, #1
 800d058:	e000      	b.n	800d05c <xQueueReceive+0x44>
 800d05a:	2300      	movs	r3, #0
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d10a      	bne.n	800d076 <xQueueReceive+0x5e>
	__asm volatile
 800d060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d064:	f383 8811 	msr	BASEPRI, r3
 800d068:	f3bf 8f6f 	isb	sy
 800d06c:	f3bf 8f4f 	dsb	sy
 800d070:	61fb      	str	r3, [r7, #28]
}
 800d072:	bf00      	nop
 800d074:	e7fe      	b.n	800d074 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d076:	f001 fa69 	bl	800e54c <xTaskGetSchedulerState>
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d102      	bne.n	800d086 <xQueueReceive+0x6e>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d101      	bne.n	800d08a <xQueueReceive+0x72>
 800d086:	2301      	movs	r3, #1
 800d088:	e000      	b.n	800d08c <xQueueReceive+0x74>
 800d08a:	2300      	movs	r3, #0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d10a      	bne.n	800d0a6 <xQueueReceive+0x8e>
	__asm volatile
 800d090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d094:	f383 8811 	msr	BASEPRI, r3
 800d098:	f3bf 8f6f 	isb	sy
 800d09c:	f3bf 8f4f 	dsb	sy
 800d0a0:	61bb      	str	r3, [r7, #24]
}
 800d0a2:	bf00      	nop
 800d0a4:	e7fe      	b.n	800d0a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d0a6:	f002 f8ad 	bl	800f204 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d01f      	beq.n	800d0f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d0b6:	68b9      	ldr	r1, [r7, #8]
 800d0b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0ba:	f000 fabe 	bl	800d63a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c0:	1e5a      	subs	r2, r3, #1
 800d0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c8:	691b      	ldr	r3, [r3, #16]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d00f      	beq.n	800d0ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d0:	3310      	adds	r3, #16
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f001 f878 	bl	800e1c8 <xTaskRemoveFromEventList>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d007      	beq.n	800d0ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d0de:	4b3d      	ldr	r3, [pc, #244]	; (800d1d4 <xQueueReceive+0x1bc>)
 800d0e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0e4:	601a      	str	r2, [r3, #0]
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d0ee:	f002 f8b9 	bl	800f264 <vPortExitCritical>
				return pdPASS;
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	e069      	b.n	800d1ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d103      	bne.n	800d104 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d0fc:	f002 f8b2 	bl	800f264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d100:	2300      	movs	r3, #0
 800d102:	e062      	b.n	800d1ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d106:	2b00      	cmp	r3, #0
 800d108:	d106      	bne.n	800d118 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d10a:	f107 0310 	add.w	r3, r7, #16
 800d10e:	4618      	mov	r0, r3
 800d110:	f001 f8be 	bl	800e290 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d114:	2301      	movs	r3, #1
 800d116:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d118:	f002 f8a4 	bl	800f264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d11c:	f000 fe18 	bl	800dd50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d120:	f002 f870 	bl	800f204 <vPortEnterCritical>
 800d124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d126:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d12a:	b25b      	sxtb	r3, r3
 800d12c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d130:	d103      	bne.n	800d13a <xQueueReceive+0x122>
 800d132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d134:	2200      	movs	r2, #0
 800d136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d140:	b25b      	sxtb	r3, r3
 800d142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d146:	d103      	bne.n	800d150 <xQueueReceive+0x138>
 800d148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14a:	2200      	movs	r2, #0
 800d14c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d150:	f002 f888 	bl	800f264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d154:	1d3a      	adds	r2, r7, #4
 800d156:	f107 0310 	add.w	r3, r7, #16
 800d15a:	4611      	mov	r1, r2
 800d15c:	4618      	mov	r0, r3
 800d15e:	f001 f8ad 	bl	800e2bc <xTaskCheckForTimeOut>
 800d162:	4603      	mov	r3, r0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d123      	bne.n	800d1b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d16a:	f000 fade 	bl	800d72a <prvIsQueueEmpty>
 800d16e:	4603      	mov	r3, r0
 800d170:	2b00      	cmp	r3, #0
 800d172:	d017      	beq.n	800d1a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d176:	3324      	adds	r3, #36	; 0x24
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	4611      	mov	r1, r2
 800d17c:	4618      	mov	r0, r3
 800d17e:	f000 ffd3 	bl	800e128 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d184:	f000 fa7f 	bl	800d686 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d188:	f000 fdf0 	bl	800dd6c <xTaskResumeAll>
 800d18c:	4603      	mov	r3, r0
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d189      	bne.n	800d0a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d192:	4b10      	ldr	r3, [pc, #64]	; (800d1d4 <xQueueReceive+0x1bc>)
 800d194:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d198:	601a      	str	r2, [r3, #0]
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	f3bf 8f6f 	isb	sy
 800d1a2:	e780      	b.n	800d0a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d1a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1a6:	f000 fa6e 	bl	800d686 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1aa:	f000 fddf 	bl	800dd6c <xTaskResumeAll>
 800d1ae:	e77a      	b.n	800d0a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d1b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1b2:	f000 fa68 	bl	800d686 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d1b6:	f000 fdd9 	bl	800dd6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1bc:	f000 fab5 	bl	800d72a <prvIsQueueEmpty>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	f43f af6f 	beq.w	800d0a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d1c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3730      	adds	r7, #48	; 0x30
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	e000ed04 	.word	0xe000ed04

0800d1d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b08e      	sub	sp, #56	; 0x38
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d10a      	bne.n	800d20a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f8:	f383 8811 	msr	BASEPRI, r3
 800d1fc:	f3bf 8f6f 	isb	sy
 800d200:	f3bf 8f4f 	dsb	sy
 800d204:	623b      	str	r3, [r7, #32]
}
 800d206:	bf00      	nop
 800d208:	e7fe      	b.n	800d208 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d00a      	beq.n	800d228 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d216:	f383 8811 	msr	BASEPRI, r3
 800d21a:	f3bf 8f6f 	isb	sy
 800d21e:	f3bf 8f4f 	dsb	sy
 800d222:	61fb      	str	r3, [r7, #28]
}
 800d224:	bf00      	nop
 800d226:	e7fe      	b.n	800d226 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d228:	f001 f990 	bl	800e54c <xTaskGetSchedulerState>
 800d22c:	4603      	mov	r3, r0
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d102      	bne.n	800d238 <xQueueSemaphoreTake+0x60>
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d101      	bne.n	800d23c <xQueueSemaphoreTake+0x64>
 800d238:	2301      	movs	r3, #1
 800d23a:	e000      	b.n	800d23e <xQueueSemaphoreTake+0x66>
 800d23c:	2300      	movs	r3, #0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d10a      	bne.n	800d258 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d246:	f383 8811 	msr	BASEPRI, r3
 800d24a:	f3bf 8f6f 	isb	sy
 800d24e:	f3bf 8f4f 	dsb	sy
 800d252:	61bb      	str	r3, [r7, #24]
}
 800d254:	bf00      	nop
 800d256:	e7fe      	b.n	800d256 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d258:	f001 ffd4 	bl	800f204 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d260:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d264:	2b00      	cmp	r3, #0
 800d266:	d024      	beq.n	800d2b2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26a:	1e5a      	subs	r2, r3, #1
 800d26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d104      	bne.n	800d282 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d278:	f001 fade 	bl	800e838 <pvTaskIncrementMutexHeldCount>
 800d27c:	4602      	mov	r2, r0
 800d27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d280:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d284:	691b      	ldr	r3, [r3, #16]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d00f      	beq.n	800d2aa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28c:	3310      	adds	r3, #16
 800d28e:	4618      	mov	r0, r3
 800d290:	f000 ff9a 	bl	800e1c8 <xTaskRemoveFromEventList>
 800d294:	4603      	mov	r3, r0
 800d296:	2b00      	cmp	r3, #0
 800d298:	d007      	beq.n	800d2aa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d29a:	4b54      	ldr	r3, [pc, #336]	; (800d3ec <xQueueSemaphoreTake+0x214>)
 800d29c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2a0:	601a      	str	r2, [r3, #0]
 800d2a2:	f3bf 8f4f 	dsb	sy
 800d2a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d2aa:	f001 ffdb 	bl	800f264 <vPortExitCritical>
				return pdPASS;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	e097      	b.n	800d3e2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d111      	bne.n	800d2dc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d00a      	beq.n	800d2d4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c2:	f383 8811 	msr	BASEPRI, r3
 800d2c6:	f3bf 8f6f 	isb	sy
 800d2ca:	f3bf 8f4f 	dsb	sy
 800d2ce:	617b      	str	r3, [r7, #20]
}
 800d2d0:	bf00      	nop
 800d2d2:	e7fe      	b.n	800d2d2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d2d4:	f001 ffc6 	bl	800f264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	e082      	b.n	800d3e2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d106      	bne.n	800d2f0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d2e2:	f107 030c 	add.w	r3, r7, #12
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f000 ffd2 	bl	800e290 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d2f0:	f001 ffb8 	bl	800f264 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d2f4:	f000 fd2c 	bl	800dd50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d2f8:	f001 ff84 	bl	800f204 <vPortEnterCritical>
 800d2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d302:	b25b      	sxtb	r3, r3
 800d304:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d308:	d103      	bne.n	800d312 <xQueueSemaphoreTake+0x13a>
 800d30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30c:	2200      	movs	r2, #0
 800d30e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d318:	b25b      	sxtb	r3, r3
 800d31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d31e:	d103      	bne.n	800d328 <xQueueSemaphoreTake+0x150>
 800d320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d322:	2200      	movs	r2, #0
 800d324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d328:	f001 ff9c 	bl	800f264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d32c:	463a      	mov	r2, r7
 800d32e:	f107 030c 	add.w	r3, r7, #12
 800d332:	4611      	mov	r1, r2
 800d334:	4618      	mov	r0, r3
 800d336:	f000 ffc1 	bl	800e2bc <xTaskCheckForTimeOut>
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d132      	bne.n	800d3a6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d340:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d342:	f000 f9f2 	bl	800d72a <prvIsQueueEmpty>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d026      	beq.n	800d39a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d109      	bne.n	800d368 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d354:	f001 ff56 	bl	800f204 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35a:	689b      	ldr	r3, [r3, #8]
 800d35c:	4618      	mov	r0, r3
 800d35e:	f001 f913 	bl	800e588 <xTaskPriorityInherit>
 800d362:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d364:	f001 ff7e 	bl	800f264 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36a:	3324      	adds	r3, #36	; 0x24
 800d36c:	683a      	ldr	r2, [r7, #0]
 800d36e:	4611      	mov	r1, r2
 800d370:	4618      	mov	r0, r3
 800d372:	f000 fed9 	bl	800e128 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d376:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d378:	f000 f985 	bl	800d686 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d37c:	f000 fcf6 	bl	800dd6c <xTaskResumeAll>
 800d380:	4603      	mov	r3, r0
 800d382:	2b00      	cmp	r3, #0
 800d384:	f47f af68 	bne.w	800d258 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d388:	4b18      	ldr	r3, [pc, #96]	; (800d3ec <xQueueSemaphoreTake+0x214>)
 800d38a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d38e:	601a      	str	r2, [r3, #0]
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	f3bf 8f6f 	isb	sy
 800d398:	e75e      	b.n	800d258 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d39a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d39c:	f000 f973 	bl	800d686 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d3a0:	f000 fce4 	bl	800dd6c <xTaskResumeAll>
 800d3a4:	e758      	b.n	800d258 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d3a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3a8:	f000 f96d 	bl	800d686 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d3ac:	f000 fcde 	bl	800dd6c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3b2:	f000 f9ba 	bl	800d72a <prvIsQueueEmpty>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f43f af4d 	beq.w	800d258 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d00d      	beq.n	800d3e0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d3c4:	f001 ff1e 	bl	800f204 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d3c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3ca:	f000 f8b4 	bl	800d536 <prvGetDisinheritPriorityAfterTimeout>
 800d3ce:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d2:	689b      	ldr	r3, [r3, #8]
 800d3d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f001 f9ac 	bl	800e734 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d3dc:	f001 ff42 	bl	800f264 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d3e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3738      	adds	r7, #56	; 0x38
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop
 800d3ec:	e000ed04 	.word	0xe000ed04

0800d3f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b08e      	sub	sp, #56	; 0x38
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	60f8      	str	r0, [r7, #12]
 800d3f8:	60b9      	str	r1, [r7, #8]
 800d3fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d402:	2b00      	cmp	r3, #0
 800d404:	d10a      	bne.n	800d41c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d40a:	f383 8811 	msr	BASEPRI, r3
 800d40e:	f3bf 8f6f 	isb	sy
 800d412:	f3bf 8f4f 	dsb	sy
 800d416:	623b      	str	r3, [r7, #32]
}
 800d418:	bf00      	nop
 800d41a:	e7fe      	b.n	800d41a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d103      	bne.n	800d42a <xQueueReceiveFromISR+0x3a>
 800d422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d426:	2b00      	cmp	r3, #0
 800d428:	d101      	bne.n	800d42e <xQueueReceiveFromISR+0x3e>
 800d42a:	2301      	movs	r3, #1
 800d42c:	e000      	b.n	800d430 <xQueueReceiveFromISR+0x40>
 800d42e:	2300      	movs	r3, #0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d10a      	bne.n	800d44a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d438:	f383 8811 	msr	BASEPRI, r3
 800d43c:	f3bf 8f6f 	isb	sy
 800d440:	f3bf 8f4f 	dsb	sy
 800d444:	61fb      	str	r3, [r7, #28]
}
 800d446:	bf00      	nop
 800d448:	e7fe      	b.n	800d448 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d44a:	f001 ffbd 	bl	800f3c8 <vPortValidateInterruptPriority>
	__asm volatile
 800d44e:	f3ef 8211 	mrs	r2, BASEPRI
 800d452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d456:	f383 8811 	msr	BASEPRI, r3
 800d45a:	f3bf 8f6f 	isb	sy
 800d45e:	f3bf 8f4f 	dsb	sy
 800d462:	61ba      	str	r2, [r7, #24]
 800d464:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d466:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d468:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d46e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d472:	2b00      	cmp	r3, #0
 800d474:	d02f      	beq.n	800d4d6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d478:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d47c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d480:	68b9      	ldr	r1, [r7, #8]
 800d482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d484:	f000 f8d9 	bl	800d63a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48a:	1e5a      	subs	r2, r3, #1
 800d48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d48e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d490:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d498:	d112      	bne.n	800d4c0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49c:	691b      	ldr	r3, [r3, #16]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d016      	beq.n	800d4d0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a4:	3310      	adds	r3, #16
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f000 fe8e 	bl	800e1c8 <xTaskRemoveFromEventList>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d00e      	beq.n	800d4d0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d00b      	beq.n	800d4d0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	601a      	str	r2, [r3, #0]
 800d4be:	e007      	b.n	800d4d0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d4c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4c4:	3301      	adds	r3, #1
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	b25a      	sxtb	r2, r3
 800d4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	637b      	str	r3, [r7, #52]	; 0x34
 800d4d4:	e001      	b.n	800d4da <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	637b      	str	r3, [r7, #52]	; 0x34
 800d4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	f383 8811 	msr	BASEPRI, r3
}
 800d4e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3738      	adds	r7, #56	; 0x38
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10a      	bne.n	800d518 <vQueueDelete+0x28>
	__asm volatile
 800d502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d506:	f383 8811 	msr	BASEPRI, r3
 800d50a:	f3bf 8f6f 	isb	sy
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	60bb      	str	r3, [r7, #8]
}
 800d514:	bf00      	nop
 800d516:	e7fe      	b.n	800d516 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f000 f95f 	bl	800d7dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d524:	2b00      	cmp	r3, #0
 800d526:	d102      	bne.n	800d52e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f002 f859 	bl	800f5e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d52e:	bf00      	nop
 800d530:	3710      	adds	r7, #16
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}

0800d536 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d536:	b480      	push	{r7}
 800d538:	b085      	sub	sp, #20
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d542:	2b00      	cmp	r3, #0
 800d544:	d006      	beq.n	800d554 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d550:	60fb      	str	r3, [r7, #12]
 800d552:	e001      	b.n	800d558 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d554:	2300      	movs	r3, #0
 800d556:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d558:	68fb      	ldr	r3, [r7, #12]
	}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3714      	adds	r7, #20
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr

0800d566 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d566:	b580      	push	{r7, lr}
 800d568:	b086      	sub	sp, #24
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	60f8      	str	r0, [r7, #12]
 800d56e:	60b9      	str	r1, [r7, #8]
 800d570:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d572:	2300      	movs	r3, #0
 800d574:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d57a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d580:	2b00      	cmp	r3, #0
 800d582:	d10d      	bne.n	800d5a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d14d      	bne.n	800d628 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	4618      	mov	r0, r3
 800d592:	f001 f861 	bl	800e658 <xTaskPriorityDisinherit>
 800d596:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2200      	movs	r2, #0
 800d59c:	609a      	str	r2, [r3, #8]
 800d59e:	e043      	b.n	800d628 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d119      	bne.n	800d5da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	6858      	ldr	r0, [r3, #4]
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	68b9      	ldr	r1, [r7, #8]
 800d5b2:	f020 fb03 	bl	802dbbc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	685a      	ldr	r2, [r3, #4]
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5be:	441a      	add	r2, r3
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	685a      	ldr	r2, [r3, #4]
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	689b      	ldr	r3, [r3, #8]
 800d5cc:	429a      	cmp	r2, r3
 800d5ce:	d32b      	bcc.n	800d628 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681a      	ldr	r2, [r3, #0]
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	605a      	str	r2, [r3, #4]
 800d5d8:	e026      	b.n	800d628 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	68d8      	ldr	r0, [r3, #12]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	68b9      	ldr	r1, [r7, #8]
 800d5e6:	f020 fae9 	bl	802dbbc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	68da      	ldr	r2, [r3, #12]
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5f2:	425b      	negs	r3, r3
 800d5f4:	441a      	add	r2, r3
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	68da      	ldr	r2, [r3, #12]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	429a      	cmp	r2, r3
 800d604:	d207      	bcs.n	800d616 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	689a      	ldr	r2, [r3, #8]
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d60e:	425b      	negs	r3, r3
 800d610:	441a      	add	r2, r3
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2b02      	cmp	r3, #2
 800d61a:	d105      	bne.n	800d628 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d002      	beq.n	800d628 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	3b01      	subs	r3, #1
 800d626:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	1c5a      	adds	r2, r3, #1
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d630:	697b      	ldr	r3, [r7, #20]
}
 800d632:	4618      	mov	r0, r3
 800d634:	3718      	adds	r7, #24
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b082      	sub	sp, #8
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
 800d642:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d018      	beq.n	800d67e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	68da      	ldr	r2, [r3, #12]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d654:	441a      	add	r2, r3
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	68da      	ldr	r2, [r3, #12]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	689b      	ldr	r3, [r3, #8]
 800d662:	429a      	cmp	r2, r3
 800d664:	d303      	bcc.n	800d66e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681a      	ldr	r2, [r3, #0]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	68d9      	ldr	r1, [r3, #12]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d676:	461a      	mov	r2, r3
 800d678:	6838      	ldr	r0, [r7, #0]
 800d67a:	f020 fa9f 	bl	802dbbc <memcpy>
	}
}
 800d67e:	bf00      	nop
 800d680:	3708      	adds	r7, #8
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}

0800d686 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d686:	b580      	push	{r7, lr}
 800d688:	b084      	sub	sp, #16
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d68e:	f001 fdb9 	bl	800f204 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d698:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d69a:	e011      	b.n	800d6c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d012      	beq.n	800d6ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	3324      	adds	r3, #36	; 0x24
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f000 fd8d 	bl	800e1c8 <xTaskRemoveFromEventList>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d001      	beq.n	800d6b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d6b4:	f000 fe64 	bl	800e380 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d6b8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ba:	3b01      	subs	r3, #1
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d6c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	dce9      	bgt.n	800d69c <prvUnlockQueue+0x16>
 800d6c8:	e000      	b.n	800d6cc <prvUnlockQueue+0x46>
					break;
 800d6ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	22ff      	movs	r2, #255	; 0xff
 800d6d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d6d4:	f001 fdc6 	bl	800f264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d6d8:	f001 fd94 	bl	800f204 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d6e4:	e011      	b.n	800d70a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	691b      	ldr	r3, [r3, #16]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d012      	beq.n	800d714 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	3310      	adds	r3, #16
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f000 fd68 	bl	800e1c8 <xTaskRemoveFromEventList>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d001      	beq.n	800d702 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d6fe:	f000 fe3f 	bl	800e380 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d702:	7bbb      	ldrb	r3, [r7, #14]
 800d704:	3b01      	subs	r3, #1
 800d706:	b2db      	uxtb	r3, r3
 800d708:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d70a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	dce9      	bgt.n	800d6e6 <prvUnlockQueue+0x60>
 800d712:	e000      	b.n	800d716 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d714:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	22ff      	movs	r2, #255	; 0xff
 800d71a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d71e:	f001 fda1 	bl	800f264 <vPortExitCritical>
}
 800d722:	bf00      	nop
 800d724:	3710      	adds	r7, #16
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b084      	sub	sp, #16
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d732:	f001 fd67 	bl	800f204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d102      	bne.n	800d744 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d73e:	2301      	movs	r3, #1
 800d740:	60fb      	str	r3, [r7, #12]
 800d742:	e001      	b.n	800d748 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d744:	2300      	movs	r3, #0
 800d746:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d748:	f001 fd8c 	bl	800f264 <vPortExitCritical>

	return xReturn;
 800d74c:	68fb      	ldr	r3, [r7, #12]
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3710      	adds	r7, #16
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}

0800d756 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d756:	b580      	push	{r7, lr}
 800d758:	b084      	sub	sp, #16
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d75e:	f001 fd51 	bl	800f204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d102      	bne.n	800d774 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d76e:	2301      	movs	r3, #1
 800d770:	60fb      	str	r3, [r7, #12]
 800d772:	e001      	b.n	800d778 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d774:	2300      	movs	r3, #0
 800d776:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d778:	f001 fd74 	bl	800f264 <vPortExitCritical>

	return xReturn;
 800d77c:	68fb      	ldr	r3, [r7, #12]
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3710      	adds	r7, #16
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
	...

0800d788 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d788:	b480      	push	{r7}
 800d78a:	b085      	sub	sp, #20
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d792:	2300      	movs	r3, #0
 800d794:	60fb      	str	r3, [r7, #12]
 800d796:	e014      	b.n	800d7c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d798:	4a0f      	ldr	r2, [pc, #60]	; (800d7d8 <vQueueAddToRegistry+0x50>)
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d10b      	bne.n	800d7bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d7a4:	490c      	ldr	r1, [pc, #48]	; (800d7d8 <vQueueAddToRegistry+0x50>)
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	683a      	ldr	r2, [r7, #0]
 800d7aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d7ae:	4a0a      	ldr	r2, [pc, #40]	; (800d7d8 <vQueueAddToRegistry+0x50>)
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	00db      	lsls	r3, r3, #3
 800d7b4:	4413      	add	r3, r2
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d7ba:	e006      	b.n	800d7ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	3301      	adds	r3, #1
 800d7c0:	60fb      	str	r3, [r7, #12]
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2b07      	cmp	r3, #7
 800d7c6:	d9e7      	bls.n	800d798 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d7c8:	bf00      	nop
 800d7ca:	bf00      	nop
 800d7cc:	3714      	adds	r7, #20
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr
 800d7d6:	bf00      	nop
 800d7d8:	200115f0 	.word	0x200115f0

0800d7dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d7dc:	b480      	push	{r7}
 800d7de:	b085      	sub	sp, #20
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	60fb      	str	r3, [r7, #12]
 800d7e8:	e016      	b.n	800d818 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d7ea:	4a10      	ldr	r2, [pc, #64]	; (800d82c <vQueueUnregisterQueue+0x50>)
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	00db      	lsls	r3, r3, #3
 800d7f0:	4413      	add	r3, r2
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d10b      	bne.n	800d812 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d7fa:	4a0c      	ldr	r2, [pc, #48]	; (800d82c <vQueueUnregisterQueue+0x50>)
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2100      	movs	r1, #0
 800d800:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d804:	4a09      	ldr	r2, [pc, #36]	; (800d82c <vQueueUnregisterQueue+0x50>)
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	00db      	lsls	r3, r3, #3
 800d80a:	4413      	add	r3, r2
 800d80c:	2200      	movs	r2, #0
 800d80e:	605a      	str	r2, [r3, #4]
				break;
 800d810:	e006      	b.n	800d820 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	3301      	adds	r3, #1
 800d816:	60fb      	str	r3, [r7, #12]
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2b07      	cmp	r3, #7
 800d81c:	d9e5      	bls.n	800d7ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d81e:	bf00      	nop
 800d820:	bf00      	nop
 800d822:	3714      	adds	r7, #20
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr
 800d82c:	200115f0 	.word	0x200115f0

0800d830 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d830:	b580      	push	{r7, lr}
 800d832:	b086      	sub	sp, #24
 800d834:	af00      	add	r7, sp, #0
 800d836:	60f8      	str	r0, [r7, #12]
 800d838:	60b9      	str	r1, [r7, #8]
 800d83a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d840:	f001 fce0 	bl	800f204 <vPortEnterCritical>
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d84a:	b25b      	sxtb	r3, r3
 800d84c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d850:	d103      	bne.n	800d85a <vQueueWaitForMessageRestricted+0x2a>
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	2200      	movs	r2, #0
 800d856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d860:	b25b      	sxtb	r3, r3
 800d862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d866:	d103      	bne.n	800d870 <vQueueWaitForMessageRestricted+0x40>
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	2200      	movs	r2, #0
 800d86c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d870:	f001 fcf8 	bl	800f264 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d106      	bne.n	800d88a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	3324      	adds	r3, #36	; 0x24
 800d880:	687a      	ldr	r2, [r7, #4]
 800d882:	68b9      	ldr	r1, [r7, #8]
 800d884:	4618      	mov	r0, r3
 800d886:	f000 fc73 	bl	800e170 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d88a:	6978      	ldr	r0, [r7, #20]
 800d88c:	f7ff fefb 	bl	800d686 <prvUnlockQueue>
	}
 800d890:	bf00      	nop
 800d892:	3718      	adds	r7, #24
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b08e      	sub	sp, #56	; 0x38
 800d89c:	af04      	add	r7, sp, #16
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	607a      	str	r2, [r7, #4]
 800d8a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d10a      	bne.n	800d8c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b0:	f383 8811 	msr	BASEPRI, r3
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	623b      	str	r3, [r7, #32]
}
 800d8be:	bf00      	nop
 800d8c0:	e7fe      	b.n	800d8c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d10a      	bne.n	800d8de <xTaskCreateStatic+0x46>
	__asm volatile
 800d8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8cc:	f383 8811 	msr	BASEPRI, r3
 800d8d0:	f3bf 8f6f 	isb	sy
 800d8d4:	f3bf 8f4f 	dsb	sy
 800d8d8:	61fb      	str	r3, [r7, #28]
}
 800d8da:	bf00      	nop
 800d8dc:	e7fe      	b.n	800d8dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d8de:	23bc      	movs	r3, #188	; 0xbc
 800d8e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	2bbc      	cmp	r3, #188	; 0xbc
 800d8e6:	d00a      	beq.n	800d8fe <xTaskCreateStatic+0x66>
	__asm volatile
 800d8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ec:	f383 8811 	msr	BASEPRI, r3
 800d8f0:	f3bf 8f6f 	isb	sy
 800d8f4:	f3bf 8f4f 	dsb	sy
 800d8f8:	61bb      	str	r3, [r7, #24]
}
 800d8fa:	bf00      	nop
 800d8fc:	e7fe      	b.n	800d8fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d8fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d902:	2b00      	cmp	r3, #0
 800d904:	d01e      	beq.n	800d944 <xTaskCreateStatic+0xac>
 800d906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d01b      	beq.n	800d944 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d914:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d918:	2202      	movs	r2, #2
 800d91a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d91e:	2300      	movs	r3, #0
 800d920:	9303      	str	r3, [sp, #12]
 800d922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d924:	9302      	str	r3, [sp, #8]
 800d926:	f107 0314 	add.w	r3, r7, #20
 800d92a:	9301      	str	r3, [sp, #4]
 800d92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92e:	9300      	str	r3, [sp, #0]
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	68b9      	ldr	r1, [r7, #8]
 800d936:	68f8      	ldr	r0, [r7, #12]
 800d938:	f000 f850 	bl	800d9dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d93c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d93e:	f000 f8f3 	bl	800db28 <prvAddNewTaskToReadyList>
 800d942:	e001      	b.n	800d948 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d944:	2300      	movs	r3, #0
 800d946:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d948:	697b      	ldr	r3, [r7, #20]
	}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3728      	adds	r7, #40	; 0x28
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}

0800d952 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d952:	b580      	push	{r7, lr}
 800d954:	b08c      	sub	sp, #48	; 0x30
 800d956:	af04      	add	r7, sp, #16
 800d958:	60f8      	str	r0, [r7, #12]
 800d95a:	60b9      	str	r1, [r7, #8]
 800d95c:	603b      	str	r3, [r7, #0]
 800d95e:	4613      	mov	r3, r2
 800d960:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d962:	88fb      	ldrh	r3, [r7, #6]
 800d964:	009b      	lsls	r3, r3, #2
 800d966:	4618      	mov	r0, r3
 800d968:	f001 fd6e 	bl	800f448 <pvPortMalloc>
 800d96c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d00e      	beq.n	800d992 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d974:	20bc      	movs	r0, #188	; 0xbc
 800d976:	f001 fd67 	bl	800f448 <pvPortMalloc>
 800d97a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d003      	beq.n	800d98a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	697a      	ldr	r2, [r7, #20]
 800d986:	631a      	str	r2, [r3, #48]	; 0x30
 800d988:	e005      	b.n	800d996 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d98a:	6978      	ldr	r0, [r7, #20]
 800d98c:	f001 fe28 	bl	800f5e0 <vPortFree>
 800d990:	e001      	b.n	800d996 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d992:	2300      	movs	r3, #0
 800d994:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d996:	69fb      	ldr	r3, [r7, #28]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d017      	beq.n	800d9cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d99c:	69fb      	ldr	r3, [r7, #28]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d9a4:	88fa      	ldrh	r2, [r7, #6]
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	9303      	str	r3, [sp, #12]
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	9302      	str	r3, [sp, #8]
 800d9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b0:	9301      	str	r3, [sp, #4]
 800d9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b4:	9300      	str	r3, [sp, #0]
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	68b9      	ldr	r1, [r7, #8]
 800d9ba:	68f8      	ldr	r0, [r7, #12]
 800d9bc:	f000 f80e 	bl	800d9dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d9c0:	69f8      	ldr	r0, [r7, #28]
 800d9c2:	f000 f8b1 	bl	800db28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	61bb      	str	r3, [r7, #24]
 800d9ca:	e002      	b.n	800d9d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d9d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d9d2:	69bb      	ldr	r3, [r7, #24]
	}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3720      	adds	r7, #32
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b088      	sub	sp, #32
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	60f8      	str	r0, [r7, #12]
 800d9e4:	60b9      	str	r1, [r7, #8]
 800d9e6:	607a      	str	r2, [r7, #4]
 800d9e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	009b      	lsls	r3, r3, #2
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	21a5      	movs	r1, #165	; 0xa5
 800d9f6:	f020 f8ef 	bl	802dbd8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800da04:	3b01      	subs	r3, #1
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	4413      	add	r3, r2
 800da0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	f023 0307 	bic.w	r3, r3, #7
 800da12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800da14:	69bb      	ldr	r3, [r7, #24]
 800da16:	f003 0307 	and.w	r3, r3, #7
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d00a      	beq.n	800da34 <prvInitialiseNewTask+0x58>
	__asm volatile
 800da1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da22:	f383 8811 	msr	BASEPRI, r3
 800da26:	f3bf 8f6f 	isb	sy
 800da2a:	f3bf 8f4f 	dsb	sy
 800da2e:	617b      	str	r3, [r7, #20]
}
 800da30:	bf00      	nop
 800da32:	e7fe      	b.n	800da32 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d01f      	beq.n	800da7a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da3a:	2300      	movs	r3, #0
 800da3c:	61fb      	str	r3, [r7, #28]
 800da3e:	e012      	b.n	800da66 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800da40:	68ba      	ldr	r2, [r7, #8]
 800da42:	69fb      	ldr	r3, [r7, #28]
 800da44:	4413      	add	r3, r2
 800da46:	7819      	ldrb	r1, [r3, #0]
 800da48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da4a:	69fb      	ldr	r3, [r7, #28]
 800da4c:	4413      	add	r3, r2
 800da4e:	3334      	adds	r3, #52	; 0x34
 800da50:	460a      	mov	r2, r1
 800da52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800da54:	68ba      	ldr	r2, [r7, #8]
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	4413      	add	r3, r2
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d006      	beq.n	800da6e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800da60:	69fb      	ldr	r3, [r7, #28]
 800da62:	3301      	adds	r3, #1
 800da64:	61fb      	str	r3, [r7, #28]
 800da66:	69fb      	ldr	r3, [r7, #28]
 800da68:	2b0f      	cmp	r3, #15
 800da6a:	d9e9      	bls.n	800da40 <prvInitialiseNewTask+0x64>
 800da6c:	e000      	b.n	800da70 <prvInitialiseNewTask+0x94>
			{
				break;
 800da6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800da70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da72:	2200      	movs	r2, #0
 800da74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800da78:	e003      	b.n	800da82 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800da7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7c:	2200      	movs	r2, #0
 800da7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800da82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da84:	2b37      	cmp	r3, #55	; 0x37
 800da86:	d901      	bls.n	800da8c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800da88:	2337      	movs	r3, #55	; 0x37
 800da8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800da8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800da92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da96:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800da98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9a:	2200      	movs	r2, #0
 800da9c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800da9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daa0:	3304      	adds	r3, #4
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7fe fe56 	bl	800c754 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800daa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daaa:	3318      	adds	r3, #24
 800daac:	4618      	mov	r0, r3
 800daae:	f7fe fe51 	bl	800c754 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dab6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dac6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daca:	2200      	movs	r2, #0
 800dacc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad2:	2200      	movs	r2, #0
 800dad4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800dad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dada:	3354      	adds	r3, #84	; 0x54
 800dadc:	2260      	movs	r2, #96	; 0x60
 800dade:	2100      	movs	r1, #0
 800dae0:	4618      	mov	r0, r3
 800dae2:	f020 f879 	bl	802dbd8 <memset>
 800dae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dae8:	4a0c      	ldr	r2, [pc, #48]	; (800db1c <prvInitialiseNewTask+0x140>)
 800daea:	659a      	str	r2, [r3, #88]	; 0x58
 800daec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daee:	4a0c      	ldr	r2, [pc, #48]	; (800db20 <prvInitialiseNewTask+0x144>)
 800daf0:	65da      	str	r2, [r3, #92]	; 0x5c
 800daf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf4:	4a0b      	ldr	r2, [pc, #44]	; (800db24 <prvInitialiseNewTask+0x148>)
 800daf6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800daf8:	683a      	ldr	r2, [r7, #0]
 800dafa:	68f9      	ldr	r1, [r7, #12]
 800dafc:	69b8      	ldr	r0, [r7, #24]
 800dafe:	f001 fa51 	bl	800efa4 <pxPortInitialiseStack>
 800db02:	4602      	mov	r2, r0
 800db04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db06:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800db08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d002      	beq.n	800db14 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800db0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db14:	bf00      	nop
 800db16:	3720      	adds	r7, #32
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}
 800db1c:	08030ea0 	.word	0x08030ea0
 800db20:	08030ec0 	.word	0x08030ec0
 800db24:	08030e80 	.word	0x08030e80

0800db28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800db30:	f001 fb68 	bl	800f204 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800db34:	4b2d      	ldr	r3, [pc, #180]	; (800dbec <prvAddNewTaskToReadyList+0xc4>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	3301      	adds	r3, #1
 800db3a:	4a2c      	ldr	r2, [pc, #176]	; (800dbec <prvAddNewTaskToReadyList+0xc4>)
 800db3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800db3e:	4b2c      	ldr	r3, [pc, #176]	; (800dbf0 <prvAddNewTaskToReadyList+0xc8>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d109      	bne.n	800db5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800db46:	4a2a      	ldr	r2, [pc, #168]	; (800dbf0 <prvAddNewTaskToReadyList+0xc8>)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800db4c:	4b27      	ldr	r3, [pc, #156]	; (800dbec <prvAddNewTaskToReadyList+0xc4>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	2b01      	cmp	r3, #1
 800db52:	d110      	bne.n	800db76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800db54:	f000 fc38 	bl	800e3c8 <prvInitialiseTaskLists>
 800db58:	e00d      	b.n	800db76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800db5a:	4b26      	ldr	r3, [pc, #152]	; (800dbf4 <prvAddNewTaskToReadyList+0xcc>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d109      	bne.n	800db76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800db62:	4b23      	ldr	r3, [pc, #140]	; (800dbf0 <prvAddNewTaskToReadyList+0xc8>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d802      	bhi.n	800db76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800db70:	4a1f      	ldr	r2, [pc, #124]	; (800dbf0 <prvAddNewTaskToReadyList+0xc8>)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800db76:	4b20      	ldr	r3, [pc, #128]	; (800dbf8 <prvAddNewTaskToReadyList+0xd0>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	3301      	adds	r3, #1
 800db7c:	4a1e      	ldr	r2, [pc, #120]	; (800dbf8 <prvAddNewTaskToReadyList+0xd0>)
 800db7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800db80:	4b1d      	ldr	r3, [pc, #116]	; (800dbf8 <prvAddNewTaskToReadyList+0xd0>)
 800db82:	681a      	ldr	r2, [r3, #0]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db8c:	4b1b      	ldr	r3, [pc, #108]	; (800dbfc <prvAddNewTaskToReadyList+0xd4>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	429a      	cmp	r2, r3
 800db92:	d903      	bls.n	800db9c <prvAddNewTaskToReadyList+0x74>
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db98:	4a18      	ldr	r2, [pc, #96]	; (800dbfc <prvAddNewTaskToReadyList+0xd4>)
 800db9a:	6013      	str	r3, [r2, #0]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dba0:	4613      	mov	r3, r2
 800dba2:	009b      	lsls	r3, r3, #2
 800dba4:	4413      	add	r3, r2
 800dba6:	009b      	lsls	r3, r3, #2
 800dba8:	4a15      	ldr	r2, [pc, #84]	; (800dc00 <prvAddNewTaskToReadyList+0xd8>)
 800dbaa:	441a      	add	r2, r3
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	3304      	adds	r3, #4
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	4610      	mov	r0, r2
 800dbb4:	f7fe fddb 	bl	800c76e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dbb8:	f001 fb54 	bl	800f264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dbbc:	4b0d      	ldr	r3, [pc, #52]	; (800dbf4 <prvAddNewTaskToReadyList+0xcc>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d00e      	beq.n	800dbe2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dbc4:	4b0a      	ldr	r3, [pc, #40]	; (800dbf0 <prvAddNewTaskToReadyList+0xc8>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d207      	bcs.n	800dbe2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dbd2:	4b0c      	ldr	r3, [pc, #48]	; (800dc04 <prvAddNewTaskToReadyList+0xdc>)
 800dbd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbd8:	601a      	str	r2, [r3, #0]
 800dbda:	f3bf 8f4f 	dsb	sy
 800dbde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbe2:	bf00      	nop
 800dbe4:	3708      	adds	r7, #8
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}
 800dbea:	bf00      	nop
 800dbec:	20000a88 	.word	0x20000a88
 800dbf0:	200005b4 	.word	0x200005b4
 800dbf4:	20000a94 	.word	0x20000a94
 800dbf8:	20000aa4 	.word	0x20000aa4
 800dbfc:	20000a90 	.word	0x20000a90
 800dc00:	200005b8 	.word	0x200005b8
 800dc04:	e000ed04 	.word	0xe000ed04

0800dc08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800dc10:	2300      	movs	r3, #0
 800dc12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d017      	beq.n	800dc4a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800dc1a:	4b13      	ldr	r3, [pc, #76]	; (800dc68 <vTaskDelay+0x60>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d00a      	beq.n	800dc38 <vTaskDelay+0x30>
	__asm volatile
 800dc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc26:	f383 8811 	msr	BASEPRI, r3
 800dc2a:	f3bf 8f6f 	isb	sy
 800dc2e:	f3bf 8f4f 	dsb	sy
 800dc32:	60bb      	str	r3, [r7, #8]
}
 800dc34:	bf00      	nop
 800dc36:	e7fe      	b.n	800dc36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dc38:	f000 f88a 	bl	800dd50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dc3c:	2100      	movs	r1, #0
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 fe0e 	bl	800e860 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dc44:	f000 f892 	bl	800dd6c <xTaskResumeAll>
 800dc48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d107      	bne.n	800dc60 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dc50:	4b06      	ldr	r3, [pc, #24]	; (800dc6c <vTaskDelay+0x64>)
 800dc52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc56:	601a      	str	r2, [r3, #0]
 800dc58:	f3bf 8f4f 	dsb	sy
 800dc5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dc60:	bf00      	nop
 800dc62:	3710      	adds	r7, #16
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	20000ab0 	.word	0x20000ab0
 800dc6c:	e000ed04 	.word	0xe000ed04

0800dc70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b08a      	sub	sp, #40	; 0x28
 800dc74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dc76:	2300      	movs	r3, #0
 800dc78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dc7e:	463a      	mov	r2, r7
 800dc80:	1d39      	adds	r1, r7, #4
 800dc82:	f107 0308 	add.w	r3, r7, #8
 800dc86:	4618      	mov	r0, r3
 800dc88:	f7fe fd10 	bl	800c6ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dc8c:	6839      	ldr	r1, [r7, #0]
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	68ba      	ldr	r2, [r7, #8]
 800dc92:	9202      	str	r2, [sp, #8]
 800dc94:	9301      	str	r3, [sp, #4]
 800dc96:	2300      	movs	r3, #0
 800dc98:	9300      	str	r3, [sp, #0]
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	460a      	mov	r2, r1
 800dc9e:	4924      	ldr	r1, [pc, #144]	; (800dd30 <vTaskStartScheduler+0xc0>)
 800dca0:	4824      	ldr	r0, [pc, #144]	; (800dd34 <vTaskStartScheduler+0xc4>)
 800dca2:	f7ff fdf9 	bl	800d898 <xTaskCreateStatic>
 800dca6:	4603      	mov	r3, r0
 800dca8:	4a23      	ldr	r2, [pc, #140]	; (800dd38 <vTaskStartScheduler+0xc8>)
 800dcaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dcac:	4b22      	ldr	r3, [pc, #136]	; (800dd38 <vTaskStartScheduler+0xc8>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d002      	beq.n	800dcba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	617b      	str	r3, [r7, #20]
 800dcb8:	e001      	b.n	800dcbe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	d102      	bne.n	800dcca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dcc4:	f000 fe20 	bl	800e908 <xTimerCreateTimerTask>
 800dcc8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d11b      	bne.n	800dd08 <vTaskStartScheduler+0x98>
	__asm volatile
 800dcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd4:	f383 8811 	msr	BASEPRI, r3
 800dcd8:	f3bf 8f6f 	isb	sy
 800dcdc:	f3bf 8f4f 	dsb	sy
 800dce0:	613b      	str	r3, [r7, #16]
}
 800dce2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dce4:	4b15      	ldr	r3, [pc, #84]	; (800dd3c <vTaskStartScheduler+0xcc>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	3354      	adds	r3, #84	; 0x54
 800dcea:	4a15      	ldr	r2, [pc, #84]	; (800dd40 <vTaskStartScheduler+0xd0>)
 800dcec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dcee:	4b15      	ldr	r3, [pc, #84]	; (800dd44 <vTaskStartScheduler+0xd4>)
 800dcf0:	f04f 32ff 	mov.w	r2, #4294967295
 800dcf4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dcf6:	4b14      	ldr	r3, [pc, #80]	; (800dd48 <vTaskStartScheduler+0xd8>)
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dcfc:	4b13      	ldr	r3, [pc, #76]	; (800dd4c <vTaskStartScheduler+0xdc>)
 800dcfe:	2200      	movs	r2, #0
 800dd00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dd02:	f001 f9dd 	bl	800f0c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dd06:	e00e      	b.n	800dd26 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dd08:	697b      	ldr	r3, [r7, #20]
 800dd0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd0e:	d10a      	bne.n	800dd26 <vTaskStartScheduler+0xb6>
	__asm volatile
 800dd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd14:	f383 8811 	msr	BASEPRI, r3
 800dd18:	f3bf 8f6f 	isb	sy
 800dd1c:	f3bf 8f4f 	dsb	sy
 800dd20:	60fb      	str	r3, [r7, #12]
}
 800dd22:	bf00      	nop
 800dd24:	e7fe      	b.n	800dd24 <vTaskStartScheduler+0xb4>
}
 800dd26:	bf00      	nop
 800dd28:	3718      	adds	r7, #24
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	0802eb74 	.word	0x0802eb74
 800dd34:	0800e399 	.word	0x0800e399
 800dd38:	20000aac 	.word	0x20000aac
 800dd3c:	200005b4 	.word	0x200005b4
 800dd40:	20000098 	.word	0x20000098
 800dd44:	20000aa8 	.word	0x20000aa8
 800dd48:	20000a94 	.word	0x20000a94
 800dd4c:	20000a8c 	.word	0x20000a8c

0800dd50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dd50:	b480      	push	{r7}
 800dd52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dd54:	4b04      	ldr	r3, [pc, #16]	; (800dd68 <vTaskSuspendAll+0x18>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	3301      	adds	r3, #1
 800dd5a:	4a03      	ldr	r2, [pc, #12]	; (800dd68 <vTaskSuspendAll+0x18>)
 800dd5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dd5e:	bf00      	nop
 800dd60:	46bd      	mov	sp, r7
 800dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd66:	4770      	bx	lr
 800dd68:	20000ab0 	.word	0x20000ab0

0800dd6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dd72:	2300      	movs	r3, #0
 800dd74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dd76:	2300      	movs	r3, #0
 800dd78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dd7a:	4b42      	ldr	r3, [pc, #264]	; (800de84 <xTaskResumeAll+0x118>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d10a      	bne.n	800dd98 <xTaskResumeAll+0x2c>
	__asm volatile
 800dd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd86:	f383 8811 	msr	BASEPRI, r3
 800dd8a:	f3bf 8f6f 	isb	sy
 800dd8e:	f3bf 8f4f 	dsb	sy
 800dd92:	603b      	str	r3, [r7, #0]
}
 800dd94:	bf00      	nop
 800dd96:	e7fe      	b.n	800dd96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dd98:	f001 fa34 	bl	800f204 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dd9c:	4b39      	ldr	r3, [pc, #228]	; (800de84 <xTaskResumeAll+0x118>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	3b01      	subs	r3, #1
 800dda2:	4a38      	ldr	r2, [pc, #224]	; (800de84 <xTaskResumeAll+0x118>)
 800dda4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dda6:	4b37      	ldr	r3, [pc, #220]	; (800de84 <xTaskResumeAll+0x118>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d162      	bne.n	800de74 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ddae:	4b36      	ldr	r3, [pc, #216]	; (800de88 <xTaskResumeAll+0x11c>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d05e      	beq.n	800de74 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ddb6:	e02f      	b.n	800de18 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddb8:	4b34      	ldr	r3, [pc, #208]	; (800de8c <xTaskResumeAll+0x120>)
 800ddba:	68db      	ldr	r3, [r3, #12]
 800ddbc:	68db      	ldr	r3, [r3, #12]
 800ddbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	3318      	adds	r3, #24
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7fe fd2f 	bl	800c828 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	3304      	adds	r3, #4
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7fe fd2a 	bl	800c828 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddd8:	4b2d      	ldr	r3, [pc, #180]	; (800de90 <xTaskResumeAll+0x124>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d903      	bls.n	800dde8 <xTaskResumeAll+0x7c>
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dde4:	4a2a      	ldr	r2, [pc, #168]	; (800de90 <xTaskResumeAll+0x124>)
 800dde6:	6013      	str	r3, [r2, #0]
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddec:	4613      	mov	r3, r2
 800ddee:	009b      	lsls	r3, r3, #2
 800ddf0:	4413      	add	r3, r2
 800ddf2:	009b      	lsls	r3, r3, #2
 800ddf4:	4a27      	ldr	r2, [pc, #156]	; (800de94 <xTaskResumeAll+0x128>)
 800ddf6:	441a      	add	r2, r3
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	3304      	adds	r3, #4
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	4610      	mov	r0, r2
 800de00:	f7fe fcb5 	bl	800c76e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de08:	4b23      	ldr	r3, [pc, #140]	; (800de98 <xTaskResumeAll+0x12c>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de0e:	429a      	cmp	r2, r3
 800de10:	d302      	bcc.n	800de18 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800de12:	4b22      	ldr	r3, [pc, #136]	; (800de9c <xTaskResumeAll+0x130>)
 800de14:	2201      	movs	r2, #1
 800de16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800de18:	4b1c      	ldr	r3, [pc, #112]	; (800de8c <xTaskResumeAll+0x120>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d1cb      	bne.n	800ddb8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d001      	beq.n	800de2a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800de26:	f000 fb71 	bl	800e50c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800de2a:	4b1d      	ldr	r3, [pc, #116]	; (800dea0 <xTaskResumeAll+0x134>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d010      	beq.n	800de58 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800de36:	f000 f859 	bl	800deec <xTaskIncrementTick>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d002      	beq.n	800de46 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800de40:	4b16      	ldr	r3, [pc, #88]	; (800de9c <xTaskResumeAll+0x130>)
 800de42:	2201      	movs	r2, #1
 800de44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	3b01      	subs	r3, #1
 800de4a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d1f1      	bne.n	800de36 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800de52:	4b13      	ldr	r3, [pc, #76]	; (800dea0 <xTaskResumeAll+0x134>)
 800de54:	2200      	movs	r2, #0
 800de56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800de58:	4b10      	ldr	r3, [pc, #64]	; (800de9c <xTaskResumeAll+0x130>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d009      	beq.n	800de74 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800de60:	2301      	movs	r3, #1
 800de62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800de64:	4b0f      	ldr	r3, [pc, #60]	; (800dea4 <xTaskResumeAll+0x138>)
 800de66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de6a:	601a      	str	r2, [r3, #0]
 800de6c:	f3bf 8f4f 	dsb	sy
 800de70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de74:	f001 f9f6 	bl	800f264 <vPortExitCritical>

	return xAlreadyYielded;
 800de78:	68bb      	ldr	r3, [r7, #8]
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3710      	adds	r7, #16
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop
 800de84:	20000ab0 	.word	0x20000ab0
 800de88:	20000a88 	.word	0x20000a88
 800de8c:	20000a48 	.word	0x20000a48
 800de90:	20000a90 	.word	0x20000a90
 800de94:	200005b8 	.word	0x200005b8
 800de98:	200005b4 	.word	0x200005b4
 800de9c:	20000a9c 	.word	0x20000a9c
 800dea0:	20000a98 	.word	0x20000a98
 800dea4:	e000ed04 	.word	0xe000ed04

0800dea8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dea8:	b480      	push	{r7}
 800deaa:	b083      	sub	sp, #12
 800deac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800deae:	4b05      	ldr	r3, [pc, #20]	; (800dec4 <xTaskGetTickCount+0x1c>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800deb4:	687b      	ldr	r3, [r7, #4]
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	370c      	adds	r7, #12
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr
 800dec2:	bf00      	nop
 800dec4:	20000a8c 	.word	0x20000a8c

0800dec8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dece:	f001 fa7b 	bl	800f3c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ded2:	2300      	movs	r3, #0
 800ded4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ded6:	4b04      	ldr	r3, [pc, #16]	; (800dee8 <xTaskGetTickCountFromISR+0x20>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dedc:	683b      	ldr	r3, [r7, #0]
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3708      	adds	r7, #8
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	20000a8c 	.word	0x20000a8c

0800deec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b086      	sub	sp, #24
 800def0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800def2:	2300      	movs	r3, #0
 800def4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800def6:	4b4f      	ldr	r3, [pc, #316]	; (800e034 <xTaskIncrementTick+0x148>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2b00      	cmp	r3, #0
 800defc:	f040 808f 	bne.w	800e01e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800df00:	4b4d      	ldr	r3, [pc, #308]	; (800e038 <xTaskIncrementTick+0x14c>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	3301      	adds	r3, #1
 800df06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800df08:	4a4b      	ldr	r2, [pc, #300]	; (800e038 <xTaskIncrementTick+0x14c>)
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d120      	bne.n	800df56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800df14:	4b49      	ldr	r3, [pc, #292]	; (800e03c <xTaskIncrementTick+0x150>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d00a      	beq.n	800df34 <xTaskIncrementTick+0x48>
	__asm volatile
 800df1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df22:	f383 8811 	msr	BASEPRI, r3
 800df26:	f3bf 8f6f 	isb	sy
 800df2a:	f3bf 8f4f 	dsb	sy
 800df2e:	603b      	str	r3, [r7, #0]
}
 800df30:	bf00      	nop
 800df32:	e7fe      	b.n	800df32 <xTaskIncrementTick+0x46>
 800df34:	4b41      	ldr	r3, [pc, #260]	; (800e03c <xTaskIncrementTick+0x150>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	60fb      	str	r3, [r7, #12]
 800df3a:	4b41      	ldr	r3, [pc, #260]	; (800e040 <xTaskIncrementTick+0x154>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4a3f      	ldr	r2, [pc, #252]	; (800e03c <xTaskIncrementTick+0x150>)
 800df40:	6013      	str	r3, [r2, #0]
 800df42:	4a3f      	ldr	r2, [pc, #252]	; (800e040 <xTaskIncrementTick+0x154>)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	6013      	str	r3, [r2, #0]
 800df48:	4b3e      	ldr	r3, [pc, #248]	; (800e044 <xTaskIncrementTick+0x158>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	3301      	adds	r3, #1
 800df4e:	4a3d      	ldr	r2, [pc, #244]	; (800e044 <xTaskIncrementTick+0x158>)
 800df50:	6013      	str	r3, [r2, #0]
 800df52:	f000 fadb 	bl	800e50c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800df56:	4b3c      	ldr	r3, [pc, #240]	; (800e048 <xTaskIncrementTick+0x15c>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	693a      	ldr	r2, [r7, #16]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d349      	bcc.n	800dff4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df60:	4b36      	ldr	r3, [pc, #216]	; (800e03c <xTaskIncrementTick+0x150>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d104      	bne.n	800df74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df6a:	4b37      	ldr	r3, [pc, #220]	; (800e048 <xTaskIncrementTick+0x15c>)
 800df6c:	f04f 32ff 	mov.w	r2, #4294967295
 800df70:	601a      	str	r2, [r3, #0]
					break;
 800df72:	e03f      	b.n	800dff4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df74:	4b31      	ldr	r3, [pc, #196]	; (800e03c <xTaskIncrementTick+0x150>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	68db      	ldr	r3, [r3, #12]
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800df84:	693a      	ldr	r2, [r7, #16]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	429a      	cmp	r2, r3
 800df8a:	d203      	bcs.n	800df94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800df8c:	4a2e      	ldr	r2, [pc, #184]	; (800e048 <xTaskIncrementTick+0x15c>)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800df92:	e02f      	b.n	800dff4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	3304      	adds	r3, #4
 800df98:	4618      	mov	r0, r3
 800df9a:	f7fe fc45 	bl	800c828 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d004      	beq.n	800dfb0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	3318      	adds	r3, #24
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7fe fc3c 	bl	800c828 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfb4:	4b25      	ldr	r3, [pc, #148]	; (800e04c <xTaskIncrementTick+0x160>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d903      	bls.n	800dfc4 <xTaskIncrementTick+0xd8>
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfc0:	4a22      	ldr	r2, [pc, #136]	; (800e04c <xTaskIncrementTick+0x160>)
 800dfc2:	6013      	str	r3, [r2, #0]
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfc8:	4613      	mov	r3, r2
 800dfca:	009b      	lsls	r3, r3, #2
 800dfcc:	4413      	add	r3, r2
 800dfce:	009b      	lsls	r3, r3, #2
 800dfd0:	4a1f      	ldr	r2, [pc, #124]	; (800e050 <xTaskIncrementTick+0x164>)
 800dfd2:	441a      	add	r2, r3
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	3304      	adds	r3, #4
 800dfd8:	4619      	mov	r1, r3
 800dfda:	4610      	mov	r0, r2
 800dfdc:	f7fe fbc7 	bl	800c76e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfe4:	4b1b      	ldr	r3, [pc, #108]	; (800e054 <xTaskIncrementTick+0x168>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d3b8      	bcc.n	800df60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dfee:	2301      	movs	r3, #1
 800dff0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dff2:	e7b5      	b.n	800df60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dff4:	4b17      	ldr	r3, [pc, #92]	; (800e054 <xTaskIncrementTick+0x168>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dffa:	4915      	ldr	r1, [pc, #84]	; (800e050 <xTaskIncrementTick+0x164>)
 800dffc:	4613      	mov	r3, r2
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	4413      	add	r3, r2
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	440b      	add	r3, r1
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	2b01      	cmp	r3, #1
 800e00a:	d901      	bls.n	800e010 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e00c:	2301      	movs	r3, #1
 800e00e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e010:	4b11      	ldr	r3, [pc, #68]	; (800e058 <xTaskIncrementTick+0x16c>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d007      	beq.n	800e028 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e018:	2301      	movs	r3, #1
 800e01a:	617b      	str	r3, [r7, #20]
 800e01c:	e004      	b.n	800e028 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e01e:	4b0f      	ldr	r3, [pc, #60]	; (800e05c <xTaskIncrementTick+0x170>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	3301      	adds	r3, #1
 800e024:	4a0d      	ldr	r2, [pc, #52]	; (800e05c <xTaskIncrementTick+0x170>)
 800e026:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e028:	697b      	ldr	r3, [r7, #20]
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3718      	adds	r7, #24
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}
 800e032:	bf00      	nop
 800e034:	20000ab0 	.word	0x20000ab0
 800e038:	20000a8c 	.word	0x20000a8c
 800e03c:	20000a40 	.word	0x20000a40
 800e040:	20000a44 	.word	0x20000a44
 800e044:	20000aa0 	.word	0x20000aa0
 800e048:	20000aa8 	.word	0x20000aa8
 800e04c:	20000a90 	.word	0x20000a90
 800e050:	200005b8 	.word	0x200005b8
 800e054:	200005b4 	.word	0x200005b4
 800e058:	20000a9c 	.word	0x20000a9c
 800e05c:	20000a98 	.word	0x20000a98

0800e060 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e060:	b480      	push	{r7}
 800e062:	b085      	sub	sp, #20
 800e064:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e066:	4b2a      	ldr	r3, [pc, #168]	; (800e110 <vTaskSwitchContext+0xb0>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d003      	beq.n	800e076 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e06e:	4b29      	ldr	r3, [pc, #164]	; (800e114 <vTaskSwitchContext+0xb4>)
 800e070:	2201      	movs	r2, #1
 800e072:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e074:	e046      	b.n	800e104 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e076:	4b27      	ldr	r3, [pc, #156]	; (800e114 <vTaskSwitchContext+0xb4>)
 800e078:	2200      	movs	r2, #0
 800e07a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e07c:	4b26      	ldr	r3, [pc, #152]	; (800e118 <vTaskSwitchContext+0xb8>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	60fb      	str	r3, [r7, #12]
 800e082:	e010      	b.n	800e0a6 <vTaskSwitchContext+0x46>
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d10a      	bne.n	800e0a0 <vTaskSwitchContext+0x40>
	__asm volatile
 800e08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e08e:	f383 8811 	msr	BASEPRI, r3
 800e092:	f3bf 8f6f 	isb	sy
 800e096:	f3bf 8f4f 	dsb	sy
 800e09a:	607b      	str	r3, [r7, #4]
}
 800e09c:	bf00      	nop
 800e09e:	e7fe      	b.n	800e09e <vTaskSwitchContext+0x3e>
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	3b01      	subs	r3, #1
 800e0a4:	60fb      	str	r3, [r7, #12]
 800e0a6:	491d      	ldr	r1, [pc, #116]	; (800e11c <vTaskSwitchContext+0xbc>)
 800e0a8:	68fa      	ldr	r2, [r7, #12]
 800e0aa:	4613      	mov	r3, r2
 800e0ac:	009b      	lsls	r3, r3, #2
 800e0ae:	4413      	add	r3, r2
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	440b      	add	r3, r1
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d0e4      	beq.n	800e084 <vTaskSwitchContext+0x24>
 800e0ba:	68fa      	ldr	r2, [r7, #12]
 800e0bc:	4613      	mov	r3, r2
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	4413      	add	r3, r2
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	4a15      	ldr	r2, [pc, #84]	; (800e11c <vTaskSwitchContext+0xbc>)
 800e0c6:	4413      	add	r3, r2
 800e0c8:	60bb      	str	r3, [r7, #8]
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	685b      	ldr	r3, [r3, #4]
 800e0ce:	685a      	ldr	r2, [r3, #4]
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	605a      	str	r2, [r3, #4]
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	685a      	ldr	r2, [r3, #4]
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	3308      	adds	r3, #8
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d104      	bne.n	800e0ea <vTaskSwitchContext+0x8a>
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	685a      	ldr	r2, [r3, #4]
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	605a      	str	r2, [r3, #4]
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	685b      	ldr	r3, [r3, #4]
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	4a0b      	ldr	r2, [pc, #44]	; (800e120 <vTaskSwitchContext+0xc0>)
 800e0f2:	6013      	str	r3, [r2, #0]
 800e0f4:	4a08      	ldr	r2, [pc, #32]	; (800e118 <vTaskSwitchContext+0xb8>)
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e0fa:	4b09      	ldr	r3, [pc, #36]	; (800e120 <vTaskSwitchContext+0xc0>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	3354      	adds	r3, #84	; 0x54
 800e100:	4a08      	ldr	r2, [pc, #32]	; (800e124 <vTaskSwitchContext+0xc4>)
 800e102:	6013      	str	r3, [r2, #0]
}
 800e104:	bf00      	nop
 800e106:	3714      	adds	r7, #20
 800e108:	46bd      	mov	sp, r7
 800e10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10e:	4770      	bx	lr
 800e110:	20000ab0 	.word	0x20000ab0
 800e114:	20000a9c 	.word	0x20000a9c
 800e118:	20000a90 	.word	0x20000a90
 800e11c:	200005b8 	.word	0x200005b8
 800e120:	200005b4 	.word	0x200005b4
 800e124:	20000098 	.word	0x20000098

0800e128 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b084      	sub	sp, #16
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d10a      	bne.n	800e14e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e13c:	f383 8811 	msr	BASEPRI, r3
 800e140:	f3bf 8f6f 	isb	sy
 800e144:	f3bf 8f4f 	dsb	sy
 800e148:	60fb      	str	r3, [r7, #12]
}
 800e14a:	bf00      	nop
 800e14c:	e7fe      	b.n	800e14c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e14e:	4b07      	ldr	r3, [pc, #28]	; (800e16c <vTaskPlaceOnEventList+0x44>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	3318      	adds	r3, #24
 800e154:	4619      	mov	r1, r3
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f7fe fb2d 	bl	800c7b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e15c:	2101      	movs	r1, #1
 800e15e:	6838      	ldr	r0, [r7, #0]
 800e160:	f000 fb7e 	bl	800e860 <prvAddCurrentTaskToDelayedList>
}
 800e164:	bf00      	nop
 800e166:	3710      	adds	r7, #16
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	200005b4 	.word	0x200005b4

0800e170 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e170:	b580      	push	{r7, lr}
 800e172:	b086      	sub	sp, #24
 800e174:	af00      	add	r7, sp, #0
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	60b9      	str	r1, [r7, #8]
 800e17a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d10a      	bne.n	800e198 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e186:	f383 8811 	msr	BASEPRI, r3
 800e18a:	f3bf 8f6f 	isb	sy
 800e18e:	f3bf 8f4f 	dsb	sy
 800e192:	617b      	str	r3, [r7, #20]
}
 800e194:	bf00      	nop
 800e196:	e7fe      	b.n	800e196 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e198:	4b0a      	ldr	r3, [pc, #40]	; (800e1c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	3318      	adds	r3, #24
 800e19e:	4619      	mov	r1, r3
 800e1a0:	68f8      	ldr	r0, [r7, #12]
 800e1a2:	f7fe fae4 	bl	800c76e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d002      	beq.n	800e1b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e1ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e1b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e1b2:	6879      	ldr	r1, [r7, #4]
 800e1b4:	68b8      	ldr	r0, [r7, #8]
 800e1b6:	f000 fb53 	bl	800e860 <prvAddCurrentTaskToDelayedList>
	}
 800e1ba:	bf00      	nop
 800e1bc:	3718      	adds	r7, #24
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}
 800e1c2:	bf00      	nop
 800e1c4:	200005b4 	.word	0x200005b4

0800e1c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b086      	sub	sp, #24
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d10a      	bne.n	800e1f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e2:	f383 8811 	msr	BASEPRI, r3
 800e1e6:	f3bf 8f6f 	isb	sy
 800e1ea:	f3bf 8f4f 	dsb	sy
 800e1ee:	60fb      	str	r3, [r7, #12]
}
 800e1f0:	bf00      	nop
 800e1f2:	e7fe      	b.n	800e1f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	3318      	adds	r3, #24
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7fe fb15 	bl	800c828 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1fe:	4b1e      	ldr	r3, [pc, #120]	; (800e278 <xTaskRemoveFromEventList+0xb0>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d11d      	bne.n	800e242 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	3304      	adds	r3, #4
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7fe fb0c 	bl	800c828 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e214:	4b19      	ldr	r3, [pc, #100]	; (800e27c <xTaskRemoveFromEventList+0xb4>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	429a      	cmp	r2, r3
 800e21a:	d903      	bls.n	800e224 <xTaskRemoveFromEventList+0x5c>
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e220:	4a16      	ldr	r2, [pc, #88]	; (800e27c <xTaskRemoveFromEventList+0xb4>)
 800e222:	6013      	str	r3, [r2, #0]
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e228:	4613      	mov	r3, r2
 800e22a:	009b      	lsls	r3, r3, #2
 800e22c:	4413      	add	r3, r2
 800e22e:	009b      	lsls	r3, r3, #2
 800e230:	4a13      	ldr	r2, [pc, #76]	; (800e280 <xTaskRemoveFromEventList+0xb8>)
 800e232:	441a      	add	r2, r3
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	3304      	adds	r3, #4
 800e238:	4619      	mov	r1, r3
 800e23a:	4610      	mov	r0, r2
 800e23c:	f7fe fa97 	bl	800c76e <vListInsertEnd>
 800e240:	e005      	b.n	800e24e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	3318      	adds	r3, #24
 800e246:	4619      	mov	r1, r3
 800e248:	480e      	ldr	r0, [pc, #56]	; (800e284 <xTaskRemoveFromEventList+0xbc>)
 800e24a:	f7fe fa90 	bl	800c76e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e252:	4b0d      	ldr	r3, [pc, #52]	; (800e288 <xTaskRemoveFromEventList+0xc0>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e258:	429a      	cmp	r2, r3
 800e25a:	d905      	bls.n	800e268 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e25c:	2301      	movs	r3, #1
 800e25e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e260:	4b0a      	ldr	r3, [pc, #40]	; (800e28c <xTaskRemoveFromEventList+0xc4>)
 800e262:	2201      	movs	r2, #1
 800e264:	601a      	str	r2, [r3, #0]
 800e266:	e001      	b.n	800e26c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e268:	2300      	movs	r3, #0
 800e26a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e26c:	697b      	ldr	r3, [r7, #20]
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3718      	adds	r7, #24
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	20000ab0 	.word	0x20000ab0
 800e27c:	20000a90 	.word	0x20000a90
 800e280:	200005b8 	.word	0x200005b8
 800e284:	20000a48 	.word	0x20000a48
 800e288:	200005b4 	.word	0x200005b4
 800e28c:	20000a9c 	.word	0x20000a9c

0800e290 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e290:	b480      	push	{r7}
 800e292:	b083      	sub	sp, #12
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e298:	4b06      	ldr	r3, [pc, #24]	; (800e2b4 <vTaskInternalSetTimeOutState+0x24>)
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e2a0:	4b05      	ldr	r3, [pc, #20]	; (800e2b8 <vTaskInternalSetTimeOutState+0x28>)
 800e2a2:	681a      	ldr	r2, [r3, #0]
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	605a      	str	r2, [r3, #4]
}
 800e2a8:	bf00      	nop
 800e2aa:	370c      	adds	r7, #12
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr
 800e2b4:	20000aa0 	.word	0x20000aa0
 800e2b8:	20000a8c 	.word	0x20000a8c

0800e2bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b088      	sub	sp, #32
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d10a      	bne.n	800e2e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2d0:	f383 8811 	msr	BASEPRI, r3
 800e2d4:	f3bf 8f6f 	isb	sy
 800e2d8:	f3bf 8f4f 	dsb	sy
 800e2dc:	613b      	str	r3, [r7, #16]
}
 800e2de:	bf00      	nop
 800e2e0:	e7fe      	b.n	800e2e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d10a      	bne.n	800e2fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ec:	f383 8811 	msr	BASEPRI, r3
 800e2f0:	f3bf 8f6f 	isb	sy
 800e2f4:	f3bf 8f4f 	dsb	sy
 800e2f8:	60fb      	str	r3, [r7, #12]
}
 800e2fa:	bf00      	nop
 800e2fc:	e7fe      	b.n	800e2fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e2fe:	f000 ff81 	bl	800f204 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e302:	4b1d      	ldr	r3, [pc, #116]	; (800e378 <xTaskCheckForTimeOut+0xbc>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	685b      	ldr	r3, [r3, #4]
 800e30c:	69ba      	ldr	r2, [r7, #24]
 800e30e:	1ad3      	subs	r3, r2, r3
 800e310:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e31a:	d102      	bne.n	800e322 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e31c:	2300      	movs	r3, #0
 800e31e:	61fb      	str	r3, [r7, #28]
 800e320:	e023      	b.n	800e36a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681a      	ldr	r2, [r3, #0]
 800e326:	4b15      	ldr	r3, [pc, #84]	; (800e37c <xTaskCheckForTimeOut+0xc0>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	429a      	cmp	r2, r3
 800e32c:	d007      	beq.n	800e33e <xTaskCheckForTimeOut+0x82>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	685b      	ldr	r3, [r3, #4]
 800e332:	69ba      	ldr	r2, [r7, #24]
 800e334:	429a      	cmp	r2, r3
 800e336:	d302      	bcc.n	800e33e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e338:	2301      	movs	r3, #1
 800e33a:	61fb      	str	r3, [r7, #28]
 800e33c:	e015      	b.n	800e36a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	697a      	ldr	r2, [r7, #20]
 800e344:	429a      	cmp	r2, r3
 800e346:	d20b      	bcs.n	800e360 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	681a      	ldr	r2, [r3, #0]
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	1ad2      	subs	r2, r2, r3
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f7ff ff9b 	bl	800e290 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e35a:	2300      	movs	r3, #0
 800e35c:	61fb      	str	r3, [r7, #28]
 800e35e:	e004      	b.n	800e36a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	2200      	movs	r2, #0
 800e364:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e366:	2301      	movs	r3, #1
 800e368:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e36a:	f000 ff7b 	bl	800f264 <vPortExitCritical>

	return xReturn;
 800e36e:	69fb      	ldr	r3, [r7, #28]
}
 800e370:	4618      	mov	r0, r3
 800e372:	3720      	adds	r7, #32
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}
 800e378:	20000a8c 	.word	0x20000a8c
 800e37c:	20000aa0 	.word	0x20000aa0

0800e380 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e380:	b480      	push	{r7}
 800e382:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e384:	4b03      	ldr	r3, [pc, #12]	; (800e394 <vTaskMissedYield+0x14>)
 800e386:	2201      	movs	r2, #1
 800e388:	601a      	str	r2, [r3, #0]
}
 800e38a:	bf00      	nop
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr
 800e394:	20000a9c 	.word	0x20000a9c

0800e398 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e3a0:	f000 f852 	bl	800e448 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e3a4:	4b06      	ldr	r3, [pc, #24]	; (800e3c0 <prvIdleTask+0x28>)
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d9f9      	bls.n	800e3a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e3ac:	4b05      	ldr	r3, [pc, #20]	; (800e3c4 <prvIdleTask+0x2c>)
 800e3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3b2:	601a      	str	r2, [r3, #0]
 800e3b4:	f3bf 8f4f 	dsb	sy
 800e3b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e3bc:	e7f0      	b.n	800e3a0 <prvIdleTask+0x8>
 800e3be:	bf00      	nop
 800e3c0:	200005b8 	.word	0x200005b8
 800e3c4:	e000ed04 	.word	0xe000ed04

0800e3c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	607b      	str	r3, [r7, #4]
 800e3d2:	e00c      	b.n	800e3ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	009b      	lsls	r3, r3, #2
 800e3da:	4413      	add	r3, r2
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	4a12      	ldr	r2, [pc, #72]	; (800e428 <prvInitialiseTaskLists+0x60>)
 800e3e0:	4413      	add	r3, r2
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7fe f996 	bl	800c714 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	607b      	str	r3, [r7, #4]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2b37      	cmp	r3, #55	; 0x37
 800e3f2:	d9ef      	bls.n	800e3d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e3f4:	480d      	ldr	r0, [pc, #52]	; (800e42c <prvInitialiseTaskLists+0x64>)
 800e3f6:	f7fe f98d 	bl	800c714 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e3fa:	480d      	ldr	r0, [pc, #52]	; (800e430 <prvInitialiseTaskLists+0x68>)
 800e3fc:	f7fe f98a 	bl	800c714 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e400:	480c      	ldr	r0, [pc, #48]	; (800e434 <prvInitialiseTaskLists+0x6c>)
 800e402:	f7fe f987 	bl	800c714 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e406:	480c      	ldr	r0, [pc, #48]	; (800e438 <prvInitialiseTaskLists+0x70>)
 800e408:	f7fe f984 	bl	800c714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e40c:	480b      	ldr	r0, [pc, #44]	; (800e43c <prvInitialiseTaskLists+0x74>)
 800e40e:	f7fe f981 	bl	800c714 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e412:	4b0b      	ldr	r3, [pc, #44]	; (800e440 <prvInitialiseTaskLists+0x78>)
 800e414:	4a05      	ldr	r2, [pc, #20]	; (800e42c <prvInitialiseTaskLists+0x64>)
 800e416:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e418:	4b0a      	ldr	r3, [pc, #40]	; (800e444 <prvInitialiseTaskLists+0x7c>)
 800e41a:	4a05      	ldr	r2, [pc, #20]	; (800e430 <prvInitialiseTaskLists+0x68>)
 800e41c:	601a      	str	r2, [r3, #0]
}
 800e41e:	bf00      	nop
 800e420:	3708      	adds	r7, #8
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}
 800e426:	bf00      	nop
 800e428:	200005b8 	.word	0x200005b8
 800e42c:	20000a18 	.word	0x20000a18
 800e430:	20000a2c 	.word	0x20000a2c
 800e434:	20000a48 	.word	0x20000a48
 800e438:	20000a5c 	.word	0x20000a5c
 800e43c:	20000a74 	.word	0x20000a74
 800e440:	20000a40 	.word	0x20000a40
 800e444:	20000a44 	.word	0x20000a44

0800e448 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e44e:	e019      	b.n	800e484 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e450:	f000 fed8 	bl	800f204 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e454:	4b10      	ldr	r3, [pc, #64]	; (800e498 <prvCheckTasksWaitingTermination+0x50>)
 800e456:	68db      	ldr	r3, [r3, #12]
 800e458:	68db      	ldr	r3, [r3, #12]
 800e45a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	3304      	adds	r3, #4
 800e460:	4618      	mov	r0, r3
 800e462:	f7fe f9e1 	bl	800c828 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e466:	4b0d      	ldr	r3, [pc, #52]	; (800e49c <prvCheckTasksWaitingTermination+0x54>)
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	3b01      	subs	r3, #1
 800e46c:	4a0b      	ldr	r2, [pc, #44]	; (800e49c <prvCheckTasksWaitingTermination+0x54>)
 800e46e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e470:	4b0b      	ldr	r3, [pc, #44]	; (800e4a0 <prvCheckTasksWaitingTermination+0x58>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	3b01      	subs	r3, #1
 800e476:	4a0a      	ldr	r2, [pc, #40]	; (800e4a0 <prvCheckTasksWaitingTermination+0x58>)
 800e478:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e47a:	f000 fef3 	bl	800f264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 f810 	bl	800e4a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e484:	4b06      	ldr	r3, [pc, #24]	; (800e4a0 <prvCheckTasksWaitingTermination+0x58>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d1e1      	bne.n	800e450 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e48c:	bf00      	nop
 800e48e:	bf00      	nop
 800e490:	3708      	adds	r7, #8
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}
 800e496:	bf00      	nop
 800e498:	20000a5c 	.word	0x20000a5c
 800e49c:	20000a88 	.word	0x20000a88
 800e4a0:	20000a70 	.word	0x20000a70

0800e4a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b084      	sub	sp, #16
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	3354      	adds	r3, #84	; 0x54
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f01f ff75 	bl	802e3a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d108      	bne.n	800e4d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f001 f88b 	bl	800f5e0 <vPortFree>
				vPortFree( pxTCB );
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f001 f888 	bl	800f5e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e4d0:	e018      	b.n	800e504 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d103      	bne.n	800e4e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f001 f87f 	bl	800f5e0 <vPortFree>
	}
 800e4e2:	e00f      	b.n	800e504 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e4ea:	2b02      	cmp	r3, #2
 800e4ec:	d00a      	beq.n	800e504 <prvDeleteTCB+0x60>
	__asm volatile
 800e4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f2:	f383 8811 	msr	BASEPRI, r3
 800e4f6:	f3bf 8f6f 	isb	sy
 800e4fa:	f3bf 8f4f 	dsb	sy
 800e4fe:	60fb      	str	r3, [r7, #12]
}
 800e500:	bf00      	nop
 800e502:	e7fe      	b.n	800e502 <prvDeleteTCB+0x5e>
	}
 800e504:	bf00      	nop
 800e506:	3710      	adds	r7, #16
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e50c:	b480      	push	{r7}
 800e50e:	b083      	sub	sp, #12
 800e510:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e512:	4b0c      	ldr	r3, [pc, #48]	; (800e544 <prvResetNextTaskUnblockTime+0x38>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d104      	bne.n	800e526 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e51c:	4b0a      	ldr	r3, [pc, #40]	; (800e548 <prvResetNextTaskUnblockTime+0x3c>)
 800e51e:	f04f 32ff 	mov.w	r2, #4294967295
 800e522:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e524:	e008      	b.n	800e538 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e526:	4b07      	ldr	r3, [pc, #28]	; (800e544 <prvResetNextTaskUnblockTime+0x38>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	68db      	ldr	r3, [r3, #12]
 800e52c:	68db      	ldr	r3, [r3, #12]
 800e52e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	4a04      	ldr	r2, [pc, #16]	; (800e548 <prvResetNextTaskUnblockTime+0x3c>)
 800e536:	6013      	str	r3, [r2, #0]
}
 800e538:	bf00      	nop
 800e53a:	370c      	adds	r7, #12
 800e53c:	46bd      	mov	sp, r7
 800e53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e542:	4770      	bx	lr
 800e544:	20000a40 	.word	0x20000a40
 800e548:	20000aa8 	.word	0x20000aa8

0800e54c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e54c:	b480      	push	{r7}
 800e54e:	b083      	sub	sp, #12
 800e550:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e552:	4b0b      	ldr	r3, [pc, #44]	; (800e580 <xTaskGetSchedulerState+0x34>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d102      	bne.n	800e560 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e55a:	2301      	movs	r3, #1
 800e55c:	607b      	str	r3, [r7, #4]
 800e55e:	e008      	b.n	800e572 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e560:	4b08      	ldr	r3, [pc, #32]	; (800e584 <xTaskGetSchedulerState+0x38>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d102      	bne.n	800e56e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e568:	2302      	movs	r3, #2
 800e56a:	607b      	str	r3, [r7, #4]
 800e56c:	e001      	b.n	800e572 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e56e:	2300      	movs	r3, #0
 800e570:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e572:	687b      	ldr	r3, [r7, #4]
	}
 800e574:	4618      	mov	r0, r3
 800e576:	370c      	adds	r7, #12
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr
 800e580:	20000a94 	.word	0x20000a94
 800e584:	20000ab0 	.word	0x20000ab0

0800e588 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e594:	2300      	movs	r3, #0
 800e596:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d051      	beq.n	800e642 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5a2:	4b2a      	ldr	r3, [pc, #168]	; (800e64c <xTaskPriorityInherit+0xc4>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d241      	bcs.n	800e630 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	699b      	ldr	r3, [r3, #24]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	db06      	blt.n	800e5c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5b4:	4b25      	ldr	r3, [pc, #148]	; (800e64c <xTaskPriorityInherit+0xc4>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	6959      	ldr	r1, [r3, #20]
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ca:	4613      	mov	r3, r2
 800e5cc:	009b      	lsls	r3, r3, #2
 800e5ce:	4413      	add	r3, r2
 800e5d0:	009b      	lsls	r3, r3, #2
 800e5d2:	4a1f      	ldr	r2, [pc, #124]	; (800e650 <xTaskPriorityInherit+0xc8>)
 800e5d4:	4413      	add	r3, r2
 800e5d6:	4299      	cmp	r1, r3
 800e5d8:	d122      	bne.n	800e620 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	3304      	adds	r3, #4
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7fe f922 	bl	800c828 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e5e4:	4b19      	ldr	r3, [pc, #100]	; (800e64c <xTaskPriorityInherit+0xc4>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5f2:	4b18      	ldr	r3, [pc, #96]	; (800e654 <xTaskPriorityInherit+0xcc>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d903      	bls.n	800e602 <xTaskPriorityInherit+0x7a>
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5fe:	4a15      	ldr	r2, [pc, #84]	; (800e654 <xTaskPriorityInherit+0xcc>)
 800e600:	6013      	str	r3, [r2, #0]
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e606:	4613      	mov	r3, r2
 800e608:	009b      	lsls	r3, r3, #2
 800e60a:	4413      	add	r3, r2
 800e60c:	009b      	lsls	r3, r3, #2
 800e60e:	4a10      	ldr	r2, [pc, #64]	; (800e650 <xTaskPriorityInherit+0xc8>)
 800e610:	441a      	add	r2, r3
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	3304      	adds	r3, #4
 800e616:	4619      	mov	r1, r3
 800e618:	4610      	mov	r0, r2
 800e61a:	f7fe f8a8 	bl	800c76e <vListInsertEnd>
 800e61e:	e004      	b.n	800e62a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e620:	4b0a      	ldr	r3, [pc, #40]	; (800e64c <xTaskPriorityInherit+0xc4>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e62a:	2301      	movs	r3, #1
 800e62c:	60fb      	str	r3, [r7, #12]
 800e62e:	e008      	b.n	800e642 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e634:	4b05      	ldr	r3, [pc, #20]	; (800e64c <xTaskPriorityInherit+0xc4>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d201      	bcs.n	800e642 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e63e:	2301      	movs	r3, #1
 800e640:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e642:	68fb      	ldr	r3, [r7, #12]
	}
 800e644:	4618      	mov	r0, r3
 800e646:	3710      	adds	r7, #16
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	200005b4 	.word	0x200005b4
 800e650:	200005b8 	.word	0x200005b8
 800e654:	20000a90 	.word	0x20000a90

0800e658 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b086      	sub	sp, #24
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e664:	2300      	movs	r3, #0
 800e666:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d056      	beq.n	800e71c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e66e:	4b2e      	ldr	r3, [pc, #184]	; (800e728 <xTaskPriorityDisinherit+0xd0>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	693a      	ldr	r2, [r7, #16]
 800e674:	429a      	cmp	r2, r3
 800e676:	d00a      	beq.n	800e68e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e67c:	f383 8811 	msr	BASEPRI, r3
 800e680:	f3bf 8f6f 	isb	sy
 800e684:	f3bf 8f4f 	dsb	sy
 800e688:	60fb      	str	r3, [r7, #12]
}
 800e68a:	bf00      	nop
 800e68c:	e7fe      	b.n	800e68c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e692:	2b00      	cmp	r3, #0
 800e694:	d10a      	bne.n	800e6ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e69a:	f383 8811 	msr	BASEPRI, r3
 800e69e:	f3bf 8f6f 	isb	sy
 800e6a2:	f3bf 8f4f 	dsb	sy
 800e6a6:	60bb      	str	r3, [r7, #8]
}
 800e6a8:	bf00      	nop
 800e6aa:	e7fe      	b.n	800e6aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6b0:	1e5a      	subs	r2, r3, #1
 800e6b2:	693b      	ldr	r3, [r7, #16]
 800e6b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d02c      	beq.n	800e71c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d128      	bne.n	800e71c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	3304      	adds	r3, #4
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7fe f8aa 	bl	800c828 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ec:	4b0f      	ldr	r3, [pc, #60]	; (800e72c <xTaskPriorityDisinherit+0xd4>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d903      	bls.n	800e6fc <xTaskPriorityDisinherit+0xa4>
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f8:	4a0c      	ldr	r2, [pc, #48]	; (800e72c <xTaskPriorityDisinherit+0xd4>)
 800e6fa:	6013      	str	r3, [r2, #0]
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e700:	4613      	mov	r3, r2
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	4413      	add	r3, r2
 800e706:	009b      	lsls	r3, r3, #2
 800e708:	4a09      	ldr	r2, [pc, #36]	; (800e730 <xTaskPriorityDisinherit+0xd8>)
 800e70a:	441a      	add	r2, r3
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	3304      	adds	r3, #4
 800e710:	4619      	mov	r1, r3
 800e712:	4610      	mov	r0, r2
 800e714:	f7fe f82b 	bl	800c76e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e718:	2301      	movs	r3, #1
 800e71a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e71c:	697b      	ldr	r3, [r7, #20]
	}
 800e71e:	4618      	mov	r0, r3
 800e720:	3718      	adds	r7, #24
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	200005b4 	.word	0x200005b4
 800e72c:	20000a90 	.word	0x20000a90
 800e730:	200005b8 	.word	0x200005b8

0800e734 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e734:	b580      	push	{r7, lr}
 800e736:	b088      	sub	sp, #32
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e742:	2301      	movs	r3, #1
 800e744:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d06a      	beq.n	800e822 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e74c:	69bb      	ldr	r3, [r7, #24]
 800e74e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e750:	2b00      	cmp	r3, #0
 800e752:	d10a      	bne.n	800e76a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e758:	f383 8811 	msr	BASEPRI, r3
 800e75c:	f3bf 8f6f 	isb	sy
 800e760:	f3bf 8f4f 	dsb	sy
 800e764:	60fb      	str	r3, [r7, #12]
}
 800e766:	bf00      	nop
 800e768:	e7fe      	b.n	800e768 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e76a:	69bb      	ldr	r3, [r7, #24]
 800e76c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e76e:	683a      	ldr	r2, [r7, #0]
 800e770:	429a      	cmp	r2, r3
 800e772:	d902      	bls.n	800e77a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	61fb      	str	r3, [r7, #28]
 800e778:	e002      	b.n	800e780 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e77a:	69bb      	ldr	r3, [r7, #24]
 800e77c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e77e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e780:	69bb      	ldr	r3, [r7, #24]
 800e782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e784:	69fa      	ldr	r2, [r7, #28]
 800e786:	429a      	cmp	r2, r3
 800e788:	d04b      	beq.n	800e822 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e78a:	69bb      	ldr	r3, [r7, #24]
 800e78c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e78e:	697a      	ldr	r2, [r7, #20]
 800e790:	429a      	cmp	r2, r3
 800e792:	d146      	bne.n	800e822 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e794:	4b25      	ldr	r3, [pc, #148]	; (800e82c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	69ba      	ldr	r2, [r7, #24]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d10a      	bne.n	800e7b4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7a2:	f383 8811 	msr	BASEPRI, r3
 800e7a6:	f3bf 8f6f 	isb	sy
 800e7aa:	f3bf 8f4f 	dsb	sy
 800e7ae:	60bb      	str	r3, [r7, #8]
}
 800e7b0:	bf00      	nop
 800e7b2:	e7fe      	b.n	800e7b2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e7b4:	69bb      	ldr	r3, [r7, #24]
 800e7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7b8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e7ba:	69bb      	ldr	r3, [r7, #24]
 800e7bc:	69fa      	ldr	r2, [r7, #28]
 800e7be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e7c0:	69bb      	ldr	r3, [r7, #24]
 800e7c2:	699b      	ldr	r3, [r3, #24]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	db04      	blt.n	800e7d2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e7d2:	69bb      	ldr	r3, [r7, #24]
 800e7d4:	6959      	ldr	r1, [r3, #20]
 800e7d6:	693a      	ldr	r2, [r7, #16]
 800e7d8:	4613      	mov	r3, r2
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	4413      	add	r3, r2
 800e7de:	009b      	lsls	r3, r3, #2
 800e7e0:	4a13      	ldr	r2, [pc, #76]	; (800e830 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e7e2:	4413      	add	r3, r2
 800e7e4:	4299      	cmp	r1, r3
 800e7e6:	d11c      	bne.n	800e822 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7e8:	69bb      	ldr	r3, [r7, #24]
 800e7ea:	3304      	adds	r3, #4
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7fe f81b 	bl	800c828 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e7f2:	69bb      	ldr	r3, [r7, #24]
 800e7f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7f6:	4b0f      	ldr	r3, [pc, #60]	; (800e834 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d903      	bls.n	800e806 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e7fe:	69bb      	ldr	r3, [r7, #24]
 800e800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e802:	4a0c      	ldr	r2, [pc, #48]	; (800e834 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e804:	6013      	str	r3, [r2, #0]
 800e806:	69bb      	ldr	r3, [r7, #24]
 800e808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e80a:	4613      	mov	r3, r2
 800e80c:	009b      	lsls	r3, r3, #2
 800e80e:	4413      	add	r3, r2
 800e810:	009b      	lsls	r3, r3, #2
 800e812:	4a07      	ldr	r2, [pc, #28]	; (800e830 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e814:	441a      	add	r2, r3
 800e816:	69bb      	ldr	r3, [r7, #24]
 800e818:	3304      	adds	r3, #4
 800e81a:	4619      	mov	r1, r3
 800e81c:	4610      	mov	r0, r2
 800e81e:	f7fd ffa6 	bl	800c76e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e822:	bf00      	nop
 800e824:	3720      	adds	r7, #32
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop
 800e82c:	200005b4 	.word	0x200005b4
 800e830:	200005b8 	.word	0x200005b8
 800e834:	20000a90 	.word	0x20000a90

0800e838 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e838:	b480      	push	{r7}
 800e83a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e83c:	4b07      	ldr	r3, [pc, #28]	; (800e85c <pvTaskIncrementMutexHeldCount+0x24>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d004      	beq.n	800e84e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e844:	4b05      	ldr	r3, [pc, #20]	; (800e85c <pvTaskIncrementMutexHeldCount+0x24>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e84a:	3201      	adds	r2, #1
 800e84c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e84e:	4b03      	ldr	r3, [pc, #12]	; (800e85c <pvTaskIncrementMutexHeldCount+0x24>)
 800e850:	681b      	ldr	r3, [r3, #0]
	}
 800e852:	4618      	mov	r0, r3
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr
 800e85c:	200005b4 	.word	0x200005b4

0800e860 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b084      	sub	sp, #16
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e86a:	4b21      	ldr	r3, [pc, #132]	; (800e8f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e870:	4b20      	ldr	r3, [pc, #128]	; (800e8f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	3304      	adds	r3, #4
 800e876:	4618      	mov	r0, r3
 800e878:	f7fd ffd6 	bl	800c828 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e882:	d10a      	bne.n	800e89a <prvAddCurrentTaskToDelayedList+0x3a>
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d007      	beq.n	800e89a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e88a:	4b1a      	ldr	r3, [pc, #104]	; (800e8f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	3304      	adds	r3, #4
 800e890:	4619      	mov	r1, r3
 800e892:	4819      	ldr	r0, [pc, #100]	; (800e8f8 <prvAddCurrentTaskToDelayedList+0x98>)
 800e894:	f7fd ff6b 	bl	800c76e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e898:	e026      	b.n	800e8e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e89a:	68fa      	ldr	r2, [r7, #12]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	4413      	add	r3, r2
 800e8a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e8a2:	4b14      	ldr	r3, [pc, #80]	; (800e8f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	68ba      	ldr	r2, [r7, #8]
 800e8a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e8aa:	68ba      	ldr	r2, [r7, #8]
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d209      	bcs.n	800e8c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8b2:	4b12      	ldr	r3, [pc, #72]	; (800e8fc <prvAddCurrentTaskToDelayedList+0x9c>)
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	4b0f      	ldr	r3, [pc, #60]	; (800e8f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	3304      	adds	r3, #4
 800e8bc:	4619      	mov	r1, r3
 800e8be:	4610      	mov	r0, r2
 800e8c0:	f7fd ff79 	bl	800c7b6 <vListInsert>
}
 800e8c4:	e010      	b.n	800e8e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8c6:	4b0e      	ldr	r3, [pc, #56]	; (800e900 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e8c8:	681a      	ldr	r2, [r3, #0]
 800e8ca:	4b0a      	ldr	r3, [pc, #40]	; (800e8f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	3304      	adds	r3, #4
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	4610      	mov	r0, r2
 800e8d4:	f7fd ff6f 	bl	800c7b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e8d8:	4b0a      	ldr	r3, [pc, #40]	; (800e904 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	68ba      	ldr	r2, [r7, #8]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d202      	bcs.n	800e8e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e8e2:	4a08      	ldr	r2, [pc, #32]	; (800e904 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	6013      	str	r3, [r2, #0]
}
 800e8e8:	bf00      	nop
 800e8ea:	3710      	adds	r7, #16
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd80      	pop	{r7, pc}
 800e8f0:	20000a8c 	.word	0x20000a8c
 800e8f4:	200005b4 	.word	0x200005b4
 800e8f8:	20000a74 	.word	0x20000a74
 800e8fc:	20000a44 	.word	0x20000a44
 800e900:	20000a40 	.word	0x20000a40
 800e904:	20000aa8 	.word	0x20000aa8

0800e908 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b08a      	sub	sp, #40	; 0x28
 800e90c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e90e:	2300      	movs	r3, #0
 800e910:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e912:	f000 fb07 	bl	800ef24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e916:	4b1c      	ldr	r3, [pc, #112]	; (800e988 <xTimerCreateTimerTask+0x80>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d021      	beq.n	800e962 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e91e:	2300      	movs	r3, #0
 800e920:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e922:	2300      	movs	r3, #0
 800e924:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e926:	1d3a      	adds	r2, r7, #4
 800e928:	f107 0108 	add.w	r1, r7, #8
 800e92c:	f107 030c 	add.w	r3, r7, #12
 800e930:	4618      	mov	r0, r3
 800e932:	f7fd fed5 	bl	800c6e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e936:	6879      	ldr	r1, [r7, #4]
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	68fa      	ldr	r2, [r7, #12]
 800e93c:	9202      	str	r2, [sp, #8]
 800e93e:	9301      	str	r3, [sp, #4]
 800e940:	2302      	movs	r3, #2
 800e942:	9300      	str	r3, [sp, #0]
 800e944:	2300      	movs	r3, #0
 800e946:	460a      	mov	r2, r1
 800e948:	4910      	ldr	r1, [pc, #64]	; (800e98c <xTimerCreateTimerTask+0x84>)
 800e94a:	4811      	ldr	r0, [pc, #68]	; (800e990 <xTimerCreateTimerTask+0x88>)
 800e94c:	f7fe ffa4 	bl	800d898 <xTaskCreateStatic>
 800e950:	4603      	mov	r3, r0
 800e952:	4a10      	ldr	r2, [pc, #64]	; (800e994 <xTimerCreateTimerTask+0x8c>)
 800e954:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e956:	4b0f      	ldr	r3, [pc, #60]	; (800e994 <xTimerCreateTimerTask+0x8c>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d001      	beq.n	800e962 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e95e:	2301      	movs	r3, #1
 800e960:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d10a      	bne.n	800e97e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e96c:	f383 8811 	msr	BASEPRI, r3
 800e970:	f3bf 8f6f 	isb	sy
 800e974:	f3bf 8f4f 	dsb	sy
 800e978:	613b      	str	r3, [r7, #16]
}
 800e97a:	bf00      	nop
 800e97c:	e7fe      	b.n	800e97c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e97e:	697b      	ldr	r3, [r7, #20]
}
 800e980:	4618      	mov	r0, r3
 800e982:	3718      	adds	r7, #24
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}
 800e988:	20000ae4 	.word	0x20000ae4
 800e98c:	0802eb7c 	.word	0x0802eb7c
 800e990:	0800eacd 	.word	0x0800eacd
 800e994:	20000ae8 	.word	0x20000ae8

0800e998 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b08a      	sub	sp, #40	; 0x28
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	607a      	str	r2, [r7, #4]
 800e9a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d10a      	bne.n	800e9c6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b4:	f383 8811 	msr	BASEPRI, r3
 800e9b8:	f3bf 8f6f 	isb	sy
 800e9bc:	f3bf 8f4f 	dsb	sy
 800e9c0:	623b      	str	r3, [r7, #32]
}
 800e9c2:	bf00      	nop
 800e9c4:	e7fe      	b.n	800e9c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e9c6:	4b1a      	ldr	r3, [pc, #104]	; (800ea30 <xTimerGenericCommand+0x98>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d02a      	beq.n	800ea24 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	2b05      	cmp	r3, #5
 800e9de:	dc18      	bgt.n	800ea12 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e9e0:	f7ff fdb4 	bl	800e54c <xTaskGetSchedulerState>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	2b02      	cmp	r3, #2
 800e9e8:	d109      	bne.n	800e9fe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e9ea:	4b11      	ldr	r3, [pc, #68]	; (800ea30 <xTimerGenericCommand+0x98>)
 800e9ec:	6818      	ldr	r0, [r3, #0]
 800e9ee:	f107 0110 	add.w	r1, r7, #16
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9f6:	f7fe f8e9 	bl	800cbcc <xQueueGenericSend>
 800e9fa:	6278      	str	r0, [r7, #36]	; 0x24
 800e9fc:	e012      	b.n	800ea24 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e9fe:	4b0c      	ldr	r3, [pc, #48]	; (800ea30 <xTimerGenericCommand+0x98>)
 800ea00:	6818      	ldr	r0, [r3, #0]
 800ea02:	f107 0110 	add.w	r1, r7, #16
 800ea06:	2300      	movs	r3, #0
 800ea08:	2200      	movs	r2, #0
 800ea0a:	f7fe f8df 	bl	800cbcc <xQueueGenericSend>
 800ea0e:	6278      	str	r0, [r7, #36]	; 0x24
 800ea10:	e008      	b.n	800ea24 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ea12:	4b07      	ldr	r3, [pc, #28]	; (800ea30 <xTimerGenericCommand+0x98>)
 800ea14:	6818      	ldr	r0, [r3, #0]
 800ea16:	f107 0110 	add.w	r1, r7, #16
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	683a      	ldr	r2, [r7, #0]
 800ea1e:	f7fe f9d3 	bl	800cdc8 <xQueueGenericSendFromISR>
 800ea22:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ea24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3728      	adds	r7, #40	; 0x28
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	20000ae4 	.word	0x20000ae4

0800ea34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b088      	sub	sp, #32
 800ea38:	af02      	add	r7, sp, #8
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea3e:	4b22      	ldr	r3, [pc, #136]	; (800eac8 <prvProcessExpiredTimer+0x94>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	68db      	ldr	r3, [r3, #12]
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	3304      	adds	r3, #4
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7fd feeb 	bl	800c828 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ea58:	f003 0304 	and.w	r3, r3, #4
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d022      	beq.n	800eaa6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	699a      	ldr	r2, [r3, #24]
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	18d1      	adds	r1, r2, r3
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	683a      	ldr	r2, [r7, #0]
 800ea6c:	6978      	ldr	r0, [r7, #20]
 800ea6e:	f000 f8d1 	bl	800ec14 <prvInsertTimerInActiveList>
 800ea72:	4603      	mov	r3, r0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d01f      	beq.n	800eab8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ea78:	2300      	movs	r3, #0
 800ea7a:	9300      	str	r3, [sp, #0]
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	687a      	ldr	r2, [r7, #4]
 800ea80:	2100      	movs	r1, #0
 800ea82:	6978      	ldr	r0, [r7, #20]
 800ea84:	f7ff ff88 	bl	800e998 <xTimerGenericCommand>
 800ea88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d113      	bne.n	800eab8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ea90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea94:	f383 8811 	msr	BASEPRI, r3
 800ea98:	f3bf 8f6f 	isb	sy
 800ea9c:	f3bf 8f4f 	dsb	sy
 800eaa0:	60fb      	str	r3, [r7, #12]
}
 800eaa2:	bf00      	nop
 800eaa4:	e7fe      	b.n	800eaa4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eaac:	f023 0301 	bic.w	r3, r3, #1
 800eab0:	b2da      	uxtb	r2, r3
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	6a1b      	ldr	r3, [r3, #32]
 800eabc:	6978      	ldr	r0, [r7, #20]
 800eabe:	4798      	blx	r3
}
 800eac0:	bf00      	nop
 800eac2:	3718      	adds	r7, #24
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}
 800eac8:	20000adc 	.word	0x20000adc

0800eacc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ead4:	f107 0308 	add.w	r3, r7, #8
 800ead8:	4618      	mov	r0, r3
 800eada:	f000 f857 	bl	800eb8c <prvGetNextExpireTime>
 800eade:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	4619      	mov	r1, r3
 800eae4:	68f8      	ldr	r0, [r7, #12]
 800eae6:	f000 f803 	bl	800eaf0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800eaea:	f000 f8d5 	bl	800ec98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eaee:	e7f1      	b.n	800ead4 <prvTimerTask+0x8>

0800eaf0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800eafa:	f7ff f929 	bl	800dd50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eafe:	f107 0308 	add.w	r3, r7, #8
 800eb02:	4618      	mov	r0, r3
 800eb04:	f000 f866 	bl	800ebd4 <prvSampleTimeNow>
 800eb08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d130      	bne.n	800eb72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d10a      	bne.n	800eb2c <prvProcessTimerOrBlockTask+0x3c>
 800eb16:	687a      	ldr	r2, [r7, #4]
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d806      	bhi.n	800eb2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eb1e:	f7ff f925 	bl	800dd6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eb22:	68f9      	ldr	r1, [r7, #12]
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f7ff ff85 	bl	800ea34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eb2a:	e024      	b.n	800eb76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d008      	beq.n	800eb44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eb32:	4b13      	ldr	r3, [pc, #76]	; (800eb80 <prvProcessTimerOrBlockTask+0x90>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d101      	bne.n	800eb40 <prvProcessTimerOrBlockTask+0x50>
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	e000      	b.n	800eb42 <prvProcessTimerOrBlockTask+0x52>
 800eb40:	2300      	movs	r3, #0
 800eb42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800eb44:	4b0f      	ldr	r3, [pc, #60]	; (800eb84 <prvProcessTimerOrBlockTask+0x94>)
 800eb46:	6818      	ldr	r0, [r3, #0]
 800eb48:	687a      	ldr	r2, [r7, #4]
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	1ad3      	subs	r3, r2, r3
 800eb4e:	683a      	ldr	r2, [r7, #0]
 800eb50:	4619      	mov	r1, r3
 800eb52:	f7fe fe6d 	bl	800d830 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800eb56:	f7ff f909 	bl	800dd6c <xTaskResumeAll>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d10a      	bne.n	800eb76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eb60:	4b09      	ldr	r3, [pc, #36]	; (800eb88 <prvProcessTimerOrBlockTask+0x98>)
 800eb62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb66:	601a      	str	r2, [r3, #0]
 800eb68:	f3bf 8f4f 	dsb	sy
 800eb6c:	f3bf 8f6f 	isb	sy
}
 800eb70:	e001      	b.n	800eb76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eb72:	f7ff f8fb 	bl	800dd6c <xTaskResumeAll>
}
 800eb76:	bf00      	nop
 800eb78:	3710      	adds	r7, #16
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	20000ae0 	.word	0x20000ae0
 800eb84:	20000ae4 	.word	0x20000ae4
 800eb88:	e000ed04 	.word	0xe000ed04

0800eb8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b085      	sub	sp, #20
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800eb94:	4b0e      	ldr	r3, [pc, #56]	; (800ebd0 <prvGetNextExpireTime+0x44>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d101      	bne.n	800eba2 <prvGetNextExpireTime+0x16>
 800eb9e:	2201      	movs	r2, #1
 800eba0:	e000      	b.n	800eba4 <prvGetNextExpireTime+0x18>
 800eba2:	2200      	movs	r2, #0
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d105      	bne.n	800ebbc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ebb0:	4b07      	ldr	r3, [pc, #28]	; (800ebd0 <prvGetNextExpireTime+0x44>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	68db      	ldr	r3, [r3, #12]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	60fb      	str	r3, [r7, #12]
 800ebba:	e001      	b.n	800ebc0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3714      	adds	r7, #20
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebcc:	4770      	bx	lr
 800ebce:	bf00      	nop
 800ebd0:	20000adc 	.word	0x20000adc

0800ebd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b084      	sub	sp, #16
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ebdc:	f7ff f964 	bl	800dea8 <xTaskGetTickCount>
 800ebe0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ebe2:	4b0b      	ldr	r3, [pc, #44]	; (800ec10 <prvSampleTimeNow+0x3c>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	68fa      	ldr	r2, [r7, #12]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d205      	bcs.n	800ebf8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ebec:	f000 f936 	bl	800ee5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	601a      	str	r2, [r3, #0]
 800ebf6:	e002      	b.n	800ebfe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ebfe:	4a04      	ldr	r2, [pc, #16]	; (800ec10 <prvSampleTimeNow+0x3c>)
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ec04:	68fb      	ldr	r3, [r7, #12]
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3710      	adds	r7, #16
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	20000aec 	.word	0x20000aec

0800ec14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b086      	sub	sp, #24
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	60f8      	str	r0, [r7, #12]
 800ec1c:	60b9      	str	r1, [r7, #8]
 800ec1e:	607a      	str	r2, [r7, #4]
 800ec20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ec22:	2300      	movs	r3, #0
 800ec24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	68ba      	ldr	r2, [r7, #8]
 800ec2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	68fa      	ldr	r2, [r7, #12]
 800ec30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ec32:	68ba      	ldr	r2, [r7, #8]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d812      	bhi.n	800ec60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec3a:	687a      	ldr	r2, [r7, #4]
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	1ad2      	subs	r2, r2, r3
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	699b      	ldr	r3, [r3, #24]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d302      	bcc.n	800ec4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ec48:	2301      	movs	r3, #1
 800ec4a:	617b      	str	r3, [r7, #20]
 800ec4c:	e01b      	b.n	800ec86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ec4e:	4b10      	ldr	r3, [pc, #64]	; (800ec90 <prvInsertTimerInActiveList+0x7c>)
 800ec50:	681a      	ldr	r2, [r3, #0]
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	3304      	adds	r3, #4
 800ec56:	4619      	mov	r1, r3
 800ec58:	4610      	mov	r0, r2
 800ec5a:	f7fd fdac 	bl	800c7b6 <vListInsert>
 800ec5e:	e012      	b.n	800ec86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d206      	bcs.n	800ec76 <prvInsertTimerInActiveList+0x62>
 800ec68:	68ba      	ldr	r2, [r7, #8]
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d302      	bcc.n	800ec76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ec70:	2301      	movs	r3, #1
 800ec72:	617b      	str	r3, [r7, #20]
 800ec74:	e007      	b.n	800ec86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ec76:	4b07      	ldr	r3, [pc, #28]	; (800ec94 <prvInsertTimerInActiveList+0x80>)
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	3304      	adds	r3, #4
 800ec7e:	4619      	mov	r1, r3
 800ec80:	4610      	mov	r0, r2
 800ec82:	f7fd fd98 	bl	800c7b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ec86:	697b      	ldr	r3, [r7, #20]
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3718      	adds	r7, #24
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}
 800ec90:	20000ae0 	.word	0x20000ae0
 800ec94:	20000adc 	.word	0x20000adc

0800ec98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b08e      	sub	sp, #56	; 0x38
 800ec9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ec9e:	e0ca      	b.n	800ee36 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	da18      	bge.n	800ecd8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800eca6:	1d3b      	adds	r3, r7, #4
 800eca8:	3304      	adds	r3, #4
 800ecaa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ecac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d10a      	bne.n	800ecc8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ecb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb6:	f383 8811 	msr	BASEPRI, r3
 800ecba:	f3bf 8f6f 	isb	sy
 800ecbe:	f3bf 8f4f 	dsb	sy
 800ecc2:	61fb      	str	r3, [r7, #28]
}
 800ecc4:	bf00      	nop
 800ecc6:	e7fe      	b.n	800ecc6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ecc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecce:	6850      	ldr	r0, [r2, #4]
 800ecd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ecd2:	6892      	ldr	r2, [r2, #8]
 800ecd4:	4611      	mov	r1, r2
 800ecd6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	f2c0 80aa 	blt.w	800ee34 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ece4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece6:	695b      	ldr	r3, [r3, #20]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d004      	beq.n	800ecf6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ecec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecee:	3304      	adds	r3, #4
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f7fd fd99 	bl	800c828 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ecf6:	463b      	mov	r3, r7
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7ff ff6b 	bl	800ebd4 <prvSampleTimeNow>
 800ecfe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2b09      	cmp	r3, #9
 800ed04:	f200 8097 	bhi.w	800ee36 <prvProcessReceivedCommands+0x19e>
 800ed08:	a201      	add	r2, pc, #4	; (adr r2, 800ed10 <prvProcessReceivedCommands+0x78>)
 800ed0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed0e:	bf00      	nop
 800ed10:	0800ed39 	.word	0x0800ed39
 800ed14:	0800ed39 	.word	0x0800ed39
 800ed18:	0800ed39 	.word	0x0800ed39
 800ed1c:	0800edad 	.word	0x0800edad
 800ed20:	0800edc1 	.word	0x0800edc1
 800ed24:	0800ee0b 	.word	0x0800ee0b
 800ed28:	0800ed39 	.word	0x0800ed39
 800ed2c:	0800ed39 	.word	0x0800ed39
 800ed30:	0800edad 	.word	0x0800edad
 800ed34:	0800edc1 	.word	0x0800edc1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed3e:	f043 0301 	orr.w	r3, r3, #1
 800ed42:	b2da      	uxtb	r2, r3
 800ed44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ed4a:	68ba      	ldr	r2, [r7, #8]
 800ed4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4e:	699b      	ldr	r3, [r3, #24]
 800ed50:	18d1      	adds	r1, r2, r3
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed58:	f7ff ff5c 	bl	800ec14 <prvInsertTimerInActiveList>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d069      	beq.n	800ee36 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ed62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed64:	6a1b      	ldr	r3, [r3, #32]
 800ed66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ed6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed70:	f003 0304 	and.w	r3, r3, #4
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d05e      	beq.n	800ee36 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ed78:	68ba      	ldr	r2, [r7, #8]
 800ed7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed7c:	699b      	ldr	r3, [r3, #24]
 800ed7e:	441a      	add	r2, r3
 800ed80:	2300      	movs	r3, #0
 800ed82:	9300      	str	r3, [sp, #0]
 800ed84:	2300      	movs	r3, #0
 800ed86:	2100      	movs	r1, #0
 800ed88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed8a:	f7ff fe05 	bl	800e998 <xTimerGenericCommand>
 800ed8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ed90:	6a3b      	ldr	r3, [r7, #32]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d14f      	bne.n	800ee36 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ed96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed9a:	f383 8811 	msr	BASEPRI, r3
 800ed9e:	f3bf 8f6f 	isb	sy
 800eda2:	f3bf 8f4f 	dsb	sy
 800eda6:	61bb      	str	r3, [r7, #24]
}
 800eda8:	bf00      	nop
 800edaa:	e7fe      	b.n	800edaa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800edac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edb2:	f023 0301 	bic.w	r3, r3, #1
 800edb6:	b2da      	uxtb	r2, r3
 800edb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800edbe:	e03a      	b.n	800ee36 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800edc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edc6:	f043 0301 	orr.w	r3, r3, #1
 800edca:	b2da      	uxtb	r2, r3
 800edcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800edd2:	68ba      	ldr	r2, [r7, #8]
 800edd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800edd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edda:	699b      	ldr	r3, [r3, #24]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d10a      	bne.n	800edf6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ede0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ede4:	f383 8811 	msr	BASEPRI, r3
 800ede8:	f3bf 8f6f 	isb	sy
 800edec:	f3bf 8f4f 	dsb	sy
 800edf0:	617b      	str	r3, [r7, #20]
}
 800edf2:	bf00      	nop
 800edf4:	e7fe      	b.n	800edf4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800edf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf8:	699a      	ldr	r2, [r3, #24]
 800edfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfc:	18d1      	adds	r1, r2, r3
 800edfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee04:	f7ff ff06 	bl	800ec14 <prvInsertTimerInActiveList>
					break;
 800ee08:	e015      	b.n	800ee36 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ee0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee10:	f003 0302 	and.w	r3, r3, #2
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d103      	bne.n	800ee20 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ee18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee1a:	f000 fbe1 	bl	800f5e0 <vPortFree>
 800ee1e:	e00a      	b.n	800ee36 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee26:	f023 0301 	bic.w	r3, r3, #1
 800ee2a:	b2da      	uxtb	r2, r3
 800ee2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ee32:	e000      	b.n	800ee36 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ee34:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ee36:	4b08      	ldr	r3, [pc, #32]	; (800ee58 <prvProcessReceivedCommands+0x1c0>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	1d39      	adds	r1, r7, #4
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7fe f8ea 	bl	800d018 <xQueueReceive>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	f47f af2a 	bne.w	800eca0 <prvProcessReceivedCommands+0x8>
	}
}
 800ee4c:	bf00      	nop
 800ee4e:	bf00      	nop
 800ee50:	3730      	adds	r7, #48	; 0x30
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
 800ee56:	bf00      	nop
 800ee58:	20000ae4 	.word	0x20000ae4

0800ee5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b088      	sub	sp, #32
 800ee60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ee62:	e048      	b.n	800eef6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ee64:	4b2d      	ldr	r3, [pc, #180]	; (800ef1c <prvSwitchTimerLists+0xc0>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	68db      	ldr	r3, [r3, #12]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee6e:	4b2b      	ldr	r3, [pc, #172]	; (800ef1c <prvSwitchTimerLists+0xc0>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	3304      	adds	r3, #4
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7fd fcd3 	bl	800c828 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	6a1b      	ldr	r3, [r3, #32]
 800ee86:	68f8      	ldr	r0, [r7, #12]
 800ee88:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee90:	f003 0304 	and.w	r3, r3, #4
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d02e      	beq.n	800eef6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	699b      	ldr	r3, [r3, #24]
 800ee9c:	693a      	ldr	r2, [r7, #16]
 800ee9e:	4413      	add	r3, r2
 800eea0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800eea2:	68ba      	ldr	r2, [r7, #8]
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d90e      	bls.n	800eec8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	68ba      	ldr	r2, [r7, #8]
 800eeae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	68fa      	ldr	r2, [r7, #12]
 800eeb4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800eeb6:	4b19      	ldr	r3, [pc, #100]	; (800ef1c <prvSwitchTimerLists+0xc0>)
 800eeb8:	681a      	ldr	r2, [r3, #0]
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	3304      	adds	r3, #4
 800eebe:	4619      	mov	r1, r3
 800eec0:	4610      	mov	r0, r2
 800eec2:	f7fd fc78 	bl	800c7b6 <vListInsert>
 800eec6:	e016      	b.n	800eef6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eec8:	2300      	movs	r3, #0
 800eeca:	9300      	str	r3, [sp, #0]
 800eecc:	2300      	movs	r3, #0
 800eece:	693a      	ldr	r2, [r7, #16]
 800eed0:	2100      	movs	r1, #0
 800eed2:	68f8      	ldr	r0, [r7, #12]
 800eed4:	f7ff fd60 	bl	800e998 <xTimerGenericCommand>
 800eed8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d10a      	bne.n	800eef6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800eee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee4:	f383 8811 	msr	BASEPRI, r3
 800eee8:	f3bf 8f6f 	isb	sy
 800eeec:	f3bf 8f4f 	dsb	sy
 800eef0:	603b      	str	r3, [r7, #0]
}
 800eef2:	bf00      	nop
 800eef4:	e7fe      	b.n	800eef4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eef6:	4b09      	ldr	r3, [pc, #36]	; (800ef1c <prvSwitchTimerLists+0xc0>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d1b1      	bne.n	800ee64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ef00:	4b06      	ldr	r3, [pc, #24]	; (800ef1c <prvSwitchTimerLists+0xc0>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ef06:	4b06      	ldr	r3, [pc, #24]	; (800ef20 <prvSwitchTimerLists+0xc4>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4a04      	ldr	r2, [pc, #16]	; (800ef1c <prvSwitchTimerLists+0xc0>)
 800ef0c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ef0e:	4a04      	ldr	r2, [pc, #16]	; (800ef20 <prvSwitchTimerLists+0xc4>)
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	6013      	str	r3, [r2, #0]
}
 800ef14:	bf00      	nop
 800ef16:	3718      	adds	r7, #24
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	20000adc 	.word	0x20000adc
 800ef20:	20000ae0 	.word	0x20000ae0

0800ef24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ef2a:	f000 f96b 	bl	800f204 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ef2e:	4b15      	ldr	r3, [pc, #84]	; (800ef84 <prvCheckForValidListAndQueue+0x60>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d120      	bne.n	800ef78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ef36:	4814      	ldr	r0, [pc, #80]	; (800ef88 <prvCheckForValidListAndQueue+0x64>)
 800ef38:	f7fd fbec 	bl	800c714 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ef3c:	4813      	ldr	r0, [pc, #76]	; (800ef8c <prvCheckForValidListAndQueue+0x68>)
 800ef3e:	f7fd fbe9 	bl	800c714 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ef42:	4b13      	ldr	r3, [pc, #76]	; (800ef90 <prvCheckForValidListAndQueue+0x6c>)
 800ef44:	4a10      	ldr	r2, [pc, #64]	; (800ef88 <prvCheckForValidListAndQueue+0x64>)
 800ef46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ef48:	4b12      	ldr	r3, [pc, #72]	; (800ef94 <prvCheckForValidListAndQueue+0x70>)
 800ef4a:	4a10      	ldr	r2, [pc, #64]	; (800ef8c <prvCheckForValidListAndQueue+0x68>)
 800ef4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ef4e:	2300      	movs	r3, #0
 800ef50:	9300      	str	r3, [sp, #0]
 800ef52:	4b11      	ldr	r3, [pc, #68]	; (800ef98 <prvCheckForValidListAndQueue+0x74>)
 800ef54:	4a11      	ldr	r2, [pc, #68]	; (800ef9c <prvCheckForValidListAndQueue+0x78>)
 800ef56:	2110      	movs	r1, #16
 800ef58:	200a      	movs	r0, #10
 800ef5a:	f7fd fcf7 	bl	800c94c <xQueueGenericCreateStatic>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	4a08      	ldr	r2, [pc, #32]	; (800ef84 <prvCheckForValidListAndQueue+0x60>)
 800ef62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ef64:	4b07      	ldr	r3, [pc, #28]	; (800ef84 <prvCheckForValidListAndQueue+0x60>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d005      	beq.n	800ef78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ef6c:	4b05      	ldr	r3, [pc, #20]	; (800ef84 <prvCheckForValidListAndQueue+0x60>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	490b      	ldr	r1, [pc, #44]	; (800efa0 <prvCheckForValidListAndQueue+0x7c>)
 800ef72:	4618      	mov	r0, r3
 800ef74:	f7fe fc08 	bl	800d788 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ef78:	f000 f974 	bl	800f264 <vPortExitCritical>
}
 800ef7c:	bf00      	nop
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop
 800ef84:	20000ae4 	.word	0x20000ae4
 800ef88:	20000ab4 	.word	0x20000ab4
 800ef8c:	20000ac8 	.word	0x20000ac8
 800ef90:	20000adc 	.word	0x20000adc
 800ef94:	20000ae0 	.word	0x20000ae0
 800ef98:	20000b90 	.word	0x20000b90
 800ef9c:	20000af0 	.word	0x20000af0
 800efa0:	0802eb84 	.word	0x0802eb84

0800efa4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800efa4:	b480      	push	{r7}
 800efa6:	b085      	sub	sp, #20
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	60f8      	str	r0, [r7, #12]
 800efac:	60b9      	str	r1, [r7, #8]
 800efae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	3b04      	subs	r3, #4
 800efb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800efbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	3b04      	subs	r3, #4
 800efc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	f023 0201 	bic.w	r2, r3, #1
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	3b04      	subs	r3, #4
 800efd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800efd4:	4a0c      	ldr	r2, [pc, #48]	; (800f008 <pxPortInitialiseStack+0x64>)
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	3b14      	subs	r3, #20
 800efde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800efe0:	687a      	ldr	r2, [r7, #4]
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	3b04      	subs	r3, #4
 800efea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	f06f 0202 	mvn.w	r2, #2
 800eff2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	3b20      	subs	r3, #32
 800eff8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800effa:	68fb      	ldr	r3, [r7, #12]
}
 800effc:	4618      	mov	r0, r3
 800effe:	3714      	adds	r7, #20
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr
 800f008:	0800f00d 	.word	0x0800f00d

0800f00c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f00c:	b480      	push	{r7}
 800f00e:	b085      	sub	sp, #20
 800f010:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f012:	2300      	movs	r3, #0
 800f014:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f016:	4b12      	ldr	r3, [pc, #72]	; (800f060 <prvTaskExitError+0x54>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f01e:	d00a      	beq.n	800f036 <prvTaskExitError+0x2a>
	__asm volatile
 800f020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f024:	f383 8811 	msr	BASEPRI, r3
 800f028:	f3bf 8f6f 	isb	sy
 800f02c:	f3bf 8f4f 	dsb	sy
 800f030:	60fb      	str	r3, [r7, #12]
}
 800f032:	bf00      	nop
 800f034:	e7fe      	b.n	800f034 <prvTaskExitError+0x28>
	__asm volatile
 800f036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f03a:	f383 8811 	msr	BASEPRI, r3
 800f03e:	f3bf 8f6f 	isb	sy
 800f042:	f3bf 8f4f 	dsb	sy
 800f046:	60bb      	str	r3, [r7, #8]
}
 800f048:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f04a:	bf00      	nop
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d0fc      	beq.n	800f04c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f052:	bf00      	nop
 800f054:	bf00      	nop
 800f056:	3714      	adds	r7, #20
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr
 800f060:	20000014 	.word	0x20000014
	...

0800f070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f070:	4b07      	ldr	r3, [pc, #28]	; (800f090 <pxCurrentTCBConst2>)
 800f072:	6819      	ldr	r1, [r3, #0]
 800f074:	6808      	ldr	r0, [r1, #0]
 800f076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f07a:	f380 8809 	msr	PSP, r0
 800f07e:	f3bf 8f6f 	isb	sy
 800f082:	f04f 0000 	mov.w	r0, #0
 800f086:	f380 8811 	msr	BASEPRI, r0
 800f08a:	4770      	bx	lr
 800f08c:	f3af 8000 	nop.w

0800f090 <pxCurrentTCBConst2>:
 800f090:	200005b4 	.word	0x200005b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f094:	bf00      	nop
 800f096:	bf00      	nop

0800f098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f098:	4808      	ldr	r0, [pc, #32]	; (800f0bc <prvPortStartFirstTask+0x24>)
 800f09a:	6800      	ldr	r0, [r0, #0]
 800f09c:	6800      	ldr	r0, [r0, #0]
 800f09e:	f380 8808 	msr	MSP, r0
 800f0a2:	f04f 0000 	mov.w	r0, #0
 800f0a6:	f380 8814 	msr	CONTROL, r0
 800f0aa:	b662      	cpsie	i
 800f0ac:	b661      	cpsie	f
 800f0ae:	f3bf 8f4f 	dsb	sy
 800f0b2:	f3bf 8f6f 	isb	sy
 800f0b6:	df00      	svc	0
 800f0b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f0ba:	bf00      	nop
 800f0bc:	e000ed08 	.word	0xe000ed08

0800f0c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b086      	sub	sp, #24
 800f0c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f0c6:	4b46      	ldr	r3, [pc, #280]	; (800f1e0 <xPortStartScheduler+0x120>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	4a46      	ldr	r2, [pc, #280]	; (800f1e4 <xPortStartScheduler+0x124>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d10a      	bne.n	800f0e6 <xPortStartScheduler+0x26>
	__asm volatile
 800f0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d4:	f383 8811 	msr	BASEPRI, r3
 800f0d8:	f3bf 8f6f 	isb	sy
 800f0dc:	f3bf 8f4f 	dsb	sy
 800f0e0:	613b      	str	r3, [r7, #16]
}
 800f0e2:	bf00      	nop
 800f0e4:	e7fe      	b.n	800f0e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f0e6:	4b3e      	ldr	r3, [pc, #248]	; (800f1e0 <xPortStartScheduler+0x120>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	4a3f      	ldr	r2, [pc, #252]	; (800f1e8 <xPortStartScheduler+0x128>)
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d10a      	bne.n	800f106 <xPortStartScheduler+0x46>
	__asm volatile
 800f0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f4:	f383 8811 	msr	BASEPRI, r3
 800f0f8:	f3bf 8f6f 	isb	sy
 800f0fc:	f3bf 8f4f 	dsb	sy
 800f100:	60fb      	str	r3, [r7, #12]
}
 800f102:	bf00      	nop
 800f104:	e7fe      	b.n	800f104 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f106:	4b39      	ldr	r3, [pc, #228]	; (800f1ec <xPortStartScheduler+0x12c>)
 800f108:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	781b      	ldrb	r3, [r3, #0]
 800f10e:	b2db      	uxtb	r3, r3
 800f110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	22ff      	movs	r2, #255	; 0xff
 800f116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	b2db      	uxtb	r3, r3
 800f11e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f120:	78fb      	ldrb	r3, [r7, #3]
 800f122:	b2db      	uxtb	r3, r3
 800f124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f128:	b2da      	uxtb	r2, r3
 800f12a:	4b31      	ldr	r3, [pc, #196]	; (800f1f0 <xPortStartScheduler+0x130>)
 800f12c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f12e:	4b31      	ldr	r3, [pc, #196]	; (800f1f4 <xPortStartScheduler+0x134>)
 800f130:	2207      	movs	r2, #7
 800f132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f134:	e009      	b.n	800f14a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f136:	4b2f      	ldr	r3, [pc, #188]	; (800f1f4 <xPortStartScheduler+0x134>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	3b01      	subs	r3, #1
 800f13c:	4a2d      	ldr	r2, [pc, #180]	; (800f1f4 <xPortStartScheduler+0x134>)
 800f13e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f140:	78fb      	ldrb	r3, [r7, #3]
 800f142:	b2db      	uxtb	r3, r3
 800f144:	005b      	lsls	r3, r3, #1
 800f146:	b2db      	uxtb	r3, r3
 800f148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f14a:	78fb      	ldrb	r3, [r7, #3]
 800f14c:	b2db      	uxtb	r3, r3
 800f14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f152:	2b80      	cmp	r3, #128	; 0x80
 800f154:	d0ef      	beq.n	800f136 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f156:	4b27      	ldr	r3, [pc, #156]	; (800f1f4 <xPortStartScheduler+0x134>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f1c3 0307 	rsb	r3, r3, #7
 800f15e:	2b04      	cmp	r3, #4
 800f160:	d00a      	beq.n	800f178 <xPortStartScheduler+0xb8>
	__asm volatile
 800f162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f166:	f383 8811 	msr	BASEPRI, r3
 800f16a:	f3bf 8f6f 	isb	sy
 800f16e:	f3bf 8f4f 	dsb	sy
 800f172:	60bb      	str	r3, [r7, #8]
}
 800f174:	bf00      	nop
 800f176:	e7fe      	b.n	800f176 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f178:	4b1e      	ldr	r3, [pc, #120]	; (800f1f4 <xPortStartScheduler+0x134>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	021b      	lsls	r3, r3, #8
 800f17e:	4a1d      	ldr	r2, [pc, #116]	; (800f1f4 <xPortStartScheduler+0x134>)
 800f180:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f182:	4b1c      	ldr	r3, [pc, #112]	; (800f1f4 <xPortStartScheduler+0x134>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f18a:	4a1a      	ldr	r2, [pc, #104]	; (800f1f4 <xPortStartScheduler+0x134>)
 800f18c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	b2da      	uxtb	r2, r3
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f196:	4b18      	ldr	r3, [pc, #96]	; (800f1f8 <xPortStartScheduler+0x138>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	4a17      	ldr	r2, [pc, #92]	; (800f1f8 <xPortStartScheduler+0x138>)
 800f19c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f1a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f1a2:	4b15      	ldr	r3, [pc, #84]	; (800f1f8 <xPortStartScheduler+0x138>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	4a14      	ldr	r2, [pc, #80]	; (800f1f8 <xPortStartScheduler+0x138>)
 800f1a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f1ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f1ae:	f000 f8dd 	bl	800f36c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f1b2:	4b12      	ldr	r3, [pc, #72]	; (800f1fc <xPortStartScheduler+0x13c>)
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f1b8:	f000 f8fc 	bl	800f3b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f1bc:	4b10      	ldr	r3, [pc, #64]	; (800f200 <xPortStartScheduler+0x140>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	4a0f      	ldr	r2, [pc, #60]	; (800f200 <xPortStartScheduler+0x140>)
 800f1c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f1c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f1c8:	f7ff ff66 	bl	800f098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f1cc:	f7fe ff48 	bl	800e060 <vTaskSwitchContext>
	prvTaskExitError();
 800f1d0:	f7ff ff1c 	bl	800f00c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f1d4:	2300      	movs	r3, #0
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3718      	adds	r7, #24
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
 800f1de:	bf00      	nop
 800f1e0:	e000ed00 	.word	0xe000ed00
 800f1e4:	410fc271 	.word	0x410fc271
 800f1e8:	410fc270 	.word	0x410fc270
 800f1ec:	e000e400 	.word	0xe000e400
 800f1f0:	20000be0 	.word	0x20000be0
 800f1f4:	20000be4 	.word	0x20000be4
 800f1f8:	e000ed20 	.word	0xe000ed20
 800f1fc:	20000014 	.word	0x20000014
 800f200:	e000ef34 	.word	0xe000ef34

0800f204 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f204:	b480      	push	{r7}
 800f206:	b083      	sub	sp, #12
 800f208:	af00      	add	r7, sp, #0
	__asm volatile
 800f20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f20e:	f383 8811 	msr	BASEPRI, r3
 800f212:	f3bf 8f6f 	isb	sy
 800f216:	f3bf 8f4f 	dsb	sy
 800f21a:	607b      	str	r3, [r7, #4]
}
 800f21c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f21e:	4b0f      	ldr	r3, [pc, #60]	; (800f25c <vPortEnterCritical+0x58>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	3301      	adds	r3, #1
 800f224:	4a0d      	ldr	r2, [pc, #52]	; (800f25c <vPortEnterCritical+0x58>)
 800f226:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f228:	4b0c      	ldr	r3, [pc, #48]	; (800f25c <vPortEnterCritical+0x58>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	2b01      	cmp	r3, #1
 800f22e:	d10f      	bne.n	800f250 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f230:	4b0b      	ldr	r3, [pc, #44]	; (800f260 <vPortEnterCritical+0x5c>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	b2db      	uxtb	r3, r3
 800f236:	2b00      	cmp	r3, #0
 800f238:	d00a      	beq.n	800f250 <vPortEnterCritical+0x4c>
	__asm volatile
 800f23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f23e:	f383 8811 	msr	BASEPRI, r3
 800f242:	f3bf 8f6f 	isb	sy
 800f246:	f3bf 8f4f 	dsb	sy
 800f24a:	603b      	str	r3, [r7, #0]
}
 800f24c:	bf00      	nop
 800f24e:	e7fe      	b.n	800f24e <vPortEnterCritical+0x4a>
	}
}
 800f250:	bf00      	nop
 800f252:	370c      	adds	r7, #12
 800f254:	46bd      	mov	sp, r7
 800f256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25a:	4770      	bx	lr
 800f25c:	20000014 	.word	0x20000014
 800f260:	e000ed04 	.word	0xe000ed04

0800f264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f264:	b480      	push	{r7}
 800f266:	b083      	sub	sp, #12
 800f268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f26a:	4b12      	ldr	r3, [pc, #72]	; (800f2b4 <vPortExitCritical+0x50>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d10a      	bne.n	800f288 <vPortExitCritical+0x24>
	__asm volatile
 800f272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f276:	f383 8811 	msr	BASEPRI, r3
 800f27a:	f3bf 8f6f 	isb	sy
 800f27e:	f3bf 8f4f 	dsb	sy
 800f282:	607b      	str	r3, [r7, #4]
}
 800f284:	bf00      	nop
 800f286:	e7fe      	b.n	800f286 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f288:	4b0a      	ldr	r3, [pc, #40]	; (800f2b4 <vPortExitCritical+0x50>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	3b01      	subs	r3, #1
 800f28e:	4a09      	ldr	r2, [pc, #36]	; (800f2b4 <vPortExitCritical+0x50>)
 800f290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f292:	4b08      	ldr	r3, [pc, #32]	; (800f2b4 <vPortExitCritical+0x50>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d105      	bne.n	800f2a6 <vPortExitCritical+0x42>
 800f29a:	2300      	movs	r3, #0
 800f29c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	f383 8811 	msr	BASEPRI, r3
}
 800f2a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f2a6:	bf00      	nop
 800f2a8:	370c      	adds	r7, #12
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b0:	4770      	bx	lr
 800f2b2:	bf00      	nop
 800f2b4:	20000014 	.word	0x20000014
	...

0800f2c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f2c0:	f3ef 8009 	mrs	r0, PSP
 800f2c4:	f3bf 8f6f 	isb	sy
 800f2c8:	4b15      	ldr	r3, [pc, #84]	; (800f320 <pxCurrentTCBConst>)
 800f2ca:	681a      	ldr	r2, [r3, #0]
 800f2cc:	f01e 0f10 	tst.w	lr, #16
 800f2d0:	bf08      	it	eq
 800f2d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f2d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2da:	6010      	str	r0, [r2, #0]
 800f2dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f2e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f2e4:	f380 8811 	msr	BASEPRI, r0
 800f2e8:	f3bf 8f4f 	dsb	sy
 800f2ec:	f3bf 8f6f 	isb	sy
 800f2f0:	f7fe feb6 	bl	800e060 <vTaskSwitchContext>
 800f2f4:	f04f 0000 	mov.w	r0, #0
 800f2f8:	f380 8811 	msr	BASEPRI, r0
 800f2fc:	bc09      	pop	{r0, r3}
 800f2fe:	6819      	ldr	r1, [r3, #0]
 800f300:	6808      	ldr	r0, [r1, #0]
 800f302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f306:	f01e 0f10 	tst.w	lr, #16
 800f30a:	bf08      	it	eq
 800f30c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f310:	f380 8809 	msr	PSP, r0
 800f314:	f3bf 8f6f 	isb	sy
 800f318:	4770      	bx	lr
 800f31a:	bf00      	nop
 800f31c:	f3af 8000 	nop.w

0800f320 <pxCurrentTCBConst>:
 800f320:	200005b4 	.word	0x200005b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f324:	bf00      	nop
 800f326:	bf00      	nop

0800f328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
	__asm volatile
 800f32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f332:	f383 8811 	msr	BASEPRI, r3
 800f336:	f3bf 8f6f 	isb	sy
 800f33a:	f3bf 8f4f 	dsb	sy
 800f33e:	607b      	str	r3, [r7, #4]
}
 800f340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f342:	f7fe fdd3 	bl	800deec <xTaskIncrementTick>
 800f346:	4603      	mov	r3, r0
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d003      	beq.n	800f354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f34c:	4b06      	ldr	r3, [pc, #24]	; (800f368 <xPortSysTickHandler+0x40>)
 800f34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f352:	601a      	str	r2, [r3, #0]
 800f354:	2300      	movs	r3, #0
 800f356:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	f383 8811 	msr	BASEPRI, r3
}
 800f35e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f360:	bf00      	nop
 800f362:	3708      	adds	r7, #8
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	e000ed04 	.word	0xe000ed04

0800f36c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f36c:	b480      	push	{r7}
 800f36e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f370:	4b0b      	ldr	r3, [pc, #44]	; (800f3a0 <vPortSetupTimerInterrupt+0x34>)
 800f372:	2200      	movs	r2, #0
 800f374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f376:	4b0b      	ldr	r3, [pc, #44]	; (800f3a4 <vPortSetupTimerInterrupt+0x38>)
 800f378:	2200      	movs	r2, #0
 800f37a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f37c:	4b0a      	ldr	r3, [pc, #40]	; (800f3a8 <vPortSetupTimerInterrupt+0x3c>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	4a0a      	ldr	r2, [pc, #40]	; (800f3ac <vPortSetupTimerInterrupt+0x40>)
 800f382:	fba2 2303 	umull	r2, r3, r2, r3
 800f386:	099b      	lsrs	r3, r3, #6
 800f388:	4a09      	ldr	r2, [pc, #36]	; (800f3b0 <vPortSetupTimerInterrupt+0x44>)
 800f38a:	3b01      	subs	r3, #1
 800f38c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f38e:	4b04      	ldr	r3, [pc, #16]	; (800f3a0 <vPortSetupTimerInterrupt+0x34>)
 800f390:	2207      	movs	r2, #7
 800f392:	601a      	str	r2, [r3, #0]
}
 800f394:	bf00      	nop
 800f396:	46bd      	mov	sp, r7
 800f398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39c:	4770      	bx	lr
 800f39e:	bf00      	nop
 800f3a0:	e000e010 	.word	0xe000e010
 800f3a4:	e000e018 	.word	0xe000e018
 800f3a8:	20000008 	.word	0x20000008
 800f3ac:	10624dd3 	.word	0x10624dd3
 800f3b0:	e000e014 	.word	0xe000e014

0800f3b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f3b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f3c4 <vPortEnableVFP+0x10>
 800f3b8:	6801      	ldr	r1, [r0, #0]
 800f3ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f3be:	6001      	str	r1, [r0, #0]
 800f3c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f3c2:	bf00      	nop
 800f3c4:	e000ed88 	.word	0xe000ed88

0800f3c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b085      	sub	sp, #20
 800f3cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f3ce:	f3ef 8305 	mrs	r3, IPSR
 800f3d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2b0f      	cmp	r3, #15
 800f3d8:	d914      	bls.n	800f404 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f3da:	4a17      	ldr	r2, [pc, #92]	; (800f438 <vPortValidateInterruptPriority+0x70>)
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	4413      	add	r3, r2
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f3e4:	4b15      	ldr	r3, [pc, #84]	; (800f43c <vPortValidateInterruptPriority+0x74>)
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	7afa      	ldrb	r2, [r7, #11]
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d20a      	bcs.n	800f404 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f2:	f383 8811 	msr	BASEPRI, r3
 800f3f6:	f3bf 8f6f 	isb	sy
 800f3fa:	f3bf 8f4f 	dsb	sy
 800f3fe:	607b      	str	r3, [r7, #4]
}
 800f400:	bf00      	nop
 800f402:	e7fe      	b.n	800f402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f404:	4b0e      	ldr	r3, [pc, #56]	; (800f440 <vPortValidateInterruptPriority+0x78>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f40c:	4b0d      	ldr	r3, [pc, #52]	; (800f444 <vPortValidateInterruptPriority+0x7c>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	429a      	cmp	r2, r3
 800f412:	d90a      	bls.n	800f42a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f418:	f383 8811 	msr	BASEPRI, r3
 800f41c:	f3bf 8f6f 	isb	sy
 800f420:	f3bf 8f4f 	dsb	sy
 800f424:	603b      	str	r3, [r7, #0]
}
 800f426:	bf00      	nop
 800f428:	e7fe      	b.n	800f428 <vPortValidateInterruptPriority+0x60>
	}
 800f42a:	bf00      	nop
 800f42c:	3714      	adds	r7, #20
 800f42e:	46bd      	mov	sp, r7
 800f430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f434:	4770      	bx	lr
 800f436:	bf00      	nop
 800f438:	e000e3f0 	.word	0xe000e3f0
 800f43c:	20000be0 	.word	0x20000be0
 800f440:	e000ed0c 	.word	0xe000ed0c
 800f444:	20000be4 	.word	0x20000be4

0800f448 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b08a      	sub	sp, #40	; 0x28
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f450:	2300      	movs	r3, #0
 800f452:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f454:	f7fe fc7c 	bl	800dd50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f458:	4b5b      	ldr	r3, [pc, #364]	; (800f5c8 <pvPortMalloc+0x180>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d101      	bne.n	800f464 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f460:	f000 f920 	bl	800f6a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f464:	4b59      	ldr	r3, [pc, #356]	; (800f5cc <pvPortMalloc+0x184>)
 800f466:	681a      	ldr	r2, [r3, #0]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	4013      	ands	r3, r2
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	f040 8093 	bne.w	800f598 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d01d      	beq.n	800f4b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f478:	2208      	movs	r2, #8
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	4413      	add	r3, r2
 800f47e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f003 0307 	and.w	r3, r3, #7
 800f486:	2b00      	cmp	r3, #0
 800f488:	d014      	beq.n	800f4b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f023 0307 	bic.w	r3, r3, #7
 800f490:	3308      	adds	r3, #8
 800f492:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f003 0307 	and.w	r3, r3, #7
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d00a      	beq.n	800f4b4 <pvPortMalloc+0x6c>
	__asm volatile
 800f49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a2:	f383 8811 	msr	BASEPRI, r3
 800f4a6:	f3bf 8f6f 	isb	sy
 800f4aa:	f3bf 8f4f 	dsb	sy
 800f4ae:	617b      	str	r3, [r7, #20]
}
 800f4b0:	bf00      	nop
 800f4b2:	e7fe      	b.n	800f4b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d06e      	beq.n	800f598 <pvPortMalloc+0x150>
 800f4ba:	4b45      	ldr	r3, [pc, #276]	; (800f5d0 <pvPortMalloc+0x188>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	429a      	cmp	r2, r3
 800f4c2:	d869      	bhi.n	800f598 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f4c4:	4b43      	ldr	r3, [pc, #268]	; (800f5d4 <pvPortMalloc+0x18c>)
 800f4c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f4c8:	4b42      	ldr	r3, [pc, #264]	; (800f5d4 <pvPortMalloc+0x18c>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f4ce:	e004      	b.n	800f4da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	687a      	ldr	r2, [r7, #4]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d903      	bls.n	800f4ec <pvPortMalloc+0xa4>
 800f4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d1f1      	bne.n	800f4d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f4ec:	4b36      	ldr	r3, [pc, #216]	; (800f5c8 <pvPortMalloc+0x180>)
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d050      	beq.n	800f598 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f4f6:	6a3b      	ldr	r3, [r7, #32]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	2208      	movs	r2, #8
 800f4fc:	4413      	add	r3, r2
 800f4fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f502:	681a      	ldr	r2, [r3, #0]
 800f504:	6a3b      	ldr	r3, [r7, #32]
 800f506:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f50a:	685a      	ldr	r2, [r3, #4]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	1ad2      	subs	r2, r2, r3
 800f510:	2308      	movs	r3, #8
 800f512:	005b      	lsls	r3, r3, #1
 800f514:	429a      	cmp	r2, r3
 800f516:	d91f      	bls.n	800f558 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	4413      	add	r3, r2
 800f51e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f520:	69bb      	ldr	r3, [r7, #24]
 800f522:	f003 0307 	and.w	r3, r3, #7
 800f526:	2b00      	cmp	r3, #0
 800f528:	d00a      	beq.n	800f540 <pvPortMalloc+0xf8>
	__asm volatile
 800f52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f52e:	f383 8811 	msr	BASEPRI, r3
 800f532:	f3bf 8f6f 	isb	sy
 800f536:	f3bf 8f4f 	dsb	sy
 800f53a:	613b      	str	r3, [r7, #16]
}
 800f53c:	bf00      	nop
 800f53e:	e7fe      	b.n	800f53e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f542:	685a      	ldr	r2, [r3, #4]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	1ad2      	subs	r2, r2, r3
 800f548:	69bb      	ldr	r3, [r7, #24]
 800f54a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54e:	687a      	ldr	r2, [r7, #4]
 800f550:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f552:	69b8      	ldr	r0, [r7, #24]
 800f554:	f000 f908 	bl	800f768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f558:	4b1d      	ldr	r3, [pc, #116]	; (800f5d0 <pvPortMalloc+0x188>)
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	1ad3      	subs	r3, r2, r3
 800f562:	4a1b      	ldr	r2, [pc, #108]	; (800f5d0 <pvPortMalloc+0x188>)
 800f564:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f566:	4b1a      	ldr	r3, [pc, #104]	; (800f5d0 <pvPortMalloc+0x188>)
 800f568:	681a      	ldr	r2, [r3, #0]
 800f56a:	4b1b      	ldr	r3, [pc, #108]	; (800f5d8 <pvPortMalloc+0x190>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	429a      	cmp	r2, r3
 800f570:	d203      	bcs.n	800f57a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f572:	4b17      	ldr	r3, [pc, #92]	; (800f5d0 <pvPortMalloc+0x188>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	4a18      	ldr	r2, [pc, #96]	; (800f5d8 <pvPortMalloc+0x190>)
 800f578:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57c:	685a      	ldr	r2, [r3, #4]
 800f57e:	4b13      	ldr	r3, [pc, #76]	; (800f5cc <pvPortMalloc+0x184>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	431a      	orrs	r2, r3
 800f584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f586:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f58a:	2200      	movs	r2, #0
 800f58c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f58e:	4b13      	ldr	r3, [pc, #76]	; (800f5dc <pvPortMalloc+0x194>)
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	3301      	adds	r3, #1
 800f594:	4a11      	ldr	r2, [pc, #68]	; (800f5dc <pvPortMalloc+0x194>)
 800f596:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f598:	f7fe fbe8 	bl	800dd6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f59c:	69fb      	ldr	r3, [r7, #28]
 800f59e:	f003 0307 	and.w	r3, r3, #7
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d00a      	beq.n	800f5bc <pvPortMalloc+0x174>
	__asm volatile
 800f5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5aa:	f383 8811 	msr	BASEPRI, r3
 800f5ae:	f3bf 8f6f 	isb	sy
 800f5b2:	f3bf 8f4f 	dsb	sy
 800f5b6:	60fb      	str	r3, [r7, #12]
}
 800f5b8:	bf00      	nop
 800f5ba:	e7fe      	b.n	800f5ba <pvPortMalloc+0x172>
	return pvReturn;
 800f5bc:	69fb      	ldr	r3, [r7, #28]
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3728      	adds	r7, #40	; 0x28
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	20007ab8 	.word	0x20007ab8
 800f5cc:	20007acc 	.word	0x20007acc
 800f5d0:	20007abc 	.word	0x20007abc
 800f5d4:	20007ab0 	.word	0x20007ab0
 800f5d8:	20007ac0 	.word	0x20007ac0
 800f5dc:	20007ac4 	.word	0x20007ac4

0800f5e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b086      	sub	sp, #24
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d04d      	beq.n	800f68e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f5f2:	2308      	movs	r3, #8
 800f5f4:	425b      	negs	r3, r3
 800f5f6:	697a      	ldr	r2, [r7, #20]
 800f5f8:	4413      	add	r3, r2
 800f5fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f600:	693b      	ldr	r3, [r7, #16]
 800f602:	685a      	ldr	r2, [r3, #4]
 800f604:	4b24      	ldr	r3, [pc, #144]	; (800f698 <vPortFree+0xb8>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	4013      	ands	r3, r2
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d10a      	bne.n	800f624 <vPortFree+0x44>
	__asm volatile
 800f60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f612:	f383 8811 	msr	BASEPRI, r3
 800f616:	f3bf 8f6f 	isb	sy
 800f61a:	f3bf 8f4f 	dsb	sy
 800f61e:	60fb      	str	r3, [r7, #12]
}
 800f620:	bf00      	nop
 800f622:	e7fe      	b.n	800f622 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d00a      	beq.n	800f642 <vPortFree+0x62>
	__asm volatile
 800f62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f630:	f383 8811 	msr	BASEPRI, r3
 800f634:	f3bf 8f6f 	isb	sy
 800f638:	f3bf 8f4f 	dsb	sy
 800f63c:	60bb      	str	r3, [r7, #8]
}
 800f63e:	bf00      	nop
 800f640:	e7fe      	b.n	800f640 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f642:	693b      	ldr	r3, [r7, #16]
 800f644:	685a      	ldr	r2, [r3, #4]
 800f646:	4b14      	ldr	r3, [pc, #80]	; (800f698 <vPortFree+0xb8>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	4013      	ands	r3, r2
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d01e      	beq.n	800f68e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d11a      	bne.n	800f68e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f658:	693b      	ldr	r3, [r7, #16]
 800f65a:	685a      	ldr	r2, [r3, #4]
 800f65c:	4b0e      	ldr	r3, [pc, #56]	; (800f698 <vPortFree+0xb8>)
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	43db      	mvns	r3, r3
 800f662:	401a      	ands	r2, r3
 800f664:	693b      	ldr	r3, [r7, #16]
 800f666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f668:	f7fe fb72 	bl	800dd50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	685a      	ldr	r2, [r3, #4]
 800f670:	4b0a      	ldr	r3, [pc, #40]	; (800f69c <vPortFree+0xbc>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	4413      	add	r3, r2
 800f676:	4a09      	ldr	r2, [pc, #36]	; (800f69c <vPortFree+0xbc>)
 800f678:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f67a:	6938      	ldr	r0, [r7, #16]
 800f67c:	f000 f874 	bl	800f768 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f680:	4b07      	ldr	r3, [pc, #28]	; (800f6a0 <vPortFree+0xc0>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	3301      	adds	r3, #1
 800f686:	4a06      	ldr	r2, [pc, #24]	; (800f6a0 <vPortFree+0xc0>)
 800f688:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f68a:	f7fe fb6f 	bl	800dd6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f68e:	bf00      	nop
 800f690:	3718      	adds	r7, #24
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
 800f696:	bf00      	nop
 800f698:	20007acc 	.word	0x20007acc
 800f69c:	20007abc 	.word	0x20007abc
 800f6a0:	20007ac8 	.word	0x20007ac8

0800f6a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b085      	sub	sp, #20
 800f6a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f6aa:	f646 63c8 	movw	r3, #28360	; 0x6ec8
 800f6ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f6b0:	4b27      	ldr	r3, [pc, #156]	; (800f750 <prvHeapInit+0xac>)
 800f6b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	f003 0307 	and.w	r3, r3, #7
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d00c      	beq.n	800f6d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	3307      	adds	r3, #7
 800f6c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f023 0307 	bic.w	r3, r3, #7
 800f6ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f6cc:	68ba      	ldr	r2, [r7, #8]
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	1ad3      	subs	r3, r2, r3
 800f6d2:	4a1f      	ldr	r2, [pc, #124]	; (800f750 <prvHeapInit+0xac>)
 800f6d4:	4413      	add	r3, r2
 800f6d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f6dc:	4a1d      	ldr	r2, [pc, #116]	; (800f754 <prvHeapInit+0xb0>)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f6e2:	4b1c      	ldr	r3, [pc, #112]	; (800f754 <prvHeapInit+0xb0>)
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	68ba      	ldr	r2, [r7, #8]
 800f6ec:	4413      	add	r3, r2
 800f6ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f6f0:	2208      	movs	r2, #8
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	1a9b      	subs	r3, r3, r2
 800f6f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f023 0307 	bic.w	r3, r3, #7
 800f6fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	4a15      	ldr	r2, [pc, #84]	; (800f758 <prvHeapInit+0xb4>)
 800f704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f706:	4b14      	ldr	r3, [pc, #80]	; (800f758 <prvHeapInit+0xb4>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	2200      	movs	r2, #0
 800f70c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f70e:	4b12      	ldr	r3, [pc, #72]	; (800f758 <prvHeapInit+0xb4>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	2200      	movs	r2, #0
 800f714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	68fa      	ldr	r2, [r7, #12]
 800f71e:	1ad2      	subs	r2, r2, r3
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f724:	4b0c      	ldr	r3, [pc, #48]	; (800f758 <prvHeapInit+0xb4>)
 800f726:	681a      	ldr	r2, [r3, #0]
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	4a0a      	ldr	r2, [pc, #40]	; (800f75c <prvHeapInit+0xb8>)
 800f732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	685b      	ldr	r3, [r3, #4]
 800f738:	4a09      	ldr	r2, [pc, #36]	; (800f760 <prvHeapInit+0xbc>)
 800f73a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f73c:	4b09      	ldr	r3, [pc, #36]	; (800f764 <prvHeapInit+0xc0>)
 800f73e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f742:	601a      	str	r2, [r3, #0]
}
 800f744:	bf00      	nop
 800f746:	3714      	adds	r7, #20
 800f748:	46bd      	mov	sp, r7
 800f74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74e:	4770      	bx	lr
 800f750:	20000be8 	.word	0x20000be8
 800f754:	20007ab0 	.word	0x20007ab0
 800f758:	20007ab8 	.word	0x20007ab8
 800f75c:	20007ac0 	.word	0x20007ac0
 800f760:	20007abc 	.word	0x20007abc
 800f764:	20007acc 	.word	0x20007acc

0800f768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f768:	b480      	push	{r7}
 800f76a:	b085      	sub	sp, #20
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f770:	4b28      	ldr	r3, [pc, #160]	; (800f814 <prvInsertBlockIntoFreeList+0xac>)
 800f772:	60fb      	str	r3, [r7, #12]
 800f774:	e002      	b.n	800f77c <prvInsertBlockIntoFreeList+0x14>
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	60fb      	str	r3, [r7, #12]
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	687a      	ldr	r2, [r7, #4]
 800f782:	429a      	cmp	r2, r3
 800f784:	d8f7      	bhi.n	800f776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	685b      	ldr	r3, [r3, #4]
 800f78e:	68ba      	ldr	r2, [r7, #8]
 800f790:	4413      	add	r3, r2
 800f792:	687a      	ldr	r2, [r7, #4]
 800f794:	429a      	cmp	r2, r3
 800f796:	d108      	bne.n	800f7aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	685a      	ldr	r2, [r3, #4]
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	685b      	ldr	r3, [r3, #4]
 800f7a0:	441a      	add	r2, r3
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	68ba      	ldr	r2, [r7, #8]
 800f7b4:	441a      	add	r2, r3
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d118      	bne.n	800f7f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	681a      	ldr	r2, [r3, #0]
 800f7c2:	4b15      	ldr	r3, [pc, #84]	; (800f818 <prvInsertBlockIntoFreeList+0xb0>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	d00d      	beq.n	800f7e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	685a      	ldr	r2, [r3, #4]
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	685b      	ldr	r3, [r3, #4]
 800f7d4:	441a      	add	r2, r3
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	681a      	ldr	r2, [r3, #0]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	601a      	str	r2, [r3, #0]
 800f7e4:	e008      	b.n	800f7f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f7e6:	4b0c      	ldr	r3, [pc, #48]	; (800f818 <prvInsertBlockIntoFreeList+0xb0>)
 800f7e8:	681a      	ldr	r2, [r3, #0]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	601a      	str	r2, [r3, #0]
 800f7ee:	e003      	b.n	800f7f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	681a      	ldr	r2, [r3, #0]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f7f8:	68fa      	ldr	r2, [r7, #12]
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	d002      	beq.n	800f806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	687a      	ldr	r2, [r7, #4]
 800f804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f806:	bf00      	nop
 800f808:	3714      	adds	r7, #20
 800f80a:	46bd      	mov	sp, r7
 800f80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f810:	4770      	bx	lr
 800f812:	bf00      	nop
 800f814:	20007ab0 	.word	0x20007ab0
 800f818:	20007ab8 	.word	0x20007ab8

0800f81c <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800f820:	f009 faa0 	bl	8018d64 <touchgfx_init>
}
 800f824:	bf00      	nop
 800f826:	bd80      	pop	{r7, pc}

0800f828 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800f828:	b580      	push	{r7, lr}
 800f82a:	b082      	sub	sp, #8
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800f830:	f009 fac2 	bl	8018db8 <touchgfx_taskEntry>
}
 800f834:	bf00      	nop
 800f836:	3708      	adds	r7, #8
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}

0800f83c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800f83c:	b480      	push	{r7}
 800f83e:	b083      	sub	sp, #12
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
    {
 800f844:	4a04      	ldr	r2, [pc, #16]	; (800f858 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	601a      	str	r2, [r3, #0]
    }
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	4618      	mov	r0, r3
 800f84e:	370c      	adds	r7, #12
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr
 800f858:	0802fafc 	.word	0x0802fafc

0800f85c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
    }
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f7ff ffe9 	bl	800f83c <_ZN8touchgfx12FontProviderD1Ev>
 800f86a:	2104      	movs	r1, #4
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f01d ffff 	bl	802d870 <_ZdlPvj>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	4618      	mov	r0, r3
 800f876:	3708      	adds	r7, #8
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	460b      	mov	r3, r1
 800f886:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800f888:	887b      	ldrh	r3, [r7, #2]
 800f88a:	2b03      	cmp	r3, #3
 800f88c:	d81e      	bhi.n	800f8cc <_ZN23ApplicationFontProvider7getFontEt+0x50>
 800f88e:	a201      	add	r2, pc, #4	; (adr r2, 800f894 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800f890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f894:	0800f8a5 	.word	0x0800f8a5
 800f898:	0800f8af 	.word	0x0800f8af
 800f89c:	0800f8b9 	.word	0x0800f8b9
 800f8a0:	0800f8c3 	.word	0x0800f8c3
    {
    case Typography::SENSOR_LABEL:
        // bahnschrift_25_2bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800f8a4:	f006 fb88 	bl	8015fb8 <_ZN17TypedTextDatabase8getFontsEv>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	e00f      	b.n	800f8ce <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SENSOR_UNIT:
        // bahnschrift_40_2bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800f8ae:	f006 fb83 	bl	8015fb8 <_ZN17TypedTextDatabase8getFontsEv>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	685b      	ldr	r3, [r3, #4]
 800f8b6:	e00a      	b.n	800f8ce <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SENSOR_VALUES:
        // bahnschrift_80_2bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800f8b8:	f006 fb7e 	bl	8015fb8 <_ZN17TypedTextDatabase8getFontsEv>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	689b      	ldr	r3, [r3, #8]
 800f8c0:	e005      	b.n	800f8ce <_ZN23ApplicationFontProvider7getFontEt+0x52>
    case Typography::SENSOR_VALUE_SMALL:
        // bahnschrift_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800f8c2:	f006 fb79 	bl	8015fb8 <_ZN17TypedTextDatabase8getFontsEv>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	68db      	ldr	r3, [r3, #12]
 800f8ca:	e000      	b.n	800f8ce <_ZN23ApplicationFontProvider7getFontEt+0x52>
    default:
        return 0;
 800f8cc:	2300      	movs	r3, #0
    }
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3708      	adds	r7, #8
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop

0800f8d8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SENSOR_VALUES = 2;      // bahnschrift_80_2bpp
    static const touchgfx::FontId SENSOR_VALUE_SMALL = 3; // bahnschrift_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	4a05      	ldr	r2, [pc, #20]	; (800f8f8 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	601a      	str	r2, [r3, #0]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7ff ffa7 	bl	800f83c <_ZN8touchgfx12FontProviderD1Ev>
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3708      	adds	r7, #8
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}
 800f8f8:	0802fae8 	.word	0x0802fae8

0800f8fc <_ZN23ApplicationFontProviderD0Ev>:
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	6878      	ldr	r0, [r7, #4]
 800f906:	f7ff ffe7 	bl	800f8d8 <_ZN23ApplicationFontProviderD1Ev>
 800f90a:	2104      	movs	r1, #4
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f01d ffaf 	bl	802d870 <_ZdlPvj>
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	4618      	mov	r0, r3
 800f916:	3708      	adds	r7, #8
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800f91c:	b480      	push	{r7}
 800f91e:	b083      	sub	sp, #12
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
    {
 800f924:	4a04      	ldr	r2, [pc, #16]	; (800f938 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	601a      	str	r2, [r3, #0]
    }
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	4618      	mov	r0, r3
 800f92e:	370c      	adds	r7, #12
 800f930:	46bd      	mov	sp, r7
 800f932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f936:	4770      	bx	lr
 800f938:	0802ff0c 	.word	0x0802ff0c

0800f93c <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b082      	sub	sp, #8
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
    }
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f7ff ffe9 	bl	800f91c <_ZN8touchgfx4FontD1Ev>
 800f94a:	2110      	movs	r1, #16
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f01d ff8f 	bl	802d870 <_ZdlPvj>
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	4618      	mov	r0, r3
 800f956:	3708      	adds	r7, #8
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800f95c:	b590      	push	{r4, r7, lr}
 800f95e:	b087      	sub	sp, #28
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	460b      	mov	r3, r1
 800f966:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800f968:	887b      	ldrh	r3, [r7, #2]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d101      	bne.n	800f972 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800f96e:	2300      	movs	r3, #0
 800f970:	e010      	b.n	800f994 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800f972:	2300      	movs	r3, #0
 800f974:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800f976:	2300      	movs	r3, #0
 800f978:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	3308      	adds	r3, #8
 800f980:	681c      	ldr	r4, [r3, #0]
 800f982:	f107 030f 	add.w	r3, r7, #15
 800f986:	f107 0210 	add.w	r2, r7, #16
 800f98a:	8879      	ldrh	r1, [r7, #2]
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	47a0      	blx	r4
 800f990:	6178      	str	r0, [r7, #20]
        return glyph;
 800f992:	697b      	ldr	r3, [r7, #20]
    }
 800f994:	4618      	mov	r0, r3
 800f996:	371c      	adds	r7, #28
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd90      	pop	{r4, r7, pc}

0800f99c <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800f99c:	b480      	push	{r7}
 800f99e:	b083      	sub	sp, #12
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	895b      	ldrh	r3, [r3, #10]
    }
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	370c      	adds	r7, #12
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr

0800f9b4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800f9b4:	b480      	push	{r7}
 800f9b6:	b083      	sub	sp, #12
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	899b      	ldrh	r3, [r3, #12]
    }
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	370c      	adds	r7, #12
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ca:	4770      	bx	lr

0800f9cc <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800f9cc:	b480      	push	{r7}
 800f9ce:	b083      	sub	sp, #12
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	889b      	ldrh	r3, [r3, #4]
    }
 800f9d8:	4618      	mov	r0, r3
 800f9da:	370c      	adds	r7, #12
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr

0800f9e4 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800f9e4:	b480      	push	{r7}
 800f9e6:	b083      	sub	sp, #12
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	889a      	ldrh	r2, [r3, #4]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	799b      	ldrb	r3, [r3, #6]
 800f9f4:	b29b      	uxth	r3, r3
 800f9f6:	4413      	add	r3, r2
 800f9f8:	b29b      	uxth	r3, r3
    }
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	370c      	adds	r7, #12
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa04:	4770      	bx	lr

0800fa06 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800fa06:	b480      	push	{r7}
 800fa08:	b083      	sub	sp, #12
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	79db      	ldrb	r3, [r3, #7]
 800fa12:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800fa16:	b2db      	uxtb	r3, r3
    }
 800fa18:	4618      	mov	r0, r3
 800fa1a:	370c      	adds	r7, #12
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa22:	4770      	bx	lr

0800fa24 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	79db      	ldrb	r3, [r3, #7]
 800fa30:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fa34:	b2db      	uxtb	r3, r3
    }
 800fa36:	4618      	mov	r0, r3
 800fa38:	370c      	adds	r7, #12
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa40:	4770      	bx	lr
	...

0800fa44 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b082      	sub	sp, #8
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	4a05      	ldr	r2, [pc, #20]	; (800fa64 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	601a      	str	r2, [r3, #0]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7ff ff61 	bl	800f91c <_ZN8touchgfx4FontD1Ev>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3708      	adds	r7, #8
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	08030afc 	.word	0x08030afc

0800fa68 <_ZN8touchgfx9ConstFontD0Ev>:
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f7ff ffe7 	bl	800fa44 <_ZN8touchgfx9ConstFontD1Ev>
 800fa76:	2118      	movs	r1, #24
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	f01d fef9 	bl	802d870 <_ZdlPvj>
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	4618      	mov	r0, r3
 800fa82:	3708      	adds	r7, #8
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}

0800fa88 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	4a05      	ldr	r2, [pc, #20]	; (800faa8 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	601a      	str	r2, [r3, #0]
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7ff ffd3 	bl	800fa44 <_ZN8touchgfx9ConstFontD1Ev>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	4618      	mov	r0, r3
 800faa2:	3708      	adds	r7, #8
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}
 800faa8:	0802fb20 	.word	0x0802fb20

0800faac <_ZN8touchgfx13GeneratedFontD0Ev>:
 800faac:	b580      	push	{r7, lr}
 800faae:	b082      	sub	sp, #8
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f7ff ffe7 	bl	800fa88 <_ZN8touchgfx13GeneratedFontD1Ev>
 800faba:	2128      	movs	r1, #40	; 0x28
 800fabc:	6878      	ldr	r0, [r7, #4]
 800fabe:	f01d fed7 	bl	802d870 <_ZdlPvj>
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	4618      	mov	r0, r3
 800fac6:	3708      	adds	r7, #8
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800facc:	b480      	push	{r7}
 800face:	b083      	sub	sp, #12
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
    {
 800fad4:	4a04      	ldr	r2, [pc, #16]	; (800fae8 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	601a      	str	r2, [r3, #0]
    }
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	4618      	mov	r0, r3
 800fade:	370c      	adds	r7, #12
 800fae0:	46bd      	mov	sp, r7
 800fae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae6:	4770      	bx	lr
 800fae8:	0802fb10 	.word	0x0802fb10

0800faec <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
    }
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f7ff ffe9 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
 800fafa:	2108      	movs	r1, #8
 800fafc:	6878      	ldr	r0, [r7, #4]
 800fafe:	f01d feb7 	bl	802d870 <_ZdlPvj>
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	4618      	mov	r0, r3
 800fb06:	3708      	adds	r7, #8
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800fb0c:	b480      	push	{r7}
 800fb0e:	b083      	sub	sp, #12
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	6a1b      	ldr	r3, [r3, #32]
    }
 800fb18:	4618      	mov	r0, r3
 800fb1a:	370c      	adds	r7, #12
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr

0800fb24 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800fb24:	b480      	push	{r7}
 800fb26:	b083      	sub	sp, #12
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800fb30:	4618      	mov	r0, r3
 800fb32:	370c      	adds	r7, #12
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr

0800fb3c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b08c      	sub	sp, #48	; 0x30
 800fb40:	af08      	add	r7, sp, #32
 800fb42:	60f8      	str	r0, [r7, #12]
 800fb44:	60b9      	str	r1, [r7, #8]
 800fb46:	4611      	mov	r1, r2
 800fb48:	461a      	mov	r2, r3
 800fb4a:	460b      	mov	r3, r1
 800fb4c:	80fb      	strh	r3, [r7, #6]
 800fb4e:	4613      	mov	r3, r2
 800fb50:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800fb52:	68f8      	ldr	r0, [r7, #12]
 800fb54:	88b9      	ldrh	r1, [r7, #4]
 800fb56:	88fa      	ldrh	r2, [r7, #6]
 800fb58:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fb5a:	9306      	str	r3, [sp, #24]
 800fb5c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fb5e:	9305      	str	r3, [sp, #20]
 800fb60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fb64:	9304      	str	r3, [sp, #16]
 800fb66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fb6a:	9303      	str	r3, [sp, #12]
 800fb6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fb70:	9302      	str	r3, [sp, #8]
 800fb72:	7f3b      	ldrb	r3, [r7, #28]
 800fb74:	9301      	str	r3, [sp, #4]
 800fb76:	7e3b      	ldrb	r3, [r7, #24]
 800fb78:	9300      	str	r3, [sp, #0]
 800fb7a:	460b      	mov	r3, r1
 800fb7c:	68b9      	ldr	r1, [r7, #8]
 800fb7e:	f00f fbe3 	bl	801f348 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800fb82:	4a0a      	ldr	r2, [pc, #40]	; (800fbac <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	601a      	str	r2, [r3, #0]
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb8c:	619a      	str	r2, [r3, #24]
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb92:	61da      	str	r2, [r3, #28]
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb98:	621a      	str	r2, [r3, #32]
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fb9e:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	4618      	mov	r0, r3
 800fba4:	3710      	adds	r7, #16
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
 800fbaa:	bf00      	nop
 800fbac:	0802fb20 	.word	0x0802fb20

0800fbb0 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800fbb0:	b480      	push	{r7}
 800fbb2:	b085      	sub	sp, #20
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	699b      	ldr	r3, [r3, #24]
 800fbbe:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	889b      	ldrh	r3, [r3, #4]
 800fbc4:	0adb      	lsrs	r3, r3, #11
 800fbc6:	b29b      	uxth	r3, r3
 800fbc8:	009b      	lsls	r3, r3, #2
 800fbca:	68fa      	ldr	r2, [r7, #12]
 800fbcc:	4413      	add	r3, r2
 800fbce:	681a      	ldr	r2, [r3, #0]
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	4413      	add	r3, r2
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3714      	adds	r7, #20
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe0:	4770      	bx	lr

0800fbe2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800fbe2:	b480      	push	{r7}
 800fbe4:	b089      	sub	sp, #36	; 0x24
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	60f8      	str	r0, [r7, #12]
 800fbea:	460b      	mov	r3, r1
 800fbec:	607a      	str	r2, [r7, #4]
 800fbee:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d003      	beq.n	800fbfe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	7b1b      	ldrb	r3, [r3, #12]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d101      	bne.n	800fc02 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	e030      	b.n	800fc64 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	69da      	ldr	r2, [r3, #28]
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	7b5b      	ldrb	r3, [r3, #13]
 800fc0e:	021b      	lsls	r3, r3, #8
 800fc10:	b21b      	sxth	r3, r3
 800fc12:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fc16:	b219      	sxth	r1, r3
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	7adb      	ldrb	r3, [r3, #11]
 800fc1c:	b21b      	sxth	r3, r3
 800fc1e:	430b      	orrs	r3, r1
 800fc20:	b21b      	sxth	r3, r3
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	009b      	lsls	r3, r3, #2
 800fc26:	4413      	add	r3, r2
 800fc28:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	7b1b      	ldrb	r3, [r3, #12]
 800fc2e:	837b      	strh	r3, [r7, #26]
 800fc30:	8b7b      	ldrh	r3, [r7, #26]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d015      	beq.n	800fc62 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800fc36:	69fb      	ldr	r3, [r7, #28]
 800fc38:	881b      	ldrh	r3, [r3, #0]
 800fc3a:	897a      	ldrh	r2, [r7, #10]
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d103      	bne.n	800fc48 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800fc40:	69fb      	ldr	r3, [r7, #28]
 800fc42:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800fc46:	e00d      	b.n	800fc64 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800fc48:	69fb      	ldr	r3, [r7, #28]
 800fc4a:	881b      	ldrh	r3, [r3, #0]
 800fc4c:	897a      	ldrh	r2, [r7, #10]
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d306      	bcc.n	800fc60 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800fc52:	8b7b      	ldrh	r3, [r7, #26]
 800fc54:	3b01      	subs	r3, #1
 800fc56:	837b      	strh	r3, [r7, #26]
 800fc58:	69fb      	ldr	r3, [r7, #28]
 800fc5a:	3304      	adds	r3, #4
 800fc5c:	61fb      	str	r3, [r7, #28]
 800fc5e:	e7e7      	b.n	800fc30 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800fc60:	bf00      	nop
        }
    }
    return 0;
 800fc62:	2300      	movs	r3, #0
}
 800fc64:	4618      	mov	r0, r3
 800fc66:	3724      	adds	r7, #36	; 0x24
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr

0800fc70 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_bahnschrift_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_bahnschrift_20_4bpp();

touchgfx::GeneratedFont& getFont_bahnschrift_20_4bpp()
{
    static touchgfx::GeneratedFont bahnschrift_20_4bpp(glyphs_bahnschrift_20_4bpp, 70, 20, 4, 4, 1, 1, 1, unicodes_bahnschrift_20_4bpp, kerning_bahnschrift_20_4bpp, 0, 0, 0, 0);
 800fc70:	b580      	push	{r7, lr}
 800fc72:	af00      	add	r7, sp, #0
 800fc74:	4801      	ldr	r0, [pc, #4]	; (800fc7c <__tcf_0+0xc>)
 800fc76:	f7ff ff07 	bl	800fa88 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fc7a:	bd80      	pop	{r7, pc}
 800fc7c:	20007ad0 	.word	0x20007ad0

0800fc80 <_Z27getFont_bahnschrift_20_4bppv>:
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b08c      	sub	sp, #48	; 0x30
 800fc84:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont bahnschrift_20_4bpp(glyphs_bahnschrift_20_4bpp, 70, 20, 4, 4, 1, 1, 1, unicodes_bahnschrift_20_4bpp, kerning_bahnschrift_20_4bpp, 0, 0, 0, 0);
 800fc86:	4b1f      	ldr	r3, [pc, #124]	; (800fd04 <_Z27getFont_bahnschrift_20_4bppv+0x84>)
 800fc88:	781b      	ldrb	r3, [r3, #0]
 800fc8a:	f3bf 8f5b 	dmb	ish
 800fc8e:	b2db      	uxtb	r3, r3
 800fc90:	f003 0301 	and.w	r3, r3, #1
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	bf0c      	ite	eq
 800fc98:	2301      	moveq	r3, #1
 800fc9a:	2300      	movne	r3, #0
 800fc9c:	b2db      	uxtb	r3, r3
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d02c      	beq.n	800fcfc <_Z27getFont_bahnschrift_20_4bppv+0x7c>
 800fca2:	4818      	ldr	r0, [pc, #96]	; (800fd04 <_Z27getFont_bahnschrift_20_4bppv+0x84>)
 800fca4:	f01d fde6 	bl	802d874 <__cxa_guard_acquire>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	bf14      	ite	ne
 800fcae:	2301      	movne	r3, #1
 800fcb0:	2300      	moveq	r3, #0
 800fcb2:	b2db      	uxtb	r3, r3
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d021      	beq.n	800fcfc <_Z27getFont_bahnschrift_20_4bppv+0x7c>
 800fcb8:	2300      	movs	r3, #0
 800fcba:	930a      	str	r3, [sp, #40]	; 0x28
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	9309      	str	r3, [sp, #36]	; 0x24
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	9308      	str	r3, [sp, #32]
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	9307      	str	r3, [sp, #28]
 800fcc8:	4b0f      	ldr	r3, [pc, #60]	; (800fd08 <_Z27getFont_bahnschrift_20_4bppv+0x88>)
 800fcca:	9306      	str	r3, [sp, #24]
 800fccc:	4b0f      	ldr	r3, [pc, #60]	; (800fd0c <_Z27getFont_bahnschrift_20_4bppv+0x8c>)
 800fcce:	9305      	str	r3, [sp, #20]
 800fcd0:	2301      	movs	r3, #1
 800fcd2:	9304      	str	r3, [sp, #16]
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	9303      	str	r3, [sp, #12]
 800fcd8:	2301      	movs	r3, #1
 800fcda:	9302      	str	r3, [sp, #8]
 800fcdc:	2304      	movs	r3, #4
 800fcde:	9301      	str	r3, [sp, #4]
 800fce0:	2304      	movs	r3, #4
 800fce2:	9300      	str	r3, [sp, #0]
 800fce4:	2314      	movs	r3, #20
 800fce6:	2246      	movs	r2, #70	; 0x46
 800fce8:	4909      	ldr	r1, [pc, #36]	; (800fd10 <_Z27getFont_bahnschrift_20_4bppv+0x90>)
 800fcea:	480a      	ldr	r0, [pc, #40]	; (800fd14 <_Z27getFont_bahnschrift_20_4bppv+0x94>)
 800fcec:	f7ff ff26 	bl	800fb3c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800fcf0:	4809      	ldr	r0, [pc, #36]	; (800fd18 <_Z27getFont_bahnschrift_20_4bppv+0x98>)
 800fcf2:	f01d fe09 	bl	802d908 <atexit>
 800fcf6:	4803      	ldr	r0, [pc, #12]	; (800fd04 <_Z27getFont_bahnschrift_20_4bppv+0x84>)
 800fcf8:	f01d fdc8 	bl	802d88c <__cxa_guard_release>
    return bahnschrift_20_4bpp;
 800fcfc:	4b05      	ldr	r3, [pc, #20]	; (800fd14 <_Z27getFont_bahnschrift_20_4bppv+0x94>)
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	20007af8 	.word	0x20007af8
 800fd08:	0803d7e4 	.word	0x0803d7e4
 800fd0c:	0803d7f4 	.word	0x0803d7f4
 800fd10:	0803c894 	.word	0x0803c894
 800fd14:	20007ad0 	.word	0x20007ad0
 800fd18:	0800fc71 	.word	0x0800fc71

0800fd1c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_bahnschrift_25_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_bahnschrift_25_2bpp();

touchgfx::GeneratedFont& getFont_bahnschrift_25_2bpp()
{
    static touchgfx::GeneratedFont bahnschrift_25_2bpp(glyphs_bahnschrift_25_2bpp, 70, 25, 5, 2, 0, 1, 1, unicodes_bahnschrift_25_2bpp, kerning_bahnschrift_25_2bpp, 0, 0, 0, 0);
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	af00      	add	r7, sp, #0
 800fd20:	4801      	ldr	r0, [pc, #4]	; (800fd28 <__tcf_0+0xc>)
 800fd22:	f7ff feb1 	bl	800fa88 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	20007afc 	.word	0x20007afc

0800fd2c <_Z27getFont_bahnschrift_25_2bppv>:
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b08c      	sub	sp, #48	; 0x30
 800fd30:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont bahnschrift_25_2bpp(glyphs_bahnschrift_25_2bpp, 70, 25, 5, 2, 0, 1, 1, unicodes_bahnschrift_25_2bpp, kerning_bahnschrift_25_2bpp, 0, 0, 0, 0);
 800fd32:	4b1f      	ldr	r3, [pc, #124]	; (800fdb0 <_Z27getFont_bahnschrift_25_2bppv+0x84>)
 800fd34:	781b      	ldrb	r3, [r3, #0]
 800fd36:	f3bf 8f5b 	dmb	ish
 800fd3a:	b2db      	uxtb	r3, r3
 800fd3c:	f003 0301 	and.w	r3, r3, #1
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	bf0c      	ite	eq
 800fd44:	2301      	moveq	r3, #1
 800fd46:	2300      	movne	r3, #0
 800fd48:	b2db      	uxtb	r3, r3
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d02c      	beq.n	800fda8 <_Z27getFont_bahnschrift_25_2bppv+0x7c>
 800fd4e:	4818      	ldr	r0, [pc, #96]	; (800fdb0 <_Z27getFont_bahnschrift_25_2bppv+0x84>)
 800fd50:	f01d fd90 	bl	802d874 <__cxa_guard_acquire>
 800fd54:	4603      	mov	r3, r0
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	bf14      	ite	ne
 800fd5a:	2301      	movne	r3, #1
 800fd5c:	2300      	moveq	r3, #0
 800fd5e:	b2db      	uxtb	r3, r3
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d021      	beq.n	800fda8 <_Z27getFont_bahnschrift_25_2bppv+0x7c>
 800fd64:	2300      	movs	r3, #0
 800fd66:	930a      	str	r3, [sp, #40]	; 0x28
 800fd68:	2300      	movs	r3, #0
 800fd6a:	9309      	str	r3, [sp, #36]	; 0x24
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	9308      	str	r3, [sp, #32]
 800fd70:	2300      	movs	r3, #0
 800fd72:	9307      	str	r3, [sp, #28]
 800fd74:	4b0f      	ldr	r3, [pc, #60]	; (800fdb4 <_Z27getFont_bahnschrift_25_2bppv+0x88>)
 800fd76:	9306      	str	r3, [sp, #24]
 800fd78:	4b0f      	ldr	r3, [pc, #60]	; (800fdb8 <_Z27getFont_bahnschrift_25_2bppv+0x8c>)
 800fd7a:	9305      	str	r3, [sp, #20]
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	9304      	str	r3, [sp, #16]
 800fd80:	2301      	movs	r3, #1
 800fd82:	9303      	str	r3, [sp, #12]
 800fd84:	2300      	movs	r3, #0
 800fd86:	9302      	str	r3, [sp, #8]
 800fd88:	2302      	movs	r3, #2
 800fd8a:	9301      	str	r3, [sp, #4]
 800fd8c:	2305      	movs	r3, #5
 800fd8e:	9300      	str	r3, [sp, #0]
 800fd90:	2319      	movs	r3, #25
 800fd92:	2246      	movs	r2, #70	; 0x46
 800fd94:	4909      	ldr	r1, [pc, #36]	; (800fdbc <_Z27getFont_bahnschrift_25_2bppv+0x90>)
 800fd96:	480a      	ldr	r0, [pc, #40]	; (800fdc0 <_Z27getFont_bahnschrift_25_2bppv+0x94>)
 800fd98:	f7ff fed0 	bl	800fb3c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800fd9c:	4809      	ldr	r0, [pc, #36]	; (800fdc4 <_Z27getFont_bahnschrift_25_2bppv+0x98>)
 800fd9e:	f01d fdb3 	bl	802d908 <atexit>
 800fda2:	4803      	ldr	r0, [pc, #12]	; (800fdb0 <_Z27getFont_bahnschrift_25_2bppv+0x84>)
 800fda4:	f01d fd72 	bl	802d88c <__cxa_guard_release>
    return bahnschrift_25_2bpp;
 800fda8:	4b05      	ldr	r3, [pc, #20]	; (800fdc0 <_Z27getFont_bahnschrift_25_2bppv+0x94>)
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	20007b24 	.word	0x20007b24
 800fdb4:	0803d7e8 	.word	0x0803d7e8
 800fdb8:	0803d7f8 	.word	0x0803d7f8
 800fdbc:	0803cc68 	.word	0x0803cc68
 800fdc0:	20007afc 	.word	0x20007afc
 800fdc4:	0800fd1d 	.word	0x0800fd1d

0800fdc8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_bahnschrift_40_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_bahnschrift_40_2bpp();

touchgfx::GeneratedFont& getFont_bahnschrift_40_2bpp()
{
    static touchgfx::GeneratedFont bahnschrift_40_2bpp(glyphs_bahnschrift_40_2bpp, 70, 40, 8, 2, 0, 1, 1, unicodes_bahnschrift_40_2bpp, kerning_bahnschrift_40_2bpp, 0, 0, 0, 0);
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	af00      	add	r7, sp, #0
 800fdcc:	4801      	ldr	r0, [pc, #4]	; (800fdd4 <__tcf_0+0xc>)
 800fdce:	f7ff fe5b 	bl	800fa88 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fdd2:	bd80      	pop	{r7, pc}
 800fdd4:	20007b28 	.word	0x20007b28

0800fdd8 <_Z27getFont_bahnschrift_40_2bppv>:
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b08c      	sub	sp, #48	; 0x30
 800fddc:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont bahnschrift_40_2bpp(glyphs_bahnschrift_40_2bpp, 70, 40, 8, 2, 0, 1, 1, unicodes_bahnschrift_40_2bpp, kerning_bahnschrift_40_2bpp, 0, 0, 0, 0);
 800fdde:	4b1f      	ldr	r3, [pc, #124]	; (800fe5c <_Z27getFont_bahnschrift_40_2bppv+0x84>)
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	f3bf 8f5b 	dmb	ish
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	f003 0301 	and.w	r3, r3, #1
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	bf0c      	ite	eq
 800fdf0:	2301      	moveq	r3, #1
 800fdf2:	2300      	movne	r3, #0
 800fdf4:	b2db      	uxtb	r3, r3
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d02c      	beq.n	800fe54 <_Z27getFont_bahnschrift_40_2bppv+0x7c>
 800fdfa:	4818      	ldr	r0, [pc, #96]	; (800fe5c <_Z27getFont_bahnschrift_40_2bppv+0x84>)
 800fdfc:	f01d fd3a 	bl	802d874 <__cxa_guard_acquire>
 800fe00:	4603      	mov	r3, r0
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	bf14      	ite	ne
 800fe06:	2301      	movne	r3, #1
 800fe08:	2300      	moveq	r3, #0
 800fe0a:	b2db      	uxtb	r3, r3
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d021      	beq.n	800fe54 <_Z27getFont_bahnschrift_40_2bppv+0x7c>
 800fe10:	2300      	movs	r3, #0
 800fe12:	930a      	str	r3, [sp, #40]	; 0x28
 800fe14:	2300      	movs	r3, #0
 800fe16:	9309      	str	r3, [sp, #36]	; 0x24
 800fe18:	2300      	movs	r3, #0
 800fe1a:	9308      	str	r3, [sp, #32]
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	9307      	str	r3, [sp, #28]
 800fe20:	4b0f      	ldr	r3, [pc, #60]	; (800fe60 <_Z27getFont_bahnschrift_40_2bppv+0x88>)
 800fe22:	9306      	str	r3, [sp, #24]
 800fe24:	4b0f      	ldr	r3, [pc, #60]	; (800fe64 <_Z27getFont_bahnschrift_40_2bppv+0x8c>)
 800fe26:	9305      	str	r3, [sp, #20]
 800fe28:	2301      	movs	r3, #1
 800fe2a:	9304      	str	r3, [sp, #16]
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	9303      	str	r3, [sp, #12]
 800fe30:	2300      	movs	r3, #0
 800fe32:	9302      	str	r3, [sp, #8]
 800fe34:	2302      	movs	r3, #2
 800fe36:	9301      	str	r3, [sp, #4]
 800fe38:	2308      	movs	r3, #8
 800fe3a:	9300      	str	r3, [sp, #0]
 800fe3c:	2328      	movs	r3, #40	; 0x28
 800fe3e:	2246      	movs	r2, #70	; 0x46
 800fe40:	4909      	ldr	r1, [pc, #36]	; (800fe68 <_Z27getFont_bahnschrift_40_2bppv+0x90>)
 800fe42:	480a      	ldr	r0, [pc, #40]	; (800fe6c <_Z27getFont_bahnschrift_40_2bppv+0x94>)
 800fe44:	f7ff fe7a 	bl	800fb3c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800fe48:	4809      	ldr	r0, [pc, #36]	; (800fe70 <_Z27getFont_bahnschrift_40_2bppv+0x98>)
 800fe4a:	f01d fd5d 	bl	802d908 <atexit>
 800fe4e:	4803      	ldr	r0, [pc, #12]	; (800fe5c <_Z27getFont_bahnschrift_40_2bppv+0x84>)
 800fe50:	f01d fd1c 	bl	802d88c <__cxa_guard_release>
    return bahnschrift_40_2bpp;
 800fe54:	4b05      	ldr	r3, [pc, #20]	; (800fe6c <_Z27getFont_bahnschrift_40_2bppv+0x94>)
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}
 800fe5c:	20007b50 	.word	0x20007b50
 800fe60:	0803d7ec 	.word	0x0803d7ec
 800fe64:	0803d7fc 	.word	0x0803d7fc
 800fe68:	0803d03c 	.word	0x0803d03c
 800fe6c:	20007b28 	.word	0x20007b28
 800fe70:	0800fdc9 	.word	0x0800fdc9

0800fe74 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_bahnschrift_80_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_bahnschrift_80_2bpp();

touchgfx::GeneratedFont& getFont_bahnschrift_80_2bpp()
{
    static touchgfx::GeneratedFont bahnschrift_80_2bpp(glyphs_bahnschrift_80_2bpp, 70, 80, 16, 2, 0, 1, 1, unicodes_bahnschrift_80_2bpp, kerning_bahnschrift_80_2bpp, 0, 0, 0, 0);
 800fe74:	b580      	push	{r7, lr}
 800fe76:	af00      	add	r7, sp, #0
 800fe78:	4801      	ldr	r0, [pc, #4]	; (800fe80 <__tcf_0+0xc>)
 800fe7a:	f7ff fe05 	bl	800fa88 <_ZN8touchgfx13GeneratedFontD1Ev>
 800fe7e:	bd80      	pop	{r7, pc}
 800fe80:	20007b54 	.word	0x20007b54

0800fe84 <_Z27getFont_bahnschrift_80_2bppv>:
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b08c      	sub	sp, #48	; 0x30
 800fe88:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont bahnschrift_80_2bpp(glyphs_bahnschrift_80_2bpp, 70, 80, 16, 2, 0, 1, 1, unicodes_bahnschrift_80_2bpp, kerning_bahnschrift_80_2bpp, 0, 0, 0, 0);
 800fe8a:	4b1f      	ldr	r3, [pc, #124]	; (800ff08 <_Z27getFont_bahnschrift_80_2bppv+0x84>)
 800fe8c:	781b      	ldrb	r3, [r3, #0]
 800fe8e:	f3bf 8f5b 	dmb	ish
 800fe92:	b2db      	uxtb	r3, r3
 800fe94:	f003 0301 	and.w	r3, r3, #1
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	bf0c      	ite	eq
 800fe9c:	2301      	moveq	r3, #1
 800fe9e:	2300      	movne	r3, #0
 800fea0:	b2db      	uxtb	r3, r3
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d02c      	beq.n	800ff00 <_Z27getFont_bahnschrift_80_2bppv+0x7c>
 800fea6:	4818      	ldr	r0, [pc, #96]	; (800ff08 <_Z27getFont_bahnschrift_80_2bppv+0x84>)
 800fea8:	f01d fce4 	bl	802d874 <__cxa_guard_acquire>
 800feac:	4603      	mov	r3, r0
 800feae:	2b00      	cmp	r3, #0
 800feb0:	bf14      	ite	ne
 800feb2:	2301      	movne	r3, #1
 800feb4:	2300      	moveq	r3, #0
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d021      	beq.n	800ff00 <_Z27getFont_bahnschrift_80_2bppv+0x7c>
 800febc:	2300      	movs	r3, #0
 800febe:	930a      	str	r3, [sp, #40]	; 0x28
 800fec0:	2300      	movs	r3, #0
 800fec2:	9309      	str	r3, [sp, #36]	; 0x24
 800fec4:	2300      	movs	r3, #0
 800fec6:	9308      	str	r3, [sp, #32]
 800fec8:	2300      	movs	r3, #0
 800feca:	9307      	str	r3, [sp, #28]
 800fecc:	4b0f      	ldr	r3, [pc, #60]	; (800ff0c <_Z27getFont_bahnschrift_80_2bppv+0x88>)
 800fece:	9306      	str	r3, [sp, #24]
 800fed0:	4b0f      	ldr	r3, [pc, #60]	; (800ff10 <_Z27getFont_bahnschrift_80_2bppv+0x8c>)
 800fed2:	9305      	str	r3, [sp, #20]
 800fed4:	2301      	movs	r3, #1
 800fed6:	9304      	str	r3, [sp, #16]
 800fed8:	2301      	movs	r3, #1
 800feda:	9303      	str	r3, [sp, #12]
 800fedc:	2300      	movs	r3, #0
 800fede:	9302      	str	r3, [sp, #8]
 800fee0:	2302      	movs	r3, #2
 800fee2:	9301      	str	r3, [sp, #4]
 800fee4:	2310      	movs	r3, #16
 800fee6:	9300      	str	r3, [sp, #0]
 800fee8:	2350      	movs	r3, #80	; 0x50
 800feea:	2246      	movs	r2, #70	; 0x46
 800feec:	4909      	ldr	r1, [pc, #36]	; (800ff14 <_Z27getFont_bahnschrift_80_2bppv+0x90>)
 800feee:	480a      	ldr	r0, [pc, #40]	; (800ff18 <_Z27getFont_bahnschrift_80_2bppv+0x94>)
 800fef0:	f7ff fe24 	bl	800fb3c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800fef4:	4809      	ldr	r0, [pc, #36]	; (800ff1c <_Z27getFont_bahnschrift_80_2bppv+0x98>)
 800fef6:	f01d fd07 	bl	802d908 <atexit>
 800fefa:	4803      	ldr	r0, [pc, #12]	; (800ff08 <_Z27getFont_bahnschrift_80_2bppv+0x84>)
 800fefc:	f01d fcc6 	bl	802d88c <__cxa_guard_release>
    return bahnschrift_80_2bpp;
 800ff00:	4b05      	ldr	r3, [pc, #20]	; (800ff18 <_Z27getFont_bahnschrift_80_2bppv+0x94>)
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}
 800ff08:	20007b7c 	.word	0x20007b7c
 800ff0c:	0803d7f0 	.word	0x0803d7f0
 800ff10:	0803d800 	.word	0x0803d800
 800ff14:	0803d410 	.word	0x0803d410
 800ff18:	20007b54 	.word	0x20007b54
 800ff1c:	0800fe75 	.word	0x0800fe75

0800ff20 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800ff20:	b480      	push	{r7}
 800ff22:	b083      	sub	sp, #12
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
 800ff28:	6039      	str	r1, [r7, #0]
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	370c      	adds	r7, #12
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr

0800ff38 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800ff38:	b480      	push	{r7}
 800ff3a:	b083      	sub	sp, #12
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
 800ff40:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ff42:	bf00      	nop
 800ff44:	370c      	adds	r7, #12
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr

0800ff4e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800ff4e:	b480      	push	{r7}
 800ff50:	b083      	sub	sp, #12
 800ff52:	af00      	add	r7, sp, #0
 800ff54:	6078      	str	r0, [r7, #4]
 800ff56:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ff58:	bf00      	nop
 800ff5a:	370c      	adds	r7, #12
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr

0800ff64 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800ff64:	b480      	push	{r7}
 800ff66:	b083      	sub	sp, #12
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
 800ff6c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ff6e:	bf00      	nop
 800ff70:	370c      	adds	r7, #12
 800ff72:	46bd      	mov	sp, r7
 800ff74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff78:	4770      	bx	lr

0800ff7a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800ff7a:	b480      	push	{r7}
 800ff7c:	b083      	sub	sp, #12
 800ff7e:	af00      	add	r7, sp, #0
 800ff80:	6078      	str	r0, [r7, #4]
 800ff82:	460b      	mov	r3, r1
 800ff84:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800ff86:	bf00      	nop
 800ff88:	370c      	adds	r7, #12
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr

0800ff92 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800ff92:	b480      	push	{r7}
 800ff94:	b083      	sub	sp, #12
 800ff96:	af00      	add	r7, sp, #0
 800ff98:	6078      	str	r0, [r7, #4]
    {
    }
 800ff9a:	bf00      	nop
 800ff9c:	370c      	adds	r7, #12
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa4:	4770      	bx	lr

0800ffa6 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800ffa6:	b480      	push	{r7}
 800ffa8:	b083      	sub	sp, #12
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	6078      	str	r0, [r7, #4]
    {
    }
 800ffae:	bf00      	nop
 800ffb0:	370c      	adds	r7, #12
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb8:	4770      	bx	lr
	...

0800ffbc <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800ffbc:	b480      	push	{r7}
 800ffbe:	b083      	sub	sp, #12
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
    {
 800ffc4:	4a04      	ldr	r2, [pc, #16]	; (800ffd8 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	601a      	str	r2, [r3, #0]
    }
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	4618      	mov	r0, r3
 800ffce:	370c      	adds	r7, #12
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd6:	4770      	bx	lr
 800ffd8:	0802fc88 	.word	0x0802fc88

0800ffdc <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b082      	sub	sp, #8
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
    }
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f7ff ffe9 	bl	800ffbc <_ZN8touchgfx15UIEventListenerD1Ev>
 800ffea:	2104      	movs	r1, #4
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f01d fc3f 	bl	802d870 <_ZdlPvj>
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	4618      	mov	r0, r3
 800fff6:	3708      	adds	r7, #8
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}

0800fffc <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800fffc:	b480      	push	{r7}
 800fffe:	b083      	sub	sp, #12
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
    {
    }
 8010004:	bf00      	nop
 8010006:	370c      	adds	r7, #12
 8010008:	46bd      	mov	sp, r7
 801000a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000e:	4770      	bx	lr

08010010 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8010010:	b480      	push	{r7}
 8010012:	b083      	sub	sp, #12
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
 8010018:	460b      	mov	r3, r1
 801001a:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 801001c:	bf00      	nop
 801001e:	370c      	adds	r7, #12
 8010020:	46bd      	mov	sp, r7
 8010022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010026:	4770      	bx	lr

08010028 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8010028:	b480      	push	{r7}
 801002a:	b083      	sub	sp, #12
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
 8010030:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	683a      	ldr	r2, [r7, #0]
 8010036:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 801003a:	6810      	ldr	r0, [r2, #0]
 801003c:	6851      	ldr	r1, [r2, #4]
 801003e:	c303      	stmia	r3!, {r0, r1}
    }
 8010040:	bf00      	nop
 8010042:	370c      	adds	r7, #12
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr

0801004c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
    {
 8010054:	4a04      	ldr	r2, [pc, #16]	; (8010068 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	601a      	str	r2, [r3, #0]
    }
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	4618      	mov	r0, r3
 801005e:	370c      	adds	r7, #12
 8010060:	46bd      	mov	sp, r7
 8010062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010066:	4770      	bx	lr
 8010068:	0802fc70 	.word	0x0802fc70

0801006c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 801006c:	b580      	push	{r7, lr}
 801006e:	b082      	sub	sp, #8
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
    }
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f7ff ffe9 	bl	801004c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801007a:	2104      	movs	r1, #4
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	f01d fbf7 	bl	802d870 <_ZdlPvj>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	4618      	mov	r0, r3
 8010086:	3708      	adds	r7, #8
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}

0801008c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 801008c:	b480      	push	{r7}
 801008e:	af00      	add	r7, sp, #0
    {
        return instance;
 8010090:	4b03      	ldr	r3, [pc, #12]	; (80100a0 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8010092:	681b      	ldr	r3, [r3, #0]
    }
 8010094:	4618      	mov	r0, r3
 8010096:	46bd      	mov	sp, r7
 8010098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009c:	4770      	bx	lr
 801009e:	bf00      	nop
 80100a0:	2000f164 	.word	0x2000f164

080100a4 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 80100a4:	b480      	push	{r7}
 80100a6:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80100a8:	4b0b      	ldr	r3, [pc, #44]	; (80100d8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d008      	beq.n	80100c6 <_ZN8touchgfx3HAL3lcdEv+0x22>
 80100b4:	4b08      	ldr	r3, [pc, #32]	; (80100d8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d003      	beq.n	80100c6 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 80100be:	4b06      	ldr	r3, [pc, #24]	; (80100d8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80100c4:	e002      	b.n	80100cc <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 80100c6:	4b04      	ldr	r3, [pc, #16]	; (80100d8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	689b      	ldr	r3, [r3, #8]
    }
 80100cc:	4618      	mov	r0, r3
 80100ce:	46bd      	mov	sp, r7
 80100d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d4:	4770      	bx	lr
 80100d6:	bf00      	nop
 80100d8:	2000f164 	.word	0x2000f164

080100dc <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 80100dc:	b480      	push	{r7}
 80100de:	b083      	sub	sp, #12
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 80100e4:	4a07      	ldr	r2, [pc, #28]	; (8010104 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	601a      	str	r2, [r3, #0]
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2200      	movs	r2, #0
 80100ee:	605a      	str	r2, [r3, #4]
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2200      	movs	r2, #0
 80100f4:	721a      	strb	r2, [r3, #8]
    {
    }
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	4618      	mov	r0, r3
 80100fa:	370c      	adds	r7, #12
 80100fc:	46bd      	mov	sp, r7
 80100fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010102:	4770      	bx	lr
 8010104:	0802fc4c 	.word	0x0802fc4c

08010108 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8010108:	b480      	push	{r7}
 801010a:	b083      	sub	sp, #12
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
    {
 8010110:	4a04      	ldr	r2, [pc, #16]	; (8010124 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	601a      	str	r2, [r3, #0]
    }
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	4618      	mov	r0, r3
 801011a:	370c      	adds	r7, #12
 801011c:	46bd      	mov	sp, r7
 801011e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010122:	4770      	bx	lr
 8010124:	0802fc4c 	.word	0x0802fc4c

08010128 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8010128:	b580      	push	{r7, lr}
 801012a:	b082      	sub	sp, #8
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
    }
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f7ff ffe9 	bl	8010108 <_ZN8touchgfx10TransitionD1Ev>
 8010136:	210c      	movs	r1, #12
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f01d fb99 	bl	802d870 <_ZdlPvj>
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	4618      	mov	r0, r3
 8010142:	3708      	adds	r7, #8
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}

08010148 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8010148:	b480      	push	{r7}
 801014a:	b083      	sub	sp, #12
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
    {
    }
 8010150:	bf00      	nop
 8010152:	370c      	adds	r7, #12
 8010154:	46bd      	mov	sp, r7
 8010156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015a:	4770      	bx	lr

0801015c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 801015c:	b480      	push	{r7}
 801015e:	b083      	sub	sp, #12
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
    {
    }
 8010164:	bf00      	nop
 8010166:	370c      	adds	r7, #12
 8010168:	46bd      	mov	sp, r7
 801016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016e:	4770      	bx	lr

08010170 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8010170:	b480      	push	{r7}
 8010172:	b083      	sub	sp, #12
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
    {
    }
 8010178:	bf00      	nop
 801017a:	370c      	adds	r7, #12
 801017c:	46bd      	mov	sp, r7
 801017e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010182:	4770      	bx	lr

08010184 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8010184:	b580      	push	{r7, lr}
 8010186:	b082      	sub	sp, #8
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 801018c:	f00e f898 	bl	801e2c0 <_ZN8touchgfx11Application11getInstanceEv>
 8010190:	4603      	mov	r3, r0
 8010192:	4618      	mov	r0, r3
 8010194:	f00e fc38 	bl	801ea08 <_ZN8touchgfx11Application10invalidateEv>
    }
 8010198:	bf00      	nop
 801019a:	3708      	adds	r7, #8
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}

080101a0 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80101a0:	b480      	push	{r7}
 80101a2:	b083      	sub	sp, #12
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	683a      	ldr	r2, [r7, #0]
 80101ae:	605a      	str	r2, [r3, #4]
    }
 80101b0:	bf00      	nop
 80101b2:	370c      	adds	r7, #12
 80101b4:	46bd      	mov	sp, r7
 80101b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ba:	4770      	bx	lr

080101bc <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 80101bc:	b580      	push	{r7, lr}
 80101be:	b082      	sub	sp, #8
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
 80101c4:	4a05      	ldr	r2, [pc, #20]	; (80101dc <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	601a      	str	r2, [r3, #0]
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7ff fef5 	bl	800ffbc <_ZN8touchgfx15UIEventListenerD1Ev>
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	4618      	mov	r0, r3
 80101d6:	3708      	adds	r7, #8
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	08030a48 	.word	0x08030a48

080101e0 <_ZN8touchgfx11ApplicationD0Ev>:
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b082      	sub	sp, #8
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f7ff ffe7 	bl	80101bc <_ZN8touchgfx11ApplicationD1Ev>
 80101ee:	f44f 719c 	mov.w	r1, #312	; 0x138
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f01d fb3c 	bl	802d870 <_ZdlPvj>
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	4618      	mov	r0, r3
 80101fc:	3708      	adds	r7, #8
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}
	...

08010204 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8010204:	b580      	push	{r7, lr}
 8010206:	b082      	sub	sp, #8
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	4618      	mov	r0, r3
 8010210:	f00e f876 	bl	801e300 <_ZN8touchgfx11ApplicationC1Ev>
 8010214:	4a09      	ldr	r2, [pc, #36]	; (801023c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	601a      	str	r2, [r3, #0]
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2200      	movs	r2, #0
 801021e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2200      	movs	r2, #0
 8010226:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	4a04      	ldr	r2, [pc, #16]	; (8010240 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 801022e:	6013      	str	r3, [r2, #0]
    }
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	4618      	mov	r0, r3
 8010234:	3708      	adds	r7, #8
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
 801023a:	bf00      	nop
 801023c:	0802fc00 	.word	0x0802fc00
 8010240:	2000f1b8 	.word	0x2000f1b8

08010244 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8010244:	b580      	push	{r7, lr}
 8010246:	b082      	sub	sp, #8
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f000 f804 	bl	801025a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8010252:	bf00      	nop
 8010254:	3708      	adds	r7, #8
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}

0801025a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 801025a:	b580      	push	{r7, lr}
 801025c:	b082      	sub	sp, #8
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8010268:	2b00      	cmp	r3, #0
 801026a:	d00f      	beq.n	801028c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	330c      	adds	r3, #12
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	4610      	mov	r0, r2
 8010280:	4798      	blx	r3
 8010282:	4603      	mov	r3, r0
 8010284:	2b00      	cmp	r3, #0
 8010286:	d001      	beq.n	801028c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8010288:	2301      	movs	r3, #1
 801028a:	e000      	b.n	801028e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 801028c:	2300      	movs	r3, #0
 801028e:	2b00      	cmp	r3, #0
 8010290:	d00e      	beq.n	80102b0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	3308      	adds	r3, #8
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	4610      	mov	r0, r2
 80102a6:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2200      	movs	r2, #0
 80102ac:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 80102b0:	bf00      	nop
 80102b2:	3708      	adds	r7, #8
 80102b4:	46bd      	mov	sp, r7
 80102b6:	bd80      	pop	{r7, pc}

080102b8 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 80102b8:	b480      	push	{r7}
 80102ba:	b083      	sub	sp, #12
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	683a      	ldr	r2, [r7, #0]
 80102c6:	601a      	str	r2, [r3, #0]
    }
 80102c8:	bf00      	nop
 80102ca:	370c      	adds	r7, #12
 80102cc:	46bd      	mov	sp, r7
 80102ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d2:	4770      	bx	lr

080102d4 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b082      	sub	sp, #8
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
 80102dc:	4a05      	ldr	r2, [pc, #20]	; (80102f4 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	601a      	str	r2, [r3, #0]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7ff ff69 	bl	80101bc <_ZN8touchgfx11ApplicationD1Ev>
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	4618      	mov	r0, r3
 80102ee:	3708      	adds	r7, #8
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	0802fc00 	.word	0x0802fc00

080102f8 <_ZN8touchgfx14MVPApplicationD0Ev>:
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b082      	sub	sp, #8
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f7ff ffe7 	bl	80102d4 <_ZN8touchgfx14MVPApplicationD1Ev>
 8010306:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f01d fab0 	bl	802d870 <_ZdlPvj>
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	4618      	mov	r0, r3
 8010314:	3708      	adds	r7, #8
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}
	...

0801031c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 801031c:	b580      	push	{r7, lr}
 801031e:	b082      	sub	sp, #8
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
 8010324:	4a08      	ldr	r2, [pc, #32]	; (8010348 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	601a      	str	r2, [r3, #0]
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8010330:	4618      	mov	r0, r3
 8010332:	f000 facb 	bl	80108cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	4618      	mov	r0, r3
 801033a:	f7ff ffcb 	bl	80102d4 <_ZN8touchgfx14MVPApplicationD1Ev>
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	4618      	mov	r0, r3
 8010342:	3708      	adds	r7, #8
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}
 8010348:	0802fb9c 	.word	0x0802fb9c

0801034c <_ZN23FrontendApplicationBaseD0Ev>:
 801034c:	b580      	push	{r7, lr}
 801034e:	b082      	sub	sp, #8
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	f7ff ffe1 	bl	801031c <_ZN23FrontendApplicationBaseD1Ev>
 801035a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f01d fa86 	bl	802d870 <_ZdlPvj>
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	4618      	mov	r0, r3
 8010368:	3708      	adds	r7, #8
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}

0801036e <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 801036e:	b580      	push	{r7, lr}
 8010370:	b082      	sub	sp, #8
 8010372:	af00      	add	r7, sp, #0
 8010374:	6078      	str	r0, [r7, #4]
    {
        gotoScreen2ScreenNoTransition();
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f000 f87c 	bl	8010474 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
    }
 801037c:	bf00      	nop
 801037e:	3708      	adds	r7, #8
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}

08010384 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2201      	movs	r2, #1
 8010390:	721a      	strb	r2, [r3, #8]
    }
 8010392:	bf00      	nop
 8010394:	370c      	adds	r7, #12
 8010396:	46bd      	mov	sp, r7
 8010398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039c:	4770      	bx	lr

0801039e <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 801039e:	b480      	push	{r7}
 80103a0:	b083      	sub	sp, #12
 80103a2:	af00      	add	r7, sp, #0
 80103a4:	6078      	str	r0, [r7, #4]
 80103a6:	6039      	str	r1, [r7, #0]
    {
        model = m;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	683a      	ldr	r2, [r7, #0]
 80103ac:	605a      	str	r2, [r3, #4]
    }
 80103ae:	bf00      	nop
 80103b0:	370c      	adds	r7, #12
 80103b2:	46bd      	mov	sp, r7
 80103b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b8:	4770      	bx	lr
	...

080103bc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80103bc:	b580      	push	{r7, lr}
 80103be:	b084      	sub	sp, #16
 80103c0:	af00      	add	r7, sp, #0
 80103c2:	60f8      	str	r0, [r7, #12]
 80103c4:	60b9      	str	r1, [r7, #8]
 80103c6:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	4618      	mov	r0, r3
 80103cc:	f7ff ff1a 	bl	8010204 <_ZN8touchgfx14MVPApplicationC1Ev>
 80103d0:	4a13      	ldr	r2, [pc, #76]	; (8010420 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	601a      	str	r2, [r3, #0]
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80103dc:	4618      	mov	r0, r3
 80103de:	f000 f89f 	bl	8010520 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	687a      	ldr	r2, [r7, #4]
 80103e6:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	68ba      	ldr	r2, [r7, #8]
 80103ee:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80103f2:	f7ff fe4b 	bl	801008c <_ZN8touchgfx3HAL11getInstanceEv>
 80103f6:	4603      	mov	r3, r0
 80103f8:	681a      	ldr	r2, [r3, #0]
 80103fa:	3208      	adds	r2, #8
 80103fc:	6812      	ldr	r2, [r2, #0]
 80103fe:	2100      	movs	r1, #0
 8010400:	4618      	mov	r0, r3
 8010402:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8010404:	2000      	movs	r0, #0
 8010406:	f005 fd5f 	bl	8015ec8 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 801040a:	f7ff fe4b 	bl	80100a4 <_ZN8touchgfx3HAL3lcdEv>
 801040e:	4603      	mov	r3, r0
 8010410:	4618      	mov	r0, r3
 8010412:	f016 f81e 	bl	8026452 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	4618      	mov	r0, r3
 801041a:	3710      	adds	r7, #16
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}
 8010420:	0802fb9c 	.word	0x0802fb9c

08010424 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8010424:	b480      	push	{r7}
 8010426:	b083      	sub	sp, #12
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
 801042c:	6039      	str	r1, [r7, #0]
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	4618      	mov	r0, r3
 8010432:	370c      	adds	r7, #12
 8010434:	46bd      	mov	sp, r7
 8010436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043a:	4770      	bx	lr

0801043c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
 8010444:	6039      	str	r1, [r7, #0]
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	683a      	ldr	r2, [r7, #0]
 801044a:	4611      	mov	r1, r2
 801044c:	4618      	mov	r0, r3
 801044e:	f7ff ffe9 	bl	8010424 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	685a      	ldr	r2, [r3, #4]
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	605a      	str	r2, [r3, #4]
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	683a      	ldr	r2, [r7, #0]
 801045e:	3308      	adds	r3, #8
 8010460:	3208      	adds	r2, #8
 8010462:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010466:	e883 0003 	stmia.w	r3, {r0, r1}
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	4618      	mov	r0, r3
 801046e:	3708      	adds	r7, #8
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}

08010474 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:
 */

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenNoTransition()
{
 8010474:	b590      	push	{r4, r7, lr}
 8010476:	b089      	sub	sp, #36	; 0x24
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenNoTransitionImpl);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8010482:	4b10      	ldr	r3, [pc, #64]	; (80104c4 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x50>)
 8010484:	61bb      	str	r3, [r7, #24]
 8010486:	2300      	movs	r3, #0
 8010488:	61fb      	str	r3, [r7, #28]
 801048a:	f107 0008 	add.w	r0, r7, #8
 801048e:	f107 0318 	add.w	r3, r7, #24
 8010492:	cb0c      	ldmia	r3, {r2, r3}
 8010494:	6879      	ldr	r1, [r7, #4]
 8010496:	f000 f85f 	bl	8010558 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801049a:	f107 0308 	add.w	r3, r7, #8
 801049e:	4619      	mov	r1, r3
 80104a0:	4620      	mov	r0, r4
 80104a2:	f7ff ffcb 	bl	801043c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 80104a6:	f107 0308 	add.w	r3, r7, #8
 80104aa:	4618      	mov	r0, r3
 80104ac:	f000 fa0e 	bl	80108cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80104bc:	bf00      	nop
 80104be:	3724      	adds	r7, #36	; 0x24
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd90      	pop	{r4, r7, pc}
 80104c4:	080104c9 	.word	0x080104c9

080104c8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b084      	sub	sp, #16
 80104cc:	af02      	add	r7, sp, #8
 80104ce:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80104dc:	461a      	mov	r2, r3
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80104e4:	9300      	str	r3, [sp, #0]
 80104e6:	4b04      	ldr	r3, [pc, #16]	; (80104f8 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x30>)
 80104e8:	4804      	ldr	r0, [pc, #16]	; (80104fc <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x34>)
 80104ea:	f000 f867 	bl	80105bc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80104ee:	bf00      	nop
 80104f0:	3708      	adds	r7, #8
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
 80104f6:	bf00      	nop
 80104f8:	2000f1ac 	.word	0x2000f1ac
 80104fc:	2000f1a8 	.word	0x2000f1a8

08010500 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8010500:	b480      	push	{r7}
 8010502:	b083      	sub	sp, #12
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
 8010508:	4a04      	ldr	r2, [pc, #16]	; (801051c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	601a      	str	r2, [r3, #0]
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	4618      	mov	r0, r3
 8010512:	370c      	adds	r7, #12
 8010514:	46bd      	mov	sp, r7
 8010516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051a:	4770      	bx	lr
 801051c:	0802fc70 	.word	0x0802fc70

08010520 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 8010520:	b580      	push	{r7, lr}
 8010522:	b082      	sub	sp, #8
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	4618      	mov	r0, r3
 801052c:	f7ff ffe8 	bl	8010500 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8010530:	4a08      	ldr	r2, [pc, #32]	; (8010554 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	601a      	str	r2, [r3, #0]
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	2200      	movs	r2, #0
 801053a:	605a      	str	r2, [r3, #4]
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2200      	movs	r2, #0
 8010540:	609a      	str	r2, [r3, #8]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2200      	movs	r2, #0
 8010546:	60da      	str	r2, [r3, #12]
    {
    }
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	4618      	mov	r0, r3
 801054c:	3708      	adds	r7, #8
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}
 8010552:	bf00      	nop
 8010554:	0802fbe8 	.word	0x0802fbe8

08010558 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8010558:	b580      	push	{r7, lr}
 801055a:	b084      	sub	sp, #16
 801055c:	af00      	add	r7, sp, #0
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	60b9      	str	r1, [r7, #8]
 8010562:	4639      	mov	r1, r7
 8010564:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	4618      	mov	r0, r3
 801056c:	f7ff ffc8 	bl	8010500 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8010570:	4a08      	ldr	r2, [pc, #32]	; (8010594 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	601a      	str	r2, [r3, #0]
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	68ba      	ldr	r2, [r7, #8]
 801057a:	605a      	str	r2, [r3, #4]
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	3308      	adds	r3, #8
 8010580:	463a      	mov	r2, r7
 8010582:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010586:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	4618      	mov	r0, r3
 801058e:	3710      	adds	r7, #16
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}
 8010594:	0802fbe8 	.word	0x0802fbe8

08010598 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8010598:	b580      	push	{r7, lr}
 801059a:	b082      	sub	sp, #8
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	4618      	mov	r0, r3
 80105a4:	f7ff fd9a 	bl	80100dc <_ZN8touchgfx10TransitionC1Ev>
 80105a8:	4a03      	ldr	r2, [pc, #12]	; (80105b8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	601a      	str	r2, [r3, #0]
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	4618      	mov	r0, r3
 80105b2:	3708      	adds	r7, #8
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}
 80105b8:	0802fb78 	.word	0x0802fb78

080105bc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80105bc:	b590      	push	{r4, r7, lr}
 80105be:	b08f      	sub	sp, #60	; 0x3c
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	60f8      	str	r0, [r7, #12]
 80105c4:	60b9      	str	r1, [r7, #8]
 80105c6:	607a      	str	r2, [r7, #4]
 80105c8:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	689a      	ldr	r2, [r3, #8]
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	689b      	ldr	r3, [r3, #8]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	3320      	adds	r3, #32
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	4610      	mov	r0, r2
 80105da:	4798      	blx	r3
 80105dc:	4603      	mov	r3, r0
 80105de:	f246 5263 	movw	r2, #25955	; 0x6563
 80105e2:	4293      	cmp	r3, r2
 80105e4:	d805      	bhi.n	80105f2 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 80105e6:	4b7f      	ldr	r3, [pc, #508]	; (80107e4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80105e8:	4a7f      	ldr	r2, [pc, #508]	; (80107e8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80105ea:	21a3      	movs	r1, #163	; 0xa3
 80105ec:	487f      	ldr	r0, [pc, #508]	; (80107ec <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80105ee:	f01d f96d 	bl	802d8cc <__assert_func>
 80105f2:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	685a      	ldr	r2, [r3, #4]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	685b      	ldr	r3, [r3, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	3320      	adds	r3, #32
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	4610      	mov	r0, r2
 8010604:	4798      	blx	r3
 8010606:	4603      	mov	r3, r0
 8010608:	2b0f      	cmp	r3, #15
 801060a:	d805      	bhi.n	8010618 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 801060c:	4b78      	ldr	r3, [pc, #480]	; (80107f0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 801060e:	4a76      	ldr	r2, [pc, #472]	; (80107e8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8010610:	21a4      	movs	r1, #164	; 0xa4
 8010612:	4876      	ldr	r0, [pc, #472]	; (80107ec <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8010614:	f01d f95a 	bl	802d8cc <__assert_func>
 8010618:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	68da      	ldr	r2, [r3, #12]
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	68db      	ldr	r3, [r3, #12]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	3320      	adds	r3, #32
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	4610      	mov	r0, r2
 801062a:	4798      	blx	r3
 801062c:	4603      	mov	r3, r0
 801062e:	2b0b      	cmp	r3, #11
 8010630:	d805      	bhi.n	801063e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 8010632:	4b70      	ldr	r3, [pc, #448]	; (80107f4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8010634:	4a6c      	ldr	r2, [pc, #432]	; (80107e8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8010636:	21a5      	movs	r1, #165	; 0xa5
 8010638:	486c      	ldr	r0, [pc, #432]	; (80107ec <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 801063a:	f01d f947 	bl	802d8cc <__assert_func>
 801063e:	bf00      	nop
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	62bb      	str	r3, [r7, #40]	; 0x28
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	627b      	str	r3, [r7, #36]	; 0x24
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 801064c:	f00d fe38 	bl	801e2c0 <_ZN8touchgfx11Application11getInstanceEv>
 8010650:	4603      	mov	r3, r0
 8010652:	4618      	mov	r0, r3
 8010654:	f00d fe3a 	bl	801e2cc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8010658:	6a3b      	ldr	r3, [r7, #32]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d008      	beq.n	8010672 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 8010660:	6a3b      	ldr	r3, [r7, #32]
 8010662:	681a      	ldr	r2, [r3, #0]
 8010664:	6a3b      	ldr	r3, [r7, #32]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	330c      	adds	r3, #12
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	4610      	mov	r0, r2
 8010670:	4798      	blx	r3
    if (*currentTrans)
 8010672:	6a3b      	ldr	r3, [r7, #32]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d007      	beq.n	801068a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 801067a:	6a3b      	ldr	r3, [r7, #32]
 801067c:	681a      	ldr	r2, [r3, #0]
 801067e:	6a3b      	ldr	r3, [r7, #32]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	4610      	mov	r0, r2
 8010688:	4798      	blx	r3
    if (*currentScreen)
 801068a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d008      	beq.n	80106a4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 8010692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010694:	681a      	ldr	r2, [r3, #0]
 8010696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	3314      	adds	r3, #20
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	4610      	mov	r0, r2
 80106a2:	4798      	blx	r3
    if (*currentPresenter)
 80106a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d008      	beq.n	80106be <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 80106ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ae:	681a      	ldr	r2, [r3, #0]
 80106b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	3304      	adds	r3, #4
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	4610      	mov	r0, r2
 80106bc:	4798      	blx	r3
    if (*currentScreen)
 80106be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d007      	beq.n	80106d6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 80106c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c8:	681a      	ldr	r2, [r3, #0]
 80106ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	4610      	mov	r0, r2
 80106d4:	4798      	blx	r3
    if (*currentPresenter)
 80106d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d008      	beq.n	80106f0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 80106de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e0:	681a      	ldr	r2, [r3, #0]
 80106e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	3308      	adds	r3, #8
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	4610      	mov	r0, r2
 80106ee:	4798      	blx	r3
}
 80106f0:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	68db      	ldr	r3, [r3, #12]
 80106f6:	2100      	movs	r1, #0
 80106f8:	4618      	mov	r0, r3
 80106fa:	f000 f87d 	bl	80107f8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80106fe:	4603      	mov	r3, r0
 8010700:	4619      	mov	r1, r3
 8010702:	200c      	movs	r0, #12
 8010704:	f7ff fc0c 	bl	800ff20 <_ZnwjPv>
 8010708:	4604      	mov	r4, r0
 801070a:	4620      	mov	r0, r4
 801070c:	f7ff ff44 	bl	8010598 <_ZN8touchgfx12NoTransitionC1Ev>
 8010710:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	689b      	ldr	r3, [r3, #8]
 8010716:	2100      	movs	r1, #0
 8010718:	4618      	mov	r0, r3
 801071a:	f000 f880 	bl	801081e <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 801071e:	4603      	mov	r3, r0
 8010720:	4619      	mov	r1, r3
 8010722:	f246 5064 	movw	r0, #25956	; 0x6564
 8010726:	f7ff fbfb 	bl	800ff20 <_ZnwjPv>
 801072a:	4604      	mov	r4, r0
 801072c:	4620      	mov	r0, r4
 801072e:	f006 ffeb 	bl	8017708 <_ZN11Screen2ViewC1Ev>
 8010732:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	685b      	ldr	r3, [r3, #4]
 8010738:	2100      	movs	r1, #0
 801073a:	4618      	mov	r0, r3
 801073c:	f000 f882 	bl	8010844 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 8010740:	4603      	mov	r3, r0
 8010742:	4619      	mov	r1, r3
 8010744:	2010      	movs	r0, #16
 8010746:	f7ff fbeb 	bl	800ff20 <_ZnwjPv>
 801074a:	4604      	mov	r4, r0
 801074c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801074e:	4620      	mov	r0, r4
 8010750:	f006 ff82 	bl	8017658 <_ZN16Screen2PresenterC1ER11Screen2View>
 8010754:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801075a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010760:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010766:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8010768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801076a:	2b00      	cmp	r3, #0
 801076c:	d002      	beq.n	8010774 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 801076e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010770:	3304      	adds	r3, #4
 8010772:	e000      	b.n	8010776 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8010774:	2300      	movs	r3, #0
 8010776:	4619      	mov	r1, r3
 8010778:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801077a:	f7ff fd9d 	bl	80102b8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801077e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010780:	3304      	adds	r3, #4
 8010782:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010784:	4618      	mov	r0, r3
 8010786:	f7ff fe0a 	bl	801039e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801078a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801078c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801078e:	4618      	mov	r0, r3
 8010790:	f000 f86b 	bl	801086a <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 8010794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010796:	61fb      	str	r3, [r7, #28]
 8010798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801079a:	61bb      	str	r3, [r7, #24]
 801079c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801079e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80107a0:	69fb      	ldr	r3, [r7, #28]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	330c      	adds	r3, #12
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	69f8      	ldr	r0, [r7, #28]
 80107aa:	4798      	blx	r3
    newPresenter->activate();
 80107ac:	69bb      	ldr	r3, [r7, #24]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	69b8      	ldr	r0, [r7, #24]
 80107b4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80107b6:	6979      	ldr	r1, [r7, #20]
 80107b8:	69f8      	ldr	r0, [r7, #28]
 80107ba:	f00f fa27 	bl	801fc0c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	3310      	adds	r3, #16
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	6978      	ldr	r0, [r7, #20]
 80107c8:	4798      	blx	r3
    newTransition->invalidate();
 80107ca:	697b      	ldr	r3, [r7, #20]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	3314      	adds	r3, #20
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	6978      	ldr	r0, [r7, #20]
 80107d4:	4798      	blx	r3
}
 80107d6:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80107d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80107da:	4618      	mov	r0, r3
 80107dc:	373c      	adds	r7, #60	; 0x3c
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd90      	pop	{r4, r7, pc}
 80107e2:	bf00      	nop
 80107e4:	0802eb8c 	.word	0x0802eb8c
 80107e8:	0802ec1c 	.word	0x0802ec1c
 80107ec:	0802ed20 	.word	0x0802ed20
 80107f0:	0802ed64 	.word	0x0802ed64
 80107f4:	0802ee08 	.word	0x0802ee08

080107f8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b082      	sub	sp, #8
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	460b      	mov	r3, r1
 8010802:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	3324      	adds	r3, #36	; 0x24
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	887a      	ldrh	r2, [r7, #2]
 801080e:	4611      	mov	r1, r2
 8010810:	6878      	ldr	r0, [r7, #4]
 8010812:	4798      	blx	r3
 8010814:	4603      	mov	r3, r0
    }
 8010816:	4618      	mov	r0, r3
 8010818:	3708      	adds	r7, #8
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}

0801081e <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 801081e:	b580      	push	{r7, lr}
 8010820:	b082      	sub	sp, #8
 8010822:	af00      	add	r7, sp, #0
 8010824:	6078      	str	r0, [r7, #4]
 8010826:	460b      	mov	r3, r1
 8010828:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	3324      	adds	r3, #36	; 0x24
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	887a      	ldrh	r2, [r7, #2]
 8010834:	4611      	mov	r1, r2
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	4798      	blx	r3
 801083a:	4603      	mov	r3, r0
    }
 801083c:	4618      	mov	r0, r3
 801083e:	3708      	adds	r7, #8
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}

08010844 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 8010844:	b580      	push	{r7, lr}
 8010846:	b082      	sub	sp, #8
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
 801084c:	460b      	mov	r3, r1
 801084e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	3324      	adds	r3, #36	; 0x24
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	887a      	ldrh	r2, [r7, #2]
 801085a:	4611      	mov	r1, r2
 801085c:	6878      	ldr	r0, [r7, #4]
 801085e:	4798      	blx	r3
 8010860:	4603      	mov	r3, r0
    }
 8010862:	4618      	mov	r0, r3
 8010864:	3708      	adds	r7, #8
 8010866:	46bd      	mov	sp, r7
 8010868:	bd80      	pop	{r7, pc}

0801086a <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 801086a:	b480      	push	{r7}
 801086c:	b083      	sub	sp, #12
 801086e:	af00      	add	r7, sp, #0
 8010870:	6078      	str	r0, [r7, #4]
 8010872:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	683a      	ldr	r2, [r7, #0]
 8010878:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801087a:	bf00      	nop
 801087c:	370c      	adds	r7, #12
 801087e:	46bd      	mov	sp, r7
 8010880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010884:	4770      	bx	lr
	...

08010888 <_ZN8touchgfx12NoTransitionD1Ev>:
 8010888:	b580      	push	{r7, lr}
 801088a:	b082      	sub	sp, #8
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	4a05      	ldr	r2, [pc, #20]	; (80108a8 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	601a      	str	r2, [r3, #0]
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	4618      	mov	r0, r3
 801089a:	f7ff fc35 	bl	8010108 <_ZN8touchgfx10TransitionD1Ev>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	4618      	mov	r0, r3
 80108a2:	3708      	adds	r7, #8
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}
 80108a8:	0802fb78 	.word	0x0802fb78

080108ac <_ZN8touchgfx12NoTransitionD0Ev>:
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b082      	sub	sp, #8
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f7ff ffe7 	bl	8010888 <_ZN8touchgfx12NoTransitionD1Ev>
 80108ba:	210c      	movs	r1, #12
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f01c ffd7 	bl	802d870 <_ZdlPvj>
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	4618      	mov	r0, r3
 80108c6:	3708      	adds	r7, #8
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b082      	sub	sp, #8
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
 80108d4:	4a05      	ldr	r2, [pc, #20]	; (80108ec <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	601a      	str	r2, [r3, #0]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	4618      	mov	r0, r3
 80108de:	f7ff fbb5 	bl	801004c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	4618      	mov	r0, r3
 80108e6:	3708      	adds	r7, #8
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}
 80108ec:	0802fbe8 	.word	0x0802fbe8

080108f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b082      	sub	sp, #8
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f7ff ffe7 	bl	80108cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80108fe:	2110      	movs	r1, #16
 8010900:	6878      	ldr	r0, [r7, #4]
 8010902:	f01c ffb5 	bl	802d870 <_ZdlPvj>
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	4618      	mov	r0, r3
 801090a:	3708      	adds	r7, #8
 801090c:	46bd      	mov	sp, r7
 801090e:	bd80      	pop	{r7, pc}

08010910 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8010910:	b580      	push	{r7, lr}
 8010912:	b082      	sub	sp, #8
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	685b      	ldr	r3, [r3, #4]
 801091c:	687a      	ldr	r2, [r7, #4]
 801091e:	68d2      	ldr	r2, [r2, #12]
 8010920:	1052      	asrs	r2, r2, #1
 8010922:	1899      	adds	r1, r3, r2
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	68db      	ldr	r3, [r3, #12]
 8010928:	f003 0301 	and.w	r3, r3, #1
 801092c:	2b00      	cmp	r3, #0
 801092e:	d102      	bne.n	8010936 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	689b      	ldr	r3, [r3, #8]
 8010934:	e00a      	b.n	801094c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	685b      	ldr	r3, [r3, #4]
 801093a:	687a      	ldr	r2, [r7, #4]
 801093c:	68d2      	ldr	r2, [r2, #12]
 801093e:	1052      	asrs	r2, r2, #1
 8010940:	4413      	add	r3, r2
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	687a      	ldr	r2, [r7, #4]
 8010946:	6892      	ldr	r2, [r2, #8]
 8010948:	4413      	add	r3, r2
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	4608      	mov	r0, r1
 801094e:	4798      	blx	r3
    }
 8010950:	bf00      	nop
 8010952:	3708      	adds	r7, #8
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}

08010958 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8010958:	b480      	push	{r7}
 801095a:	b083      	sub	sp, #12
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	685b      	ldr	r3, [r3, #4]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d010      	beq.n	801098a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	689b      	ldr	r3, [r3, #8]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d107      	bne.n	8010980 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	68db      	ldr	r3, [r3, #12]
 8010974:	f003 0301 	and.w	r3, r3, #1
 8010978:	2b00      	cmp	r3, #0
 801097a:	d101      	bne.n	8010980 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801097c:	2301      	movs	r3, #1
 801097e:	e000      	b.n	8010982 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8010980:	2300      	movs	r3, #0
 8010982:	2b01      	cmp	r3, #1
 8010984:	d001      	beq.n	801098a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8010986:	2301      	movs	r3, #1
 8010988:	e000      	b.n	801098c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 801098a:	2300      	movs	r3, #0
    }
 801098c:	4618      	mov	r0, r3
 801098e:	370c      	adds	r7, #12
 8010990:	46bd      	mov	sp, r7
 8010992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010996:	4770      	bx	lr

08010998 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 8010998:	b480      	push	{r7}
 801099a:	b083      	sub	sp, #12
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
 80109a0:	6039      	str	r1, [r7, #0]
        : color(col)
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	683a      	ldr	r2, [r7, #0]
 80109a6:	601a      	str	r2, [r3, #0]
    {
    }
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	4618      	mov	r0, r3
 80109ac:	370c      	adds	r7, #12
 80109ae:	46bd      	mov	sp, r7
 80109b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b4:	4770      	bx	lr

080109b6 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 80109b6:	b480      	push	{r7}
 80109b8:	b083      	sub	sp, #12
 80109ba:	af00      	add	r7, sp, #0
 80109bc:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2200      	movs	r2, #0
 80109c2:	801a      	strh	r2, [r3, #0]
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2200      	movs	r2, #0
 80109c8:	805a      	strh	r2, [r3, #2]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2200      	movs	r2, #0
 80109ce:	809a      	strh	r2, [r3, #4]
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2200      	movs	r2, #0
 80109d4:	80da      	strh	r2, [r3, #6]
    {
    }
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	4618      	mov	r0, r3
 80109da:	370c      	adds	r7, #12
 80109dc:	46bd      	mov	sp, r7
 80109de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e2:	4770      	bx	lr

080109e4 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 80109e4:	b480      	push	{r7}
 80109e6:	b085      	sub	sp, #20
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	4608      	mov	r0, r1
 80109ee:	4611      	mov	r1, r2
 80109f0:	461a      	mov	r2, r3
 80109f2:	4603      	mov	r3, r0
 80109f4:	817b      	strh	r3, [r7, #10]
 80109f6:	460b      	mov	r3, r1
 80109f8:	813b      	strh	r3, [r7, #8]
 80109fa:	4613      	mov	r3, r2
 80109fc:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	897a      	ldrh	r2, [r7, #10]
 8010a02:	801a      	strh	r2, [r3, #0]
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	893a      	ldrh	r2, [r7, #8]
 8010a08:	805a      	strh	r2, [r3, #2]
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	88fa      	ldrh	r2, [r7, #6]
 8010a0e:	809a      	strh	r2, [r3, #4]
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	8b3a      	ldrh	r2, [r7, #24]
 8010a14:	80da      	strh	r2, [r3, #6]
    {
    }
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	4618      	mov	r0, r3
 8010a1a:	3714      	adds	r7, #20
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr

08010a24 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b082      	sub	sp, #8
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8010a2c:	4a14      	ldr	r2, [pc, #80]	; (8010a80 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	601a      	str	r2, [r3, #0]
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	3304      	adds	r3, #4
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7ff ffbd 	bl	80109b6 <_ZN8touchgfx4RectC1Ev>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	330c      	adds	r3, #12
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7ff ffb8 	bl	80109b6 <_ZN8touchgfx4RectC1Ev>
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	2200      	movs	r2, #0
 8010a4a:	615a      	str	r2, [r3, #20]
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2200      	movs	r2, #0
 8010a50:	619a      	str	r2, [r3, #24]
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2200      	movs	r2, #0
 8010a56:	61da      	str	r2, [r3, #28]
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	841a      	strh	r2, [r3, #32]
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2200      	movs	r2, #0
 8010a62:	845a      	strh	r2, [r3, #34]	; 0x22
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	2200      	movs	r2, #0
 8010a68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2201      	movs	r2, #1
 8010a70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	4618      	mov	r0, r3
 8010a78:	3708      	adds	r7, #8
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}
 8010a7e:	bf00      	nop
 8010a80:	08030a94 	.word	0x08030a94

08010a84 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8010a84:	b480      	push	{r7}
 8010a86:	b083      	sub	sp, #12
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
    {
 8010a8c:	4a04      	ldr	r2, [pc, #16]	; (8010aa0 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	601a      	str	r2, [r3, #0]
    }
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	4618      	mov	r0, r3
 8010a96:	370c      	adds	r7, #12
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9e:	4770      	bx	lr
 8010aa0:	08030a94 	.word	0x08030a94

08010aa4 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b082      	sub	sp, #8
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
    }
 8010aac:	6878      	ldr	r0, [r7, #4]
 8010aae:	f7ff ffe9 	bl	8010a84 <_ZN8touchgfx8DrawableD1Ev>
 8010ab2:	2128      	movs	r1, #40	; 0x28
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	f01c fedb 	bl	802d870 <_ZdlPvj>
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	4618      	mov	r0, r3
 8010abe:	3708      	adds	r7, #8
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}

08010ac4 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d005      	beq.n	8010ae2 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	3314      	adds	r3, #20
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	4798      	blx	r3
        }
    }
 8010ae2:	bf00      	nop
 8010ae4:	3708      	adds	r7, #8
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}

08010aea <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8010aea:	b480      	push	{r7}
 8010aec:	b083      	sub	sp, #12
 8010aee:	af00      	add	r7, sp, #0
 8010af0:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8010af2:	2300      	movs	r3, #0
    }
 8010af4:	4618      	mov	r0, r3
 8010af6:	370c      	adds	r7, #12
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr

08010b00 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8010b00:	b480      	push	{r7}
 8010b02:	b083      	sub	sp, #12
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
 8010b08:	460b      	mov	r3, r1
 8010b0a:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	887a      	ldrh	r2, [r7, #2]
 8010b10:	809a      	strh	r2, [r3, #4]
    }
 8010b12:	bf00      	nop
 8010b14:	370c      	adds	r7, #12
 8010b16:	46bd      	mov	sp, r7
 8010b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b1c:	4770      	bx	lr

08010b1e <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8010b1e:	b480      	push	{r7}
 8010b20:	b083      	sub	sp, #12
 8010b22:	af00      	add	r7, sp, #0
 8010b24:	6078      	str	r0, [r7, #4]
 8010b26:	460b      	mov	r3, r1
 8010b28:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	887a      	ldrh	r2, [r7, #2]
 8010b2e:	80da      	strh	r2, [r3, #6]
    }
 8010b30:	bf00      	nop
 8010b32:	370c      	adds	r7, #12
 8010b34:	46bd      	mov	sp, r7
 8010b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3a:	4770      	bx	lr

08010b3c <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b082      	sub	sp, #8
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
 8010b44:	460b      	mov	r3, r1
 8010b46:	807b      	strh	r3, [r7, #2]
 8010b48:	4613      	mov	r3, r2
 8010b4a:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	3330      	adds	r3, #48	; 0x30
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010b58:	4611      	mov	r1, r2
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	4798      	blx	r3
        setY(y);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	3334      	adds	r3, #52	; 0x34
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	f9b7 2000 	ldrsh.w	r2, [r7]
 8010b6a:	4611      	mov	r1, r2
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	4798      	blx	r3
    }
 8010b70:	bf00      	nop
 8010b72:	3708      	adds	r7, #8
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}

08010b78 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8010b78:	b480      	push	{r7}
 8010b7a:	b083      	sub	sp, #12
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	460b      	mov	r3, r1
 8010b82:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	887a      	ldrh	r2, [r7, #2]
 8010b88:	811a      	strh	r2, [r3, #8]
    }
 8010b8a:	bf00      	nop
 8010b8c:	370c      	adds	r7, #12
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b94:	4770      	bx	lr

08010b96 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8010b96:	b480      	push	{r7}
 8010b98:	b083      	sub	sp, #12
 8010b9a:	af00      	add	r7, sp, #0
 8010b9c:	6078      	str	r0, [r7, #4]
 8010b9e:	460b      	mov	r3, r1
 8010ba0:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	887a      	ldrh	r2, [r7, #2]
 8010ba6:	815a      	strh	r2, [r3, #10]
    }
 8010ba8:	bf00      	nop
 8010baa:	370c      	adds	r7, #12
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr

08010bb4 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8010bb4:	b480      	push	{r7}
 8010bb6:	b083      	sub	sp, #12
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
    {
    }
 8010bbc:	bf00      	nop
 8010bbe:	370c      	adds	r7, #12
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc6:	4770      	bx	lr

08010bc8 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8010bc8:	b480      	push	{r7}
 8010bca:	b083      	sub	sp, #12
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8010bd2:	bf00      	nop
 8010bd4:	370c      	adds	r7, #12
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bdc:	4770      	bx	lr

08010bde <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8010bde:	b480      	push	{r7}
 8010be0:	b083      	sub	sp, #12
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	6078      	str	r0, [r7, #4]
 8010be6:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8010be8:	bf00      	nop
 8010bea:	370c      	adds	r7, #12
 8010bec:	46bd      	mov	sp, r7
 8010bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf2:	4770      	bx	lr

08010bf4 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8010bf4:	b480      	push	{r7}
 8010bf6:	b083      	sub	sp, #12
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8010bfe:	bf00      	nop
 8010c00:	370c      	adds	r7, #12
 8010c02:	46bd      	mov	sp, r7
 8010c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c08:	4770      	bx	lr

08010c0a <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8010c0a:	b480      	push	{r7}
 8010c0c:	b083      	sub	sp, #12
 8010c0e:	af00      	add	r7, sp, #0
 8010c10:	6078      	str	r0, [r7, #4]
    {
    }
 8010c12:	bf00      	nop
 8010c14:	370c      	adds	r7, #12
 8010c16:	46bd      	mov	sp, r7
 8010c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1c:	4770      	bx	lr

08010c1e <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8010c1e:	b480      	push	{r7}
 8010c20:	b083      	sub	sp, #12
 8010c22:	af00      	add	r7, sp, #0
 8010c24:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	370c      	adds	r7, #12
 8010c30:	46bd      	mov	sp, r7
 8010c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c36:	4770      	bx	lr

08010c38 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8010c38:	b480      	push	{r7}
 8010c3a:	b083      	sub	sp, #12
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8010c46:	4618      	mov	r0, r3
 8010c48:	370c      	adds	r7, #12
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr

08010c52 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8010c52:	b580      	push	{r7, lr}
 8010c54:	b082      	sub	sp, #8
 8010c56:	af00      	add	r7, sp, #0
 8010c58:	6078      	str	r0, [r7, #4]
 8010c5a:	460b      	mov	r3, r1
 8010c5c:	807b      	strh	r3, [r7, #2]
 8010c5e:	4613      	mov	r3, r2
 8010c60:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	3354      	adds	r3, #84	; 0x54
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	8879      	ldrh	r1, [r7, #2]
 8010c6c:	687a      	ldr	r2, [r7, #4]
 8010c6e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8010c72:	b292      	uxth	r2, r2
 8010c74:	1a8a      	subs	r2, r1, r2
 8010c76:	b292      	uxth	r2, r2
 8010c78:	b210      	sxth	r0, r2
 8010c7a:	8839      	ldrh	r1, [r7, #0]
 8010c7c:	687a      	ldr	r2, [r7, #4]
 8010c7e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8010c82:	b292      	uxth	r2, r2
 8010c84:	1a8a      	subs	r2, r1, r2
 8010c86:	b292      	uxth	r2, r2
 8010c88:	b212      	sxth	r2, r2
 8010c8a:	4601      	mov	r1, r0
 8010c8c:	6878      	ldr	r0, [r7, #4]
 8010c8e:	4798      	blx	r3
    }
 8010c90:	bf00      	nop
 8010c92:	3708      	adds	r7, #8
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}

08010c98 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8010c98:	b480      	push	{r7}
 8010c9a:	b083      	sub	sp, #12
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010ca6:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cae:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cb6:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8010cb8:	bf00      	nop
 8010cba:	370c      	adds	r7, #12
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc2:	4770      	bx	lr

08010cc4 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b084      	sub	sp, #16
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	60f8      	str	r0, [r7, #12]
 8010ccc:	60b9      	str	r1, [r7, #8]
 8010cce:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 8010cd0:	68f8      	ldr	r0, [r7, #12]
 8010cd2:	f7ff ffe1 	bl	8010c98 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681a      	ldr	r2, [r3, #0]
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	68fa      	ldr	r2, [r7, #12]
 8010ce2:	601a      	str	r2, [r3, #0]
    }
 8010ce4:	bf00      	nop
 8010ce6:	3710      	adds	r7, #16
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}

08010cec <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b082      	sub	sp, #8
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f7ff fe94 	bl	8010a24 <_ZN8touchgfx8DrawableC1Ev>
 8010cfc:	4a05      	ldr	r2, [pc, #20]	; (8010d14 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	601a      	str	r2, [r3, #0]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2200      	movs	r2, #0
 8010d06:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	3708      	adds	r7, #8
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	bd80      	pop	{r7, pc}
 8010d12:	bf00      	nop
 8010d14:	08030424 	.word	0x08030424

08010d18 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 8010d18:	b480      	push	{r7}
 8010d1a:	b083      	sub	sp, #12
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8010d24:	4618      	mov	r0, r3
 8010d26:	370c      	adds	r7, #12
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2e:	4770      	bx	lr

08010d30 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 8010d30:	b480      	push	{r7}
 8010d32:	b083      	sub	sp, #12
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	460b      	mov	r3, r1
 8010d3a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8010d3c:	4a06      	ldr	r2, [pc, #24]	; (8010d58 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	601a      	str	r2, [r3, #0]
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	887a      	ldrh	r2, [r7, #2]
 8010d46:	809a      	strh	r2, [r3, #4]
    }
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	370c      	adds	r7, #12
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d54:	4770      	bx	lr
 8010d56:	bf00      	nop
 8010d58:	0802fb10 	.word	0x0802fb10

08010d5c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b084      	sub	sp, #16
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	60f8      	str	r0, [r7, #12]
 8010d64:	607b      	str	r3, [r7, #4]
 8010d66:	460b      	mov	r3, r1
 8010d68:	817b      	strh	r3, [r7, #10]
 8010d6a:	4613      	mov	r3, r2
 8010d6c:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7ff ff54 	bl	8010c1e <_ZNK8touchgfx8Drawable9isVisibleEv>
 8010d76:	4603      	mov	r3, r0
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d008      	beq.n	8010d8e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f7ff ff5a 	bl	8010c38 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8010d84:	4603      	mov	r3, r0
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d001      	beq.n	8010d8e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	e000      	b.n	8010d90 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8010d8e:	2300      	movs	r3, #0
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d002      	beq.n	8010d9a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8010d94:	68fa      	ldr	r2, [r7, #12]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	601a      	str	r2, [r3, #0]
        }
    }
 8010d9a:	bf00      	nop
 8010d9c:	3710      	adds	r7, #16
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}
	...

08010da4 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b082      	sub	sp, #8
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	4618      	mov	r0, r3
 8010db0:	f7ff fe38 	bl	8010a24 <_ZN8touchgfx8DrawableC1Ev>
 8010db4:	4a03      	ldr	r2, [pc, #12]	; (8010dc4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	601a      	str	r2, [r3, #0]
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3708      	adds	r7, #8
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}
 8010dc4:	0802fdd4 	.word	0x0802fdd4

08010dc8 <_ZN8touchgfx6WidgetD1Ev>:
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b082      	sub	sp, #8
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
 8010dd0:	4a05      	ldr	r2, [pc, #20]	; (8010de8 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	601a      	str	r2, [r3, #0]
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7ff fe53 	bl	8010a84 <_ZN8touchgfx8DrawableD1Ev>
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	4618      	mov	r0, r3
 8010de2:	3708      	adds	r7, #8
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}
 8010de8:	0802fdd4 	.word	0x0802fdd4

08010dec <_ZN8touchgfx6WidgetD0Ev>:
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b082      	sub	sp, #8
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f7ff ffe7 	bl	8010dc8 <_ZN8touchgfx6WidgetD1Ev>
 8010dfa:	2128      	movs	r1, #40	; 0x28
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f01c fd37 	bl	802d870 <_ZdlPvj>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	4618      	mov	r0, r3
 8010e06:	3708      	adds	r7, #8
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b082      	sub	sp, #8
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	4618      	mov	r0, r3
 8010e18:	2326      	movs	r3, #38	; 0x26
 8010e1a:	461a      	mov	r2, r3
 8010e1c:	2100      	movs	r1, #0
 8010e1e:	f01c fedb 	bl	802dbd8 <memset>
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	4618      	mov	r0, r3
 8010e26:	f7ff ffbd 	bl	8010da4 <_ZN8touchgfx6WidgetC1Ev>
 8010e2a:	4a16      	ldr	r2, [pc, #88]	; (8010e84 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	601a      	str	r2, [r3, #0]
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	3328      	adds	r3, #40	; 0x28
 8010e34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f7ff ff79 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	3330      	adds	r3, #48	; 0x30
 8010e42:	2100      	movs	r1, #0
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7ff fda7 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	869a      	strh	r2, [r3, #52]	; 0x34
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	22ff      	movs	r2, #255	; 0xff
 8010e54:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2200      	movs	r2, #0
 8010e64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	333c      	adds	r3, #60	; 0x3c
 8010e74:	4618      	mov	r0, r3
 8010e76:	f000 f8f2 	bl	801105e <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3708      	adds	r7, #8
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}
 8010e84:	08030858 	.word	0x08030858

08010e88 <_ZN8touchgfx8TextArea8setWidthEs>:

    virtual void setWidth(int16_t width)
 8010e88:	b590      	push	{r4, r7, lr}
 8010e8a:	b087      	sub	sp, #28
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6178      	str	r0, [r7, #20]
 8010e90:	460b      	mov	r3, r1
 8010e92:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 8010e94:	697b      	ldr	r3, [r7, #20]
 8010e96:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8010e9a:	4611      	mov	r1, r2
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f7ff fe6b 	bl	8010b78 <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 8010ea2:	697b      	ldr	r3, [r7, #20]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	3384      	adds	r3, #132	; 0x84
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	697c      	ldr	r4, [r7, #20]
 8010eac:	463a      	mov	r2, r7
 8010eae:	6979      	ldr	r1, [r7, #20]
 8010eb0:	4610      	mov	r0, r2
 8010eb2:	4798      	blx	r3
 8010eb4:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8010eb8:	463a      	mov	r2, r7
 8010eba:	ca07      	ldmia	r2, {r0, r1, r2}
 8010ebc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8010ec0:	bf00      	nop
 8010ec2:	371c      	adds	r7, #28
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd90      	pop	{r4, r7, pc}

08010ec8 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8010ec8:	b590      	push	{r4, r7, lr}
 8010eca:	b087      	sub	sp, #28
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6178      	str	r0, [r7, #20]
 8010ed0:	460b      	mov	r3, r1
 8010ed2:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8010eda:	4611      	mov	r1, r2
 8010edc:	4618      	mov	r0, r3
 8010ede:	f7ff fe5a 	bl	8010b96 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 8010ee2:	697b      	ldr	r3, [r7, #20]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	3384      	adds	r3, #132	; 0x84
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	697c      	ldr	r4, [r7, #20]
 8010eec:	463a      	mov	r2, r7
 8010eee:	6979      	ldr	r1, [r7, #20]
 8010ef0:	4610      	mov	r0, r2
 8010ef2:	4798      	blx	r3
 8010ef4:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8010ef8:	463a      	mov	r2, r7
 8010efa:	ca07      	ldmia	r2, {r0, r1, r2}
 8010efc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8010f00:	bf00      	nop
 8010f02:	371c      	adds	r7, #28
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd90      	pop	{r4, r7, pc}

08010f08 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b082      	sub	sp, #8
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f7ff fd4f 	bl	80109b6 <_ZN8touchgfx4RectC1Ev>
    }
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	3708      	adds	r7, #8
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	bd80      	pop	{r7, pc}

08010f20 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 8010f20:	b480      	push	{r7}
 8010f22:	b083      	sub	sp, #12
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	460b      	mov	r3, r1
 8010f2a:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	78fa      	ldrb	r2, [r7, #3]
 8010f30:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 8010f34:	bf00      	nop
 8010f36:	370c      	adds	r7, #12
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3e:	4770      	bx	lr

08010f40 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 8010f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f42:	b085      	sub	sp, #20
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
 8010f48:	460b      	mov	r3, r1
 8010f4a:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 8010f4c:	687e      	ldr	r6, [r7, #4]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	3334      	adds	r3, #52	; 0x34
 8010f54:	681c      	ldr	r4, [r3, #0]
 8010f56:	887d      	ldrh	r5, [r7, #2]
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f000 f869 	bl	8011030 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010f62:	4b1d      	ldr	r3, [pc, #116]	; (8010fd8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d105      	bne.n	8010f76 <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 8010f6a:	4b1c      	ldr	r3, [pc, #112]	; (8010fdc <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 8010f6c:	4a1c      	ldr	r2, [pc, #112]	; (8010fe0 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 8010f6e:	216c      	movs	r1, #108	; 0x6c
 8010f70:	481c      	ldr	r0, [pc, #112]	; (8010fe4 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 8010f72:	f01c fcab 	bl	802d8cc <__assert_func>
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	889a      	ldrh	r2, [r3, #4]
 8010f7e:	4b1a      	ldr	r3, [pc, #104]	; (8010fe8 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 8010f80:	881b      	ldrh	r3, [r3, #0]
 8010f82:	429a      	cmp	r2, r3
 8010f84:	bf34      	ite	cc
 8010f86:	2301      	movcc	r3, #1
 8010f88:	2300      	movcs	r3, #0
 8010f8a:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d105      	bne.n	8010f9c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 8010f90:	4b16      	ldr	r3, [pc, #88]	; (8010fec <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 8010f92:	4a13      	ldr	r2, [pc, #76]	; (8010fe0 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 8010f94:	216d      	movs	r1, #109	; 0x6d
 8010f96:	4813      	ldr	r0, [pc, #76]	; (8010fe4 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 8010f98:	f01c fc98 	bl	802d8cc <__assert_func>
 8010f9c:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 8010f9e:	4b14      	ldr	r3, [pc, #80]	; (8010ff0 <_ZN8touchgfx8TextArea12setBaselineYEs+0xb0>)
 8010fa0:	681a      	ldr	r2, [r3, #0]
 8010fa2:	4b0d      	ldr	r3, [pc, #52]	; (8010fd8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 8010fa4:	6819      	ldr	r1, [r3, #0]
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	889b      	ldrh	r3, [r3, #4]
 8010faa:	005b      	lsls	r3, r3, #1
 8010fac:	440b      	add	r3, r1
 8010fae:	781b      	ldrb	r3, [r3, #0]
 8010fb0:	009b      	lsls	r3, r3, #2
 8010fb2:	4413      	add	r3, r2
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	681a      	ldr	r2, [r3, #0]
 8010fb8:	322c      	adds	r2, #44	; 0x2c
 8010fba:	6812      	ldr	r2, [r2, #0]
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	4790      	blx	r2
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	1aeb      	subs	r3, r5, r3
 8010fc4:	b29b      	uxth	r3, r3
 8010fc6:	b21b      	sxth	r3, r3
 8010fc8:	4619      	mov	r1, r3
 8010fca:	4630      	mov	r0, r6
 8010fcc:	47a0      	blx	r4
    }
 8010fce:	bf00      	nop
 8010fd0:	3714      	adds	r7, #20
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fd6:	bf00      	nop
 8010fd8:	2000f1bc 	.word	0x2000f1bc
 8010fdc:	0802eeac 	.word	0x0802eeac
 8010fe0:	0802eef0 	.word	0x0802eef0
 8010fe4:	0802ef2c 	.word	0x0802ef2c
 8010fe8:	2000f1c0 	.word	0x2000f1c0
 8010fec:	0802ef70 	.word	0x0802ef70
 8010ff0:	2000f1c4 	.word	0x2000f1c4

08010ff4 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b082      	sub	sp, #8
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
 8010ffc:	460b      	mov	r3, r1
 8010ffe:	807b      	strh	r3, [r7, #2]
 8011000:	4613      	mov	r3, r2
 8011002:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8011004:	687a      	ldr	r2, [r7, #4]
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	3330      	adds	r3, #48	; 0x30
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8011012:	4610      	mov	r0, r2
 8011014:	4798      	blx	r3
        setBaselineY(baselineY);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	3364      	adds	r3, #100	; 0x64
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8011022:	4611      	mov	r1, r2
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	4798      	blx	r3
    }
 8011028:	bf00      	nop
 801102a:	3708      	adds	r7, #8
 801102c:	46bd      	mov	sp, r7
 801102e:	bd80      	pop	{r7, pc}

08011030 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 8011030:	b480      	push	{r7}
 8011032:	b083      	sub	sp, #12
 8011034:	af00      	add	r7, sp, #0
 8011036:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	3328      	adds	r3, #40	; 0x28
    }
 801103c:	4618      	mov	r0, r3
 801103e:	370c      	adds	r7, #12
 8011040:	46bd      	mov	sp, r7
 8011042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011046:	4770      	bx	lr

08011048 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 8011048:	b480      	push	{r7}
 801104a:	b083      	sub	sp, #12
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8011050:	2300      	movs	r3, #0
    }
 8011052:	4618      	mov	r0, r3
 8011054:	370c      	adds	r7, #12
 8011056:	46bd      	mov	sp, r7
 8011058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105c:	4770      	bx	lr

0801105e <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 801105e:	b580      	push	{r7, lr}
 8011060:	b084      	sub	sp, #16
 8011062:	af02      	add	r7, sp, #8
 8011064:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8011066:	6878      	ldr	r0, [r7, #4]
 8011068:	f04f 33ff 	mov.w	r3, #4294967295
 801106c:	9300      	str	r3, [sp, #0]
 801106e:	f04f 33ff 	mov.w	r3, #4294967295
 8011072:	2200      	movs	r2, #0
 8011074:	2100      	movs	r1, #0
 8011076:	f7ff fcb5 	bl	80109e4 <_ZN8touchgfx4RectC1Essss>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2200      	movs	r2, #0
 801107e:	609a      	str	r2, [r3, #8]
        {
        }
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	4618      	mov	r0, r3
 8011084:	3708      	adds	r7, #8
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}
	...

0801108c <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 801108c:	b580      	push	{r7, lr}
 801108e:	b082      	sub	sp, #8
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
 8011094:	4a08      	ldr	r2, [pc, #32]	; (80110b8 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	601a      	str	r2, [r3, #0]
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	3328      	adds	r3, #40	; 0x28
 801109e:	4618      	mov	r0, r3
 80110a0:	f7fe fd14 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7ff fe8e 	bl	8010dc8 <_ZN8touchgfx6WidgetD1Ev>
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	4618      	mov	r0, r3
 80110b0:	3708      	adds	r7, #8
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}
 80110b6:	bf00      	nop
 80110b8:	08030858 	.word	0x08030858

080110bc <_ZN8touchgfx8TextAreaD0Ev>:
 80110bc:	b580      	push	{r7, lr}
 80110be:	b082      	sub	sp, #8
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f7ff ffe1 	bl	801108c <_ZN8touchgfx8TextAreaD1Ev>
 80110ca:	2148      	movs	r1, #72	; 0x48
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	f01c fbcf 	bl	802d870 <_ZdlPvj>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	4618      	mov	r0, r3
 80110d6:	3708      	adds	r7, #8
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}

080110dc <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
 *
 */
class TextAreaWithWildcardBase : public TextArea
{
public:
    TextAreaWithWildcardBase()
 80110dc:	b580      	push	{r7, lr}
 80110de:	b082      	sub	sp, #8
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
        : TextArea()
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	4618      	mov	r0, r3
 80110e8:	f7ff fe90 	bl	8010e0c <_ZN8touchgfx8TextAreaC1Ev>
 80110ec:	4a03      	ldr	r2, [pc, #12]	; (80110fc <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	601a      	str	r2, [r3, #0]
    {
    }
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	4618      	mov	r0, r3
 80110f6:	3708      	adds	r7, #8
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}
 80110fc:	08030950 	.word	0x08030950

08011100 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const;

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 8011100:	b580      	push	{r7, lr}
 8011102:	b082      	sub	sp, #8
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 801110a:	6878      	ldr	r0, [r7, #4]
 801110c:	f7ff ffa7 	bl	801105e <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	3708      	adds	r7, #8
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}

08011118 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 8011118:	b580      	push	{r7, lr}
 801111a:	b082      	sub	sp, #8
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
 8011120:	4a05      	ldr	r2, [pc, #20]	; (8011138 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	601a      	str	r2, [r3, #0]
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	4618      	mov	r0, r3
 801112a:	f7ff ffaf 	bl	801108c <_ZN8touchgfx8TextAreaD1Ev>
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	4618      	mov	r0, r3
 8011132:	3708      	adds	r7, #8
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}
 8011138:	08030950 	.word	0x08030950

0801113c <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	f7ff ffe7 	bl	8011118 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 801114a:	2148      	movs	r1, #72	; 0x48
 801114c:	6878      	ldr	r0, [r7, #4]
 801114e:	f01c fb8f 	bl	802d870 <_ZdlPvj>
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	4618      	mov	r0, r3
 8011156:	3708      	adds	r7, #8
 8011158:	46bd      	mov	sp, r7
 801115a:	bd80      	pop	{r7, pc}

0801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
{
public:
    TextAreaWithOneWildcard()
 801115c:	b580      	push	{r7, lr}
 801115e:	b082      	sub	sp, #8
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wc1(0)
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	4618      	mov	r0, r3
 8011168:	f7ff ffb8 	bl	80110dc <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 801116c:	4a05      	ldr	r2, [pc, #20]	; (8011184 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	601a      	str	r2, [r3, #0]
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2200      	movs	r2, #0
 8011176:	649a      	str	r2, [r3, #72]	; 0x48
    {
    }
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	4618      	mov	r0, r3
 801117c:	3708      	adds	r7, #8
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}
 8011182:	bf00      	nop
 8011184:	0802fd44 	.word	0x0802fd44

08011188 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard1(const Unicode::UnicodeChar* value)
 8011188:	b480      	push	{r7}
 801118a:	b083      	sub	sp, #12
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
 8011190:	6039      	str	r1, [r7, #0]
    {
        wc1 = value;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	683a      	ldr	r2, [r7, #0]
 8011196:	649a      	str	r2, [r3, #72]	; 0x48
    }
 8011198:	bf00      	nop
 801119a:	370c      	adds	r7, #12
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr

080111a4 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:

    virtual const Unicode::UnicodeChar* getWildcard1() const
 80111a4:	b480      	push	{r7}
 80111a6:	b083      	sub	sp, #12
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 80111b0:	4618      	mov	r0, r3
 80111b2:	370c      	adds	r7, #12
 80111b4:	46bd      	mov	sp, r7
 80111b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ba:	4770      	bx	lr

080111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 80111bc:	b580      	push	{r7, lr}
 80111be:	b082      	sub	sp, #8
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	6039      	str	r1, [r7, #0]
    {
        setWildcard1(value);
 80111c6:	6839      	ldr	r1, [r7, #0]
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f7ff ffdd 	bl	8011188 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>
    }
 80111ce:	bf00      	nop
 80111d0:	3708      	adds	r7, #8
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
	...

080111d8 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 80111d8:	b580      	push	{r7, lr}
 80111da:	b082      	sub	sp, #8
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
 80111e0:	4a05      	ldr	r2, [pc, #20]	; (80111f8 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	601a      	str	r2, [r3, #0]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	4618      	mov	r0, r3
 80111ea:	f7ff fc4b 	bl	8010a84 <_ZN8touchgfx8DrawableD1Ev>
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	4618      	mov	r0, r3
 80111f2:	3708      	adds	r7, #8
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd80      	pop	{r7, pc}
 80111f8:	08030424 	.word	0x08030424

080111fc <_ZN8touchgfx9ContainerD0Ev>:
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b082      	sub	sp, #8
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f7ff ffe7 	bl	80111d8 <_ZN8touchgfx9ContainerD1Ev>
 801120a:	212c      	movs	r1, #44	; 0x2c
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f01c fb2f 	bl	802d870 <_ZdlPvj>
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	4618      	mov	r0, r3
 8011216:	3708      	adds	r7, #8
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}

0801121c <_ZN8cellBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/cellBase.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

cellBase::cellBase()
 801121c:	b590      	push	{r4, r7, lr}
 801121e:	f5ad 7d6f 	sub.w	sp, sp, #956	; 0x3bc
 8011222:	af00      	add	r7, sp, #0
 8011224:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011228:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801122c:	6018      	str	r0, [r3, #0]
 801122e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011232:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	4618      	mov	r0, r3
 801123a:	f7ff fd57 	bl	8010cec <_ZN8touchgfx9ContainerC1Ev>
 801123e:	4ad9      	ldr	r2, [pc, #868]	; (80115a4 <_ZN8cellBaseC1Ev+0x388>)
 8011240:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011244:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	601a      	str	r2, [r3, #0]
 801124c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011250:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	332c      	adds	r3, #44	; 0x2c
 8011258:	4618      	mov	r0, r3
 801125a:	f7ff ff7f 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801125e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011262:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	3378      	adds	r3, #120	; 0x78
 801126a:	4618      	mov	r0, r3
 801126c:	f7ff ff76 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011270:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011274:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	33c4      	adds	r3, #196	; 0xc4
 801127c:	4618      	mov	r0, r3
 801127e:	f7ff ff6d 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011282:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011286:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8011290:	4618      	mov	r0, r3
 8011292:	f7ff ff63 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011296:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801129a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7ff ff59 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80112aa:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80112ae:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80112b8:	4618      	mov	r0, r3
 80112ba:	f7ff ff4f 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80112be:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80112c2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80112cc:	4618      	mov	r0, r3
 80112ce:	f7ff ff45 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80112d2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80112d6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7ff ff3b 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80112e6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80112ea:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80112f4:	4618      	mov	r0, r3
 80112f6:	f7ff ff31 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80112fa:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80112fe:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8011308:	4618      	mov	r0, r3
 801130a:	f7ff ff27 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801130e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011312:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	f503 7349 	add.w	r3, r3, #804	; 0x324
 801131c:	4618      	mov	r0, r3
 801131e:	f7ff ff1d 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011322:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011326:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8011330:	4618      	mov	r0, r3
 8011332:	f7ff ff13 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011336:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801133a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8011344:	4618      	mov	r0, r3
 8011346:	f7ff ff09 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801134a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801134e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8011358:	4618      	mov	r0, r3
 801135a:	f7ff feff 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801135e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011362:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	f203 4354 	addw	r3, r3, #1108	; 0x454
 801136c:	4618      	mov	r0, r3
 801136e:	f7ff fef5 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011372:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011376:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8011380:	4618      	mov	r0, r3
 8011382:	f7ff feeb 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8011386:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801138a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8011394:	4618      	mov	r0, r3
 8011396:	f7ff fee1 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801139a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801139e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7ff fed7 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113ae:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80113b2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	f203 5384 	addw	r3, r3, #1412	; 0x584
 80113bc:	4618      	mov	r0, r3
 80113be:	f7ff fecd 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113c2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80113c6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 80113d0:	4618      	mov	r0, r3
 80113d2:	f7ff fec3 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 80113d6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80113da:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7ff feb9 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{
    setWidth(116);
 80113ea:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80113ee:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	2174      	movs	r1, #116	; 0x74
 80113f6:	4618      	mov	r0, r3
 80113f8:	f7ff fbbe 	bl	8010b78 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(600);
 80113fc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011400:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	f44f 7116 	mov.w	r1, #600	; 0x258
 801140a:	4618      	mov	r0, r3
 801140c:	f7ff fbc3 	bl	8010b96 <_ZN8touchgfx8Drawable9setHeightEs>
    cell_0_voltage.setXY(7, 148);
 8011410:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011414:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	332c      	adds	r3, #44	; 0x2c
 801141c:	2294      	movs	r2, #148	; 0x94
 801141e:	2107      	movs	r1, #7
 8011420:	4618      	mov	r0, r3
 8011422:	f7ff fb8b 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    cell_0_voltage.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011426:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801142a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011434:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011438:	f2a3 13a1 	subw	r3, r3, #417	; 0x1a1
 801143c:	22ff      	movs	r2, #255	; 0xff
 801143e:	701a      	strb	r2, [r3, #0]
 8011440:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011444:	f5a3 73d1 	sub.w	r3, r3, #418	; 0x1a2
 8011448:	22ff      	movs	r2, #255	; 0xff
 801144a:	701a      	strb	r2, [r3, #0]
 801144c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011450:	f2a3 13a3 	subw	r3, r3, #419	; 0x1a3
 8011454:	22ff      	movs	r2, #255	; 0xff
 8011456:	701a      	strb	r2, [r3, #0]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8011458:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801145c:	f2a3 13a1 	subw	r3, r3, #417	; 0x1a1
 8011460:	781b      	ldrb	r3, [r3, #0]
 8011462:	041b      	lsls	r3, r3, #16
 8011464:	461a      	mov	r2, r3
 8011466:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801146a:	f5a3 73d1 	sub.w	r3, r3, #418	; 0x1a2
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	021b      	lsls	r3, r3, #8
 8011472:	431a      	orrs	r2, r3
 8011474:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011478:	f2a3 13a3 	subw	r3, r3, #419	; 0x1a3
 801147c:	781b      	ldrb	r3, [r3, #0]
 801147e:	4313      	orrs	r3, r2
 8011480:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011484:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8011488:	4611      	mov	r1, r2
 801148a:	4618      	mov	r0, r3
 801148c:	f7ff fa84 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8011490:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011494:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	461a      	mov	r2, r3
 801149c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80114a0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80114a4:	601c      	str	r4, [r3, #0]
 80114a6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80114aa:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80114ae:	601a      	str	r2, [r3, #0]
        color = newColor;
 80114b0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80114b4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 80114be:	f5a2 7253 	sub.w	r2, r2, #844	; 0x34c
 80114c2:	6812      	ldr	r2, [r2, #0]
 80114c4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80114c6:	bf00      	nop
    cell_0_voltage.setLinespacing(0);
 80114c8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80114cc:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80114d6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80114da:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80114de:	601a      	str	r2, [r3, #0]
 80114e0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80114e4:	f5a3 73cd 	sub.w	r3, r3, #410	; 0x19a
 80114e8:	2200      	movs	r2, #0
 80114ea:	801a      	strh	r2, [r3, #0]
        linespace = space;
 80114ec:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80114f0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 80114fa:	f5a2 72cd 	sub.w	r2, r2, #410	; 0x19a
 80114fe:	8812      	ldrh	r2, [r2, #0]
 8011500:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8011502:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011506:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	3384      	adds	r3, #132	; 0x84
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8011516:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 801151a:	6814      	ldr	r4, [r2, #0]
 801151c:	4638      	mov	r0, r7
 801151e:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8011522:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8011526:	6811      	ldr	r1, [r2, #0]
 8011528:	4798      	blx	r3
 801152a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801152e:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 8011532:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8011536:	ca07      	ldmia	r2, {r0, r1, r2}
 8011538:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801153c:	bf00      	nop
    Unicode::snprintf(cell_0_voltageBuffer, CELL_0_VOLTAGE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YYII).getText());
 801153e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011542:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	f503 64cd 	add.w	r4, r3, #1640	; 0x668
 801154c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8011550:	2129      	movs	r1, #41	; 0x29
 8011552:	4618      	mov	r0, r3
 8011554:	f7ff fbec 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011558:	4b13      	ldr	r3, [pc, #76]	; (80115a8 <_ZN8cellBaseC1Ev+0x38c>)
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d105      	bne.n	801156c <_ZN8cellBaseC1Ev+0x350>
 8011560:	4b12      	ldr	r3, [pc, #72]	; (80115ac <_ZN8cellBaseC1Ev+0x390>)
 8011562:	4a13      	ldr	r2, [pc, #76]	; (80115b0 <_ZN8cellBaseC1Ev+0x394>)
 8011564:	2160      	movs	r1, #96	; 0x60
 8011566:	4813      	ldr	r0, [pc, #76]	; (80115b4 <_ZN8cellBaseC1Ev+0x398>)
 8011568:	f01c f9b0 	bl	802d8cc <__assert_func>
 801156c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011570:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8011574:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8011578:	601a      	str	r2, [r3, #0]
        return typedTextId < numberOfTypedTexts;
 801157a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801157e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	889a      	ldrh	r2, [r3, #4]
 8011586:	4b0c      	ldr	r3, [pc, #48]	; (80115b8 <_ZN8cellBaseC1Ev+0x39c>)
 8011588:	881b      	ldrh	r3, [r3, #0]
 801158a:	429a      	cmp	r2, r3
 801158c:	bf34      	ite	cc
 801158e:	2301      	movcc	r3, #1
 8011590:	2300      	movcs	r3, #0
 8011592:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8011594:	2b00      	cmp	r3, #0
 8011596:	d113      	bne.n	80115c0 <_ZN8cellBaseC1Ev+0x3a4>
 8011598:	4b08      	ldr	r3, [pc, #32]	; (80115bc <_ZN8cellBaseC1Ev+0x3a0>)
 801159a:	4a05      	ldr	r2, [pc, #20]	; (80115b0 <_ZN8cellBaseC1Ev+0x394>)
 801159c:	2161      	movs	r1, #97	; 0x61
 801159e:	4805      	ldr	r0, [pc, #20]	; (80115b4 <_ZN8cellBaseC1Ev+0x398>)
 80115a0:	f01c f994 	bl	802d8cc <__assert_func>
 80115a4:	0802fcb0 	.word	0x0802fcb0
 80115a8:	2000f1bc 	.word	0x2000f1bc
 80115ac:	0802eeac 	.word	0x0802eeac
 80115b0:	0802efb0 	.word	0x0802efb0
 80115b4:	0802ef2c 	.word	0x0802ef2c
 80115b8:	2000f1c0 	.word	0x2000f1c0
 80115bc:	0802ef70 	.word	0x0802ef70
 80115c0:	bf00      	nop
        return texts->getText(typedTextId);
 80115c2:	4b8a      	ldr	r3, [pc, #552]	; (80117ec <_ZN8cellBaseC1Ev+0x5d0>)
 80115c4:	681a      	ldr	r2, [r3, #0]
 80115c6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80115ca:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80115ce:	889b      	ldrh	r3, [r3, #4]
 80115d0:	4619      	mov	r1, r3
 80115d2:	4610      	mov	r0, r2
 80115d4:	f004 fcce 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 80115d8:	4603      	mov	r3, r0
 80115da:	bf00      	nop
 80115dc:	4a84      	ldr	r2, [pc, #528]	; (80117f0 <_ZN8cellBaseC1Ev+0x5d4>)
 80115de:	210a      	movs	r1, #10
 80115e0:	4620      	mov	r0, r4
 80115e2:	f00f fdf1 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80115e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80115ea:	4618      	mov	r0, r3
 80115ec:	f7fe fa6e 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    cell_0_voltage.setWildcard(cell_0_voltageBuffer);
 80115f0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80115f4:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80115fe:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011602:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	f503 63cd 	add.w	r3, r3, #1640	; 0x668
 801160c:	4619      	mov	r1, r3
 801160e:	4610      	mov	r0, r2
 8011610:	f7ff fdd4 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cell_0_voltage.resizeToCurrentText();
 8011614:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011618:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	332c      	adds	r3, #44	; 0x2c
 8011620:	4618      	mov	r0, r3
 8011622:	f00a f8f5 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    cell_0_voltage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MBDT));
 8011626:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801162a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8011634:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011638:	212a      	movs	r1, #42	; 0x2a
 801163a:	4618      	mov	r0, r3
 801163c:	f7ff fb78 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 8011640:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011644:	4619      	mov	r1, r3
 8011646:	4620      	mov	r0, r4
 8011648:	f00a f902 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801164c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8011650:	4618      	mov	r0, r3
 8011652:	f7fe fa3b 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    cell_1_voltage.setXY(7, 176);
 8011656:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801165a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	3378      	adds	r3, #120	; 0x78
 8011662:	22b0      	movs	r2, #176	; 0xb0
 8011664:	2107      	movs	r1, #7
 8011666:	4618      	mov	r0, r3
 8011668:	f7ff fa68 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    cell_1_voltage.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801166c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011670:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	f103 0478 	add.w	r4, r3, #120	; 0x78
 801167a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801167e:	f2a3 138d 	subw	r3, r3, #397	; 0x18d
 8011682:	22ff      	movs	r2, #255	; 0xff
 8011684:	701a      	strb	r2, [r3, #0]
 8011686:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801168a:	f5a3 73c7 	sub.w	r3, r3, #398	; 0x18e
 801168e:	22ff      	movs	r2, #255	; 0xff
 8011690:	701a      	strb	r2, [r3, #0]
 8011692:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011696:	f2a3 138f 	subw	r3, r3, #399	; 0x18f
 801169a:	22ff      	movs	r2, #255	; 0xff
 801169c:	701a      	strb	r2, [r3, #0]
 801169e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80116a2:	f2a3 138d 	subw	r3, r3, #397	; 0x18d
 80116a6:	781b      	ldrb	r3, [r3, #0]
 80116a8:	041b      	lsls	r3, r3, #16
 80116aa:	461a      	mov	r2, r3
 80116ac:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80116b0:	f5a3 73c7 	sub.w	r3, r3, #398	; 0x18e
 80116b4:	781b      	ldrb	r3, [r3, #0]
 80116b6:	021b      	lsls	r3, r3, #8
 80116b8:	431a      	orrs	r2, r3
 80116ba:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80116be:	f2a3 138f 	subw	r3, r3, #399	; 0x18f
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	4313      	orrs	r3, r2
 80116c6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80116ca:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 80116ce:	4611      	mov	r1, r2
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7ff f961 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 80116d6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80116da:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	461a      	mov	r2, r3
 80116e2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80116e6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80116ea:	601c      	str	r4, [r3, #0]
 80116ec:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80116f0:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80116f4:	601a      	str	r2, [r3, #0]
        color = newColor;
 80116f6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80116fa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8011704:	f5a2 7254 	sub.w	r2, r2, #848	; 0x350
 8011708:	6812      	ldr	r2, [r2, #0]
 801170a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801170c:	bf00      	nop
    cell_1_voltage.setLinespacing(0);
 801170e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011712:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	f103 0278 	add.w	r2, r3, #120	; 0x78
 801171c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011720:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8011724:	601a      	str	r2, [r3, #0]
 8011726:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801172a:	f5a3 73c3 	sub.w	r3, r3, #390	; 0x186
 801172e:	2200      	movs	r2, #0
 8011730:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011732:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011736:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8011740:	f5a2 72c3 	sub.w	r2, r2, #390	; 0x186
 8011744:	8812      	ldrh	r2, [r2, #0]
 8011746:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8011748:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801174c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	3384      	adds	r3, #132	; 0x84
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 801175c:	f5a2 72c2 	sub.w	r2, r2, #388	; 0x184
 8011760:	6814      	ldr	r4, [r2, #0]
 8011762:	4638      	mov	r0, r7
 8011764:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8011768:	f5a2 72c2 	sub.w	r2, r2, #388	; 0x184
 801176c:	6811      	ldr	r1, [r2, #0]
 801176e:	4798      	blx	r3
 8011770:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011774:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 8011778:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 801177c:	ca07      	ldmia	r2, {r0, r1, r2}
 801177e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8011782:	bf00      	nop
    Unicode::snprintf(cell_1_voltageBuffer, CELL_1_VOLTAGE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_OJHN).getText());
 8011784:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011788:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	f203 647c 	addw	r4, r3, #1660	; 0x67c
 8011792:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011796:	2127      	movs	r1, #39	; 0x27
 8011798:	4618      	mov	r0, r3
 801179a:	f7ff fac9 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801179e:	4b15      	ldr	r3, [pc, #84]	; (80117f4 <_ZN8cellBaseC1Ev+0x5d8>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d105      	bne.n	80117b2 <_ZN8cellBaseC1Ev+0x596>
 80117a6:	4b14      	ldr	r3, [pc, #80]	; (80117f8 <_ZN8cellBaseC1Ev+0x5dc>)
 80117a8:	4a14      	ldr	r2, [pc, #80]	; (80117fc <_ZN8cellBaseC1Ev+0x5e0>)
 80117aa:	2160      	movs	r1, #96	; 0x60
 80117ac:	4814      	ldr	r0, [pc, #80]	; (8011800 <_ZN8cellBaseC1Ev+0x5e4>)
 80117ae:	f01c f88d 	bl	802d8cc <__assert_func>
 80117b2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80117b6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80117ba:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80117be:	601a      	str	r2, [r3, #0]
        return typedTextId < numberOfTypedTexts;
 80117c0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80117c4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	889a      	ldrh	r2, [r3, #4]
 80117cc:	4b0d      	ldr	r3, [pc, #52]	; (8011804 <_ZN8cellBaseC1Ev+0x5e8>)
 80117ce:	881b      	ldrh	r3, [r3, #0]
 80117d0:	429a      	cmp	r2, r3
 80117d2:	bf34      	ite	cc
 80117d4:	2301      	movcc	r3, #1
 80117d6:	2300      	movcs	r3, #0
 80117d8:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d116      	bne.n	801180c <_ZN8cellBaseC1Ev+0x5f0>
 80117de:	4b0a      	ldr	r3, [pc, #40]	; (8011808 <_ZN8cellBaseC1Ev+0x5ec>)
 80117e0:	4a06      	ldr	r2, [pc, #24]	; (80117fc <_ZN8cellBaseC1Ev+0x5e0>)
 80117e2:	2161      	movs	r1, #97	; 0x61
 80117e4:	4806      	ldr	r0, [pc, #24]	; (8011800 <_ZN8cellBaseC1Ev+0x5e4>)
 80117e6:	f01c f871 	bl	802d8cc <__assert_func>
 80117ea:	bf00      	nop
 80117ec:	2000f1c8 	.word	0x2000f1c8
 80117f0:	0802efe8 	.word	0x0802efe8
 80117f4:	2000f1bc 	.word	0x2000f1bc
 80117f8:	0802eeac 	.word	0x0802eeac
 80117fc:	0802efb0 	.word	0x0802efb0
 8011800:	0802ef2c 	.word	0x0802ef2c
 8011804:	2000f1c0 	.word	0x2000f1c0
 8011808:	0802ef70 	.word	0x0802ef70
 801180c:	bf00      	nop
        return texts->getText(typedTextId);
 801180e:	4b8a      	ldr	r3, [pc, #552]	; (8011a38 <_ZN8cellBaseC1Ev+0x81c>)
 8011810:	681a      	ldr	r2, [r3, #0]
 8011812:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011816:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 801181a:	889b      	ldrh	r3, [r3, #4]
 801181c:	4619      	mov	r1, r3
 801181e:	4610      	mov	r0, r2
 8011820:	f004 fba8 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 8011824:	4603      	mov	r3, r0
 8011826:	bf00      	nop
 8011828:	4a84      	ldr	r2, [pc, #528]	; (8011a3c <_ZN8cellBaseC1Ev+0x820>)
 801182a:	210a      	movs	r1, #10
 801182c:	4620      	mov	r0, r4
 801182e:	f00f fccb 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011832:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011836:	4618      	mov	r0, r3
 8011838:	f7fe f948 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    cell_1_voltage.setWildcard(cell_1_voltageBuffer);
 801183c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011840:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	f103 0278 	add.w	r2, r3, #120	; 0x78
 801184a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801184e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	f203 637c 	addw	r3, r3, #1660	; 0x67c
 8011858:	4619      	mov	r1, r3
 801185a:	4610      	mov	r0, r2
 801185c:	f7ff fcae 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cell_1_voltage.resizeToCurrentText();
 8011860:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011864:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	3378      	adds	r3, #120	; 0x78
 801186c:	4618      	mov	r0, r3
 801186e:	f009 ffcf 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    cell_1_voltage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_O11V));
 8011872:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011876:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8011880:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8011884:	2128      	movs	r1, #40	; 0x28
 8011886:	4618      	mov	r0, r3
 8011888:	f7ff fa52 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 801188c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8011890:	4619      	mov	r1, r3
 8011892:	4620      	mov	r0, r4
 8011894:	f009 ffdc 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011898:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801189c:	4618      	mov	r0, r3
 801189e:	f7fe f915 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    cell_2_voltage.setXY(7, 204);
 80118a2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80118a6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	33c4      	adds	r3, #196	; 0xc4
 80118ae:	22cc      	movs	r2, #204	; 0xcc
 80118b0:	2107      	movs	r1, #7
 80118b2:	4618      	mov	r0, r3
 80118b4:	f7ff f942 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    cell_2_voltage.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80118b8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80118bc:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 80118c6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80118ca:	f2a3 1379 	subw	r3, r3, #377	; 0x179
 80118ce:	22ff      	movs	r2, #255	; 0xff
 80118d0:	701a      	strb	r2, [r3, #0]
 80118d2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80118d6:	f5a3 73bd 	sub.w	r3, r3, #378	; 0x17a
 80118da:	22ff      	movs	r2, #255	; 0xff
 80118dc:	701a      	strb	r2, [r3, #0]
 80118de:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80118e2:	f2a3 137b 	subw	r3, r3, #379	; 0x17b
 80118e6:	22ff      	movs	r2, #255	; 0xff
 80118e8:	701a      	strb	r2, [r3, #0]
 80118ea:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80118ee:	f2a3 1379 	subw	r3, r3, #377	; 0x179
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	041b      	lsls	r3, r3, #16
 80118f6:	461a      	mov	r2, r3
 80118f8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80118fc:	f5a3 73bd 	sub.w	r3, r3, #378	; 0x17a
 8011900:	781b      	ldrb	r3, [r3, #0]
 8011902:	021b      	lsls	r3, r3, #8
 8011904:	431a      	orrs	r2, r3
 8011906:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801190a:	f2a3 137b 	subw	r3, r3, #379	; 0x17b
 801190e:	781b      	ldrb	r3, [r3, #0]
 8011910:	4313      	orrs	r3, r2
 8011912:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011916:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801191a:	4611      	mov	r1, r2
 801191c:	4618      	mov	r0, r3
 801191e:	f7ff f83b 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8011922:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011926:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	461a      	mov	r2, r3
 801192e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011932:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8011936:	601c      	str	r4, [r3, #0]
 8011938:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801193c:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8011940:	601a      	str	r2, [r3, #0]
        color = newColor;
 8011942:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011946:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8011950:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 8011954:	6812      	ldr	r2, [r2, #0]
 8011956:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011958:	bf00      	nop
    cell_2_voltage.setLinespacing(0);
 801195a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801195e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8011968:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801196c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8011970:	601a      	str	r2, [r3, #0]
 8011972:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011976:	f5a3 73b9 	sub.w	r3, r3, #370	; 0x172
 801197a:	2200      	movs	r2, #0
 801197c:	801a      	strh	r2, [r3, #0]
        linespace = space;
 801197e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011982:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 801198c:	f5a2 72b9 	sub.w	r2, r2, #370	; 0x172
 8011990:	8812      	ldrh	r2, [r2, #0]
 8011992:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8011994:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011998:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	3384      	adds	r3, #132	; 0x84
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 80119a8:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 80119ac:	6814      	ldr	r4, [r2, #0]
 80119ae:	4638      	mov	r0, r7
 80119b0:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 80119b4:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 80119b8:	6811      	ldr	r1, [r2, #0]
 80119ba:	4798      	blx	r3
 80119bc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80119c0:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 80119c4:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80119c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80119ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80119ce:	bf00      	nop
    Unicode::snprintf(cell_2_voltageBuffer, CELL_2_VOLTAGE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_AO6J).getText());
 80119d0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80119d4:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	f503 64d2 	add.w	r4, r3, #1680	; 0x690
 80119de:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80119e2:	2125      	movs	r1, #37	; 0x25
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7ff f9a3 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80119ea:	4b15      	ldr	r3, [pc, #84]	; (8011a40 <_ZN8cellBaseC1Ev+0x824>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d105      	bne.n	80119fe <_ZN8cellBaseC1Ev+0x7e2>
 80119f2:	4b14      	ldr	r3, [pc, #80]	; (8011a44 <_ZN8cellBaseC1Ev+0x828>)
 80119f4:	4a14      	ldr	r2, [pc, #80]	; (8011a48 <_ZN8cellBaseC1Ev+0x82c>)
 80119f6:	2160      	movs	r1, #96	; 0x60
 80119f8:	4814      	ldr	r0, [pc, #80]	; (8011a4c <_ZN8cellBaseC1Ev+0x830>)
 80119fa:	f01b ff67 	bl	802d8cc <__assert_func>
 80119fe:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011a02:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8011a06:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8011a0a:	601a      	str	r2, [r3, #0]
        return typedTextId < numberOfTypedTexts;
 8011a0c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011a10:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	889a      	ldrh	r2, [r3, #4]
 8011a18:	4b0d      	ldr	r3, [pc, #52]	; (8011a50 <_ZN8cellBaseC1Ev+0x834>)
 8011a1a:	881b      	ldrh	r3, [r3, #0]
 8011a1c:	429a      	cmp	r2, r3
 8011a1e:	bf34      	ite	cc
 8011a20:	2301      	movcc	r3, #1
 8011a22:	2300      	movcs	r3, #0
 8011a24:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d116      	bne.n	8011a58 <_ZN8cellBaseC1Ev+0x83c>
 8011a2a:	4b0a      	ldr	r3, [pc, #40]	; (8011a54 <_ZN8cellBaseC1Ev+0x838>)
 8011a2c:	4a06      	ldr	r2, [pc, #24]	; (8011a48 <_ZN8cellBaseC1Ev+0x82c>)
 8011a2e:	2161      	movs	r1, #97	; 0x61
 8011a30:	4806      	ldr	r0, [pc, #24]	; (8011a4c <_ZN8cellBaseC1Ev+0x830>)
 8011a32:	f01b ff4b 	bl	802d8cc <__assert_func>
 8011a36:	bf00      	nop
 8011a38:	2000f1c8 	.word	0x2000f1c8
 8011a3c:	0802efe8 	.word	0x0802efe8
 8011a40:	2000f1bc 	.word	0x2000f1bc
 8011a44:	0802eeac 	.word	0x0802eeac
 8011a48:	0802efb0 	.word	0x0802efb0
 8011a4c:	0802ef2c 	.word	0x0802ef2c
 8011a50:	2000f1c0 	.word	0x2000f1c0
 8011a54:	0802ef70 	.word	0x0802ef70
 8011a58:	bf00      	nop
        return texts->getText(typedTextId);
 8011a5a:	4b8a      	ldr	r3, [pc, #552]	; (8011c84 <_ZN8cellBaseC1Ev+0xa68>)
 8011a5c:	681a      	ldr	r2, [r3, #0]
 8011a5e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011a62:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8011a66:	889b      	ldrh	r3, [r3, #4]
 8011a68:	4619      	mov	r1, r3
 8011a6a:	4610      	mov	r0, r2
 8011a6c:	f004 fa82 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 8011a70:	4603      	mov	r3, r0
 8011a72:	bf00      	nop
 8011a74:	4a84      	ldr	r2, [pc, #528]	; (8011c88 <_ZN8cellBaseC1Ev+0xa6c>)
 8011a76:	210a      	movs	r1, #10
 8011a78:	4620      	mov	r0, r4
 8011a7a:	f00f fba5 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011a7e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7fe f822 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    cell_2_voltage.setWildcard(cell_2_voltageBuffer);
 8011a88:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011a8c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8011a96:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011a9a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	f503 63d2 	add.w	r3, r3, #1680	; 0x690
 8011aa4:	4619      	mov	r1, r3
 8011aa6:	4610      	mov	r0, r2
 8011aa8:	f7ff fb88 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cell_2_voltage.resizeToCurrentText();
 8011aac:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011ab0:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	33c4      	adds	r3, #196	; 0xc4
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f009 fea9 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    cell_2_voltage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_I019));
 8011abe:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011ac2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	f103 04c4 	add.w	r4, r3, #196	; 0xc4
 8011acc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011ad0:	2126      	movs	r1, #38	; 0x26
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f7ff f92c 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 8011ad8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011adc:	4619      	mov	r1, r3
 8011ade:	4620      	mov	r0, r4
 8011ae0:	f009 feb6 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011ae4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f7fd ffef 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    cell_3_voltage.setXY(7, 232);
 8011aee:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011af2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8011afc:	22e8      	movs	r2, #232	; 0xe8
 8011afe:	2107      	movs	r1, #7
 8011b00:	4618      	mov	r0, r3
 8011b02:	f7ff f81b 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    cell_3_voltage.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011b06:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011b0a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	f503 7488 	add.w	r4, r3, #272	; 0x110
 8011b14:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011b18:	f2a3 1365 	subw	r3, r3, #357	; 0x165
 8011b1c:	22ff      	movs	r2, #255	; 0xff
 8011b1e:	701a      	strb	r2, [r3, #0]
 8011b20:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011b24:	f5a3 73b3 	sub.w	r3, r3, #358	; 0x166
 8011b28:	22ff      	movs	r2, #255	; 0xff
 8011b2a:	701a      	strb	r2, [r3, #0]
 8011b2c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011b30:	f2a3 1367 	subw	r3, r3, #359	; 0x167
 8011b34:	22ff      	movs	r2, #255	; 0xff
 8011b36:	701a      	strb	r2, [r3, #0]
 8011b38:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011b3c:	f2a3 1365 	subw	r3, r3, #357	; 0x165
 8011b40:	781b      	ldrb	r3, [r3, #0]
 8011b42:	041b      	lsls	r3, r3, #16
 8011b44:	461a      	mov	r2, r3
 8011b46:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011b4a:	f5a3 73b3 	sub.w	r3, r3, #358	; 0x166
 8011b4e:	781b      	ldrb	r3, [r3, #0]
 8011b50:	021b      	lsls	r3, r3, #8
 8011b52:	431a      	orrs	r2, r3
 8011b54:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011b58:	f2a3 1367 	subw	r3, r3, #359	; 0x167
 8011b5c:	781b      	ldrb	r3, [r3, #0]
 8011b5e:	4313      	orrs	r3, r2
 8011b60:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011b64:	f507 7301 	add.w	r3, r7, #516	; 0x204
 8011b68:	4611      	mov	r1, r2
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	f7fe ff14 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8011b70:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011b74:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	461a      	mov	r2, r3
 8011b7c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011b80:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8011b84:	601c      	str	r4, [r3, #0]
 8011b86:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011b8a:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 8011b8e:	601a      	str	r2, [r3, #0]
        color = newColor;
 8011b90:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011b94:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8011b9e:	f5a2 7256 	sub.w	r2, r2, #856	; 0x358
 8011ba2:	6812      	ldr	r2, [r2, #0]
 8011ba4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011ba6:	bf00      	nop
    cell_3_voltage.setLinespacing(0);
 8011ba8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011bac:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8011bb6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011bba:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8011bbe:	601a      	str	r2, [r3, #0]
 8011bc0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011bc4:	f5a3 73af 	sub.w	r3, r3, #350	; 0x15e
 8011bc8:	2200      	movs	r2, #0
 8011bca:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011bcc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011bd0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8011bda:	f5a2 72af 	sub.w	r2, r2, #350	; 0x15e
 8011bde:	8812      	ldrh	r2, [r2, #0]
 8011be0:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8011be2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011be6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	3384      	adds	r3, #132	; 0x84
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8011bf6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8011bfa:	6814      	ldr	r4, [r2, #0]
 8011bfc:	4638      	mov	r0, r7
 8011bfe:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8011c02:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8011c06:	6811      	ldr	r1, [r2, #0]
 8011c08:	4798      	blx	r3
 8011c0a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011c0e:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 8011c12:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8011c16:	ca07      	ldmia	r2, {r0, r1, r2}
 8011c18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8011c1c:	bf00      	nop
    Unicode::snprintf(cell_3_voltageBuffer, CELL_3_VOLTAGE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_RMPX).getText());
 8011c1e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011c22:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	f203 64a4 	addw	r4, r3, #1700	; 0x6a4
 8011c2c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011c30:	2123      	movs	r1, #35	; 0x23
 8011c32:	4618      	mov	r0, r3
 8011c34:	f7ff f87c 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011c38:	4b14      	ldr	r3, [pc, #80]	; (8011c8c <_ZN8cellBaseC1Ev+0xa70>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d105      	bne.n	8011c4c <_ZN8cellBaseC1Ev+0xa30>
 8011c40:	4b13      	ldr	r3, [pc, #76]	; (8011c90 <_ZN8cellBaseC1Ev+0xa74>)
 8011c42:	4a14      	ldr	r2, [pc, #80]	; (8011c94 <_ZN8cellBaseC1Ev+0xa78>)
 8011c44:	2160      	movs	r1, #96	; 0x60
 8011c46:	4814      	ldr	r0, [pc, #80]	; (8011c98 <_ZN8cellBaseC1Ev+0xa7c>)
 8011c48:	f01b fe40 	bl	802d8cc <__assert_func>
 8011c4c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011c50:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8011c54:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8011c58:	601a      	str	r2, [r3, #0]
        return typedTextId < numberOfTypedTexts;
 8011c5a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011c5e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	889a      	ldrh	r2, [r3, #4]
 8011c66:	4b0d      	ldr	r3, [pc, #52]	; (8011c9c <_ZN8cellBaseC1Ev+0xa80>)
 8011c68:	881b      	ldrh	r3, [r3, #0]
 8011c6a:	429a      	cmp	r2, r3
 8011c6c:	bf34      	ite	cc
 8011c6e:	2301      	movcc	r3, #1
 8011c70:	2300      	movcs	r3, #0
 8011c72:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d115      	bne.n	8011ca4 <_ZN8cellBaseC1Ev+0xa88>
 8011c78:	4b09      	ldr	r3, [pc, #36]	; (8011ca0 <_ZN8cellBaseC1Ev+0xa84>)
 8011c7a:	4a06      	ldr	r2, [pc, #24]	; (8011c94 <_ZN8cellBaseC1Ev+0xa78>)
 8011c7c:	2161      	movs	r1, #97	; 0x61
 8011c7e:	4806      	ldr	r0, [pc, #24]	; (8011c98 <_ZN8cellBaseC1Ev+0xa7c>)
 8011c80:	f01b fe24 	bl	802d8cc <__assert_func>
 8011c84:	2000f1c8 	.word	0x2000f1c8
 8011c88:	0802efe8 	.word	0x0802efe8
 8011c8c:	2000f1bc 	.word	0x2000f1bc
 8011c90:	0802eeac 	.word	0x0802eeac
 8011c94:	0802efb0 	.word	0x0802efb0
 8011c98:	0802ef2c 	.word	0x0802ef2c
 8011c9c:	2000f1c0 	.word	0x2000f1c0
 8011ca0:	0802ef70 	.word	0x0802ef70
 8011ca4:	bf00      	nop
        return texts->getText(typedTextId);
 8011ca6:	4b8b      	ldr	r3, [pc, #556]	; (8011ed4 <_ZN8cellBaseC1Ev+0xcb8>)
 8011ca8:	681a      	ldr	r2, [r3, #0]
 8011caa:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011cae:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8011cb2:	889b      	ldrh	r3, [r3, #4]
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	4610      	mov	r0, r2
 8011cb8:	f004 f95c 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	bf00      	nop
 8011cc0:	4a85      	ldr	r2, [pc, #532]	; (8011ed8 <_ZN8cellBaseC1Ev+0xcbc>)
 8011cc2:	210a      	movs	r1, #10
 8011cc4:	4620      	mov	r0, r4
 8011cc6:	f00f fa7f 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011cca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7fd fefc 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    cell_3_voltage.setWildcard(cell_3_voltageBuffer);
 8011cd4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011cd8:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8011ce2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011ce6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	f203 63a4 	addw	r3, r3, #1700	; 0x6a4
 8011cf0:	4619      	mov	r1, r3
 8011cf2:	4610      	mov	r0, r2
 8011cf4:	f7ff fa62 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cell_3_voltage.resizeToCurrentText();
 8011cf8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011cfc:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8011d06:	4618      	mov	r0, r3
 8011d08:	f009 fd82 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    cell_3_voltage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IQZJ));
 8011d0c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011d10:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	f503 7488 	add.w	r4, r3, #272	; 0x110
 8011d1a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011d1e:	2124      	movs	r1, #36	; 0x24
 8011d20:	4618      	mov	r0, r3
 8011d22:	f7ff f805 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 8011d26:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011d2a:	4619      	mov	r1, r3
 8011d2c:	4620      	mov	r0, r4
 8011d2e:	f009 fd8f 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011d32:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011d36:	4618      	mov	r0, r3
 8011d38:	f7fd fec8 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    cell_4_voltage.setXY(7, 260);
 8011d3c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011d40:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8011d4a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011d4e:	2107      	movs	r1, #7
 8011d50:	4618      	mov	r0, r3
 8011d52:	f7fe fef3 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    cell_4_voltage.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011d56:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011d5a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	f503 74ae 	add.w	r4, r3, #348	; 0x15c
 8011d64:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011d68:	f2a3 1351 	subw	r3, r3, #337	; 0x151
 8011d6c:	22ff      	movs	r2, #255	; 0xff
 8011d6e:	701a      	strb	r2, [r3, #0]
 8011d70:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011d74:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8011d78:	22ff      	movs	r2, #255	; 0xff
 8011d7a:	701a      	strb	r2, [r3, #0]
 8011d7c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011d80:	f2a3 1353 	subw	r3, r3, #339	; 0x153
 8011d84:	22ff      	movs	r2, #255	; 0xff
 8011d86:	701a      	strb	r2, [r3, #0]
 8011d88:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011d8c:	f2a3 1351 	subw	r3, r3, #337	; 0x151
 8011d90:	781b      	ldrb	r3, [r3, #0]
 8011d92:	041b      	lsls	r3, r3, #16
 8011d94:	461a      	mov	r2, r3
 8011d96:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011d9a:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8011d9e:	781b      	ldrb	r3, [r3, #0]
 8011da0:	021b      	lsls	r3, r3, #8
 8011da2:	431a      	orrs	r2, r3
 8011da4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011da8:	f2a3 1353 	subw	r3, r3, #339	; 0x153
 8011dac:	781b      	ldrb	r3, [r3, #0]
 8011dae:	4313      	orrs	r3, r2
 8011db0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8011db8:	4611      	mov	r1, r2
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f7fe fdec 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8011dc0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011dc4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	461a      	mov	r2, r3
 8011dcc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011dd0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8011dd4:	601c      	str	r4, [r3, #0]
 8011dd6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011dda:	f5a3 7357 	sub.w	r3, r3, #860	; 0x35c
 8011dde:	601a      	str	r2, [r3, #0]
        color = newColor;
 8011de0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011de4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8011dee:	f5a2 7257 	sub.w	r2, r2, #860	; 0x35c
 8011df2:	6812      	ldr	r2, [r2, #0]
 8011df4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011df6:	bf00      	nop
    cell_4_voltage.setLinespacing(0);
 8011df8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011dfc:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
 8011e06:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011e0a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8011e0e:	601a      	str	r2, [r3, #0]
 8011e10:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011e14:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
 8011e18:	2200      	movs	r2, #0
 8011e1a:	801a      	strh	r2, [r3, #0]
        linespace = space;
 8011e1c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011e20:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8011e2a:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
 8011e2e:	8812      	ldrh	r2, [r2, #0]
 8011e30:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8011e32:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011e36:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	3384      	adds	r3, #132	; 0x84
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8011e46:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8011e4a:	6814      	ldr	r4, [r2, #0]
 8011e4c:	4638      	mov	r0, r7
 8011e4e:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8011e52:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8011e56:	6811      	ldr	r1, [r2, #0]
 8011e58:	4798      	blx	r3
 8011e5a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011e5e:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 8011e62:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8011e66:	ca07      	ldmia	r2, {r0, r1, r2}
 8011e68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8011e6c:	bf00      	nop
    Unicode::snprintf(cell_4_voltageBuffer, CELL_4_VOLTAGE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_204P).getText());
 8011e6e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011e72:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	f503 64d7 	add.w	r4, r3, #1720	; 0x6b8
 8011e7c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011e80:	2121      	movs	r1, #33	; 0x21
 8011e82:	4618      	mov	r0, r3
 8011e84:	f7fe ff54 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011e88:	4b14      	ldr	r3, [pc, #80]	; (8011edc <_ZN8cellBaseC1Ev+0xcc0>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d105      	bne.n	8011e9c <_ZN8cellBaseC1Ev+0xc80>
 8011e90:	4b13      	ldr	r3, [pc, #76]	; (8011ee0 <_ZN8cellBaseC1Ev+0xcc4>)
 8011e92:	4a14      	ldr	r2, [pc, #80]	; (8011ee4 <_ZN8cellBaseC1Ev+0xcc8>)
 8011e94:	2160      	movs	r1, #96	; 0x60
 8011e96:	4814      	ldr	r0, [pc, #80]	; (8011ee8 <_ZN8cellBaseC1Ev+0xccc>)
 8011e98:	f01b fd18 	bl	802d8cc <__assert_func>
 8011e9c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011ea0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8011ea4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8011ea8:	601a      	str	r2, [r3, #0]
        return typedTextId < numberOfTypedTexts;
 8011eaa:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011eae:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	889a      	ldrh	r2, [r3, #4]
 8011eb6:	4b0d      	ldr	r3, [pc, #52]	; (8011eec <_ZN8cellBaseC1Ev+0xcd0>)
 8011eb8:	881b      	ldrh	r3, [r3, #0]
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	bf34      	ite	cc
 8011ebe:	2301      	movcc	r3, #1
 8011ec0:	2300      	movcs	r3, #0
 8011ec2:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d115      	bne.n	8011ef4 <_ZN8cellBaseC1Ev+0xcd8>
 8011ec8:	4b09      	ldr	r3, [pc, #36]	; (8011ef0 <_ZN8cellBaseC1Ev+0xcd4>)
 8011eca:	4a06      	ldr	r2, [pc, #24]	; (8011ee4 <_ZN8cellBaseC1Ev+0xcc8>)
 8011ecc:	2161      	movs	r1, #97	; 0x61
 8011ece:	4806      	ldr	r0, [pc, #24]	; (8011ee8 <_ZN8cellBaseC1Ev+0xccc>)
 8011ed0:	f01b fcfc 	bl	802d8cc <__assert_func>
 8011ed4:	2000f1c8 	.word	0x2000f1c8
 8011ed8:	0802efe8 	.word	0x0802efe8
 8011edc:	2000f1bc 	.word	0x2000f1bc
 8011ee0:	0802eeac 	.word	0x0802eeac
 8011ee4:	0802efb0 	.word	0x0802efb0
 8011ee8:	0802ef2c 	.word	0x0802ef2c
 8011eec:	2000f1c0 	.word	0x2000f1c0
 8011ef0:	0802ef70 	.word	0x0802ef70
 8011ef4:	bf00      	nop
        return texts->getText(typedTextId);
 8011ef6:	4b8b      	ldr	r3, [pc, #556]	; (8012124 <_ZN8cellBaseC1Ev+0xf08>)
 8011ef8:	681a      	ldr	r2, [r3, #0]
 8011efa:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011efe:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 8011f02:	889b      	ldrh	r3, [r3, #4]
 8011f04:	4619      	mov	r1, r3
 8011f06:	4610      	mov	r0, r2
 8011f08:	f004 f834 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	bf00      	nop
 8011f10:	4a85      	ldr	r2, [pc, #532]	; (8012128 <_ZN8cellBaseC1Ev+0xf0c>)
 8011f12:	210a      	movs	r1, #10
 8011f14:	4620      	mov	r0, r4
 8011f16:	f00f f957 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011f1a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f7fd fdd4 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    cell_4_voltage.setWildcard(cell_4_voltageBuffer);
 8011f24:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011f28:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
 8011f32:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011f36:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	f503 63d7 	add.w	r3, r3, #1720	; 0x6b8
 8011f40:	4619      	mov	r1, r3
 8011f42:	4610      	mov	r0, r2
 8011f44:	f7ff f93a 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cell_4_voltage.resizeToCurrentText();
 8011f48:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011f4c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8011f56:	4618      	mov	r0, r3
 8011f58:	f009 fc5a 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    cell_4_voltage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XU47));
 8011f5c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011f60:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	f503 74ae 	add.w	r4, r3, #348	; 0x15c
 8011f6a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011f6e:	2122      	movs	r1, #34	; 0x22
 8011f70:	4618      	mov	r0, r3
 8011f72:	f7fe fedd 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 8011f76:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011f7a:	4619      	mov	r1, r3
 8011f7c:	4620      	mov	r0, r4
 8011f7e:	f009 fc67 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011f82:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8011f86:	4618      	mov	r0, r3
 8011f88:	f7fd fda0 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    cell_5_voltage.setXY(7, 288);
 8011f8c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011f90:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8011f9a:	f44f 7290 	mov.w	r2, #288	; 0x120
 8011f9e:	2107      	movs	r1, #7
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f7fe fdcb 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    cell_5_voltage.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011fa6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011faa:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 8011fb4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011fb8:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 8011fbc:	22ff      	movs	r2, #255	; 0xff
 8011fbe:	701a      	strb	r2, [r3, #0]
 8011fc0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011fc4:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8011fc8:	22ff      	movs	r2, #255	; 0xff
 8011fca:	701a      	strb	r2, [r3, #0]
 8011fcc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011fd0:	f2a3 133f 	subw	r3, r3, #319	; 0x13f
 8011fd4:	22ff      	movs	r2, #255	; 0xff
 8011fd6:	701a      	strb	r2, [r3, #0]
 8011fd8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011fdc:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 8011fe0:	781b      	ldrb	r3, [r3, #0]
 8011fe2:	041b      	lsls	r3, r3, #16
 8011fe4:	461a      	mov	r2, r3
 8011fe6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011fea:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8011fee:	781b      	ldrb	r3, [r3, #0]
 8011ff0:	021b      	lsls	r3, r3, #8
 8011ff2:	431a      	orrs	r2, r3
 8011ff4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8011ff8:	f2a3 133f 	subw	r3, r3, #319	; 0x13f
 8011ffc:	781b      	ldrb	r3, [r3, #0]
 8011ffe:	4313      	orrs	r3, r2
 8012000:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012004:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8012008:	4611      	mov	r1, r2
 801200a:	4618      	mov	r0, r3
 801200c:	f7fe fcc4 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8012010:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012014:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	461a      	mov	r2, r3
 801201c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012020:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8012024:	601c      	str	r4, [r3, #0]
 8012026:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801202a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 801202e:	601a      	str	r2, [r3, #0]
        color = newColor;
 8012030:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012034:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 801203e:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8012042:	6812      	ldr	r2, [r2, #0]
 8012044:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012046:	bf00      	nop
    cell_5_voltage.setLinespacing(0);
 8012048:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801204c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8012056:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801205a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801205e:	601a      	str	r2, [r3, #0]
 8012060:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012064:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8012068:	2200      	movs	r2, #0
 801206a:	801a      	strh	r2, [r3, #0]
        linespace = space;
 801206c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012070:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 801207a:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 801207e:	8812      	ldrh	r2, [r2, #0]
 8012080:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8012082:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012086:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	3384      	adds	r3, #132	; 0x84
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8012096:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 801209a:	6814      	ldr	r4, [r2, #0]
 801209c:	4638      	mov	r0, r7
 801209e:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 80120a2:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80120a6:	6811      	ldr	r1, [r2, #0]
 80120a8:	4798      	blx	r3
 80120aa:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80120ae:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 80120b2:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80120b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80120b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80120bc:	bf00      	nop
    Unicode::snprintf(cell_5_voltageBuffer, CELL_5_VOLTAGE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_0B4T).getText());
 80120be:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80120c2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	f203 64cc 	addw	r4, r3, #1740	; 0x6cc
 80120cc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80120d0:	211f      	movs	r1, #31
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7fe fe2c 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80120d8:	4b14      	ldr	r3, [pc, #80]	; (801212c <_ZN8cellBaseC1Ev+0xf10>)
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d105      	bne.n	80120ec <_ZN8cellBaseC1Ev+0xed0>
 80120e0:	4b13      	ldr	r3, [pc, #76]	; (8012130 <_ZN8cellBaseC1Ev+0xf14>)
 80120e2:	4a14      	ldr	r2, [pc, #80]	; (8012134 <_ZN8cellBaseC1Ev+0xf18>)
 80120e4:	2160      	movs	r1, #96	; 0x60
 80120e6:	4814      	ldr	r0, [pc, #80]	; (8012138 <_ZN8cellBaseC1Ev+0xf1c>)
 80120e8:	f01b fbf0 	bl	802d8cc <__assert_func>
 80120ec:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80120f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80120f4:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 80120f8:	601a      	str	r2, [r3, #0]
        return typedTextId < numberOfTypedTexts;
 80120fa:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80120fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	889a      	ldrh	r2, [r3, #4]
 8012106:	4b0d      	ldr	r3, [pc, #52]	; (801213c <_ZN8cellBaseC1Ev+0xf20>)
 8012108:	881b      	ldrh	r3, [r3, #0]
 801210a:	429a      	cmp	r2, r3
 801210c:	bf34      	ite	cc
 801210e:	2301      	movcc	r3, #1
 8012110:	2300      	movcs	r3, #0
 8012112:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8012114:	2b00      	cmp	r3, #0
 8012116:	d115      	bne.n	8012144 <_ZN8cellBaseC1Ev+0xf28>
 8012118:	4b09      	ldr	r3, [pc, #36]	; (8012140 <_ZN8cellBaseC1Ev+0xf24>)
 801211a:	4a06      	ldr	r2, [pc, #24]	; (8012134 <_ZN8cellBaseC1Ev+0xf18>)
 801211c:	2161      	movs	r1, #97	; 0x61
 801211e:	4806      	ldr	r0, [pc, #24]	; (8012138 <_ZN8cellBaseC1Ev+0xf1c>)
 8012120:	f01b fbd4 	bl	802d8cc <__assert_func>
 8012124:	2000f1c8 	.word	0x2000f1c8
 8012128:	0802efe8 	.word	0x0802efe8
 801212c:	2000f1bc 	.word	0x2000f1bc
 8012130:	0802eeac 	.word	0x0802eeac
 8012134:	0802efb0 	.word	0x0802efb0
 8012138:	0802ef2c 	.word	0x0802ef2c
 801213c:	2000f1c0 	.word	0x2000f1c0
 8012140:	0802ef70 	.word	0x0802ef70
 8012144:	bf00      	nop
        return texts->getText(typedTextId);
 8012146:	4b8b      	ldr	r3, [pc, #556]	; (8012374 <_ZN8cellBaseC1Ev+0x1158>)
 8012148:	681a      	ldr	r2, [r3, #0]
 801214a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801214e:	f5a3 733e 	sub.w	r3, r3, #760	; 0x2f8
 8012152:	889b      	ldrh	r3, [r3, #4]
 8012154:	4619      	mov	r1, r3
 8012156:	4610      	mov	r0, r2
 8012158:	f003 ff0c 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 801215c:	4603      	mov	r3, r0
 801215e:	bf00      	nop
 8012160:	4a85      	ldr	r2, [pc, #532]	; (8012378 <_ZN8cellBaseC1Ev+0x115c>)
 8012162:	210a      	movs	r1, #10
 8012164:	4620      	mov	r0, r4
 8012166:	f00f f82f 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801216a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801216e:	4618      	mov	r0, r3
 8012170:	f7fd fcac 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    cell_5_voltage.setWildcard(cell_5_voltageBuffer);
 8012174:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012178:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8012182:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012186:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	f203 63cc 	addw	r3, r3, #1740	; 0x6cc
 8012190:	4619      	mov	r1, r3
 8012192:	4610      	mov	r0, r2
 8012194:	f7ff f812 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cell_5_voltage.resizeToCurrentText();
 8012198:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801219c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80121a6:	4618      	mov	r0, r3
 80121a8:	f009 fb32 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    cell_5_voltage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_USJE));
 80121ac:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80121b0:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	f503 74d4 	add.w	r4, r3, #424	; 0x1a8
 80121ba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80121be:	2120      	movs	r1, #32
 80121c0:	4618      	mov	r0, r3
 80121c2:	f7fe fdb5 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 80121c6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80121ca:	4619      	mov	r1, r3
 80121cc:	4620      	mov	r0, r4
 80121ce:	f009 fb3f 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80121d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80121d6:	4618      	mov	r0, r3
 80121d8:	f7fd fc78 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    cell_6_voltage.setXY(7, 316);
 80121dc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80121e0:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80121ea:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80121ee:	2107      	movs	r1, #7
 80121f0:	4618      	mov	r0, r3
 80121f2:	f7fe fca3 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    cell_6_voltage.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80121f6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80121fa:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 8012204:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012208:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 801220c:	22ff      	movs	r2, #255	; 0xff
 801220e:	701a      	strb	r2, [r3, #0]
 8012210:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012214:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8012218:	22ff      	movs	r2, #255	; 0xff
 801221a:	701a      	strb	r2, [r3, #0]
 801221c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012220:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8012224:	22ff      	movs	r2, #255	; 0xff
 8012226:	701a      	strb	r2, [r3, #0]
 8012228:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801222c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8012230:	781b      	ldrb	r3, [r3, #0]
 8012232:	041b      	lsls	r3, r3, #16
 8012234:	461a      	mov	r2, r3
 8012236:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801223a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801223e:	781b      	ldrb	r3, [r3, #0]
 8012240:	021b      	lsls	r3, r3, #8
 8012242:	431a      	orrs	r2, r3
 8012244:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012248:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	4313      	orrs	r3, r2
 8012250:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012254:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8012258:	4611      	mov	r1, r2
 801225a:	4618      	mov	r0, r3
 801225c:	f7fe fb9c 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8012260:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012264:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	461a      	mov	r2, r3
 801226c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012270:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8012274:	601c      	str	r4, [r3, #0]
 8012276:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801227a:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 801227e:	601a      	str	r2, [r3, #0]
        color = newColor;
 8012280:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012284:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 801228e:	f5a2 7259 	sub.w	r2, r2, #868	; 0x364
 8012292:	6812      	ldr	r2, [r2, #0]
 8012294:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012296:	bf00      	nop
    cell_6_voltage.setLinespacing(0);
 8012298:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801229c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 80122a6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80122aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80122ae:	601a      	str	r2, [r3, #0]
 80122b0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80122b4:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 80122b8:	2200      	movs	r2, #0
 80122ba:	801a      	strh	r2, [r3, #0]
        linespace = space;
 80122bc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80122c0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 80122ca:	f5a2 7291 	sub.w	r2, r2, #290	; 0x122
 80122ce:	8812      	ldrh	r2, [r2, #0]
 80122d0:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80122d2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80122d6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	3384      	adds	r3, #132	; 0x84
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 80122e6:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80122ea:	6814      	ldr	r4, [r2, #0]
 80122ec:	4638      	mov	r0, r7
 80122ee:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 80122f2:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80122f6:	6811      	ldr	r1, [r2, #0]
 80122f8:	4798      	blx	r3
 80122fa:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80122fe:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 8012302:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8012306:	ca07      	ldmia	r2, {r0, r1, r2}
 8012308:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801230c:	bf00      	nop
    Unicode::snprintf(cell_6_voltageBuffer, CELL_6_VOLTAGE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_P3W7).getText());
 801230e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012312:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	f503 64dc 	add.w	r4, r3, #1760	; 0x6e0
 801231c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8012320:	211d      	movs	r1, #29
 8012322:	4618      	mov	r0, r3
 8012324:	f7fe fd04 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012328:	4b14      	ldr	r3, [pc, #80]	; (801237c <_ZN8cellBaseC1Ev+0x1160>)
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d105      	bne.n	801233c <_ZN8cellBaseC1Ev+0x1120>
 8012330:	4b13      	ldr	r3, [pc, #76]	; (8012380 <_ZN8cellBaseC1Ev+0x1164>)
 8012332:	4a14      	ldr	r2, [pc, #80]	; (8012384 <_ZN8cellBaseC1Ev+0x1168>)
 8012334:	2160      	movs	r1, #96	; 0x60
 8012336:	4814      	ldr	r0, [pc, #80]	; (8012388 <_ZN8cellBaseC1Ev+0x116c>)
 8012338:	f01b fac8 	bl	802d8cc <__assert_func>
 801233c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012340:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012344:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8012348:	601a      	str	r2, [r3, #0]
        return typedTextId < numberOfTypedTexts;
 801234a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801234e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	889a      	ldrh	r2, [r3, #4]
 8012356:	4b0d      	ldr	r3, [pc, #52]	; (801238c <_ZN8cellBaseC1Ev+0x1170>)
 8012358:	881b      	ldrh	r3, [r3, #0]
 801235a:	429a      	cmp	r2, r3
 801235c:	bf34      	ite	cc
 801235e:	2301      	movcc	r3, #1
 8012360:	2300      	movcs	r3, #0
 8012362:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8012364:	2b00      	cmp	r3, #0
 8012366:	d115      	bne.n	8012394 <_ZN8cellBaseC1Ev+0x1178>
 8012368:	4b09      	ldr	r3, [pc, #36]	; (8012390 <_ZN8cellBaseC1Ev+0x1174>)
 801236a:	4a06      	ldr	r2, [pc, #24]	; (8012384 <_ZN8cellBaseC1Ev+0x1168>)
 801236c:	2161      	movs	r1, #97	; 0x61
 801236e:	4806      	ldr	r0, [pc, #24]	; (8012388 <_ZN8cellBaseC1Ev+0x116c>)
 8012370:	f01b faac 	bl	802d8cc <__assert_func>
 8012374:	2000f1c8 	.word	0x2000f1c8
 8012378:	0802efe8 	.word	0x0802efe8
 801237c:	2000f1bc 	.word	0x2000f1bc
 8012380:	0802eeac 	.word	0x0802eeac
 8012384:	0802efb0 	.word	0x0802efb0
 8012388:	0802ef2c 	.word	0x0802ef2c
 801238c:	2000f1c0 	.word	0x2000f1c0
 8012390:	0802ef70 	.word	0x0802ef70
 8012394:	bf00      	nop
        return texts->getText(typedTextId);
 8012396:	4b8b      	ldr	r3, [pc, #556]	; (80125c4 <_ZN8cellBaseC1Ev+0x13a8>)
 8012398:	681a      	ldr	r2, [r3, #0]
 801239a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801239e:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80123a2:	889b      	ldrh	r3, [r3, #4]
 80123a4:	4619      	mov	r1, r3
 80123a6:	4610      	mov	r0, r2
 80123a8:	f003 fde4 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 80123ac:	4603      	mov	r3, r0
 80123ae:	bf00      	nop
 80123b0:	4a85      	ldr	r2, [pc, #532]	; (80125c8 <_ZN8cellBaseC1Ev+0x13ac>)
 80123b2:	210a      	movs	r1, #10
 80123b4:	4620      	mov	r0, r4
 80123b6:	f00e ff07 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80123ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80123be:	4618      	mov	r0, r3
 80123c0:	f7fd fb84 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    cell_6_voltage.setWildcard(cell_6_voltageBuffer);
 80123c4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80123c8:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 80123d2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80123d6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	f503 63dc 	add.w	r3, r3, #1760	; 0x6e0
 80123e0:	4619      	mov	r1, r3
 80123e2:	4610      	mov	r0, r2
 80123e4:	f7fe feea 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cell_6_voltage.resizeToCurrentText();
 80123e8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80123ec:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80123f6:	4618      	mov	r0, r3
 80123f8:	f009 fa0a 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    cell_6_voltage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_I8VP));
 80123fc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012400:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
 801240a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801240e:	211e      	movs	r1, #30
 8012410:	4618      	mov	r0, r3
 8012412:	f7fe fc8d 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 8012416:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801241a:	4619      	mov	r1, r3
 801241c:	4620      	mov	r0, r4
 801241e:	f009 fa17 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012422:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8012426:	4618      	mov	r0, r3
 8012428:	f7fd fb50 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    cell_7_voltage.setXY(7, 344);
 801242c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012430:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	f503 7310 	add.w	r3, r3, #576	; 0x240
 801243a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801243e:	2107      	movs	r1, #7
 8012440:	4618      	mov	r0, r3
 8012442:	f7fe fb7b 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    cell_7_voltage.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012446:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801244a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	f503 7410 	add.w	r4, r3, #576	; 0x240
 8012454:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012458:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 801245c:	22ff      	movs	r2, #255	; 0xff
 801245e:	701a      	strb	r2, [r3, #0]
 8012460:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012464:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 8012468:	22ff      	movs	r2, #255	; 0xff
 801246a:	701a      	strb	r2, [r3, #0]
 801246c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012470:	f2a3 1317 	subw	r3, r3, #279	; 0x117
 8012474:	22ff      	movs	r2, #255	; 0xff
 8012476:	701a      	strb	r2, [r3, #0]
 8012478:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801247c:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8012480:	781b      	ldrb	r3, [r3, #0]
 8012482:	041b      	lsls	r3, r3, #16
 8012484:	461a      	mov	r2, r3
 8012486:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801248a:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 801248e:	781b      	ldrb	r3, [r3, #0]
 8012490:	021b      	lsls	r3, r3, #8
 8012492:	431a      	orrs	r2, r3
 8012494:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012498:	f2a3 1317 	subw	r3, r3, #279	; 0x117
 801249c:	781b      	ldrb	r3, [r3, #0]
 801249e:	4313      	orrs	r3, r2
 80124a0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80124a4:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 80124a8:	4611      	mov	r1, r2
 80124aa:	4618      	mov	r0, r3
 80124ac:	f7fe fa74 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 80124b0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80124b4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	461a      	mov	r2, r3
 80124bc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80124c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80124c4:	601c      	str	r4, [r3, #0]
 80124c6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80124ca:	f5a3 735a 	sub.w	r3, r3, #872	; 0x368
 80124ce:	601a      	str	r2, [r3, #0]
        color = newColor;
 80124d0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80124d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 80124de:	f5a2 725a 	sub.w	r2, r2, #872	; 0x368
 80124e2:	6812      	ldr	r2, [r2, #0]
 80124e4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80124e6:	bf00      	nop
    cell_7_voltage.setLinespacing(0);
 80124e8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80124ec:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	f503 7210 	add.w	r2, r3, #576	; 0x240
 80124f6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80124fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80124fe:	601a      	str	r2, [r3, #0]
 8012500:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012504:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8012508:	2200      	movs	r2, #0
 801250a:	801a      	strh	r2, [r3, #0]
        linespace = space;
 801250c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012510:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 801251a:	f5a2 7287 	sub.w	r2, r2, #270	; 0x10e
 801251e:	8812      	ldrh	r2, [r2, #0]
 8012520:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8012522:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012526:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	3384      	adds	r3, #132	; 0x84
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8012536:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 801253a:	6814      	ldr	r4, [r2, #0]
 801253c:	4638      	mov	r0, r7
 801253e:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8012542:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8012546:	6811      	ldr	r1, [r2, #0]
 8012548:	4798      	blx	r3
 801254a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801254e:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 8012552:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8012556:	ca07      	ldmia	r2, {r0, r1, r2}
 8012558:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801255c:	bf00      	nop
    Unicode::snprintf(cell_7_voltageBuffer, CELL_7_VOLTAGE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_991B).getText());
 801255e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012562:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	f203 64f4 	addw	r4, r3, #1780	; 0x6f4
 801256c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8012570:	211b      	movs	r1, #27
 8012572:	4618      	mov	r0, r3
 8012574:	f7fe fbdc 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012578:	4b14      	ldr	r3, [pc, #80]	; (80125cc <_ZN8cellBaseC1Ev+0x13b0>)
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d105      	bne.n	801258c <_ZN8cellBaseC1Ev+0x1370>
 8012580:	4b13      	ldr	r3, [pc, #76]	; (80125d0 <_ZN8cellBaseC1Ev+0x13b4>)
 8012582:	4a14      	ldr	r2, [pc, #80]	; (80125d4 <_ZN8cellBaseC1Ev+0x13b8>)
 8012584:	2160      	movs	r1, #96	; 0x60
 8012586:	4814      	ldr	r0, [pc, #80]	; (80125d8 <_ZN8cellBaseC1Ev+0x13bc>)
 8012588:	f01b f9a0 	bl	802d8cc <__assert_func>
 801258c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012594:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8012598:	601a      	str	r2, [r3, #0]
        return typedTextId < numberOfTypedTexts;
 801259a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801259e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	889a      	ldrh	r2, [r3, #4]
 80125a6:	4b0d      	ldr	r3, [pc, #52]	; (80125dc <_ZN8cellBaseC1Ev+0x13c0>)
 80125a8:	881b      	ldrh	r3, [r3, #0]
 80125aa:	429a      	cmp	r2, r3
 80125ac:	bf34      	ite	cc
 80125ae:	2301      	movcc	r3, #1
 80125b0:	2300      	movcs	r3, #0
 80125b2:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d115      	bne.n	80125e4 <_ZN8cellBaseC1Ev+0x13c8>
 80125b8:	4b09      	ldr	r3, [pc, #36]	; (80125e0 <_ZN8cellBaseC1Ev+0x13c4>)
 80125ba:	4a06      	ldr	r2, [pc, #24]	; (80125d4 <_ZN8cellBaseC1Ev+0x13b8>)
 80125bc:	2161      	movs	r1, #97	; 0x61
 80125be:	4806      	ldr	r0, [pc, #24]	; (80125d8 <_ZN8cellBaseC1Ev+0x13bc>)
 80125c0:	f01b f984 	bl	802d8cc <__assert_func>
 80125c4:	2000f1c8 	.word	0x2000f1c8
 80125c8:	0802efe8 	.word	0x0802efe8
 80125cc:	2000f1bc 	.word	0x2000f1bc
 80125d0:	0802eeac 	.word	0x0802eeac
 80125d4:	0802efb0 	.word	0x0802efb0
 80125d8:	0802ef2c 	.word	0x0802ef2c
 80125dc:	2000f1c0 	.word	0x2000f1c0
 80125e0:	0802ef70 	.word	0x0802ef70
 80125e4:	bf00      	nop
        return texts->getText(typedTextId);
 80125e6:	4b7e      	ldr	r3, [pc, #504]	; (80127e0 <_ZN8cellBaseC1Ev+0x15c4>)
 80125e8:	681a      	ldr	r2, [r3, #0]
 80125ea:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80125ee:	f5a3 7336 	sub.w	r3, r3, #728	; 0x2d8
 80125f2:	889b      	ldrh	r3, [r3, #4]
 80125f4:	4619      	mov	r1, r3
 80125f6:	4610      	mov	r0, r2
 80125f8:	f003 fcbc 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 80125fc:	4603      	mov	r3, r0
 80125fe:	bf00      	nop
 8012600:	4a78      	ldr	r2, [pc, #480]	; (80127e4 <_ZN8cellBaseC1Ev+0x15c8>)
 8012602:	210a      	movs	r1, #10
 8012604:	4620      	mov	r0, r4
 8012606:	f00e fddf 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801260a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801260e:	4618      	mov	r0, r3
 8012610:	f7fd fa5c 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    cell_7_voltage.setWildcard(cell_7_voltageBuffer);
 8012614:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012618:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	f503 7210 	add.w	r2, r3, #576	; 0x240
 8012622:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012626:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	f203 63f4 	addw	r3, r3, #1780	; 0x6f4
 8012630:	4619      	mov	r1, r3
 8012632:	4610      	mov	r0, r2
 8012634:	f7fe fdc2 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cell_7_voltage.resizeToCurrentText();
 8012638:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801263c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8012646:	4618      	mov	r0, r3
 8012648:	f009 f8e2 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    cell_7_voltage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_E4KI));
 801264c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012650:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	f503 7410 	add.w	r4, r3, #576	; 0x240
 801265a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801265e:	211c      	movs	r1, #28
 8012660:	4618      	mov	r0, r3
 8012662:	f7fe fb65 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 8012666:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801266a:	4619      	mov	r1, r3
 801266c:	4620      	mov	r0, r4
 801266e:	f009 f8ef 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012672:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8012676:	4618      	mov	r0, r3
 8012678:	f7fd fa28 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    cell_8_voltage.setXY(7, 372);
 801267c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012680:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801268a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801268e:	2107      	movs	r1, #7
 8012690:	4618      	mov	r0, r3
 8012692:	f7fe fa53 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    cell_8_voltage.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012696:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801269a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	f503 7423 	add.w	r4, r3, #652	; 0x28c
 80126a4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80126a8:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80126ac:	22ff      	movs	r2, #255	; 0xff
 80126ae:	701a      	strb	r2, [r3, #0]
 80126b0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80126b4:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80126b8:	22ff      	movs	r2, #255	; 0xff
 80126ba:	701a      	strb	r2, [r3, #0]
 80126bc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80126c0:	f2a3 1303 	subw	r3, r3, #259	; 0x103
 80126c4:	22ff      	movs	r2, #255	; 0xff
 80126c6:	701a      	strb	r2, [r3, #0]
 80126c8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80126cc:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80126d0:	781b      	ldrb	r3, [r3, #0]
 80126d2:	041b      	lsls	r3, r3, #16
 80126d4:	461a      	mov	r2, r3
 80126d6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80126da:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80126de:	781b      	ldrb	r3, [r3, #0]
 80126e0:	021b      	lsls	r3, r3, #8
 80126e2:	431a      	orrs	r2, r3
 80126e4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80126e8:	f2a3 1303 	subw	r3, r3, #259	; 0x103
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	4313      	orrs	r3, r2
 80126f0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80126f4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80126f8:	4611      	mov	r1, r2
 80126fa:	4618      	mov	r0, r3
 80126fc:	f7fe f94c 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8012700:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012704:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	461a      	mov	r2, r3
 801270c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012710:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012714:	601c      	str	r4, [r3, #0]
 8012716:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801271a:	f5a3 735b 	sub.w	r3, r3, #876	; 0x36c
 801271e:	601a      	str	r2, [r3, #0]
        color = newColor;
 8012720:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012724:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 801272e:	f5a2 725b 	sub.w	r2, r2, #876	; 0x36c
 8012732:	6812      	ldr	r2, [r2, #0]
 8012734:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012736:	bf00      	nop
    cell_8_voltage.setLinespacing(0);
 8012738:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801273c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012746:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 801274a:	2300      	movs	r3, #0
 801274c:	f8a7 32be 	strh.w	r3, [r7, #702]	; 0x2be
        linespace = space;
 8012750:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8012754:	f8b7 22be 	ldrh.w	r2, [r7, #702]	; 0x2be
 8012758:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 801275a:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	3384      	adds	r3, #132	; 0x84
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	f8d7 42c0 	ldr.w	r4, [r7, #704]	; 0x2c0
 8012768:	463a      	mov	r2, r7
 801276a:	f8d7 12c0 	ldr.w	r1, [r7, #704]	; 0x2c0
 801276e:	4610      	mov	r0, r2
 8012770:	4798      	blx	r3
 8012772:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012776:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 801277a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 801277e:	ca07      	ldmia	r2, {r0, r1, r2}
 8012780:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8012784:	bf00      	nop
    Unicode::snprintf(cell_8_voltageBuffer, CELL_8_VOLTAGE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_PJUS).getText());
 8012786:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801278a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	f503 64e1 	add.w	r4, r3, #1800	; 0x708
 8012794:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8012798:	2119      	movs	r1, #25
 801279a:	4618      	mov	r0, r3
 801279c:	f7fe fac8 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80127a0:	4b11      	ldr	r3, [pc, #68]	; (80127e8 <_ZN8cellBaseC1Ev+0x15cc>)
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d105      	bne.n	80127b4 <_ZN8cellBaseC1Ev+0x1598>
 80127a8:	4b10      	ldr	r3, [pc, #64]	; (80127ec <_ZN8cellBaseC1Ev+0x15d0>)
 80127aa:	4a11      	ldr	r2, [pc, #68]	; (80127f0 <_ZN8cellBaseC1Ev+0x15d4>)
 80127ac:	2160      	movs	r1, #96	; 0x60
 80127ae:	4811      	ldr	r0, [pc, #68]	; (80127f4 <_ZN8cellBaseC1Ev+0x15d8>)
 80127b0:	f01b f88c 	bl	802d8cc <__assert_func>
 80127b4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80127b8:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
        return typedTextId < numberOfTypedTexts;
 80127bc:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 80127c0:	889a      	ldrh	r2, [r3, #4]
 80127c2:	4b0d      	ldr	r3, [pc, #52]	; (80127f8 <_ZN8cellBaseC1Ev+0x15dc>)
 80127c4:	881b      	ldrh	r3, [r3, #0]
 80127c6:	429a      	cmp	r2, r3
 80127c8:	bf34      	ite	cc
 80127ca:	2301      	movcc	r3, #1
 80127cc:	2300      	movcs	r3, #0
 80127ce:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d115      	bne.n	8012800 <_ZN8cellBaseC1Ev+0x15e4>
 80127d4:	4b09      	ldr	r3, [pc, #36]	; (80127fc <_ZN8cellBaseC1Ev+0x15e0>)
 80127d6:	4a06      	ldr	r2, [pc, #24]	; (80127f0 <_ZN8cellBaseC1Ev+0x15d4>)
 80127d8:	2161      	movs	r1, #97	; 0x61
 80127da:	4806      	ldr	r0, [pc, #24]	; (80127f4 <_ZN8cellBaseC1Ev+0x15d8>)
 80127dc:	f01b f876 	bl	802d8cc <__assert_func>
 80127e0:	2000f1c8 	.word	0x2000f1c8
 80127e4:	0802efe8 	.word	0x0802efe8
 80127e8:	2000f1bc 	.word	0x2000f1bc
 80127ec:	0802eeac 	.word	0x0802eeac
 80127f0:	0802efb0 	.word	0x0802efb0
 80127f4:	0802ef2c 	.word	0x0802ef2c
 80127f8:	2000f1c0 	.word	0x2000f1c0
 80127fc:	0802ef70 	.word	0x0802ef70
 8012800:	bf00      	nop
        return texts->getText(typedTextId);
 8012802:	4bda      	ldr	r3, [pc, #872]	; (8012b6c <_ZN8cellBaseC1Ev+0x1950>)
 8012804:	681a      	ldr	r2, [r3, #0]
 8012806:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801280a:	f5a3 7332 	sub.w	r3, r3, #712	; 0x2c8
 801280e:	889b      	ldrh	r3, [r3, #4]
 8012810:	4619      	mov	r1, r3
 8012812:	4610      	mov	r0, r2
 8012814:	f003 fbae 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 8012818:	4603      	mov	r3, r0
 801281a:	bf00      	nop
 801281c:	4ad4      	ldr	r2, [pc, #848]	; (8012b70 <_ZN8cellBaseC1Ev+0x1954>)
 801281e:	210a      	movs	r1, #10
 8012820:	4620      	mov	r0, r4
 8012822:	f00e fcd1 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012826:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801282a:	4618      	mov	r0, r3
 801282c:	f7fd f94e 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    cell_8_voltage.setWildcard(cell_8_voltageBuffer);
 8012830:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012834:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	f503 7223 	add.w	r2, r3, #652	; 0x28c
 801283e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012842:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	f503 63e1 	add.w	r3, r3, #1800	; 0x708
 801284c:	4619      	mov	r1, r3
 801284e:	4610      	mov	r0, r2
 8012850:	f7fe fcb4 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cell_8_voltage.resizeToCurrentText();
 8012854:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012858:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012862:	4618      	mov	r0, r3
 8012864:	f008 ffd4 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    cell_8_voltage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ME84));
 8012868:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801286c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	f503 7423 	add.w	r4, r3, #652	; 0x28c
 8012876:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801287a:	211a      	movs	r1, #26
 801287c:	4618      	mov	r0, r3
 801287e:	f7fe fa57 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 8012882:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8012886:	4619      	mov	r1, r3
 8012888:	4620      	mov	r0, r4
 801288a:	f008 ffe1 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801288e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8012892:	4618      	mov	r0, r3
 8012894:	f7fd f91a 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    cell_9_voltage.setXY(7, 400);
 8012898:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801289c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 80128a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80128aa:	2107      	movs	r1, #7
 80128ac:	4618      	mov	r0, r3
 80128ae:	f7fe f945 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    cell_9_voltage.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80128b2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80128b6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	f503 7436 	add.w	r4, r3, #728	; 0x2d8
 80128c0:	23ff      	movs	r3, #255	; 0xff
 80128c2:	f887 32cb 	strb.w	r3, [r7, #715]	; 0x2cb
 80128c6:	23ff      	movs	r3, #255	; 0xff
 80128c8:	f887 32ca 	strb.w	r3, [r7, #714]	; 0x2ca
 80128cc:	23ff      	movs	r3, #255	; 0xff
 80128ce:	f887 32c9 	strb.w	r3, [r7, #713]	; 0x2c9
 80128d2:	f897 32cb 	ldrb.w	r3, [r7, #715]	; 0x2cb
 80128d6:	041b      	lsls	r3, r3, #16
 80128d8:	461a      	mov	r2, r3
 80128da:	f897 32ca 	ldrb.w	r3, [r7, #714]	; 0x2ca
 80128de:	021b      	lsls	r3, r3, #8
 80128e0:	431a      	orrs	r2, r3
 80128e2:	f897 32c9 	ldrb.w	r3, [r7, #713]	; 0x2c9
 80128e6:	4313      	orrs	r3, r2
 80128e8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80128ec:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 80128f0:	4611      	mov	r1, r2
 80128f2:	4618      	mov	r0, r3
 80128f4:	f7fe f850 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 80128f8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80128fc:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	461a      	mov	r2, r3
 8012904:	f8c7 42cc 	str.w	r4, [r7, #716]	; 0x2cc
 8012908:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801290c:	f5a3 735c 	sub.w	r3, r3, #880	; 0x370
 8012910:	601a      	str	r2, [r3, #0]
        color = newColor;
 8012912:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8012916:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 801291a:	f5a2 725c 	sub.w	r2, r2, #880	; 0x370
 801291e:	6812      	ldr	r2, [r2, #0]
 8012920:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012922:	bf00      	nop
    cell_9_voltage.setLinespacing(0);
 8012924:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012928:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8012932:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8012936:	2300      	movs	r3, #0
 8012938:	f8a7 32d2 	strh.w	r3, [r7, #722]	; 0x2d2
        linespace = space;
 801293c:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8012940:	f8b7 22d2 	ldrh.w	r2, [r7, #722]	; 0x2d2
 8012944:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8012946:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	3384      	adds	r3, #132	; 0x84
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	f8d7 42d4 	ldr.w	r4, [r7, #724]	; 0x2d4
 8012954:	463a      	mov	r2, r7
 8012956:	f8d7 12d4 	ldr.w	r1, [r7, #724]	; 0x2d4
 801295a:	4610      	mov	r0, r2
 801295c:	4798      	blx	r3
 801295e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012962:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 8012966:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 801296a:	ca07      	ldmia	r2, {r0, r1, r2}
 801296c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8012970:	bf00      	nop
    Unicode::snprintf(cell_9_voltageBuffer, CELL_9_VOLTAGE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_F2SH).getText());
 8012972:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012976:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	f203 741c 	addw	r4, r3, #1820	; 0x71c
 8012980:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8012984:	2117      	movs	r1, #23
 8012986:	4618      	mov	r0, r3
 8012988:	f7fe f9d2 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801298c:	4b79      	ldr	r3, [pc, #484]	; (8012b74 <_ZN8cellBaseC1Ev+0x1958>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d105      	bne.n	80129a0 <_ZN8cellBaseC1Ev+0x1784>
 8012994:	4b78      	ldr	r3, [pc, #480]	; (8012b78 <_ZN8cellBaseC1Ev+0x195c>)
 8012996:	4a79      	ldr	r2, [pc, #484]	; (8012b7c <_ZN8cellBaseC1Ev+0x1960>)
 8012998:	2160      	movs	r1, #96	; 0x60
 801299a:	4879      	ldr	r0, [pc, #484]	; (8012b80 <_ZN8cellBaseC1Ev+0x1964>)
 801299c:	f01a ff96 	bl	802d8cc <__assert_func>
 80129a0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80129a4:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
        return typedTextId < numberOfTypedTexts;
 80129a8:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 80129ac:	889a      	ldrh	r2, [r3, #4]
 80129ae:	4b75      	ldr	r3, [pc, #468]	; (8012b84 <_ZN8cellBaseC1Ev+0x1968>)
 80129b0:	881b      	ldrh	r3, [r3, #0]
 80129b2:	429a      	cmp	r2, r3
 80129b4:	bf34      	ite	cc
 80129b6:	2301      	movcc	r3, #1
 80129b8:	2300      	movcs	r3, #0
 80129ba:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d105      	bne.n	80129cc <_ZN8cellBaseC1Ev+0x17b0>
 80129c0:	4b71      	ldr	r3, [pc, #452]	; (8012b88 <_ZN8cellBaseC1Ev+0x196c>)
 80129c2:	4a6e      	ldr	r2, [pc, #440]	; (8012b7c <_ZN8cellBaseC1Ev+0x1960>)
 80129c4:	2161      	movs	r1, #97	; 0x61
 80129c6:	486e      	ldr	r0, [pc, #440]	; (8012b80 <_ZN8cellBaseC1Ev+0x1964>)
 80129c8:	f01a ff80 	bl	802d8cc <__assert_func>
 80129cc:	bf00      	nop
        return texts->getText(typedTextId);
 80129ce:	4b67      	ldr	r3, [pc, #412]	; (8012b6c <_ZN8cellBaseC1Ev+0x1950>)
 80129d0:	681a      	ldr	r2, [r3, #0]
 80129d2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80129d6:	f5a3 732e 	sub.w	r3, r3, #696	; 0x2b8
 80129da:	889b      	ldrh	r3, [r3, #4]
 80129dc:	4619      	mov	r1, r3
 80129de:	4610      	mov	r0, r2
 80129e0:	f003 fac8 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 80129e4:	4603      	mov	r3, r0
 80129e6:	bf00      	nop
 80129e8:	4a61      	ldr	r2, [pc, #388]	; (8012b70 <_ZN8cellBaseC1Ev+0x1954>)
 80129ea:	210a      	movs	r1, #10
 80129ec:	4620      	mov	r0, r4
 80129ee:	f00e fbeb 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80129f2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7fd f868 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    cell_9_voltage.setWildcard(cell_9_voltageBuffer);
 80129fc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012a00:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	f503 7236 	add.w	r2, r3, #728	; 0x2d8
 8012a0a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012a0e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	f203 731c 	addw	r3, r3, #1820	; 0x71c
 8012a18:	4619      	mov	r1, r3
 8012a1a:	4610      	mov	r0, r2
 8012a1c:	f7fe fbce 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cell_9_voltage.resizeToCurrentText();
 8012a20:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012a24:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f008 feee 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    cell_9_voltage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_5MPS));
 8012a34:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012a38:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	f503 7436 	add.w	r4, r3, #728	; 0x2d8
 8012a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a46:	2118      	movs	r1, #24
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f7fe f971 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 8012a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a52:	4619      	mov	r1, r3
 8012a54:	4620      	mov	r0, r4
 8012a56:	f008 fefb 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f7fd f834 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    cell_10_voltage.setXY(7, 426);
 8012a64:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012a68:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8012a72:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8012a76:	2107      	movs	r1, #7
 8012a78:	4618      	mov	r0, r3
 8012a7a:	f7fe f85f 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    cell_10_voltage.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012a7e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012a82:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	f503 7449 	add.w	r4, r3, #804	; 0x324
 8012a8c:	23ff      	movs	r3, #255	; 0xff
 8012a8e:	f887 32df 	strb.w	r3, [r7, #735]	; 0x2df
 8012a92:	23ff      	movs	r3, #255	; 0xff
 8012a94:	f887 32de 	strb.w	r3, [r7, #734]	; 0x2de
 8012a98:	23ff      	movs	r3, #255	; 0xff
 8012a9a:	f887 32dd 	strb.w	r3, [r7, #733]	; 0x2dd
 8012a9e:	f897 32df 	ldrb.w	r3, [r7, #735]	; 0x2df
 8012aa2:	041b      	lsls	r3, r3, #16
 8012aa4:	461a      	mov	r2, r3
 8012aa6:	f897 32de 	ldrb.w	r3, [r7, #734]	; 0x2de
 8012aaa:	021b      	lsls	r3, r3, #8
 8012aac:	431a      	orrs	r2, r3
 8012aae:	f897 32dd 	ldrb.w	r3, [r7, #733]	; 0x2dd
 8012ab2:	4313      	orrs	r3, r2
 8012ab4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012ab8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8012abc:	4611      	mov	r1, r2
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f7fd ff6a 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8012ac4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012ac8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	461a      	mov	r2, r3
 8012ad0:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
 8012ad4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012ad8:	f5a3 735d 	sub.w	r3, r3, #884	; 0x374
 8012adc:	601a      	str	r2, [r3, #0]
        color = newColor;
 8012ade:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8012ae2:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8012ae6:	f5a2 725d 	sub.w	r2, r2, #884	; 0x374
 8012aea:	6812      	ldr	r2, [r2, #0]
 8012aec:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012aee:	bf00      	nop
    cell_10_voltage.setLinespacing(0);
 8012af0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012af4:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8012afe:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8012b02:	2300      	movs	r3, #0
 8012b04:	f8a7 32e6 	strh.w	r3, [r7, #742]	; 0x2e6
        linespace = space;
 8012b08:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8012b0c:	f8b7 22e6 	ldrh.w	r2, [r7, #742]	; 0x2e6
 8012b10:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8012b12:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	3384      	adds	r3, #132	; 0x84
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	f8d7 42e8 	ldr.w	r4, [r7, #744]	; 0x2e8
 8012b20:	463a      	mov	r2, r7
 8012b22:	f8d7 12e8 	ldr.w	r1, [r7, #744]	; 0x2e8
 8012b26:	4610      	mov	r0, r2
 8012b28:	4798      	blx	r3
 8012b2a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012b2e:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 8012b32:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8012b36:	ca07      	ldmia	r2, {r0, r1, r2}
 8012b38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8012b3c:	bf00      	nop
    Unicode::snprintf(cell_10_voltageBuffer, CELL_10_VOLTAGE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_09I4).getText());
 8012b3e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012b42:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	f503 64e6 	add.w	r4, r3, #1840	; 0x730
 8012b4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b50:	2115      	movs	r1, #21
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7fe f8ec 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012b58:	4b06      	ldr	r3, [pc, #24]	; (8012b74 <_ZN8cellBaseC1Ev+0x1958>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d115      	bne.n	8012b8c <_ZN8cellBaseC1Ev+0x1970>
 8012b60:	4b05      	ldr	r3, [pc, #20]	; (8012b78 <_ZN8cellBaseC1Ev+0x195c>)
 8012b62:	4a06      	ldr	r2, [pc, #24]	; (8012b7c <_ZN8cellBaseC1Ev+0x1960>)
 8012b64:	2160      	movs	r1, #96	; 0x60
 8012b66:	4806      	ldr	r0, [pc, #24]	; (8012b80 <_ZN8cellBaseC1Ev+0x1964>)
 8012b68:	f01a feb0 	bl	802d8cc <__assert_func>
 8012b6c:	2000f1c8 	.word	0x2000f1c8
 8012b70:	0802efe8 	.word	0x0802efe8
 8012b74:	2000f1bc 	.word	0x2000f1bc
 8012b78:	0802eeac 	.word	0x0802eeac
 8012b7c:	0802efb0 	.word	0x0802efb0
 8012b80:	0802ef2c 	.word	0x0802ef2c
 8012b84:	2000f1c0 	.word	0x2000f1c0
 8012b88:	0802ef70 	.word	0x0802ef70
 8012b8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012b90:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
        return typedTextId < numberOfTypedTexts;
 8012b94:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8012b98:	889a      	ldrh	r2, [r3, #4]
 8012b9a:	4b7a      	ldr	r3, [pc, #488]	; (8012d84 <_ZN8cellBaseC1Ev+0x1b68>)
 8012b9c:	881b      	ldrh	r3, [r3, #0]
 8012b9e:	429a      	cmp	r2, r3
 8012ba0:	bf34      	ite	cc
 8012ba2:	2301      	movcc	r3, #1
 8012ba4:	2300      	movcs	r3, #0
 8012ba6:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d105      	bne.n	8012bb8 <_ZN8cellBaseC1Ev+0x199c>
 8012bac:	4b76      	ldr	r3, [pc, #472]	; (8012d88 <_ZN8cellBaseC1Ev+0x1b6c>)
 8012bae:	4a77      	ldr	r2, [pc, #476]	; (8012d8c <_ZN8cellBaseC1Ev+0x1b70>)
 8012bb0:	2161      	movs	r1, #97	; 0x61
 8012bb2:	4877      	ldr	r0, [pc, #476]	; (8012d90 <_ZN8cellBaseC1Ev+0x1b74>)
 8012bb4:	f01a fe8a 	bl	802d8cc <__assert_func>
 8012bb8:	bf00      	nop
        return texts->getText(typedTextId);
 8012bba:	4b76      	ldr	r3, [pc, #472]	; (8012d94 <_ZN8cellBaseC1Ev+0x1b78>)
 8012bbc:	681a      	ldr	r2, [r3, #0]
 8012bbe:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012bc2:	f5a3 732a 	sub.w	r3, r3, #680	; 0x2a8
 8012bc6:	889b      	ldrh	r3, [r3, #4]
 8012bc8:	4619      	mov	r1, r3
 8012bca:	4610      	mov	r0, r2
 8012bcc:	f003 f9d2 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 8012bd0:	4603      	mov	r3, r0
 8012bd2:	bf00      	nop
 8012bd4:	4a70      	ldr	r2, [pc, #448]	; (8012d98 <_ZN8cellBaseC1Ev+0x1b7c>)
 8012bd6:	210a      	movs	r1, #10
 8012bd8:	4620      	mov	r0, r4
 8012bda:	f00e faf5 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012bde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8012be2:	4618      	mov	r0, r3
 8012be4:	f7fc ff72 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    cell_10_voltage.setWildcard(cell_10_voltageBuffer);
 8012be8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012bec:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	f503 7249 	add.w	r2, r3, #804	; 0x324
 8012bf6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012bfa:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 8012c04:	4619      	mov	r1, r3
 8012c06:	4610      	mov	r0, r2
 8012c08:	f7fe fad8 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cell_10_voltage.resizeToCurrentText();
 8012c0c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012c10:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	f008 fdf8 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    cell_10_voltage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VFBT));
 8012c20:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012c24:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	f503 7449 	add.w	r4, r3, #804	; 0x324
 8012c2e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012c32:	2116      	movs	r1, #22
 8012c34:	4618      	mov	r0, r3
 8012c36:	f7fe f87b 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 8012c3a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012c3e:	4619      	mov	r1, r3
 8012c40:	4620      	mov	r0, r4
 8012c42:	f008 fe05 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012c46:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f7fc ff3e 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    cell_11_voltage.setXY(7, 454);
 8012c50:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012c54:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8012c5e:	f44f 72e3 	mov.w	r2, #454	; 0x1c6
 8012c62:	2107      	movs	r1, #7
 8012c64:	4618      	mov	r0, r3
 8012c66:	f7fd ff69 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    cell_11_voltage.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012c6a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012c6e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	f503 745c 	add.w	r4, r3, #880	; 0x370
 8012c78:	23ff      	movs	r3, #255	; 0xff
 8012c7a:	f887 32f3 	strb.w	r3, [r7, #755]	; 0x2f3
 8012c7e:	23ff      	movs	r3, #255	; 0xff
 8012c80:	f887 32f2 	strb.w	r3, [r7, #754]	; 0x2f2
 8012c84:	23ff      	movs	r3, #255	; 0xff
 8012c86:	f887 32f1 	strb.w	r3, [r7, #753]	; 0x2f1
 8012c8a:	f897 32f3 	ldrb.w	r3, [r7, #755]	; 0x2f3
 8012c8e:	041b      	lsls	r3, r3, #16
 8012c90:	461a      	mov	r2, r3
 8012c92:	f897 32f2 	ldrb.w	r3, [r7, #754]	; 0x2f2
 8012c96:	021b      	lsls	r3, r3, #8
 8012c98:	431a      	orrs	r2, r3
 8012c9a:	f897 32f1 	ldrb.w	r3, [r7, #753]	; 0x2f1
 8012c9e:	4313      	orrs	r3, r2
 8012ca0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012ca4:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8012ca8:	4611      	mov	r1, r2
 8012caa:	4618      	mov	r0, r3
 8012cac:	f7fd fe74 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8012cb0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012cb4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	461a      	mov	r2, r3
 8012cbc:	f8c7 42f4 	str.w	r4, [r7, #756]	; 0x2f4
 8012cc0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012cc4:	f5a3 735e 	sub.w	r3, r3, #888	; 0x378
 8012cc8:	601a      	str	r2, [r3, #0]
        color = newColor;
 8012cca:	f8d7 32f4 	ldr.w	r3, [r7, #756]	; 0x2f4
 8012cce:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8012cd2:	f5a2 725e 	sub.w	r2, r2, #888	; 0x378
 8012cd6:	6812      	ldr	r2, [r2, #0]
 8012cd8:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012cda:	bf00      	nop
    cell_11_voltage.setLinespacing(0);
 8012cdc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012ce0:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8012cea:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8012cee:	2300      	movs	r3, #0
 8012cf0:	f8a7 32fa 	strh.w	r3, [r7, #762]	; 0x2fa
        linespace = space;
 8012cf4:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8012cf8:	f8b7 22fa 	ldrh.w	r2, [r7, #762]	; 0x2fa
 8012cfc:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8012cfe:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	3384      	adds	r3, #132	; 0x84
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	f8d7 42fc 	ldr.w	r4, [r7, #764]	; 0x2fc
 8012d0c:	463a      	mov	r2, r7
 8012d0e:	f8d7 12fc 	ldr.w	r1, [r7, #764]	; 0x2fc
 8012d12:	4610      	mov	r0, r2
 8012d14:	4798      	blx	r3
 8012d16:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012d1a:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 8012d1e:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8012d22:	ca07      	ldmia	r2, {r0, r1, r2}
 8012d24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8012d28:	bf00      	nop
    Unicode::snprintf(cell_11_voltageBuffer, CELL_11_VOLTAGE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_PVPV).getText());
 8012d2a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012d2e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	f203 7444 	addw	r4, r3, #1860	; 0x744
 8012d38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012d3c:	2113      	movs	r1, #19
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f7fd fff6 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012d44:	4b15      	ldr	r3, [pc, #84]	; (8012d9c <_ZN8cellBaseC1Ev+0x1b80>)
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d105      	bne.n	8012d58 <_ZN8cellBaseC1Ev+0x1b3c>
 8012d4c:	4b14      	ldr	r3, [pc, #80]	; (8012da0 <_ZN8cellBaseC1Ev+0x1b84>)
 8012d4e:	4a0f      	ldr	r2, [pc, #60]	; (8012d8c <_ZN8cellBaseC1Ev+0x1b70>)
 8012d50:	2160      	movs	r1, #96	; 0x60
 8012d52:	480f      	ldr	r0, [pc, #60]	; (8012d90 <_ZN8cellBaseC1Ev+0x1b74>)
 8012d54:	f01a fdba 	bl	802d8cc <__assert_func>
 8012d58:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012d5c:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
        return typedTextId < numberOfTypedTexts;
 8012d60:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 8012d64:	889a      	ldrh	r2, [r3, #4]
 8012d66:	4b07      	ldr	r3, [pc, #28]	; (8012d84 <_ZN8cellBaseC1Ev+0x1b68>)
 8012d68:	881b      	ldrh	r3, [r3, #0]
 8012d6a:	429a      	cmp	r2, r3
 8012d6c:	bf34      	ite	cc
 8012d6e:	2301      	movcc	r3, #1
 8012d70:	2300      	movcs	r3, #0
 8012d72:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d115      	bne.n	8012da4 <_ZN8cellBaseC1Ev+0x1b88>
 8012d78:	4b03      	ldr	r3, [pc, #12]	; (8012d88 <_ZN8cellBaseC1Ev+0x1b6c>)
 8012d7a:	4a04      	ldr	r2, [pc, #16]	; (8012d8c <_ZN8cellBaseC1Ev+0x1b70>)
 8012d7c:	2161      	movs	r1, #97	; 0x61
 8012d7e:	4804      	ldr	r0, [pc, #16]	; (8012d90 <_ZN8cellBaseC1Ev+0x1b74>)
 8012d80:	f01a fda4 	bl	802d8cc <__assert_func>
 8012d84:	2000f1c0 	.word	0x2000f1c0
 8012d88:	0802ef70 	.word	0x0802ef70
 8012d8c:	0802efb0 	.word	0x0802efb0
 8012d90:	0802ef2c 	.word	0x0802ef2c
 8012d94:	2000f1c8 	.word	0x2000f1c8
 8012d98:	0802efe8 	.word	0x0802efe8
 8012d9c:	2000f1bc 	.word	0x2000f1bc
 8012da0:	0802eeac 	.word	0x0802eeac
 8012da4:	bf00      	nop
        return texts->getText(typedTextId);
 8012da6:	4bda      	ldr	r3, [pc, #872]	; (8013110 <_ZN8cellBaseC1Ev+0x1ef4>)
 8012da8:	681a      	ldr	r2, [r3, #0]
 8012daa:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012dae:	f5a3 7326 	sub.w	r3, r3, #664	; 0x298
 8012db2:	889b      	ldrh	r3, [r3, #4]
 8012db4:	4619      	mov	r1, r3
 8012db6:	4610      	mov	r0, r2
 8012db8:	f003 f8dc 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	bf00      	nop
 8012dc0:	4ad4      	ldr	r2, [pc, #848]	; (8013114 <_ZN8cellBaseC1Ev+0x1ef8>)
 8012dc2:	210a      	movs	r1, #10
 8012dc4:	4620      	mov	r0, r4
 8012dc6:	f00e f9ff 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012dca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012dce:	4618      	mov	r0, r3
 8012dd0:	f7fc fe7c 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    cell_11_voltage.setWildcard(cell_11_voltageBuffer);
 8012dd4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012dd8:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	f503 725c 	add.w	r2, r3, #880	; 0x370
 8012de2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012de6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	f203 7344 	addw	r3, r3, #1860	; 0x744
 8012df0:	4619      	mov	r1, r3
 8012df2:	4610      	mov	r0, r2
 8012df4:	f7fe f9e2 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cell_11_voltage.resizeToCurrentText();
 8012df8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012dfc:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8012e06:	4618      	mov	r0, r3
 8012e08:	f008 fd02 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    cell_11_voltage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7728));
 8012e0c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012e10:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	f503 745c 	add.w	r4, r3, #880	; 0x370
 8012e1a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8012e1e:	2114      	movs	r1, #20
 8012e20:	4618      	mov	r0, r3
 8012e22:	f7fd ff85 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 8012e26:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8012e2a:	4619      	mov	r1, r3
 8012e2c:	4620      	mov	r0, r4
 8012e2e:	f008 fd0f 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012e32:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8012e36:	4618      	mov	r0, r3
 8012e38:	f7fc fe48 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    cell_12_voltage.setXY(7, 482);
 8012e3c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012e40:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8012e4a:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8012e4e:	2107      	movs	r1, #7
 8012e50:	4618      	mov	r0, r3
 8012e52:	f7fd fe73 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    cell_12_voltage.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012e56:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012e5a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 8012e64:	23ff      	movs	r3, #255	; 0xff
 8012e66:	f887 3307 	strb.w	r3, [r7, #775]	; 0x307
 8012e6a:	23ff      	movs	r3, #255	; 0xff
 8012e6c:	f887 3306 	strb.w	r3, [r7, #774]	; 0x306
 8012e70:	23ff      	movs	r3, #255	; 0xff
 8012e72:	f887 3305 	strb.w	r3, [r7, #773]	; 0x305
 8012e76:	f897 3307 	ldrb.w	r3, [r7, #775]	; 0x307
 8012e7a:	041b      	lsls	r3, r3, #16
 8012e7c:	461a      	mov	r2, r3
 8012e7e:	f897 3306 	ldrb.w	r3, [r7, #774]	; 0x306
 8012e82:	021b      	lsls	r3, r3, #8
 8012e84:	431a      	orrs	r2, r3
 8012e86:	f897 3305 	ldrb.w	r3, [r7, #773]	; 0x305
 8012e8a:	4313      	orrs	r3, r2
 8012e8c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8012e90:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8012e94:	4611      	mov	r1, r2
 8012e96:	4618      	mov	r0, r3
 8012e98:	f7fd fd7e 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8012e9c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012ea0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	461a      	mov	r2, r3
 8012ea8:	f8c7 4308 	str.w	r4, [r7, #776]	; 0x308
 8012eac:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012eb0:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8012eb4:	601a      	str	r2, [r3, #0]
        color = newColor;
 8012eb6:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 8012eba:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8012ebe:	f5a2 725f 	sub.w	r2, r2, #892	; 0x37c
 8012ec2:	6812      	ldr	r2, [r2, #0]
 8012ec4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8012ec6:	bf00      	nop
    cell_12_voltage.setLinespacing(0);
 8012ec8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012ecc:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8012ed6:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8012eda:	2300      	movs	r3, #0
 8012edc:	f8a7 330e 	strh.w	r3, [r7, #782]	; 0x30e
        linespace = space;
 8012ee0:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8012ee4:	f8b7 230e 	ldrh.w	r2, [r7, #782]	; 0x30e
 8012ee8:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8012eea:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	3384      	adds	r3, #132	; 0x84
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	f8d7 4310 	ldr.w	r4, [r7, #784]	; 0x310
 8012ef8:	463a      	mov	r2, r7
 8012efa:	f8d7 1310 	ldr.w	r1, [r7, #784]	; 0x310
 8012efe:	4610      	mov	r0, r2
 8012f00:	4798      	blx	r3
 8012f02:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012f06:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 8012f0a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8012f0e:	ca07      	ldmia	r2, {r0, r1, r2}
 8012f10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8012f14:	bf00      	nop
    Unicode::snprintf(cell_12_voltageBuffer, CELL_12_VOLTAGE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_DAE8).getText());
 8012f16:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012f1a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	f503 64eb 	add.w	r4, r3, #1880	; 0x758
 8012f24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f28:	2111      	movs	r1, #17
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7fd ff00 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8012f30:	4b79      	ldr	r3, [pc, #484]	; (8013118 <_ZN8cellBaseC1Ev+0x1efc>)
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d105      	bne.n	8012f44 <_ZN8cellBaseC1Ev+0x1d28>
 8012f38:	4b78      	ldr	r3, [pc, #480]	; (801311c <_ZN8cellBaseC1Ev+0x1f00>)
 8012f3a:	4a79      	ldr	r2, [pc, #484]	; (8013120 <_ZN8cellBaseC1Ev+0x1f04>)
 8012f3c:	2160      	movs	r1, #96	; 0x60
 8012f3e:	4879      	ldr	r0, [pc, #484]	; (8013124 <_ZN8cellBaseC1Ev+0x1f08>)
 8012f40:	f01a fcc4 	bl	802d8cc <__assert_func>
 8012f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f48:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
        return typedTextId < numberOfTypedTexts;
 8012f4c:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8012f50:	889a      	ldrh	r2, [r3, #4]
 8012f52:	4b75      	ldr	r3, [pc, #468]	; (8013128 <_ZN8cellBaseC1Ev+0x1f0c>)
 8012f54:	881b      	ldrh	r3, [r3, #0]
 8012f56:	429a      	cmp	r2, r3
 8012f58:	bf34      	ite	cc
 8012f5a:	2301      	movcc	r3, #1
 8012f5c:	2300      	movcs	r3, #0
 8012f5e:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d105      	bne.n	8012f70 <_ZN8cellBaseC1Ev+0x1d54>
 8012f64:	4b71      	ldr	r3, [pc, #452]	; (801312c <_ZN8cellBaseC1Ev+0x1f10>)
 8012f66:	4a6e      	ldr	r2, [pc, #440]	; (8013120 <_ZN8cellBaseC1Ev+0x1f04>)
 8012f68:	2161      	movs	r1, #97	; 0x61
 8012f6a:	486e      	ldr	r0, [pc, #440]	; (8013124 <_ZN8cellBaseC1Ev+0x1f08>)
 8012f6c:	f01a fcae 	bl	802d8cc <__assert_func>
 8012f70:	bf00      	nop
        return texts->getText(typedTextId);
 8012f72:	4b67      	ldr	r3, [pc, #412]	; (8013110 <_ZN8cellBaseC1Ev+0x1ef4>)
 8012f74:	681a      	ldr	r2, [r3, #0]
 8012f76:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012f7a:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8012f7e:	889b      	ldrh	r3, [r3, #4]
 8012f80:	4619      	mov	r1, r3
 8012f82:	4610      	mov	r0, r2
 8012f84:	f002 fff6 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	bf00      	nop
 8012f8c:	4a61      	ldr	r2, [pc, #388]	; (8013114 <_ZN8cellBaseC1Ev+0x1ef8>)
 8012f8e:	210a      	movs	r1, #10
 8012f90:	4620      	mov	r0, r4
 8012f92:	f00e f919 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8012f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7fc fd96 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    cell_12_voltage.setWildcard(cell_12_voltageBuffer);
 8012fa0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012fa4:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	f503 726f 	add.w	r2, r3, #956	; 0x3bc
 8012fae:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012fb2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8012fbc:	4619      	mov	r1, r3
 8012fbe:	4610      	mov	r0, r2
 8012fc0:	f7fe f8fc 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cell_12_voltage.resizeToCurrentText();
 8012fc4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012fc8:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012fcc:	681b      	ldr	r3, [r3, #0]
 8012fce:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f008 fc1c 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    cell_12_voltage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_0I2W));
 8012fd8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8012fdc:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	f503 746f 	add.w	r4, r3, #956	; 0x3bc
 8012fe6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012fea:	2112      	movs	r1, #18
 8012fec:	4618      	mov	r0, r3
 8012fee:	f7fd fe9f 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 8012ff2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8012ff6:	4619      	mov	r1, r3
 8012ff8:	4620      	mov	r0, r4
 8012ffa:	f008 fc29 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012ffe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013002:	4618      	mov	r0, r3
 8013004:	f7fc fd62 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    cell_13_voltage.setXY(7, 510);
 8013008:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801300c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8013016:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 801301a:	2107      	movs	r1, #7
 801301c:	4618      	mov	r0, r3
 801301e:	f7fd fd8d 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    cell_13_voltage.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8013022:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013026:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	f503 6481 	add.w	r4, r3, #1032	; 0x408
 8013030:	23ff      	movs	r3, #255	; 0xff
 8013032:	f887 331b 	strb.w	r3, [r7, #795]	; 0x31b
 8013036:	23ff      	movs	r3, #255	; 0xff
 8013038:	f887 331a 	strb.w	r3, [r7, #794]	; 0x31a
 801303c:	23ff      	movs	r3, #255	; 0xff
 801303e:	f887 3319 	strb.w	r3, [r7, #793]	; 0x319
 8013042:	f897 331b 	ldrb.w	r3, [r7, #795]	; 0x31b
 8013046:	041b      	lsls	r3, r3, #16
 8013048:	461a      	mov	r2, r3
 801304a:	f897 331a 	ldrb.w	r3, [r7, #794]	; 0x31a
 801304e:	021b      	lsls	r3, r3, #8
 8013050:	431a      	orrs	r2, r3
 8013052:	f897 3319 	ldrb.w	r3, [r7, #793]	; 0x319
 8013056:	4313      	orrs	r3, r2
 8013058:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801305c:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8013060:	4611      	mov	r1, r2
 8013062:	4618      	mov	r0, r3
 8013064:	f7fd fc98 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8013068:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801306c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	461a      	mov	r2, r3
 8013074:	f8c7 431c 	str.w	r4, [r7, #796]	; 0x31c
 8013078:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801307c:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 8013080:	601a      	str	r2, [r3, #0]
        color = newColor;
 8013082:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8013086:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 801308a:	f5a2 7260 	sub.w	r2, r2, #896	; 0x380
 801308e:	6812      	ldr	r2, [r2, #0]
 8013090:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013092:	bf00      	nop
    cell_13_voltage.setLinespacing(0);
 8013094:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013098:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80130a2:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 80130a6:	2300      	movs	r3, #0
 80130a8:	f8a7 3322 	strh.w	r3, [r7, #802]	; 0x322
        linespace = space;
 80130ac:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80130b0:	f8b7 2322 	ldrh.w	r2, [r7, #802]	; 0x322
 80130b4:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80130b6:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	3384      	adds	r3, #132	; 0x84
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	f8d7 4324 	ldr.w	r4, [r7, #804]	; 0x324
 80130c4:	463a      	mov	r2, r7
 80130c6:	f8d7 1324 	ldr.w	r1, [r7, #804]	; 0x324
 80130ca:	4610      	mov	r0, r2
 80130cc:	4798      	blx	r3
 80130ce:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80130d2:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 80130d6:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80130da:	ca07      	ldmia	r2, {r0, r1, r2}
 80130dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80130e0:	bf00      	nop
    Unicode::snprintf(cell_13_voltageBuffer, CELL_13_VOLTAGE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NE2M).getText());
 80130e2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80130e6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	f203 746c 	addw	r4, r3, #1900	; 0x76c
 80130f0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80130f4:	210f      	movs	r1, #15
 80130f6:	4618      	mov	r0, r3
 80130f8:	f7fd fe1a 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80130fc:	4b06      	ldr	r3, [pc, #24]	; (8013118 <_ZN8cellBaseC1Ev+0x1efc>)
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d115      	bne.n	8013130 <_ZN8cellBaseC1Ev+0x1f14>
 8013104:	4b05      	ldr	r3, [pc, #20]	; (801311c <_ZN8cellBaseC1Ev+0x1f00>)
 8013106:	4a06      	ldr	r2, [pc, #24]	; (8013120 <_ZN8cellBaseC1Ev+0x1f04>)
 8013108:	2160      	movs	r1, #96	; 0x60
 801310a:	4806      	ldr	r0, [pc, #24]	; (8013124 <_ZN8cellBaseC1Ev+0x1f08>)
 801310c:	f01a fbde 	bl	802d8cc <__assert_func>
 8013110:	2000f1c8 	.word	0x2000f1c8
 8013114:	0802efe8 	.word	0x0802efe8
 8013118:	2000f1bc 	.word	0x2000f1bc
 801311c:	0802eeac 	.word	0x0802eeac
 8013120:	0802efb0 	.word	0x0802efb0
 8013124:	0802ef2c 	.word	0x0802ef2c
 8013128:	2000f1c0 	.word	0x2000f1c0
 801312c:	0802ef70 	.word	0x0802ef70
 8013130:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013134:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
        return typedTextId < numberOfTypedTexts;
 8013138:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 801313c:	889a      	ldrh	r2, [r3, #4]
 801313e:	4b7a      	ldr	r3, [pc, #488]	; (8013328 <_ZN8cellBaseC1Ev+0x210c>)
 8013140:	881b      	ldrh	r3, [r3, #0]
 8013142:	429a      	cmp	r2, r3
 8013144:	bf34      	ite	cc
 8013146:	2301      	movcc	r3, #1
 8013148:	2300      	movcs	r3, #0
 801314a:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 801314c:	2b00      	cmp	r3, #0
 801314e:	d105      	bne.n	801315c <_ZN8cellBaseC1Ev+0x1f40>
 8013150:	4b76      	ldr	r3, [pc, #472]	; (801332c <_ZN8cellBaseC1Ev+0x2110>)
 8013152:	4a77      	ldr	r2, [pc, #476]	; (8013330 <_ZN8cellBaseC1Ev+0x2114>)
 8013154:	2161      	movs	r1, #97	; 0x61
 8013156:	4877      	ldr	r0, [pc, #476]	; (8013334 <_ZN8cellBaseC1Ev+0x2118>)
 8013158:	f01a fbb8 	bl	802d8cc <__assert_func>
 801315c:	bf00      	nop
        return texts->getText(typedTextId);
 801315e:	4b76      	ldr	r3, [pc, #472]	; (8013338 <_ZN8cellBaseC1Ev+0x211c>)
 8013160:	681a      	ldr	r2, [r3, #0]
 8013162:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013166:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 801316a:	889b      	ldrh	r3, [r3, #4]
 801316c:	4619      	mov	r1, r3
 801316e:	4610      	mov	r0, r2
 8013170:	f002 ff00 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 8013174:	4603      	mov	r3, r0
 8013176:	bf00      	nop
 8013178:	4a70      	ldr	r2, [pc, #448]	; (801333c <_ZN8cellBaseC1Ev+0x2120>)
 801317a:	210a      	movs	r1, #10
 801317c:	4620      	mov	r0, r4
 801317e:	f00e f823 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013182:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8013186:	4618      	mov	r0, r3
 8013188:	f7fc fca0 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    cell_13_voltage.setWildcard(cell_13_voltageBuffer);
 801318c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013190:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	f503 6281 	add.w	r2, r3, #1032	; 0x408
 801319a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801319e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80131a8:	4619      	mov	r1, r3
 80131aa:	4610      	mov	r0, r2
 80131ac:	f7fe f806 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cell_13_voltage.resizeToCurrentText();
 80131b0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80131b4:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80131be:	4618      	mov	r0, r3
 80131c0:	f008 fb26 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    cell_13_voltage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_NDTC));
 80131c4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80131c8:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	f503 6481 	add.w	r4, r3, #1032	; 0x408
 80131d2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80131d6:	2110      	movs	r1, #16
 80131d8:	4618      	mov	r0, r3
 80131da:	f7fd fda9 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 80131de:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80131e2:	4619      	mov	r1, r3
 80131e4:	4620      	mov	r0, r4
 80131e6:	f008 fb33 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80131ea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80131ee:	4618      	mov	r0, r3
 80131f0:	f7fc fc6c 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    cell_15_voltage.setXY(7, 566);
 80131f4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80131f8:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	f203 4354 	addw	r3, r3, #1108	; 0x454
 8013202:	f240 2236 	movw	r2, #566	; 0x236
 8013206:	2107      	movs	r1, #7
 8013208:	4618      	mov	r0, r3
 801320a:	f7fd fc97 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    cell_15_voltage.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801320e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013212:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	f203 4454 	addw	r4, r3, #1108	; 0x454
 801321c:	23ff      	movs	r3, #255	; 0xff
 801321e:	f887 332f 	strb.w	r3, [r7, #815]	; 0x32f
 8013222:	23ff      	movs	r3, #255	; 0xff
 8013224:	f887 332e 	strb.w	r3, [r7, #814]	; 0x32e
 8013228:	23ff      	movs	r3, #255	; 0xff
 801322a:	f887 332d 	strb.w	r3, [r7, #813]	; 0x32d
 801322e:	f897 332f 	ldrb.w	r3, [r7, #815]	; 0x32f
 8013232:	041b      	lsls	r3, r3, #16
 8013234:	461a      	mov	r2, r3
 8013236:	f897 332e 	ldrb.w	r3, [r7, #814]	; 0x32e
 801323a:	021b      	lsls	r3, r3, #8
 801323c:	431a      	orrs	r2, r3
 801323e:	f897 332d 	ldrb.w	r3, [r7, #813]	; 0x32d
 8013242:	4313      	orrs	r3, r2
 8013244:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013248:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 801324c:	4611      	mov	r1, r2
 801324e:	4618      	mov	r0, r3
 8013250:	f7fd fba2 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8013254:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013258:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	461a      	mov	r2, r3
 8013260:	f8c7 4330 	str.w	r4, [r7, #816]	; 0x330
 8013264:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013268:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 801326c:	601a      	str	r2, [r3, #0]
        color = newColor;
 801326e:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8013272:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8013276:	f5a2 7261 	sub.w	r2, r2, #900	; 0x384
 801327a:	6812      	ldr	r2, [r2, #0]
 801327c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801327e:	bf00      	nop
    cell_15_voltage.setLinespacing(0);
 8013280:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013284:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	f203 4354 	addw	r3, r3, #1108	; 0x454
 801328e:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
 8013292:	2300      	movs	r3, #0
 8013294:	f8a7 3336 	strh.w	r3, [r7, #822]	; 0x336
        linespace = space;
 8013298:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 801329c:	f8b7 2336 	ldrh.w	r2, [r7, #822]	; 0x336
 80132a0:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80132a2:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	3384      	adds	r3, #132	; 0x84
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	f8d7 4338 	ldr.w	r4, [r7, #824]	; 0x338
 80132b0:	463a      	mov	r2, r7
 80132b2:	f8d7 1338 	ldr.w	r1, [r7, #824]	; 0x338
 80132b6:	4610      	mov	r0, r2
 80132b8:	4798      	blx	r3
 80132ba:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80132be:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 80132c2:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80132c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80132c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80132cc:	bf00      	nop
    Unicode::snprintf(cell_15_voltageBuffer, CELL_15_VOLTAGE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_7IKM).getText());
 80132ce:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80132d2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	f503 64f0 	add.w	r4, r3, #1920	; 0x780
 80132dc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80132e0:	210d      	movs	r1, #13
 80132e2:	4618      	mov	r0, r3
 80132e4:	f7fd fd24 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80132e8:	4b15      	ldr	r3, [pc, #84]	; (8013340 <_ZN8cellBaseC1Ev+0x2124>)
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d105      	bne.n	80132fc <_ZN8cellBaseC1Ev+0x20e0>
 80132f0:	4b14      	ldr	r3, [pc, #80]	; (8013344 <_ZN8cellBaseC1Ev+0x2128>)
 80132f2:	4a0f      	ldr	r2, [pc, #60]	; (8013330 <_ZN8cellBaseC1Ev+0x2114>)
 80132f4:	2160      	movs	r1, #96	; 0x60
 80132f6:	480f      	ldr	r0, [pc, #60]	; (8013334 <_ZN8cellBaseC1Ev+0x2118>)
 80132f8:	f01a fae8 	bl	802d8cc <__assert_func>
 80132fc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8013300:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
        return typedTextId < numberOfTypedTexts;
 8013304:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 8013308:	889a      	ldrh	r2, [r3, #4]
 801330a:	4b07      	ldr	r3, [pc, #28]	; (8013328 <_ZN8cellBaseC1Ev+0x210c>)
 801330c:	881b      	ldrh	r3, [r3, #0]
 801330e:	429a      	cmp	r2, r3
 8013310:	bf34      	ite	cc
 8013312:	2301      	movcc	r3, #1
 8013314:	2300      	movcs	r3, #0
 8013316:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8013318:	2b00      	cmp	r3, #0
 801331a:	d115      	bne.n	8013348 <_ZN8cellBaseC1Ev+0x212c>
 801331c:	4b03      	ldr	r3, [pc, #12]	; (801332c <_ZN8cellBaseC1Ev+0x2110>)
 801331e:	4a04      	ldr	r2, [pc, #16]	; (8013330 <_ZN8cellBaseC1Ev+0x2114>)
 8013320:	2161      	movs	r1, #97	; 0x61
 8013322:	4804      	ldr	r0, [pc, #16]	; (8013334 <_ZN8cellBaseC1Ev+0x2118>)
 8013324:	f01a fad2 	bl	802d8cc <__assert_func>
 8013328:	2000f1c0 	.word	0x2000f1c0
 801332c:	0802ef70 	.word	0x0802ef70
 8013330:	0802efb0 	.word	0x0802efb0
 8013334:	0802ef2c 	.word	0x0802ef2c
 8013338:	2000f1c8 	.word	0x2000f1c8
 801333c:	0802efe8 	.word	0x0802efe8
 8013340:	2000f1bc 	.word	0x2000f1bc
 8013344:	0802eeac 	.word	0x0802eeac
 8013348:	bf00      	nop
        return texts->getText(typedTextId);
 801334a:	4bda      	ldr	r3, [pc, #872]	; (80136b4 <_ZN8cellBaseC1Ev+0x2498>)
 801334c:	681a      	ldr	r2, [r3, #0]
 801334e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013352:	f5a3 731a 	sub.w	r3, r3, #616	; 0x268
 8013356:	889b      	ldrh	r3, [r3, #4]
 8013358:	4619      	mov	r1, r3
 801335a:	4610      	mov	r0, r2
 801335c:	f002 fe0a 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 8013360:	4603      	mov	r3, r0
 8013362:	bf00      	nop
 8013364:	4ad4      	ldr	r2, [pc, #848]	; (80136b8 <_ZN8cellBaseC1Ev+0x249c>)
 8013366:	210a      	movs	r1, #10
 8013368:	4620      	mov	r0, r4
 801336a:	f00d ff2d 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801336e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8013372:	4618      	mov	r0, r3
 8013374:	f7fc fbaa 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    cell_15_voltage.setWildcard(cell_15_voltageBuffer);
 8013378:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801337c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	f203 4254 	addw	r2, r3, #1108	; 0x454
 8013386:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801338a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
 8013394:	4619      	mov	r1, r3
 8013396:	4610      	mov	r0, r2
 8013398:	f7fd ff10 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cell_15_voltage.resizeToCurrentText();
 801339c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80133a0:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	f203 4354 	addw	r3, r3, #1108	; 0x454
 80133aa:	4618      	mov	r0, r3
 80133ac:	f008 fa30 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    cell_15_voltage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_LCW4));
 80133b0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80133b4:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	f203 4454 	addw	r4, r3, #1108	; 0x454
 80133be:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80133c2:	210e      	movs	r1, #14
 80133c4:	4618      	mov	r0, r3
 80133c6:	f7fd fcb3 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 80133ca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80133ce:	4619      	mov	r1, r3
 80133d0:	4620      	mov	r0, r4
 80133d2:	f008 fa3d 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80133d6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80133da:	4618      	mov	r0, r3
 80133dc:	f7fc fb76 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    cell_14_voltage.setXY(7, 538);
 80133e0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80133e4:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80133ee:	f240 221a 	movw	r2, #538	; 0x21a
 80133f2:	2107      	movs	r1, #7
 80133f4:	4618      	mov	r0, r3
 80133f6:	f7fd fba1 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    cell_14_voltage.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80133fa:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80133fe:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	f503 6494 	add.w	r4, r3, #1184	; 0x4a0
 8013408:	23ff      	movs	r3, #255	; 0xff
 801340a:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
 801340e:	23ff      	movs	r3, #255	; 0xff
 8013410:	f887 3342 	strb.w	r3, [r7, #834]	; 0x342
 8013414:	23ff      	movs	r3, #255	; 0xff
 8013416:	f887 3341 	strb.w	r3, [r7, #833]	; 0x341
 801341a:	f897 3343 	ldrb.w	r3, [r7, #835]	; 0x343
 801341e:	041b      	lsls	r3, r3, #16
 8013420:	461a      	mov	r2, r3
 8013422:	f897 3342 	ldrb.w	r3, [r7, #834]	; 0x342
 8013426:	021b      	lsls	r3, r3, #8
 8013428:	431a      	orrs	r2, r3
 801342a:	f897 3341 	ldrb.w	r3, [r7, #833]	; 0x341
 801342e:	4313      	orrs	r3, r2
 8013430:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013434:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8013438:	4611      	mov	r1, r2
 801343a:	4618      	mov	r0, r3
 801343c:	f7fd faac 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8013440:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013444:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	461a      	mov	r2, r3
 801344c:	f8c7 4344 	str.w	r4, [r7, #836]	; 0x344
 8013450:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013454:	f5a3 7362 	sub.w	r3, r3, #904	; 0x388
 8013458:	601a      	str	r2, [r3, #0]
        color = newColor;
 801345a:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 801345e:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8013462:	f5a2 7262 	sub.w	r2, r2, #904	; 0x388
 8013466:	6812      	ldr	r2, [r2, #0]
 8013468:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801346a:	bf00      	nop
    cell_14_voltage.setLinespacing(0);
 801346c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013470:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 801347a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 801347e:	2300      	movs	r3, #0
 8013480:	f8a7 334a 	strh.w	r3, [r7, #842]	; 0x34a
        linespace = space;
 8013484:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8013488:	f8b7 234a 	ldrh.w	r2, [r7, #842]	; 0x34a
 801348c:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 801348e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	3384      	adds	r3, #132	; 0x84
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	f8d7 434c 	ldr.w	r4, [r7, #844]	; 0x34c
 801349c:	463a      	mov	r2, r7
 801349e:	f8d7 134c 	ldr.w	r1, [r7, #844]	; 0x34c
 80134a2:	4610      	mov	r0, r2
 80134a4:	4798      	blx	r3
 80134a6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80134aa:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 80134ae:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80134b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80134b4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80134b8:	bf00      	nop
    Unicode::snprintf(cell_14_voltageBuffer, CELL_14_VOLTAGE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_RWDK).getText());
 80134ba:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80134be:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	f203 7494 	addw	r4, r3, #1940	; 0x794
 80134c8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80134cc:	210b      	movs	r1, #11
 80134ce:	4618      	mov	r0, r3
 80134d0:	f7fd fc2e 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80134d4:	4b79      	ldr	r3, [pc, #484]	; (80136bc <_ZN8cellBaseC1Ev+0x24a0>)
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d105      	bne.n	80134e8 <_ZN8cellBaseC1Ev+0x22cc>
 80134dc:	4b78      	ldr	r3, [pc, #480]	; (80136c0 <_ZN8cellBaseC1Ev+0x24a4>)
 80134de:	4a79      	ldr	r2, [pc, #484]	; (80136c4 <_ZN8cellBaseC1Ev+0x24a8>)
 80134e0:	2160      	movs	r1, #96	; 0x60
 80134e2:	4879      	ldr	r0, [pc, #484]	; (80136c8 <_ZN8cellBaseC1Ev+0x24ac>)
 80134e4:	f01a f9f2 	bl	802d8cc <__assert_func>
 80134e8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80134ec:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
        return typedTextId < numberOfTypedTexts;
 80134f0:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80134f4:	889a      	ldrh	r2, [r3, #4]
 80134f6:	4b75      	ldr	r3, [pc, #468]	; (80136cc <_ZN8cellBaseC1Ev+0x24b0>)
 80134f8:	881b      	ldrh	r3, [r3, #0]
 80134fa:	429a      	cmp	r2, r3
 80134fc:	bf34      	ite	cc
 80134fe:	2301      	movcc	r3, #1
 8013500:	2300      	movcs	r3, #0
 8013502:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8013504:	2b00      	cmp	r3, #0
 8013506:	d105      	bne.n	8013514 <_ZN8cellBaseC1Ev+0x22f8>
 8013508:	4b71      	ldr	r3, [pc, #452]	; (80136d0 <_ZN8cellBaseC1Ev+0x24b4>)
 801350a:	4a6e      	ldr	r2, [pc, #440]	; (80136c4 <_ZN8cellBaseC1Ev+0x24a8>)
 801350c:	2161      	movs	r1, #97	; 0x61
 801350e:	486e      	ldr	r0, [pc, #440]	; (80136c8 <_ZN8cellBaseC1Ev+0x24ac>)
 8013510:	f01a f9dc 	bl	802d8cc <__assert_func>
 8013514:	bf00      	nop
        return texts->getText(typedTextId);
 8013516:	4b67      	ldr	r3, [pc, #412]	; (80136b4 <_ZN8cellBaseC1Ev+0x2498>)
 8013518:	681a      	ldr	r2, [r3, #0]
 801351a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801351e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8013522:	889b      	ldrh	r3, [r3, #4]
 8013524:	4619      	mov	r1, r3
 8013526:	4610      	mov	r0, r2
 8013528:	f002 fd24 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 801352c:	4603      	mov	r3, r0
 801352e:	bf00      	nop
 8013530:	4a61      	ldr	r2, [pc, #388]	; (80136b8 <_ZN8cellBaseC1Ev+0x249c>)
 8013532:	210a      	movs	r1, #10
 8013534:	4620      	mov	r0, r4
 8013536:	f00d fe47 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 801353a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801353e:	4618      	mov	r0, r3
 8013540:	f7fc fac4 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    cell_14_voltage.setWildcard(cell_14_voltageBuffer);
 8013544:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013548:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	f503 6294 	add.w	r2, r3, #1184	; 0x4a0
 8013552:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013556:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	f203 7394 	addw	r3, r3, #1940	; 0x794
 8013560:	4619      	mov	r1, r3
 8013562:	4610      	mov	r0, r2
 8013564:	f7fd fe2a 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cell_14_voltage.resizeToCurrentText();
 8013568:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801356c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8013576:	4618      	mov	r0, r3
 8013578:	f008 f94a 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    cell_14_voltage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6D6R));
 801357c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013580:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	f503 6494 	add.w	r4, r3, #1184	; 0x4a0
 801358a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801358e:	210c      	movs	r1, #12
 8013590:	4618      	mov	r0, r3
 8013592:	f7fd fbcd 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 8013596:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801359a:	4619      	mov	r1, r3
 801359c:	4620      	mov	r0, r4
 801359e:	f008 f957 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80135a2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80135a6:	4618      	mov	r0, r3
 80135a8:	f7fc fa90 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    temp_0.setXY(7, 88);
 80135ac:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80135b0:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 80135ba:	2258      	movs	r2, #88	; 0x58
 80135bc:	2107      	movs	r1, #7
 80135be:	4618      	mov	r0, r3
 80135c0:	f7fd fabc 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    temp_0.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80135c4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80135c8:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	f203 44ec 	addw	r4, r3, #1260	; 0x4ec
 80135d2:	23ff      	movs	r3, #255	; 0xff
 80135d4:	f887 3357 	strb.w	r3, [r7, #855]	; 0x357
 80135d8:	23ff      	movs	r3, #255	; 0xff
 80135da:	f887 3356 	strb.w	r3, [r7, #854]	; 0x356
 80135de:	23ff      	movs	r3, #255	; 0xff
 80135e0:	f887 3355 	strb.w	r3, [r7, #853]	; 0x355
 80135e4:	f897 3357 	ldrb.w	r3, [r7, #855]	; 0x357
 80135e8:	041b      	lsls	r3, r3, #16
 80135ea:	461a      	mov	r2, r3
 80135ec:	f897 3356 	ldrb.w	r3, [r7, #854]	; 0x356
 80135f0:	021b      	lsls	r3, r3, #8
 80135f2:	431a      	orrs	r2, r3
 80135f4:	f897 3355 	ldrb.w	r3, [r7, #853]	; 0x355
 80135f8:	4313      	orrs	r3, r2
 80135fa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80135fe:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8013602:	4611      	mov	r1, r2
 8013604:	4618      	mov	r0, r3
 8013606:	f7fd f9c7 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 801360a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801360e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	461a      	mov	r2, r3
 8013616:	f8c7 4358 	str.w	r4, [r7, #856]	; 0x358
 801361a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801361e:	f5a3 7363 	sub.w	r3, r3, #908	; 0x38c
 8013622:	601a      	str	r2, [r3, #0]
        color = newColor;
 8013624:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8013628:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 801362c:	f5a2 7263 	sub.w	r2, r2, #908	; 0x38c
 8013630:	6812      	ldr	r2, [r2, #0]
 8013632:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013634:	bf00      	nop
    temp_0.setLinespacing(0);
 8013636:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801363a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8013644:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8013648:	2300      	movs	r3, #0
 801364a:	f8a7 335e 	strh.w	r3, [r7, #862]	; 0x35e
        linespace = space;
 801364e:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8013652:	f8b7 235e 	ldrh.w	r2, [r7, #862]	; 0x35e
 8013656:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8013658:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	3384      	adds	r3, #132	; 0x84
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	f8d7 4360 	ldr.w	r4, [r7, #864]	; 0x360
 8013666:	463a      	mov	r2, r7
 8013668:	f8d7 1360 	ldr.w	r1, [r7, #864]	; 0x360
 801366c:	4610      	mov	r0, r2
 801366e:	4798      	blx	r3
 8013670:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013674:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 8013678:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 801367c:	ca07      	ldmia	r2, {r0, r1, r2}
 801367e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8013682:	bf00      	nop
    Unicode::snprintf(temp_0Buffer, TEMP_0_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_A6EV).getText());
 8013684:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013688:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	f503 64f5 	add.w	r4, r3, #1960	; 0x7a8
 8013692:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8013696:	2109      	movs	r1, #9
 8013698:	4618      	mov	r0, r3
 801369a:	f7fd fb49 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801369e:	4b07      	ldr	r3, [pc, #28]	; (80136bc <_ZN8cellBaseC1Ev+0x24a0>)
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d116      	bne.n	80136d4 <_ZN8cellBaseC1Ev+0x24b8>
 80136a6:	4b06      	ldr	r3, [pc, #24]	; (80136c0 <_ZN8cellBaseC1Ev+0x24a4>)
 80136a8:	4a06      	ldr	r2, [pc, #24]	; (80136c4 <_ZN8cellBaseC1Ev+0x24a8>)
 80136aa:	2160      	movs	r1, #96	; 0x60
 80136ac:	4806      	ldr	r0, [pc, #24]	; (80136c8 <_ZN8cellBaseC1Ev+0x24ac>)
 80136ae:	f01a f90d 	bl	802d8cc <__assert_func>
 80136b2:	bf00      	nop
 80136b4:	2000f1c8 	.word	0x2000f1c8
 80136b8:	0802efe8 	.word	0x0802efe8
 80136bc:	2000f1bc 	.word	0x2000f1bc
 80136c0:	0802eeac 	.word	0x0802eeac
 80136c4:	0802efb0 	.word	0x0802efb0
 80136c8:	0802ef2c 	.word	0x0802ef2c
 80136cc:	2000f1c0 	.word	0x2000f1c0
 80136d0:	0802ef70 	.word	0x0802ef70
 80136d4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80136d8:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
        return typedTextId < numberOfTypedTexts;
 80136dc:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80136e0:	889a      	ldrh	r2, [r3, #4]
 80136e2:	4b7a      	ldr	r3, [pc, #488]	; (80138cc <_ZN8cellBaseC1Ev+0x26b0>)
 80136e4:	881b      	ldrh	r3, [r3, #0]
 80136e6:	429a      	cmp	r2, r3
 80136e8:	bf34      	ite	cc
 80136ea:	2301      	movcc	r3, #1
 80136ec:	2300      	movcs	r3, #0
 80136ee:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d105      	bne.n	8013700 <_ZN8cellBaseC1Ev+0x24e4>
 80136f4:	4b76      	ldr	r3, [pc, #472]	; (80138d0 <_ZN8cellBaseC1Ev+0x26b4>)
 80136f6:	4a77      	ldr	r2, [pc, #476]	; (80138d4 <_ZN8cellBaseC1Ev+0x26b8>)
 80136f8:	2161      	movs	r1, #97	; 0x61
 80136fa:	4877      	ldr	r0, [pc, #476]	; (80138d8 <_ZN8cellBaseC1Ev+0x26bc>)
 80136fc:	f01a f8e6 	bl	802d8cc <__assert_func>
 8013700:	bf00      	nop
        return texts->getText(typedTextId);
 8013702:	4b76      	ldr	r3, [pc, #472]	; (80138dc <_ZN8cellBaseC1Ev+0x26c0>)
 8013704:	681a      	ldr	r2, [r3, #0]
 8013706:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801370a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 801370e:	889b      	ldrh	r3, [r3, #4]
 8013710:	4619      	mov	r1, r3
 8013712:	4610      	mov	r0, r2
 8013714:	f002 fc2e 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 8013718:	4603      	mov	r3, r0
 801371a:	bf00      	nop
 801371c:	4a70      	ldr	r2, [pc, #448]	; (80138e0 <_ZN8cellBaseC1Ev+0x26c4>)
 801371e:	210a      	movs	r1, #10
 8013720:	4620      	mov	r0, r4
 8013722:	f00d fd51 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013726:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801372a:	4618      	mov	r0, r3
 801372c:	f7fc f9ce 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    temp_0.setWildcard(temp_0Buffer);
 8013730:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013734:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	f203 42ec 	addw	r2, r3, #1260	; 0x4ec
 801373e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013742:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 801374c:	4619      	mov	r1, r3
 801374e:	4610      	mov	r0, r2
 8013750:	f7fd fd34 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    temp_0.resizeToCurrentText();
 8013754:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013758:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8013762:	4618      	mov	r0, r3
 8013764:	f008 f854 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    temp_0.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7316));
 8013768:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801376c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	f203 44ec 	addw	r4, r3, #1260	; 0x4ec
 8013776:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 801377a:	210a      	movs	r1, #10
 801377c:	4618      	mov	r0, r3
 801377e:	f7fd fad7 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 8013782:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8013786:	4619      	mov	r1, r3
 8013788:	4620      	mov	r0, r4
 801378a:	f008 f861 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801378e:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8013792:	4618      	mov	r0, r3
 8013794:	f7fc f99a 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    temp_1.setXY(7, 112);
 8013798:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801379c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 80137a6:	2270      	movs	r2, #112	; 0x70
 80137a8:	2107      	movs	r1, #7
 80137aa:	4618      	mov	r0, r3
 80137ac:	f7fd f9c6 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    temp_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80137b0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80137b4:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	f503 64a7 	add.w	r4, r3, #1336	; 0x538
 80137be:	23ff      	movs	r3, #255	; 0xff
 80137c0:	f887 336b 	strb.w	r3, [r7, #875]	; 0x36b
 80137c4:	23ff      	movs	r3, #255	; 0xff
 80137c6:	f887 336a 	strb.w	r3, [r7, #874]	; 0x36a
 80137ca:	23ff      	movs	r3, #255	; 0xff
 80137cc:	f887 3369 	strb.w	r3, [r7, #873]	; 0x369
 80137d0:	f897 336b 	ldrb.w	r3, [r7, #875]	; 0x36b
 80137d4:	041b      	lsls	r3, r3, #16
 80137d6:	461a      	mov	r2, r3
 80137d8:	f897 336a 	ldrb.w	r3, [r7, #874]	; 0x36a
 80137dc:	021b      	lsls	r3, r3, #8
 80137de:	431a      	orrs	r2, r3
 80137e0:	f897 3369 	ldrb.w	r3, [r7, #873]	; 0x369
 80137e4:	4313      	orrs	r3, r2
 80137e6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80137ea:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 80137ee:	4611      	mov	r1, r2
 80137f0:	4618      	mov	r0, r3
 80137f2:	f7fd f8d1 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 80137f6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80137fa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	461a      	mov	r2, r3
 8013802:	f8c7 436c 	str.w	r4, [r7, #876]	; 0x36c
 8013806:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801380a:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 801380e:	601a      	str	r2, [r3, #0]
        color = newColor;
 8013810:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8013814:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8013818:	f5a2 7264 	sub.w	r2, r2, #912	; 0x390
 801381c:	6812      	ldr	r2, [r2, #0]
 801381e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013820:	bf00      	nop
    temp_1.setLinespacing(0);
 8013822:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013826:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8013830:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8013834:	2300      	movs	r3, #0
 8013836:	f8a7 3372 	strh.w	r3, [r7, #882]	; 0x372
        linespace = space;
 801383a:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 801383e:	f8b7 2372 	ldrh.w	r2, [r7, #882]	; 0x372
 8013842:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8013844:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	3384      	adds	r3, #132	; 0x84
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	f8d7 4374 	ldr.w	r4, [r7, #884]	; 0x374
 8013852:	463a      	mov	r2, r7
 8013854:	f8d7 1374 	ldr.w	r1, [r7, #884]	; 0x374
 8013858:	4610      	mov	r0, r2
 801385a:	4798      	blx	r3
 801385c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013860:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 8013864:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8013868:	ca07      	ldmia	r2, {r0, r1, r2}
 801386a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801386e:	bf00      	nop
    Unicode::snprintf(temp_1Buffer, TEMP_1_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_QFR3).getText());
 8013870:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013874:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	f203 74bc 	addw	r4, r3, #1980	; 0x7bc
 801387e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8013882:	2107      	movs	r1, #7
 8013884:	4618      	mov	r0, r3
 8013886:	f7fd fa53 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801388a:	4b16      	ldr	r3, [pc, #88]	; (80138e4 <_ZN8cellBaseC1Ev+0x26c8>)
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d105      	bne.n	801389e <_ZN8cellBaseC1Ev+0x2682>
 8013892:	4b15      	ldr	r3, [pc, #84]	; (80138e8 <_ZN8cellBaseC1Ev+0x26cc>)
 8013894:	4a0f      	ldr	r2, [pc, #60]	; (80138d4 <_ZN8cellBaseC1Ev+0x26b8>)
 8013896:	2160      	movs	r1, #96	; 0x60
 8013898:	480f      	ldr	r0, [pc, #60]	; (80138d8 <_ZN8cellBaseC1Ev+0x26bc>)
 801389a:	f01a f817 	bl	802d8cc <__assert_func>
 801389e:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 80138a2:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
        return typedTextId < numberOfTypedTexts;
 80138a6:	f8d7 3378 	ldr.w	r3, [r7, #888]	; 0x378
 80138aa:	889a      	ldrh	r2, [r3, #4]
 80138ac:	4b07      	ldr	r3, [pc, #28]	; (80138cc <_ZN8cellBaseC1Ev+0x26b0>)
 80138ae:	881b      	ldrh	r3, [r3, #0]
 80138b0:	429a      	cmp	r2, r3
 80138b2:	bf34      	ite	cc
 80138b4:	2301      	movcc	r3, #1
 80138b6:	2300      	movcs	r3, #0
 80138b8:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d116      	bne.n	80138ec <_ZN8cellBaseC1Ev+0x26d0>
 80138be:	4b04      	ldr	r3, [pc, #16]	; (80138d0 <_ZN8cellBaseC1Ev+0x26b4>)
 80138c0:	4a04      	ldr	r2, [pc, #16]	; (80138d4 <_ZN8cellBaseC1Ev+0x26b8>)
 80138c2:	2161      	movs	r1, #97	; 0x61
 80138c4:	4804      	ldr	r0, [pc, #16]	; (80138d8 <_ZN8cellBaseC1Ev+0x26bc>)
 80138c6:	f01a f801 	bl	802d8cc <__assert_func>
 80138ca:	bf00      	nop
 80138cc:	2000f1c0 	.word	0x2000f1c0
 80138d0:	0802ef70 	.word	0x0802ef70
 80138d4:	0802efb0 	.word	0x0802efb0
 80138d8:	0802ef2c 	.word	0x0802ef2c
 80138dc:	2000f1c8 	.word	0x2000f1c8
 80138e0:	0802efe8 	.word	0x0802efe8
 80138e4:	2000f1bc 	.word	0x2000f1bc
 80138e8:	0802eeac 	.word	0x0802eeac
 80138ec:	bf00      	nop
        return texts->getText(typedTextId);
 80138ee:	4bd9      	ldr	r3, [pc, #868]	; (8013c54 <_ZN8cellBaseC1Ev+0x2a38>)
 80138f0:	681a      	ldr	r2, [r3, #0]
 80138f2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80138f6:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80138fa:	889b      	ldrh	r3, [r3, #4]
 80138fc:	4619      	mov	r1, r3
 80138fe:	4610      	mov	r0, r2
 8013900:	f002 fb38 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 8013904:	4603      	mov	r3, r0
 8013906:	bf00      	nop
 8013908:	4ad3      	ldr	r2, [pc, #844]	; (8013c58 <_ZN8cellBaseC1Ev+0x2a3c>)
 801390a:	210a      	movs	r1, #10
 801390c:	4620      	mov	r0, r4
 801390e:	f00d fc5b 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013912:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 8013916:	4618      	mov	r0, r3
 8013918:	f7fc f8d8 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    temp_1.setWildcard(temp_1Buffer);
 801391c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013920:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	f503 62a7 	add.w	r2, r3, #1336	; 0x538
 801392a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801392e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8013938:	4619      	mov	r1, r3
 801393a:	4610      	mov	r0, r2
 801393c:	f7fd fc3e 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    temp_1.resizeToCurrentText();
 8013940:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013944:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 801394e:	4618      	mov	r0, r3
 8013950:	f007 ff5e 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    temp_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ADFX));
 8013954:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013958:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	f503 64a7 	add.w	r4, r3, #1336	; 0x538
 8013962:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8013966:	2108      	movs	r1, #8
 8013968:	4618      	mov	r0, r3
 801396a:	f7fd f9e1 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 801396e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8013972:	4619      	mov	r1, r3
 8013974:	4620      	mov	r0, r4
 8013976:	f007 ff6b 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801397a:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 801397e:	4618      	mov	r0, r3
 8013980:	f7fc f8a4 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    temp_2.setXY(7, 64);
 8013984:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013988:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	f203 5384 	addw	r3, r3, #1412	; 0x584
 8013992:	2240      	movs	r2, #64	; 0x40
 8013994:	2107      	movs	r1, #7
 8013996:	4618      	mov	r0, r3
 8013998:	f7fd f8d0 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    temp_2.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801399c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80139a0:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	f203 5484 	addw	r4, r3, #1412	; 0x584
 80139aa:	23ff      	movs	r3, #255	; 0xff
 80139ac:	f887 337f 	strb.w	r3, [r7, #895]	; 0x37f
 80139b0:	23ff      	movs	r3, #255	; 0xff
 80139b2:	f887 337e 	strb.w	r3, [r7, #894]	; 0x37e
 80139b6:	23ff      	movs	r3, #255	; 0xff
 80139b8:	f887 337d 	strb.w	r3, [r7, #893]	; 0x37d
 80139bc:	f897 337f 	ldrb.w	r3, [r7, #895]	; 0x37f
 80139c0:	041b      	lsls	r3, r3, #16
 80139c2:	461a      	mov	r2, r3
 80139c4:	f897 337e 	ldrb.w	r3, [r7, #894]	; 0x37e
 80139c8:	021b      	lsls	r3, r3, #8
 80139ca:	431a      	orrs	r2, r3
 80139cc:	f897 337d 	ldrb.w	r3, [r7, #893]	; 0x37d
 80139d0:	4313      	orrs	r3, r2
 80139d2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80139d6:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80139da:	4611      	mov	r1, r2
 80139dc:	4618      	mov	r0, r3
 80139de:	f7fc ffdb 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 80139e2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80139e6:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	461a      	mov	r2, r3
 80139ee:	f8c7 4380 	str.w	r4, [r7, #896]	; 0x380
 80139f2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80139f6:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 80139fa:	601a      	str	r2, [r3, #0]
        color = newColor;
 80139fc:	f8d7 3380 	ldr.w	r3, [r7, #896]	; 0x380
 8013a00:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8013a04:	f5a2 7265 	sub.w	r2, r2, #916	; 0x394
 8013a08:	6812      	ldr	r2, [r2, #0]
 8013a0a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013a0c:	bf00      	nop
    temp_2.setLinespacing(0);
 8013a0e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013a12:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	f203 5384 	addw	r3, r3, #1412	; 0x584
 8013a1c:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 8013a20:	2300      	movs	r3, #0
 8013a22:	f8a7 3386 	strh.w	r3, [r7, #902]	; 0x386
        linespace = space;
 8013a26:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8013a2a:	f8b7 2386 	ldrh.w	r2, [r7, #902]	; 0x386
 8013a2e:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8013a30:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	3384      	adds	r3, #132	; 0x84
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	f8d7 4388 	ldr.w	r4, [r7, #904]	; 0x388
 8013a3e:	463a      	mov	r2, r7
 8013a40:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8013a44:	4610      	mov	r0, r2
 8013a46:	4798      	blx	r3
 8013a48:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013a4c:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 8013a50:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8013a54:	ca07      	ldmia	r2, {r0, r1, r2}
 8013a56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8013a5a:	bf00      	nop
    Unicode::snprintf(temp_2Buffer, TEMP_2_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_8VXS).getText());
 8013a5c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013a60:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 8013a6a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8013a6e:	2105      	movs	r1, #5
 8013a70:	4618      	mov	r0, r3
 8013a72:	f7fd f95d 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8013a76:	4b79      	ldr	r3, [pc, #484]	; (8013c5c <_ZN8cellBaseC1Ev+0x2a40>)
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d105      	bne.n	8013a8a <_ZN8cellBaseC1Ev+0x286e>
 8013a7e:	4b78      	ldr	r3, [pc, #480]	; (8013c60 <_ZN8cellBaseC1Ev+0x2a44>)
 8013a80:	4a78      	ldr	r2, [pc, #480]	; (8013c64 <_ZN8cellBaseC1Ev+0x2a48>)
 8013a82:	2160      	movs	r1, #96	; 0x60
 8013a84:	4878      	ldr	r0, [pc, #480]	; (8013c68 <_ZN8cellBaseC1Ev+0x2a4c>)
 8013a86:	f019 ff21 	bl	802d8cc <__assert_func>
 8013a8a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8013a8e:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
        return typedTextId < numberOfTypedTexts;
 8013a92:	f8d7 338c 	ldr.w	r3, [r7, #908]	; 0x38c
 8013a96:	889a      	ldrh	r2, [r3, #4]
 8013a98:	4b74      	ldr	r3, [pc, #464]	; (8013c6c <_ZN8cellBaseC1Ev+0x2a50>)
 8013a9a:	881b      	ldrh	r3, [r3, #0]
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	bf34      	ite	cc
 8013aa0:	2301      	movcc	r3, #1
 8013aa2:	2300      	movcs	r3, #0
 8013aa4:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d105      	bne.n	8013ab6 <_ZN8cellBaseC1Ev+0x289a>
 8013aaa:	4b71      	ldr	r3, [pc, #452]	; (8013c70 <_ZN8cellBaseC1Ev+0x2a54>)
 8013aac:	4a6d      	ldr	r2, [pc, #436]	; (8013c64 <_ZN8cellBaseC1Ev+0x2a48>)
 8013aae:	2161      	movs	r1, #97	; 0x61
 8013ab0:	486d      	ldr	r0, [pc, #436]	; (8013c68 <_ZN8cellBaseC1Ev+0x2a4c>)
 8013ab2:	f019 ff0b 	bl	802d8cc <__assert_func>
 8013ab6:	bf00      	nop
        return texts->getText(typedTextId);
 8013ab8:	4b66      	ldr	r3, [pc, #408]	; (8013c54 <_ZN8cellBaseC1Ev+0x2a38>)
 8013aba:	681a      	ldr	r2, [r3, #0]
 8013abc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013ac0:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8013ac4:	889b      	ldrh	r3, [r3, #4]
 8013ac6:	4619      	mov	r1, r3
 8013ac8:	4610      	mov	r0, r2
 8013aca:	f002 fa53 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	bf00      	nop
 8013ad2:	4a61      	ldr	r2, [pc, #388]	; (8013c58 <_ZN8cellBaseC1Ev+0x2a3c>)
 8013ad4:	210a      	movs	r1, #10
 8013ad6:	4620      	mov	r0, r4
 8013ad8:	f00d fb76 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013adc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f7fb fff3 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    temp_2.setWildcard(temp_2Buffer);
 8013ae6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013aea:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	f203 5284 	addw	r2, r3, #1412	; 0x584
 8013af4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013af8:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8013b02:	4619      	mov	r1, r3
 8013b04:	4610      	mov	r0, r2
 8013b06:	f7fd fb59 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    temp_2.resizeToCurrentText();
 8013b0a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013b0e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	f203 5384 	addw	r3, r3, #1412	; 0x584
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f007 fe79 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    temp_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_FQWM));
 8013b1e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013b22:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	f203 5484 	addw	r4, r3, #1412	; 0x584
 8013b2c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8013b30:	2106      	movs	r1, #6
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7fd f8fc 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 8013b38:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8013b3c:	4619      	mov	r1, r3
 8013b3e:	4620      	mov	r0, r4
 8013b40:	f007 fe86 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013b44:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f7fb ffbf 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    id.setXY(7, 5);
 8013b4e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013b52:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8013b5c:	2205      	movs	r2, #5
 8013b5e:	2107      	movs	r1, #7
 8013b60:	4618      	mov	r0, r3
 8013b62:	f7fc ffeb 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    id.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8013b66:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013b6a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	f503 64ba 	add.w	r4, r3, #1488	; 0x5d0
 8013b74:	23ff      	movs	r3, #255	; 0xff
 8013b76:	f887 3393 	strb.w	r3, [r7, #915]	; 0x393
 8013b7a:	23ff      	movs	r3, #255	; 0xff
 8013b7c:	f887 3392 	strb.w	r3, [r7, #914]	; 0x392
 8013b80:	23ff      	movs	r3, #255	; 0xff
 8013b82:	f887 3391 	strb.w	r3, [r7, #913]	; 0x391
 8013b86:	f897 3393 	ldrb.w	r3, [r7, #915]	; 0x393
 8013b8a:	041b      	lsls	r3, r3, #16
 8013b8c:	461a      	mov	r2, r3
 8013b8e:	f897 3392 	ldrb.w	r3, [r7, #914]	; 0x392
 8013b92:	021b      	lsls	r3, r3, #8
 8013b94:	431a      	orrs	r2, r3
 8013b96:	f897 3391 	ldrb.w	r3, [r7, #913]	; 0x391
 8013b9a:	4313      	orrs	r3, r2
 8013b9c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013ba0:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8013ba4:	4611      	mov	r1, r2
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f7fc fef6 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8013bac:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013bb0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	461a      	mov	r2, r3
 8013bb8:	f8c7 4394 	str.w	r4, [r7, #916]	; 0x394
 8013bbc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013bc0:	f5a3 7366 	sub.w	r3, r3, #920	; 0x398
 8013bc4:	601a      	str	r2, [r3, #0]
        color = newColor;
 8013bc6:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 8013bca:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8013bce:	f5a2 7266 	sub.w	r2, r2, #920	; 0x398
 8013bd2:	6812      	ldr	r2, [r2, #0]
 8013bd4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013bd6:	bf00      	nop
    id.setLinespacing(0);
 8013bd8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013bdc:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8013be6:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 8013bea:	2300      	movs	r3, #0
 8013bec:	f8a7 339a 	strh.w	r3, [r7, #922]	; 0x39a
        linespace = space;
 8013bf0:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8013bf4:	f8b7 239a 	ldrh.w	r2, [r7, #922]	; 0x39a
 8013bf8:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8013bfa:	f8d7 339c 	ldr.w	r3, [r7, #924]	; 0x39c
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	3384      	adds	r3, #132	; 0x84
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	f8d7 439c 	ldr.w	r4, [r7, #924]	; 0x39c
 8013c08:	463a      	mov	r2, r7
 8013c0a:	f8d7 139c 	ldr.w	r1, [r7, #924]	; 0x39c
 8013c0e:	4610      	mov	r0, r2
 8013c10:	4798      	blx	r3
 8013c12:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013c16:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 8013c1a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8013c1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8013c20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8013c24:	bf00      	nop
    Unicode::snprintf(idBuffer, ID_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_DXR1).getText());
 8013c26:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013c2a:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	f203 74e4 	addw	r4, r3, #2020	; 0x7e4
 8013c34:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013c38:	2103      	movs	r1, #3
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7fd f878 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8013c40:	4b06      	ldr	r3, [pc, #24]	; (8013c5c <_ZN8cellBaseC1Ev+0x2a40>)
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d115      	bne.n	8013c74 <_ZN8cellBaseC1Ev+0x2a58>
 8013c48:	4b05      	ldr	r3, [pc, #20]	; (8013c60 <_ZN8cellBaseC1Ev+0x2a44>)
 8013c4a:	4a06      	ldr	r2, [pc, #24]	; (8013c64 <_ZN8cellBaseC1Ev+0x2a48>)
 8013c4c:	2160      	movs	r1, #96	; 0x60
 8013c4e:	4806      	ldr	r0, [pc, #24]	; (8013c68 <_ZN8cellBaseC1Ev+0x2a4c>)
 8013c50:	f019 fe3c 	bl	802d8cc <__assert_func>
 8013c54:	2000f1c8 	.word	0x2000f1c8
 8013c58:	0802efe8 	.word	0x0802efe8
 8013c5c:	2000f1bc 	.word	0x2000f1bc
 8013c60:	0802eeac 	.word	0x0802eeac
 8013c64:	0802efb0 	.word	0x0802efb0
 8013c68:	0802ef2c 	.word	0x0802ef2c
 8013c6c:	2000f1c0 	.word	0x2000f1c0
 8013c70:	0802ef70 	.word	0x0802ef70
 8013c74:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013c78:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
        return typedTextId < numberOfTypedTexts;
 8013c7c:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 8013c80:	889a      	ldrh	r2, [r3, #4]
 8013c82:	4b7a      	ldr	r3, [pc, #488]	; (8013e6c <_ZN8cellBaseC1Ev+0x2c50>)
 8013c84:	881b      	ldrh	r3, [r3, #0]
 8013c86:	429a      	cmp	r2, r3
 8013c88:	bf34      	ite	cc
 8013c8a:	2301      	movcc	r3, #1
 8013c8c:	2300      	movcs	r3, #0
 8013c8e:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d105      	bne.n	8013ca0 <_ZN8cellBaseC1Ev+0x2a84>
 8013c94:	4b76      	ldr	r3, [pc, #472]	; (8013e70 <_ZN8cellBaseC1Ev+0x2c54>)
 8013c96:	4a77      	ldr	r2, [pc, #476]	; (8013e74 <_ZN8cellBaseC1Ev+0x2c58>)
 8013c98:	2161      	movs	r1, #97	; 0x61
 8013c9a:	4877      	ldr	r0, [pc, #476]	; (8013e78 <_ZN8cellBaseC1Ev+0x2c5c>)
 8013c9c:	f019 fe16 	bl	802d8cc <__assert_func>
 8013ca0:	bf00      	nop
        return texts->getText(typedTextId);
 8013ca2:	4b76      	ldr	r3, [pc, #472]	; (8013e7c <_ZN8cellBaseC1Ev+0x2c60>)
 8013ca4:	681a      	ldr	r2, [r3, #0]
 8013ca6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013caa:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8013cae:	889b      	ldrh	r3, [r3, #4]
 8013cb0:	4619      	mov	r1, r3
 8013cb2:	4610      	mov	r0, r2
 8013cb4:	f002 f95e 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	bf00      	nop
 8013cbc:	4a70      	ldr	r2, [pc, #448]	; (8013e80 <_ZN8cellBaseC1Ev+0x2c64>)
 8013cbe:	210a      	movs	r1, #10
 8013cc0:	4620      	mov	r0, r4
 8013cc2:	f00d fa81 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013cc6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f7fb fefe 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    id.setWildcard(idBuffer);
 8013cd0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013cd4:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	f503 62ba 	add.w	r2, r3, #1488	; 0x5d0
 8013cde:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013ce2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	f203 73e4 	addw	r3, r3, #2020	; 0x7e4
 8013cec:	4619      	mov	r1, r3
 8013cee:	4610      	mov	r0, r2
 8013cf0:	f7fd fa64 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    id.resizeToCurrentText();
 8013cf4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013cf8:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8013d02:	4618      	mov	r0, r3
 8013d04:	f007 fd84 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    id.setTypedText(touchgfx::TypedText(T___SINGLEUSE_7PZ9));
 8013d08:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013d0c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	f503 64ba 	add.w	r4, r3, #1488	; 0x5d0
 8013d16:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8013d1a:	2104      	movs	r1, #4
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7fd f807 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 8013d22:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8013d26:	4619      	mov	r1, r3
 8013d28:	4620      	mov	r0, r4
 8013d2a:	f007 fd91 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013d2e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8013d32:	4618      	mov	r0, r3
 8013d34:	f7fb feca 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    total.setXY(18, 35);
 8013d38:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013d3c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8013d46:	2223      	movs	r2, #35	; 0x23
 8013d48:	2112      	movs	r1, #18
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	f7fc fef6 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    total.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8013d50:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013d54:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	f203 641c 	addw	r4, r3, #1564	; 0x61c
 8013d5e:	23ff      	movs	r3, #255	; 0xff
 8013d60:	f887 33a7 	strb.w	r3, [r7, #935]	; 0x3a7
 8013d64:	23ff      	movs	r3, #255	; 0xff
 8013d66:	f887 33a6 	strb.w	r3, [r7, #934]	; 0x3a6
 8013d6a:	23ff      	movs	r3, #255	; 0xff
 8013d6c:	f887 33a5 	strb.w	r3, [r7, #933]	; 0x3a5
 8013d70:	f897 33a7 	ldrb.w	r3, [r7, #935]	; 0x3a7
 8013d74:	041b      	lsls	r3, r3, #16
 8013d76:	461a      	mov	r2, r3
 8013d78:	f897 33a6 	ldrb.w	r3, [r7, #934]	; 0x3a6
 8013d7c:	021b      	lsls	r3, r3, #8
 8013d7e:	431a      	orrs	r2, r3
 8013d80:	f897 33a5 	ldrb.w	r3, [r7, #933]	; 0x3a5
 8013d84:	4313      	orrs	r3, r2
 8013d86:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8013d8a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8013d8e:	4611      	mov	r1, r2
 8013d90:	4618      	mov	r0, r3
 8013d92:	f7fc fe01 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8013d96:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013d9a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	461a      	mov	r2, r3
 8013da2:	f8c7 43a8 	str.w	r4, [r7, #936]	; 0x3a8
 8013da6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013daa:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 8013dae:	601a      	str	r2, [r3, #0]
        color = newColor;
 8013db0:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 8013db4:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8013db8:	f5a2 7267 	sub.w	r2, r2, #924	; 0x39c
 8013dbc:	6812      	ldr	r2, [r2, #0]
 8013dbe:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8013dc0:	bf00      	nop
    total.setLinespacing(0);
 8013dc2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013dc6:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8013dd0:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	f8a7 33ae 	strh.w	r3, [r7, #942]	; 0x3ae
        linespace = space;
 8013dda:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8013dde:	f8b7 23ae 	ldrh.w	r2, [r7, #942]	; 0x3ae
 8013de2:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8013de4:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	3384      	adds	r3, #132	; 0x84
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	f8d7 43b0 	ldr.w	r4, [r7, #944]	; 0x3b0
 8013df2:	463a      	mov	r2, r7
 8013df4:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
 8013df8:	4610      	mov	r0, r2
 8013dfa:	4798      	blx	r3
 8013dfc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013e00:	f5a3 726e 	sub.w	r2, r3, #952	; 0x3b8
 8013e04:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8013e08:	ca07      	ldmia	r2, {r0, r1, r2}
 8013e0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8013e0e:	bf00      	nop
    Unicode::snprintf(totalBuffer, TOTAL_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_9KPV).getText());
 8013e10:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013e14:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	f503 64ff 	add.w	r4, r3, #2040	; 0x7f8
 8013e1e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8013e22:	2100      	movs	r1, #0
 8013e24:	4618      	mov	r0, r3
 8013e26:	f7fc ff83 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8013e2a:	4b16      	ldr	r3, [pc, #88]	; (8013e84 <_ZN8cellBaseC1Ev+0x2c68>)
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d105      	bne.n	8013e3e <_ZN8cellBaseC1Ev+0x2c22>
 8013e32:	4b15      	ldr	r3, [pc, #84]	; (8013e88 <_ZN8cellBaseC1Ev+0x2c6c>)
 8013e34:	4a0f      	ldr	r2, [pc, #60]	; (8013e74 <_ZN8cellBaseC1Ev+0x2c58>)
 8013e36:	2160      	movs	r1, #96	; 0x60
 8013e38:	480f      	ldr	r0, [pc, #60]	; (8013e78 <_ZN8cellBaseC1Ev+0x2c5c>)
 8013e3a:	f019 fd47 	bl	802d8cc <__assert_func>
 8013e3e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8013e42:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
        return typedTextId < numberOfTypedTexts;
 8013e46:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8013e4a:	889a      	ldrh	r2, [r3, #4]
 8013e4c:	4b07      	ldr	r3, [pc, #28]	; (8013e6c <_ZN8cellBaseC1Ev+0x2c50>)
 8013e4e:	881b      	ldrh	r3, [r3, #0]
 8013e50:	429a      	cmp	r2, r3
 8013e52:	bf34      	ite	cc
 8013e54:	2301      	movcc	r3, #1
 8013e56:	2300      	movcs	r3, #0
 8013e58:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d116      	bne.n	8013e8c <_ZN8cellBaseC1Ev+0x2c70>
 8013e5e:	4b04      	ldr	r3, [pc, #16]	; (8013e70 <_ZN8cellBaseC1Ev+0x2c54>)
 8013e60:	4a04      	ldr	r2, [pc, #16]	; (8013e74 <_ZN8cellBaseC1Ev+0x2c58>)
 8013e62:	2161      	movs	r1, #97	; 0x61
 8013e64:	4804      	ldr	r0, [pc, #16]	; (8013e78 <_ZN8cellBaseC1Ev+0x2c5c>)
 8013e66:	f019 fd31 	bl	802d8cc <__assert_func>
 8013e6a:	bf00      	nop
 8013e6c:	2000f1c0 	.word	0x2000f1c0
 8013e70:	0802ef70 	.word	0x0802ef70
 8013e74:	0802efb0 	.word	0x0802efb0
 8013e78:	0802ef2c 	.word	0x0802ef2c
 8013e7c:	2000f1c8 	.word	0x2000f1c8
 8013e80:	0802efe8 	.word	0x0802efe8
 8013e84:	2000f1bc 	.word	0x2000f1bc
 8013e88:	0802eeac 	.word	0x0802eeac
 8013e8c:	bf00      	nop
        return texts->getText(typedTextId);
 8013e8e:	4bd1      	ldr	r3, [pc, #836]	; (80141d4 <_ZN8cellBaseC1Ev+0x2fb8>)
 8013e90:	681a      	ldr	r2, [r3, #0]
 8013e92:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013e96:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8013e9a:	889b      	ldrh	r3, [r3, #4]
 8013e9c:	4619      	mov	r1, r3
 8013e9e:	4610      	mov	r0, r2
 8013ea0:	f002 f868 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	bf00      	nop
 8013ea8:	4acb      	ldr	r2, [pc, #812]	; (80141d8 <_ZN8cellBaseC1Ev+0x2fbc>)
 8013eaa:	210a      	movs	r1, #10
 8013eac:	4620      	mov	r0, r4
 8013eae:	f00d f98b 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8013eb2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f7fb fe08 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    total.setWildcard(totalBuffer);
 8013ebc:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013ec0:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	f203 621c 	addw	r2, r3, #1564	; 0x61c
 8013eca:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013ece:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 8013ed8:	4619      	mov	r1, r3
 8013eda:	4610      	mov	r0, r2
 8013edc:	f7fd f96e 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    total.resizeToCurrentText();
 8013ee0:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013ee4:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f007 fc8e 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    total.setTypedText(touchgfx::TypedText(T___SINGLEUSE_KQ94));
 8013ef4:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013ef8:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	f203 641c 	addw	r4, r3, #1564	; 0x61c
 8013f02:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8013f06:	2101      	movs	r1, #1
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f7fc ff11 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 8013f0e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8013f12:	4619      	mov	r1, r3
 8013f14:	4620      	mov	r0, r4
 8013f16:	f007 fc9b 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8013f1a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f7fb fdd4 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    add(cell_0_voltage);
 8013f24:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013f28:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013f2c:	681a      	ldr	r2, [r3, #0]
 8013f2e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013f32:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	332c      	adds	r3, #44	; 0x2c
 8013f3a:	4619      	mov	r1, r3
 8013f3c:	4610      	mov	r0, r2
 8013f3e:	f005 fb0d 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(cell_1_voltage);
 8013f42:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013f46:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013f4a:	681a      	ldr	r2, [r3, #0]
 8013f4c:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013f50:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	3378      	adds	r3, #120	; 0x78
 8013f58:	4619      	mov	r1, r3
 8013f5a:	4610      	mov	r0, r2
 8013f5c:	f005 fafe 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(cell_2_voltage);
 8013f60:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013f64:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013f68:	681a      	ldr	r2, [r3, #0]
 8013f6a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013f6e:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	33c4      	adds	r3, #196	; 0xc4
 8013f76:	4619      	mov	r1, r3
 8013f78:	4610      	mov	r0, r2
 8013f7a:	f005 faef 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(cell_3_voltage);
 8013f7e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013f82:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013f86:	681a      	ldr	r2, [r3, #0]
 8013f88:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013f8c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8013f96:	4619      	mov	r1, r3
 8013f98:	4610      	mov	r0, r2
 8013f9a:	f005 fadf 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(cell_4_voltage);
 8013f9e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013fa2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013fa6:	681a      	ldr	r2, [r3, #0]
 8013fa8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013fac:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8013fb6:	4619      	mov	r1, r3
 8013fb8:	4610      	mov	r0, r2
 8013fba:	f005 facf 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(cell_5_voltage);
 8013fbe:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013fc2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013fc6:	681a      	ldr	r2, [r3, #0]
 8013fc8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013fcc:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8013fd6:	4619      	mov	r1, r3
 8013fd8:	4610      	mov	r0, r2
 8013fda:	f005 fabf 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(cell_6_voltage);
 8013fde:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013fe2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013fe6:	681a      	ldr	r2, [r3, #0]
 8013fe8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8013fec:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8013ff6:	4619      	mov	r1, r3
 8013ff8:	4610      	mov	r0, r2
 8013ffa:	f005 faaf 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(cell_7_voltage);
 8013ffe:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8014002:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014006:	681a      	ldr	r2, [r3, #0]
 8014008:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801400c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8014016:	4619      	mov	r1, r3
 8014018:	4610      	mov	r0, r2
 801401a:	f005 fa9f 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(cell_8_voltage);
 801401e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8014022:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014026:	681a      	ldr	r2, [r3, #0]
 8014028:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801402c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8014036:	4619      	mov	r1, r3
 8014038:	4610      	mov	r0, r2
 801403a:	f005 fa8f 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(cell_9_voltage);
 801403e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8014042:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014046:	681a      	ldr	r2, [r3, #0]
 8014048:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801404c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8014056:	4619      	mov	r1, r3
 8014058:	4610      	mov	r0, r2
 801405a:	f005 fa7f 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(cell_10_voltage);
 801405e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8014062:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014066:	681a      	ldr	r2, [r3, #0]
 8014068:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801406c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8014076:	4619      	mov	r1, r3
 8014078:	4610      	mov	r0, r2
 801407a:	f005 fa6f 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(cell_11_voltage);
 801407e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8014082:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014086:	681a      	ldr	r2, [r3, #0]
 8014088:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801408c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8014096:	4619      	mov	r1, r3
 8014098:	4610      	mov	r0, r2
 801409a:	f005 fa5f 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(cell_12_voltage);
 801409e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80140a2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80140a6:	681a      	ldr	r2, [r3, #0]
 80140a8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80140ac:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80140b6:	4619      	mov	r1, r3
 80140b8:	4610      	mov	r0, r2
 80140ba:	f005 fa4f 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(cell_13_voltage);
 80140be:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80140c2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80140c6:	681a      	ldr	r2, [r3, #0]
 80140c8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80140cc:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80140d6:	4619      	mov	r1, r3
 80140d8:	4610      	mov	r0, r2
 80140da:	f005 fa3f 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(cell_15_voltage);
 80140de:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80140e2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80140e6:	681a      	ldr	r2, [r3, #0]
 80140e8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80140ec:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	f203 4354 	addw	r3, r3, #1108	; 0x454
 80140f6:	4619      	mov	r1, r3
 80140f8:	4610      	mov	r0, r2
 80140fa:	f005 fa2f 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(cell_14_voltage);
 80140fe:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8014102:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014106:	681a      	ldr	r2, [r3, #0]
 8014108:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801410c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8014116:	4619      	mov	r1, r3
 8014118:	4610      	mov	r0, r2
 801411a:	f005 fa1f 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(temp_0);
 801411e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8014122:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014126:	681a      	ldr	r2, [r3, #0]
 8014128:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801412c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8014136:	4619      	mov	r1, r3
 8014138:	4610      	mov	r0, r2
 801413a:	f005 fa0f 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(temp_1);
 801413e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8014142:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014146:	681a      	ldr	r2, [r3, #0]
 8014148:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801414c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8014156:	4619      	mov	r1, r3
 8014158:	4610      	mov	r0, r2
 801415a:	f005 f9ff 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(temp_2);
 801415e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8014162:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014166:	681a      	ldr	r2, [r3, #0]
 8014168:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801416c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	f203 5384 	addw	r3, r3, #1412	; 0x584
 8014176:	4619      	mov	r1, r3
 8014178:	4610      	mov	r0, r2
 801417a:	f005 f9ef 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(id);
 801417e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8014182:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014186:	681a      	ldr	r2, [r3, #0]
 8014188:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 801418c:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8014196:	4619      	mov	r1, r3
 8014198:	4610      	mov	r0, r2
 801419a:	f005 f9df 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(total);
 801419e:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80141a2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80141a6:	681a      	ldr	r2, [r3, #0]
 80141a8:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80141ac:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 80141b6:	4619      	mov	r1, r3
 80141b8:	4610      	mov	r0, r2
 80141ba:	f005 f9cf 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80141be:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80141c2:	f5a3 7369 	sub.w	r3, r3, #932	; 0x3a4
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	4618      	mov	r0, r3
 80141ca:	f507 776f 	add.w	r7, r7, #956	; 0x3bc
 80141ce:	46bd      	mov	sp, r7
 80141d0:	bd90      	pop	{r4, r7, pc}
 80141d2:	bf00      	nop
 80141d4:	2000f1c8 	.word	0x2000f1c8
 80141d8:	0802efe8 	.word	0x0802efe8

080141dc <_ZN8cellBaseD1Ev>:

cellBase::~cellBase()
 80141dc:	b580      	push	{r7, lr}
 80141de:	b082      	sub	sp, #8
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]
 80141e4:	4a43      	ldr	r2, [pc, #268]	; (80142f4 <_ZN8cellBaseD1Ev+0x118>)
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	601a      	str	r2, [r3, #0]
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 80141f0:	4618      	mov	r0, r3
 80141f2:	f000 f89d 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 80141fc:	4618      	mov	r0, r3
 80141fe:	f000 f897 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	f203 5384 	addw	r3, r3, #1412	; 0x584
 8014208:	4618      	mov	r0, r3
 801420a:	f000 f891 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8014214:	4618      	mov	r0, r3
 8014216:	f000 f88b 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8014220:	4618      	mov	r0, r3
 8014222:	f000 f885 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 801422c:	4618      	mov	r0, r3
 801422e:	f000 f87f 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	f203 4354 	addw	r3, r3, #1108	; 0x454
 8014238:	4618      	mov	r0, r3
 801423a:	f000 f879 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8014244:	4618      	mov	r0, r3
 8014246:	f000 f873 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8014250:	4618      	mov	r0, r3
 8014252:	f000 f86d 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	f503 735c 	add.w	r3, r3, #880	; 0x370
 801425c:	4618      	mov	r0, r3
 801425e:	f000 f867 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8014268:	4618      	mov	r0, r3
 801426a:	f000 f861 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8014274:	4618      	mov	r0, r3
 8014276:	f000 f85b 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8014280:	4618      	mov	r0, r3
 8014282:	f000 f855 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	f503 7310 	add.w	r3, r3, #576	; 0x240
 801428c:	4618      	mov	r0, r3
 801428e:	f000 f84f 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8014298:	4618      	mov	r0, r3
 801429a:	f000 f849 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80142a4:	4618      	mov	r0, r3
 80142a6:	f000 f843 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80142b0:	4618      	mov	r0, r3
 80142b2:	f000 f83d 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80142bc:	4618      	mov	r0, r3
 80142be:	f000 f837 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	33c4      	adds	r3, #196	; 0xc4
 80142c6:	4618      	mov	r0, r3
 80142c8:	f000 f832 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	3378      	adds	r3, #120	; 0x78
 80142d0:	4618      	mov	r0, r3
 80142d2:	f000 f82d 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	332c      	adds	r3, #44	; 0x2c
 80142da:	4618      	mov	r0, r3
 80142dc:	f000 f828 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	4618      	mov	r0, r3
 80142e4:	f7fc ff78 	bl	80111d8 <_ZN8touchgfx9ContainerD1Ev>
{

}
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	4618      	mov	r0, r3
 80142ec:	3708      	adds	r7, #8
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bd80      	pop	{r7, pc}
 80142f2:	bf00      	nop
 80142f4:	0802fcb0 	.word	0x0802fcb0

080142f8 <_ZN8cellBaseD0Ev>:
cellBase::~cellBase()
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b082      	sub	sp, #8
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
}
 8014300:	6878      	ldr	r0, [r7, #4]
 8014302:	f7ff ff6b 	bl	80141dc <_ZN8cellBaseD1Ev>
 8014306:	f640 010c 	movw	r1, #2060	; 0x80c
 801430a:	6878      	ldr	r0, [r7, #4]
 801430c:	f019 fab0 	bl	802d870 <_ZdlPvj>
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	4618      	mov	r0, r3
 8014314:	3708      	adds	r7, #8
 8014316:	46bd      	mov	sp, r7
 8014318:	bd80      	pop	{r7, pc}

0801431a <_ZN8cellBase10initializeEv>:

void cellBase::initialize()
{
 801431a:	b480      	push	{r7}
 801431c:	b083      	sub	sp, #12
 801431e:	af00      	add	r7, sp, #0
 8014320:	6078      	str	r0, [r7, #4]

}
 8014322:	bf00      	nop
 8014324:	370c      	adds	r7, #12
 8014326:	46bd      	mov	sp, r7
 8014328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432c:	4770      	bx	lr
	...

08014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8014330:	b580      	push	{r7, lr}
 8014332:	b082      	sub	sp, #8
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
 8014338:	4a05      	ldr	r2, [pc, #20]	; (8014350 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	601a      	str	r2, [r3, #0]
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	4618      	mov	r0, r3
 8014342:	f7fc fee9 	bl	8011118 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	4618      	mov	r0, r3
 801434a:	3708      	adds	r7, #8
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}
 8014350:	0802fd44 	.word	0x0802fd44

08014354 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8014354:	b580      	push	{r7, lr}
 8014356:	b082      	sub	sp, #8
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	f7ff ffe7 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8014362:	214c      	movs	r1, #76	; 0x4c
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f019 fa83 	bl	802d870 <_ZdlPvj>
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	4618      	mov	r0, r3
 801436e:	3708      	adds	r7, #8
 8014370:	46bd      	mov	sp, r7
 8014372:	bd80      	pop	{r7, pc}

08014374 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8014374:	b480      	push	{r7}
 8014376:	b083      	sub	sp, #12
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
        : color(0)
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	2200      	movs	r2, #0
 8014380:	601a      	str	r2, [r3, #0]
    }
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	4618      	mov	r0, r3
 8014386:	370c      	adds	r7, #12
 8014388:	46bd      	mov	sp, r7
 801438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438e:	4770      	bx	lr

08014390 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8014390:	b480      	push	{r7}
 8014392:	b083      	sub	sp, #12
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
        return color;
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	681b      	ldr	r3, [r3, #0]
    }
 801439c:	4618      	mov	r0, r3
 801439e:	370c      	adds	r7, #12
 80143a0:	46bd      	mov	sp, r7
 80143a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a6:	4770      	bx	lr

080143a8 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b084      	sub	sp, #16
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	60f8      	str	r0, [r7, #12]
 80143b0:	4608      	mov	r0, r1
 80143b2:	4611      	mov	r1, r2
 80143b4:	461a      	mov	r2, r3
 80143b6:	4603      	mov	r3, r0
 80143b8:	817b      	strh	r3, [r7, #10]
 80143ba:	460b      	mov	r3, r1
 80143bc:	813b      	strh	r3, [r7, #8]
 80143be:	4613      	mov	r3, r2
 80143c0:	80fb      	strh	r3, [r7, #6]
        setXY(x, y);
 80143c2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80143c6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80143ca:	4619      	mov	r1, r3
 80143cc:	68f8      	ldr	r0, [r7, #12]
 80143ce:	f7fc fbb5 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 80143d2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80143d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80143da:	4619      	mov	r1, r3
 80143dc:	68f8      	ldr	r0, [r7, #12]
 80143de:	f000 f804 	bl	80143ea <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80143e2:	bf00      	nop
 80143e4:	3710      	adds	r7, #16
 80143e6:	46bd      	mov	sp, r7
 80143e8:	bd80      	pop	{r7, pc}

080143ea <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 80143ea:	b580      	push	{r7, lr}
 80143ec:	b082      	sub	sp, #8
 80143ee:	af00      	add	r7, sp, #0
 80143f0:	6078      	str	r0, [r7, #4]
 80143f2:	460b      	mov	r3, r1
 80143f4:	807b      	strh	r3, [r7, #2]
 80143f6:	4613      	mov	r3, r2
 80143f8:	803b      	strh	r3, [r7, #0]
        setWidth(width);
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	3338      	adds	r3, #56	; 0x38
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8014406:	4611      	mov	r1, r2
 8014408:	6878      	ldr	r0, [r7, #4]
 801440a:	4798      	blx	r3
        setHeight(height);
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	333c      	adds	r3, #60	; 0x3c
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	f9b7 2000 	ldrsh.w	r2, [r7]
 8014418:	4611      	mov	r1, r2
 801441a:	6878      	ldr	r0, [r7, #4]
 801441c:	4798      	blx	r3
    }
 801441e:	bf00      	nop
 8014420:	3708      	adds	r7, #8
 8014422:	46bd      	mov	sp, r7
 8014424:	bd80      	pop	{r7, pc}

08014426 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 8014426:	b480      	push	{r7}
 8014428:	b083      	sub	sp, #12
 801442a:	af00      	add	r7, sp, #0
 801442c:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8014432:	4618      	mov	r0, r3
 8014434:	370c      	adds	r7, #12
 8014436:	46bd      	mov	sp, r7
 8014438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443c:	4770      	bx	lr
	...

08014440 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8014440:	b580      	push	{r7, lr}
 8014442:	b082      	sub	sp, #8
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
    {
 8014448:	4a06      	ldr	r2, [pc, #24]	; (8014464 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	601a      	str	r2, [r3, #0]
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	3304      	adds	r3, #4
 8014452:	4618      	mov	r0, r3
 8014454:	f7fc fec0 	bl	80111d8 <_ZN8touchgfx9ContainerD1Ev>
    }
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	4618      	mov	r0, r3
 801445c:	3708      	adds	r7, #8
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}
 8014462:	bf00      	nop
 8014464:	08030b90 	.word	0x08030b90

08014468 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8014468:	b580      	push	{r7, lr}
 801446a:	b082      	sub	sp, #8
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
    }
 8014470:	6878      	ldr	r0, [r7, #4]
 8014472:	f7ff ffe5 	bl	8014440 <_ZN8touchgfx6ScreenD1Ev>
 8014476:	213c      	movs	r1, #60	; 0x3c
 8014478:	6878      	ldr	r0, [r7, #4]
 801447a:	f019 f9f9 	bl	802d870 <_ZdlPvj>
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	4618      	mov	r0, r3
 8014482:	3708      	adds	r7, #8
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}

08014488 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8014488:	b480      	push	{r7}
 801448a:	b083      	sub	sp, #12
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
    {
    }
 8014490:	bf00      	nop
 8014492:	370c      	adds	r7, #12
 8014494:	46bd      	mov	sp, r7
 8014496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449a:	4770      	bx	lr

0801449c <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 801449c:	b480      	push	{r7}
 801449e:	b083      	sub	sp, #12
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	6078      	str	r0, [r7, #4]
    {
    }
 80144a4:	bf00      	nop
 80144a6:	370c      	adds	r7, #12
 80144a8:	46bd      	mov	sp, r7
 80144aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ae:	4770      	bx	lr

080144b0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 80144b0:	b480      	push	{r7}
 80144b2:	b083      	sub	sp, #12
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
    {
    }
 80144b8:	bf00      	nop
 80144ba:	370c      	adds	r7, #12
 80144bc:	46bd      	mov	sp, r7
 80144be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c2:	4770      	bx	lr

080144c4 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 80144c4:	b480      	push	{r7}
 80144c6:	b083      	sub	sp, #12
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
    {
    }
 80144cc:	bf00      	nop
 80144ce:	370c      	adds	r7, #12
 80144d0:	46bd      	mov	sp, r7
 80144d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d6:	4770      	bx	lr

080144d8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 80144d8:	b480      	push	{r7}
 80144da:	b083      	sub	sp, #12
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
 80144e0:	460b      	mov	r3, r1
 80144e2:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 80144e4:	bf00      	nop
 80144e6:	370c      	adds	r7, #12
 80144e8:	46bd      	mov	sp, r7
 80144ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ee:	4770      	bx	lr

080144f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b082      	sub	sp, #8
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
 80144f8:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	3304      	adds	r3, #4
 80144fe:	6839      	ldr	r1, [r7, #0]
 8014500:	4618      	mov	r0, r3
 8014502:	f005 f82b 	bl	801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8014506:	bf00      	nop
 8014508:	3708      	adds	r7, #8
 801450a:	46bd      	mov	sp, r7
 801450c:	bd80      	pop	{r7, pc}
	...

08014510 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 8014510:	b580      	push	{r7, lr}
 8014512:	b082      	sub	sp, #8
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	4618      	mov	r0, r3
 801451c:	2326      	movs	r3, #38	; 0x26
 801451e:	461a      	mov	r2, r3
 8014520:	2100      	movs	r1, #0
 8014522:	f019 fb59 	bl	802dbd8 <memset>
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	4618      	mov	r0, r3
 801452a:	f7fc fc3b 	bl	8010da4 <_ZN8touchgfx6WidgetC1Ev>
 801452e:	4a09      	ldr	r2, [pc, #36]	; (8014554 <_ZN8touchgfx3BoxC1Ev+0x44>)
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	601a      	str	r2, [r3, #0]
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	22ff      	movs	r2, #255	; 0xff
 8014538:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	3328      	adds	r3, #40	; 0x28
 8014540:	2100      	movs	r1, #0
 8014542:	4618      	mov	r0, r3
 8014544:	f7fc fa28 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	4618      	mov	r0, r3
 801454c:	3708      	adds	r7, #8
 801454e:	46bd      	mov	sp, r7
 8014550:	bd80      	pop	{r7, pc}
 8014552:	bf00      	nop
 8014554:	080308e8 	.word	0x080308e8

08014558 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8014558:	b480      	push	{r7}
 801455a:	b083      	sub	sp, #12
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
 8014560:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	683a      	ldr	r2, [r7, #0]
 8014566:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8014568:	bf00      	nop
 801456a:	370c      	adds	r7, #12
 801456c:	46bd      	mov	sp, r7
 801456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014572:	4770      	bx	lr

08014574 <_ZN4cellD1Ev>:

class cell : public cellBase
{
public:
    cell();
    virtual ~cell() {}
 8014574:	b580      	push	{r7, lr}
 8014576:	b082      	sub	sp, #8
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
 801457c:	4a05      	ldr	r2, [pc, #20]	; (8014594 <_ZN4cellD1Ev+0x20>)
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	601a      	str	r2, [r3, #0]
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	4618      	mov	r0, r3
 8014586:	f7ff fe29 	bl	80141dc <_ZN8cellBaseD1Ev>
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	4618      	mov	r0, r3
 801458e:	3708      	adds	r7, #8
 8014590:	46bd      	mov	sp, r7
 8014592:	bd80      	pop	{r7, pc}
 8014594:	0802ffac 	.word	0x0802ffac

08014598 <_ZN4cellD0Ev>:
 8014598:	b580      	push	{r7, lr}
 801459a:	b082      	sub	sp, #8
 801459c:	af00      	add	r7, sp, #0
 801459e:	6078      	str	r0, [r7, #4]
 80145a0:	6878      	ldr	r0, [r7, #4]
 80145a2:	f7ff ffe7 	bl	8014574 <_ZN4cellD1Ev>
 80145a6:	f640 010c 	movw	r1, #2060	; 0x80c
 80145aa:	6878      	ldr	r0, [r7, #4]
 80145ac:	f019 f960 	bl	802d870 <_ZdlPvj>
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	4618      	mov	r0, r3
 80145b4:	3708      	adds	r7, #8
 80145b6:	46bd      	mov	sp, r7
 80145b8:	bd80      	pop	{r7, pc}
	...

080145bc <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 80145bc:	b480      	push	{r7}
 80145be:	b083      	sub	sp, #12
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 80145c4:	4a06      	ldr	r2, [pc, #24]	; (80145e0 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	601a      	str	r2, [r3, #0]
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	2200      	movs	r2, #0
 80145ce:	809a      	strh	r2, [r3, #4]
    {
    }
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	4618      	mov	r0, r3
 80145d4:	370c      	adds	r7, #12
 80145d6:	46bd      	mov	sp, r7
 80145d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145dc:	4770      	bx	lr
 80145de:	bf00      	nop
 80145e0:	0802fed8 	.word	0x0802fed8

080145e4 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 80145e4:	b480      	push	{r7}
 80145e6:	b083      	sub	sp, #12
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
    {
 80145ec:	4a04      	ldr	r2, [pc, #16]	; (8014600 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	601a      	str	r2, [r3, #0]
    }
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	4618      	mov	r0, r3
 80145f6:	370c      	adds	r7, #12
 80145f8:	46bd      	mov	sp, r7
 80145fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fe:	4770      	bx	lr
 8014600:	0802fed8 	.word	0x0802fed8

08014604 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 8014604:	b580      	push	{r7, lr}
 8014606:	b082      	sub	sp, #8
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
    }
 801460c:	6878      	ldr	r0, [r7, #4]
 801460e:	f7ff ffe9 	bl	80145e4 <_ZN8touchgfx15AbstractPainterD1Ev>
 8014612:	2108      	movs	r1, #8
 8014614:	6878      	ldr	r0, [r7, #4]
 8014616:	f019 f92b 	bl	802d870 <_ZdlPvj>
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	4618      	mov	r0, r3
 801461e:	3708      	adds	r7, #8
 8014620:	46bd      	mov	sp, r7
 8014622:	bd80      	pop	{r7, pc}

08014624 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 8014624:	b480      	push	{r7}
 8014626:	b083      	sub	sp, #12
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 801462c:	2300      	movs	r3, #0
    }
 801462e:	4618      	mov	r0, r3
 8014630:	370c      	adds	r7, #12
 8014632:	46bd      	mov	sp, r7
 8014634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014638:	4770      	bx	lr

0801463a <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 801463a:	b480      	push	{r7}
 801463c:	b083      	sub	sp, #12
 801463e:	af00      	add	r7, sp, #0
 8014640:	6078      	str	r0, [r7, #4]
 8014642:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 8014644:	683b      	ldr	r3, [r7, #0]
 8014646:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	809a      	strh	r2, [r3, #4]
        return true;
 801464e:	2301      	movs	r3, #1
    }
 8014650:	4618      	mov	r0, r3
 8014652:	370c      	adds	r7, #12
 8014654:	46bd      	mov	sp, r7
 8014656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465a:	4770      	bx	lr

0801465c <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 801465c:	b480      	push	{r7}
 801465e:	b083      	sub	sp, #12
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
    {
        return;
 8014664:	bf00      	nop
    }
 8014666:	370c      	adds	r7, #12
 8014668:	46bd      	mov	sp, r7
 801466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466e:	4770      	bx	lr

08014670 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 8014670:	b480      	push	{r7}
 8014672:	b083      	sub	sp, #12
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]
 8014678:	6039      	str	r1, [r7, #0]
            : v(i)
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	683a      	ldr	r2, [r7, #0]
 801467e:	601a      	str	r2, [r3, #0]
        {
        }
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	4618      	mov	r0, r3
 8014684:	370c      	adds	r7, #12
 8014686:	46bd      	mov	sp, r7
 8014688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468c:	4770      	bx	lr

0801468e <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 801468e:	b480      	push	{r7}
 8014690:	b083      	sub	sp, #12
 8014692:	af00      	add	r7, sp, #0
 8014694:	6078      	str	r0, [r7, #4]
        {
            return v;
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	681b      	ldr	r3, [r3, #0]
        }
 801469a:	4618      	mov	r0, r3
 801469c:	370c      	adds	r7, #12
 801469e:	46bd      	mov	sp, r7
 80146a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a4:	4770      	bx	lr

080146a6 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>:
     * @see getPainter
     *
     * @note If setPainter() is used to change the painter to a different painter, the area
     *       containing the CanvasWidget is not automatically invalidated.
     */
    void setPainter(const AbstractPainter& painter)
 80146a6:	b480      	push	{r7}
 80146a8:	b083      	sub	sp, #12
 80146aa:	af00      	add	r7, sp, #0
 80146ac:	6078      	str	r0, [r7, #4]
 80146ae:	6039      	str	r1, [r7, #0]
    {
        canvasPainter = &painter;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	683a      	ldr	r2, [r7, #0]
 80146b4:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80146b6:	bf00      	nop
 80146b8:	370c      	adds	r7, #12
 80146ba:	46bd      	mov	sp, r7
 80146bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c0:	4770      	bx	lr

080146c2 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @see updateLineWidth
     *
     * @note The area containing the Line is not invalidated.
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 80146c2:	b590      	push	{r4, r7, lr}
 80146c4:	b083      	sub	sp, #12
 80146c6:	af00      	add	r7, sp, #0
 80146c8:	6078      	str	r0, [r7, #4]
 80146ca:	6039      	str	r1, [r7, #0]
    {
        if (lineWidthQ5 == widthQ5)
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	333c      	adds	r3, #60	; 0x3c
 80146d0:	4618      	mov	r0, r3
 80146d2:	f7ff ffdc 	bl	801468e <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80146d6:	4604      	mov	r4, r0
 80146d8:	463b      	mov	r3, r7
 80146da:	4618      	mov	r0, r3
 80146dc:	f7ff ffd7 	bl	801468e <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 80146e0:	4603      	mov	r3, r0
 80146e2:	429c      	cmp	r4, r3
 80146e4:	bf0c      	ite	eq
 80146e6:	2301      	moveq	r3, #1
 80146e8:	2300      	movne	r3, #0
 80146ea:	b2db      	uxtb	r3, r3
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d106      	bne.n	80146fe <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidthQ5 = widthQ5;
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	683a      	ldr	r2, [r7, #0]
 80146f4:	63da      	str	r2, [r3, #60]	; 0x3c

        updateCachedShape();
 80146f6:	6878      	ldr	r0, [r7, #4]
 80146f8:	f006 fb7e 	bl	801adf8 <_ZN8touchgfx4Line17updateCachedShapeEv>
 80146fc:	e000      	b.n	8014700 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 80146fe:	bf00      	nop
    }
 8014700:	370c      	adds	r7, #12
 8014702:	46bd      	mov	sp, r7
 8014704:	bd90      	pop	{r4, r7, pc}
	...

08014708 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 8014708:	b580      	push	{r7, lr}
 801470a:	b082      	sub	sp, #8
 801470c:	af00      	add	r7, sp, #0
 801470e:	6078      	str	r0, [r7, #4]
 8014710:	6039      	str	r1, [r7, #0]
    {
 8014712:	4a08      	ldr	r2, [pc, #32]	; (8014734 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	601a      	str	r2, [r3, #0]
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	3304      	adds	r3, #4
 801471c:	4618      	mov	r0, r3
 801471e:	f7ff fe29 	bl	8014374 <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 8014722:	6839      	ldr	r1, [r7, #0]
 8014724:	6878      	ldr	r0, [r7, #4]
 8014726:	f000 f827 	bl	8014778 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	4618      	mov	r0, r3
 801472e:	3708      	adds	r7, #8
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}
 8014734:	0802fec4 	.word	0x0802fec4

08014738 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 8014738:	b480      	push	{r7}
 801473a:	b083      	sub	sp, #12
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
    {
 8014740:	4a04      	ldr	r2, [pc, #16]	; (8014754 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	601a      	str	r2, [r3, #0]
    }
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	4618      	mov	r0, r3
 801474a:	370c      	adds	r7, #12
 801474c:	46bd      	mov	sp, r7
 801474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014752:	4770      	bx	lr
 8014754:	0802fec4 	.word	0x0802fec4

08014758 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 8014758:	b580      	push	{r7, lr}
 801475a:	b082      	sub	sp, #8
 801475c:	af00      	add	r7, sp, #0
 801475e:	6078      	str	r0, [r7, #4]
    }
 8014760:	6878      	ldr	r0, [r7, #4]
 8014762:	f7ff ffe9 	bl	8014738 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8014766:	2108      	movs	r1, #8
 8014768:	6878      	ldr	r0, [r7, #4]
 801476a:	f019 f881 	bl	802d870 <_ZdlPvj>
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	4618      	mov	r0, r3
 8014772:	3708      	adds	r7, #8
 8014774:	46bd      	mov	sp, r7
 8014776:	bd80      	pop	{r7, pc}

08014778 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 8014778:	b480      	push	{r7}
 801477a:	b083      	sub	sp, #12
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
 8014780:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	683a      	ldr	r2, [r7, #0]
 8014786:	605a      	str	r2, [r3, #4]
    }
 8014788:	bf00      	nop
 801478a:	370c      	adds	r7, #12
 801478c:	46bd      	mov	sp, r7
 801478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014792:	4770      	bx	lr

08014794 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 8014794:	b580      	push	{r7, lr}
 8014796:	b084      	sub	sp, #16
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	4618      	mov	r0, r3
 80147a0:	f7ff ff0c 	bl	80145bc <_ZN8touchgfx15AbstractPainterC1Ev>
 80147a4:	4a26      	ldr	r2, [pc, #152]	; (8014840 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xac>)
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	601a      	str	r2, [r3, #0]
 80147aa:	2300      	movs	r3, #0
 80147ac:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 80147ae:	f7fb fc79 	bl	80100a4 <_ZN8touchgfx3HAL3lcdEv>
 80147b2:	4603      	mov	r3, r0
 80147b4:	681a      	ldr	r2, [r3, #0]
 80147b6:	322c      	adds	r2, #44	; 0x2c
 80147b8:	6812      	ldr	r2, [r2, #0]
 80147ba:	4618      	mov	r0, r3
 80147bc:	4790      	blx	r2
 80147be:	4603      	mov	r3, r0
 80147c0:	461a      	mov	r2, r3
 80147c2:	7bfb      	ldrb	r3, [r7, #15]
 80147c4:	4293      	cmp	r3, r2
 80147c6:	bf0c      	ite	eq
 80147c8:	2301      	moveq	r3, #1
 80147ca:	2300      	movne	r3, #0
 80147cc:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 80147ce:	f7fb fc5d 	bl	801008c <_ZN8touchgfx3HAL11getInstanceEv>
 80147d2:	4603      	mov	r3, r0
 80147d4:	4618      	mov	r0, r3
 80147d6:	f7ff fe26 	bl	8014426 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80147da:	4603      	mov	r3, r0
 80147dc:	2b00      	cmp	r3, #0
 80147de:	bf14      	ite	ne
 80147e0:	2301      	movne	r3, #1
 80147e2:	2300      	moveq	r3, #0
 80147e4:	b2db      	uxtb	r3, r3
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d01b      	beq.n	8014822 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80147ea:	f7fb fc4f 	bl	801008c <_ZN8touchgfx3HAL11getInstanceEv>
 80147ee:	4603      	mov	r3, r0
 80147f0:	4618      	mov	r0, r3
 80147f2:	f7ff fe18 	bl	8014426 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80147f6:	4603      	mov	r3, r0
 80147f8:	681a      	ldr	r2, [r3, #0]
 80147fa:	322c      	adds	r2, #44	; 0x2c
 80147fc:	6812      	ldr	r2, [r2, #0]
 80147fe:	4618      	mov	r0, r3
 8014800:	4790      	blx	r2
 8014802:	4603      	mov	r3, r0
 8014804:	461a      	mov	r2, r3
 8014806:	7bfb      	ldrb	r3, [r7, #15]
 8014808:	4293      	cmp	r3, r2
 801480a:	bf0c      	ite	eq
 801480c:	2301      	moveq	r3, #1
 801480e:	2300      	movne	r3, #0
 8014810:	b2da      	uxtb	r2, r3
 8014812:	7bbb      	ldrb	r3, [r7, #14]
 8014814:	4313      	orrs	r3, r2
 8014816:	b2db      	uxtb	r3, r3
 8014818:	2b00      	cmp	r3, #0
 801481a:	bf14      	ite	ne
 801481c:	2301      	movne	r3, #1
 801481e:	2300      	moveq	r3, #0
 8014820:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 8014822:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 8014824:	2b00      	cmp	r3, #0
 8014826:	d105      	bne.n	8014834 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xa0>
 8014828:	4b06      	ldr	r3, [pc, #24]	; (8014844 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb0>)
 801482a:	4a07      	ldr	r2, [pc, #28]	; (8014848 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb4>)
 801482c:	212c      	movs	r1, #44	; 0x2c
 801482e:	4807      	ldr	r0, [pc, #28]	; (801484c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb8>)
 8014830:	f019 f84c 	bl	802d8cc <__assert_func>
 8014834:	bf00      	nop
    }
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	4618      	mov	r0, r3
 801483a:	3710      	adds	r7, #16
 801483c:	46bd      	mov	sp, r7
 801483e:	bd80      	pop	{r7, pc}
 8014840:	0802fea4 	.word	0x0802fea4
 8014844:	0802f0f0 	.word	0x0802f0f0
 8014848:	0802f150 	.word	0x0802f150
 801484c:	0802f18c 	.word	0x0802f18c

08014850 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
class AbstractPainterRGB565 : public AbstractPainter
 8014850:	b580      	push	{r7, lr}
 8014852:	b082      	sub	sp, #8
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
 8014858:	4a05      	ldr	r2, [pc, #20]	; (8014870 <_ZN8touchgfx21AbstractPainterRGB565D1Ev+0x20>)
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	601a      	str	r2, [r3, #0]
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	4618      	mov	r0, r3
 8014862:	f7ff febf 	bl	80145e4 <_ZN8touchgfx15AbstractPainterD1Ev>
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	4618      	mov	r0, r3
 801486a:	3708      	adds	r7, #8
 801486c:	46bd      	mov	sp, r7
 801486e:	bd80      	pop	{r7, pc}
 8014870:	0802fea4 	.word	0x0802fea4

08014874 <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 8014874:	b580      	push	{r7, lr}
 8014876:	b082      	sub	sp, #8
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
 801487c:	6878      	ldr	r0, [r7, #4]
 801487e:	f7ff ffe7 	bl	8014850 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 8014882:	2108      	movs	r1, #8
 8014884:	6878      	ldr	r0, [r7, #4]
 8014886:	f018 fff3 	bl	802d870 <_ZdlPvj>
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	4618      	mov	r0, r3
 801488e:	3708      	adds	r7, #8
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}

08014894 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
 8014894:	b580      	push	{r7, lr}
 8014896:	b082      	sub	sp, #8
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
 801489c:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	4618      	mov	r0, r3
 80148a2:	f7ff ff77 	bl	8014794 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	3308      	adds	r3, #8
 80148aa:	6839      	ldr	r1, [r7, #0]
 80148ac:	4618      	mov	r0, r3
 80148ae:	f7ff ff2b 	bl	8014708 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 80148b2:	4a05      	ldr	r2, [pc, #20]	; (80148c8 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x34>)
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	601a      	str	r2, [r3, #0]
 80148b8:	4a04      	ldr	r2, [pc, #16]	; (80148cc <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x38>)
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	609a      	str	r2, [r3, #8]
    {
    }
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	4618      	mov	r0, r3
 80148c2:	3708      	adds	r7, #8
 80148c4:	46bd      	mov	sp, r7
 80148c6:	bd80      	pop	{r7, pc}
 80148c8:	0803060c 	.word	0x0803060c
 80148cc:	08030630 	.word	0x08030630

080148d0 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:

    virtual void setColor(colortype color)
 80148d0:	b590      	push	{r4, r7, lr}
 80148d2:	b085      	sub	sp, #20
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
 80148d8:	6039      	str	r1, [r7, #0]
    {
        AbstractPainterColor::setColor(color);
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	3308      	adds	r3, #8
 80148de:	6839      	ldr	r1, [r7, #0]
 80148e0:	4618      	mov	r0, r3
 80148e2:	f7ff ff49 	bl	8014778 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	68db      	ldr	r3, [r3, #12]
 80148ea:	60fb      	str	r3, [r7, #12]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static uint16_t getNativeColor(colortype color)
    {
        return ((color >> 8) & 0xF800) | ((color >> 5) & 0x07E0) | ((color >> 3) & 0x001F);
 80148ec:	f107 030c 	add.w	r3, r7, #12
 80148f0:	4618      	mov	r0, r3
 80148f2:	f7ff fd4d 	bl	8014390 <_ZNK8touchgfx9colortypecvmEv>
 80148f6:	4603      	mov	r3, r0
 80148f8:	0a1b      	lsrs	r3, r3, #8
 80148fa:	b29b      	uxth	r3, r3
 80148fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8014900:	f023 0307 	bic.w	r3, r3, #7
 8014904:	b29c      	uxth	r4, r3
 8014906:	f107 030c 	add.w	r3, r7, #12
 801490a:	4618      	mov	r0, r3
 801490c:	f7ff fd40 	bl	8014390 <_ZNK8touchgfx9colortypecvmEv>
 8014910:	4603      	mov	r3, r0
 8014912:	095b      	lsrs	r3, r3, #5
 8014914:	b29b      	uxth	r3, r3
 8014916:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801491a:	b29b      	uxth	r3, r3
 801491c:	4323      	orrs	r3, r4
 801491e:	b29c      	uxth	r4, r3
 8014920:	f107 030c 	add.w	r3, r7, #12
 8014924:	4618      	mov	r0, r3
 8014926:	f7ff fd33 	bl	8014390 <_ZNK8touchgfx9colortypecvmEv>
 801492a:	4603      	mov	r3, r0
 801492c:	08db      	lsrs	r3, r3, #3
 801492e:	b29b      	uxth	r3, r3
 8014930:	f003 031f 	and.w	r3, r3, #31
 8014934:	b29b      	uxth	r3, r3
 8014936:	4323      	orrs	r3, r4
 8014938:	b29a      	uxth	r2, r3
        color565 = LCD16bpp::getNativeColor(painterColor);
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	821a      	strh	r2, [r3, #16]
    }
 801493e:	bf00      	nop
 8014940:	3714      	adds	r7, #20
 8014942:	46bd      	mov	sp, r7
 8014944:	bd90      	pop	{r4, r7, pc}

08014946 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
    virtual void setColor(colortype color)
 8014946:	f1a0 0008 	sub.w	r0, r0, #8
 801494a:	e7c1      	b.n	80148d0 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>

0801494c <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 801494c:	b580      	push	{r7, lr}
 801494e:	b082      	sub	sp, #8
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
 8014954:	4a05      	ldr	r2, [pc, #20]	; (801496c <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	601a      	str	r2, [r3, #0]
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	4618      	mov	r0, r3
 801495e:	f7ff fd6f 	bl	8014440 <_ZN8touchgfx6ScreenD1Ev>
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	4618      	mov	r0, r3
 8014966:	3708      	adds	r7, #8
 8014968:	46bd      	mov	sp, r7
 801496a:	bd80      	pop	{r7, pc}
 801496c:	0802fe70 	.word	0x0802fe70

08014970 <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 8014970:	b580      	push	{r7, lr}
 8014972:	b082      	sub	sp, #8
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
 8014978:	6878      	ldr	r0, [r7, #4]
 801497a:	f7ff ffe7 	bl	801494c <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 801497e:	2140      	movs	r1, #64	; 0x40
 8014980:	6878      	ldr	r0, [r7, #4]
 8014982:	f018 ff75 	bl	802d870 <_ZdlPvj>
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	4618      	mov	r0, r3
 801498a:	3708      	adds	r7, #8
 801498c:	46bd      	mov	sp, r7
 801498e:	bd80      	pop	{r7, pc}

08014990 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8014990:	b580      	push	{r7, lr}
 8014992:	b082      	sub	sp, #8
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
 8014998:	4a66      	ldr	r2, [pc, #408]	; (8014b34 <_ZN15Screen2ViewBaseD1Ev+0x1a4>)
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	601a      	str	r2, [r3, #0]
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 80149a4:	331c      	adds	r3, #28
 80149a6:	4618      	mov	r0, r3
 80149a8:	f001 f90c 	bl	8015bc4 <_ZN8touchgfx13PainterRGB565D1Ev>
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 80149b2:	332c      	adds	r3, #44	; 0x2c
 80149b4:	4618      	mov	r0, r3
 80149b6:	f001 f8e3 	bl	8015b80 <_ZN8touchgfx4LineD1Ev>
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 80149c0:	3318      	adds	r3, #24
 80149c2:	4618      	mov	r0, r3
 80149c4:	f001 f8fe 	bl	8015bc4 <_ZN8touchgfx13PainterRGB565D1Ev>
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	f503 5355 	add.w	r3, r3, #13632	; 0x3540
 80149ce:	3328      	adds	r3, #40	; 0x28
 80149d0:	4618      	mov	r0, r3
 80149d2:	f001 f8d5 	bl	8015b80 <_ZN8touchgfx4LineD1Ev>
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	f503 5355 	add.w	r3, r3, #13632	; 0x3540
 80149dc:	3314      	adds	r3, #20
 80149de:	4618      	mov	r0, r3
 80149e0:	f001 f8f0 	bl	8015bc4 <_ZN8touchgfx13PainterRGB565D1Ev>
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	f503 5353 	add.w	r3, r3, #13504	; 0x34c0
 80149ea:	3324      	adds	r3, #36	; 0x24
 80149ec:	4618      	mov	r0, r3
 80149ee:	f001 f8c7 	bl	8015b80 <_ZN8touchgfx4LineD1Ev>
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	f503 5353 	add.w	r3, r3, #13504	; 0x34c0
 80149f8:	3310      	adds	r3, #16
 80149fa:	4618      	mov	r0, r3
 80149fc:	f001 f8e2 	bl	8015bc4 <_ZN8touchgfx13PainterRGB565D1Ev>
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	f503 5351 	add.w	r3, r3, #13376	; 0x3440
 8014a06:	3320      	adds	r3, #32
 8014a08:	4618      	mov	r0, r3
 8014a0a:	f001 f8b9 	bl	8015b80 <_ZN8touchgfx4LineD1Ev>
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	f503 5351 	add.w	r3, r3, #13376	; 0x3440
 8014a14:	330c      	adds	r3, #12
 8014a16:	4618      	mov	r0, r3
 8014a18:	f001 f8d4 	bl	8015bc4 <_ZN8touchgfx13PainterRGB565D1Ev>
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8014a22:	331c      	adds	r3, #28
 8014a24:	4618      	mov	r0, r3
 8014a26:	f001 f8ab 	bl	8015b80 <_ZN8touchgfx4LineD1Ev>
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8014a30:	3308      	adds	r3, #8
 8014a32:	4618      	mov	r0, r3
 8014a34:	f001 f8c6 	bl	8015bc4 <_ZN8touchgfx13PainterRGB565D1Ev>
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 8014a3e:	3318      	adds	r3, #24
 8014a40:	4618      	mov	r0, r3
 8014a42:	f001 f89d 	bl	8015b80 <_ZN8touchgfx4LineD1Ev>
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 8014a4c:	3304      	adds	r3, #4
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f001 f8b8 	bl	8015bc4 <_ZN8touchgfx13PainterRGB565D1Ev>
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8014a5a:	3314      	adds	r3, #20
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f001 f88f 	bl	8015b80 <_ZN8touchgfx4LineD1Ev>
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8014a68:	4618      	mov	r0, r3
 8014a6a:	f001 f8ab 	bl	8015bc4 <_ZN8touchgfx13PainterRGB565D1Ev>
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 8014a74:	3310      	adds	r3, #16
 8014a76:	4618      	mov	r0, r3
 8014a78:	f001 f882 	bl	8015b80 <_ZN8touchgfx4LineD1Ev>
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8014a82:	333c      	adds	r3, #60	; 0x3c
 8014a84:	4618      	mov	r0, r3
 8014a86:	f001 f89d 	bl	8015bc4 <_ZN8touchgfx13PainterRGB565D1Ev>
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8014a90:	330c      	adds	r3, #12
 8014a92:	4618      	mov	r0, r3
 8014a94:	f001 f874 	bl	8015b80 <_ZN8touchgfx4LineD1Ev>
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	f503 5346 	add.w	r3, r3, #12672	; 0x3180
 8014a9e:	3338      	adds	r3, #56	; 0x38
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	f001 f88f 	bl	8015bc4 <_ZN8touchgfx13PainterRGB565D1Ev>
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8014aac:	3308      	adds	r3, #8
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f001 f866 	bl	8015b80 <_ZN8touchgfx4LineD1Ev>
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 8014aba:	4618      	mov	r0, r3
 8014abc:	f7fc fae6 	bl	801108c <_ZN8touchgfx8TextAreaD1Ev>
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8014ac6:	3334      	adds	r3, #52	; 0x34
 8014ac8:	4618      	mov	r0, r3
 8014aca:	f7ff fd53 	bl	8014574 <_ZN4cellD1Ev>
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8014ad4:	3328      	adds	r3, #40	; 0x28
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	f7ff fd4c 	bl	8014574 <_ZN4cellD1Ev>
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8014ae2:	331c      	adds	r3, #28
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	f7ff fd45 	bl	8014574 <_ZN4cellD1Ev>
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8014af0:	3310      	adds	r3, #16
 8014af2:	4618      	mov	r0, r3
 8014af4:	f7ff fd3e 	bl	8014574 <_ZN4cellD1Ev>
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8014afe:	4618      	mov	r0, r3
 8014b00:	f7ff fd38 	bl	8014574 <_ZN4cellD1Ev>
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	33b8      	adds	r3, #184	; 0xb8
 8014b08:	4618      	mov	r0, r3
 8014b0a:	f7ff fd33 	bl	8014574 <_ZN4cellD1Ev>
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	336c      	adds	r3, #108	; 0x6c
 8014b12:	4618      	mov	r0, r3
 8014b14:	f7ff fc0c 	bl	8014330 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	3340      	adds	r3, #64	; 0x40
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	f000 ffeb 	bl	8015af8 <_ZN8touchgfx3BoxD1Ev>
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7ff ff11 	bl	801494c <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	3708      	adds	r7, #8
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd80      	pop	{r7, pc}
 8014b34:	0802fe3c 	.word	0x0802fe3c

08014b38 <_ZN15Screen2ViewBaseD0Ev>:
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b082      	sub	sp, #8
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	6078      	str	r0, [r7, #4]
 8014b40:	6878      	ldr	r0, [r7, #4]
 8014b42:	f7ff ff25 	bl	8014990 <_ZN15Screen2ViewBaseD1Ev>
 8014b46:	f246 5164 	movw	r1, #25956	; 0x6564
 8014b4a:	6878      	ldr	r0, [r7, #4]
 8014b4c:	f018 fe90 	bl	802d870 <_ZdlPvj>
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	4618      	mov	r0, r3
 8014b54:	3708      	adds	r7, #8
 8014b56:	46bd      	mov	sp, r7
 8014b58:	bd80      	pop	{r7, pc}
	...

08014b5c <_ZN15Screen2ViewBaseC1Ev>:
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


Screen2ViewBase::Screen2ViewBase()
 8014b5c:	b590      	push	{r4, r7, lr}
 8014b5e:	b0bb      	sub	sp, #236	; 0xec
 8014b60:	af02      	add	r7, sp, #8
 8014b62:	6178      	str	r0, [r7, #20]
 8014b64:	697b      	ldr	r3, [r7, #20]
 8014b66:	4618      	mov	r0, r3
 8014b68:	f000 ff4c 	bl	8015a04 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 8014b6c:	4ad4      	ldr	r2, [pc, #848]	; (8014ec0 <_ZN15Screen2ViewBaseC1Ev+0x364>)
 8014b6e:	697b      	ldr	r3, [r7, #20]
 8014b70:	601a      	str	r2, [r3, #0]
 8014b72:	697b      	ldr	r3, [r7, #20]
 8014b74:	3340      	adds	r3, #64	; 0x40
 8014b76:	4618      	mov	r0, r3
 8014b78:	f7ff fcca 	bl	8014510 <_ZN8touchgfx3BoxC1Ev>
 8014b7c:	697b      	ldr	r3, [r7, #20]
 8014b7e:	336c      	adds	r3, #108	; 0x6c
 8014b80:	4618      	mov	r0, r3
 8014b82:	f7fc faeb 	bl	801115c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8014b86:	697b      	ldr	r3, [r7, #20]
 8014b88:	33b8      	adds	r3, #184	; 0xb8
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	f001 faae 	bl	80160ec <_ZN4cellC1Ev>
 8014b90:	697b      	ldr	r3, [r7, #20]
 8014b92:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8014b96:	4618      	mov	r0, r3
 8014b98:	f001 faa8 	bl	80160ec <_ZN4cellC1Ev>
 8014b9c:	697b      	ldr	r3, [r7, #20]
 8014b9e:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8014ba2:	3310      	adds	r3, #16
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	f001 faa1 	bl	80160ec <_ZN4cellC1Ev>
 8014baa:	697b      	ldr	r3, [r7, #20]
 8014bac:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8014bb0:	331c      	adds	r3, #28
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	f001 fa9a 	bl	80160ec <_ZN4cellC1Ev>
 8014bb8:	697b      	ldr	r3, [r7, #20]
 8014bba:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8014bbe:	3328      	adds	r3, #40	; 0x28
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	f001 fa93 	bl	80160ec <_ZN4cellC1Ev>
 8014bc6:	697b      	ldr	r3, [r7, #20]
 8014bc8:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8014bcc:	3334      	adds	r3, #52	; 0x34
 8014bce:	4618      	mov	r0, r3
 8014bd0:	f001 fa8c 	bl	80160ec <_ZN4cellC1Ev>
 8014bd4:	697b      	ldr	r3, [r7, #20]
 8014bd6:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 8014bda:	4618      	mov	r0, r3
 8014bdc:	f7fc f916 	bl	8010e0c <_ZN8touchgfx8TextAreaC1Ev>
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8014be6:	3308      	adds	r3, #8
 8014be8:	4618      	mov	r0, r3
 8014bea:	f006 f8e5 	bl	801adb8 <_ZN8touchgfx4LineC1Ev>
 8014bee:	697b      	ldr	r3, [r7, #20]
 8014bf0:	f503 5446 	add.w	r4, r3, #12672	; 0x3180
 8014bf4:	3438      	adds	r4, #56	; 0x38
 8014bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014bfa:	2100      	movs	r1, #0
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	f7fb fecb 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8014c02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014c04:	4620      	mov	r0, r4
 8014c06:	f7ff fe45 	bl	8014894 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8014c0a:	697b      	ldr	r3, [r7, #20]
 8014c0c:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8014c10:	330c      	adds	r3, #12
 8014c12:	4618      	mov	r0, r3
 8014c14:	f006 f8d0 	bl	801adb8 <_ZN8touchgfx4LineC1Ev>
 8014c18:	697b      	ldr	r3, [r7, #20]
 8014c1a:	f503 5448 	add.w	r4, r3, #12800	; 0x3200
 8014c1e:	343c      	adds	r4, #60	; 0x3c
 8014c20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014c24:	2100      	movs	r1, #0
 8014c26:	4618      	mov	r0, r3
 8014c28:	f7fb feb6 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8014c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014c2e:	4620      	mov	r0, r4
 8014c30:	f7ff fe30 	bl	8014894 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8014c34:	697b      	ldr	r3, [r7, #20]
 8014c36:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 8014c3a:	3310      	adds	r3, #16
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	f006 f8bb 	bl	801adb8 <_ZN8touchgfx4LineC1Ev>
 8014c42:	697b      	ldr	r3, [r7, #20]
 8014c44:	f503 544b 	add.w	r4, r3, #12992	; 0x32c0
 8014c48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014c4c:	2100      	movs	r1, #0
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f7fb fea2 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8014c54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014c56:	4620      	mov	r0, r4
 8014c58:	f7ff fe1c 	bl	8014894 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8014c5c:	697b      	ldr	r3, [r7, #20]
 8014c5e:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8014c62:	3314      	adds	r3, #20
 8014c64:	4618      	mov	r0, r3
 8014c66:	f006 f8a7 	bl	801adb8 <_ZN8touchgfx4LineC1Ev>
 8014c6a:	697b      	ldr	r3, [r7, #20]
 8014c6c:	f503 544d 	add.w	r4, r3, #13120	; 0x3340
 8014c70:	3404      	adds	r4, #4
 8014c72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014c76:	2100      	movs	r1, #0
 8014c78:	4618      	mov	r0, r3
 8014c7a:	f7fb fe8d 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8014c7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014c80:	4620      	mov	r0, r4
 8014c82:	f7ff fe07 	bl	8014894 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8014c86:	697b      	ldr	r3, [r7, #20]
 8014c88:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 8014c8c:	3318      	adds	r3, #24
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f006 f892 	bl	801adb8 <_ZN8touchgfx4LineC1Ev>
 8014c94:	697b      	ldr	r3, [r7, #20]
 8014c96:	f503 544f 	add.w	r4, r3, #13248	; 0x33c0
 8014c9a:	3408      	adds	r4, #8
 8014c9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014ca0:	2100      	movs	r1, #0
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	f7fb fe78 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8014ca8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014caa:	4620      	mov	r0, r4
 8014cac:	f7ff fdf2 	bl	8014894 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8014cb0:	697b      	ldr	r3, [r7, #20]
 8014cb2:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8014cb6:	331c      	adds	r3, #28
 8014cb8:	4618      	mov	r0, r3
 8014cba:	f006 f87d 	bl	801adb8 <_ZN8touchgfx4LineC1Ev>
 8014cbe:	697b      	ldr	r3, [r7, #20]
 8014cc0:	f503 5451 	add.w	r4, r3, #13376	; 0x3440
 8014cc4:	340c      	adds	r4, #12
 8014cc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014cca:	2100      	movs	r1, #0
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f7fb fe63 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8014cd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014cd4:	4620      	mov	r0, r4
 8014cd6:	f7ff fddd 	bl	8014894 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8014cda:	697b      	ldr	r3, [r7, #20]
 8014cdc:	f503 5351 	add.w	r3, r3, #13376	; 0x3440
 8014ce0:	3320      	adds	r3, #32
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	f006 f868 	bl	801adb8 <_ZN8touchgfx4LineC1Ev>
 8014ce8:	697b      	ldr	r3, [r7, #20]
 8014cea:	f503 5453 	add.w	r4, r3, #13504	; 0x34c0
 8014cee:	3410      	adds	r4, #16
 8014cf0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014cf4:	2100      	movs	r1, #0
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	f7fb fe4e 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8014cfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014cfe:	4620      	mov	r0, r4
 8014d00:	f7ff fdc8 	bl	8014894 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8014d04:	697b      	ldr	r3, [r7, #20]
 8014d06:	f503 5353 	add.w	r3, r3, #13504	; 0x34c0
 8014d0a:	3324      	adds	r3, #36	; 0x24
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	f006 f853 	bl	801adb8 <_ZN8touchgfx4LineC1Ev>
 8014d12:	697b      	ldr	r3, [r7, #20]
 8014d14:	f503 5455 	add.w	r4, r3, #13632	; 0x3540
 8014d18:	3414      	adds	r4, #20
 8014d1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014d1e:	2100      	movs	r1, #0
 8014d20:	4618      	mov	r0, r3
 8014d22:	f7fb fe39 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8014d26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014d28:	4620      	mov	r0, r4
 8014d2a:	f7ff fdb3 	bl	8014894 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8014d2e:	697b      	ldr	r3, [r7, #20]
 8014d30:	f503 5355 	add.w	r3, r3, #13632	; 0x3540
 8014d34:	3328      	adds	r3, #40	; 0x28
 8014d36:	4618      	mov	r0, r3
 8014d38:	f006 f83e 	bl	801adb8 <_ZN8touchgfx4LineC1Ev>
 8014d3c:	697b      	ldr	r3, [r7, #20]
 8014d3e:	f503 5457 	add.w	r4, r3, #13760	; 0x35c0
 8014d42:	3418      	adds	r4, #24
 8014d44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8014d48:	2100      	movs	r1, #0
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	f7fb fe24 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8014d50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014d52:	4620      	mov	r0, r4
 8014d54:	f7ff fd9e 	bl	8014894 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8014d58:	697b      	ldr	r3, [r7, #20]
 8014d5a:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8014d5e:	332c      	adds	r3, #44	; 0x2c
 8014d60:	4618      	mov	r0, r3
 8014d62:	f006 f829 	bl	801adb8 <_ZN8touchgfx4LineC1Ev>
 8014d66:	697b      	ldr	r3, [r7, #20]
 8014d68:	f503 5459 	add.w	r4, r3, #13888	; 0x3640
 8014d6c:	341c      	adds	r4, #28
 8014d6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014d72:	2100      	movs	r1, #0
 8014d74:	4618      	mov	r0, r3
 8014d76:	f7fb fe0f 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8014d7a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014d7c:	4620      	mov	r0, r4
 8014d7e:	f7ff fd89 	bl	8014894 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8014d82:	697b      	ldr	r3, [r7, #20]
 8014d84:	f503 535a 	add.w	r3, r3, #13952	; 0x3680
 8014d88:	3304      	adds	r3, #4
 8014d8a:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f007 fd98 	bl	801c8c4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 800, 480);
 8014d94:	697b      	ldr	r3, [r7, #20]
 8014d96:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8014d9a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8014d9e:	9300      	str	r3, [sp, #0]
 8014da0:	f44f 7348 	mov.w	r3, #800	; 0x320
 8014da4:	2200      	movs	r2, #0
 8014da6:	2100      	movs	r1, #0
 8014da8:	f7ff fafe 	bl	80143a8 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8014dac:	697b      	ldr	r3, [r7, #20]
 8014dae:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8014db2:	2300      	movs	r3, #0
 8014db4:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
 8014db8:	2300      	movs	r3, #0
 8014dba:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8014dc4:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8014dc8:	041b      	lsls	r3, r3, #16
 8014dca:	461a      	mov	r2, r3
 8014dcc:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8014dd0:	021b      	lsls	r3, r3, #8
 8014dd2:	431a      	orrs	r2, r3
 8014dd4:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
 8014dd8:	4313      	orrs	r3, r2
 8014dda:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8014dde:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8014de2:	4611      	mov	r1, r2
 8014de4:	4618      	mov	r0, r3
 8014de6:	f7fb fdd7 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8014dea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014dee:	4619      	mov	r1, r3
 8014df0:	4620      	mov	r0, r4
 8014df2:	f7ff fbb1 	bl	8014558 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    battery_voltage.setXY(696, 37);
 8014df6:	697b      	ldr	r3, [r7, #20]
 8014df8:	336c      	adds	r3, #108	; 0x6c
 8014dfa:	2225      	movs	r2, #37	; 0x25
 8014dfc:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8014e00:	4618      	mov	r0, r3
 8014e02:	f7fb fe9b 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    battery_voltage.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8014e06:	697b      	ldr	r3, [r7, #20]
 8014e08:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8014e0c:	23ff      	movs	r3, #255	; 0xff
 8014e0e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8014e12:	23ff      	movs	r3, #255	; 0xff
 8014e14:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8014e18:	23ff      	movs	r3, #255	; 0xff
 8014e1a:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
 8014e1e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8014e22:	041b      	lsls	r3, r3, #16
 8014e24:	461a      	mov	r2, r3
 8014e26:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8014e2a:	021b      	lsls	r3, r3, #8
 8014e2c:	431a      	orrs	r2, r3
 8014e2e:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8014e32:	4313      	orrs	r3, r2
 8014e34:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8014e38:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8014e3c:	4611      	mov	r1, r2
 8014e3e:	4618      	mov	r0, r3
 8014e40:	f7fb fdaa 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8014e44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014e48:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8014e4c:	623b      	str	r3, [r7, #32]
        color = newColor;
 8014e4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014e52:	6a3a      	ldr	r2, [r7, #32]
 8014e54:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8014e56:	bf00      	nop
    battery_voltage.setLinespacing(0);
 8014e58:	697b      	ldr	r3, [r7, #20]
 8014e5a:	336c      	adds	r3, #108	; 0x6c
 8014e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8014e60:	2300      	movs	r3, #0
 8014e62:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
        linespace = space;
 8014e66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014e6a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8014e6e:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8014e70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	3384      	adds	r3, #132	; 0x84
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8014e7e:	463a      	mov	r2, r7
 8014e80:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8014e84:	4610      	mov	r0, r2
 8014e86:	4798      	blx	r3
 8014e88:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8014e8c:	463a      	mov	r2, r7
 8014e8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8014e90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8014e94:	bf00      	nop
    Unicode::snprintf(battery_voltageBuffer, BATTERY_VOLTAGE_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_LUOG).getText());
 8014e96:	697b      	ldr	r3, [r7, #20]
 8014e98:	f503 5459 	add.w	r4, r3, #13888	; 0x3640
 8014e9c:	3430      	adds	r4, #48	; 0x30
 8014e9e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014ea2:	212b      	movs	r1, #43	; 0x2b
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	f7fb ff43 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8014eaa:	4b06      	ldr	r3, [pc, #24]	; (8014ec4 <_ZN15Screen2ViewBaseC1Ev+0x368>)
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d110      	bne.n	8014ed4 <_ZN15Screen2ViewBaseC1Ev+0x378>
 8014eb2:	4b05      	ldr	r3, [pc, #20]	; (8014ec8 <_ZN15Screen2ViewBaseC1Ev+0x36c>)
 8014eb4:	4a05      	ldr	r2, [pc, #20]	; (8014ecc <_ZN15Screen2ViewBaseC1Ev+0x370>)
 8014eb6:	2160      	movs	r1, #96	; 0x60
 8014eb8:	4805      	ldr	r0, [pc, #20]	; (8014ed0 <_ZN15Screen2ViewBaseC1Ev+0x374>)
 8014eba:	f018 fd07 	bl	802d8cc <__assert_func>
 8014ebe:	bf00      	nop
 8014ec0:	0802fe3c 	.word	0x0802fe3c
 8014ec4:	2000f1bc 	.word	0x2000f1bc
 8014ec8:	0802efec 	.word	0x0802efec
 8014ecc:	0802f1ec 	.word	0x0802f1ec
 8014ed0:	0802f06c 	.word	0x0802f06c
 8014ed4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        return typedTextId < numberOfTypedTexts;
 8014edc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014ee0:	889a      	ldrh	r2, [r3, #4]
 8014ee2:	4b07      	ldr	r3, [pc, #28]	; (8014f00 <_ZN15Screen2ViewBaseC1Ev+0x3a4>)
 8014ee4:	881b      	ldrh	r3, [r3, #0]
 8014ee6:	429a      	cmp	r2, r3
 8014ee8:	bf34      	ite	cc
 8014eea:	2301      	movcc	r3, #1
 8014eec:	2300      	movcs	r3, #0
 8014eee:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d10d      	bne.n	8014f10 <_ZN15Screen2ViewBaseC1Ev+0x3b4>
 8014ef4:	4b03      	ldr	r3, [pc, #12]	; (8014f04 <_ZN15Screen2ViewBaseC1Ev+0x3a8>)
 8014ef6:	4a04      	ldr	r2, [pc, #16]	; (8014f08 <_ZN15Screen2ViewBaseC1Ev+0x3ac>)
 8014ef8:	2161      	movs	r1, #97	; 0x61
 8014efa:	4804      	ldr	r0, [pc, #16]	; (8014f0c <_ZN15Screen2ViewBaseC1Ev+0x3b0>)
 8014efc:	f018 fce6 	bl	802d8cc <__assert_func>
 8014f00:	2000f1c0 	.word	0x2000f1c0
 8014f04:	0802f0b0 	.word	0x0802f0b0
 8014f08:	0802f1ec 	.word	0x0802f1ec
 8014f0c:	0802f06c 	.word	0x0802f06c
 8014f10:	bf00      	nop
        return texts->getText(typedTextId);
 8014f12:	4be6      	ldr	r3, [pc, #920]	; (80152ac <_ZN15Screen2ViewBaseC1Ev+0x750>)
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8014f1a:	4611      	mov	r1, r2
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	f001 f829 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 8014f22:	4603      	mov	r3, r0
 8014f24:	bf00      	nop
 8014f26:	4ae2      	ldr	r2, [pc, #904]	; (80152b0 <_ZN15Screen2ViewBaseC1Ev+0x754>)
 8014f28:	210a      	movs	r1, #10
 8014f2a:	4620      	mov	r0, r4
 8014f2c:	f00c f94c 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8014f30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014f34:	4618      	mov	r0, r3
 8014f36:	f7fa fdc9 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>
    battery_voltage.setWildcard(battery_voltageBuffer);
 8014f3a:	697b      	ldr	r3, [r7, #20]
 8014f3c:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8014f40:	697b      	ldr	r3, [r7, #20]
 8014f42:	f503 5359 	add.w	r3, r3, #13888	; 0x3640
 8014f46:	3330      	adds	r3, #48	; 0x30
 8014f48:	4619      	mov	r1, r3
 8014f4a:	4610      	mov	r0, r2
 8014f4c:	f7fc f936 	bl	80111bc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    battery_voltage.resizeToCurrentText();
 8014f50:	697b      	ldr	r3, [r7, #20]
 8014f52:	336c      	adds	r3, #108	; 0x6c
 8014f54:	4618      	mov	r0, r3
 8014f56:	f006 fc5b 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    battery_voltage.setTypedText(touchgfx::TypedText(T___SINGLEUSE_3ICU));
 8014f5a:	697b      	ldr	r3, [r7, #20]
 8014f5c:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8014f60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014f64:	212c      	movs	r1, #44	; 0x2c
 8014f66:	4618      	mov	r0, r3
 8014f68:	f7fb fee2 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 8014f6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014f70:	4619      	mov	r1, r3
 8014f72:	4620      	mov	r0, r4
 8014f74:	f006 fc6c 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8014f78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	f7fa fda5 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    cell_0.setXY(0, 0);
 8014f82:	697b      	ldr	r3, [r7, #20]
 8014f84:	33b8      	adds	r3, #184	; 0xb8
 8014f86:	2200      	movs	r2, #0
 8014f88:	2100      	movs	r1, #0
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	f7fb fdd6 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>

    cell_1.setXY(116, 0);
 8014f90:	697b      	ldr	r3, [r7, #20]
 8014f92:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8014f96:	2200      	movs	r2, #0
 8014f98:	2174      	movs	r1, #116	; 0x74
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	f7fb fdce 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>

    cell_2.setXY(232, 0);
 8014fa0:	697b      	ldr	r3, [r7, #20]
 8014fa2:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8014fa6:	3310      	adds	r3, #16
 8014fa8:	2200      	movs	r2, #0
 8014faa:	21e8      	movs	r1, #232	; 0xe8
 8014fac:	4618      	mov	r0, r3
 8014fae:	f7fb fdc5 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>

    cell_3.setXY(348, 0);
 8014fb2:	697b      	ldr	r3, [r7, #20]
 8014fb4:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8014fb8:	331c      	adds	r3, #28
 8014fba:	2200      	movs	r2, #0
 8014fbc:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	f7fb fdbb 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>

    cell_4.setXY(464, 0);
 8014fc6:	697b      	ldr	r3, [r7, #20]
 8014fc8:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 8014fcc:	3328      	adds	r3, #40	; 0x28
 8014fce:	2200      	movs	r2, #0
 8014fd0:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	f7fb fdb1 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>

    cell_5.setXY(580, 0);
 8014fda:	697b      	ldr	r3, [r7, #20]
 8014fdc:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8014fe0:	3334      	adds	r3, #52	; 0x34
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	f44f 7111 	mov.w	r1, #580	; 0x244
 8014fe8:	4618      	mov	r0, r3
 8014fea:	f7fb fda7 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>

    battery_voltage_label.setXY(721, 0);
 8014fee:	697b      	ldr	r3, [r7, #20]
 8014ff0:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	f240 21d1 	movw	r1, #721	; 0x2d1
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	f7fb fd9e 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
    battery_voltage_label.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8015000:	697b      	ldr	r3, [r7, #20]
 8015002:	f503 5444 	add.w	r4, r3, #12544	; 0x3100
 8015006:	23ff      	movs	r3, #255	; 0xff
 8015008:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 801500c:	23ff      	movs	r3, #255	; 0xff
 801500e:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
 8015012:	23ff      	movs	r3, #255	; 0xff
 8015014:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
 8015018:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 801501c:	041b      	lsls	r3, r3, #16
 801501e:	461a      	mov	r2, r3
 8015020:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
 8015024:	021b      	lsls	r3, r3, #8
 8015026:	431a      	orrs	r2, r3
 8015028:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801502c:	4313      	orrs	r3, r2
 801502e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8015032:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8015036:	4611      	mov	r1, r2
 8015038:	4618      	mov	r0, r3
 801503a:	f7fb fcad 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 801503e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015042:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
 8015046:	61fb      	str	r3, [r7, #28]
        color = newColor;
 8015048:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801504c:	69fa      	ldr	r2, [r7, #28]
 801504e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8015050:	bf00      	nop
    battery_voltage_label.setLinespacing(0);
 8015052:	697b      	ldr	r3, [r7, #20]
 8015054:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 8015058:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801505c:	2300      	movs	r3, #0
 801505e:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        linespace = space;
 8015062:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015066:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 801506a:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 801506c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	3384      	adds	r3, #132	; 0x84
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 801507a:	463a      	mov	r2, r7
 801507c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8015080:	4610      	mov	r0, r2
 8015082:	4798      	blx	r3
 8015084:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8015088:	463a      	mov	r2, r7
 801508a:	ca07      	ldmia	r2, {r0, r1, r2}
 801508c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8015090:	bf00      	nop
    battery_voltage_label.setTypedText(touchgfx::TypedText(T___SINGLEUSE_Q55Z));
 8015092:	697b      	ldr	r3, [r7, #20]
 8015094:	f503 5444 	add.w	r4, r3, #12544	; 0x3100
 8015098:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801509c:	2102      	movs	r1, #2
 801509e:	4618      	mov	r0, r3
 80150a0:	f7fb fe46 	bl	8010d30 <_ZN8touchgfx9TypedTextC1Et>
 80150a4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80150a8:	4619      	mov	r1, r3
 80150aa:	4620      	mov	r0, r4
 80150ac:	f006 fbd0 	bl	801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80150b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80150b4:	4618      	mov	r0, r3
 80150b6:	f7fa fd09 	bl	800facc <_ZN8touchgfx9TypedTextD1Ev>

    line1_2.setPosition(689, 0, 15, 600);
 80150ba:	697b      	ldr	r3, [r7, #20]
 80150bc:	f503 5045 	add.w	r0, r3, #12608	; 0x3140
 80150c0:	3008      	adds	r0, #8
 80150c2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80150c6:	9300      	str	r3, [sp, #0]
 80150c8:	230f      	movs	r3, #15
 80150ca:	2200      	movs	r2, #0
 80150cc:	f240 21b1 	movw	r1, #689	; 0x2b1
 80150d0:	f7ff f96a 	bl	80143a8 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1_2Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80150d4:	697b      	ldr	r3, [r7, #20]
 80150d6:	f503 5446 	add.w	r4, r3, #12672	; 0x3180
 80150da:	3438      	adds	r4, #56	; 0x38
 80150dc:	23ff      	movs	r3, #255	; 0xff
 80150de:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
 80150e2:	23ff      	movs	r3, #255	; 0xff
 80150e4:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 80150e8:	23ff      	movs	r3, #255	; 0xff
 80150ea:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
 80150ee:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 80150f2:	041b      	lsls	r3, r3, #16
 80150f4:	461a      	mov	r2, r3
 80150f6:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80150fa:	021b      	lsls	r3, r3, #8
 80150fc:	431a      	orrs	r2, r3
 80150fe:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8015102:	4313      	orrs	r3, r2
 8015104:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8015108:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801510c:	4611      	mov	r1, r2
 801510e:	4618      	mov	r0, r3
 8015110:	f7fb fc42 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8015114:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015118:	4619      	mov	r1, r3
 801511a:	4620      	mov	r0, r4
 801511c:	f7ff fbd8 	bl	80148d0 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    line1_2.setPainter(line1_2Painter);
 8015120:	697b      	ldr	r3, [r7, #20]
 8015122:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8015126:	3308      	adds	r3, #8
 8015128:	697a      	ldr	r2, [r7, #20]
 801512a:	f502 5246 	add.w	r2, r2, #12672	; 0x3180
 801512e:	3238      	adds	r2, #56	; 0x38
 8015130:	4611      	mov	r1, r2
 8015132:	4618      	mov	r0, r3
 8015134:	f7ff fab7 	bl	80146a6 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1_2.setStart(7, 0);
 8015138:	697b      	ldr	r3, [r7, #20]
 801513a:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 801513e:	3308      	adds	r3, #8
 8015140:	2200      	movs	r2, #0
 8015142:	2107      	movs	r1, #7
 8015144:	4618      	mov	r0, r3
 8015146:	f000 fc73 	bl	8015a30 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1_2.setEnd(7, 800);
 801514a:	697b      	ldr	r3, [r7, #20]
 801514c:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8015150:	3308      	adds	r3, #8
 8015152:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015156:	2107      	movs	r1, #7
 8015158:	4618      	mov	r0, r3
 801515a:	f000 fc8f 	bl	8015a7c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1_2.setLineWidth(2);
 801515e:	697b      	ldr	r3, [r7, #20]
 8015160:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8015164:	3308      	adds	r3, #8
 8015166:	2102      	movs	r1, #2
 8015168:	4618      	mov	r0, r3
 801516a:	f000 fcad 	bl	8015ac8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1_2.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 801516e:	697b      	ldr	r3, [r7, #20]
 8015170:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8015174:	3308      	adds	r3, #8
 8015176:	2101      	movs	r1, #1
 8015178:	4618      	mov	r0, r3
 801517a:	f005 ff49 	bl	801b010 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line1_2_1.setPosition(114, 0, 15, 600);
 801517e:	697b      	ldr	r3, [r7, #20]
 8015180:	f503 5047 	add.w	r0, r3, #12736	; 0x31c0
 8015184:	300c      	adds	r0, #12
 8015186:	f44f 7316 	mov.w	r3, #600	; 0x258
 801518a:	9300      	str	r3, [sp, #0]
 801518c:	230f      	movs	r3, #15
 801518e:	2200      	movs	r2, #0
 8015190:	2172      	movs	r1, #114	; 0x72
 8015192:	f7ff f909 	bl	80143a8 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1_2_1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8015196:	697b      	ldr	r3, [r7, #20]
 8015198:	f503 5448 	add.w	r4, r3, #12800	; 0x3200
 801519c:	343c      	adds	r4, #60	; 0x3c
 801519e:	23ff      	movs	r3, #255	; 0xff
 80151a0:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 80151a4:	23ff      	movs	r3, #255	; 0xff
 80151a6:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
 80151aa:	23ff      	movs	r3, #255	; 0xff
 80151ac:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
 80151b0:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80151b4:	041b      	lsls	r3, r3, #16
 80151b6:	461a      	mov	r2, r3
 80151b8:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 80151bc:	021b      	lsls	r3, r3, #8
 80151be:	431a      	orrs	r2, r3
 80151c0:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 80151c4:	4313      	orrs	r3, r2
 80151c6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80151ca:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80151ce:	4611      	mov	r1, r2
 80151d0:	4618      	mov	r0, r3
 80151d2:	f7fb fbe1 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 80151d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80151da:	4619      	mov	r1, r3
 80151dc:	4620      	mov	r0, r4
 80151de:	f7ff fb77 	bl	80148d0 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    line1_2_1.setPainter(line1_2_1Painter);
 80151e2:	697b      	ldr	r3, [r7, #20]
 80151e4:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 80151e8:	330c      	adds	r3, #12
 80151ea:	697a      	ldr	r2, [r7, #20]
 80151ec:	f502 5248 	add.w	r2, r2, #12800	; 0x3200
 80151f0:	323c      	adds	r2, #60	; 0x3c
 80151f2:	4611      	mov	r1, r2
 80151f4:	4618      	mov	r0, r3
 80151f6:	f7ff fa56 	bl	80146a6 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1_2_1.setStart(1, 0);
 80151fa:	697b      	ldr	r3, [r7, #20]
 80151fc:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8015200:	330c      	adds	r3, #12
 8015202:	2200      	movs	r2, #0
 8015204:	2101      	movs	r1, #1
 8015206:	4618      	mov	r0, r3
 8015208:	f000 fc12 	bl	8015a30 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1_2_1.setEnd(1, 800);
 801520c:	697b      	ldr	r3, [r7, #20]
 801520e:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8015212:	330c      	adds	r3, #12
 8015214:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015218:	2101      	movs	r1, #1
 801521a:	4618      	mov	r0, r3
 801521c:	f000 fc2e 	bl	8015a7c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1_2_1.setLineWidth(2);
 8015220:	697b      	ldr	r3, [r7, #20]
 8015222:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8015226:	330c      	adds	r3, #12
 8015228:	2102      	movs	r1, #2
 801522a:	4618      	mov	r0, r3
 801522c:	f000 fc4c 	bl	8015ac8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1_2_1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8015230:	697b      	ldr	r3, [r7, #20]
 8015232:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8015236:	330c      	adds	r3, #12
 8015238:	2101      	movs	r1, #1
 801523a:	4618      	mov	r0, r3
 801523c:	f005 fee8 	bl	801b010 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line1_2_2.setPosition(230, 0, 15, 600);
 8015240:	697b      	ldr	r3, [r7, #20]
 8015242:	f503 5049 	add.w	r0, r3, #12864	; 0x3240
 8015246:	3010      	adds	r0, #16
 8015248:	f44f 7316 	mov.w	r3, #600	; 0x258
 801524c:	9300      	str	r3, [sp, #0]
 801524e:	230f      	movs	r3, #15
 8015250:	2200      	movs	r2, #0
 8015252:	21e6      	movs	r1, #230	; 0xe6
 8015254:	f7ff f8a8 	bl	80143a8 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1_2_2Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8015258:	697b      	ldr	r3, [r7, #20]
 801525a:	f503 544b 	add.w	r4, r3, #12992	; 0x32c0
 801525e:	23ff      	movs	r3, #255	; 0xff
 8015260:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
 8015264:	23ff      	movs	r3, #255	; 0xff
 8015266:	f887 30c9 	strb.w	r3, [r7, #201]	; 0xc9
 801526a:	23ff      	movs	r3, #255	; 0xff
 801526c:	f887 30c8 	strb.w	r3, [r7, #200]	; 0xc8
 8015270:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8015274:	041b      	lsls	r3, r3, #16
 8015276:	461a      	mov	r2, r3
 8015278:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 801527c:	021b      	lsls	r3, r3, #8
 801527e:	431a      	orrs	r2, r3
 8015280:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8015284:	4313      	orrs	r3, r2
 8015286:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801528a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801528e:	4611      	mov	r1, r2
 8015290:	4618      	mov	r0, r3
 8015292:	f7fb fb81 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8015296:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801529a:	4619      	mov	r1, r3
 801529c:	4620      	mov	r0, r4
 801529e:	f7ff fb17 	bl	80148d0 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    line1_2_2.setPainter(line1_2_2Painter);
 80152a2:	697b      	ldr	r3, [r7, #20]
 80152a4:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 80152a8:	3310      	adds	r3, #16
 80152aa:	e003      	b.n	80152b4 <_ZN15Screen2ViewBaseC1Ev+0x758>
 80152ac:	2000f1c8 	.word	0x2000f1c8
 80152b0:	0802f224 	.word	0x0802f224
 80152b4:	697a      	ldr	r2, [r7, #20]
 80152b6:	f502 524b 	add.w	r2, r2, #12992	; 0x32c0
 80152ba:	4611      	mov	r1, r2
 80152bc:	4618      	mov	r0, r3
 80152be:	f7ff f9f2 	bl	80146a6 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1_2_2.setStart(1, 0);
 80152c2:	697b      	ldr	r3, [r7, #20]
 80152c4:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 80152c8:	3310      	adds	r3, #16
 80152ca:	2200      	movs	r2, #0
 80152cc:	2101      	movs	r1, #1
 80152ce:	4618      	mov	r0, r3
 80152d0:	f000 fbae 	bl	8015a30 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1_2_2.setEnd(1, 800);
 80152d4:	697b      	ldr	r3, [r7, #20]
 80152d6:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 80152da:	3310      	adds	r3, #16
 80152dc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80152e0:	2101      	movs	r1, #1
 80152e2:	4618      	mov	r0, r3
 80152e4:	f000 fbca 	bl	8015a7c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1_2_2.setLineWidth(2);
 80152e8:	697b      	ldr	r3, [r7, #20]
 80152ea:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 80152ee:	3310      	adds	r3, #16
 80152f0:	2102      	movs	r1, #2
 80152f2:	4618      	mov	r0, r3
 80152f4:	f000 fbe8 	bl	8015ac8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1_2_2.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80152f8:	697b      	ldr	r3, [r7, #20]
 80152fa:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 80152fe:	3310      	adds	r3, #16
 8015300:	2101      	movs	r1, #1
 8015302:	4618      	mov	r0, r3
 8015304:	f005 fe84 	bl	801b010 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line1_2_3.setPosition(346, 0, 15, 600);
 8015308:	697b      	ldr	r3, [r7, #20]
 801530a:	f503 504b 	add.w	r0, r3, #12992	; 0x32c0
 801530e:	3014      	adds	r0, #20
 8015310:	f44f 7316 	mov.w	r3, #600	; 0x258
 8015314:	9300      	str	r3, [sp, #0]
 8015316:	230f      	movs	r3, #15
 8015318:	2200      	movs	r2, #0
 801531a:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 801531e:	f7ff f843 	bl	80143a8 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1_2_3Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8015322:	697b      	ldr	r3, [r7, #20]
 8015324:	f503 544d 	add.w	r4, r3, #13120	; 0x3340
 8015328:	3404      	adds	r4, #4
 801532a:	23ff      	movs	r3, #255	; 0xff
 801532c:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
 8015330:	23ff      	movs	r3, #255	; 0xff
 8015332:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
 8015336:	23ff      	movs	r3, #255	; 0xff
 8015338:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 801533c:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8015340:	041b      	lsls	r3, r3, #16
 8015342:	461a      	mov	r2, r3
 8015344:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8015348:	021b      	lsls	r3, r3, #8
 801534a:	431a      	orrs	r2, r3
 801534c:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8015350:	4313      	orrs	r3, r2
 8015352:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8015356:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801535a:	4611      	mov	r1, r2
 801535c:	4618      	mov	r0, r3
 801535e:	f7fb fb1b 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8015362:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8015364:	4619      	mov	r1, r3
 8015366:	4620      	mov	r0, r4
 8015368:	f7ff fab2 	bl	80148d0 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    line1_2_3.setPainter(line1_2_3Painter);
 801536c:	697b      	ldr	r3, [r7, #20]
 801536e:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8015372:	3314      	adds	r3, #20
 8015374:	697a      	ldr	r2, [r7, #20]
 8015376:	f502 524d 	add.w	r2, r2, #13120	; 0x3340
 801537a:	3204      	adds	r2, #4
 801537c:	4611      	mov	r1, r2
 801537e:	4618      	mov	r0, r3
 8015380:	f7ff f991 	bl	80146a6 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1_2_3.setStart(1, 0);
 8015384:	697b      	ldr	r3, [r7, #20]
 8015386:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 801538a:	3314      	adds	r3, #20
 801538c:	2200      	movs	r2, #0
 801538e:	2101      	movs	r1, #1
 8015390:	4618      	mov	r0, r3
 8015392:	f000 fb4d 	bl	8015a30 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1_2_3.setEnd(1, 800);
 8015396:	697b      	ldr	r3, [r7, #20]
 8015398:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 801539c:	3314      	adds	r3, #20
 801539e:	f44f 7248 	mov.w	r2, #800	; 0x320
 80153a2:	2101      	movs	r1, #1
 80153a4:	4618      	mov	r0, r3
 80153a6:	f000 fb69 	bl	8015a7c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1_2_3.setLineWidth(2);
 80153aa:	697b      	ldr	r3, [r7, #20]
 80153ac:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 80153b0:	3314      	adds	r3, #20
 80153b2:	2102      	movs	r1, #2
 80153b4:	4618      	mov	r0, r3
 80153b6:	f000 fb87 	bl	8015ac8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1_2_3.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80153ba:	697b      	ldr	r3, [r7, #20]
 80153bc:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 80153c0:	3314      	adds	r3, #20
 80153c2:	2101      	movs	r1, #1
 80153c4:	4618      	mov	r0, r3
 80153c6:	f005 fe23 	bl	801b010 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line1_2_4.setPosition(462, 0, 15, 600);
 80153ca:	697b      	ldr	r3, [r7, #20]
 80153cc:	f503 504d 	add.w	r0, r3, #13120	; 0x3340
 80153d0:	3018      	adds	r0, #24
 80153d2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80153d6:	9300      	str	r3, [sp, #0]
 80153d8:	230f      	movs	r3, #15
 80153da:	2200      	movs	r2, #0
 80153dc:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
 80153e0:	f7fe ffe2 	bl	80143a8 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1_2_4Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80153e4:	697b      	ldr	r3, [r7, #20]
 80153e6:	f503 544f 	add.w	r4, r3, #13248	; 0x33c0
 80153ea:	3408      	adds	r4, #8
 80153ec:	23ff      	movs	r3, #255	; 0xff
 80153ee:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
 80153f2:	23ff      	movs	r3, #255	; 0xff
 80153f4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 80153f8:	23ff      	movs	r3, #255	; 0xff
 80153fa:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
 80153fe:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 8015402:	041b      	lsls	r3, r3, #16
 8015404:	461a      	mov	r2, r3
 8015406:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 801540a:	021b      	lsls	r3, r3, #8
 801540c:	431a      	orrs	r2, r3
 801540e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8015412:	4313      	orrs	r3, r2
 8015414:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8015418:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801541c:	4611      	mov	r1, r2
 801541e:	4618      	mov	r0, r3
 8015420:	f7fb faba 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8015424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015426:	4619      	mov	r1, r3
 8015428:	4620      	mov	r0, r4
 801542a:	f7ff fa51 	bl	80148d0 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    line1_2_4.setPainter(line1_2_4Painter);
 801542e:	697b      	ldr	r3, [r7, #20]
 8015430:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 8015434:	3318      	adds	r3, #24
 8015436:	697a      	ldr	r2, [r7, #20]
 8015438:	f502 524f 	add.w	r2, r2, #13248	; 0x33c0
 801543c:	3208      	adds	r2, #8
 801543e:	4611      	mov	r1, r2
 8015440:	4618      	mov	r0, r3
 8015442:	f7ff f930 	bl	80146a6 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1_2_4.setStart(1, 0);
 8015446:	697b      	ldr	r3, [r7, #20]
 8015448:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 801544c:	3318      	adds	r3, #24
 801544e:	2200      	movs	r2, #0
 8015450:	2101      	movs	r1, #1
 8015452:	4618      	mov	r0, r3
 8015454:	f000 faec 	bl	8015a30 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1_2_4.setEnd(1, 800);
 8015458:	697b      	ldr	r3, [r7, #20]
 801545a:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 801545e:	3318      	adds	r3, #24
 8015460:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015464:	2101      	movs	r1, #1
 8015466:	4618      	mov	r0, r3
 8015468:	f000 fb08 	bl	8015a7c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1_2_4.setLineWidth(2);
 801546c:	697b      	ldr	r3, [r7, #20]
 801546e:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 8015472:	3318      	adds	r3, #24
 8015474:	2102      	movs	r1, #2
 8015476:	4618      	mov	r0, r3
 8015478:	f000 fb26 	bl	8015ac8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1_2_4.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 801547c:	697b      	ldr	r3, [r7, #20]
 801547e:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 8015482:	3318      	adds	r3, #24
 8015484:	2101      	movs	r1, #1
 8015486:	4618      	mov	r0, r3
 8015488:	f005 fdc2 	bl	801b010 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line1_2_5.setPosition(578, 0, 15, 600);
 801548c:	697b      	ldr	r3, [r7, #20]
 801548e:	f503 504f 	add.w	r0, r3, #13248	; 0x33c0
 8015492:	301c      	adds	r0, #28
 8015494:	f44f 7316 	mov.w	r3, #600	; 0x258
 8015498:	9300      	str	r3, [sp, #0]
 801549a:	230f      	movs	r3, #15
 801549c:	2200      	movs	r2, #0
 801549e:	f240 2142 	movw	r1, #578	; 0x242
 80154a2:	f7fe ff81 	bl	80143a8 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1_2_5Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80154a6:	697b      	ldr	r3, [r7, #20]
 80154a8:	f503 5451 	add.w	r4, r3, #13376	; 0x3440
 80154ac:	340c      	adds	r4, #12
 80154ae:	23ff      	movs	r3, #255	; 0xff
 80154b0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 80154b4:	23ff      	movs	r3, #255	; 0xff
 80154b6:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 80154ba:	23ff      	movs	r3, #255	; 0xff
 80154bc:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
 80154c0:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80154c4:	041b      	lsls	r3, r3, #16
 80154c6:	461a      	mov	r2, r3
 80154c8:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80154cc:	021b      	lsls	r3, r3, #8
 80154ce:	431a      	orrs	r2, r3
 80154d0:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 80154d4:	4313      	orrs	r3, r2
 80154d6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80154da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80154de:	4611      	mov	r1, r2
 80154e0:	4618      	mov	r0, r3
 80154e2:	f7fb fa59 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 80154e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80154e8:	4619      	mov	r1, r3
 80154ea:	4620      	mov	r0, r4
 80154ec:	f7ff f9f0 	bl	80148d0 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    line1_2_5.setPainter(line1_2_5Painter);
 80154f0:	697b      	ldr	r3, [r7, #20]
 80154f2:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 80154f6:	331c      	adds	r3, #28
 80154f8:	697a      	ldr	r2, [r7, #20]
 80154fa:	f502 5251 	add.w	r2, r2, #13376	; 0x3440
 80154fe:	320c      	adds	r2, #12
 8015500:	4611      	mov	r1, r2
 8015502:	4618      	mov	r0, r3
 8015504:	f7ff f8cf 	bl	80146a6 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1_2_5.setStart(1, 0);
 8015508:	697b      	ldr	r3, [r7, #20]
 801550a:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 801550e:	331c      	adds	r3, #28
 8015510:	2200      	movs	r2, #0
 8015512:	2101      	movs	r1, #1
 8015514:	4618      	mov	r0, r3
 8015516:	f000 fa8b 	bl	8015a30 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1_2_5.setEnd(1, 800);
 801551a:	697b      	ldr	r3, [r7, #20]
 801551c:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8015520:	331c      	adds	r3, #28
 8015522:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015526:	2101      	movs	r1, #1
 8015528:	4618      	mov	r0, r3
 801552a:	f000 faa7 	bl	8015a7c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1_2_5.setLineWidth(2);
 801552e:	697b      	ldr	r3, [r7, #20]
 8015530:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8015534:	331c      	adds	r3, #28
 8015536:	2102      	movs	r1, #2
 8015538:	4618      	mov	r0, r3
 801553a:	f000 fac5 	bl	8015ac8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1_2_5.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 801553e:	697b      	ldr	r3, [r7, #20]
 8015540:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8015544:	331c      	adds	r3, #28
 8015546:	2101      	movs	r1, #1
 8015548:	4618      	mov	r0, r3
 801554a:	f005 fd61 	bl	801b010 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line1_1_1.setPosition(0, 62, 697, 18);
 801554e:	697b      	ldr	r3, [r7, #20]
 8015550:	f503 5051 	add.w	r0, r3, #13376	; 0x3440
 8015554:	3020      	adds	r0, #32
 8015556:	2312      	movs	r3, #18
 8015558:	9300      	str	r3, [sp, #0]
 801555a:	f240 23b9 	movw	r3, #697	; 0x2b9
 801555e:	223e      	movs	r2, #62	; 0x3e
 8015560:	2100      	movs	r1, #0
 8015562:	f7fe ff21 	bl	80143a8 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1_1_1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8015566:	697b      	ldr	r3, [r7, #20]
 8015568:	f503 5453 	add.w	r4, r3, #13504	; 0x34c0
 801556c:	3410      	adds	r4, #16
 801556e:	23ff      	movs	r3, #255	; 0xff
 8015570:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
 8015574:	23ff      	movs	r3, #255	; 0xff
 8015576:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
 801557a:	23ff      	movs	r3, #255	; 0xff
 801557c:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
 8015580:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 8015584:	041b      	lsls	r3, r3, #16
 8015586:	461a      	mov	r2, r3
 8015588:	f897 30d5 	ldrb.w	r3, [r7, #213]	; 0xd5
 801558c:	021b      	lsls	r3, r3, #8
 801558e:	431a      	orrs	r2, r3
 8015590:	f897 30d4 	ldrb.w	r3, [r7, #212]	; 0xd4
 8015594:	4313      	orrs	r3, r2
 8015596:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801559a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801559e:	4611      	mov	r1, r2
 80155a0:	4618      	mov	r0, r3
 80155a2:	f7fb f9f9 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 80155a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80155a8:	4619      	mov	r1, r3
 80155aa:	4620      	mov	r0, r4
 80155ac:	f7ff f990 	bl	80148d0 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    line1_1_1.setPainter(line1_1_1Painter);
 80155b0:	697b      	ldr	r3, [r7, #20]
 80155b2:	f503 5351 	add.w	r3, r3, #13376	; 0x3440
 80155b6:	3320      	adds	r3, #32
 80155b8:	697a      	ldr	r2, [r7, #20]
 80155ba:	f502 5253 	add.w	r2, r2, #13504	; 0x34c0
 80155be:	3210      	adds	r2, #16
 80155c0:	4611      	mov	r1, r2
 80155c2:	4618      	mov	r0, r3
 80155c4:	f7ff f86f 	bl	80146a6 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1_1_1.setStart(0, 1);
 80155c8:	697b      	ldr	r3, [r7, #20]
 80155ca:	f503 5351 	add.w	r3, r3, #13376	; 0x3440
 80155ce:	3320      	adds	r3, #32
 80155d0:	2201      	movs	r2, #1
 80155d2:	2100      	movs	r1, #0
 80155d4:	4618      	mov	r0, r3
 80155d6:	f000 fa2b 	bl	8015a30 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1_1_1.setEnd(700, 1);
 80155da:	697b      	ldr	r3, [r7, #20]
 80155dc:	f503 5351 	add.w	r3, r3, #13376	; 0x3440
 80155e0:	3320      	adds	r3, #32
 80155e2:	2201      	movs	r2, #1
 80155e4:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80155e8:	4618      	mov	r0, r3
 80155ea:	f000 fa47 	bl	8015a7c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1_1_1.setLineWidth(2);
 80155ee:	697b      	ldr	r3, [r7, #20]
 80155f0:	f503 5351 	add.w	r3, r3, #13376	; 0x3440
 80155f4:	3320      	adds	r3, #32
 80155f6:	2102      	movs	r1, #2
 80155f8:	4618      	mov	r0, r3
 80155fa:	f000 fa65 	bl	8015ac8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1_1_1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80155fe:	697b      	ldr	r3, [r7, #20]
 8015600:	f503 5351 	add.w	r3, r3, #13376	; 0x3440
 8015604:	3320      	adds	r3, #32
 8015606:	2101      	movs	r1, #1
 8015608:	4618      	mov	r0, r3
 801560a:	f005 fd01 	bl	801b010 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line1_1_1_1.setPosition(0, 144, 697, 15);
 801560e:	697b      	ldr	r3, [r7, #20]
 8015610:	f503 5053 	add.w	r0, r3, #13504	; 0x34c0
 8015614:	3024      	adds	r0, #36	; 0x24
 8015616:	230f      	movs	r3, #15
 8015618:	9300      	str	r3, [sp, #0]
 801561a:	f240 23b9 	movw	r3, #697	; 0x2b9
 801561e:	2290      	movs	r2, #144	; 0x90
 8015620:	2100      	movs	r1, #0
 8015622:	f7fe fec1 	bl	80143a8 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1_1_1_1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8015626:	697b      	ldr	r3, [r7, #20]
 8015628:	f503 5455 	add.w	r4, r3, #13632	; 0x3540
 801562c:	3414      	adds	r4, #20
 801562e:	23ff      	movs	r3, #255	; 0xff
 8015630:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
 8015634:	23ff      	movs	r3, #255	; 0xff
 8015636:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
 801563a:	23ff      	movs	r3, #255	; 0xff
 801563c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8015640:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8015644:	041b      	lsls	r3, r3, #16
 8015646:	461a      	mov	r2, r3
 8015648:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 801564c:	021b      	lsls	r3, r3, #8
 801564e:	431a      	orrs	r2, r3
 8015650:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8015654:	4313      	orrs	r3, r2
 8015656:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801565a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801565e:	4611      	mov	r1, r2
 8015660:	4618      	mov	r0, r3
 8015662:	f7fb f999 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8015666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015668:	4619      	mov	r1, r3
 801566a:	4620      	mov	r0, r4
 801566c:	f7ff f930 	bl	80148d0 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    line1_1_1_1.setPainter(line1_1_1_1Painter);
 8015670:	697b      	ldr	r3, [r7, #20]
 8015672:	f503 5353 	add.w	r3, r3, #13504	; 0x34c0
 8015676:	3324      	adds	r3, #36	; 0x24
 8015678:	697a      	ldr	r2, [r7, #20]
 801567a:	f502 5255 	add.w	r2, r2, #13632	; 0x3540
 801567e:	3214      	adds	r2, #20
 8015680:	4611      	mov	r1, r2
 8015682:	4618      	mov	r0, r3
 8015684:	f7ff f80f 	bl	80146a6 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1_1_1_1.setStart(0, 1);
 8015688:	697b      	ldr	r3, [r7, #20]
 801568a:	f503 5353 	add.w	r3, r3, #13504	; 0x34c0
 801568e:	3324      	adds	r3, #36	; 0x24
 8015690:	2201      	movs	r2, #1
 8015692:	2100      	movs	r1, #0
 8015694:	4618      	mov	r0, r3
 8015696:	f000 f9cb 	bl	8015a30 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1_1_1_1.setEnd(700, 1);
 801569a:	697b      	ldr	r3, [r7, #20]
 801569c:	f503 5353 	add.w	r3, r3, #13504	; 0x34c0
 80156a0:	3324      	adds	r3, #36	; 0x24
 80156a2:	2201      	movs	r2, #1
 80156a4:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80156a8:	4618      	mov	r0, r3
 80156aa:	f000 f9e7 	bl	8015a7c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1_1_1_1.setLineWidth(2);
 80156ae:	697b      	ldr	r3, [r7, #20]
 80156b0:	f503 5353 	add.w	r3, r3, #13504	; 0x34c0
 80156b4:	3324      	adds	r3, #36	; 0x24
 80156b6:	2102      	movs	r1, #2
 80156b8:	4618      	mov	r0, r3
 80156ba:	f000 fa05 	bl	8015ac8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1_1_1_1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80156be:	697b      	ldr	r3, [r7, #20]
 80156c0:	f503 5353 	add.w	r3, r3, #13504	; 0x34c0
 80156c4:	3324      	adds	r3, #36	; 0x24
 80156c6:	2101      	movs	r1, #1
 80156c8:	4618      	mov	r0, r3
 80156ca:	f005 fca1 	bl	801b010 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line1_1_1_1_1.setPosition(0, 586, 697, 15);
 80156ce:	697b      	ldr	r3, [r7, #20]
 80156d0:	f503 5055 	add.w	r0, r3, #13632	; 0x3540
 80156d4:	3028      	adds	r0, #40	; 0x28
 80156d6:	230f      	movs	r3, #15
 80156d8:	9300      	str	r3, [sp, #0]
 80156da:	f240 23b9 	movw	r3, #697	; 0x2b9
 80156de:	f240 224a 	movw	r2, #586	; 0x24a
 80156e2:	2100      	movs	r1, #0
 80156e4:	f7fe fe60 	bl	80143a8 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1_1_1_1_1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80156e8:	697b      	ldr	r3, [r7, #20]
 80156ea:	f503 5457 	add.w	r4, r3, #13760	; 0x35c0
 80156ee:	3418      	adds	r4, #24
 80156f0:	23ff      	movs	r3, #255	; 0xff
 80156f2:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 80156f6:	23ff      	movs	r3, #255	; 0xff
 80156f8:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 80156fc:	23ff      	movs	r3, #255	; 0xff
 80156fe:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8015702:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8015706:	041b      	lsls	r3, r3, #16
 8015708:	461a      	mov	r2, r3
 801570a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 801570e:	021b      	lsls	r3, r3, #8
 8015710:	431a      	orrs	r2, r3
 8015712:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8015716:	4313      	orrs	r3, r2
 8015718:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801571c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015720:	4611      	mov	r1, r2
 8015722:	4618      	mov	r0, r3
 8015724:	f7fb f938 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8015728:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801572a:	4619      	mov	r1, r3
 801572c:	4620      	mov	r0, r4
 801572e:	f7ff f8cf 	bl	80148d0 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    line1_1_1_1_1.setPainter(line1_1_1_1_1Painter);
 8015732:	697b      	ldr	r3, [r7, #20]
 8015734:	f503 5355 	add.w	r3, r3, #13632	; 0x3540
 8015738:	3328      	adds	r3, #40	; 0x28
 801573a:	697a      	ldr	r2, [r7, #20]
 801573c:	f502 5257 	add.w	r2, r2, #13760	; 0x35c0
 8015740:	3218      	adds	r2, #24
 8015742:	4611      	mov	r1, r2
 8015744:	4618      	mov	r0, r3
 8015746:	f7fe ffae 	bl	80146a6 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1_1_1_1_1.setStart(0, 13);
 801574a:	697b      	ldr	r3, [r7, #20]
 801574c:	f503 5355 	add.w	r3, r3, #13632	; 0x3540
 8015750:	3328      	adds	r3, #40	; 0x28
 8015752:	220d      	movs	r2, #13
 8015754:	2100      	movs	r1, #0
 8015756:	4618      	mov	r0, r3
 8015758:	f000 f96a 	bl	8015a30 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1_1_1_1_1.setEnd(700, 13);
 801575c:	697b      	ldr	r3, [r7, #20]
 801575e:	f503 5355 	add.w	r3, r3, #13632	; 0x3540
 8015762:	3328      	adds	r3, #40	; 0x28
 8015764:	220d      	movs	r2, #13
 8015766:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 801576a:	4618      	mov	r0, r3
 801576c:	f000 f986 	bl	8015a7c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1_1_1_1_1.setLineWidth(2);
 8015770:	697b      	ldr	r3, [r7, #20]
 8015772:	f503 5355 	add.w	r3, r3, #13632	; 0x3540
 8015776:	3328      	adds	r3, #40	; 0x28
 8015778:	2102      	movs	r1, #2
 801577a:	4618      	mov	r0, r3
 801577c:	f000 f9a4 	bl	8015ac8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1_1_1_1_1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8015780:	697b      	ldr	r3, [r7, #20]
 8015782:	f503 5355 	add.w	r3, r3, #13632	; 0x3540
 8015786:	3328      	adds	r3, #40	; 0x28
 8015788:	2101      	movs	r1, #1
 801578a:	4618      	mov	r0, r3
 801578c:	f005 fc40 	bl	801b010 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    line1_1_1_2.setPosition(0, -1, 697, 18);
 8015790:	697b      	ldr	r3, [r7, #20]
 8015792:	f503 5057 	add.w	r0, r3, #13760	; 0x35c0
 8015796:	302c      	adds	r0, #44	; 0x2c
 8015798:	2312      	movs	r3, #18
 801579a:	9300      	str	r3, [sp, #0]
 801579c:	f240 23b9 	movw	r3, #697	; 0x2b9
 80157a0:	f04f 32ff 	mov.w	r2, #4294967295
 80157a4:	2100      	movs	r1, #0
 80157a6:	f7fe fdff 	bl	80143a8 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1_1_1_2Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80157aa:	697b      	ldr	r3, [r7, #20]
 80157ac:	f503 5459 	add.w	r4, r3, #13888	; 0x3640
 80157b0:	341c      	adds	r4, #28
 80157b2:	23ff      	movs	r3, #255	; 0xff
 80157b4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80157b8:	23ff      	movs	r3, #255	; 0xff
 80157ba:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 80157be:	23ff      	movs	r3, #255	; 0xff
 80157c0:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 80157c4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80157c8:	041b      	lsls	r3, r3, #16
 80157ca:	461a      	mov	r2, r3
 80157cc:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80157d0:	021b      	lsls	r3, r3, #8
 80157d2:	431a      	orrs	r2, r3
 80157d4:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80157d8:	4313      	orrs	r3, r2
 80157da:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80157de:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80157e2:	4611      	mov	r1, r2
 80157e4:	4618      	mov	r0, r3
 80157e6:	f7fb f8d7 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 80157ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80157ec:	4619      	mov	r1, r3
 80157ee:	4620      	mov	r0, r4
 80157f0:	f7ff f86e 	bl	80148d0 <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    line1_1_1_2.setPainter(line1_1_1_2Painter);
 80157f4:	697b      	ldr	r3, [r7, #20]
 80157f6:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 80157fa:	332c      	adds	r3, #44	; 0x2c
 80157fc:	697a      	ldr	r2, [r7, #20]
 80157fe:	f502 5259 	add.w	r2, r2, #13888	; 0x3640
 8015802:	321c      	adds	r2, #28
 8015804:	4611      	mov	r1, r2
 8015806:	4618      	mov	r0, r3
 8015808:	f7fe ff4d 	bl	80146a6 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1_1_1_2.setStart(0, 2);
 801580c:	697b      	ldr	r3, [r7, #20]
 801580e:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8015812:	332c      	adds	r3, #44	; 0x2c
 8015814:	2202      	movs	r2, #2
 8015816:	2100      	movs	r1, #0
 8015818:	4618      	mov	r0, r3
 801581a:	f000 f909 	bl	8015a30 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1_1_1_2.setEnd(700, 2);
 801581e:	697b      	ldr	r3, [r7, #20]
 8015820:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8015824:	332c      	adds	r3, #44	; 0x2c
 8015826:	2202      	movs	r2, #2
 8015828:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 801582c:	4618      	mov	r0, r3
 801582e:	f000 f925 	bl	8015a7c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1_1_1_2.setLineWidth(2);
 8015832:	697b      	ldr	r3, [r7, #20]
 8015834:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8015838:	332c      	adds	r3, #44	; 0x2c
 801583a:	2102      	movs	r1, #2
 801583c:	4618      	mov	r0, r3
 801583e:	f000 f943 	bl	8015ac8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1_1_1_2.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 8015842:	697b      	ldr	r3, [r7, #20]
 8015844:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 8015848:	332c      	adds	r3, #44	; 0x2c
 801584a:	2101      	movs	r1, #1
 801584c:	4618      	mov	r0, r3
 801584e:	f005 fbdf 	bl	801b010 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    add(__background);
 8015852:	697a      	ldr	r2, [r7, #20]
 8015854:	697b      	ldr	r3, [r7, #20]
 8015856:	3340      	adds	r3, #64	; 0x40
 8015858:	4619      	mov	r1, r3
 801585a:	4610      	mov	r0, r2
 801585c:	f7fe fe48 	bl	80144f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(battery_voltage);
 8015860:	697a      	ldr	r2, [r7, #20]
 8015862:	697b      	ldr	r3, [r7, #20]
 8015864:	336c      	adds	r3, #108	; 0x6c
 8015866:	4619      	mov	r1, r3
 8015868:	4610      	mov	r0, r2
 801586a:	f7fe fe41 	bl	80144f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(cell_0);
 801586e:	697a      	ldr	r2, [r7, #20]
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	33b8      	adds	r3, #184	; 0xb8
 8015874:	4619      	mov	r1, r3
 8015876:	4610      	mov	r0, r2
 8015878:	f7fe fe3a 	bl	80144f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(cell_1);
 801587c:	697a      	ldr	r2, [r7, #20]
 801587e:	697b      	ldr	r3, [r7, #20]
 8015880:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8015884:	4619      	mov	r1, r3
 8015886:	4610      	mov	r0, r2
 8015888:	f7fe fe32 	bl	80144f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(cell_2);
 801588c:	697a      	ldr	r2, [r7, #20]
 801588e:	697b      	ldr	r3, [r7, #20]
 8015890:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8015894:	3310      	adds	r3, #16
 8015896:	4619      	mov	r1, r3
 8015898:	4610      	mov	r0, r2
 801589a:	f7fe fe29 	bl	80144f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(cell_3);
 801589e:	697a      	ldr	r2, [r7, #20]
 80158a0:	697b      	ldr	r3, [r7, #20]
 80158a2:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80158a6:	331c      	adds	r3, #28
 80158a8:	4619      	mov	r1, r3
 80158aa:	4610      	mov	r0, r2
 80158ac:	f7fe fe20 	bl	80144f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(cell_4);
 80158b0:	697a      	ldr	r2, [r7, #20]
 80158b2:	697b      	ldr	r3, [r7, #20]
 80158b4:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80158b8:	3328      	adds	r3, #40	; 0x28
 80158ba:	4619      	mov	r1, r3
 80158bc:	4610      	mov	r0, r2
 80158be:	f7fe fe17 	bl	80144f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(cell_5);
 80158c2:	697a      	ldr	r2, [r7, #20]
 80158c4:	697b      	ldr	r3, [r7, #20]
 80158c6:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 80158ca:	3334      	adds	r3, #52	; 0x34
 80158cc:	4619      	mov	r1, r3
 80158ce:	4610      	mov	r0, r2
 80158d0:	f7fe fe0e 	bl	80144f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(battery_voltage_label);
 80158d4:	697a      	ldr	r2, [r7, #20]
 80158d6:	697b      	ldr	r3, [r7, #20]
 80158d8:	f503 5344 	add.w	r3, r3, #12544	; 0x3100
 80158dc:	4619      	mov	r1, r3
 80158de:	4610      	mov	r0, r2
 80158e0:	f7fe fe06 	bl	80144f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1_2);
 80158e4:	697a      	ldr	r2, [r7, #20]
 80158e6:	697b      	ldr	r3, [r7, #20]
 80158e8:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 80158ec:	3308      	adds	r3, #8
 80158ee:	4619      	mov	r1, r3
 80158f0:	4610      	mov	r0, r2
 80158f2:	f7fe fdfd 	bl	80144f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1_2_1);
 80158f6:	697a      	ldr	r2, [r7, #20]
 80158f8:	697b      	ldr	r3, [r7, #20]
 80158fa:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 80158fe:	330c      	adds	r3, #12
 8015900:	4619      	mov	r1, r3
 8015902:	4610      	mov	r0, r2
 8015904:	f7fe fdf4 	bl	80144f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1_2_2);
 8015908:	697a      	ldr	r2, [r7, #20]
 801590a:	697b      	ldr	r3, [r7, #20]
 801590c:	f503 5349 	add.w	r3, r3, #12864	; 0x3240
 8015910:	3310      	adds	r3, #16
 8015912:	4619      	mov	r1, r3
 8015914:	4610      	mov	r0, r2
 8015916:	f7fe fdeb 	bl	80144f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1_2_3);
 801591a:	697a      	ldr	r2, [r7, #20]
 801591c:	697b      	ldr	r3, [r7, #20]
 801591e:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8015922:	3314      	adds	r3, #20
 8015924:	4619      	mov	r1, r3
 8015926:	4610      	mov	r0, r2
 8015928:	f7fe fde2 	bl	80144f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1_2_4);
 801592c:	697a      	ldr	r2, [r7, #20]
 801592e:	697b      	ldr	r3, [r7, #20]
 8015930:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 8015934:	3318      	adds	r3, #24
 8015936:	4619      	mov	r1, r3
 8015938:	4610      	mov	r0, r2
 801593a:	f7fe fdd9 	bl	80144f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1_2_5);
 801593e:	697a      	ldr	r2, [r7, #20]
 8015940:	697b      	ldr	r3, [r7, #20]
 8015942:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8015946:	331c      	adds	r3, #28
 8015948:	4619      	mov	r1, r3
 801594a:	4610      	mov	r0, r2
 801594c:	f7fe fdd0 	bl	80144f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1_1_1);
 8015950:	697a      	ldr	r2, [r7, #20]
 8015952:	697b      	ldr	r3, [r7, #20]
 8015954:	f503 5351 	add.w	r3, r3, #13376	; 0x3440
 8015958:	3320      	adds	r3, #32
 801595a:	4619      	mov	r1, r3
 801595c:	4610      	mov	r0, r2
 801595e:	f7fe fdc7 	bl	80144f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1_1_1_1);
 8015962:	697a      	ldr	r2, [r7, #20]
 8015964:	697b      	ldr	r3, [r7, #20]
 8015966:	f503 5353 	add.w	r3, r3, #13504	; 0x34c0
 801596a:	3324      	adds	r3, #36	; 0x24
 801596c:	4619      	mov	r1, r3
 801596e:	4610      	mov	r0, r2
 8015970:	f7fe fdbe 	bl	80144f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1_1_1_1_1);
 8015974:	697a      	ldr	r2, [r7, #20]
 8015976:	697b      	ldr	r3, [r7, #20]
 8015978:	f503 5355 	add.w	r3, r3, #13632	; 0x3540
 801597c:	3328      	adds	r3, #40	; 0x28
 801597e:	4619      	mov	r1, r3
 8015980:	4610      	mov	r0, r2
 8015982:	f7fe fdb5 	bl	80144f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1_1_1_2);
 8015986:	697a      	ldr	r2, [r7, #20]
 8015988:	697b      	ldr	r3, [r7, #20]
 801598a:	f503 5357 	add.w	r3, r3, #13760	; 0x35c0
 801598e:	332c      	adds	r3, #44	; 0x2c
 8015990:	4619      	mov	r1, r3
 8015992:	4610      	mov	r0, r2
 8015994:	f7fe fdac 	bl	80144f0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8015998:	697b      	ldr	r3, [r7, #20]
 801599a:	4618      	mov	r0, r3
 801599c:	37e4      	adds	r7, #228	; 0xe4
 801599e:	46bd      	mov	sp, r7
 80159a0:	bd90      	pop	{r4, r7, pc}
 80159a2:	bf00      	nop

080159a4 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b082      	sub	sp, #8
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	6078      	str	r0, [r7, #4]
    cell_0.initialize();
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	33b8      	adds	r3, #184	; 0xb8
 80159b0:	4618      	mov	r0, r3
 80159b2:	f000 fbad 	bl	8016110 <_ZN4cell10initializeEv>
    cell_1.initialize();
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 80159bc:	4618      	mov	r0, r3
 80159be:	f000 fba7 	bl	8016110 <_ZN4cell10initializeEv>
    cell_2.initialize();
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 80159c8:	3310      	adds	r3, #16
 80159ca:	4618      	mov	r0, r3
 80159cc:	f000 fba0 	bl	8016110 <_ZN4cell10initializeEv>
    cell_3.initialize();
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80159d6:	331c      	adds	r3, #28
 80159d8:	4618      	mov	r0, r3
 80159da:	f000 fb99 	bl	8016110 <_ZN4cell10initializeEv>
    cell_4.initialize();
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80159e4:	3328      	adds	r3, #40	; 0x28
 80159e6:	4618      	mov	r0, r3
 80159e8:	f000 fb92 	bl	8016110 <_ZN4cell10initializeEv>
    cell_5.initialize();
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 80159f2:	3334      	adds	r3, #52	; 0x34
 80159f4:	4618      	mov	r0, r3
 80159f6:	f000 fb8b 	bl	8016110 <_ZN4cell10initializeEv>
}
 80159fa:	bf00      	nop
 80159fc:	3708      	adds	r7, #8
 80159fe:	46bd      	mov	sp, r7
 8015a00:	bd80      	pop	{r7, pc}
	...

08015a04 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b082      	sub	sp, #8
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	4618      	mov	r0, r3
 8015a10:	f009 ff50 	bl	801f8b4 <_ZN8touchgfx6ScreenC1Ev>
 8015a14:	4a05      	ldr	r2, [pc, #20]	; (8015a2c <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	601a      	str	r2, [r3, #0]
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	4618      	mov	r0, r3
 8015a24:	3708      	adds	r7, #8
 8015a26:	46bd      	mov	sp, r7
 8015a28:	bd80      	pop	{r7, pc}
 8015a2a:	bf00      	nop
 8015a2c:	0802fe70 	.word	0x0802fe70

08015a30 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8015a30:	b590      	push	{r4, r7, lr}
 8015a32:	b089      	sub	sp, #36	; 0x24
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	60f8      	str	r0, [r7, #12]
 8015a38:	60b9      	str	r1, [r7, #8]
 8015a3a:	607a      	str	r2, [r7, #4]
 8015a3c:	68bb      	ldr	r3, [r7, #8]
 8015a3e:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 8015a40:	69bb      	ldr	r3, [r7, #24]
 8015a42:	015a      	lsls	r2, r3, #5
 8015a44:	f107 0314 	add.w	r3, r7, #20
 8015a48:	4611      	mov	r1, r2
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	f7fe fe10 	bl	8014670 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8015a50:	697b      	ldr	r3, [r7, #20]
 8015a52:	461c      	mov	r4, r3
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	61fb      	str	r3, [r7, #28]
 8015a58:	69fb      	ldr	r3, [r7, #28]
 8015a5a:	015a      	lsls	r2, r3, #5
 8015a5c:	f107 0310 	add.w	r3, r7, #16
 8015a60:	4611      	mov	r1, r2
 8015a62:	4618      	mov	r0, r3
 8015a64:	f7fe fe04 	bl	8014670 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8015a68:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8015a6a:	461a      	mov	r2, r3
 8015a6c:	4621      	mov	r1, r4
 8015a6e:	68f8      	ldr	r0, [r7, #12]
 8015a70:	f005 fab8 	bl	801afe4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8015a74:	bf00      	nop
 8015a76:	3724      	adds	r7, #36	; 0x24
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	bd90      	pop	{r4, r7, pc}

08015a7c <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8015a7c:	b590      	push	{r4, r7, lr}
 8015a7e:	b089      	sub	sp, #36	; 0x24
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	60f8      	str	r0, [r7, #12]
 8015a84:	60b9      	str	r1, [r7, #8]
 8015a86:	607a      	str	r2, [r7, #4]
 8015a88:	68bb      	ldr	r3, [r7, #8]
 8015a8a:	61bb      	str	r3, [r7, #24]
 8015a8c:	69bb      	ldr	r3, [r7, #24]
 8015a8e:	015a      	lsls	r2, r3, #5
 8015a90:	f107 0314 	add.w	r3, r7, #20
 8015a94:	4611      	mov	r1, r2
 8015a96:	4618      	mov	r0, r3
 8015a98:	f7fe fdea 	bl	8014670 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8015a9c:	697b      	ldr	r3, [r7, #20]
 8015a9e:	461c      	mov	r4, r3
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	61fb      	str	r3, [r7, #28]
 8015aa4:	69fb      	ldr	r3, [r7, #28]
 8015aa6:	015a      	lsls	r2, r3, #5
 8015aa8:	f107 0310 	add.w	r3, r7, #16
 8015aac:	4611      	mov	r1, r2
 8015aae:	4618      	mov	r0, r3
 8015ab0:	f7fe fdde 	bl	8014670 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8015ab4:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 8015ab6:	461a      	mov	r2, r3
 8015ab8:	4621      	mov	r1, r4
 8015aba:	68f8      	ldr	r0, [r7, #12]
 8015abc:	f005 fa9d 	bl	801affa <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8015ac0:	bf00      	nop
 8015ac2:	3724      	adds	r7, #36	; 0x24
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	bd90      	pop	{r4, r7, pc}

08015ac8 <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b084      	sub	sp, #16
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	6078      	str	r0, [r7, #4]
 8015ad0:	6039      	str	r1, [r7, #0]
 8015ad2:	683b      	ldr	r3, [r7, #0]
 8015ad4:	60fb      	str	r3, [r7, #12]
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	015a      	lsls	r2, r3, #5
 8015ada:	f107 0308 	add.w	r3, r7, #8
 8015ade:	4611      	mov	r1, r2
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	f7fe fdc5 	bl	8014670 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8015ae6:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 8015ae8:	4619      	mov	r1, r3
 8015aea:	6878      	ldr	r0, [r7, #4]
 8015aec:	f7fe fde9 	bl	80146c2 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 8015af0:	bf00      	nop
 8015af2:	3710      	adds	r7, #16
 8015af4:	46bd      	mov	sp, r7
 8015af6:	bd80      	pop	{r7, pc}

08015af8 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b082      	sub	sp, #8
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
 8015b00:	4a05      	ldr	r2, [pc, #20]	; (8015b18 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	601a      	str	r2, [r3, #0]
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	4618      	mov	r0, r3
 8015b0a:	f7fb f95d 	bl	8010dc8 <_ZN8touchgfx6WidgetD1Ev>
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	4618      	mov	r0, r3
 8015b12:	3708      	adds	r7, #8
 8015b14:	46bd      	mov	sp, r7
 8015b16:	bd80      	pop	{r7, pc}
 8015b18:	080308e8 	.word	0x080308e8

08015b1c <_ZN8touchgfx3BoxD0Ev>:
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b082      	sub	sp, #8
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
 8015b24:	6878      	ldr	r0, [r7, #4]
 8015b26:	f7ff ffe7 	bl	8015af8 <_ZN8touchgfx3BoxD1Ev>
 8015b2a:	212c      	movs	r1, #44	; 0x2c
 8015b2c:	6878      	ldr	r0, [r7, #4]
 8015b2e:	f017 fe9f 	bl	802d870 <_ZdlPvj>
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	4618      	mov	r0, r3
 8015b36:	3708      	adds	r7, #8
 8015b38:	46bd      	mov	sp, r7
 8015b3a:	bd80      	pop	{r7, pc}

08015b3c <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b082      	sub	sp, #8
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
 8015b44:	4a05      	ldr	r2, [pc, #20]	; (8015b5c <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	601a      	str	r2, [r3, #0]
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	4618      	mov	r0, r3
 8015b4e:	f7fb f93b 	bl	8010dc8 <_ZN8touchgfx6WidgetD1Ev>
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	4618      	mov	r0, r3
 8015b56:	3708      	adds	r7, #8
 8015b58:	46bd      	mov	sp, r7
 8015b5a:	bd80      	pop	{r7, pc}
 8015b5c:	08030644 	.word	0x08030644

08015b60 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8015b60:	b580      	push	{r7, lr}
 8015b62:	b082      	sub	sp, #8
 8015b64:	af00      	add	r7, sp, #0
 8015b66:	6078      	str	r0, [r7, #4]
 8015b68:	6878      	ldr	r0, [r7, #4]
 8015b6a:	f7ff ffe7 	bl	8015b3c <_ZN8touchgfx12CanvasWidgetD1Ev>
 8015b6e:	212c      	movs	r1, #44	; 0x2c
 8015b70:	6878      	ldr	r0, [r7, #4]
 8015b72:	f017 fe7d 	bl	802d870 <_ZdlPvj>
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	4618      	mov	r0, r3
 8015b7a:	3708      	adds	r7, #8
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	bd80      	pop	{r7, pc}

08015b80 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b082      	sub	sp, #8
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	6078      	str	r0, [r7, #4]
 8015b88:	4a05      	ldr	r2, [pc, #20]	; (8015ba0 <_ZN8touchgfx4LineD1Ev+0x20>)
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	601a      	str	r2, [r3, #0]
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	4618      	mov	r0, r3
 8015b92:	f7ff ffd3 	bl	8015b3c <_ZN8touchgfx12CanvasWidgetD1Ev>
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	4618      	mov	r0, r3
 8015b9a:	3708      	adds	r7, #8
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	bd80      	pop	{r7, pc}
 8015ba0:	080307e0 	.word	0x080307e0

08015ba4 <_ZN8touchgfx4LineD0Ev>:
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	b082      	sub	sp, #8
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	6078      	str	r0, [r7, #4]
 8015bac:	6878      	ldr	r0, [r7, #4]
 8015bae:	f7ff ffe7 	bl	8015b80 <_ZN8touchgfx4LineD1Ev>
 8015bb2:	2170      	movs	r1, #112	; 0x70
 8015bb4:	6878      	ldr	r0, [r7, #4]
 8015bb6:	f017 fe5b 	bl	802d870 <_ZdlPvj>
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	3708      	adds	r7, #8
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	bd80      	pop	{r7, pc}

08015bc4 <_ZN8touchgfx13PainterRGB565D1Ev>:
class PainterRGB565 : public AbstractPainterRGB565, public AbstractPainterColor
 8015bc4:	b580      	push	{r7, lr}
 8015bc6:	b082      	sub	sp, #8
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
 8015bcc:	4a09      	ldr	r2, [pc, #36]	; (8015bf4 <_ZN8touchgfx13PainterRGB565D1Ev+0x30>)
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	601a      	str	r2, [r3, #0]
 8015bd2:	4a09      	ldr	r2, [pc, #36]	; (8015bf8 <_ZN8touchgfx13PainterRGB565D1Ev+0x34>)
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	609a      	str	r2, [r3, #8]
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	3308      	adds	r3, #8
 8015bdc:	4618      	mov	r0, r3
 8015bde:	f7fe fdab 	bl	8014738 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	4618      	mov	r0, r3
 8015be6:	f7fe fe33 	bl	8014850 <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	4618      	mov	r0, r3
 8015bee:	3708      	adds	r7, #8
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	bd80      	pop	{r7, pc}
 8015bf4:	0803060c 	.word	0x0803060c
 8015bf8:	08030630 	.word	0x08030630

08015bfc <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 8015bfc:	f1a0 0008 	sub.w	r0, r0, #8
 8015c00:	e7e0      	b.n	8015bc4 <_ZN8touchgfx13PainterRGB565D1Ev>
 8015c02:	bf00      	nop

08015c04 <_ZN8touchgfx13PainterRGB565D0Ev>:
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b082      	sub	sp, #8
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
 8015c0c:	6878      	ldr	r0, [r7, #4]
 8015c0e:	f7ff ffd9 	bl	8015bc4 <_ZN8touchgfx13PainterRGB565D1Ev>
 8015c12:	2114      	movs	r1, #20
 8015c14:	6878      	ldr	r0, [r7, #4]
 8015c16:	f017 fe2b 	bl	802d870 <_ZdlPvj>
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	4618      	mov	r0, r3
 8015c1e:	3708      	adds	r7, #8
 8015c20:	46bd      	mov	sp, r7
 8015c22:	bd80      	pop	{r7, pc}

08015c24 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 8015c24:	f1a0 0008 	sub.w	r0, r0, #8
 8015c28:	e7ec      	b.n	8015c04 <_ZN8touchgfx13PainterRGB565D0Ev>
	...

08015c2c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8015c2c:	b480      	push	{r7}
 8015c2e:	af00      	add	r7, sp, #0
    return bitmap_database;
 8015c30:	4b02      	ldr	r3, [pc, #8]	; (8015c3c <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8015c32:	4618      	mov	r0, r3
 8015c34:	46bd      	mov	sp, r7
 8015c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c3a:	4770      	bx	lr
 8015c3c:	0802fef0 	.word	0x0802fef0

08015c40 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8015c40:	b480      	push	{r7}
 8015c42:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8015c44:	2301      	movs	r3, #1
}
 8015c46:	4618      	mov	r0, r3
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c4e:	4770      	bx	lr

08015c50 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8015c50:	b480      	push	{r7}
 8015c52:	b085      	sub	sp, #20
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	60f8      	str	r0, [r7, #12]
 8015c58:	460b      	mov	r3, r1
 8015c5a:	607a      	str	r2, [r7, #4]
 8015c5c:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 8015c5e:	2300      	movs	r3, #0
    }
 8015c60:	4618      	mov	r0, r3
 8015c62:	3714      	adds	r7, #20
 8015c64:	46bd      	mov	sp, r7
 8015c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6a:	4770      	bx	lr

08015c6c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8015c6c:	b480      	push	{r7}
 8015c6e:	b083      	sub	sp, #12
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8015c74:	2300      	movs	r3, #0
    }
 8015c76:	4618      	mov	r0, r3
 8015c78:	370c      	adds	r7, #12
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c80:	4770      	bx	lr

08015c82 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8015c82:	b480      	push	{r7}
 8015c84:	b083      	sub	sp, #12
 8015c86:	af00      	add	r7, sp, #0
 8015c88:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8015c8a:	2300      	movs	r3, #0
    }
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	370c      	adds	r7, #12
 8015c90:	46bd      	mov	sp, r7
 8015c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c96:	4770      	bx	lr

08015c98 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8015c98:	b480      	push	{r7}
 8015c9a:	b085      	sub	sp, #20
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	60f8      	str	r0, [r7, #12]
 8015ca0:	60b9      	str	r1, [r7, #8]
 8015ca2:	4613      	mov	r3, r2
 8015ca4:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8015ca6:	4a07      	ldr	r2, [pc, #28]	; (8015cc4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	6013      	str	r3, [r2, #0]
        fonts = f;
 8015cac:	4a06      	ldr	r2, [pc, #24]	; (8015cc8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8015cae:	68bb      	ldr	r3, [r7, #8]
 8015cb0:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8015cb2:	4a06      	ldr	r2, [pc, #24]	; (8015ccc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8015cb4:	88fb      	ldrh	r3, [r7, #6]
 8015cb6:	8013      	strh	r3, [r2, #0]
    }
 8015cb8:	bf00      	nop
 8015cba:	3714      	adds	r7, #20
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc2:	4770      	bx	lr
 8015cc4:	2000f1bc 	.word	0x2000f1bc
 8015cc8:	2000f1c4 	.word	0x2000f1c4
 8015ccc:	2000f1c0 	.word	0x2000f1c0

08015cd0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8015cd0:	b40e      	push	{r1, r2, r3}
 8015cd2:	b580      	push	{r7, lr}
 8015cd4:	b085      	sub	sp, #20
 8015cd6:	af00      	add	r7, sp, #0
 8015cd8:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8015cda:	f107 0320 	add.w	r3, r7, #32
 8015cde:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8015ce0:	68bb      	ldr	r3, [r7, #8]
 8015ce2:	69fa      	ldr	r2, [r7, #28]
 8015ce4:	2100      	movs	r1, #0
 8015ce6:	6878      	ldr	r0, [r7, #4]
 8015ce8:	f009 f960 	bl	801efac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8015cec:	4603      	mov	r3, r0
 8015cee:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8015cf0:	89fb      	ldrh	r3, [r7, #14]
}
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	3714      	adds	r7, #20
 8015cf6:	46bd      	mov	sp, r7
 8015cf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015cfc:	b003      	add	sp, #12
 8015cfe:	4770      	bx	lr

08015d00 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8015d00:	b40c      	push	{r2, r3}
 8015d02:	b580      	push	{r7, lr}
 8015d04:	b084      	sub	sp, #16
 8015d06:	af00      	add	r7, sp, #0
 8015d08:	6078      	str	r0, [r7, #4]
 8015d0a:	460b      	mov	r3, r1
 8015d0c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8015d0e:	f107 031c 	add.w	r3, r7, #28
 8015d12:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8015d14:	78f9      	ldrb	r1, [r7, #3]
 8015d16:	68bb      	ldr	r3, [r7, #8]
 8015d18:	69ba      	ldr	r2, [r7, #24]
 8015d1a:	6878      	ldr	r0, [r7, #4]
 8015d1c:	f009 f946 	bl	801efac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8015d20:	4603      	mov	r3, r0
 8015d22:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8015d24:	89fb      	ldrh	r3, [r7, #14]
}
 8015d26:	4618      	mov	r0, r3
 8015d28:	3710      	adds	r7, #16
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015d30:	b002      	add	sp, #8
 8015d32:	4770      	bx	lr

08015d34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8015d34:	b580      	push	{r7, lr}
 8015d36:	b08a      	sub	sp, #40	; 0x28
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	6078      	str	r0, [r7, #4]
 8015d3c:	460b      	mov	r3, r1
 8015d3e:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d016      	beq.n	8015d76 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	3322      	adds	r3, #34	; 0x22
 8015d4c:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8015d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d50:	8adb      	ldrh	r3, [r3, #22]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d105      	bne.n	8015d62 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8015d56:	4b43      	ldr	r3, [pc, #268]	; (8015e64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8015d58:	4a43      	ldr	r2, [pc, #268]	; (8015e68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8015d5a:	21c0      	movs	r1, #192	; 0xc0
 8015d5c:	4843      	ldr	r0, [pc, #268]	; (8015e6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8015d5e:	f017 fdb5 	bl	802d8cc <__assert_func>
            return buffer[pos];
 8015d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d64:	8a9b      	ldrh	r3, [r3, #20]
 8015d66:	461a      	mov	r2, r3
 8015d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d6a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d001      	beq.n	8015d76 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8015d72:	2301      	movs	r3, #1
 8015d74:	e000      	b.n	8015d78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8015d76:	2300      	movs	r3, #0
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d06a      	beq.n	8015e52 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8015d7c:	6878      	ldr	r0, [r7, #4]
 8015d7e:	f00a fc74 	bl	802066a <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	3322      	adds	r3, #34	; 0x22
 8015d86:	623b      	str	r3, [r7, #32]
 8015d88:	2301      	movs	r3, #1
 8015d8a:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8015d8c:	6a3b      	ldr	r3, [r7, #32]
 8015d8e:	8adb      	ldrh	r3, [r3, #22]
 8015d90:	8bfa      	ldrh	r2, [r7, #30]
 8015d92:	429a      	cmp	r2, r3
 8015d94:	d305      	bcc.n	8015da2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8015d96:	4b36      	ldr	r3, [pc, #216]	; (8015e70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8015d98:	4a36      	ldr	r2, [pc, #216]	; (8015e74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8015d9a:	21c5      	movs	r1, #197	; 0xc5
 8015d9c:	4833      	ldr	r0, [pc, #204]	; (8015e6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8015d9e:	f017 fd95 	bl	802d8cc <__assert_func>
            const uint16_t index = pos + offset;
 8015da2:	6a3b      	ldr	r3, [r7, #32]
 8015da4:	8a9a      	ldrh	r2, [r3, #20]
 8015da6:	8bfb      	ldrh	r3, [r7, #30]
 8015da8:	4413      	add	r3, r2
 8015daa:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8015dac:	8bbb      	ldrh	r3, [r7, #28]
 8015dae:	2b09      	cmp	r3, #9
 8015db0:	d801      	bhi.n	8015db6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8015db2:	8bbb      	ldrh	r3, [r7, #28]
 8015db4:	e001      	b.n	8015dba <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8015db6:	8bbb      	ldrh	r3, [r7, #28]
 8015db8:	3b0a      	subs	r3, #10
 8015dba:	6a3a      	ldr	r2, [r7, #32]
 8015dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015dc0:	f640 123f 	movw	r2, #2367	; 0x93f
 8015dc4:	4293      	cmp	r3, r2
 8015dc6:	bf0c      	ite	eq
 8015dc8:	2301      	moveq	r3, #1
 8015dca:	2300      	movne	r3, #0
 8015dcc:	b2db      	uxtb	r3, r3
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d03f      	beq.n	8015e52 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	3322      	adds	r3, #34	; 0x22
 8015dd6:	687a      	ldr	r2, [r7, #4]
 8015dd8:	3222      	adds	r2, #34	; 0x22
 8015dda:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8015ddc:	68ba      	ldr	r2, [r7, #8]
 8015dde:	8ad2      	ldrh	r2, [r2, #22]
 8015de0:	2a00      	cmp	r2, #0
 8015de2:	d105      	bne.n	8015df0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8015de4:	4b1f      	ldr	r3, [pc, #124]	; (8015e64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8015de6:	4a20      	ldr	r2, [pc, #128]	; (8015e68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8015de8:	21c0      	movs	r1, #192	; 0xc0
 8015dea:	4820      	ldr	r0, [pc, #128]	; (8015e6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8015dec:	f017 fd6e 	bl	802d8cc <__assert_func>
            return buffer[pos];
 8015df0:	68ba      	ldr	r2, [r7, #8]
 8015df2:	8a92      	ldrh	r2, [r2, #20]
 8015df4:	4611      	mov	r1, r2
 8015df6:	68ba      	ldr	r2, [r7, #8]
 8015df8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8015dfc:	613b      	str	r3, [r7, #16]
 8015dfe:	4613      	mov	r3, r2
 8015e00:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8015e02:	693b      	ldr	r3, [r7, #16]
 8015e04:	8adb      	ldrh	r3, [r3, #22]
 8015e06:	2b01      	cmp	r3, #1
 8015e08:	d806      	bhi.n	8015e18 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8015e0a:	4b1b      	ldr	r3, [pc, #108]	; (8015e78 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8015e0c:	4a1b      	ldr	r2, [pc, #108]	; (8015e7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8015e0e:	f240 110d 	movw	r1, #269	; 0x10d
 8015e12:	4816      	ldr	r0, [pc, #88]	; (8015e6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8015e14:	f017 fd5a 	bl	802d8cc <__assert_func>
            const uint16_t index = pos + 1;
 8015e18:	693b      	ldr	r3, [r7, #16]
 8015e1a:	8a9b      	ldrh	r3, [r3, #20]
 8015e1c:	3301      	adds	r3, #1
 8015e1e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8015e20:	89bb      	ldrh	r3, [r7, #12]
 8015e22:	2b09      	cmp	r3, #9
 8015e24:	d801      	bhi.n	8015e2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8015e26:	89bb      	ldrh	r3, [r7, #12]
 8015e28:	e000      	b.n	8015e2c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8015e2a:	2300      	movs	r3, #0
 8015e2c:	693a      	ldr	r2, [r7, #16]
 8015e2e:	89f9      	ldrh	r1, [r7, #14]
 8015e30:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8015e34:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	3322      	adds	r3, #34	; 0x22
 8015e3a:	61bb      	str	r3, [r7, #24]
 8015e3c:	f640 133f 	movw	r3, #2367	; 0x93f
 8015e40:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8015e42:	69bb      	ldr	r3, [r7, #24]
 8015e44:	8a9b      	ldrh	r3, [r3, #20]
 8015e46:	4619      	mov	r1, r3
 8015e48:	69bb      	ldr	r3, [r7, #24]
 8015e4a:	8afa      	ldrh	r2, [r7, #22]
 8015e4c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8015e50:	bf00      	nop
        }
    }
    return getNextChar();
 8015e52:	6878      	ldr	r0, [r7, #4]
 8015e54:	f00a fb0c 	bl	8020470 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015e58:	4603      	mov	r3, r0
}
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	3728      	adds	r7, #40	; 0x28
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	bd80      	pop	{r7, pc}
 8015e62:	bf00      	nop
 8015e64:	0802f228 	.word	0x0802f228
 8015e68:	0802f234 	.word	0x0802f234
 8015e6c:	0802f2e0 	.word	0x0802f2e0
 8015e70:	0802f328 	.word	0x0802f328
 8015e74:	0802f338 	.word	0x0802f338
 8015e78:	0802f40c 	.word	0x0802f40c
 8015e7c:	0802f418 	.word	0x0802f418

08015e80 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b082      	sub	sp, #8
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8015e88:	6878      	ldr	r0, [r7, #4]
 8015e8a:	f00a fab8 	bl	80203fe <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8015e8e:	bf00      	nop
 8015e90:	3708      	adds	r7, #8
 8015e92:	46bd      	mov	sp, r7
 8015e94:	bd80      	pop	{r7, pc}

08015e96 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8015e96:	b580      	push	{r7, lr}
 8015e98:	b088      	sub	sp, #32
 8015e9a:	af02      	add	r7, sp, #8
 8015e9c:	60f8      	str	r0, [r7, #12]
 8015e9e:	1d38      	adds	r0, r7, #4
 8015ea0:	e880 0006 	stmia.w	r0, {r1, r2}
 8015ea4:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8015ea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015eaa:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8015eac:	1d39      	adds	r1, r7, #4
 8015eae:	697b      	ldr	r3, [r7, #20]
 8015eb0:	9301      	str	r3, [sp, #4]
 8015eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb4:	9300      	str	r3, [sp, #0]
 8015eb6:	6a3b      	ldr	r3, [r7, #32]
 8015eb8:	683a      	ldr	r2, [r7, #0]
 8015eba:	68f8      	ldr	r0, [r7, #12]
 8015ebc:	f007 fd3f 	bl	801d93e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8015ec0:	bf00      	nop
 8015ec2:	3718      	adds	r7, #24
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	bd80      	pop	{r7, pc}

08015ec8 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8015ec8:	b590      	push	{r4, r7, lr}
 8015eca:	b085      	sub	sp, #20
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	4603      	mov	r3, r0
 8015ed0:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8015ed6:	88fb      	ldrh	r3, [r7, #6]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d127      	bne.n	8015f2c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8015edc:	88fb      	ldrh	r3, [r7, #6]
 8015ede:	4a1e      	ldr	r2, [pc, #120]	; (8015f58 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8015ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d016      	beq.n	8015f16 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8015ee8:	88fb      	ldrh	r3, [r7, #6]
 8015eea:	4a1b      	ldr	r2, [pc, #108]	; (8015f58 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8015eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015ef0:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8015ef2:	68bb      	ldr	r3, [r7, #8]
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	68ba      	ldr	r2, [r7, #8]
 8015ef8:	4413      	add	r3, r2
 8015efa:	4a18      	ldr	r2, [pc, #96]	; (8015f5c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8015efc:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8015efe:	68bb      	ldr	r3, [r7, #8]
 8015f00:	685b      	ldr	r3, [r3, #4]
 8015f02:	68ba      	ldr	r2, [r7, #8]
 8015f04:	4413      	add	r3, r2
 8015f06:	4a16      	ldr	r2, [pc, #88]	; (8015f60 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8015f08:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8015f0a:	68bb      	ldr	r3, [r7, #8]
 8015f0c:	689b      	ldr	r3, [r3, #8]
 8015f0e:	68ba      	ldr	r2, [r7, #8]
 8015f10:	4413      	add	r3, r2
 8015f12:	60fb      	str	r3, [r7, #12]
 8015f14:	e00a      	b.n	8015f2c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8015f16:	4b11      	ldr	r3, [pc, #68]	; (8015f5c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8015f18:	4a12      	ldr	r2, [pc, #72]	; (8015f64 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8015f1a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8015f1c:	4a12      	ldr	r2, [pc, #72]	; (8015f68 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8015f1e:	4b10      	ldr	r3, [pc, #64]	; (8015f60 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8015f20:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8015f22:	88fb      	ldrh	r3, [r7, #6]
 8015f24:	4a11      	ldr	r2, [pc, #68]	; (8015f6c <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8015f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015f2a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d00d      	beq.n	8015f4e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8015f32:	4a0f      	ldr	r2, [pc, #60]	; (8015f70 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8015f34:	88fb      	ldrh	r3, [r7, #6]
 8015f36:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8015f38:	f000 f83e 	bl	8015fb8 <_ZN17TypedTextDatabase8getFontsEv>
 8015f3c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8015f3e:	f000 f833 	bl	8015fa8 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8015f42:	4603      	mov	r3, r0
 8015f44:	461a      	mov	r2, r3
 8015f46:	4621      	mov	r1, r4
 8015f48:	68f8      	ldr	r0, [r7, #12]
 8015f4a:	f7ff fea5 	bl	8015c98 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8015f4e:	bf00      	nop
 8015f50:	3714      	adds	r7, #20
 8015f52:	46bd      	mov	sp, r7
 8015f54:	bd90      	pop	{r4, r7, pc}
 8015f56:	bf00      	nop
 8015f58:	20007b80 	.word	0x20007b80
 8015f5c:	20007b88 	.word	0x20007b88
 8015f60:	20007b8c 	.word	0x20007b8c
 8015f64:	0803d8b8 	.word	0x0803d8b8
 8015f68:	0803d804 	.word	0x0803d804
 8015f6c:	0803d94c 	.word	0x0803d94c
 8015f70:	20007b84 	.word	0x20007b84

08015f74 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8015f74:	b480      	push	{r7}
 8015f76:	b083      	sub	sp, #12
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
 8015f7c:	460b      	mov	r3, r1
 8015f7e:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8015f80:	4b07      	ldr	r3, [pc, #28]	; (8015fa0 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8015f82:	681a      	ldr	r2, [r3, #0]
 8015f84:	4b07      	ldr	r3, [pc, #28]	; (8015fa4 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8015f86:	6819      	ldr	r1, [r3, #0]
 8015f88:	887b      	ldrh	r3, [r7, #2]
 8015f8a:	009b      	lsls	r3, r3, #2
 8015f8c:	440b      	add	r3, r1
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	005b      	lsls	r3, r3, #1
 8015f92:	4413      	add	r3, r2
}
 8015f94:	4618      	mov	r0, r3
 8015f96:	370c      	adds	r7, #12
 8015f98:	46bd      	mov	sp, r7
 8015f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f9e:	4770      	bx	lr
 8015fa0:	20007b88 	.word	0x20007b88
 8015fa4:	20007b8c 	.word	0x20007b8c

08015fa8 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8015fa8:	b480      	push	{r7}
 8015faa:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8015fac:	232d      	movs	r3, #45	; 0x2d
}
 8015fae:	4618      	mov	r0, r3
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb6:	4770      	bx	lr

08015fb8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8015fb8:	b480      	push	{r7}
 8015fba:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8015fbc:	4b02      	ldr	r3, [pc, #8]	; (8015fc8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	46bd      	mov	sp, r7
 8015fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fc6:	4770      	bx	lr
 8015fc8:	20007b90 	.word	0x20007b90

08015fcc <_Z41__static_initialization_and_destruction_0ii>:
    case 3:
        touchgfx_fonts[3] = &(getFont_bahnschrift_20_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b082      	sub	sp, #8
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	6078      	str	r0, [r7, #4]
 8015fd4:	6039      	str	r1, [r7, #0]
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	2b01      	cmp	r3, #1
 8015fda:	d118      	bne.n	801600e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8015fdc:	683b      	ldr	r3, [r7, #0]
 8015fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015fe2:	4293      	cmp	r3, r2
 8015fe4:	d113      	bne.n	801600e <_Z41__static_initialization_and_destruction_0ii+0x42>
    &(getFont_bahnschrift_25_2bpp()),
 8015fe6:	f7f9 fea1 	bl	800fd2c <_Z27getFont_bahnschrift_25_2bppv>
 8015fea:	4603      	mov	r3, r0
};
 8015fec:	4a0a      	ldr	r2, [pc, #40]	; (8016018 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8015fee:	6013      	str	r3, [r2, #0]
    &(getFont_bahnschrift_40_2bpp()),
 8015ff0:	f7f9 fef2 	bl	800fdd8 <_Z27getFont_bahnschrift_40_2bppv>
 8015ff4:	4603      	mov	r3, r0
};
 8015ff6:	4a08      	ldr	r2, [pc, #32]	; (8016018 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8015ff8:	6053      	str	r3, [r2, #4]
    &(getFont_bahnschrift_80_2bpp()),
 8015ffa:	f7f9 ff43 	bl	800fe84 <_Z27getFont_bahnschrift_80_2bppv>
 8015ffe:	4603      	mov	r3, r0
};
 8016000:	4a05      	ldr	r2, [pc, #20]	; (8016018 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8016002:	6093      	str	r3, [r2, #8]
    &(getFont_bahnschrift_20_4bpp())
 8016004:	f7f9 fe3c 	bl	800fc80 <_Z27getFont_bahnschrift_20_4bppv>
 8016008:	4603      	mov	r3, r0
};
 801600a:	4a03      	ldr	r2, [pc, #12]	; (8016018 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 801600c:	60d3      	str	r3, [r2, #12]
} // namespace TypedTextDatabase
 801600e:	bf00      	nop
 8016010:	3708      	adds	r7, #8
 8016012:	46bd      	mov	sp, r7
 8016014:	bd80      	pop	{r7, pc}
 8016016:	bf00      	nop
 8016018:	20007b90 	.word	0x20007b90

0801601c <_GLOBAL__sub_I_touchgfx_fonts>:
 801601c:	b580      	push	{r7, lr}
 801601e:	af00      	add	r7, sp, #0
 8016020:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8016024:	2001      	movs	r0, #1
 8016026:	f7ff ffd1 	bl	8015fcc <_Z41__static_initialization_and_destruction_0ii>
 801602a:	bd80      	pop	{r7, pc}

0801602c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 801602c:	b580      	push	{r7, lr}
 801602e:	b082      	sub	sp, #8
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
 8016034:	4a05      	ldr	r2, [pc, #20]	; (801604c <_ZN19FrontendApplicationD1Ev+0x20>)
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	601a      	str	r2, [r3, #0]
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	4618      	mov	r0, r3
 801603e:	f7fa f96d 	bl	801031c <_ZN23FrontendApplicationBaseD1Ev>
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	4618      	mov	r0, r3
 8016046:	3708      	adds	r7, #8
 8016048:	46bd      	mov	sp, r7
 801604a:	bd80      	pop	{r7, pc}
 801604c:	0802ff60 	.word	0x0802ff60

08016050 <_ZN19FrontendApplicationD0Ev>:
 8016050:	b580      	push	{r7, lr}
 8016052:	b082      	sub	sp, #8
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
 8016058:	6878      	ldr	r0, [r7, #4]
 801605a:	f7ff ffe7 	bl	801602c <_ZN19FrontendApplicationD1Ev>
 801605e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8016062:	6878      	ldr	r0, [r7, #4]
 8016064:	f017 fc04 	bl	802d870 <_ZdlPvj>
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	4618      	mov	r0, r3
 801606c:	3708      	adds	r7, #8
 801606e:	46bd      	mov	sp, r7
 8016070:	bd80      	pop	{r7, pc}

08016072 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8016072:	b580      	push	{r7, lr}
 8016074:	b082      	sub	sp, #8
 8016076:	af00      	add	r7, sp, #0
 8016078:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8016080:	4618      	mov	r0, r3
 8016082:	f001 fa33 	bl	80174ec <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	4618      	mov	r0, r3
 801608a:	f007 ffd1 	bl	801e030 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 801608e:	bf00      	nop
 8016090:	3708      	adds	r7, #8
 8016092:	46bd      	mov	sp, r7
 8016094:	bd80      	pop	{r7, pc}
	...

08016098 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8016098:	b580      	push	{r7, lr}
 801609a:	b084      	sub	sp, #16
 801609c:	af00      	add	r7, sp, #0
 801609e:	60f8      	str	r0, [r7, #12]
 80160a0:	60b9      	str	r1, [r7, #8]
 80160a2:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	687a      	ldr	r2, [r7, #4]
 80160a8:	68b9      	ldr	r1, [r7, #8]
 80160aa:	4618      	mov	r0, r3
 80160ac:	f7fa f986 	bl	80103bc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80160b0:	4a03      	ldr	r2, [pc, #12]	; (80160c0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	601a      	str	r2, [r3, #0]
{

}
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	4618      	mov	r0, r3
 80160ba:	3710      	adds	r7, #16
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd80      	pop	{r7, pc}
 80160c0:	0802ff60 	.word	0x0802ff60

080160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>:
     * @return pointer to the first element in the buffer where the formatted string is
     *         placed.
     *
     * @see snprintf, snprintfFloats
     */
    static UnicodeChar* snprintfFloat(UnicodeChar* dst, uint16_t dstSize, const char* format, const float value)
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b084      	sub	sp, #16
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	60f8      	str	r0, [r7, #12]
 80160cc:	460b      	mov	r3, r1
 80160ce:	607a      	str	r2, [r7, #4]
 80160d0:	ed87 0a00 	vstr	s0, [r7]
 80160d4:	817b      	strh	r3, [r7, #10]
    {
        return snprintfFloats(dst, dstSize, format, &value);
 80160d6:	463b      	mov	r3, r7
 80160d8:	8979      	ldrh	r1, [r7, #10]
 80160da:	687a      	ldr	r2, [r7, #4]
 80160dc:	68f8      	ldr	r0, [r7, #12]
 80160de:	f00b fa2f 	bl	8021540 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>
 80160e2:	4603      	mov	r3, r0
    }
 80160e4:	4618      	mov	r0, r3
 80160e6:	3710      	adds	r7, #16
 80160e8:	46bd      	mov	sp, r7
 80160ea:	bd80      	pop	{r7, pc}

080160ec <_ZN4cellC1Ev>:
#include <touchgfx/Color.hpp>

#include "main.h"
#include "extern.h"

cell::cell() {
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b082      	sub	sp, #8
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	4618      	mov	r0, r3
 80160f8:	f7fb f890 	bl	801121c <_ZN8cellBaseC1Ev>
 80160fc:	4a03      	ldr	r2, [pc, #12]	; (801610c <_ZN4cellC1Ev+0x20>)
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	601a      	str	r2, [r3, #0]

}
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	4618      	mov	r0, r3
 8016106:	3708      	adds	r7, #8
 8016108:	46bd      	mov	sp, r7
 801610a:	bd80      	pop	{r7, pc}
 801610c:	0802ffac 	.word	0x0802ffac

08016110 <_ZN4cell10initializeEv>:

void cell::initialize() {
 8016110:	b580      	push	{r7, lr}
 8016112:	b082      	sub	sp, #8
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
	cellBase::initialize();
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	4618      	mov	r0, r3
 801611c:	f7fe f8fd 	bl	801431a <_ZN8cellBase10initializeEv>
}
 8016120:	bf00      	nop
 8016122:	3708      	adds	r7, #8
 8016124:	46bd      	mov	sp, r7
 8016126:	bd80      	pop	{r7, pc}

08016128 <_ZN4cell9setValuesEh>:

void cell::setValues(uint8_t cellID) {
 8016128:	b580      	push	{r7, lr}
 801612a:	b0d8      	sub	sp, #352	; 0x160
 801612c:	af00      	add	r7, sp, #0
 801612e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016132:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016136:	6018      	str	r0, [r3, #0]
 8016138:	460a      	mov	r2, r1
 801613a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801613e:	f2a3 135d 	subw	r3, r3, #349	; 0x15d
 8016142:	701a      	strb	r2, [r3, #0]

	ModuleDef cell = Current_Status.BATTERY_MODULES[cellID];
 8016144:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016148:	f2a3 135d 	subw	r3, r3, #349	; 0x15d
 801614c:	781a      	ldrb	r2, [r3, #0]
 801614e:	4980      	ldr	r1, [pc, #512]	; (8016350 <_ZN4cell9setValuesEh+0x228>)
 8016150:	4613      	mov	r3, r2
 8016152:	011b      	lsls	r3, r3, #4
 8016154:	4413      	add	r3, r2
 8016156:	009b      	lsls	r3, r3, #2
 8016158:	440b      	add	r3, r1
 801615a:	33a8      	adds	r3, #168	; 0xa8
 801615c:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8016160:	3304      	adds	r3, #4
 8016162:	2244      	movs	r2, #68	; 0x44
 8016164:	4619      	mov	r1, r3
 8016166:	f017 fd29 	bl	802dbbc <memcpy>

	Unicode::UnicodeChar buffer[16];

	touchgfx::colortype idColor = cell.ENABLED ? touchgfx::Color::getColorFromRGB(0, 255, 0) : touchgfx::Color::getColorFromRGB(105,105,105);
 801616a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 801616e:	2b00      	cmp	r3, #0
 8016170:	d01f      	beq.n	80161b2 <_ZN4cell9setValuesEh+0x8a>
 8016172:	2300      	movs	r3, #0
 8016174:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
 8016178:	23ff      	movs	r3, #255	; 0xff
 801617a:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
 801617e:	2300      	movs	r3, #0
 8016180:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
 8016184:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8016188:	041b      	lsls	r3, r3, #16
 801618a:	461a      	mov	r2, r3
 801618c:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8016190:	021b      	lsls	r3, r3, #8
 8016192:	431a      	orrs	r2, r3
 8016194:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8016198:	4313      	orrs	r3, r2
 801619a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801619e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80161a2:	4611      	mov	r1, r2
 80161a4:	4618      	mov	r0, r3
 80161a6:	f7fa fbf7 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 80161aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80161ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80161b0:	e01e      	b.n	80161f0 <_ZN4cell9setValuesEh+0xc8>
 80161b2:	2369      	movs	r3, #105	; 0x69
 80161b4:	f887 315c 	strb.w	r3, [r7, #348]	; 0x15c
 80161b8:	2369      	movs	r3, #105	; 0x69
 80161ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
 80161be:	2369      	movs	r3, #105	; 0x69
 80161c0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 80161c4:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 80161c8:	041b      	lsls	r3, r3, #16
 80161ca:	461a      	mov	r2, r3
 80161cc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80161d0:	021b      	lsls	r3, r3, #8
 80161d2:	431a      	orrs	r2, r3
 80161d4:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
 80161d8:	4313      	orrs	r3, r2
 80161da:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80161de:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80161e2:	4611      	mov	r1, r2
 80161e4:	4618      	mov	r0, r3
 80161e6:	f7fa fbd7 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 80161ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80161ee:	66fb      	str	r3, [r7, #108]	; 0x6c
	touchgfx::colortype valueColor = cell.ENABLED ? touchgfx::Color::getColorFromRGB(255, 255, 255) : touchgfx::Color::getColorFromRGB(105,105,105);
 80161f0:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d01f      	beq.n	8016238 <_ZN4cell9setValuesEh+0x110>
 80161f8:	23ff      	movs	r3, #255	; 0xff
 80161fa:	f887 3159 	strb.w	r3, [r7, #345]	; 0x159
 80161fe:	23ff      	movs	r3, #255	; 0xff
 8016200:	f887 3158 	strb.w	r3, [r7, #344]	; 0x158
 8016204:	23ff      	movs	r3, #255	; 0xff
 8016206:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 801620a:	f897 3159 	ldrb.w	r3, [r7, #345]	; 0x159
 801620e:	041b      	lsls	r3, r3, #16
 8016210:	461a      	mov	r2, r3
 8016212:	f897 3158 	ldrb.w	r3, [r7, #344]	; 0x158
 8016216:	021b      	lsls	r3, r3, #8
 8016218:	431a      	orrs	r2, r3
 801621a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 801621e:	4313      	orrs	r3, r2
 8016220:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8016224:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8016228:	4611      	mov	r1, r2
 801622a:	4618      	mov	r0, r3
 801622c:	f7fa fbb4 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8016230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016234:	66bb      	str	r3, [r7, #104]	; 0x68
 8016236:	e01e      	b.n	8016276 <_ZN4cell9setValuesEh+0x14e>
 8016238:	2369      	movs	r3, #105	; 0x69
 801623a:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
 801623e:	2369      	movs	r3, #105	; 0x69
 8016240:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
 8016244:	2369      	movs	r3, #105	; 0x69
 8016246:	f887 3154 	strb.w	r3, [r7, #340]	; 0x154
 801624a:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 801624e:	041b      	lsls	r3, r3, #16
 8016250:	461a      	mov	r2, r3
 8016252:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 8016256:	021b      	lsls	r3, r3, #8
 8016258:	431a      	orrs	r2, r3
 801625a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 801625e:	4313      	orrs	r3, r2
 8016260:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8016264:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8016268:	4611      	mov	r1, r2
 801626a:	4618      	mov	r0, r3
 801626c:	f7fa fb94 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 8016270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016274:	66bb      	str	r3, [r7, #104]	; 0x68
	touchgfx::colortype maxColor = cell.ENABLED ? touchgfx::Color::getColorFromRGB(0,128,0) : touchgfx::Color::getColorFromRGB(255, 255, 255);
 8016276:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 801627a:	2b00      	cmp	r3, #0
 801627c:	d01f      	beq.n	80162be <_ZN4cell9setValuesEh+0x196>
 801627e:	2300      	movs	r3, #0
 8016280:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
 8016284:	2380      	movs	r3, #128	; 0x80
 8016286:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
 801628a:	2300      	movs	r3, #0
 801628c:	f887 3151 	strb.w	r3, [r7, #337]	; 0x151
 8016290:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8016294:	041b      	lsls	r3, r3, #16
 8016296:	461a      	mov	r2, r3
 8016298:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
 801629c:	021b      	lsls	r3, r3, #8
 801629e:	431a      	orrs	r2, r3
 80162a0:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
 80162a4:	4313      	orrs	r3, r2
 80162a6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80162aa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80162ae:	4611      	mov	r1, r2
 80162b0:	4618      	mov	r0, r3
 80162b2:	f7fa fb71 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 80162b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80162ba:	667b      	str	r3, [r7, #100]	; 0x64
 80162bc:	e01e      	b.n	80162fc <_ZN4cell9setValuesEh+0x1d4>
 80162be:	23ff      	movs	r3, #255	; 0xff
 80162c0:	f887 3150 	strb.w	r3, [r7, #336]	; 0x150
 80162c4:	23ff      	movs	r3, #255	; 0xff
 80162c6:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
 80162ca:	23ff      	movs	r3, #255	; 0xff
 80162cc:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
 80162d0:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
 80162d4:	041b      	lsls	r3, r3, #16
 80162d6:	461a      	mov	r2, r3
 80162d8:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 80162dc:	021b      	lsls	r3, r3, #8
 80162de:	431a      	orrs	r2, r3
 80162e0:	f897 314e 	ldrb.w	r3, [r7, #334]	; 0x14e
 80162e4:	4313      	orrs	r3, r2
 80162e6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80162ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80162ee:	4611      	mov	r1, r2
 80162f0:	4618      	mov	r0, r3
 80162f2:	f7fa fb51 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 80162f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80162fa:	667b      	str	r3, [r7, #100]	; 0x64
	touchgfx::colortype minColor = cell.ENABLED ? touchgfx::Color::getColorFromRGB(255,0,0) : touchgfx::Color::getColorFromRGB(255, 255, 255);
 80162fc:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8016300:	2b00      	cmp	r3, #0
 8016302:	d027      	beq.n	8016354 <_ZN4cell9setValuesEh+0x22c>
 8016304:	23ff      	movs	r3, #255	; 0xff
 8016306:	f887 314d 	strb.w	r3, [r7, #333]	; 0x14d
 801630a:	2300      	movs	r3, #0
 801630c:	f887 314c 	strb.w	r3, [r7, #332]	; 0x14c
 8016310:	2300      	movs	r3, #0
 8016312:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
 8016316:	f897 314d 	ldrb.w	r3, [r7, #333]	; 0x14d
 801631a:	041b      	lsls	r3, r3, #16
 801631c:	461a      	mov	r2, r3
 801631e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8016322:	021b      	lsls	r3, r3, #8
 8016324:	431a      	orrs	r2, r3
 8016326:	f897 314b 	ldrb.w	r3, [r7, #331]	; 0x14b
 801632a:	4313      	orrs	r3, r2
 801632c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8016330:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8016334:	4611      	mov	r1, r2
 8016336:	4618      	mov	r0, r3
 8016338:	f7fa fb2e 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 801633c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8016340:	461a      	mov	r2, r3
 8016342:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016346:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801634a:	601a      	str	r2, [r3, #0]
 801634c:	e026      	b.n	801639c <_ZN4cell9setValuesEh+0x274>
 801634e:	bf00      	nop
 8016350:	200103b4 	.word	0x200103b4
 8016354:	23ff      	movs	r3, #255	; 0xff
 8016356:	f887 314a 	strb.w	r3, [r7, #330]	; 0x14a
 801635a:	23ff      	movs	r3, #255	; 0xff
 801635c:	f887 3149 	strb.w	r3, [r7, #329]	; 0x149
 8016360:	23ff      	movs	r3, #255	; 0xff
 8016362:	f887 3148 	strb.w	r3, [r7, #328]	; 0x148
 8016366:	f897 314a 	ldrb.w	r3, [r7, #330]	; 0x14a
 801636a:	041b      	lsls	r3, r3, #16
 801636c:	461a      	mov	r2, r3
 801636e:	f897 3149 	ldrb.w	r3, [r7, #329]	; 0x149
 8016372:	021b      	lsls	r3, r3, #8
 8016374:	431a      	orrs	r2, r3
 8016376:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 801637a:	4313      	orrs	r3, r2
 801637c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8016380:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8016384:	4611      	mov	r1, r2
 8016386:	4618      	mov	r0, r3
 8016388:	f7fa fb06 	bl	8010998 <_ZN8touchgfx9colortypeC1Em>
 801638c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8016390:	461a      	mov	r2, r3
 8016392:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016396:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801639a:	601a      	str	r2, [r3, #0]

	id.invalidate();
 801639c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80163a0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 80163aa:	4618      	mov	r0, r3
 80163ac:	f008 ff1f 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "BMS %.0f", (float) (cellID + 1));
 80163b0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80163b4:	f2a3 135d 	subw	r3, r3, #349	; 0x15d
 80163b8:	781b      	ldrb	r3, [r3, #0]
 80163ba:	3301      	adds	r3, #1
 80163bc:	ee07 3a90 	vmov	s15, r3
 80163c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80163c4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80163c8:	eeb0 0a67 	vmov.f32	s0, s15
 80163cc:	4aa9      	ldr	r2, [pc, #676]	; (8016674 <_ZN4cell9setValuesEh+0x54c>)
 80163ce:	2110      	movs	r1, #16
 80163d0:	4618      	mov	r0, r3
 80163d2:	f7ff fe77 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(idBuffer, 16, "%s", buffer);
 80163d6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80163da:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80163de:	681b      	ldr	r3, [r3, #0]
 80163e0:	f203 70e4 	addw	r0, r3, #2020	; 0x7e4
 80163e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80163e8:	4aa3      	ldr	r2, [pc, #652]	; (8016678 <_ZN4cell9setValuesEh+0x550>)
 80163ea:	2110      	movs	r1, #16
 80163ec:	f00a feec 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	id.resizeToCurrentTextWithAlignment();
 80163f0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80163f4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 80163fe:	4618      	mov	r0, r3
 8016400:	f005 fa42 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	id.setColor(idColor);
 8016404:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016408:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8016412:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8016416:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801641a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801641e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016420:	601a      	str	r2, [r3, #0]
        color = newColor;
 8016422:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8016426:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 801642a:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 801642e:	6812      	ldr	r2, [r2, #0]
 8016430:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8016432:	bf00      	nop
	id.invalidate();
 8016434:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016438:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8016442:	4618      	mov	r0, r3
 8016444:	f008 fed3 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>

	total.invalidate();
 8016448:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801644c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8016456:	4618      	mov	r0, r3
 8016458:	f008 fec9 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f V", (float) (cell.VOLTAGE / 1000.0));
 801645c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8016460:	4618      	mov	r0, r3
 8016462:	f7ea f867 	bl	8000534 <__aeabi_i2d>
 8016466:	f04f 0200 	mov.w	r2, #0
 801646a:	4b84      	ldr	r3, [pc, #528]	; (801667c <_ZN4cell9setValuesEh+0x554>)
 801646c:	f7ea f9f6 	bl	800085c <__aeabi_ddiv>
 8016470:	4602      	mov	r2, r0
 8016472:	460b      	mov	r3, r1
 8016474:	4610      	mov	r0, r2
 8016476:	4619      	mov	r1, r3
 8016478:	f7ea faf8 	bl	8000a6c <__aeabi_d2f>
 801647c:	4602      	mov	r2, r0
 801647e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8016482:	ee00 2a10 	vmov	s0, r2
 8016486:	4a7e      	ldr	r2, [pc, #504]	; (8016680 <_ZN4cell9setValuesEh+0x558>)
 8016488:	2110      	movs	r1, #16
 801648a:	4618      	mov	r0, r3
 801648c:	f7ff fe1a 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(totalBuffer, 16, "%s", buffer);
 8016490:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016494:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	f503 60ff 	add.w	r0, r3, #2040	; 0x7f8
 801649e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80164a2:	4a75      	ldr	r2, [pc, #468]	; (8016678 <_ZN4cell9setValuesEh+0x550>)
 80164a4:	2110      	movs	r1, #16
 80164a6:	f00a fe8f 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	total.resizeToCurrentTextWithAlignment();
 80164aa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80164ae:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 80164b8:	4618      	mov	r0, r3
 80164ba:	f005 f9e5 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	total.setColor(idColor);
 80164be:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80164c2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 80164cc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80164d0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80164d4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80164d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80164da:	601a      	str	r2, [r3, #0]
        color = newColor;
 80164dc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80164e0:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80164e4:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 80164e8:	6812      	ldr	r2, [r2, #0]
 80164ea:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80164ec:	bf00      	nop
	total.invalidate();
 80164ee:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80164f2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 80164fc:	4618      	mov	r0, r3
 80164fe:	f008 fe76 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	//0
	cell_0_voltage.invalidate();
 8016502:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016506:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	332c      	adds	r3, #44	; 0x2c
 801650e:	4618      	mov	r0, r3
 8016510:	f008 fe6d 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f V", (float) (cell.CELLS[0] / 1000.0));
 8016514:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8016518:	4618      	mov	r0, r3
 801651a:	f7ea f80b 	bl	8000534 <__aeabi_i2d>
 801651e:	f04f 0200 	mov.w	r2, #0
 8016522:	4b56      	ldr	r3, [pc, #344]	; (801667c <_ZN4cell9setValuesEh+0x554>)
 8016524:	f7ea f99a 	bl	800085c <__aeabi_ddiv>
 8016528:	4602      	mov	r2, r0
 801652a:	460b      	mov	r3, r1
 801652c:	4610      	mov	r0, r2
 801652e:	4619      	mov	r1, r3
 8016530:	f7ea fa9c 	bl	8000a6c <__aeabi_d2f>
 8016534:	4602      	mov	r2, r0
 8016536:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801653a:	ee00 2a10 	vmov	s0, r2
 801653e:	4a50      	ldr	r2, [pc, #320]	; (8016680 <_ZN4cell9setValuesEh+0x558>)
 8016540:	2110      	movs	r1, #16
 8016542:	4618      	mov	r0, r3
 8016544:	f7ff fdbe 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(cell_0_voltageBuffer, 16, "%s", buffer);
 8016548:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801654c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	f503 60cd 	add.w	r0, r3, #1640	; 0x668
 8016556:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801655a:	4a47      	ldr	r2, [pc, #284]	; (8016678 <_ZN4cell9setValuesEh+0x550>)
 801655c:	2110      	movs	r1, #16
 801655e:	f00a fe33 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	cell_0_voltage.resizeToCurrentTextWithAlignment();
 8016562:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016566:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	332c      	adds	r3, #44	; 0x2c
 801656e:	4618      	mov	r0, r3
 8016570:	f005 f98a 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	cell_0_voltage.setColor(cell.HIGHEST_CELL_ID == 0 ? maxColor : cell.LOWEST_CELL_ID == 0 ? minColor : valueColor);
 8016574:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016578:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8016582:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8016586:	2b00      	cmp	r3, #0
 8016588:	d102      	bne.n	8016590 <_ZN4cell9setValuesEh+0x468>
 801658a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801658e:	e008      	b.n	80165a2 <_ZN4cell9setValuesEh+0x47a>
 8016590:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8016594:	2b00      	cmp	r3, #0
 8016596:	d102      	bne.n	801659e <_ZN4cell9setValuesEh+0x476>
 8016598:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801659c:	e001      	b.n	80165a2 <_ZN4cell9setValuesEh+0x47a>
 801659e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80165a2:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80165a6:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80165aa:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	6013      	str	r3, [r2, #0]
        color = newColor;
 80165b2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80165b6:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80165ba:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 80165be:	6812      	ldr	r2, [r2, #0]
 80165c0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80165c2:	bf00      	nop
	cell_0_voltage.invalidate();
 80165c4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80165c8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	332c      	adds	r3, #44	; 0x2c
 80165d0:	4618      	mov	r0, r3
 80165d2:	f008 fe0c 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	//1
	cell_1_voltage.invalidate();
 80165d6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80165da:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	3378      	adds	r3, #120	; 0x78
 80165e2:	4618      	mov	r0, r3
 80165e4:	f008 fe03 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
			(float) (cell.CELLS[1] / 1000.0));
 80165e8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80165ec:	4618      	mov	r0, r3
 80165ee:	f7e9 ffa1 	bl	8000534 <__aeabi_i2d>
 80165f2:	f04f 0200 	mov.w	r2, #0
 80165f6:	4b21      	ldr	r3, [pc, #132]	; (801667c <_ZN4cell9setValuesEh+0x554>)
 80165f8:	f7ea f930 	bl	800085c <__aeabi_ddiv>
 80165fc:	4602      	mov	r2, r0
 80165fe:	460b      	mov	r3, r1
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
 8016600:	4610      	mov	r0, r2
 8016602:	4619      	mov	r1, r3
 8016604:	f7ea fa32 	bl	8000a6c <__aeabi_d2f>
 8016608:	4602      	mov	r2, r0
 801660a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801660e:	ee00 2a10 	vmov	s0, r2
 8016612:	4a1b      	ldr	r2, [pc, #108]	; (8016680 <_ZN4cell9setValuesEh+0x558>)
 8016614:	2110      	movs	r1, #16
 8016616:	4618      	mov	r0, r3
 8016618:	f7ff fd54 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(cell_1_voltageBuffer, 16, "%s", buffer);
 801661c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016620:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	f203 607c 	addw	r0, r3, #1660	; 0x67c
 801662a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801662e:	4a12      	ldr	r2, [pc, #72]	; (8016678 <_ZN4cell9setValuesEh+0x550>)
 8016630:	2110      	movs	r1, #16
 8016632:	f00a fdc9 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	cell_1_voltage.resizeToCurrentTextWithAlignment();
 8016636:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801663a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	3378      	adds	r3, #120	; 0x78
 8016642:	4618      	mov	r0, r3
 8016644:	f005 f920 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	cell_1_voltage.setColor(cell.HIGHEST_CELL_ID == 1 ? maxColor : cell.LOWEST_CELL_ID == 1 ? minColor : valueColor);
 8016648:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801664c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8016656:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 801665a:	2b01      	cmp	r3, #1
 801665c:	d102      	bne.n	8016664 <_ZN4cell9setValuesEh+0x53c>
 801665e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016662:	e011      	b.n	8016688 <_ZN4cell9setValuesEh+0x560>
 8016664:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8016668:	2b01      	cmp	r3, #1
 801666a:	d10b      	bne.n	8016684 <_ZN4cell9setValuesEh+0x55c>
 801666c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016670:	e00a      	b.n	8016688 <_ZN4cell9setValuesEh+0x560>
 8016672:	bf00      	nop
 8016674:	0802f4cc 	.word	0x0802f4cc
 8016678:	0802f4d8 	.word	0x0802f4d8
 801667c:	408f4000 	.word	0x408f4000
 8016680:	0802f4dc 	.word	0x0802f4dc
 8016684:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8016688:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 801668c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8016690:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	6013      	str	r3, [r2, #0]
        color = newColor;
 8016698:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801669c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80166a0:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 80166a4:	6812      	ldr	r2, [r2, #0]
 80166a6:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80166a8:	bf00      	nop
	cell_1_voltage.invalidate();
 80166aa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80166ae:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	3378      	adds	r3, #120	; 0x78
 80166b6:	4618      	mov	r0, r3
 80166b8:	f008 fd99 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	//2
	cell_2_voltage.invalidate();
 80166bc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80166c0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	33c4      	adds	r3, #196	; 0xc4
 80166c8:	4618      	mov	r0, r3
 80166ca:	f008 fd90 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
			(float) (cell.CELLS[2] / 1000.0));
 80166ce:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80166d2:	4618      	mov	r0, r3
 80166d4:	f7e9 ff2e 	bl	8000534 <__aeabi_i2d>
 80166d8:	f04f 0200 	mov.w	r2, #0
 80166dc:	4bc1      	ldr	r3, [pc, #772]	; (80169e4 <_ZN4cell9setValuesEh+0x8bc>)
 80166de:	f7ea f8bd 	bl	800085c <__aeabi_ddiv>
 80166e2:	4602      	mov	r2, r0
 80166e4:	460b      	mov	r3, r1
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
 80166e6:	4610      	mov	r0, r2
 80166e8:	4619      	mov	r1, r3
 80166ea:	f7ea f9bf 	bl	8000a6c <__aeabi_d2f>
 80166ee:	4602      	mov	r2, r0
 80166f0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80166f4:	ee00 2a10 	vmov	s0, r2
 80166f8:	4abb      	ldr	r2, [pc, #748]	; (80169e8 <_ZN4cell9setValuesEh+0x8c0>)
 80166fa:	2110      	movs	r1, #16
 80166fc:	4618      	mov	r0, r3
 80166fe:	f7ff fce1 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(cell_2_voltageBuffer, 16, "%s", buffer);
 8016702:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016706:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	f503 60d2 	add.w	r0, r3, #1680	; 0x690
 8016710:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8016714:	4ab5      	ldr	r2, [pc, #724]	; (80169ec <_ZN4cell9setValuesEh+0x8c4>)
 8016716:	2110      	movs	r1, #16
 8016718:	f00a fd56 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	cell_2_voltage.resizeToCurrentTextWithAlignment();
 801671c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016720:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	33c4      	adds	r3, #196	; 0xc4
 8016728:	4618      	mov	r0, r3
 801672a:	f005 f8ad 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	cell_2_voltage.setColor(cell.HIGHEST_CELL_ID == 2 ? maxColor : cell.LOWEST_CELL_ID == 2 ? minColor : valueColor);
 801672e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016732:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 801673c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8016740:	2b02      	cmp	r3, #2
 8016742:	d102      	bne.n	801674a <_ZN4cell9setValuesEh+0x622>
 8016744:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016748:	e008      	b.n	801675c <_ZN4cell9setValuesEh+0x634>
 801674a:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 801674e:	2b02      	cmp	r3, #2
 8016750:	d102      	bne.n	8016758 <_ZN4cell9setValuesEh+0x630>
 8016752:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016756:	e001      	b.n	801675c <_ZN4cell9setValuesEh+0x634>
 8016758:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801675c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8016760:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8016764:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	6013      	str	r3, [r2, #0]
        color = newColor;
 801676c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8016770:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8016774:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8016778:	6812      	ldr	r2, [r2, #0]
 801677a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801677c:	bf00      	nop
	cell_2_voltage.invalidate();
 801677e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016782:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	33c4      	adds	r3, #196	; 0xc4
 801678a:	4618      	mov	r0, r3
 801678c:	f008 fd2f 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	//3
	cell_3_voltage.invalidate();
 8016790:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016794:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 801679e:	4618      	mov	r0, r3
 80167a0:	f008 fd25 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
			(float) (cell.CELLS[4] / 1000.0));
 80167a4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80167a8:	4618      	mov	r0, r3
 80167aa:	f7e9 fec3 	bl	8000534 <__aeabi_i2d>
 80167ae:	f04f 0200 	mov.w	r2, #0
 80167b2:	4b8c      	ldr	r3, [pc, #560]	; (80169e4 <_ZN4cell9setValuesEh+0x8bc>)
 80167b4:	f7ea f852 	bl	800085c <__aeabi_ddiv>
 80167b8:	4602      	mov	r2, r0
 80167ba:	460b      	mov	r3, r1
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
 80167bc:	4610      	mov	r0, r2
 80167be:	4619      	mov	r1, r3
 80167c0:	f7ea f954 	bl	8000a6c <__aeabi_d2f>
 80167c4:	4602      	mov	r2, r0
 80167c6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80167ca:	ee00 2a10 	vmov	s0, r2
 80167ce:	4a86      	ldr	r2, [pc, #536]	; (80169e8 <_ZN4cell9setValuesEh+0x8c0>)
 80167d0:	2110      	movs	r1, #16
 80167d2:	4618      	mov	r0, r3
 80167d4:	f7ff fc76 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(cell_3_voltageBuffer, 16, "%s", buffer);
 80167d8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80167dc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	f203 60a4 	addw	r0, r3, #1700	; 0x6a4
 80167e6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80167ea:	4a80      	ldr	r2, [pc, #512]	; (80169ec <_ZN4cell9setValuesEh+0x8c4>)
 80167ec:	2110      	movs	r1, #16
 80167ee:	f00a fceb 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	cell_3_voltage.resizeToCurrentTextWithAlignment();
 80167f2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80167f6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8016800:	4618      	mov	r0, r3
 8016802:	f005 f841 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	cell_3_voltage.setColor(cell.HIGHEST_CELL_ID == 3 ? maxColor : cell.LOWEST_CELL_ID == 3 ? minColor : valueColor);
 8016806:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801680a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801680e:	681b      	ldr	r3, [r3, #0]
 8016810:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8016814:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8016818:	2b03      	cmp	r3, #3
 801681a:	d102      	bne.n	8016822 <_ZN4cell9setValuesEh+0x6fa>
 801681c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016820:	e008      	b.n	8016834 <_ZN4cell9setValuesEh+0x70c>
 8016822:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8016826:	2b03      	cmp	r3, #3
 8016828:	d102      	bne.n	8016830 <_ZN4cell9setValuesEh+0x708>
 801682a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801682e:	e001      	b.n	8016834 <_ZN4cell9setValuesEh+0x70c>
 8016830:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8016834:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8016838:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 801683c:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	6013      	str	r3, [r2, #0]
        color = newColor;
 8016844:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016848:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 801684c:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 8016850:	6812      	ldr	r2, [r2, #0]
 8016852:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8016854:	bf00      	nop
	cell_3_voltage.invalidate();
 8016856:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801685a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8016864:	4618      	mov	r0, r3
 8016866:	f008 fcc2 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>

	//4
	cell_4_voltage.invalidate();
 801686a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801686e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8016878:	4618      	mov	r0, r3
 801687a:	f008 fcb8 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
			(float) (cell.CELLS[4] / 1000.0));
 801687e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8016882:	4618      	mov	r0, r3
 8016884:	f7e9 fe56 	bl	8000534 <__aeabi_i2d>
 8016888:	f04f 0200 	mov.w	r2, #0
 801688c:	4b55      	ldr	r3, [pc, #340]	; (80169e4 <_ZN4cell9setValuesEh+0x8bc>)
 801688e:	f7e9 ffe5 	bl	800085c <__aeabi_ddiv>
 8016892:	4602      	mov	r2, r0
 8016894:	460b      	mov	r3, r1
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
 8016896:	4610      	mov	r0, r2
 8016898:	4619      	mov	r1, r3
 801689a:	f7ea f8e7 	bl	8000a6c <__aeabi_d2f>
 801689e:	4602      	mov	r2, r0
 80168a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80168a4:	ee00 2a10 	vmov	s0, r2
 80168a8:	4a4f      	ldr	r2, [pc, #316]	; (80169e8 <_ZN4cell9setValuesEh+0x8c0>)
 80168aa:	2110      	movs	r1, #16
 80168ac:	4618      	mov	r0, r3
 80168ae:	f7ff fc09 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(cell_4_voltageBuffer, 16, "%s", buffer);
 80168b2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80168b6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	f503 60d7 	add.w	r0, r3, #1720	; 0x6b8
 80168c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80168c4:	4a49      	ldr	r2, [pc, #292]	; (80169ec <_ZN4cell9setValuesEh+0x8c4>)
 80168c6:	2110      	movs	r1, #16
 80168c8:	f00a fc7e 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	cell_4_voltage.resizeToCurrentTextWithAlignment();
 80168cc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80168d0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80168da:	4618      	mov	r0, r3
 80168dc:	f004 ffd4 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	cell_4_voltage.setColor(cell.HIGHEST_CELL_ID == 4 ? maxColor : cell.LOWEST_CELL_ID == 4 ? minColor : valueColor);
 80168e0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80168e4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	f503 72ae 	add.w	r2, r3, #348	; 0x15c
 80168ee:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80168f2:	2b04      	cmp	r3, #4
 80168f4:	d102      	bne.n	80168fc <_ZN4cell9setValuesEh+0x7d4>
 80168f6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80168fa:	e008      	b.n	801690e <_ZN4cell9setValuesEh+0x7e6>
 80168fc:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8016900:	2b04      	cmp	r3, #4
 8016902:	d102      	bne.n	801690a <_ZN4cell9setValuesEh+0x7e2>
 8016904:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016908:	e001      	b.n	801690e <_ZN4cell9setValuesEh+0x7e6>
 801690a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801690e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8016912:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8016916:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	6013      	str	r3, [r2, #0]
        color = newColor;
 801691e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8016922:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8016926:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 801692a:	6812      	ldr	r2, [r2, #0]
 801692c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801692e:	bf00      	nop
	cell_4_voltage.invalidate();
 8016930:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016934:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 801693e:	4618      	mov	r0, r3
 8016940:	f008 fc55 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>

	//5
	cell_5_voltage.invalidate();
 8016944:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016948:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016952:	4618      	mov	r0, r3
 8016954:	f008 fc4b 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
			(float) (cell.CELLS[5] / 1000.0));
 8016958:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801695c:	4618      	mov	r0, r3
 801695e:	f7e9 fde9 	bl	8000534 <__aeabi_i2d>
 8016962:	f04f 0200 	mov.w	r2, #0
 8016966:	4b1f      	ldr	r3, [pc, #124]	; (80169e4 <_ZN4cell9setValuesEh+0x8bc>)
 8016968:	f7e9 ff78 	bl	800085c <__aeabi_ddiv>
 801696c:	4602      	mov	r2, r0
 801696e:	460b      	mov	r3, r1
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
 8016970:	4610      	mov	r0, r2
 8016972:	4619      	mov	r1, r3
 8016974:	f7ea f87a 	bl	8000a6c <__aeabi_d2f>
 8016978:	4602      	mov	r2, r0
 801697a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801697e:	ee00 2a10 	vmov	s0, r2
 8016982:	4a19      	ldr	r2, [pc, #100]	; (80169e8 <_ZN4cell9setValuesEh+0x8c0>)
 8016984:	2110      	movs	r1, #16
 8016986:	4618      	mov	r0, r3
 8016988:	f7ff fb9c 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(cell_5_voltageBuffer, 16, "%s", buffer);
 801698c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016990:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	f203 60cc 	addw	r0, r3, #1740	; 0x6cc
 801699a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801699e:	4a13      	ldr	r2, [pc, #76]	; (80169ec <_ZN4cell9setValuesEh+0x8c4>)
 80169a0:	2110      	movs	r1, #16
 80169a2:	f00a fc11 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	cell_5_voltage.resizeToCurrentTextWithAlignment();
 80169a6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80169aa:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80169b4:	4618      	mov	r0, r3
 80169b6:	f004 ff67 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	cell_5_voltage.setColor(cell.HIGHEST_CELL_ID == 5 ? maxColor : cell.LOWEST_CELL_ID == 5 ? minColor : valueColor);
 80169ba:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80169be:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 80169c8:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80169cc:	2b05      	cmp	r3, #5
 80169ce:	d102      	bne.n	80169d6 <_ZN4cell9setValuesEh+0x8ae>
 80169d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80169d4:	e00e      	b.n	80169f4 <_ZN4cell9setValuesEh+0x8cc>
 80169d6:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80169da:	2b05      	cmp	r3, #5
 80169dc:	d108      	bne.n	80169f0 <_ZN4cell9setValuesEh+0x8c8>
 80169de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80169e2:	e007      	b.n	80169f4 <_ZN4cell9setValuesEh+0x8cc>
 80169e4:	408f4000 	.word	0x408f4000
 80169e8:	0802f4dc 	.word	0x0802f4dc
 80169ec:	0802f4d8 	.word	0x0802f4d8
 80169f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80169f4:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 80169f8:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80169fc:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	6013      	str	r3, [r2, #0]
        color = newColor;
 8016a04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8016a08:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8016a0c:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8016a10:	6812      	ldr	r2, [r2, #0]
 8016a12:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8016a14:	bf00      	nop
	cell_5_voltage.invalidate();
 8016a16:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016a1a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8016a24:	4618      	mov	r0, r3
 8016a26:	f008 fbe2 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>

	//6
	cell_6_voltage.invalidate();
 8016a2a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016a2e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8016a38:	4618      	mov	r0, r3
 8016a3a:	f008 fbd8 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
			(float) (cell.CELLS[6] / 1000.0));
 8016a3e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8016a42:	4618      	mov	r0, r3
 8016a44:	f7e9 fd76 	bl	8000534 <__aeabi_i2d>
 8016a48:	f04f 0200 	mov.w	r2, #0
 8016a4c:	4bc2      	ldr	r3, [pc, #776]	; (8016d58 <_ZN4cell9setValuesEh+0xc30>)
 8016a4e:	f7e9 ff05 	bl	800085c <__aeabi_ddiv>
 8016a52:	4602      	mov	r2, r0
 8016a54:	460b      	mov	r3, r1
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
 8016a56:	4610      	mov	r0, r2
 8016a58:	4619      	mov	r1, r3
 8016a5a:	f7ea f807 	bl	8000a6c <__aeabi_d2f>
 8016a5e:	4602      	mov	r2, r0
 8016a60:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8016a64:	ee00 2a10 	vmov	s0, r2
 8016a68:	4abc      	ldr	r2, [pc, #752]	; (8016d5c <_ZN4cell9setValuesEh+0xc34>)
 8016a6a:	2110      	movs	r1, #16
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	f7ff fb29 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(cell_6_voltageBuffer, 16, "%s", buffer);
 8016a72:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016a76:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	f503 60dc 	add.w	r0, r3, #1760	; 0x6e0
 8016a80:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8016a84:	4ab6      	ldr	r2, [pc, #728]	; (8016d60 <_ZN4cell9setValuesEh+0xc38>)
 8016a86:	2110      	movs	r1, #16
 8016a88:	f00a fb9e 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	cell_6_voltage.resizeToCurrentTextWithAlignment();
 8016a8c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016a90:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	f004 fef4 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	cell_6_voltage.setColor(cell.HIGHEST_CELL_ID == 6 ? maxColor : cell.LOWEST_CELL_ID == 6 ? minColor : valueColor);
 8016aa0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016aa4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8016aae:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8016ab2:	2b06      	cmp	r3, #6
 8016ab4:	d102      	bne.n	8016abc <_ZN4cell9setValuesEh+0x994>
 8016ab6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016aba:	e008      	b.n	8016ace <_ZN4cell9setValuesEh+0x9a6>
 8016abc:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8016ac0:	2b06      	cmp	r3, #6
 8016ac2:	d102      	bne.n	8016aca <_ZN4cell9setValuesEh+0x9a2>
 8016ac4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016ac8:	e001      	b.n	8016ace <_ZN4cell9setValuesEh+0x9a6>
 8016aca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8016ace:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8016ad2:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8016ad6:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	6013      	str	r3, [r2, #0]
        color = newColor;
 8016ade:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8016ae2:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8016ae6:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8016aea:	6812      	ldr	r2, [r2, #0]
 8016aec:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8016aee:	bf00      	nop
	cell_6_voltage.invalidate();
 8016af0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016af4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8016afe:	4618      	mov	r0, r3
 8016b00:	f008 fb75 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>

	//7
	cell_7_voltage.invalidate();
 8016b04:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016b08:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8016b12:	4618      	mov	r0, r3
 8016b14:	f008 fb6b 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
			(float) (cell.CELLS[7] / 1000.0));
 8016b18:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	f7e9 fd09 	bl	8000534 <__aeabi_i2d>
 8016b22:	f04f 0200 	mov.w	r2, #0
 8016b26:	4b8c      	ldr	r3, [pc, #560]	; (8016d58 <_ZN4cell9setValuesEh+0xc30>)
 8016b28:	f7e9 fe98 	bl	800085c <__aeabi_ddiv>
 8016b2c:	4602      	mov	r2, r0
 8016b2e:	460b      	mov	r3, r1
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
 8016b30:	4610      	mov	r0, r2
 8016b32:	4619      	mov	r1, r3
 8016b34:	f7e9 ff9a 	bl	8000a6c <__aeabi_d2f>
 8016b38:	4602      	mov	r2, r0
 8016b3a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8016b3e:	ee00 2a10 	vmov	s0, r2
 8016b42:	4a86      	ldr	r2, [pc, #536]	; (8016d5c <_ZN4cell9setValuesEh+0xc34>)
 8016b44:	2110      	movs	r1, #16
 8016b46:	4618      	mov	r0, r3
 8016b48:	f7ff fabc 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(cell_7_voltageBuffer, 16, "%s", buffer);
 8016b4c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016b50:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	f203 60f4 	addw	r0, r3, #1780	; 0x6f4
 8016b5a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8016b5e:	4a80      	ldr	r2, [pc, #512]	; (8016d60 <_ZN4cell9setValuesEh+0xc38>)
 8016b60:	2110      	movs	r1, #16
 8016b62:	f00a fb31 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	cell_7_voltage.resizeToCurrentTextWithAlignment();
 8016b66:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016b6a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8016b74:	4618      	mov	r0, r3
 8016b76:	f004 fe87 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	cell_7_voltage.setColor(cell.HIGHEST_CELL_ID == 7 ? maxColor : cell.LOWEST_CELL_ID == 7 ? minColor : valueColor);
 8016b7a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016b7e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	f503 7210 	add.w	r2, r3, #576	; 0x240
 8016b88:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8016b8c:	2b07      	cmp	r3, #7
 8016b8e:	d102      	bne.n	8016b96 <_ZN4cell9setValuesEh+0xa6e>
 8016b90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016b94:	e008      	b.n	8016ba8 <_ZN4cell9setValuesEh+0xa80>
 8016b96:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8016b9a:	2b07      	cmp	r3, #7
 8016b9c:	d102      	bne.n	8016ba4 <_ZN4cell9setValuesEh+0xa7c>
 8016b9e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016ba2:	e001      	b.n	8016ba8 <_ZN4cell9setValuesEh+0xa80>
 8016ba4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8016ba8:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8016bac:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8016bb0:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	6013      	str	r3, [r2, #0]
        color = newColor;
 8016bb8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8016bbc:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8016bc0:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8016bc4:	6812      	ldr	r2, [r2, #0]
 8016bc6:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8016bc8:	bf00      	nop
	cell_7_voltage.invalidate();
 8016bca:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016bce:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8016bd8:	4618      	mov	r0, r3
 8016bda:	f008 fb08 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>

	//8
	cell_8_voltage.invalidate();
 8016bde:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016be2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8016bec:	4618      	mov	r0, r3
 8016bee:	f008 fafe 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
			(float) (cell.CELLS[8] / 1000.0));
 8016bf2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	f7e9 fc9c 	bl	8000534 <__aeabi_i2d>
 8016bfc:	f04f 0200 	mov.w	r2, #0
 8016c00:	4b55      	ldr	r3, [pc, #340]	; (8016d58 <_ZN4cell9setValuesEh+0xc30>)
 8016c02:	f7e9 fe2b 	bl	800085c <__aeabi_ddiv>
 8016c06:	4602      	mov	r2, r0
 8016c08:	460b      	mov	r3, r1
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
 8016c0a:	4610      	mov	r0, r2
 8016c0c:	4619      	mov	r1, r3
 8016c0e:	f7e9 ff2d 	bl	8000a6c <__aeabi_d2f>
 8016c12:	4602      	mov	r2, r0
 8016c14:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8016c18:	ee00 2a10 	vmov	s0, r2
 8016c1c:	4a4f      	ldr	r2, [pc, #316]	; (8016d5c <_ZN4cell9setValuesEh+0xc34>)
 8016c1e:	2110      	movs	r1, #16
 8016c20:	4618      	mov	r0, r3
 8016c22:	f7ff fa4f 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(cell_8_voltageBuffer, 16, "%s", buffer);
 8016c26:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016c2a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	f503 60e1 	add.w	r0, r3, #1800	; 0x708
 8016c34:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8016c38:	4a49      	ldr	r2, [pc, #292]	; (8016d60 <_ZN4cell9setValuesEh+0xc38>)
 8016c3a:	2110      	movs	r1, #16
 8016c3c:	f00a fac4 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	cell_8_voltage.resizeToCurrentTextWithAlignment();
 8016c40:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016c44:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f004 fe1a 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	cell_8_voltage.setColor(cell.HIGHEST_CELL_ID == 8 ? maxColor : cell.LOWEST_CELL_ID == 8 ? minColor : valueColor);
 8016c54:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016c58:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	f503 7223 	add.w	r2, r3, #652	; 0x28c
 8016c62:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8016c66:	2b08      	cmp	r3, #8
 8016c68:	d102      	bne.n	8016c70 <_ZN4cell9setValuesEh+0xb48>
 8016c6a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016c6e:	e008      	b.n	8016c82 <_ZN4cell9setValuesEh+0xb5a>
 8016c70:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8016c74:	2b08      	cmp	r3, #8
 8016c76:	d102      	bne.n	8016c7e <_ZN4cell9setValuesEh+0xb56>
 8016c78:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016c7c:	e001      	b.n	8016c82 <_ZN4cell9setValuesEh+0xb5a>
 8016c7e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8016c82:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8016c86:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8016c8a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	6013      	str	r3, [r2, #0]
        color = newColor;
 8016c92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8016c96:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8016c9a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8016c9e:	6812      	ldr	r2, [r2, #0]
 8016ca0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8016ca2:	bf00      	nop
	cell_8_voltage.invalidate();
 8016ca4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016ca8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	f008 fa9b 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>

	//9
	cell_9_voltage.invalidate();
 8016cb8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016cbc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	f008 fa91 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
			(float) (cell.CELLS[9] / 1000.0));
 8016ccc:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f7e9 fc2f 	bl	8000534 <__aeabi_i2d>
 8016cd6:	f04f 0200 	mov.w	r2, #0
 8016cda:	4b1f      	ldr	r3, [pc, #124]	; (8016d58 <_ZN4cell9setValuesEh+0xc30>)
 8016cdc:	f7e9 fdbe 	bl	800085c <__aeabi_ddiv>
 8016ce0:	4602      	mov	r2, r0
 8016ce2:	460b      	mov	r3, r1
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
 8016ce4:	4610      	mov	r0, r2
 8016ce6:	4619      	mov	r1, r3
 8016ce8:	f7e9 fec0 	bl	8000a6c <__aeabi_d2f>
 8016cec:	4602      	mov	r2, r0
 8016cee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8016cf2:	ee00 2a10 	vmov	s0, r2
 8016cf6:	4a19      	ldr	r2, [pc, #100]	; (8016d5c <_ZN4cell9setValuesEh+0xc34>)
 8016cf8:	2110      	movs	r1, #16
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	f7ff f9e2 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(cell_9_voltageBuffer, 16, "%s", buffer);
 8016d00:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016d04:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	f203 701c 	addw	r0, r3, #1820	; 0x71c
 8016d0e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8016d12:	4a13      	ldr	r2, [pc, #76]	; (8016d60 <_ZN4cell9setValuesEh+0xc38>)
 8016d14:	2110      	movs	r1, #16
 8016d16:	f00a fa57 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	cell_9_voltage.resizeToCurrentTextWithAlignment();
 8016d1a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016d1e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8016d28:	4618      	mov	r0, r3
 8016d2a:	f004 fdad 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	cell_9_voltage.setColor(cell.HIGHEST_CELL_ID == 9 ? maxColor : cell.LOWEST_CELL_ID == 8 ? minColor : valueColor);
 8016d2e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016d32:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	f503 7236 	add.w	r2, r3, #728	; 0x2d8
 8016d3c:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8016d40:	2b09      	cmp	r3, #9
 8016d42:	d102      	bne.n	8016d4a <_ZN4cell9setValuesEh+0xc22>
 8016d44:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016d48:	e00e      	b.n	8016d68 <_ZN4cell9setValuesEh+0xc40>
 8016d4a:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8016d4e:	2b08      	cmp	r3, #8
 8016d50:	d108      	bne.n	8016d64 <_ZN4cell9setValuesEh+0xc3c>
 8016d52:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016d56:	e007      	b.n	8016d68 <_ZN4cell9setValuesEh+0xc40>
 8016d58:	408f4000 	.word	0x408f4000
 8016d5c:	0802f4dc 	.word	0x0802f4dc
 8016d60:	0802f4d8 	.word	0x0802f4d8
 8016d64:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8016d68:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8016d6c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8016d70:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	6013      	str	r3, [r2, #0]
        color = newColor;
 8016d78:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8016d7c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8016d80:	f5a2 7294 	sub.w	r2, r2, #296	; 0x128
 8016d84:	6812      	ldr	r2, [r2, #0]
 8016d86:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8016d88:	bf00      	nop
	cell_9_voltage.invalidate();
 8016d8a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016d8e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	f503 7336 	add.w	r3, r3, #728	; 0x2d8
 8016d98:	4618      	mov	r0, r3
 8016d9a:	f008 fa28 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>

	//10
	cell_10_voltage.invalidate();
 8016d9e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016da2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8016dac:	4618      	mov	r0, r3
 8016dae:	f008 fa1e 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
			(float) (cell.CELLS[10] / 1000.0));
 8016db2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8016db6:	4618      	mov	r0, r3
 8016db8:	f7e9 fbbc 	bl	8000534 <__aeabi_i2d>
 8016dbc:	f04f 0200 	mov.w	r2, #0
 8016dc0:	4bc2      	ldr	r3, [pc, #776]	; (80170cc <_ZN4cell9setValuesEh+0xfa4>)
 8016dc2:	f7e9 fd4b 	bl	800085c <__aeabi_ddiv>
 8016dc6:	4602      	mov	r2, r0
 8016dc8:	460b      	mov	r3, r1
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
 8016dca:	4610      	mov	r0, r2
 8016dcc:	4619      	mov	r1, r3
 8016dce:	f7e9 fe4d 	bl	8000a6c <__aeabi_d2f>
 8016dd2:	4602      	mov	r2, r0
 8016dd4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8016dd8:	ee00 2a10 	vmov	s0, r2
 8016ddc:	4abc      	ldr	r2, [pc, #752]	; (80170d0 <_ZN4cell9setValuesEh+0xfa8>)
 8016dde:	2110      	movs	r1, #16
 8016de0:	4618      	mov	r0, r3
 8016de2:	f7ff f96f 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(cell_10_voltageBuffer, 16, "%s", buffer);
 8016de6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016dea:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	f503 60e6 	add.w	r0, r3, #1840	; 0x730
 8016df4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8016df8:	4ab6      	ldr	r2, [pc, #728]	; (80170d4 <_ZN4cell9setValuesEh+0xfac>)
 8016dfa:	2110      	movs	r1, #16
 8016dfc:	f00a f9e4 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	cell_10_voltage.resizeToCurrentTextWithAlignment();
 8016e00:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016e04:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8016e0e:	4618      	mov	r0, r3
 8016e10:	f004 fd3a 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	cell_10_voltage.setColor(cell.HIGHEST_CELL_ID == 10 ? maxColor : cell.LOWEST_CELL_ID == 10 ? minColor : valueColor);
 8016e14:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016e18:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016e1c:	681b      	ldr	r3, [r3, #0]
 8016e1e:	f503 7249 	add.w	r2, r3, #804	; 0x324
 8016e22:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8016e26:	2b0a      	cmp	r3, #10
 8016e28:	d102      	bne.n	8016e30 <_ZN4cell9setValuesEh+0xd08>
 8016e2a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016e2e:	e008      	b.n	8016e42 <_ZN4cell9setValuesEh+0xd1a>
 8016e30:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8016e34:	2b0a      	cmp	r3, #10
 8016e36:	d102      	bne.n	8016e3e <_ZN4cell9setValuesEh+0xd16>
 8016e38:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016e3c:	e001      	b.n	8016e42 <_ZN4cell9setValuesEh+0xd1a>
 8016e3e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8016e42:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 8016e46:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8016e4a:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	6013      	str	r3, [r2, #0]
        color = newColor;
 8016e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8016e56:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8016e5a:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 8016e5e:	6812      	ldr	r2, [r2, #0]
 8016e60:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8016e62:	bf00      	nop
	cell_10_voltage.invalidate();
 8016e64:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016e68:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8016e72:	4618      	mov	r0, r3
 8016e74:	f008 f9bb 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>

	//11
	cell_11_voltage.invalidate();
 8016e78:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016e7c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8016e86:	4618      	mov	r0, r3
 8016e88:	f008 f9b1 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
			(float) (cell.CELLS[11] / 1000.0));
 8016e8c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8016e90:	4618      	mov	r0, r3
 8016e92:	f7e9 fb4f 	bl	8000534 <__aeabi_i2d>
 8016e96:	f04f 0200 	mov.w	r2, #0
 8016e9a:	4b8c      	ldr	r3, [pc, #560]	; (80170cc <_ZN4cell9setValuesEh+0xfa4>)
 8016e9c:	f7e9 fcde 	bl	800085c <__aeabi_ddiv>
 8016ea0:	4602      	mov	r2, r0
 8016ea2:	460b      	mov	r3, r1
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
 8016ea4:	4610      	mov	r0, r2
 8016ea6:	4619      	mov	r1, r3
 8016ea8:	f7e9 fde0 	bl	8000a6c <__aeabi_d2f>
 8016eac:	4602      	mov	r2, r0
 8016eae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8016eb2:	ee00 2a10 	vmov	s0, r2
 8016eb6:	4a86      	ldr	r2, [pc, #536]	; (80170d0 <_ZN4cell9setValuesEh+0xfa8>)
 8016eb8:	2110      	movs	r1, #16
 8016eba:	4618      	mov	r0, r3
 8016ebc:	f7ff f902 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(cell_11_voltageBuffer, 16, "%s", buffer);
 8016ec0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016ec4:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	f203 7044 	addw	r0, r3, #1860	; 0x744
 8016ece:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8016ed2:	4a80      	ldr	r2, [pc, #512]	; (80170d4 <_ZN4cell9setValuesEh+0xfac>)
 8016ed4:	2110      	movs	r1, #16
 8016ed6:	f00a f977 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	cell_11_voltage.resizeToCurrentTextWithAlignment();
 8016eda:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016ede:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8016ee8:	4618      	mov	r0, r3
 8016eea:	f004 fccd 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	cell_11_voltage.setColor(cell.HIGHEST_CELL_ID == 11 ? maxColor : cell.LOWEST_CELL_ID == 11 ? minColor : valueColor);
 8016eee:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016ef2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	f503 725c 	add.w	r2, r3, #880	; 0x370
 8016efc:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8016f00:	2b0b      	cmp	r3, #11
 8016f02:	d102      	bne.n	8016f0a <_ZN4cell9setValuesEh+0xde2>
 8016f04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016f08:	e008      	b.n	8016f1c <_ZN4cell9setValuesEh+0xdf4>
 8016f0a:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8016f0e:	2b0b      	cmp	r3, #11
 8016f10:	d102      	bne.n	8016f18 <_ZN4cell9setValuesEh+0xdf0>
 8016f12:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016f16:	e001      	b.n	8016f1c <_ZN4cell9setValuesEh+0xdf4>
 8016f18:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8016f1c:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8016f20:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8016f24:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	6013      	str	r3, [r2, #0]
        color = newColor;
 8016f2c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8016f30:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8016f34:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8016f38:	6812      	ldr	r2, [r2, #0]
 8016f3a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8016f3c:	bf00      	nop
	cell_11_voltage.invalidate();
 8016f3e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016f42:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	f503 735c 	add.w	r3, r3, #880	; 0x370
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	f008 f94e 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>

	//12
	cell_12_voltage.invalidate();
 8016f52:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016f56:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8016f60:	4618      	mov	r0, r3
 8016f62:	f008 f944 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
			(float) (cell.CELLS[12] / 1000.0));
 8016f66:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	f7e9 fae2 	bl	8000534 <__aeabi_i2d>
 8016f70:	f04f 0200 	mov.w	r2, #0
 8016f74:	4b55      	ldr	r3, [pc, #340]	; (80170cc <_ZN4cell9setValuesEh+0xfa4>)
 8016f76:	f7e9 fc71 	bl	800085c <__aeabi_ddiv>
 8016f7a:	4602      	mov	r2, r0
 8016f7c:	460b      	mov	r3, r1
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
 8016f7e:	4610      	mov	r0, r2
 8016f80:	4619      	mov	r1, r3
 8016f82:	f7e9 fd73 	bl	8000a6c <__aeabi_d2f>
 8016f86:	4602      	mov	r2, r0
 8016f88:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8016f8c:	ee00 2a10 	vmov	s0, r2
 8016f90:	4a4f      	ldr	r2, [pc, #316]	; (80170d0 <_ZN4cell9setValuesEh+0xfa8>)
 8016f92:	2110      	movs	r1, #16
 8016f94:	4618      	mov	r0, r3
 8016f96:	f7ff f895 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(cell_12_voltageBuffer, 16, "%s", buffer);
 8016f9a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016f9e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	f503 60eb 	add.w	r0, r3, #1880	; 0x758
 8016fa8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8016fac:	4a49      	ldr	r2, [pc, #292]	; (80170d4 <_ZN4cell9setValuesEh+0xfac>)
 8016fae:	2110      	movs	r1, #16
 8016fb0:	f00a f90a 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	cell_12_voltage.resizeToCurrentTextWithAlignment();
 8016fb4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016fb8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	f004 fc60 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	cell_12_voltage.setColor(cell.HIGHEST_CELL_ID == 12 ? maxColor : cell.LOWEST_CELL_ID == 12 ? minColor : valueColor);
 8016fc8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8016fcc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	f503 726f 	add.w	r2, r3, #956	; 0x3bc
 8016fd6:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8016fda:	2b0c      	cmp	r3, #12
 8016fdc:	d102      	bne.n	8016fe4 <_ZN4cell9setValuesEh+0xebc>
 8016fde:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016fe2:	e008      	b.n	8016ff6 <_ZN4cell9setValuesEh+0xece>
 8016fe4:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8016fe8:	2b0c      	cmp	r3, #12
 8016fea:	d102      	bne.n	8016ff2 <_ZN4cell9setValuesEh+0xeca>
 8016fec:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016ff0:	e001      	b.n	8016ff6 <_ZN4cell9setValuesEh+0xece>
 8016ff2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8016ff6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8016ffa:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8016ffe:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	6013      	str	r3, [r2, #0]
        color = newColor;
 8017006:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801700a:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 801700e:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8017012:	6812      	ldr	r2, [r2, #0]
 8017014:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8017016:	bf00      	nop
	cell_12_voltage.invalidate();
 8017018:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801701c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8017026:	4618      	mov	r0, r3
 8017028:	f008 f8e1 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>

	//13
	cell_13_voltage.invalidate();
 801702c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8017030:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 801703a:	4618      	mov	r0, r3
 801703c:	f008 f8d7 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
			(float) (cell.CELLS[13] / 1000.0));
 8017040:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8017044:	4618      	mov	r0, r3
 8017046:	f7e9 fa75 	bl	8000534 <__aeabi_i2d>
 801704a:	f04f 0200 	mov.w	r2, #0
 801704e:	4b1f      	ldr	r3, [pc, #124]	; (80170cc <_ZN4cell9setValuesEh+0xfa4>)
 8017050:	f7e9 fc04 	bl	800085c <__aeabi_ddiv>
 8017054:	4602      	mov	r2, r0
 8017056:	460b      	mov	r3, r1
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
 8017058:	4610      	mov	r0, r2
 801705a:	4619      	mov	r1, r3
 801705c:	f7e9 fd06 	bl	8000a6c <__aeabi_d2f>
 8017060:	4602      	mov	r2, r0
 8017062:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8017066:	ee00 2a10 	vmov	s0, r2
 801706a:	4a19      	ldr	r2, [pc, #100]	; (80170d0 <_ZN4cell9setValuesEh+0xfa8>)
 801706c:	2110      	movs	r1, #16
 801706e:	4618      	mov	r0, r3
 8017070:	f7ff f828 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(cell_13_voltageBuffer, 16, "%s", buffer);
 8017074:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8017078:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	f203 706c 	addw	r0, r3, #1900	; 0x76c
 8017082:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8017086:	4a13      	ldr	r2, [pc, #76]	; (80170d4 <_ZN4cell9setValuesEh+0xfac>)
 8017088:	2110      	movs	r1, #16
 801708a:	f00a f89d 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	cell_13_voltage.resizeToCurrentTextWithAlignment();
 801708e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8017092:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 801709c:	4618      	mov	r0, r3
 801709e:	f004 fbf3 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	cell_13_voltage.setColor(cell.HIGHEST_CELL_ID == 13 ? maxColor : cell.LOWEST_CELL_ID == 13 ? minColor : valueColor);
 80170a2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80170a6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	f503 6281 	add.w	r2, r3, #1032	; 0x408
 80170b0:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 80170b4:	2b0d      	cmp	r3, #13
 80170b6:	d102      	bne.n	80170be <_ZN4cell9setValuesEh+0xf96>
 80170b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80170bc:	e00e      	b.n	80170dc <_ZN4cell9setValuesEh+0xfb4>
 80170be:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80170c2:	2b0d      	cmp	r3, #13
 80170c4:	d108      	bne.n	80170d8 <_ZN4cell9setValuesEh+0xfb0>
 80170c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80170ca:	e007      	b.n	80170dc <_ZN4cell9setValuesEh+0xfb4>
 80170cc:	408f4000 	.word	0x408f4000
 80170d0:	0802f4dc 	.word	0x0802f4dc
 80170d4:	0802f4d8 	.word	0x0802f4d8
 80170d8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80170dc:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 80170e0:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80170e4:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	6013      	str	r3, [r2, #0]
        color = newColor;
 80170ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80170f0:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80170f4:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80170f8:	6812      	ldr	r2, [r2, #0]
 80170fa:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80170fc:	bf00      	nop
	cell_13_voltage.invalidate();
 80170fe:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8017102:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 801710c:	4618      	mov	r0, r3
 801710e:	f008 f86e 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>

	//14
	cell_14_voltage.invalidate();
 8017112:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8017116:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8017120:	4618      	mov	r0, r3
 8017122:	f008 f864 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
			(float) (cell.CELLS[14] / 1000.0));
 8017126:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 801712a:	4618      	mov	r0, r3
 801712c:	f7e9 fa02 	bl	8000534 <__aeabi_i2d>
 8017130:	f04f 0200 	mov.w	r2, #0
 8017134:	4b55      	ldr	r3, [pc, #340]	; (801728c <_ZN4cell9setValuesEh+0x1164>)
 8017136:	f7e9 fb91 	bl	800085c <__aeabi_ddiv>
 801713a:	4602      	mov	r2, r0
 801713c:	460b      	mov	r3, r1
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
 801713e:	4610      	mov	r0, r2
 8017140:	4619      	mov	r1, r3
 8017142:	f7e9 fc93 	bl	8000a6c <__aeabi_d2f>
 8017146:	4602      	mov	r2, r0
 8017148:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801714c:	ee00 2a10 	vmov	s0, r2
 8017150:	4a4f      	ldr	r2, [pc, #316]	; (8017290 <_ZN4cell9setValuesEh+0x1168>)
 8017152:	2110      	movs	r1, #16
 8017154:	4618      	mov	r0, r3
 8017156:	f7fe ffb5 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(cell_14_voltageBuffer, 16, "%s", buffer);
 801715a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801715e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	f203 7094 	addw	r0, r3, #1940	; 0x794
 8017168:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801716c:	4a49      	ldr	r2, [pc, #292]	; (8017294 <_ZN4cell9setValuesEh+0x116c>)
 801716e:	2110      	movs	r1, #16
 8017170:	f00a f82a 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	cell_14_voltage.resizeToCurrentTextWithAlignment();
 8017174:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8017178:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 8017182:	4618      	mov	r0, r3
 8017184:	f004 fb80 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	cell_14_voltage.setColor(cell.HIGHEST_CELL_ID == 14 ? maxColor : cell.LOWEST_CELL_ID == 14 ? minColor : valueColor);
 8017188:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801718c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	f503 6294 	add.w	r2, r3, #1184	; 0x4a0
 8017196:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 801719a:	2b0e      	cmp	r3, #14
 801719c:	d102      	bne.n	80171a4 <_ZN4cell9setValuesEh+0x107c>
 801719e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80171a2:	e008      	b.n	80171b6 <_ZN4cell9setValuesEh+0x108e>
 80171a4:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 80171a8:	2b0e      	cmp	r3, #14
 80171aa:	d102      	bne.n	80171b2 <_ZN4cell9setValuesEh+0x108a>
 80171ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80171b0:	e001      	b.n	80171b6 <_ZN4cell9setValuesEh+0x108e>
 80171b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80171b6:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80171ba:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80171be:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	6013      	str	r3, [r2, #0]
        color = newColor;
 80171c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80171ca:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80171ce:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 80171d2:	6812      	ldr	r2, [r2, #0]
 80171d4:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80171d6:	bf00      	nop
	cell_14_voltage.invalidate();
 80171d8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80171dc:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 80171e6:	4618      	mov	r0, r3
 80171e8:	f008 f801 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>

	//15
	cell_15_voltage.invalidate();
 80171ec:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80171f0:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	f203 4354 	addw	r3, r3, #1108	; 0x454
 80171fa:	4618      	mov	r0, r3
 80171fc:	f007 fff7 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
			(float) (cell.CELLS[15] / 1000.0));
 8017200:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8017204:	4618      	mov	r0, r3
 8017206:	f7e9 f995 	bl	8000534 <__aeabi_i2d>
 801720a:	f04f 0200 	mov.w	r2, #0
 801720e:	4b1f      	ldr	r3, [pc, #124]	; (801728c <_ZN4cell9setValuesEh+0x1164>)
 8017210:	f7e9 fb24 	bl	800085c <__aeabi_ddiv>
 8017214:	4602      	mov	r2, r0
 8017216:	460b      	mov	r3, r1
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
 8017218:	4610      	mov	r0, r2
 801721a:	4619      	mov	r1, r3
 801721c:	f7e9 fc26 	bl	8000a6c <__aeabi_d2f>
 8017220:	4602      	mov	r2, r0
 8017222:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8017226:	ee00 2a10 	vmov	s0, r2
 801722a:	4a19      	ldr	r2, [pc, #100]	; (8017290 <_ZN4cell9setValuesEh+0x1168>)
 801722c:	2110      	movs	r1, #16
 801722e:	4618      	mov	r0, r3
 8017230:	f7fe ff48 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(cell_15_voltageBuffer, 16, "%s", buffer);
 8017234:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8017238:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	f503 60f0 	add.w	r0, r3, #1920	; 0x780
 8017242:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8017246:	4a13      	ldr	r2, [pc, #76]	; (8017294 <_ZN4cell9setValuesEh+0x116c>)
 8017248:	2110      	movs	r1, #16
 801724a:	f009 ffbd 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	cell_15_voltage.resizeToCurrentTextWithAlignment();
 801724e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8017252:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	f203 4354 	addw	r3, r3, #1108	; 0x454
 801725c:	4618      	mov	r0, r3
 801725e:	f004 fb13 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	cell_15_voltage.setColor(cell.HIGHEST_CELL_ID == 15 ? maxColor : cell.LOWEST_CELL_ID == 15 ? minColor : valueColor);
 8017262:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8017266:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	f203 4254 	addw	r2, r3, #1108	; 0x454
 8017270:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 8017274:	2b0f      	cmp	r3, #15
 8017276:	d102      	bne.n	801727e <_ZN4cell9setValuesEh+0x1156>
 8017278:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801727c:	e00e      	b.n	801729c <_ZN4cell9setValuesEh+0x1174>
 801727e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8017282:	2b0f      	cmp	r3, #15
 8017284:	d108      	bne.n	8017298 <_ZN4cell9setValuesEh+0x1170>
 8017286:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801728a:	e007      	b.n	801729c <_ZN4cell9setValuesEh+0x1174>
 801728c:	408f4000 	.word	0x408f4000
 8017290:	0802f4dc 	.word	0x0802f4dc
 8017294:	0802f4d8 	.word	0x0802f4d8
 8017298:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801729c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80172a0:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80172a4:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80172a8:	681b      	ldr	r3, [r3, #0]
 80172aa:	6013      	str	r3, [r2, #0]
        color = newColor;
 80172ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80172b0:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80172b4:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80172b8:	6812      	ldr	r2, [r2, #0]
 80172ba:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80172bc:	bf00      	nop
	cell_15_voltage.invalidate();
 80172be:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80172c2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	f203 4354 	addw	r3, r3, #1108	; 0x454
 80172cc:	4618      	mov	r0, r3
 80172ce:	f007 ff8e 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>

	//temp 0
	temp_0.invalidate();
 80172d2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80172d6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 80172e0:	4618      	mov	r0, r3
 80172e2:	f007 ff84 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f °C",
			(float) (cell.TEMPS[0]));
 80172e6:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
	Unicode::snprintfFloat(buffer, 16, "%.1f °C",
 80172ea:	ee07 3a90 	vmov	s15, r3
 80172ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80172f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80172f6:	eeb0 0a67 	vmov.f32	s0, s15
 80172fa:	4a73      	ldr	r2, [pc, #460]	; (80174c8 <_ZN4cell9setValuesEh+0x13a0>)
 80172fc:	2110      	movs	r1, #16
 80172fe:	4618      	mov	r0, r3
 8017300:	f7fe fee0 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(temp_0Buffer, 16, "%s", buffer);
 8017304:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8017308:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	f503 60f5 	add.w	r0, r3, #1960	; 0x7a8
 8017312:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8017316:	4a6d      	ldr	r2, [pc, #436]	; (80174cc <_ZN4cell9setValuesEh+0x13a4>)
 8017318:	2110      	movs	r1, #16
 801731a:	f009 ff55 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	temp_0.resizeToCurrentTextWithAlignment();
 801731e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8017322:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 801732c:	4618      	mov	r0, r3
 801732e:	f004 faab 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	temp_0.setColor(valueColor);
 8017332:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8017336:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8017340:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8017344:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8017348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801734c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801734e:	601a      	str	r2, [r3, #0]
        color = newColor;
 8017350:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8017354:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8017358:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 801735c:	6812      	ldr	r2, [r2, #0]
 801735e:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8017360:	bf00      	nop
	temp_0.invalidate();
 8017362:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8017366:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	f203 43ec 	addw	r3, r3, #1260	; 0x4ec
 8017370:	4618      	mov	r0, r3
 8017372:	f007 ff3c 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>

	//temp 1
	temp_1.invalidate();
 8017376:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801737a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8017384:	4618      	mov	r0, r3
 8017386:	f007 ff32 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f °C",
			(float) (cell.TEMPS[1]));
 801738a:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
	Unicode::snprintfFloat(buffer, 16, "%.1f °C",
 801738e:	ee07 3a90 	vmov	s15, r3
 8017392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017396:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801739a:	eeb0 0a67 	vmov.f32	s0, s15
 801739e:	4a4a      	ldr	r2, [pc, #296]	; (80174c8 <_ZN4cell9setValuesEh+0x13a0>)
 80173a0:	2110      	movs	r1, #16
 80173a2:	4618      	mov	r0, r3
 80173a4:	f7fe fe8e 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(temp_1Buffer, 16, "%s", buffer);
 80173a8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80173ac:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	f203 70bc 	addw	r0, r3, #1980	; 0x7bc
 80173b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80173ba:	4a44      	ldr	r2, [pc, #272]	; (80174cc <_ZN4cell9setValuesEh+0x13a4>)
 80173bc:	2110      	movs	r1, #16
 80173be:	f009 ff03 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	temp_1.resizeToCurrentTextWithAlignment();
 80173c2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80173c6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 80173d0:	4618      	mov	r0, r3
 80173d2:	f004 fa59 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	temp_1.setColor(valueColor);
 80173d6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80173da:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 80173e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80173e8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80173ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80173f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80173f2:	601a      	str	r2, [r3, #0]
        color = newColor;
 80173f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80173f8:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80173fc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8017400:	6812      	ldr	r2, [r2, #0]
 8017402:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8017404:	bf00      	nop
	temp_1.invalidate();
 8017406:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801740a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 8017414:	4618      	mov	r0, r3
 8017416:	f007 feea 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>

	//temp 2
	temp_2.invalidate();
 801741a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801741e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	f203 5384 	addw	r3, r3, #1412	; 0x584
 8017428:	4618      	mov	r0, r3
 801742a:	f007 fee0 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.1f °C",
			(float) (cell.TEMPS[2]));
 801742e:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
	Unicode::snprintfFloat(buffer, 16, "%.1f °C",
 8017432:	ee07 3a90 	vmov	s15, r3
 8017436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801743a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801743e:	eeb0 0a67 	vmov.f32	s0, s15
 8017442:	4a21      	ldr	r2, [pc, #132]	; (80174c8 <_ZN4cell9setValuesEh+0x13a0>)
 8017444:	2110      	movs	r1, #16
 8017446:	4618      	mov	r0, r3
 8017448:	f7fe fe3c 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(temp_2Buffer, 16, "%s", buffer);
 801744c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8017450:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	f503 60fa 	add.w	r0, r3, #2000	; 0x7d0
 801745a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801745e:	4a1b      	ldr	r2, [pc, #108]	; (80174cc <_ZN4cell9setValuesEh+0x13a4>)
 8017460:	2110      	movs	r1, #16
 8017462:	f009 feb1 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	temp_2.resizeToCurrentTextWithAlignment();
 8017466:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801746a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	f203 5384 	addw	r3, r3, #1412	; 0x584
 8017474:	4618      	mov	r0, r3
 8017476:	f004 fa07 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	temp_2.setColor(valueColor);
 801747a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 801747e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	f203 5384 	addw	r3, r3, #1412	; 0x584
 8017488:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801748c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8017490:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8017494:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017496:	601a      	str	r2, [r3, #0]
        color = newColor;
 8017498:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801749c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80174a0:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80174a4:	6812      	ldr	r2, [r2, #0]
 80174a6:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80174a8:	bf00      	nop
	temp_2.invalidate();
 80174aa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80174ae:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80174b2:	681b      	ldr	r3, [r3, #0]
 80174b4:	f203 5384 	addw	r3, r3, #1412	; 0x584
 80174b8:	4618      	mov	r0, r3
 80174ba:	f007 fe98 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>

}
 80174be:	bf00      	nop
 80174c0:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80174c4:	46bd      	mov	sp, r7
 80174c6:	bd80      	pop	{r7, pc}
 80174c8:	0802f4e4 	.word	0x0802f4e4
 80174cc:	0802f4d8 	.word	0x0802f4d8

080174d0 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80174d0:	b480      	push	{r7}
 80174d2:	b083      	sub	sp, #12
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	6078      	str	r0, [r7, #4]
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	2200      	movs	r2, #0
 80174dc:	601a      	str	r2, [r3, #0]
{

}
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	4618      	mov	r0, r3
 80174e2:	370c      	adds	r7, #12
 80174e4:	46bd      	mov	sp, r7
 80174e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ea:	4770      	bx	lr

080174ec <_ZN5Model4tickEv>:

void Model::tick()
{
 80174ec:	b480      	push	{r7}
 80174ee:	b083      	sub	sp, #12
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	6078      	str	r0, [r7, #4]

}
 80174f4:	bf00      	nop
 80174f6:	370c      	adds	r7, #12
 80174f8:	46bd      	mov	sp, r7
 80174fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174fe:	4770      	bx	lr

08017500 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8017500:	b480      	push	{r7}
 8017502:	b083      	sub	sp, #12
 8017504:	af00      	add	r7, sp, #0
 8017506:	6078      	str	r0, [r7, #4]
    {
    }
 8017508:	bf00      	nop
 801750a:	370c      	adds	r7, #12
 801750c:	46bd      	mov	sp, r7
 801750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017512:	4770      	bx	lr

08017514 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8017514:	b480      	push	{r7}
 8017516:	b083      	sub	sp, #12
 8017518:	af00      	add	r7, sp, #0
 801751a:	6078      	str	r0, [r7, #4]
    {
    }
 801751c:	bf00      	nop
 801751e:	370c      	adds	r7, #12
 8017520:	46bd      	mov	sp, r7
 8017522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017526:	4770      	bx	lr

08017528 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8017528:	b480      	push	{r7}
 801752a:	b083      	sub	sp, #12
 801752c:	af00      	add	r7, sp, #0
 801752e:	6078      	str	r0, [r7, #4]
    {
 8017530:	4a04      	ldr	r2, [pc, #16]	; (8017544 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	601a      	str	r2, [r3, #0]
    }
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	4618      	mov	r0, r3
 801753a:	370c      	adds	r7, #12
 801753c:	46bd      	mov	sp, r7
 801753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017542:	4770      	bx	lr
 8017544:	0803007c 	.word	0x0803007c

08017548 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8017548:	b580      	push	{r7, lr}
 801754a:	b082      	sub	sp, #8
 801754c:	af00      	add	r7, sp, #0
 801754e:	6078      	str	r0, [r7, #4]
    }
 8017550:	6878      	ldr	r0, [r7, #4]
 8017552:	f7ff ffe9 	bl	8017528 <_ZN8touchgfx9PresenterD1Ev>
 8017556:	2104      	movs	r1, #4
 8017558:	6878      	ldr	r0, [r7, #4]
 801755a:	f016 f989 	bl	802d870 <_ZdlPvj>
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	4618      	mov	r0, r3
 8017562:	3708      	adds	r7, #8
 8017564:	46bd      	mov	sp, r7
 8017566:	bd80      	pop	{r7, pc}

08017568 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8017568:	b480      	push	{r7}
 801756a:	b083      	sub	sp, #12
 801756c:	af00      	add	r7, sp, #0
 801756e:	6078      	str	r0, [r7, #4]
    {
 8017570:	4a04      	ldr	r2, [pc, #16]	; (8017584 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	601a      	str	r2, [r3, #0]
    }
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	4618      	mov	r0, r3
 801757a:	370c      	adds	r7, #12
 801757c:	46bd      	mov	sp, r7
 801757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017582:	4770      	bx	lr
 8017584:	0803007c 	.word	0x0803007c

08017588 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8017588:	b480      	push	{r7}
 801758a:	b083      	sub	sp, #12
 801758c:	af00      	add	r7, sp, #0
 801758e:	6078      	str	r0, [r7, #4]
 8017590:	4a06      	ldr	r2, [pc, #24]	; (80175ac <_ZN13ModelListenerC1Ev+0x24>)
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	601a      	str	r2, [r3, #0]
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	2200      	movs	r2, #0
 801759a:	605a      	str	r2, [r3, #4]
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	4618      	mov	r0, r3
 80175a0:	370c      	adds	r7, #12
 80175a2:	46bd      	mov	sp, r7
 80175a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175a8:	4770      	bx	lr
 80175aa:	bf00      	nop
 80175ac:	0803006c 	.word	0x0803006c

080175b0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80175b0:	b480      	push	{r7}
 80175b2:	b083      	sub	sp, #12
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	6078      	str	r0, [r7, #4]
 80175b8:	4a04      	ldr	r2, [pc, #16]	; (80175cc <_ZN13ModelListenerD1Ev+0x1c>)
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	601a      	str	r2, [r3, #0]
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	4618      	mov	r0, r3
 80175c2:	370c      	adds	r7, #12
 80175c4:	46bd      	mov	sp, r7
 80175c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ca:	4770      	bx	lr
 80175cc:	0803006c 	.word	0x0803006c

080175d0 <_ZN13ModelListenerD0Ev>:
 80175d0:	b580      	push	{r7, lr}
 80175d2:	b082      	sub	sp, #8
 80175d4:	af00      	add	r7, sp, #0
 80175d6:	6078      	str	r0, [r7, #4]
 80175d8:	6878      	ldr	r0, [r7, #4]
 80175da:	f7ff ffe9 	bl	80175b0 <_ZN13ModelListenerD1Ev>
 80175de:	2108      	movs	r1, #8
 80175e0:	6878      	ldr	r0, [r7, #4]
 80175e2:	f016 f945 	bl	802d870 <_ZdlPvj>
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	4618      	mov	r0, r3
 80175ea:	3708      	adds	r7, #8
 80175ec:	46bd      	mov	sp, r7
 80175ee:	bd80      	pop	{r7, pc}

080175f0 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b082      	sub	sp, #8
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]
 80175f8:	4a09      	ldr	r2, [pc, #36]	; (8017620 <_ZN16Screen2PresenterD1Ev+0x30>)
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	601a      	str	r2, [r3, #0]
 80175fe:	4a09      	ldr	r2, [pc, #36]	; (8017624 <_ZN16Screen2PresenterD1Ev+0x34>)
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	605a      	str	r2, [r3, #4]
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	3304      	adds	r3, #4
 8017608:	4618      	mov	r0, r3
 801760a:	f7ff ffd1 	bl	80175b0 <_ZN13ModelListenerD1Ev>
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	4618      	mov	r0, r3
 8017612:	f7ff ff89 	bl	8017528 <_ZN8touchgfx9PresenterD1Ev>
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	4618      	mov	r0, r3
 801761a:	3708      	adds	r7, #8
 801761c:	46bd      	mov	sp, r7
 801761e:	bd80      	pop	{r7, pc}
 8017620:	08030044 	.word	0x08030044
 8017624:	0803005c 	.word	0x0803005c

08017628 <_ZThn4_N16Screen2PresenterD1Ev>:
 8017628:	f1a0 0004 	sub.w	r0, r0, #4
 801762c:	e7e0      	b.n	80175f0 <_ZN16Screen2PresenterD1Ev>
 801762e:	bf00      	nop

08017630 <_ZN16Screen2PresenterD0Ev>:
 8017630:	b580      	push	{r7, lr}
 8017632:	b082      	sub	sp, #8
 8017634:	af00      	add	r7, sp, #0
 8017636:	6078      	str	r0, [r7, #4]
 8017638:	6878      	ldr	r0, [r7, #4]
 801763a:	f7ff ffd9 	bl	80175f0 <_ZN16Screen2PresenterD1Ev>
 801763e:	2110      	movs	r1, #16
 8017640:	6878      	ldr	r0, [r7, #4]
 8017642:	f016 f915 	bl	802d870 <_ZdlPvj>
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	4618      	mov	r0, r3
 801764a:	3708      	adds	r7, #8
 801764c:	46bd      	mov	sp, r7
 801764e:	bd80      	pop	{r7, pc}

08017650 <_ZThn4_N16Screen2PresenterD0Ev>:
 8017650:	f1a0 0004 	sub.w	r0, r0, #4
 8017654:	e7ec      	b.n	8017630 <_ZN16Screen2PresenterD0Ev>
	...

08017658 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 8017658:	b580      	push	{r7, lr}
 801765a:	b082      	sub	sp, #8
 801765c:	af00      	add	r7, sp, #0
 801765e:	6078      	str	r0, [r7, #4]
 8017660:	6039      	str	r1, [r7, #0]
    : view(v)
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	4618      	mov	r0, r3
 8017666:	f7ff ff7f 	bl	8017568 <_ZN8touchgfx9PresenterC1Ev>
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	3304      	adds	r3, #4
 801766e:	4618      	mov	r0, r3
 8017670:	f7ff ff8a 	bl	8017588 <_ZN13ModelListenerC1Ev>
 8017674:	4a06      	ldr	r2, [pc, #24]	; (8017690 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	601a      	str	r2, [r3, #0]
 801767a:	4a06      	ldr	r2, [pc, #24]	; (8017694 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	605a      	str	r2, [r3, #4]
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	683a      	ldr	r2, [r7, #0]
 8017684:	60da      	str	r2, [r3, #12]
{

}
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	4618      	mov	r0, r3
 801768a:	3708      	adds	r7, #8
 801768c:	46bd      	mov	sp, r7
 801768e:	bd80      	pop	{r7, pc}
 8017690:	08030044 	.word	0x08030044
 8017694:	0803005c 	.word	0x0803005c

08017698 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 8017698:	b480      	push	{r7}
 801769a:	b083      	sub	sp, #12
 801769c:	af00      	add	r7, sp, #0
 801769e:	6078      	str	r0, [r7, #4]

}
 80176a0:	bf00      	nop
 80176a2:	370c      	adds	r7, #12
 80176a4:	46bd      	mov	sp, r7
 80176a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176aa:	4770      	bx	lr

080176ac <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 80176ac:	b480      	push	{r7}
 80176ae:	b083      	sub	sp, #12
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	6078      	str	r0, [r7, #4]

}
 80176b4:	bf00      	nop
 80176b6:	370c      	adds	r7, #12
 80176b8:	46bd      	mov	sp, r7
 80176ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176be:	4770      	bx	lr

080176c0 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 80176c0:	b580      	push	{r7, lr}
 80176c2:	b082      	sub	sp, #8
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	6078      	str	r0, [r7, #4]
 80176c8:	4a05      	ldr	r2, [pc, #20]	; (80176e0 <_ZN11Screen2ViewD1Ev+0x20>)
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	601a      	str	r2, [r3, #0]
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	4618      	mov	r0, r3
 80176d2:	f7fd f95d 	bl	8014990 <_ZN15Screen2ViewBaseD1Ev>
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	4618      	mov	r0, r3
 80176da:	3708      	adds	r7, #8
 80176dc:	46bd      	mov	sp, r7
 80176de:	bd80      	pop	{r7, pc}
 80176e0:	08030094 	.word	0x08030094

080176e4 <_ZN11Screen2ViewD0Ev>:
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b082      	sub	sp, #8
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	6078      	str	r0, [r7, #4]
 80176ec:	6878      	ldr	r0, [r7, #4]
 80176ee:	f7ff ffe7 	bl	80176c0 <_ZN11Screen2ViewD1Ev>
 80176f2:	f246 5164 	movw	r1, #25956	; 0x6564
 80176f6:	6878      	ldr	r0, [r7, #4]
 80176f8:	f016 f8ba 	bl	802d870 <_ZdlPvj>
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	4618      	mov	r0, r3
 8017700:	3708      	adds	r7, #8
 8017702:	46bd      	mov	sp, r7
 8017704:	bd80      	pop	{r7, pc}
	...

08017708 <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

#include "main.h"
#include "extern.h"

Screen2View::Screen2View() {
 8017708:	b580      	push	{r7, lr}
 801770a:	b082      	sub	sp, #8
 801770c:	af00      	add	r7, sp, #0
 801770e:	6078      	str	r0, [r7, #4]
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	4618      	mov	r0, r3
 8017714:	f7fd fa22 	bl	8014b5c <_ZN15Screen2ViewBaseC1Ev>
 8017718:	4a03      	ldr	r2, [pc, #12]	; (8017728 <_ZN11Screen2ViewC1Ev+0x20>)
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	601a      	str	r2, [r3, #0]

}
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	4618      	mov	r0, r3
 8017722:	3708      	adds	r7, #8
 8017724:	46bd      	mov	sp, r7
 8017726:	bd80      	pop	{r7, pc}
 8017728:	08030094 	.word	0x08030094

0801772c <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen() {
 801772c:	b580      	push	{r7, lr}
 801772e:	b082      	sub	sp, #8
 8017730:	af00      	add	r7, sp, #0
 8017732:	6078      	str	r0, [r7, #4]
	Screen2ViewBase::setupScreen();
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	4618      	mov	r0, r3
 8017738:	f7fe f934 	bl	80159a4 <_ZN15Screen2ViewBase11setupScreenEv>
}
 801773c:	bf00      	nop
 801773e:	3708      	adds	r7, #8
 8017740:	46bd      	mov	sp, r7
 8017742:	bd80      	pop	{r7, pc}

08017744 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen() {
 8017744:	b580      	push	{r7, lr}
 8017746:	b082      	sub	sp, #8
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
	Screen2ViewBase::tearDownScreen();
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	4618      	mov	r0, r3
 8017750:	f7fc feae 	bl	80144b0 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8017754:	bf00      	nop
 8017756:	3708      	adds	r7, #8
 8017758:	46bd      	mov	sp, r7
 801775a:	bd80      	pop	{r7, pc}

0801775c <_ZN11Screen2View15handleTickEventEv>:

void Screen2View::handleTickEvent() {
 801775c:	b580      	push	{r7, lr}
 801775e:	b08a      	sub	sp, #40	; 0x28
 8017760:	af00      	add	r7, sp, #0
 8017762:	6078      	str	r0, [r7, #4]
	Unicode::UnicodeChar buffer[16];

	cell_0.setValues(0);
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	33b8      	adds	r3, #184	; 0xb8
 8017768:	2100      	movs	r1, #0
 801776a:	4618      	mov	r0, r3
 801776c:	f7fe fcdc 	bl	8016128 <_ZN4cell9setValuesEh>
	cell_1.setValues(1);
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	f603 03c4 	addw	r3, r3, #2244	; 0x8c4
 8017776:	2101      	movs	r1, #1
 8017778:	4618      	mov	r0, r3
 801777a:	f7fe fcd5 	bl	8016128 <_ZN4cell9setValuesEh>
	cell_2.setValues(2);
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	f503 5386 	add.w	r3, r3, #4288	; 0x10c0
 8017784:	3310      	adds	r3, #16
 8017786:	2102      	movs	r1, #2
 8017788:	4618      	mov	r0, r3
 801778a:	f7fe fccd 	bl	8016128 <_ZN4cell9setValuesEh>
	cell_3.setValues(3);
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8017794:	331c      	adds	r3, #28
 8017796:	2103      	movs	r1, #3
 8017798:	4618      	mov	r0, r3
 801779a:	f7fe fcc5 	bl	8016128 <_ZN4cell9setValuesEh>
	cell_4.setValues(4);
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	f503 5303 	add.w	r3, r3, #8384	; 0x20c0
 80177a4:	3328      	adds	r3, #40	; 0x28
 80177a6:	2104      	movs	r1, #4
 80177a8:	4618      	mov	r0, r3
 80177aa:	f7fe fcbd 	bl	8016128 <_ZN4cell9setValuesEh>
	cell_5.setValues(5);
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 80177b4:	3334      	adds	r3, #52	; 0x34
 80177b6:	2105      	movs	r1, #5
 80177b8:	4618      	mov	r0, r3
 80177ba:	f7fe fcb5 	bl	8016128 <_ZN4cell9setValuesEh>

	//total voltage
	battery_voltage.invalidate();
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	336c      	adds	r3, #108	; 0x6c
 80177c2:	4618      	mov	r0, r3
 80177c4:	f007 fd13 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
			(float) (Current_Status.BATTERY_VOLTAGE / 1000.0));
 80177c8:	4b19      	ldr	r3, [pc, #100]	; (8017830 <_ZN11Screen2View15handleTickEventEv+0xd4>)
 80177ca:	f8b3 3244 	ldrh.w	r3, [r3, #580]	; 0x244
 80177ce:	4618      	mov	r0, r3
 80177d0:	f7e8 feb0 	bl	8000534 <__aeabi_i2d>
 80177d4:	f04f 0200 	mov.w	r2, #0
 80177d8:	4b16      	ldr	r3, [pc, #88]	; (8017834 <_ZN11Screen2View15handleTickEventEv+0xd8>)
 80177da:	f7e9 f83f 	bl	800085c <__aeabi_ddiv>
 80177de:	4602      	mov	r2, r0
 80177e0:	460b      	mov	r3, r1
	Unicode::snprintfFloat(buffer, 16, "%.2f V",
 80177e2:	4610      	mov	r0, r2
 80177e4:	4619      	mov	r1, r3
 80177e6:	f7e9 f941 	bl	8000a6c <__aeabi_d2f>
 80177ea:	4602      	mov	r2, r0
 80177ec:	f107 0308 	add.w	r3, r7, #8
 80177f0:	ee00 2a10 	vmov	s0, r2
 80177f4:	4a10      	ldr	r2, [pc, #64]	; (8017838 <_ZN11Screen2View15handleTickEventEv+0xdc>)
 80177f6:	2110      	movs	r1, #16
 80177f8:	4618      	mov	r0, r3
 80177fa:	f7fe fc63 	bl	80160c4 <_ZN8touchgfx7Unicode13snprintfFloatEPttPKcf>
	Unicode::snprintf(battery_voltageBuffer, 16, "%s", buffer);
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	f503 5059 	add.w	r0, r3, #13888	; 0x3640
 8017804:	3030      	adds	r0, #48	; 0x30
 8017806:	f107 0308 	add.w	r3, r7, #8
 801780a:	4a0c      	ldr	r2, [pc, #48]	; (801783c <_ZN11Screen2View15handleTickEventEv+0xe0>)
 801780c:	2110      	movs	r1, #16
 801780e:	f009 fcdb 	bl	80211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	battery_voltage.resizeToCurrentTextWithAlignment();
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	336c      	adds	r3, #108	; 0x6c
 8017816:	4618      	mov	r0, r3
 8017818:	f004 f836 	bl	801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>
	battery_voltage.invalidate();
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	336c      	adds	r3, #108	; 0x6c
 8017820:	4618      	mov	r0, r3
 8017822:	f007 fce4 	bl	801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>
}
 8017826:	bf00      	nop
 8017828:	3728      	adds	r7, #40	; 0x28
 801782a:	46bd      	mov	sp, r7
 801782c:	bd80      	pop	{r7, pc}
 801782e:	bf00      	nop
 8017830:	200103b4 	.word	0x200103b4
 8017834:	408f4000 	.word	0x408f4000
 8017838:	0802f5f4 	.word	0x0802f5f4
 801783c:	0802f5fc 	.word	0x0802f5fc

08017840 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8017840:	b480      	push	{r7}
 8017842:	b083      	sub	sp, #12
 8017844:	af00      	add	r7, sp, #0
 8017846:	6078      	str	r0, [r7, #4]
    {
 8017848:	4a04      	ldr	r2, [pc, #16]	; (801785c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	601a      	str	r2, [r3, #0]
    }
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	4618      	mov	r0, r3
 8017852:	370c      	adds	r7, #12
 8017854:	46bd      	mov	sp, r7
 8017856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801785a:	4770      	bx	lr
 801785c:	080300e0 	.word	0x080300e0

08017860 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8017860:	b580      	push	{r7, lr}
 8017862:	b082      	sub	sp, #8
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
    }
 8017868:	6878      	ldr	r0, [r7, #4]
 801786a:	f7ff ffe9 	bl	8017840 <_ZN8touchgfx15TouchControllerD1Ev>
 801786e:	2104      	movs	r1, #4
 8017870:	6878      	ldr	r0, [r7, #4]
 8017872:	f015 fffd 	bl	802d870 <_ZdlPvj>
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	4618      	mov	r0, r3
 801787a:	3708      	adds	r7, #8
 801787c:	46bd      	mov	sp, r7
 801787e:	bd80      	pop	{r7, pc}

08017880 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8017880:	b480      	push	{r7}
 8017882:	b083      	sub	sp, #12
 8017884:	af00      	add	r7, sp, #0
 8017886:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8017888:	bf00      	nop
 801788a:	370c      	adds	r7, #12
 801788c:	46bd      	mov	sp, r7
 801788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017892:	4770      	bx	lr

08017894 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8017894:	b480      	push	{r7}
 8017896:	b085      	sub	sp, #20
 8017898:	af00      	add	r7, sp, #0
 801789a:	60f8      	str	r0, [r7, #12]
 801789c:	60b9      	str	r1, [r7, #8]
 801789e:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 80178a0:	2300      	movs	r3, #0
}
 80178a2:	4618      	mov	r0, r3
 80178a4:	3714      	adds	r7, #20
 80178a6:	46bd      	mov	sp, r7
 80178a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ac:	4770      	bx	lr
	...

080178b0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b082      	sub	sp, #8
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	6078      	str	r0, [r7, #4]
 80178b8:	4a05      	ldr	r2, [pc, #20]	; (80178d0 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	601a      	str	r2, [r3, #0]
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	4618      	mov	r0, r3
 80178c2:	f7ff ffbd 	bl	8017840 <_ZN8touchgfx15TouchControllerD1Ev>
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	4618      	mov	r0, r3
 80178ca:	3708      	adds	r7, #8
 80178cc:	46bd      	mov	sp, r7
 80178ce:	bd80      	pop	{r7, pc}
 80178d0:	080300c8 	.word	0x080300c8

080178d4 <_ZN20STM32TouchControllerD0Ev>:
 80178d4:	b580      	push	{r7, lr}
 80178d6:	b082      	sub	sp, #8
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
 80178dc:	6878      	ldr	r0, [r7, #4]
 80178de:	f7ff ffe7 	bl	80178b0 <_ZN20STM32TouchControllerD1Ev>
 80178e2:	2104      	movs	r1, #4
 80178e4:	6878      	ldr	r0, [r7, #4]
 80178e6:	f015 ffc3 	bl	802d870 <_ZdlPvj>
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	4618      	mov	r0, r3
 80178ee:	3708      	adds	r7, #8
 80178f0:	46bd      	mov	sp, r7
 80178f2:	bd80      	pop	{r7, pc}

080178f4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80178f4:	b480      	push	{r7}
 80178f6:	b083      	sub	sp, #12
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	4603      	mov	r3, r0
 80178fc:	71fb      	strb	r3, [r7, #7]

}
 80178fe:	bf00      	nop
 8017900:	370c      	adds	r7, #12
 8017902:	46bd      	mov	sp, r7
 8017904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017908:	4770      	bx	lr

0801790a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 801790a:	b480      	push	{r7}
 801790c:	b083      	sub	sp, #12
 801790e:	af00      	add	r7, sp, #0
 8017910:	4603      	mov	r3, r0
 8017912:	71fb      	strb	r3, [r7, #7]

}
 8017914:	bf00      	nop
 8017916:	370c      	adds	r7, #12
 8017918:	46bd      	mov	sp, r7
 801791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801791e:	4770      	bx	lr

08017920 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8017920:	b480      	push	{r7}
 8017922:	b083      	sub	sp, #12
 8017924:	af00      	add	r7, sp, #0
 8017926:	4603      	mov	r3, r0
 8017928:	71fb      	strb	r3, [r7, #7]

}
 801792a:	bf00      	nop
 801792c:	370c      	adds	r7, #12
 801792e:	46bd      	mov	sp, r7
 8017930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017934:	4770      	bx	lr
	...

08017938 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8017938:	b480      	push	{r7}
 801793a:	b083      	sub	sp, #12
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
    {
 8017940:	4a04      	ldr	r2, [pc, #16]	; (8017954 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	601a      	str	r2, [r3, #0]
    }
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	4618      	mov	r0, r3
 801794a:	370c      	adds	r7, #12
 801794c:	46bd      	mov	sp, r7
 801794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017952:	4770      	bx	lr
 8017954:	080304c0 	.word	0x080304c0

08017958 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8017958:	b580      	push	{r7, lr}
 801795a:	b082      	sub	sp, #8
 801795c:	af00      	add	r7, sp, #0
 801795e:	6078      	str	r0, [r7, #4]
    }
 8017960:	6878      	ldr	r0, [r7, #4]
 8017962:	f7ff ffe9 	bl	8017938 <_ZN8touchgfx3HALD1Ev>
 8017966:	217c      	movs	r1, #124	; 0x7c
 8017968:	6878      	ldr	r0, [r7, #4]
 801796a:	f015 ff81 	bl	802d870 <_ZdlPvj>
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	4618      	mov	r0, r3
 8017972:	3708      	adds	r7, #8
 8017974:	46bd      	mov	sp, r7
 8017976:	bd80      	pop	{r7, pc}

08017978 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8017978:	b480      	push	{r7}
 801797a:	b083      	sub	sp, #12
 801797c:	af00      	add	r7, sp, #0
 801797e:	6078      	str	r0, [r7, #4]
 8017980:	460b      	mov	r3, r1
 8017982:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	78fa      	ldrb	r2, [r7, #3]
 8017988:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	2201      	movs	r2, #1
 8017990:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8017994:	bf00      	nop
 8017996:	370c      	adds	r7, #12
 8017998:	46bd      	mov	sp, r7
 801799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801799e:	4770      	bx	lr

080179a0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80179a0:	b580      	push	{r7, lr}
 80179a2:	b082      	sub	sp, #8
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	6078      	str	r0, [r7, #4]
 80179a8:	460b      	mov	r3, r1
 80179aa:	807b      	strh	r3, [r7, #2]
 80179ac:	4613      	mov	r3, r2
 80179ae:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80179b0:	4b0c      	ldr	r3, [pc, #48]	; (80179e4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 80179b2:	881b      	ldrh	r3, [r3, #0]
 80179b4:	887a      	ldrh	r2, [r7, #2]
 80179b6:	429a      	cmp	r2, r3
 80179b8:	d304      	bcc.n	80179c4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 80179ba:	4b0b      	ldr	r3, [pc, #44]	; (80179e8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 80179bc:	881b      	ldrh	r3, [r3, #0]
 80179be:	883a      	ldrh	r2, [r7, #0]
 80179c0:	429a      	cmp	r2, r3
 80179c2:	d205      	bcs.n	80179d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 80179c4:	4b09      	ldr	r3, [pc, #36]	; (80179ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 80179c6:	4a0a      	ldr	r2, [pc, #40]	; (80179f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 80179c8:	219e      	movs	r1, #158	; 0x9e
 80179ca:	480a      	ldr	r0, [pc, #40]	; (80179f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 80179cc:	f015 ff7e 	bl	802d8cc <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80179d0:	4a09      	ldr	r2, [pc, #36]	; (80179f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 80179d2:	887b      	ldrh	r3, [r7, #2]
 80179d4:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 80179d6:	4a09      	ldr	r2, [pc, #36]	; (80179fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 80179d8:	883b      	ldrh	r3, [r7, #0]
 80179da:	8013      	strh	r3, [r2, #0]
    }
 80179dc:	bf00      	nop
 80179de:	3708      	adds	r7, #8
 80179e0:	46bd      	mov	sp, r7
 80179e2:	bd80      	pop	{r7, pc}
 80179e4:	2000f156 	.word	0x2000f156
 80179e8:	2000f158 	.word	0x2000f158
 80179ec:	0802f600 	.word	0x0802f600
 80179f0:	0802f664 	.word	0x0802f664
 80179f4:	0802f6a8 	.word	0x0802f6a8
 80179f8:	2000f15c 	.word	0x2000f15c
 80179fc:	2000f15e 	.word	0x2000f15e

08017a00 <_ZN8touchgfx3HAL11getBlitCapsEv>:

 8017a00:	b580      	push	{r7, lr}
 8017a02:	b082      	sub	sp, #8
 8017a04:	af00      	add	r7, sp, #0
 8017a06:	6078      	str	r0, [r7, #4]
     * This function performs a platform-specific memcpy, if supported by the hardware.
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	d009      	beq.n	8017a26 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
     * @param [out] dest     Pointer to destination memory.
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	685a      	ldr	r2, [r3, #4]
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	685b      	ldr	r3, [r3, #4]
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	4610      	mov	r0, r2
 8017a20:	4798      	blx	r3
 8017a22:	4603      	mov	r3, r0
 8017a24:	e000      	b.n	8017a28 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
     * @param       numBytes Number of bytes to copy.
 8017a26:	2300      	movs	r3, #0
     *
 8017a28:	4618      	mov	r0, r3
 8017a2a:	3708      	adds	r7, #8
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	bd80      	pop	{r7, pc}

08017a30 <_ZN8touchgfx3HAL15backPorchExitedEv>:
     * @param  enabled true to enable, false to disable.
 8017a30:	b580      	push	{r7, lr}
 8017a32:	b082      	sub	sp, #8
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	6078      	str	r0, [r7, #4]
    void setFrameRateCompensation(bool enabled)
 8017a38:	6878      	ldr	r0, [r7, #4]
 8017a3a:	f002 fdc1 	bl	801a5c0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
    {
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	33ac      	adds	r3, #172	; 0xac
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	6878      	ldr	r0, [r7, #4]
 8017a48:	4798      	blx	r3
        vSyncCompensationEnabled = enabled;
 8017a4a:	bf00      	nop
 8017a4c:	3708      	adds	r7, #8
 8017a4e:	46bd      	mov	sp, r7
 8017a50:	bd80      	pop	{r7, pc}

08017a52 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual void configureInterrupts() = 0;
 8017a52:	b480      	push	{r7}
 8017a54:	b083      	sub	sp, #12
 8017a56:	af00      	add	r7, sp, #0
 8017a58:	6078      	str	r0, [r7, #4]
 8017a5a:	6039      	str	r1, [r7, #0]
    /** Enables the DMA and LCD interrupts. */
 8017a5c:	2300      	movs	r3, #0
    virtual void enableInterrupts() = 0;
 8017a5e:	4618      	mov	r0, r3
 8017a60:	370c      	adds	r7, #12
 8017a62:	46bd      	mov	sp, r7
 8017a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a68:	4770      	bx	lr
	...

08017a6c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    }
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	b084      	sub	sp, #16
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	60f8      	str	r0, [r7, #12]
 8017a74:	60b9      	str	r1, [r7, #8]
 8017a76:	607a      	str	r2, [r7, #4]
 8017a78:	603b      	str	r3, [r7, #0]
    static uint16_t DISPLAY_WIDTH;           ///< The width of the LCD display in pixels.
 8017a7a:	68bb      	ldr	r3, [r7, #8]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d106      	bne.n	8017a8e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8017a80:	4b0f      	ldr	r3, [pc, #60]	; (8017ac0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8017a82:	4a10      	ldr	r2, [pc, #64]	; (8017ac4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8017a84:	f240 21bb 	movw	r1, #699	; 0x2bb
 8017a88:	480f      	ldr	r0, [pc, #60]	; (8017ac8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8017a8a:	f015 ff1f 	bl	802d8cc <__assert_func>
    static uint16_t DISPLAY_HEIGHT;          ///< The height of the LCD display in pixels.
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	68ba      	ldr	r2, [r7, #8]
 8017a92:	63da      	str	r2, [r3, #60]	; 0x3c
    static DisplayRotation DISPLAY_ROTATION; ///< The rotation from display to framebuffer.
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	687a      	ldr	r2, [r7, #4]
 8017a98:	641a      	str	r2, [r3, #64]	; 0x40
    static uint16_t FRAME_BUFFER_WIDTH;      ///< The width of the framebuffer in pixels.
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	bf14      	ite	ne
 8017aa0:	2301      	movne	r3, #1
 8017aa2:	2300      	moveq	r3, #0
 8017aa4:	b2da      	uxtb	r2, r3
 8017aa6:	4b09      	ldr	r3, [pc, #36]	; (8017acc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8017aa8:	701a      	strb	r2, [r3, #0]
    static uint16_t FRAME_BUFFER_HEIGHT;     ///< The height of the framebuffer in pixels.
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	681b      	ldr	r3, [r3, #0]
 8017aae:	338c      	adds	r3, #140	; 0x8c
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	6839      	ldr	r1, [r7, #0]
 8017ab4:	68f8      	ldr	r0, [r7, #12]
 8017ab6:	4798      	blx	r3
    static bool USE_DOUBLE_BUFFERING;        ///< Is double buffering enabled?
 8017ab8:	bf00      	nop
 8017aba:	3710      	adds	r7, #16
 8017abc:	46bd      	mov	sp, r7
 8017abe:	bd80      	pop	{r7, pc}
 8017ac0:	0802f6ec 	.word	0x0802f6ec
 8017ac4:	0802f724 	.word	0x0802f724
 8017ac8:	0802f6a8 	.word	0x0802f6a8
 8017acc:	2000f160 	.word	0x2000f160

08017ad0 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *                              buffering is disabled.
 8017ad0:	b480      	push	{r7}
 8017ad2:	b083      	sub	sp, #12
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	6078      	str	r0, [r7, #4]
 8017ad8:	6039      	str	r1, [r7, #0]
     *                              is disabled.
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	683a      	ldr	r2, [r7, #0]
 8017ade:	645a      	str	r2, [r3, #68]	; 0x44
     *
 8017ae0:	683b      	ldr	r3, [r7, #0]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	bf14      	ite	ne
 8017ae6:	2301      	movne	r3, #1
 8017ae8:	2300      	moveq	r3, #0
 8017aea:	b2da      	uxtb	r2, r3
 8017aec:	4b03      	ldr	r3, [pc, #12]	; (8017afc <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8017aee:	701a      	strb	r2, [r3, #0]
     * @see setAnimationStorage
 8017af0:	bf00      	nop
 8017af2:	370c      	adds	r7, #12
 8017af4:	46bd      	mov	sp, r7
 8017af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017afa:	4770      	bx	lr
 8017afc:	2000f161 	.word	0x2000f161

08017b00 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @param [in] allocator pointer to a framebuffer allocator object.
 8017b00:	b480      	push	{r7}
 8017b02:	b083      	sub	sp, #12
 8017b04:	af00      	add	r7, sp, #0
 8017b06:	6078      	str	r0, [r7, #4]
    void setFrameBufferAllocator(FrameBufferAllocator* allocator)
 8017b08:	2300      	movs	r3, #0
    {
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	370c      	adds	r7, #12
 8017b0e:	46bd      	mov	sp, r7
 8017b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b14:	4770      	bx	lr

08017b16 <_ZN8touchgfx3HAL9taskDelayEt>:
     * @param [in] delayF A pointer to a function returning void with an uint16_t parameter
 8017b16:	b580      	push	{r7, lr}
 8017b18:	b082      	sub	sp, #8
 8017b1a:	af00      	add	r7, sp, #0
 8017b1c:	6078      	str	r0, [r7, #4]
 8017b1e:	460b      	mov	r3, r1
 8017b20:	807b      	strh	r3, [r7, #2]
     *
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d004      	beq.n	8017b34 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
     *       REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL is selected. Otherwise it is
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b2e:	887a      	ldrh	r2, [r7, #2]
 8017b30:	4610      	mov	r0, r2
 8017b32:	4798      	blx	r3
     */
 8017b34:	bf00      	nop
 8017b36:	3708      	adds	r7, #8
 8017b38:	46bd      	mov	sp, r7
 8017b3a:	bd80      	pop	{r7, pc}

08017b3c <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
            taskDelayFunc(ms);
 8017b3c:	b480      	push	{r7}
 8017b3e:	b083      	sub	sp, #12
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	6078      	str	r0, [r7, #4]
    }
 8017b44:	f64f 73ff 	movw	r3, #65535	; 0xffff

 8017b48:	4618      	mov	r0, r3
 8017b4a:	370c      	adds	r7, #12
 8017b4c:	46bd      	mov	sp, r7
 8017b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b52:	4770      	bx	lr

08017b54 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * such that the value is always within the range of [0;
 8017b54:	b580      	push	{r7, lr}
 8017b56:	b082      	sub	sp, #8
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	6078      	str	r0, [r7, #4]
     *
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	685a      	ldr	r2, [r3, #4]
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	685b      	ldr	r3, [r3, #4]
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	3318      	adds	r3, #24
 8017b68:	681b      	ldr	r3, [r3, #0]
 8017b6a:	4610      	mov	r0, r2
 8017b6c:	4798      	blx	r3
 8017b6e:	4603      	mov	r3, r0
     * It is used for the REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL frame refresh
 8017b70:	4618      	mov	r0, r3
 8017b72:	3708      	adds	r7, #8
 8017b74:	46bd      	mov	sp, r7
 8017b76:	bd80      	pop	{r7, pc}

08017b78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
            return frameBuffer1;
        }
        return frameBuffer0;
    }

    /**
 8017b78:	b480      	push	{r7}
 8017b7a:	b085      	sub	sp, #20
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	6078      	str	r0, [r7, #4]
     * Called by the touch driver to indicate a touch.
     *
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017b8c:	429a      	cmp	r2, r3
 8017b8e:	d011      	beq.n	8017bb4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
     * @param  x The x coordinate of the touch.
     * @param  y The y coordinate of the touch.
 8017b90:	4b14      	ldr	r3, [pc, #80]	; (8017be4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8017b92:	781b      	ldrb	r3, [r3, #0]
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	d11e      	bne.n	8017bd6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
     */
    virtual void touch(int32_t x, int32_t y);
 8017b98:	4b13      	ldr	r3, [pc, #76]	; (8017be8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8017b9a:	881b      	ldrh	r3, [r3, #0]
 8017b9c:	81bb      	strh	r3, [r7, #12]

 8017b9e:	4b13      	ldr	r3, [pc, #76]	; (8017bec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8017ba0:	881a      	ldrh	r2, [r3, #0]
 8017ba2:	4b11      	ldr	r3, [pc, #68]	; (8017be8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8017ba4:	801a      	strh	r2, [r3, #0]
    /** Called by the touch driver to indicate that no touch is currently detected. */
 8017ba6:	4a11      	ldr	r2, [pc, #68]	; (8017bec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8017ba8:	89bb      	ldrh	r3, [r7, #12]
 8017baa:	8013      	strh	r3, [r2, #0]
    virtual void noTouch();
 8017bac:	4b0d      	ldr	r3, [pc, #52]	; (8017be4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8017bae:	2201      	movs	r2, #1
 8017bb0:	701a      	strb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
        {
            if (DISPLAY_ROTATION == rotate0)
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8017bb2:	e010      	b.n	8017bd6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
    virtual void performDisplayOrientationChange()
 8017bb4:	4b0b      	ldr	r3, [pc, #44]	; (8017be4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8017bb6:	781b      	ldrb	r3, [r3, #0]
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d00c      	beq.n	8017bd6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        if (requestedOrientation != nativeDisplayOrientation)
 8017bbc:	4b0a      	ldr	r3, [pc, #40]	; (8017be8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8017bbe:	881b      	ldrh	r3, [r3, #0]
 8017bc0:	81fb      	strh	r3, [r7, #14]
        {
 8017bc2:	4b0a      	ldr	r3, [pc, #40]	; (8017bec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8017bc4:	881a      	ldrh	r2, [r3, #0]
 8017bc6:	4b08      	ldr	r3, [pc, #32]	; (8017be8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8017bc8:	801a      	strh	r2, [r3, #0]
            if (DISPLAY_ROTATION == rotate0)
 8017bca:	4a08      	ldr	r2, [pc, #32]	; (8017bec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8017bcc:	89fb      	ldrh	r3, [r7, #14]
 8017bce:	8013      	strh	r3, [r2, #0]
            {
 8017bd0:	4b04      	ldr	r3, [pc, #16]	; (8017be4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8017bd2:	2200      	movs	r2, #0
 8017bd4:	701a      	strb	r2, [r3, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8017bd6:	bf00      	nop
 8017bd8:	3714      	adds	r7, #20
 8017bda:	46bd      	mov	sp, r7
 8017bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be0:	4770      	bx	lr
 8017be2:	bf00      	nop
 8017be4:	2000f15a 	.word	0x2000f15a
 8017be8:	2000f158 	.word	0x2000f158
 8017bec:	2000f156 	.word	0x2000f156

08017bf0 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8017bf0:	b480      	push	{r7}
 8017bf2:	b083      	sub	sp, #12
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	6078      	str	r0, [r7, #4]
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8017bf8:	bf00      	nop
 8017bfa:	370c      	adds	r7, #12
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c02:	4770      	bx	lr

08017c04 <_ZN8touchgfx3HAL10FlushCacheEv>:

    /**
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
 8017c04:	b480      	push	{r7}
 8017c06:	b083      	sub	sp, #12
 8017c08:	af00      	add	r7, sp, #0
 8017c0a:	6078      	str	r0, [r7, #4]
     */
    virtual void InvalidateCache()
 8017c0c:	bf00      	nop
 8017c0e:	370c      	adds	r7, #12
 8017c10:	46bd      	mov	sp, r7
 8017c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c16:	4770      	bx	lr

08017c18 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	b082      	sub	sp, #8
 8017c1c:	af00      	add	r7, sp, #0
 8017c1e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	4618      	mov	r0, r3
 8017c24:	f001 ff32 	bl	8019a8c <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8017c28:	bf00      	nop
 8017c2a:	3708      	adds	r7, #8
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	bd80      	pop	{r7, pc}

08017c30 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8017c30:	b580      	push	{r7, lr}
 8017c32:	b082      	sub	sp, #8
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	6078      	str	r0, [r7, #4]
 8017c38:	4a05      	ldr	r2, [pc, #20]	; (8017c50 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	601a      	str	r2, [r3, #0]
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	4618      	mov	r0, r3
 8017c42:	f7ff fe79 	bl	8017938 <_ZN8touchgfx3HALD1Ev>
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	4618      	mov	r0, r3
 8017c4a:	3708      	adds	r7, #8
 8017c4c:	46bd      	mov	sp, r7
 8017c4e:	bd80      	pop	{r7, pc}
 8017c50:	08030318 	.word	0x08030318

08017c54 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8017c54:	b580      	push	{r7, lr}
 8017c56:	b082      	sub	sp, #8
 8017c58:	af00      	add	r7, sp, #0
 8017c5a:	6078      	str	r0, [r7, #4]
 8017c5c:	6878      	ldr	r0, [r7, #4]
 8017c5e:	f7ff ffe7 	bl	8017c30 <_ZN20TouchGFXGeneratedHALD1Ev>
 8017c62:	217c      	movs	r1, #124	; 0x7c
 8017c64:	6878      	ldr	r0, [r7, #4]
 8017c66:	f015 fe03 	bl	802d870 <_ZdlPvj>
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	3708      	adds	r7, #8
 8017c70:	46bd      	mov	sp, r7
 8017c72:	bd80      	pop	{r7, pc}

08017c74 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8017c74:	b580      	push	{r7, lr}
 8017c76:	b082      	sub	sp, #8
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	4618      	mov	r0, r3
 8017c80:	f7ff ffca 	bl	8017c18 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8017c84:	bf00      	nop
 8017c86:	3708      	adds	r7, #8
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	bd80      	pop	{r7, pc}

08017c8c <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b082      	sub	sp, #8
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	4618      	mov	r0, r3
 8017c98:	f001 faf8 	bl	801928c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8017c9c:	bf00      	nop
 8017c9e:	3708      	adds	r7, #8
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	bd80      	pop	{r7, pc}

08017ca4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b082      	sub	sp, #8
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	4618      	mov	r0, r3
 8017cb0:	f001 fb8e 	bl	80193d0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8017cb4:	4603      	mov	r3, r0
}
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	3708      	adds	r7, #8
 8017cba:	46bd      	mov	sp, r7
 8017cbc:	bd80      	pop	{r7, pc}

08017cbe <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8017cbe:	b580      	push	{r7, lr}
 8017cc0:	b082      	sub	sp, #8
 8017cc2:	af00      	add	r7, sp, #0
 8017cc4:	6078      	str	r0, [r7, #4]
 8017cc6:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	6839      	ldr	r1, [r7, #0]
 8017ccc:	4618      	mov	r0, r3
 8017cce:	f001 fb8d 	bl	80193ec <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8017cd2:	bf00      	nop
 8017cd4:	3708      	adds	r7, #8
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	bd80      	pop	{r7, pc}

08017cda <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8017cda:	b580      	push	{r7, lr}
 8017cdc:	b082      	sub	sp, #8
 8017cde:	af00      	add	r7, sp, #0
 8017ce0:	6078      	str	r0, [r7, #4]
 8017ce2:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	6839      	ldr	r1, [r7, #0]
 8017ce8:	4618      	mov	r0, r3
 8017cea:	f001 fb95 	bl	8019418 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8017cee:	bf00      	nop
 8017cf0:	3708      	adds	r7, #8
 8017cf2:	46bd      	mov	sp, r7
 8017cf4:	bd80      	pop	{r7, pc}

08017cf6 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8017cf6:	b580      	push	{r7, lr}
 8017cf8:	b084      	sub	sp, #16
 8017cfa:	af00      	add	r7, sp, #0
 8017cfc:	60f8      	str	r0, [r7, #12]
 8017cfe:	60b9      	str	r1, [r7, #8]
 8017d00:	607a      	str	r2, [r7, #4]
 8017d02:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8017d04:	68f8      	ldr	r0, [r7, #12]
 8017d06:	683b      	ldr	r3, [r7, #0]
 8017d08:	687a      	ldr	r2, [r7, #4]
 8017d0a:	68b9      	ldr	r1, [r7, #8]
 8017d0c:	f001 fb92 	bl	8019434 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8017d10:	4603      	mov	r3, r0
}
 8017d12:	4618      	mov	r0, r3
 8017d14:	3710      	adds	r7, #16
 8017d16:	46bd      	mov	sp, r7
 8017d18:	bd80      	pop	{r7, pc}

08017d1a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8017d1a:	b580      	push	{r7, lr}
 8017d1c:	b082      	sub	sp, #8
 8017d1e:	af00      	add	r7, sp, #0
 8017d20:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	4618      	mov	r0, r3
 8017d26:	f001 fad5 	bl	80192d4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8017d2a:	bf00      	nop
 8017d2c:	3708      	adds	r7, #8
 8017d2e:	46bd      	mov	sp, r7
 8017d30:	bd80      	pop	{r7, pc}

08017d32 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8017d32:	b580      	push	{r7, lr}
 8017d34:	b082      	sub	sp, #8
 8017d36:	af00      	add	r7, sp, #0
 8017d38:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	f001 fad9 	bl	80192f4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8017d42:	bf00      	nop
 8017d44:	3708      	adds	r7, #8
 8017d46:	46bd      	mov	sp, r7
 8017d48:	bd80      	pop	{r7, pc}

08017d4a <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8017d4a:	b580      	push	{r7, lr}
 8017d4c:	b082      	sub	sp, #8
 8017d4e:	af00      	add	r7, sp, #0
 8017d50:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	4618      	mov	r0, r3
 8017d56:	f001 fadb 	bl	8019310 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8017d5a:	bf00      	nop
 8017d5c:	3708      	adds	r7, #8
 8017d5e:	46bd      	mov	sp, r7
 8017d60:	bd80      	pop	{r7, pc}

08017d62 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8017d62:	b580      	push	{r7, lr}
 8017d64:	b082      	sub	sp, #8
 8017d66:	af00      	add	r7, sp, #0
 8017d68:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	4618      	mov	r0, r3
 8017d6e:	f001 fadd 	bl	801932c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8017d72:	bf00      	nop
 8017d74:	3708      	adds	r7, #8
 8017d76:	46bd      	mov	sp, r7
 8017d78:	bd80      	pop	{r7, pc}
	...

08017d7c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8017d7c:	b580      	push	{r7, lr}
 8017d7e:	b082      	sub	sp, #8
 8017d80:	af00      	add	r7, sp, #0
 8017d82:	6078      	str	r0, [r7, #4]
 8017d84:	4a05      	ldr	r2, [pc, #20]	; (8017d9c <_ZN11TouchGFXHALD1Ev+0x20>)
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	601a      	str	r2, [r3, #0]
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	f7ff ff4f 	bl	8017c30 <_ZN20TouchGFXGeneratedHALD1Ev>
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	4618      	mov	r0, r3
 8017d96:	3708      	adds	r7, #8
 8017d98:	46bd      	mov	sp, r7
 8017d9a:	bd80      	pop	{r7, pc}
 8017d9c:	080300f8 	.word	0x080300f8

08017da0 <_ZN11TouchGFXHALD0Ev>:
 8017da0:	b580      	push	{r7, lr}
 8017da2:	b082      	sub	sp, #8
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	6078      	str	r0, [r7, #4]
 8017da8:	6878      	ldr	r0, [r7, #4]
 8017daa:	f7ff ffe7 	bl	8017d7c <_ZN11TouchGFXHALD1Ev>
 8017dae:	217c      	movs	r1, #124	; 0x7c
 8017db0:	6878      	ldr	r0, [r7, #4]
 8017db2:	f015 fd5d 	bl	802d870 <_ZdlPvj>
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	4618      	mov	r0, r3
 8017dba:	3708      	adds	r7, #8
 8017dbc:	46bd      	mov	sp, r7
 8017dbe:	bd80      	pop	{r7, pc}

08017dc0 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8017dc4:	2200      	movs	r2, #0
 8017dc6:	2101      	movs	r1, #1
 8017dc8:	2001      	movs	r0, #1
 8017dca:	f7f4 fa1d 	bl	800c208 <osSemaphoreNew>
 8017dce:	4603      	mov	r3, r0
 8017dd0:	4a0f      	ldr	r2, [pc, #60]	; (8017e10 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8017dd2:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8017dd4:	4b0e      	ldr	r3, [pc, #56]	; (8017e10 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d105      	bne.n	8017de8 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8017ddc:	4b0d      	ldr	r3, [pc, #52]	; (8017e14 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8017dde:	4a0e      	ldr	r2, [pc, #56]	; (8017e18 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8017de0:	2128      	movs	r1, #40	; 0x28
 8017de2:	480e      	ldr	r0, [pc, #56]	; (8017e1c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8017de4:	f015 fd72 	bl	802d8cc <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8017de8:	2200      	movs	r2, #0
 8017dea:	2104      	movs	r1, #4
 8017dec:	2001      	movs	r0, #1
 8017dee:	f7f4 fb2b 	bl	800c448 <osMessageQueueNew>
 8017df2:	4603      	mov	r3, r0
 8017df4:	4a0a      	ldr	r2, [pc, #40]	; (8017e20 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8017df6:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8017df8:	4b09      	ldr	r3, [pc, #36]	; (8017e20 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d105      	bne.n	8017e0c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8017e00:	4b08      	ldr	r3, [pc, #32]	; (8017e24 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8017e02:	4a05      	ldr	r2, [pc, #20]	; (8017e18 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8017e04:	212c      	movs	r1, #44	; 0x2c
 8017e06:	4805      	ldr	r0, [pc, #20]	; (8017e1c <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8017e08:	f015 fd60 	bl	802d8cc <__assert_func>
}
 8017e0c:	bf00      	nop
 8017e0e:	bd80      	pop	{r7, pc}
 8017e10:	20007ba0 	.word	0x20007ba0
 8017e14:	0802f774 	.word	0x0802f774
 8017e18:	0802f7c0 	.word	0x0802f7c0
 8017e1c:	0802f7f0 	.word	0x0802f7f0
 8017e20:	20007ba4 	.word	0x20007ba4
 8017e24:	0802f81c 	.word	0x0802f81c

08017e28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8017e2c:	4b04      	ldr	r3, [pc, #16]	; (8017e40 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	f04f 31ff 	mov.w	r1, #4294967295
 8017e34:	4618      	mov	r0, r3
 8017e36:	f7f4 fa71 	bl	800c31c <osSemaphoreAcquire>
}
 8017e3a:	bf00      	nop
 8017e3c:	bd80      	pop	{r7, pc}
 8017e3e:	bf00      	nop
 8017e40:	20007ba0 	.word	0x20007ba0

08017e44 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8017e44:	b580      	push	{r7, lr}
 8017e46:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8017e48:	4b03      	ldr	r3, [pc, #12]	; (8017e58 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	4618      	mov	r0, r3
 8017e4e:	f7f4 fab7 	bl	800c3c0 <osSemaphoreRelease>
}
 8017e52:	bf00      	nop
 8017e54:	bd80      	pop	{r7, pc}
 8017e56:	bf00      	nop
 8017e58:	20007ba0 	.word	0x20007ba0

08017e5c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8017e5c:	b580      	push	{r7, lr}
 8017e5e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8017e60:	4b03      	ldr	r3, [pc, #12]	; (8017e70 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	2100      	movs	r1, #0
 8017e66:	4618      	mov	r0, r3
 8017e68:	f7f4 fa58 	bl	800c31c <osSemaphoreAcquire>
}
 8017e6c:	bf00      	nop
 8017e6e:	bd80      	pop	{r7, pc}
 8017e70:	20007ba0 	.word	0x20007ba0

08017e74 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8017e74:	b580      	push	{r7, lr}
 8017e76:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8017e78:	4b03      	ldr	r3, [pc, #12]	; (8017e88 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	f7f4 fa9f 	bl	800c3c0 <osSemaphoreRelease>
}
 8017e82:	bf00      	nop
 8017e84:	bd80      	pop	{r7, pc}
 8017e86:	bf00      	nop
 8017e88:	20007ba0 	.word	0x20007ba0

08017e8c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8017e8c:	b580      	push	{r7, lr}
 8017e8e:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8017e90:	4b04      	ldr	r3, [pc, #16]	; (8017ea4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8017e92:	6818      	ldr	r0, [r3, #0]
 8017e94:	2300      	movs	r3, #0
 8017e96:	2200      	movs	r2, #0
 8017e98:	4903      	ldr	r1, [pc, #12]	; (8017ea8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8017e9a:	f7f4 fb49 	bl	800c530 <osMessageQueuePut>
}
 8017e9e:	bf00      	nop
 8017ea0:	bd80      	pop	{r7, pc}
 8017ea2:	bf00      	nop
 8017ea4:	20007ba4 	.word	0x20007ba4
 8017ea8:	20000018 	.word	0x20000018

08017eac <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8017eac:	b580      	push	{r7, lr}
 8017eae:	b082      	sub	sp, #8
 8017eb0:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8017eb2:	4b09      	ldr	r3, [pc, #36]	; (8017ed8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8017eb4:	6818      	ldr	r0, [r3, #0]
 8017eb6:	1d39      	adds	r1, r7, #4
 8017eb8:	2300      	movs	r3, #0
 8017eba:	2200      	movs	r2, #0
 8017ebc:	f7f4 fb98 	bl	800c5f0 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8017ec0:	4b05      	ldr	r3, [pc, #20]	; (8017ed8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8017ec2:	6818      	ldr	r0, [r3, #0]
 8017ec4:	1d39      	adds	r1, r7, #4
 8017ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8017eca:	2200      	movs	r2, #0
 8017ecc:	f7f4 fb90 	bl	800c5f0 <osMessageQueueGet>
}
 8017ed0:	bf00      	nop
 8017ed2:	3708      	adds	r7, #8
 8017ed4:	46bd      	mov	sp, r7
 8017ed6:	bd80      	pop	{r7, pc}
 8017ed8:	20007ba4 	.word	0x20007ba4

08017edc <__NVIC_EnableIRQ>:
{
 8017edc:	b480      	push	{r7}
 8017ede:	b083      	sub	sp, #12
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	4603      	mov	r3, r0
 8017ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	db0b      	blt.n	8017f06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017eee:	79fb      	ldrb	r3, [r7, #7]
 8017ef0:	f003 021f 	and.w	r2, r3, #31
 8017ef4:	4907      	ldr	r1, [pc, #28]	; (8017f14 <__NVIC_EnableIRQ+0x38>)
 8017ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017efa:	095b      	lsrs	r3, r3, #5
 8017efc:	2001      	movs	r0, #1
 8017efe:	fa00 f202 	lsl.w	r2, r0, r2
 8017f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8017f06:	bf00      	nop
 8017f08:	370c      	adds	r7, #12
 8017f0a:	46bd      	mov	sp, r7
 8017f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f10:	4770      	bx	lr
 8017f12:	bf00      	nop
 8017f14:	e000e100 	.word	0xe000e100

08017f18 <__NVIC_DisableIRQ>:
{
 8017f18:	b480      	push	{r7}
 8017f1a:	b083      	sub	sp, #12
 8017f1c:	af00      	add	r7, sp, #0
 8017f1e:	4603      	mov	r3, r0
 8017f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	db12      	blt.n	8017f50 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017f2a:	79fb      	ldrb	r3, [r7, #7]
 8017f2c:	f003 021f 	and.w	r2, r3, #31
 8017f30:	490a      	ldr	r1, [pc, #40]	; (8017f5c <__NVIC_DisableIRQ+0x44>)
 8017f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017f36:	095b      	lsrs	r3, r3, #5
 8017f38:	2001      	movs	r0, #1
 8017f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8017f3e:	3320      	adds	r3, #32
 8017f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8017f44:	f3bf 8f4f 	dsb	sy
}
 8017f48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017f4a:	f3bf 8f6f 	isb	sy
}
 8017f4e:	bf00      	nop
}
 8017f50:	bf00      	nop
 8017f52:	370c      	adds	r7, #12
 8017f54:	46bd      	mov	sp, r7
 8017f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f5a:	4770      	bx	lr
 8017f5c:	e000e100 	.word	0xe000e100

08017f60 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8017f60:	b480      	push	{r7}
 8017f62:	b083      	sub	sp, #12
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	6078      	str	r0, [r7, #4]
    {
 8017f68:	4a04      	ldr	r2, [pc, #16]	; (8017f7c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	601a      	str	r2, [r3, #0]
    }
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	4618      	mov	r0, r3
 8017f72:	370c      	adds	r7, #12
 8017f74:	46bd      	mov	sp, r7
 8017f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f7a:	4770      	bx	lr
 8017f7c:	08030220 	.word	0x08030220

08017f80 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8017f80:	b580      	push	{r7, lr}
 8017f82:	b082      	sub	sp, #8
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	6078      	str	r0, [r7, #4]
    }
 8017f88:	6878      	ldr	r0, [r7, #4]
 8017f8a:	f7ff ffe9 	bl	8017f60 <_ZN8touchgfx9DMA_QueueD1Ev>
 8017f8e:	2104      	movs	r1, #4
 8017f90:	6878      	ldr	r0, [r7, #4]
 8017f92:	f015 fc6d 	bl	802d870 <_ZdlPvj>
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	4618      	mov	r0, r3
 8017f9a:	3708      	adds	r7, #8
 8017f9c:	46bd      	mov	sp, r7
 8017f9e:	bd80      	pop	{r7, pc}

08017fa0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b082      	sub	sp, #8
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	3344      	adds	r3, #68	; 0x44
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	6878      	ldr	r0, [r7, #4]
 8017fb2:	4798      	blx	r3
    }
 8017fb4:	bf00      	nop
 8017fb6:	3708      	adds	r7, #8
 8017fb8:	46bd      	mov	sp, r7
 8017fba:	bd80      	pop	{r7, pc}

08017fbc <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8017fbc:	b480      	push	{r7}
 8017fbe:	b083      	sub	sp, #12
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	6078      	str	r0, [r7, #4]
    {
 8017fc4:	4a04      	ldr	r2, [pc, #16]	; (8017fd8 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	601a      	str	r2, [r3, #0]
    }
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	4618      	mov	r0, r3
 8017fce:	370c      	adds	r7, #12
 8017fd0:	46bd      	mov	sp, r7
 8017fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fd6:	4770      	bx	lr
 8017fd8:	08030598 	.word	0x08030598

08017fdc <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8017fdc:	b580      	push	{r7, lr}
 8017fde:	b082      	sub	sp, #8
 8017fe0:	af00      	add	r7, sp, #0
 8017fe2:	6078      	str	r0, [r7, #4]
    }
 8017fe4:	6878      	ldr	r0, [r7, #4]
 8017fe6:	f7ff ffe9 	bl	8017fbc <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8017fea:	210c      	movs	r1, #12
 8017fec:	6878      	ldr	r0, [r7, #4]
 8017fee:	f015 fc3f 	bl	802d870 <_ZdlPvj>
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	3708      	adds	r7, #8
 8017ff8:	46bd      	mov	sp, r7
 8017ffa:	bd80      	pop	{r7, pc}

08017ffc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8017ffc:	b480      	push	{r7}
 8017ffe:	b083      	sub	sp, #12
 8018000:	af00      	add	r7, sp, #0
 8018002:	6078      	str	r0, [r7, #4]
 8018004:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8018006:	4a09      	ldr	r2, [pc, #36]	; (801802c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	601a      	str	r2, [r3, #0]
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	683a      	ldr	r2, [r7, #0]
 8018010:	605a      	str	r2, [r3, #4]
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	2200      	movs	r2, #0
 8018016:	721a      	strb	r2, [r3, #8]
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	2200      	movs	r2, #0
 801801c:	725a      	strb	r2, [r3, #9]
    {
    }
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	4618      	mov	r0, r3
 8018022:	370c      	adds	r7, #12
 8018024:	46bd      	mov	sp, r7
 8018026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801802a:	4770      	bx	lr
 801802c:	08030598 	.word	0x08030598

08018030 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8018030:	b480      	push	{r7}
 8018032:	b083      	sub	sp, #12
 8018034:	af00      	add	r7, sp, #0
 8018036:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8018038:	2301      	movs	r3, #1
    }
 801803a:	4618      	mov	r0, r3
 801803c:	370c      	adds	r7, #12
 801803e:	46bd      	mov	sp, r7
 8018040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018044:	4770      	bx	lr

08018046 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8018046:	b580      	push	{r7, lr}
 8018048:	b082      	sub	sp, #8
 801804a:	af00      	add	r7, sp, #0
 801804c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 801804e:	687a      	ldr	r2, [r7, #4]
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	3328      	adds	r3, #40	; 0x28
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	4610      	mov	r0, r2
 801805a:	4798      	blx	r3
    }
 801805c:	bf00      	nop
 801805e:	3708      	adds	r7, #8
 8018060:	46bd      	mov	sp, r7
 8018062:	bd80      	pop	{r7, pc}

08018064 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8018064:	b580      	push	{r7, lr}
 8018066:	b082      	sub	sp, #8
 8018068:	af00      	add	r7, sp, #0
 801806a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	685a      	ldr	r2, [r3, #4]
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	685b      	ldr	r3, [r3, #4]
 8018074:	681b      	ldr	r3, [r3, #0]
 8018076:	3314      	adds	r3, #20
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	4610      	mov	r0, r2
 801807c:	4798      	blx	r3
    }
 801807e:	bf00      	nop
 8018080:	3708      	adds	r7, #8
 8018082:	46bd      	mov	sp, r7
 8018084:	bd80      	pop	{r7, pc}

08018086 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8018086:	b580      	push	{r7, lr}
 8018088:	b082      	sub	sp, #8
 801808a:	af00      	add	r7, sp, #0
 801808c:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 801808e:	f7f7 fffd 	bl	801008c <_ZN8touchgfx3HAL11getInstanceEv>
 8018092:	4603      	mov	r3, r0
 8018094:	4618      	mov	r0, r3
 8018096:	f7ff ffe5 	bl	8018064 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 801809a:	bf00      	nop
 801809c:	3708      	adds	r7, #8
 801809e:	46bd      	mov	sp, r7
 80180a0:	bd80      	pop	{r7, pc}

080180a2 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80180a2:	b580      	push	{r7, lr}
 80180a4:	b082      	sub	sp, #8
 80180a6:	af00      	add	r7, sp, #0
 80180a8:	6078      	str	r0, [r7, #4]
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	330c      	adds	r3, #12
 80180ae:	4618      	mov	r0, r3
 80180b0:	f7fc f960 	bl	8014374 <_ZN8touchgfx9colortypeC1Ev>
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	4618      	mov	r0, r3
 80180b8:	3708      	adds	r7, #8
 80180ba:	46bd      	mov	sp, r7
 80180bc:	bd80      	pop	{r7, pc}
	...

080180c0 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 80180c0:	b5b0      	push	{r4, r5, r7, lr}
 80180c2:	b082      	sub	sp, #8
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80180c8:	687a      	ldr	r2, [r7, #4]
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	330c      	adds	r3, #12
 80180ce:	4619      	mov	r1, r3
 80180d0:	4610      	mov	r0, r2
 80180d2:	f7ff ff93 	bl	8017ffc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 80180d6:	4a0e      	ldr	r2, [pc, #56]	; (8018110 <_ZN8STM32DMAC1Ev+0x50>)
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	601a      	str	r2, [r3, #0]
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	f103 000c 	add.w	r0, r3, #12
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	3320      	adds	r3, #32
 80180e6:	2260      	movs	r2, #96	; 0x60
 80180e8:	4619      	mov	r1, r3
 80180ea:	f002 fbbb 	bl	801a864 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	3320      	adds	r3, #32
 80180f2:	245f      	movs	r4, #95	; 0x5f
 80180f4:	461d      	mov	r5, r3
 80180f6:	2c00      	cmp	r4, #0
 80180f8:	db05      	blt.n	8018106 <_ZN8STM32DMAC1Ev+0x46>
 80180fa:	4628      	mov	r0, r5
 80180fc:	f7ff ffd1 	bl	80180a2 <_ZN8touchgfx6BlitOpC1Ev>
 8018100:	3524      	adds	r5, #36	; 0x24
 8018102:	3c01      	subs	r4, #1
 8018104:	e7f7      	b.n	80180f6 <_ZN8STM32DMAC1Ev+0x36>
{
}
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	4618      	mov	r0, r3
 801810a:	3708      	adds	r7, #8
 801810c:	46bd      	mov	sp, r7
 801810e:	bdb0      	pop	{r4, r5, r7, pc}
 8018110:	080301d0 	.word	0x080301d0

08018114 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8018114:	b580      	push	{r7, lr}
 8018116:	b082      	sub	sp, #8
 8018118:	af00      	add	r7, sp, #0
 801811a:	6078      	str	r0, [r7, #4]
 801811c:	4a09      	ldr	r2, [pc, #36]	; (8018144 <_ZN8STM32DMAD1Ev+0x30>)
 801811e:	687b      	ldr	r3, [r7, #4]
 8018120:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8018122:	205a      	movs	r0, #90	; 0x5a
 8018124:	f7ff fef8 	bl	8017f18 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	330c      	adds	r3, #12
 801812c:	4618      	mov	r0, r3
 801812e:	f000 fb31 	bl	8018794 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	4618      	mov	r0, r3
 8018136:	f7ff ff41 	bl	8017fbc <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	4618      	mov	r0, r3
 801813e:	3708      	adds	r7, #8
 8018140:	46bd      	mov	sp, r7
 8018142:	bd80      	pop	{r7, pc}
 8018144:	080301d0 	.word	0x080301d0

08018148 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8018148:	b580      	push	{r7, lr}
 801814a:	b082      	sub	sp, #8
 801814c:	af00      	add	r7, sp, #0
 801814e:	6078      	str	r0, [r7, #4]
}
 8018150:	6878      	ldr	r0, [r7, #4]
 8018152:	f7ff ffdf 	bl	8018114 <_ZN8STM32DMAD1Ev>
 8018156:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 801815a:	6878      	ldr	r0, [r7, #4]
 801815c:	f015 fb88 	bl	802d870 <_ZdlPvj>
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	4618      	mov	r0, r3
 8018164:	3708      	adds	r7, #8
 8018166:	46bd      	mov	sp, r7
 8018168:	bd80      	pop	{r7, pc}
	...

0801816c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 801816c:	b580      	push	{r7, lr}
 801816e:	b084      	sub	sp, #16
 8018170:	af00      	add	r7, sp, #0
 8018172:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8018174:	2300      	movs	r3, #0
 8018176:	60fb      	str	r3, [r7, #12]
 8018178:	4b10      	ldr	r3, [pc, #64]	; (80181bc <_ZN8STM32DMA10initializeEv+0x50>)
 801817a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801817c:	4a0f      	ldr	r2, [pc, #60]	; (80181bc <_ZN8STM32DMA10initializeEv+0x50>)
 801817e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8018182:	6313      	str	r3, [r2, #48]	; 0x30
 8018184:	4b0d      	ldr	r3, [pc, #52]	; (80181bc <_ZN8STM32DMA10initializeEv+0x50>)
 8018186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018188:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801818c:	60fb      	str	r3, [r7, #12]
 801818e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8018190:	4b0a      	ldr	r3, [pc, #40]	; (80181bc <_ZN8STM32DMA10initializeEv+0x50>)
 8018192:	691b      	ldr	r3, [r3, #16]
 8018194:	4a09      	ldr	r2, [pc, #36]	; (80181bc <_ZN8STM32DMA10initializeEv+0x50>)
 8018196:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801819a:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 801819c:	4b07      	ldr	r3, [pc, #28]	; (80181bc <_ZN8STM32DMA10initializeEv+0x50>)
 801819e:	691b      	ldr	r3, [r3, #16]
 80181a0:	4a06      	ldr	r2, [pc, #24]	; (80181bc <_ZN8STM32DMA10initializeEv+0x50>)
 80181a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80181a6:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80181a8:	4b05      	ldr	r3, [pc, #20]	; (80181c0 <_ZN8STM32DMA10initializeEv+0x54>)
 80181aa:	4a06      	ldr	r2, [pc, #24]	; (80181c4 <_ZN8STM32DMA10initializeEv+0x58>)
 80181ac:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 80181ae:	205a      	movs	r0, #90	; 0x5a
 80181b0:	f7ff fe94 	bl	8017edc <__NVIC_EnableIRQ>
}
 80181b4:	bf00      	nop
 80181b6:	3710      	adds	r7, #16
 80181b8:	46bd      	mov	sp, r7
 80181ba:	bd80      	pop	{r7, pc}
 80181bc:	40023800 	.word	0x40023800
 80181c0:	2001105c 	.word	0x2001105c
 80181c4:	08018087 	.word	0x08018087

080181c8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 80181c8:	b580      	push	{r7, lr}
 80181ca:	b084      	sub	sp, #16
 80181cc:	af00      	add	r7, sp, #0
 80181ce:	6078      	str	r0, [r7, #4]
 80181d0:	460b      	mov	r3, r1
 80181d2:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 80181d4:	2300      	movs	r3, #0
 80181d6:	60fb      	str	r3, [r7, #12]

    switch (format)
 80181d8:	78fb      	ldrb	r3, [r7, #3]
 80181da:	2b0b      	cmp	r3, #11
 80181dc:	d826      	bhi.n	801822c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 80181de:	a201      	add	r2, pc, #4	; (adr r2, 80181e4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80181e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181e4:	08018221 	.word	0x08018221
 80181e8:	0801821b 	.word	0x0801821b
 80181ec:	08018215 	.word	0x08018215
 80181f0:	0801822d 	.word	0x0801822d
 80181f4:	0801822d 	.word	0x0801822d
 80181f8:	0801822d 	.word	0x0801822d
 80181fc:	0801822d 	.word	0x0801822d
 8018200:	08018227 	.word	0x08018227
 8018204:	08018227 	.word	0x08018227
 8018208:	08018227 	.word	0x08018227
 801820c:	08018227 	.word	0x08018227
 8018210:	08018227 	.word	0x08018227
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8018214:	2300      	movs	r3, #0
 8018216:	60fb      	str	r3, [r7, #12]
        break;
 8018218:	e00e      	b.n	8018238 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 801821a:	2301      	movs	r3, #1
 801821c:	60fb      	str	r3, [r7, #12]
        break;
 801821e:	e00b      	b.n	8018238 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8018220:	2302      	movs	r3, #2
 8018222:	60fb      	str	r3, [r7, #12]
        break;
 8018224:	e008      	b.n	8018238 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8018226:	2305      	movs	r3, #5
 8018228:	60fb      	str	r3, [r7, #12]
        break;
 801822a:	e005      	b.n	8018238 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 801822c:	4b05      	ldr	r3, [pc, #20]	; (8018244 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 801822e:	4a06      	ldr	r2, [pc, #24]	; (8018248 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8018230:	2166      	movs	r1, #102	; 0x66
 8018232:	4806      	ldr	r0, [pc, #24]	; (801824c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8018234:	f015 fb4a 	bl	802d8cc <__assert_func>
        break;
    }

    return dma2dColorMode;
 8018238:	68fb      	ldr	r3, [r7, #12]
}
 801823a:	4618      	mov	r0, r3
 801823c:	3710      	adds	r7, #16
 801823e:	46bd      	mov	sp, r7
 8018240:	bd80      	pop	{r7, pc}
 8018242:	bf00      	nop
 8018244:	0802f860 	.word	0x0802f860
 8018248:	0802f87c 	.word	0x0802f87c
 801824c:	0802f8c8 	.word	0x0802f8c8

08018250 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8018250:	b580      	push	{r7, lr}
 8018252:	b084      	sub	sp, #16
 8018254:	af00      	add	r7, sp, #0
 8018256:	6078      	str	r0, [r7, #4]
 8018258:	460b      	mov	r3, r1
 801825a:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 801825c:	2300      	movs	r3, #0
 801825e:	60fb      	str	r3, [r7, #12]

    switch (format)
 8018260:	78fb      	ldrb	r3, [r7, #3]
 8018262:	2b0a      	cmp	r3, #10
 8018264:	d821      	bhi.n	80182aa <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8018266:	a201      	add	r2, pc, #4	; (adr r2, 801826c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8018268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801826c:	080182a5 	.word	0x080182a5
 8018270:	0801829f 	.word	0x0801829f
 8018274:	08018299 	.word	0x08018299
 8018278:	080182ab 	.word	0x080182ab
 801827c:	080182ab 	.word	0x080182ab
 8018280:	080182ab 	.word	0x080182ab
 8018284:	080182ab 	.word	0x080182ab
 8018288:	0801829f 	.word	0x0801829f
 801828c:	0801829f 	.word	0x0801829f
 8018290:	0801829f 	.word	0x0801829f
 8018294:	0801829f 	.word	0x0801829f
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8018298:	2300      	movs	r3, #0
 801829a:	60fb      	str	r3, [r7, #12]
        break;
 801829c:	e00b      	b.n	80182b6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 801829e:	2301      	movs	r3, #1
 80182a0:	60fb      	str	r3, [r7, #12]
        break;
 80182a2:	e008      	b.n	80182b6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80182a4:	2302      	movs	r3, #2
 80182a6:	60fb      	str	r3, [r7, #12]
        break;
 80182a8:	e005      	b.n	80182b6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 80182aa:	4b05      	ldr	r3, [pc, #20]	; (80182c0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 80182ac:	4a05      	ldr	r2, [pc, #20]	; (80182c4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 80182ae:	2187      	movs	r1, #135	; 0x87
 80182b0:	4805      	ldr	r0, [pc, #20]	; (80182c8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 80182b2:	f015 fb0b 	bl	802d8cc <__assert_func>
        break;
    }

    return dma2dColorMode;
 80182b6:	68fb      	ldr	r3, [r7, #12]
}
 80182b8:	4618      	mov	r0, r3
 80182ba:	3710      	adds	r7, #16
 80182bc:	46bd      	mov	sp, r7
 80182be:	bd80      	pop	{r7, pc}
 80182c0:	0802f860 	.word	0x0802f860
 80182c4:	0802f8f4 	.word	0x0802f8f4
 80182c8:	0802f8c8 	.word	0x0802f8c8

080182cc <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 80182cc:	b480      	push	{r7}
 80182ce:	b083      	sub	sp, #12
 80182d0:	af00      	add	r7, sp, #0
 80182d2:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 80182d4:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 80182d8:	4618      	mov	r0, r3
 80182da:	370c      	adds	r7, #12
 80182dc:	46bd      	mov	sp, r7
 80182de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182e2:	4770      	bx	lr

080182e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 80182e4:	b590      	push	{r4, r7, lr}
 80182e6:	b089      	sub	sp, #36	; 0x24
 80182e8:	af00      	add	r7, sp, #0
 80182ea:	6078      	str	r0, [r7, #4]
 80182ec:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 80182ee:	683b      	ldr	r3, [r7, #0]
 80182f0:	7f5b      	ldrb	r3, [r3, #29]
 80182f2:	4619      	mov	r1, r3
 80182f4:	6878      	ldr	r0, [r7, #4]
 80182f6:	f7ff ff67 	bl	80181c8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80182fa:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80182fc:	683b      	ldr	r3, [r7, #0]
 80182fe:	7f9b      	ldrb	r3, [r3, #30]
 8018300:	4619      	mov	r1, r3
 8018302:	6878      	ldr	r0, [r7, #4]
 8018304:	f7ff ff60 	bl	80181c8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8018308:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 801830a:	683b      	ldr	r3, [r7, #0]
 801830c:	7f9b      	ldrb	r3, [r3, #30]
 801830e:	4619      	mov	r1, r3
 8018310:	6878      	ldr	r0, [r7, #4]
 8018312:	f7ff ff9d 	bl	8018250 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8018316:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8018318:	683b      	ldr	r3, [r7, #0]
 801831a:	8b5b      	ldrh	r3, [r3, #26]
 801831c:	461a      	mov	r2, r3
 801831e:	683b      	ldr	r3, [r7, #0]
 8018320:	8a9b      	ldrh	r3, [r3, #20]
 8018322:	1ad2      	subs	r2, r2, r3
 8018324:	4b95      	ldr	r3, [pc, #596]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018326:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8018328:	683b      	ldr	r3, [r7, #0]
 801832a:	8b5b      	ldrh	r3, [r3, #26]
 801832c:	461a      	mov	r2, r3
 801832e:	683b      	ldr	r3, [r7, #0]
 8018330:	8a9b      	ldrh	r3, [r3, #20]
 8018332:	1ad2      	subs	r2, r2, r3
 8018334:	4b91      	ldr	r3, [pc, #580]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018336:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8018338:	683b      	ldr	r3, [r7, #0]
 801833a:	8b1b      	ldrh	r3, [r3, #24]
 801833c:	461a      	mov	r2, r3
 801833e:	683b      	ldr	r3, [r7, #0]
 8018340:	8a9b      	ldrh	r3, [r3, #20]
 8018342:	1ad2      	subs	r2, r2, r3
 8018344:	4b8d      	ldr	r3, [pc, #564]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018346:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8018348:	4a8c      	ldr	r2, [pc, #560]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801834a:	693b      	ldr	r3, [r7, #16]
 801834c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 801834e:	683b      	ldr	r3, [r7, #0]
 8018350:	8adb      	ldrh	r3, [r3, #22]
 8018352:	461a      	mov	r2, r3
 8018354:	683b      	ldr	r3, [r7, #0]
 8018356:	8a9b      	ldrh	r3, [r3, #20]
 8018358:	041b      	lsls	r3, r3, #16
 801835a:	431a      	orrs	r2, r3
 801835c:	4b87      	ldr	r3, [pc, #540]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801835e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8018360:	683b      	ldr	r3, [r7, #0]
 8018362:	691a      	ldr	r2, [r3, #16]
 8018364:	4b85      	ldr	r3, [pc, #532]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018366:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8018368:	683b      	ldr	r3, [r7, #0]
 801836a:	685a      	ldr	r2, [r3, #4]
 801836c:	4b83      	ldr	r3, [pc, #524]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801836e:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8018370:	683b      	ldr	r3, [r7, #0]
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018378:	d037      	beq.n	80183ea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 801837a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801837e:	f200 80e8 	bhi.w	8018552 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8018382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018386:	d014      	beq.n	80183b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8018388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801838c:	f200 80e1 	bhi.w	8018552 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8018390:	2b80      	cmp	r3, #128	; 0x80
 8018392:	d05b      	beq.n	801844c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
 8018394:	2b80      	cmp	r3, #128	; 0x80
 8018396:	f200 80dc 	bhi.w	8018552 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 801839a:	2b40      	cmp	r3, #64	; 0x40
 801839c:	f000 80c4 	beq.w	8018528 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 80183a0:	2b40      	cmp	r3, #64	; 0x40
 80183a2:	f200 80d6 	bhi.w	8018552 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 80183a6:	2b04      	cmp	r3, #4
 80183a8:	d03b      	beq.n	8018422 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
 80183aa:	2b20      	cmp	r3, #32
 80183ac:	f000 80bc 	beq.w	8018528 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 80183b0:	e0cf      	b.n	8018552 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80183b2:	683b      	ldr	r3, [r7, #0]
 80183b4:	7f1b      	ldrb	r3, [r3, #28]
 80183b6:	061b      	lsls	r3, r3, #24
 80183b8:	4a70      	ldr	r2, [pc, #448]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80183ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80183be:	f043 030a 	orr.w	r3, r3, #10
 80183c2:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80183c4:	683b      	ldr	r3, [r7, #0]
 80183c6:	330c      	adds	r3, #12
 80183c8:	4c6c      	ldr	r4, [pc, #432]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80183ca:	4618      	mov	r0, r3
 80183cc:	f7fb ffe0 	bl	8014390 <_ZNK8touchgfx9colortypecvmEv>
 80183d0:	4603      	mov	r3, r0
 80183d2:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80183d4:	4a69      	ldr	r2, [pc, #420]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80183d6:	697b      	ldr	r3, [r7, #20]
 80183d8:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80183da:	683b      	ldr	r3, [r7, #0]
 80183dc:	691a      	ldr	r2, [r3, #16]
 80183de:	4b67      	ldr	r3, [pc, #412]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80183e0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80183e2:	4b66      	ldr	r3, [pc, #408]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80183e4:	4a66      	ldr	r2, [pc, #408]	; (8018580 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80183e6:	601a      	str	r2, [r3, #0]
        break;
 80183e8:	e0d9      	b.n	801859e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80183ea:	683b      	ldr	r3, [r7, #0]
 80183ec:	7f1b      	ldrb	r3, [r3, #28]
 80183ee:	061b      	lsls	r3, r3, #24
 80183f0:	4a62      	ldr	r2, [pc, #392]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80183f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80183f6:	f043 0309 	orr.w	r3, r3, #9
 80183fa:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80183fc:	683b      	ldr	r3, [r7, #0]
 80183fe:	330c      	adds	r3, #12
 8018400:	4c5e      	ldr	r4, [pc, #376]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018402:	4618      	mov	r0, r3
 8018404:	f7fb ffc4 	bl	8014390 <_ZNK8touchgfx9colortypecvmEv>
 8018408:	4603      	mov	r3, r0
 801840a:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801840c:	4a5b      	ldr	r2, [pc, #364]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801840e:	697b      	ldr	r3, [r7, #20]
 8018410:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8018412:	683b      	ldr	r3, [r7, #0]
 8018414:	691a      	ldr	r2, [r3, #16]
 8018416:	4b59      	ldr	r3, [pc, #356]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018418:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801841a:	4b58      	ldr	r3, [pc, #352]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801841c:	4a58      	ldr	r2, [pc, #352]	; (8018580 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801841e:	601a      	str	r2, [r3, #0]
        break;
 8018420:	e0bd      	b.n	801859e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8018422:	683b      	ldr	r3, [r7, #0]
 8018424:	7f1b      	ldrb	r3, [r3, #28]
 8018426:	061b      	lsls	r3, r3, #24
 8018428:	461a      	mov	r2, r3
 801842a:	69bb      	ldr	r3, [r7, #24]
 801842c:	4313      	orrs	r3, r2
 801842e:	4a53      	ldr	r2, [pc, #332]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018434:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8018436:	4a51      	ldr	r2, [pc, #324]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018438:	697b      	ldr	r3, [r7, #20]
 801843a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801843c:	683b      	ldr	r3, [r7, #0]
 801843e:	691a      	ldr	r2, [r3, #16]
 8018440:	4b4e      	ldr	r3, [pc, #312]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018442:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8018444:	4b4d      	ldr	r3, [pc, #308]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018446:	4a4e      	ldr	r2, [pc, #312]	; (8018580 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8018448:	601a      	str	r2, [r3, #0]
        break;
 801844a:	e0a8      	b.n	801859e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 801844c:	2301      	movs	r3, #1
 801844e:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8018450:	683b      	ldr	r3, [r7, #0]
 8018452:	689b      	ldr	r3, [r3, #8]
 8018454:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	1d1a      	adds	r2, r3, #4
 801845a:	4b48      	ldr	r3, [pc, #288]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801845c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801845e:	683b      	ldr	r3, [r7, #0]
 8018460:	7f1b      	ldrb	r3, [r3, #28]
 8018462:	061b      	lsls	r3, r3, #24
 8018464:	461a      	mov	r2, r3
 8018466:	69bb      	ldr	r3, [r7, #24]
 8018468:	4313      	orrs	r3, r2
 801846a:	4a44      	ldr	r2, [pc, #272]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801846c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018470:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8018472:	4a42      	ldr	r2, [pc, #264]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018474:	697b      	ldr	r3, [r7, #20]
 8018476:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8018478:	683b      	ldr	r3, [r7, #0]
 801847a:	691a      	ldr	r2, [r3, #16]
 801847c:	4b3f      	ldr	r3, [pc, #252]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801847e:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	881b      	ldrh	r3, [r3, #0]
 8018484:	b2db      	uxtb	r3, r3
 8018486:	2b00      	cmp	r3, #0
 8018488:	d002      	beq.n	8018490 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>
 801848a:	2b01      	cmp	r3, #1
 801848c:	d00f      	beq.n	80184ae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 801848e:	e024      	b.n	80184da <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8018490:	4b3a      	ldr	r3, [pc, #232]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018492:	69db      	ldr	r3, [r3, #28]
 8018494:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8018498:	f023 0310 	bic.w	r3, r3, #16
 801849c:	68fa      	ldr	r2, [r7, #12]
 801849e:	8852      	ldrh	r2, [r2, #2]
 80184a0:	3a01      	subs	r2, #1
 80184a2:	0212      	lsls	r2, r2, #8
 80184a4:	4611      	mov	r1, r2
 80184a6:	4a35      	ldr	r2, [pc, #212]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80184a8:	430b      	orrs	r3, r1
 80184aa:	61d3      	str	r3, [r2, #28]
                break;
 80184ac:	e01c      	b.n	80184e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 80184ae:	683b      	ldr	r3, [r7, #0]
 80184b0:	7f1b      	ldrb	r3, [r3, #28]
 80184b2:	2bff      	cmp	r3, #255	; 0xff
 80184b4:	d101      	bne.n	80184ba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d6>
                {
                    blend = false;
 80184b6:	2300      	movs	r3, #0
 80184b8:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80184ba:	4b30      	ldr	r3, [pc, #192]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80184bc:	69db      	ldr	r3, [r3, #28]
 80184be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80184c2:	f023 0310 	bic.w	r3, r3, #16
 80184c6:	68fa      	ldr	r2, [r7, #12]
 80184c8:	8852      	ldrh	r2, [r2, #2]
 80184ca:	3a01      	subs	r2, #1
 80184cc:	0212      	lsls	r2, r2, #8
 80184ce:	4313      	orrs	r3, r2
 80184d0:	4a2a      	ldr	r2, [pc, #168]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80184d2:	f043 0310 	orr.w	r3, r3, #16
 80184d6:	61d3      	str	r3, [r2, #28]
                break;
 80184d8:	e006      	b.n	80184e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 80184da:	4b2a      	ldr	r3, [pc, #168]	; (8018584 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80184dc:	4a2a      	ldr	r2, [pc, #168]	; (8018588 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80184de:	f240 1111 	movw	r1, #273	; 0x111
 80184e2:	482a      	ldr	r0, [pc, #168]	; (801858c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80184e4:	f015 f9f2 	bl	802d8cc <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80184e8:	4b24      	ldr	r3, [pc, #144]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80184ea:	69db      	ldr	r3, [r3, #28]
 80184ec:	4a23      	ldr	r2, [pc, #140]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80184ee:	f043 0320 	orr.w	r3, r3, #32
 80184f2:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80184f4:	4b21      	ldr	r3, [pc, #132]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80184f6:	69db      	ldr	r3, [r3, #28]
 80184f8:	f003 0320 	and.w	r3, r3, #32
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	bf14      	ite	ne
 8018500:	2301      	movne	r3, #1
 8018502:	2300      	moveq	r3, #0
 8018504:	b2db      	uxtb	r3, r3
 8018506:	2b00      	cmp	r3, #0
 8018508:	d000      	beq.n	801850c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>
 801850a:	e7f3      	b.n	80184f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 801850c:	4b1b      	ldr	r3, [pc, #108]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801850e:	2210      	movs	r2, #16
 8018510:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 8018512:	7ffb      	ldrb	r3, [r7, #31]
 8018514:	2b00      	cmp	r3, #0
 8018516:	d003      	beq.n	8018520 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8018518:	4b18      	ldr	r3, [pc, #96]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801851a:	4a19      	ldr	r2, [pc, #100]	; (8018580 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801851c:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 801851e:	e03e      	b.n	801859e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8018520:	4b16      	ldr	r3, [pc, #88]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018522:	4a1b      	ldr	r2, [pc, #108]	; (8018590 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8018524:	601a      	str	r2, [r3, #0]
        break;
 8018526:	e03a      	b.n	801859e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8018528:	683b      	ldr	r3, [r7, #0]
 801852a:	7f1b      	ldrb	r3, [r3, #28]
 801852c:	061b      	lsls	r3, r3, #24
 801852e:	461a      	mov	r2, r3
 8018530:	69bb      	ldr	r3, [r7, #24]
 8018532:	4313      	orrs	r3, r2
 8018534:	4a11      	ldr	r2, [pc, #68]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801853a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801853c:	4a0f      	ldr	r2, [pc, #60]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801853e:	697b      	ldr	r3, [r7, #20]
 8018540:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8018542:	683b      	ldr	r3, [r7, #0]
 8018544:	691a      	ldr	r2, [r3, #16]
 8018546:	4b0d      	ldr	r3, [pc, #52]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018548:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801854a:	4b0c      	ldr	r3, [pc, #48]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801854c:	4a0c      	ldr	r2, [pc, #48]	; (8018580 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801854e:	601a      	str	r2, [r3, #0]
        break;
 8018550:	e025      	b.n	801859e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8018552:	683b      	ldr	r3, [r7, #0]
 8018554:	7f1b      	ldrb	r3, [r3, #28]
 8018556:	061b      	lsls	r3, r3, #24
 8018558:	461a      	mov	r2, r3
 801855a:	69bb      	ldr	r3, [r7, #24]
 801855c:	4313      	orrs	r3, r2
 801855e:	4a07      	ldr	r2, [pc, #28]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018564:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8018566:	683b      	ldr	r3, [r7, #0]
 8018568:	7f5a      	ldrb	r2, [r3, #29]
 801856a:	683b      	ldr	r3, [r7, #0]
 801856c:	7f9b      	ldrb	r3, [r3, #30]
 801856e:	429a      	cmp	r2, r3
 8018570:	d010      	beq.n	8018594 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8018572:	4b02      	ldr	r3, [pc, #8]	; (801857c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8018574:	4a06      	ldr	r2, [pc, #24]	; (8018590 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8018576:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8018578:	e010      	b.n	801859c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 801857a:	bf00      	nop
 801857c:	4002b000 	.word	0x4002b000
 8018580:	00020201 	.word	0x00020201
 8018584:	0802f940 	.word	0x0802f940
 8018588:	0802f95c 	.word	0x0802f95c
 801858c:	0802f8c8 	.word	0x0802f8c8
 8018590:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8018594:	4b04      	ldr	r3, [pc, #16]	; (80185a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8018596:	f240 2201 	movw	r2, #513	; 0x201
 801859a:	601a      	str	r2, [r3, #0]
        break;
 801859c:	bf00      	nop
    }
}
 801859e:	bf00      	nop
 80185a0:	3724      	adds	r7, #36	; 0x24
 80185a2:	46bd      	mov	sp, r7
 80185a4:	bd90      	pop	{r4, r7, pc}
 80185a6:	bf00      	nop
 80185a8:	4002b000 	.word	0x4002b000

080185ac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80185ac:	b590      	push	{r4, r7, lr}
 80185ae:	b085      	sub	sp, #20
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	6078      	str	r0, [r7, #4]
 80185b4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80185b6:	683b      	ldr	r3, [r7, #0]
 80185b8:	7f9b      	ldrb	r3, [r3, #30]
 80185ba:	4619      	mov	r1, r3
 80185bc:	6878      	ldr	r0, [r7, #4]
 80185be:	f7ff fe47 	bl	8018250 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 80185c2:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80185c4:	4a3b      	ldr	r2, [pc, #236]	; (80186b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80185ca:	683b      	ldr	r3, [r7, #0]
 80185cc:	8adb      	ldrh	r3, [r3, #22]
 80185ce:	461a      	mov	r2, r3
 80185d0:	683b      	ldr	r3, [r7, #0]
 80185d2:	8a9b      	ldrh	r3, [r3, #20]
 80185d4:	041b      	lsls	r3, r3, #16
 80185d6:	431a      	orrs	r2, r3
 80185d8:	4b36      	ldr	r3, [pc, #216]	; (80186b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80185da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80185dc:	683b      	ldr	r3, [r7, #0]
 80185de:	691a      	ldr	r2, [r3, #16]
 80185e0:	4b34      	ldr	r3, [pc, #208]	; (80186b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80185e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80185e4:	683b      	ldr	r3, [r7, #0]
 80185e6:	8b5b      	ldrh	r3, [r3, #26]
 80185e8:	461a      	mov	r2, r3
 80185ea:	683b      	ldr	r3, [r7, #0]
 80185ec:	8a9b      	ldrh	r3, [r3, #20]
 80185ee:	1ad2      	subs	r2, r2, r3
 80185f0:	4b30      	ldr	r3, [pc, #192]	; (80186b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80185f2:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80185f4:	683b      	ldr	r3, [r7, #0]
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	2b08      	cmp	r3, #8
 80185fa:	d12f      	bne.n	801865c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80185fc:	683b      	ldr	r3, [r7, #0]
 80185fe:	8b5b      	ldrh	r3, [r3, #26]
 8018600:	461a      	mov	r2, r3
 8018602:	683b      	ldr	r3, [r7, #0]
 8018604:	8a9b      	ldrh	r3, [r3, #20]
 8018606:	1ad2      	subs	r2, r2, r3
 8018608:	4b2a      	ldr	r3, [pc, #168]	; (80186b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801860a:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 801860c:	683b      	ldr	r3, [r7, #0]
 801860e:	8b5b      	ldrh	r3, [r3, #26]
 8018610:	461a      	mov	r2, r3
 8018612:	683b      	ldr	r3, [r7, #0]
 8018614:	8a9b      	ldrh	r3, [r3, #20]
 8018616:	1ad2      	subs	r2, r2, r3
 8018618:	4b26      	ldr	r3, [pc, #152]	; (80186b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801861a:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801861c:	4a25      	ldr	r2, [pc, #148]	; (80186b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8018622:	683b      	ldr	r3, [r7, #0]
 8018624:	7f1b      	ldrb	r3, [r3, #28]
 8018626:	061b      	lsls	r3, r3, #24
 8018628:	4a22      	ldr	r2, [pc, #136]	; (80186b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801862a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801862e:	f043 0309 	orr.w	r3, r3, #9
 8018632:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8018634:	683b      	ldr	r3, [r7, #0]
 8018636:	330c      	adds	r3, #12
 8018638:	4c1e      	ldr	r4, [pc, #120]	; (80186b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801863a:	4618      	mov	r0, r3
 801863c:	f7fb fea8 	bl	8014390 <_ZNK8touchgfx9colortypecvmEv>
 8018640:	4603      	mov	r3, r0
 8018642:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8018644:	683b      	ldr	r3, [r7, #0]
 8018646:	691a      	ldr	r2, [r3, #16]
 8018648:	4b1a      	ldr	r3, [pc, #104]	; (80186b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801864a:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801864c:	683b      	ldr	r3, [r7, #0]
 801864e:	691a      	ldr	r2, [r3, #16]
 8018650:	4b18      	ldr	r3, [pc, #96]	; (80186b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8018652:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8018654:	4b17      	ldr	r3, [pc, #92]	; (80186b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8018656:	4a18      	ldr	r2, [pc, #96]	; (80186b8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8018658:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 801865a:	e027      	b.n	80186ac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 801865c:	4a15      	ldr	r2, [pc, #84]	; (80186b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8018662:	4b14      	ldr	r3, [pc, #80]	; (80186b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8018664:	2200      	movs	r2, #0
 8018666:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8018668:	683b      	ldr	r3, [r7, #0]
 801866a:	330c      	adds	r3, #12
 801866c:	4618      	mov	r0, r3
 801866e:	f7fb fe8f 	bl	8014390 <_ZNK8touchgfx9colortypecvmEv>
 8018672:	4603      	mov	r3, r0
 8018674:	0a1b      	lsrs	r3, r3, #8
 8018676:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 801867a:	683b      	ldr	r3, [r7, #0]
 801867c:	330c      	adds	r3, #12
 801867e:	4618      	mov	r0, r3
 8018680:	f7fb fe86 	bl	8014390 <_ZNK8touchgfx9colortypecvmEv>
 8018684:	4603      	mov	r3, r0
 8018686:	095b      	lsrs	r3, r3, #5
 8018688:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801868c:	431c      	orrs	r4, r3
 801868e:	683b      	ldr	r3, [r7, #0]
 8018690:	330c      	adds	r3, #12
 8018692:	4618      	mov	r0, r3
 8018694:	f7fb fe7c 	bl	8014390 <_ZNK8touchgfx9colortypecvmEv>
 8018698:	4603      	mov	r3, r0
 801869a:	08db      	lsrs	r3, r3, #3
 801869c:	f003 031f 	and.w	r3, r3, #31
 80186a0:	4a04      	ldr	r2, [pc, #16]	; (80186b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80186a2:	4323      	orrs	r3, r4
 80186a4:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80186a6:	4b03      	ldr	r3, [pc, #12]	; (80186b4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80186a8:	4a04      	ldr	r2, [pc, #16]	; (80186bc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 80186aa:	601a      	str	r2, [r3, #0]
}
 80186ac:	bf00      	nop
 80186ae:	3714      	adds	r7, #20
 80186b0:	46bd      	mov	sp, r7
 80186b2:	bd90      	pop	{r4, r7, pc}
 80186b4:	4002b000 	.word	0x4002b000
 80186b8:	00020201 	.word	0x00020201
 80186bc:	00030201 	.word	0x00030201

080186c0 <_ZN8touchgfx5paint6rgb5658tearDownEv>:
    * @fn void tearDown();
    *
    * @brief Waits until previous DMA drawing operation has finished
    */
    void tearDown()
    {
 80186c0:	b480      	push	{r7}
 80186c2:	af00      	add	r7, sp, #0
        /* Wait for DMA2D to finish last run */
        while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80186c4:	4b09      	ldr	r3, [pc, #36]	; (80186ec <_ZN8touchgfx5paint6rgb5658tearDownEv+0x2c>)
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	f003 0301 	and.w	r3, r3, #1
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	bf14      	ite	ne
 80186d0:	2301      	movne	r3, #1
 80186d2:	2300      	moveq	r3, #0
 80186d4:	b2db      	uxtb	r3, r3
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d000      	beq.n	80186dc <_ZN8touchgfx5paint6rgb5658tearDownEv+0x1c>
 80186da:	e7f3      	b.n	80186c4 <_ZN8touchgfx5paint6rgb5658tearDownEv+0x4>

        /* Clear transfer flags */
        WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC|DMA2D_FLAG_CE|DMA2D_FLAG_TE);
 80186dc:	4b03      	ldr	r3, [pc, #12]	; (80186ec <_ZN8touchgfx5paint6rgb5658tearDownEv+0x2c>)
 80186de:	2223      	movs	r2, #35	; 0x23
 80186e0:	609a      	str	r2, [r3, #8]
    }
 80186e2:	bf00      	nop
 80186e4:	46bd      	mov	sp, r7
 80186e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ea:	4770      	bx	lr
 80186ec:	4002b000 	.word	0x4002b000

080186f0 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
    *
    * @brief Renders Canvas Widget chunks using DMA.
    * This functions will not generate an interrupt, and will not affect the DMA queue.
    */
    void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
    {
 80186f0:	b480      	push	{r7}
 80186f2:	b085      	sub	sp, #20
 80186f4:	af00      	add	r7, sp, #0
 80186f6:	60f8      	str	r0, [r7, #12]
 80186f8:	60b9      	str	r1, [r7, #8]
 80186fa:	607a      	str	r2, [r7, #4]
 80186fc:	70fb      	strb	r3, [r7, #3]
        /* Wait for DMA2D to finish last run */
        while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80186fe:	4b22      	ldr	r3, [pc, #136]	; (8018788 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	f003 0301 	and.w	r3, r3, #1
 8018706:	2b00      	cmp	r3, #0
 8018708:	bf14      	ite	ne
 801870a:	2301      	movne	r3, #1
 801870c:	2300      	moveq	r3, #0
 801870e:	b2db      	uxtb	r3, r3
 8018710:	2b00      	cmp	r3, #0
 8018712:	d000      	beq.n	8018716 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x26>
 8018714:	e7f3      	b.n	80186fe <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0xe>

        /* Clear transfer flags */
        WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC|DMA2D_FLAG_CE|DMA2D_FLAG_TE);
 8018716:	4b1c      	ldr	r3, [pc, #112]	; (8018788 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8018718:	2223      	movs	r2, #35	; 0x23
 801871a:	609a      	str	r2, [r3, #8]

        /* DMA2D OPFCCR register configuration */
        WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
 801871c:	4b1a      	ldr	r3, [pc, #104]	; (8018788 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801871e:	2202      	movs	r2, #2
 8018720:	635a      	str	r2, [r3, #52]	; 0x34

        /* Configure DMA2D data size */
        WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8018722:	68bb      	ldr	r3, [r7, #8]
 8018724:	041b      	lsls	r3, r3, #16
 8018726:	4a18      	ldr	r2, [pc, #96]	; (8018788 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8018728:	f043 0301 	orr.w	r3, r3, #1
 801872c:	6453      	str	r3, [r2, #68]	; 0x44

        /* Configure DMA2D destination address */
        WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 801872e:	4a16      	ldr	r2, [pc, #88]	; (8018788 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	63d3      	str	r3, [r2, #60]	; 0x3c

        if (alpha < 0xFF)
 8018734:	78fb      	ldrb	r3, [r7, #3]
 8018736:	2bff      	cmp	r3, #255	; 0xff
 8018738:	d017      	beq.n	801876a <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x7a>
        {
            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801873a:	4b13      	ldr	r3, [pc, #76]	; (8018788 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801873c:	2202      	movs	r2, #2
 801873e:	625a      	str	r2, [r3, #36]	; 0x24

            /* Write DMA2D FGPFCCR register */
            WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8018740:	78fb      	ldrb	r3, [r7, #3]
 8018742:	061b      	lsls	r3, r3, #24
 8018744:	4a10      	ldr	r2, [pc, #64]	; (8018788 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8018746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801874a:	f043 0309 	orr.w	r3, r3, #9
 801874e:	61d3      	str	r3, [r2, #28]

            /* DMA2D FGCOLR register configuration */
            WRITE_REG(DMA2D->FGCOLR, color);
 8018750:	4a0d      	ldr	r2, [pc, #52]	; (8018788 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	6213      	str	r3, [r2, #32]

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8018756:	4a0c      	ldr	r2, [pc, #48]	; (8018788 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8018758:	68fb      	ldr	r3, [r7, #12]
 801875a:	6153      	str	r3, [r2, #20]

            /* Configure DMA2D source address */
            WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 801875c:	4a0a      	ldr	r2, [pc, #40]	; (8018788 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	60d3      	str	r3, [r2, #12]

            /* Enable the Peripheral and Enable the transfer complete interrupt */
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8018762:	4b09      	ldr	r3, [pc, #36]	; (8018788 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8018764:	4a09      	ldr	r2, [pc, #36]	; (801878c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x9c>)
 8018766:	601a      	str	r2, [r3, #0]
            WRITE_REG(DMA2D->OCOLR, color565);

            /* Enable the Peripheral and Enable the transfer complete interrupt */
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
        }
    }
 8018768:	e008      	b.n	801877c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x8c>
            WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB565 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 801876a:	4b07      	ldr	r3, [pc, #28]	; (8018788 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 801876c:	2202      	movs	r2, #2
 801876e:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->OCOLR, color565);
 8018770:	4a05      	ldr	r2, [pc, #20]	; (8018788 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8018772:	69bb      	ldr	r3, [r7, #24]
 8018774:	6393      	str	r3, [r2, #56]	; 0x38
            WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8018776:	4b04      	ldr	r3, [pc, #16]	; (8018788 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x98>)
 8018778:	4a05      	ldr	r2, [pc, #20]	; (8018790 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0xa0>)
 801877a:	601a      	str	r2, [r3, #0]
    }
 801877c:	bf00      	nop
 801877e:	3714      	adds	r7, #20
 8018780:	46bd      	mov	sp, r7
 8018782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018786:	4770      	bx	lr
 8018788:	4002b000 	.word	0x4002b000
 801878c:	00020001 	.word	0x00020001
 8018790:	00030001 	.word	0x00030001

08018794 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8018794:	b580      	push	{r7, lr}
 8018796:	b082      	sub	sp, #8
 8018798:	af00      	add	r7, sp, #0
 801879a:	6078      	str	r0, [r7, #4]
 801879c:	4a05      	ldr	r2, [pc, #20]	; (80187b4 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	601a      	str	r2, [r3, #0]
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	4618      	mov	r0, r3
 80187a6:	f7ff fbdb 	bl	8017f60 <_ZN8touchgfx9DMA_QueueD1Ev>
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	4618      	mov	r0, r3
 80187ae:	3708      	adds	r7, #8
 80187b0:	46bd      	mov	sp, r7
 80187b2:	bd80      	pop	{r7, pc}
 80187b4:	080305e8 	.word	0x080305e8

080187b8 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b082      	sub	sp, #8
 80187bc:	af00      	add	r7, sp, #0
 80187be:	6078      	str	r0, [r7, #4]
 80187c0:	6878      	ldr	r0, [r7, #4]
 80187c2:	f7ff ffe7 	bl	8018794 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80187c6:	2114      	movs	r1, #20
 80187c8:	6878      	ldr	r0, [r7, #4]
 80187ca:	f015 f851 	bl	802d870 <_ZdlPvj>
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	4618      	mov	r0, r3
 80187d2:	3708      	adds	r7, #8
 80187d4:	46bd      	mov	sp, r7
 80187d6:	bd80      	pop	{r7, pc}

080187d8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 80187d8:	b480      	push	{r7}
 80187da:	b083      	sub	sp, #12
 80187dc:	af00      	add	r7, sp, #0
 80187de:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 80187e0:	4a04      	ldr	r2, [pc, #16]	; (80187f4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	6013      	str	r3, [r2, #0]
    }
 80187e6:	bf00      	nop
 80187e8:	370c      	adds	r7, #12
 80187ea:	46bd      	mov	sp, r7
 80187ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187f0:	4770      	bx	lr
 80187f2:	bf00      	nop
 80187f4:	2000f1c8 	.word	0x2000f1c8

080187f8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80187f8:	b480      	push	{r7}
 80187fa:	b085      	sub	sp, #20
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	60f8      	str	r0, [r7, #12]
 8018800:	60b9      	str	r1, [r7, #8]
 8018802:	607a      	str	r2, [r7, #4]
 8018804:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8018806:	4a0b      	ldr	r2, [pc, #44]	; (8018834 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	601a      	str	r2, [r3, #0]
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	68ba      	ldr	r2, [r7, #8]
 8018810:	605a      	str	r2, [r3, #4]
 8018812:	68fb      	ldr	r3, [r7, #12]
 8018814:	687a      	ldr	r2, [r7, #4]
 8018816:	609a      	str	r2, [r3, #8]
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	683a      	ldr	r2, [r7, #0]
 801881c:	60da      	str	r2, [r3, #12]
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	69ba      	ldr	r2, [r7, #24]
 8018822:	611a      	str	r2, [r3, #16]
    {
    }
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	4618      	mov	r0, r3
 8018828:	3714      	adds	r7, #20
 801882a:	46bd      	mov	sp, r7
 801882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018830:	4770      	bx	lr
 8018832:	bf00      	nop
 8018834:	08030308 	.word	0x08030308

08018838 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8018838:	b480      	push	{r7}
 801883a:	b083      	sub	sp, #12
 801883c:	af00      	add	r7, sp, #0
 801883e:	6078      	str	r0, [r7, #4]
    {
 8018840:	4a04      	ldr	r2, [pc, #16]	; (8018854 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	601a      	str	r2, [r3, #0]
    }
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	4618      	mov	r0, r3
 801884a:	370c      	adds	r7, #12
 801884c:	46bd      	mov	sp, r7
 801884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018852:	4770      	bx	lr
 8018854:	08030308 	.word	0x08030308

08018858 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8018858:	b580      	push	{r7, lr}
 801885a:	b082      	sub	sp, #8
 801885c:	af00      	add	r7, sp, #0
 801885e:	6078      	str	r0, [r7, #4]
    }
 8018860:	6878      	ldr	r0, [r7, #4]
 8018862:	f7ff ffe9 	bl	8018838 <_ZN8touchgfx7MVPHeapD1Ev>
 8018866:	2114      	movs	r1, #20
 8018868:	6878      	ldr	r0, [r7, #4]
 801886a:	f015 f801 	bl	802d870 <_ZdlPvj>
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	4618      	mov	r0, r3
 8018872:	3708      	adds	r7, #8
 8018874:	46bd      	mov	sp, r7
 8018876:	bd80      	pop	{r7, pc}

08018878 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8018878:	b480      	push	{r7}
 801887a:	b083      	sub	sp, #12
 801887c:	af00      	add	r7, sp, #0
 801887e:	6078      	str	r0, [r7, #4]
    {
 8018880:	4a04      	ldr	r2, [pc, #16]	; (8018894 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	601a      	str	r2, [r3, #0]
    }
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	4618      	mov	r0, r3
 801888a:	370c      	adds	r7, #12
 801888c:	46bd      	mov	sp, r7
 801888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018892:	4770      	bx	lr
 8018894:	080309f0 	.word	0x080309f0

08018898 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8018898:	b580      	push	{r7, lr}
 801889a:	b082      	sub	sp, #8
 801889c:	af00      	add	r7, sp, #0
 801889e:	6078      	str	r0, [r7, #4]
    }
 80188a0:	6878      	ldr	r0, [r7, #4]
 80188a2:	f7ff ffe9 	bl	8018878 <_ZN8touchgfx3LCDD1Ev>
 80188a6:	2108      	movs	r1, #8
 80188a8:	6878      	ldr	r0, [r7, #4]
 80188aa:	f014 ffe1 	bl	802d870 <_ZdlPvj>
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	4618      	mov	r0, r3
 80188b2:	3708      	adds	r7, #8
 80188b4:	46bd      	mov	sp, r7
 80188b6:	bd80      	pop	{r7, pc}

080188b8 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80188b8:	b480      	push	{r7}
 80188ba:	b083      	sub	sp, #12
 80188bc:	af00      	add	r7, sp, #0
 80188be:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	2200      	movs	r2, #0
 80188c4:	801a      	strh	r2, [r3, #0]
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	2200      	movs	r2, #0
 80188ca:	805a      	strh	r2, [r3, #2]
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	2200      	movs	r2, #0
 80188d0:	809a      	strh	r2, [r3, #4]
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	2200      	movs	r2, #0
 80188d6:	80da      	strh	r2, [r3, #6]
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	2200      	movs	r2, #0
 80188dc:	811a      	strh	r2, [r3, #8]
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	2200      	movs	r2, #0
 80188e2:	815a      	strh	r2, [r3, #10]
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	2200      	movs	r2, #0
 80188e8:	819a      	strh	r2, [r3, #12]
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	2200      	movs	r2, #0
 80188ee:	739a      	strb	r2, [r3, #14]
        {
        }
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	4618      	mov	r0, r3
 80188f4:	370c      	adds	r7, #12
 80188f6:	46bd      	mov	sp, r7
 80188f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188fc:	4770      	bx	lr

080188fe <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80188fe:	b580      	push	{r7, lr}
 8018900:	b082      	sub	sp, #8
 8018902:	af00      	add	r7, sp, #0
 8018904:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	4618      	mov	r0, r3
 801890a:	f7ff ffd5 	bl	80188b8 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	2200      	movs	r2, #0
 8018912:	611a      	str	r2, [r3, #16]
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	2200      	movs	r2, #0
 8018918:	829a      	strh	r2, [r3, #20]
    {
    }
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	4618      	mov	r0, r3
 801891e:	3708      	adds	r7, #8
 8018920:	46bd      	mov	sp, r7
 8018922:	bd80      	pop	{r7, pc}

08018924 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8018924:	b580      	push	{r7, lr}
 8018926:	b084      	sub	sp, #16
 8018928:	af00      	add	r7, sp, #0
 801892a:	60f8      	str	r0, [r7, #12]
 801892c:	60b9      	str	r1, [r7, #8]
 801892e:	607a      	str	r2, [r7, #4]
 8018930:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8018932:	4a55      	ldr	r2, [pc, #340]	; (8018a88 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8018934:	68fb      	ldr	r3, [r7, #12]
 8018936:	601a      	str	r2, [r3, #0]
 8018938:	68fb      	ldr	r3, [r7, #12]
 801893a:	68ba      	ldr	r2, [r7, #8]
 801893c:	605a      	str	r2, [r3, #4]
 801893e:	68fb      	ldr	r3, [r7, #12]
 8018940:	687a      	ldr	r2, [r7, #4]
 8018942:	609a      	str	r2, [r3, #8]
 8018944:	68fb      	ldr	r3, [r7, #12]
 8018946:	683a      	ldr	r2, [r7, #0]
 8018948:	60da      	str	r2, [r3, #12]
 801894a:	68fb      	ldr	r3, [r7, #12]
 801894c:	2200      	movs	r2, #0
 801894e:	611a      	str	r2, [r3, #16]
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	2200      	movs	r2, #0
 8018954:	615a      	str	r2, [r3, #20]
 8018956:	68fb      	ldr	r3, [r7, #12]
 8018958:	2200      	movs	r2, #0
 801895a:	619a      	str	r2, [r3, #24]
 801895c:	68fb      	ldr	r3, [r7, #12]
 801895e:	331c      	adds	r3, #28
 8018960:	4618      	mov	r0, r3
 8018962:	f7ff ffcc 	bl	80188fe <_ZN8touchgfx8GesturesC1Ev>
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	2200      	movs	r2, #0
 801896a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	2200      	movs	r2, #0
 8018972:	639a      	str	r2, [r3, #56]	; 0x38
 8018974:	68fb      	ldr	r3, [r7, #12]
 8018976:	2200      	movs	r2, #0
 8018978:	63da      	str	r2, [r3, #60]	; 0x3c
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	2200      	movs	r2, #0
 801897e:	641a      	str	r2, [r3, #64]	; 0x40
 8018980:	68fb      	ldr	r3, [r7, #12]
 8018982:	2200      	movs	r2, #0
 8018984:	645a      	str	r2, [r3, #68]	; 0x44
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	2200      	movs	r2, #0
 801898a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	2201      	movs	r2, #1
 8018992:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	2200      	movs	r2, #0
 801899a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	2200      	movs	r2, #0
 80189a2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	2200      	movs	r2, #0
 80189aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	3350      	adds	r3, #80	; 0x50
 80189b0:	4618      	mov	r0, r3
 80189b2:	f7f8 f800 	bl	80109b6 <_ZN8touchgfx4RectC1Ev>
 80189b6:	68fb      	ldr	r3, [r7, #12]
 80189b8:	2200      	movs	r2, #0
 80189ba:	659a      	str	r2, [r3, #88]	; 0x58
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	2200      	movs	r2, #0
 80189c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80189c2:	68fb      	ldr	r3, [r7, #12]
 80189c4:	2200      	movs	r2, #0
 80189c6:	661a      	str	r2, [r3, #96]	; 0x60
 80189c8:	68fb      	ldr	r3, [r7, #12]
 80189ca:	2201      	movs	r2, #1
 80189cc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80189d0:	68fb      	ldr	r3, [r7, #12]
 80189d2:	2200      	movs	r2, #0
 80189d4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80189d8:	68fb      	ldr	r3, [r7, #12]
 80189da:	2200      	movs	r2, #0
 80189dc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80189e0:	68fb      	ldr	r3, [r7, #12]
 80189e2:	2201      	movs	r2, #1
 80189e4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80189e8:	68fb      	ldr	r3, [r7, #12]
 80189ea:	2200      	movs	r2, #0
 80189ec:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	2200      	movs	r2, #0
 80189f4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	2200      	movs	r2, #0
 80189fc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8018a00:	68fb      	ldr	r3, [r7, #12]
 8018a02:	2200      	movs	r2, #0
 8018a04:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8018a08:	68fb      	ldr	r3, [r7, #12]
 8018a0a:	2200      	movs	r2, #0
 8018a0c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8018a10:	68fb      	ldr	r3, [r7, #12]
 8018a12:	2200      	movs	r2, #0
 8018a14:	671a      	str	r2, [r3, #112]	; 0x70
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	2200      	movs	r2, #0
 8018a1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8018a1e:	68fb      	ldr	r3, [r7, #12]
 8018a20:	2200      	movs	r2, #0
 8018a22:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	2200      	movs	r2, #0
 8018a2a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8018a2e:	68fb      	ldr	r3, [r7, #12]
 8018a30:	2201      	movs	r2, #1
 8018a32:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8018a36:	68fb      	ldr	r3, [r7, #12]
 8018a38:	2201      	movs	r2, #1
 8018a3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8018a3e:	4a13      	ldr	r2, [pc, #76]	; (8018a8c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8018a44:	4a12      	ldr	r2, [pc, #72]	; (8018a90 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8018a46:	8b3b      	ldrh	r3, [r7, #24]
 8018a48:	8013      	strh	r3, [r2, #0]
 8018a4a:	4b11      	ldr	r3, [pc, #68]	; (8018a90 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8018a4c:	881a      	ldrh	r2, [r3, #0]
 8018a4e:	4b11      	ldr	r3, [pc, #68]	; (8018a94 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8018a50:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8018a52:	4a11      	ldr	r2, [pc, #68]	; (8018a98 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8018a54:	8bbb      	ldrh	r3, [r7, #28]
 8018a56:	8013      	strh	r3, [r2, #0]
 8018a58:	4b0f      	ldr	r3, [pc, #60]	; (8018a98 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8018a5a:	881a      	ldrh	r2, [r3, #0]
 8018a5c:	4b0f      	ldr	r3, [pc, #60]	; (8018a9c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8018a5e:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8018a60:	4b0f      	ldr	r3, [pc, #60]	; (8018aa0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8018a62:	2200      	movs	r2, #0
 8018a64:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8018a66:	8b3a      	ldrh	r2, [r7, #24]
 8018a68:	8bbb      	ldrh	r3, [r7, #28]
 8018a6a:	429a      	cmp	r2, r3
 8018a6c:	bf34      	ite	cc
 8018a6e:	2301      	movcc	r3, #1
 8018a70:	2300      	movcs	r3, #0
 8018a72:	b2db      	uxtb	r3, r3
 8018a74:	461a      	mov	r2, r3
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	4618      	mov	r0, r3
 8018a80:	3710      	adds	r7, #16
 8018a82:	46bd      	mov	sp, r7
 8018a84:	bd80      	pop	{r7, pc}
 8018a86:	bf00      	nop
 8018a88:	080304c0 	.word	0x080304c0
 8018a8c:	2000f164 	.word	0x2000f164
 8018a90:	2000f156 	.word	0x2000f156
 8018a94:	2000f15c 	.word	0x2000f15c
 8018a98:	2000f158 	.word	0x2000f158
 8018a9c:	2000f15e 	.word	0x2000f15e
 8018aa0:	2000f15a 	.word	0x2000f15a

08018aa4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8018aa4:	b580      	push	{r7, lr}
 8018aa6:	b082      	sub	sp, #8
 8018aa8:	af00      	add	r7, sp, #0
 8018aaa:	6078      	str	r0, [r7, #4]
 8018aac:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen2ScreenNoTransition();
 8018aae:	683b      	ldr	r3, [r7, #0]
 8018ab0:	4618      	mov	r0, r3
 8018ab2:	f7f7 fcdf 	bl	8010474 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
    }
 8018ab6:	bf00      	nop
 8018ab8:	3708      	adds	r7, #8
 8018aba:	46bd      	mov	sp, r7
 8018abc:	bd80      	pop	{r7, pc}
	...

08018ac0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	b086      	sub	sp, #24
 8018ac4:	af02      	add	r7, sp, #8
 8018ac6:	60f8      	str	r0, [r7, #12]
 8018ac8:	60b9      	str	r1, [r7, #8]
 8018aca:	607a      	str	r2, [r7, #4]
 8018acc:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8018ace:	68f8      	ldr	r0, [r7, #12]
 8018ad0:	69bb      	ldr	r3, [r7, #24]
 8018ad2:	9300      	str	r3, [sp, #0]
 8018ad4:	683b      	ldr	r3, [r7, #0]
 8018ad6:	687a      	ldr	r2, [r7, #4]
 8018ad8:	68b9      	ldr	r1, [r7, #8]
 8018ada:	f7ff fe8d 	bl	80187f8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8018ade:	4a04      	ldr	r2, [pc, #16]	; (8018af0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	601a      	str	r2, [r3, #0]
    {

    }
 8018ae4:	68fb      	ldr	r3, [r7, #12]
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	3710      	adds	r7, #16
 8018aea:	46bd      	mov	sp, r7
 8018aec:	bd80      	pop	{r7, pc}
 8018aee:	bf00      	nop
 8018af0:	080302f4 	.word	0x080302f4

08018af4 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8018af4:	b580      	push	{r7, lr}
 8018af6:	af00      	add	r7, sp, #0
 8018af8:	4801      	ldr	r0, [pc, #4]	; (8018b00 <__tcf_0+0xc>)
 8018afa:	f000 f967 	bl	8018dcc <_ZN12FrontendHeapD1Ev>
 8018afe:	bd80      	pop	{r7, pc}
 8018b00:	20007ba8 	.word	0x20007ba8

08018b04 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8018b04:	b580      	push	{r7, lr}
 8018b06:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8018b08:	4b12      	ldr	r3, [pc, #72]	; (8018b54 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8018b0a:	781b      	ldrb	r3, [r3, #0]
 8018b0c:	f3bf 8f5b 	dmb	ish
 8018b10:	b2db      	uxtb	r3, r3
 8018b12:	f003 0301 	and.w	r3, r3, #1
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	bf0c      	ite	eq
 8018b1a:	2301      	moveq	r3, #1
 8018b1c:	2300      	movne	r3, #0
 8018b1e:	b2db      	uxtb	r3, r3
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d013      	beq.n	8018b4c <_ZN12FrontendHeap11getInstanceEv+0x48>
 8018b24:	480b      	ldr	r0, [pc, #44]	; (8018b54 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8018b26:	f014 fea5 	bl	802d874 <__cxa_guard_acquire>
 8018b2a:	4603      	mov	r3, r0
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	bf14      	ite	ne
 8018b30:	2301      	movne	r3, #1
 8018b32:	2300      	moveq	r3, #0
 8018b34:	b2db      	uxtb	r3, r3
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d008      	beq.n	8018b4c <_ZN12FrontendHeap11getInstanceEv+0x48>
 8018b3a:	4807      	ldr	r0, [pc, #28]	; (8018b58 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8018b3c:	f000 f868 	bl	8018c10 <_ZN12FrontendHeapC1Ev>
 8018b40:	4806      	ldr	r0, [pc, #24]	; (8018b5c <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8018b42:	f014 fee1 	bl	802d908 <atexit>
 8018b46:	4803      	ldr	r0, [pc, #12]	; (8018b54 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8018b48:	f014 fea0 	bl	802d88c <__cxa_guard_release>
        return instance;
 8018b4c:	4b02      	ldr	r3, [pc, #8]	; (8018b58 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8018b4e:	4618      	mov	r0, r3
 8018b50:	bd80      	pop	{r7, pc}
 8018b52:	bf00      	nop
 8018b54:	2000e2b0 	.word	0x2000e2b0
 8018b58:	20007ba8 	.word	0x20007ba8
 8018b5c:	08018af5 	.word	0x08018af5

08018b60 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8018b60:	b580      	push	{r7, lr}
 8018b62:	b082      	sub	sp, #8
 8018b64:	af00      	add	r7, sp, #0
 8018b66:	6078      	str	r0, [r7, #4]
 8018b68:	4a05      	ldr	r2, [pc, #20]	; (8018b80 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	601a      	str	r2, [r3, #0]
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	4618      	mov	r0, r3
 8018b72:	f7ff fe61 	bl	8018838 <_ZN8touchgfx7MVPHeapD1Ev>
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	4618      	mov	r0, r3
 8018b7a:	3708      	adds	r7, #8
 8018b7c:	46bd      	mov	sp, r7
 8018b7e:	bd80      	pop	{r7, pc}
 8018b80:	080302f4 	.word	0x080302f4

08018b84 <_ZN16FrontendHeapBaseD0Ev>:
 8018b84:	b580      	push	{r7, lr}
 8018b86:	b082      	sub	sp, #8
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	6078      	str	r0, [r7, #4]
 8018b8c:	6878      	ldr	r0, [r7, #4]
 8018b8e:	f7ff ffe7 	bl	8018b60 <_ZN16FrontendHeapBaseD1Ev>
 8018b92:	2114      	movs	r1, #20
 8018b94:	6878      	ldr	r0, [r7, #4]
 8018b96:	f014 fe6b 	bl	802d870 <_ZdlPvj>
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	3708      	adds	r7, #8
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	bd80      	pop	{r7, pc}

08018ba4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8018ba4:	b580      	push	{r7, lr}
 8018ba6:	b082      	sub	sp, #8
 8018ba8:	af00      	add	r7, sp, #0
 8018baa:	6078      	str	r0, [r7, #4]
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	4618      	mov	r0, r3
 8018bb0:	f000 fcc2 	bl	8019538 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8018bb4:	4a03      	ldr	r2, [pc, #12]	; (8018bc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	601a      	str	r2, [r3, #0]
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	3708      	adds	r7, #8
 8018bc0:	46bd      	mov	sp, r7
 8018bc2:	bd80      	pop	{r7, pc}
 8018bc4:	080302c0 	.word	0x080302c0

08018bc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8018bc8:	b580      	push	{r7, lr}
 8018bca:	b082      	sub	sp, #8
 8018bcc:	af00      	add	r7, sp, #0
 8018bce:	6078      	str	r0, [r7, #4]
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	f000 fcb0 	bl	8019538 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8018bd8:	4a03      	ldr	r2, [pc, #12]	; (8018be8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	601a      	str	r2, [r3, #0]
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	4618      	mov	r0, r3
 8018be2:	3708      	adds	r7, #8
 8018be4:	46bd      	mov	sp, r7
 8018be6:	bd80      	pop	{r7, pc}
 8018be8:	0803028c 	.word	0x0803028c

08018bec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8018bec:	b580      	push	{r7, lr}
 8018bee:	b082      	sub	sp, #8
 8018bf0:	af00      	add	r7, sp, #0
 8018bf2:	6078      	str	r0, [r7, #4]
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	4618      	mov	r0, r3
 8018bf8:	f000 fc9e 	bl	8019538 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8018bfc:	4a03      	ldr	r2, [pc, #12]	; (8018c0c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	601a      	str	r2, [r3, #0]
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	4618      	mov	r0, r3
 8018c06:	3708      	adds	r7, #8
 8018c08:	46bd      	mov	sp, r7
 8018c0a:	bd80      	pop	{r7, pc}
 8018c0c:	08030258 	.word	0x08030258

08018c10 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8018c10:	b590      	push	{r4, r7, lr}
 8018c12:	b085      	sub	sp, #20
 8018c14:	af02      	add	r7, sp, #8
 8018c16:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8018c18:	6878      	ldr	r0, [r7, #4]
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	f103 0114 	add.w	r1, r3, #20
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	f503 42cb 	add.w	r2, r3, #25984	; 0x6580
 8018c2c:	3218      	adds	r2, #24
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8018c34:	332c      	adds	r3, #44	; 0x2c
                     app(model, *this)
 8018c36:	9300      	str	r3, [sp, #0]
 8018c38:	4613      	mov	r3, r2
 8018c3a:	4622      	mov	r2, r4
 8018c3c:	f7ff ff40 	bl	8018ac0 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8018c40:	4a1a      	ldr	r2, [pc, #104]	; (8018cac <_ZN12FrontendHeapC1Ev+0x9c>)
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	601a      	str	r2, [r3, #0]
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	3314      	adds	r3, #20
 8018c4a:	4618      	mov	r0, r3
 8018c4c:	f7ff ffaa 	bl	8018ba4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	332c      	adds	r3, #44	; 0x2c
 8018c54:	4618      	mov	r0, r3
 8018c56:	f7ff ffb7 	bl	8018bc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8018c60:	3318      	adds	r3, #24
 8018c62:	4618      	mov	r0, r3
 8018c64:	f7ff ffc2 	bl	8018bec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8018c6e:	332c      	adds	r3, #44	; 0x2c
 8018c70:	687a      	ldr	r2, [r7, #4]
 8018c72:	f502 41ce 	add.w	r1, r2, #26368	; 0x6700
 8018c76:	3104      	adds	r1, #4
 8018c78:	687a      	ldr	r2, [r7, #4]
 8018c7a:	4618      	mov	r0, r3
 8018c7c:	f7fd fa0c 	bl	8016098 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	f503 43ce 	add.w	r3, r3, #26368	; 0x6700
 8018c86:	3304      	adds	r3, #4
 8018c88:	4618      	mov	r0, r3
 8018c8a:	f7fe fc21 	bl	80174d0 <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8018c8e:	687a      	ldr	r2, [r7, #4]
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8018c96:	332c      	adds	r3, #44	; 0x2c
 8018c98:	4619      	mov	r1, r3
 8018c9a:	4610      	mov	r0, r2
 8018c9c:	f7ff ff02 	bl	8018aa4 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	4618      	mov	r0, r3
 8018ca4:	370c      	adds	r7, #12
 8018ca6:	46bd      	mov	sp, r7
 8018ca8:	bd90      	pop	{r4, r7, pc}
 8018caa:	bf00      	nop
 8018cac:	08030244 	.word	0x08030244

08018cb0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8018cb0:	b580      	push	{r7, lr}
 8018cb2:	b086      	sub	sp, #24
 8018cb4:	af02      	add	r7, sp, #8
 8018cb6:	60f8      	str	r0, [r7, #12]
 8018cb8:	60b9      	str	r1, [r7, #8]
 8018cba:	607a      	str	r2, [r7, #4]
 8018cbc:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8018cbe:	68f8      	ldr	r0, [r7, #12]
 8018cc0:	8bbb      	ldrh	r3, [r7, #28]
 8018cc2:	9301      	str	r3, [sp, #4]
 8018cc4:	8b3b      	ldrh	r3, [r7, #24]
 8018cc6:	9300      	str	r3, [sp, #0]
 8018cc8:	683b      	ldr	r3, [r7, #0]
 8018cca:	687a      	ldr	r2, [r7, #4]
 8018ccc:	68b9      	ldr	r1, [r7, #8]
 8018cce:	f7ff fe29 	bl	8018924 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8018cd2:	4a04      	ldr	r2, [pc, #16]	; (8018ce4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8018cd4:	68fb      	ldr	r3, [r7, #12]
 8018cd6:	601a      	str	r2, [r3, #0]
    }
 8018cd8:	68fb      	ldr	r3, [r7, #12]
 8018cda:	4618      	mov	r0, r3
 8018cdc:	3710      	adds	r7, #16
 8018cde:	46bd      	mov	sp, r7
 8018ce0:	bd80      	pop	{r7, pc}
 8018ce2:	bf00      	nop
 8018ce4:	08030318 	.word	0x08030318

08018ce8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8018ce8:	b580      	push	{r7, lr}
 8018cea:	b086      	sub	sp, #24
 8018cec:	af02      	add	r7, sp, #8
 8018cee:	60f8      	str	r0, [r7, #12]
 8018cf0:	60b9      	str	r1, [r7, #8]
 8018cf2:	607a      	str	r2, [r7, #4]
 8018cf4:	603b      	str	r3, [r7, #0]
 8018cf6:	68f8      	ldr	r0, [r7, #12]
 8018cf8:	8bbb      	ldrh	r3, [r7, #28]
 8018cfa:	9301      	str	r3, [sp, #4]
 8018cfc:	8b3b      	ldrh	r3, [r7, #24]
 8018cfe:	9300      	str	r3, [sp, #0]
 8018d00:	683b      	ldr	r3, [r7, #0]
 8018d02:	687a      	ldr	r2, [r7, #4]
 8018d04:	68b9      	ldr	r1, [r7, #8]
 8018d06:	f7ff ffd3 	bl	8018cb0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8018d0a:	4a04      	ldr	r2, [pc, #16]	; (8018d1c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	601a      	str	r2, [r3, #0]
    }
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	4618      	mov	r0, r3
 8018d14:	3710      	adds	r7, #16
 8018d16:	46bd      	mov	sp, r7
 8018d18:	bd80      	pop	{r7, pc}
 8018d1a:	bf00      	nop
 8018d1c:	080300f8 	.word	0x080300f8

08018d20 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8018d20:	b480      	push	{r7}
 8018d22:	b083      	sub	sp, #12
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	6078      	str	r0, [r7, #4]
 8018d28:	4a04      	ldr	r2, [pc, #16]	; (8018d3c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	601a      	str	r2, [r3, #0]
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	4618      	mov	r0, r3
 8018d32:	370c      	adds	r7, #12
 8018d34:	46bd      	mov	sp, r7
 8018d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d3a:	4770      	bx	lr
 8018d3c:	080300e0 	.word	0x080300e0

08018d40 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8018d40:	b580      	push	{r7, lr}
 8018d42:	b082      	sub	sp, #8
 8018d44:	af00      	add	r7, sp, #0
 8018d46:	6078      	str	r0, [r7, #4]
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	4618      	mov	r0, r3
 8018d4c:	f7ff ffe8 	bl	8018d20 <_ZN8touchgfx15TouchControllerC1Ev>
 8018d50:	4a03      	ldr	r2, [pc, #12]	; (8018d60 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	601a      	str	r2, [r3, #0]
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	4618      	mov	r0, r3
 8018d5a:	3708      	adds	r7, #8
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	bd80      	pop	{r7, pc}
 8018d60:	080300c8 	.word	0x080300c8

08018d64 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8018d64:	b590      	push	{r4, r7, lr}
 8018d66:	b085      	sub	sp, #20
 8018d68:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8018d6a:	f7fc ff5f 	bl	8015c2c <_ZN14BitmapDatabase11getInstanceEv>
 8018d6e:	4604      	mov	r4, r0
 8018d70:	f7fc ff66 	bl	8015c40 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8018d74:	4603      	mov	r3, r0
 8018d76:	4619      	mov	r1, r3
 8018d78:	2300      	movs	r3, #0
 8018d7a:	9300      	str	r3, [sp, #0]
 8018d7c:	2300      	movs	r3, #0
 8018d7e:	2200      	movs	r2, #0
 8018d80:	4620      	mov	r0, r4
 8018d82:	f008 fc7f 	bl	8021684 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8018d86:	4809      	ldr	r0, [pc, #36]	; (8018dac <touchgfx_init+0x48>)
 8018d88:	f7ff fd26 	bl	80187d8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8018d8c:	2000      	movs	r0, #0
 8018d8e:	f7fd f89b 	bl	8015ec8 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8018d92:	4807      	ldr	r0, [pc, #28]	; (8018db0 <touchgfx_init+0x4c>)
 8018d94:	f008 fbde 	bl	8021554 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8018d98:	f7ff feb4 	bl	8018b04 <_ZN12FrontendHeap11getInstanceEv>
 8018d9c:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8018d9e:	4805      	ldr	r0, [pc, #20]	; (8018db4 <touchgfx_init+0x50>)
 8018da0:	f7fe ff74 	bl	8017c8c <_ZN11TouchGFXHAL10initializeEv>
}
 8018da4:	bf00      	nop
 8018da6:	370c      	adds	r7, #12
 8018da8:	46bd      	mov	sp, r7
 8018daa:	bd90      	pop	{r4, r7, pc}
 8018dac:	2000f0d0 	.word	0x2000f0d0
 8018db0:	2000001c 	.word	0x2000001c
 8018db4:	2000f0d4 	.word	0x2000f0d4

08018db8 <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 8018db8:	b580      	push	{r7, lr}
 8018dba:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8018dbc:	4802      	ldr	r0, [pc, #8]	; (8018dc8 <touchgfx_taskEntry+0x10>)
 8018dbe:	f000 fecc 	bl	8019b5a <_ZN8touchgfx3HAL9taskEntryEv>
}
 8018dc2:	bf00      	nop
 8018dc4:	bd80      	pop	{r7, pc}
 8018dc6:	bf00      	nop
 8018dc8:	2000f0d4 	.word	0x2000f0d4

08018dcc <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8018dcc:	b580      	push	{r7, lr}
 8018dce:	b082      	sub	sp, #8
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	6078      	str	r0, [r7, #4]
 8018dd4:	4a11      	ldr	r2, [pc, #68]	; (8018e1c <_ZN12FrontendHeapD1Ev+0x50>)
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	601a      	str	r2, [r3, #0]
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8018de0:	332c      	adds	r3, #44	; 0x2c
 8018de2:	4618      	mov	r0, r3
 8018de4:	f7fd f922 	bl	801602c <_ZN19FrontendApplicationD1Ev>
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	f503 43cb 	add.w	r3, r3, #25984	; 0x6580
 8018dee:	3318      	adds	r3, #24
 8018df0:	4618      	mov	r0, r3
 8018df2:	f000 f827 	bl	8018e44 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	332c      	adds	r3, #44	; 0x2c
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	f000 f844 	bl	8018e88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	3314      	adds	r3, #20
 8018e04:	4618      	mov	r0, r3
 8018e06:	f000 f863 	bl	8018ed0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	4618      	mov	r0, r3
 8018e0e:	f7ff fea7 	bl	8018b60 <_ZN16FrontendHeapBaseD1Ev>
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	4618      	mov	r0, r3
 8018e16:	3708      	adds	r7, #8
 8018e18:	46bd      	mov	sp, r7
 8018e1a:	bd80      	pop	{r7, pc}
 8018e1c:	08030244 	.word	0x08030244

08018e20 <_ZN12FrontendHeapD0Ev>:
 8018e20:	b580      	push	{r7, lr}
 8018e22:	b082      	sub	sp, #8
 8018e24:	af00      	add	r7, sp, #0
 8018e26:	6078      	str	r0, [r7, #4]
 8018e28:	6878      	ldr	r0, [r7, #4]
 8018e2a:	f7ff ffcf 	bl	8018dcc <_ZN12FrontendHeapD1Ev>
 8018e2e:	f246 7108 	movw	r1, #26376	; 0x6708
 8018e32:	6878      	ldr	r0, [r7, #4]
 8018e34:	f014 fd1c 	bl	802d870 <_ZdlPvj>
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	4618      	mov	r0, r3
 8018e3c:	3708      	adds	r7, #8
 8018e3e:	46bd      	mov	sp, r7
 8018e40:	bd80      	pop	{r7, pc}
	...

08018e44 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8018e44:	b580      	push	{r7, lr}
 8018e46:	b082      	sub	sp, #8
 8018e48:	af00      	add	r7, sp, #0
 8018e4a:	6078      	str	r0, [r7, #4]
 8018e4c:	4a05      	ldr	r2, [pc, #20]	; (8018e64 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	601a      	str	r2, [r3, #0]
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	4618      	mov	r0, r3
 8018e56:	f000 fb6e 	bl	8019536 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	3708      	adds	r7, #8
 8018e60:	46bd      	mov	sp, r7
 8018e62:	bd80      	pop	{r7, pc}
 8018e64:	08030258 	.word	0x08030258

08018e68 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	b082      	sub	sp, #8
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	6078      	str	r0, [r7, #4]
 8018e70:	6878      	ldr	r0, [r7, #4]
 8018e72:	f7ff ffe7 	bl	8018e44 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8018e76:	2114      	movs	r1, #20
 8018e78:	6878      	ldr	r0, [r7, #4]
 8018e7a:	f014 fcf9 	bl	802d870 <_ZdlPvj>
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	4618      	mov	r0, r3
 8018e82:	3708      	adds	r7, #8
 8018e84:	46bd      	mov	sp, r7
 8018e86:	bd80      	pop	{r7, pc}

08018e88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b082      	sub	sp, #8
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
 8018e90:	4a05      	ldr	r2, [pc, #20]	; (8018ea8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	601a      	str	r2, [r3, #0]
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	4618      	mov	r0, r3
 8018e9a:	f000 fb4c 	bl	8019536 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	4618      	mov	r0, r3
 8018ea2:	3708      	adds	r7, #8
 8018ea4:	46bd      	mov	sp, r7
 8018ea6:	bd80      	pop	{r7, pc}
 8018ea8:	0803028c 	.word	0x0803028c

08018eac <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8018eac:	b580      	push	{r7, lr}
 8018eae:	b082      	sub	sp, #8
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	6078      	str	r0, [r7, #4]
 8018eb4:	6878      	ldr	r0, [r7, #4]
 8018eb6:	f7ff ffe7 	bl	8018e88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8018eba:	f246 516c 	movw	r1, #25964	; 0x656c
 8018ebe:	6878      	ldr	r0, [r7, #4]
 8018ec0:	f014 fcd6 	bl	802d870 <_ZdlPvj>
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	4618      	mov	r0, r3
 8018ec8:	3708      	adds	r7, #8
 8018eca:	46bd      	mov	sp, r7
 8018ecc:	bd80      	pop	{r7, pc}
	...

08018ed0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8018ed0:	b580      	push	{r7, lr}
 8018ed2:	b082      	sub	sp, #8
 8018ed4:	af00      	add	r7, sp, #0
 8018ed6:	6078      	str	r0, [r7, #4]
 8018ed8:	4a05      	ldr	r2, [pc, #20]	; (8018ef0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	601a      	str	r2, [r3, #0]
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	f000 fb28 	bl	8019536 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	4618      	mov	r0, r3
 8018eea:	3708      	adds	r7, #8
 8018eec:	46bd      	mov	sp, r7
 8018eee:	bd80      	pop	{r7, pc}
 8018ef0:	080302c0 	.word	0x080302c0

08018ef4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8018ef4:	b580      	push	{r7, lr}
 8018ef6:	b082      	sub	sp, #8
 8018ef8:	af00      	add	r7, sp, #0
 8018efa:	6078      	str	r0, [r7, #4]
 8018efc:	6878      	ldr	r0, [r7, #4]
 8018efe:	f7ff ffe7 	bl	8018ed0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8018f02:	2118      	movs	r1, #24
 8018f04:	6878      	ldr	r0, [r7, #4]
 8018f06:	f014 fcb3 	bl	802d870 <_ZdlPvj>
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	4618      	mov	r0, r3
 8018f0e:	3708      	adds	r7, #8
 8018f10:	46bd      	mov	sp, r7
 8018f12:	bd80      	pop	{r7, pc}

08018f14 <_ZN8touchgfx8LCD16bppD1Ev>:
class LCD16bpp : public LCD
 8018f14:	b580      	push	{r7, lr}
 8018f16:	b082      	sub	sp, #8
 8018f18:	af00      	add	r7, sp, #0
 8018f1a:	6078      	str	r0, [r7, #4]
 8018f1c:	4a05      	ldr	r2, [pc, #20]	; (8018f34 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	601a      	str	r2, [r3, #0]
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	4618      	mov	r0, r3
 8018f26:	f7ff fca7 	bl	8018878 <_ZN8touchgfx3LCDD1Ev>
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	4618      	mov	r0, r3
 8018f2e:	3708      	adds	r7, #8
 8018f30:	46bd      	mov	sp, r7
 8018f32:	bd80      	pop	{r7, pc}
 8018f34:	08030df4 	.word	0x08030df4

08018f38 <_ZN8touchgfx8LCD16bppD0Ev>:
 8018f38:	b580      	push	{r7, lr}
 8018f3a:	b082      	sub	sp, #8
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	6078      	str	r0, [r7, #4]
 8018f40:	6878      	ldr	r0, [r7, #4]
 8018f42:	f7ff ffe7 	bl	8018f14 <_ZN8touchgfx8LCD16bppD1Ev>
 8018f46:	2178      	movs	r1, #120	; 0x78
 8018f48:	6878      	ldr	r0, [r7, #4]
 8018f4a:	f014 fc91 	bl	802d870 <_ZdlPvj>
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	4618      	mov	r0, r3
 8018f52:	3708      	adds	r7, #8
 8018f54:	46bd      	mov	sp, r7
 8018f56:	bd80      	pop	{r7, pc}

08018f58 <_Z41__static_initialization_and_destruction_0ii>:
 8018f58:	b580      	push	{r7, lr}
 8018f5a:	b084      	sub	sp, #16
 8018f5c:	af02      	add	r7, sp, #8
 8018f5e:	6078      	str	r0, [r7, #4]
 8018f60:	6039      	str	r1, [r7, #0]
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	2b01      	cmp	r3, #1
 8018f66:	d119      	bne.n	8018f9c <_Z41__static_initialization_and_destruction_0ii+0x44>
 8018f68:	683b      	ldr	r3, [r7, #0]
 8018f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018f6e:	4293      	cmp	r3, r2
 8018f70:	d114      	bne.n	8018f9c <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8018f72:	4818      	ldr	r0, [pc, #96]	; (8018fd4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8018f74:	f7ff fee4 	bl	8018d40 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8018f78:	4817      	ldr	r0, [pc, #92]	; (8018fd8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018f7a:	f7ff f8a1 	bl	80180c0 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8018f7e:	4817      	ldr	r0, [pc, #92]	; (8018fdc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8018f80:	f00b fc80 	bl	8024884 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8018f84:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8018f88:	9301      	str	r3, [sp, #4]
 8018f8a:	f44f 7348 	mov.w	r3, #800	; 0x320
 8018f8e:	9300      	str	r3, [sp, #0]
 8018f90:	4b10      	ldr	r3, [pc, #64]	; (8018fd4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8018f92:	4a12      	ldr	r2, [pc, #72]	; (8018fdc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8018f94:	4910      	ldr	r1, [pc, #64]	; (8018fd8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018f96:	4812      	ldr	r0, [pc, #72]	; (8018fe0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018f98:	f7ff fea6 	bl	8018ce8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d113      	bne.n	8018fca <_Z41__static_initialization_and_destruction_0ii+0x72>
 8018fa2:	683b      	ldr	r3, [r7, #0]
 8018fa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018fa8:	4293      	cmp	r3, r2
 8018faa:	d10e      	bne.n	8018fca <_Z41__static_initialization_and_destruction_0ii+0x72>
 8018fac:	480c      	ldr	r0, [pc, #48]	; (8018fe0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8018fae:	f7fe fee5 	bl	8017d7c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8018fb2:	480c      	ldr	r0, [pc, #48]	; (8018fe4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8018fb4:	f7f6 fc90 	bl	800f8d8 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8018fb8:	4808      	ldr	r0, [pc, #32]	; (8018fdc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8018fba:	f7ff ffab 	bl	8018f14 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8018fbe:	4806      	ldr	r0, [pc, #24]	; (8018fd8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8018fc0:	f7ff f8a8 	bl	8018114 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8018fc4:	4803      	ldr	r0, [pc, #12]	; (8018fd4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8018fc6:	f7fe fc73 	bl	80178b0 <_ZN20STM32TouchControllerD1Ev>
}
 8018fca:	bf00      	nop
 8018fcc:	3708      	adds	r7, #8
 8018fce:	46bd      	mov	sp, r7
 8018fd0:	bd80      	pop	{r7, pc}
 8018fd2:	bf00      	nop
 8018fd4:	2000e2b4 	.word	0x2000e2b4
 8018fd8:	2000e2b8 	.word	0x2000e2b8
 8018fdc:	2000f058 	.word	0x2000f058
 8018fe0:	2000f0d4 	.word	0x2000f0d4
 8018fe4:	2000001c 	.word	0x2000001c

08018fe8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8018fe8:	b480      	push	{r7}
 8018fea:	b083      	sub	sp, #12
 8018fec:	af00      	add	r7, sp, #0
 8018fee:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8018ff0:	2301      	movs	r3, #1
    }
 8018ff2:	4618      	mov	r0, r3
 8018ff4:	370c      	adds	r7, #12
 8018ff6:	46bd      	mov	sp, r7
 8018ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ffc:	4770      	bx	lr

08018ffe <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8018ffe:	b480      	push	{r7}
 8019000:	b083      	sub	sp, #12
 8019002:	af00      	add	r7, sp, #0
 8019004:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8019006:	230c      	movs	r3, #12
    }
 8019008:	4618      	mov	r0, r3
 801900a:	370c      	adds	r7, #12
 801900c:	46bd      	mov	sp, r7
 801900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019012:	4770      	bx	lr

08019014 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8019014:	b480      	push	{r7}
 8019016:	b083      	sub	sp, #12
 8019018:	af00      	add	r7, sp, #0
 801901a:	6078      	str	r0, [r7, #4]
 801901c:	460b      	mov	r3, r1
 801901e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8019020:	887a      	ldrh	r2, [r7, #2]
 8019022:	4613      	mov	r3, r2
 8019024:	005b      	lsls	r3, r3, #1
 8019026:	4413      	add	r3, r2
 8019028:	009b      	lsls	r3, r3, #2
 801902a:	3308      	adds	r3, #8
 801902c:	687a      	ldr	r2, [r7, #4]
 801902e:	4413      	add	r3, r2
    }
 8019030:	4618      	mov	r0, r3
 8019032:	370c      	adds	r7, #12
 8019034:	46bd      	mov	sp, r7
 8019036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801903a:	4770      	bx	lr

0801903c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 801903c:	b480      	push	{r7}
 801903e:	b083      	sub	sp, #12
 8019040:	af00      	add	r7, sp, #0
 8019042:	6078      	str	r0, [r7, #4]
 8019044:	460b      	mov	r3, r1
 8019046:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8019048:	887a      	ldrh	r2, [r7, #2]
 801904a:	4613      	mov	r3, r2
 801904c:	005b      	lsls	r3, r3, #1
 801904e:	4413      	add	r3, r2
 8019050:	009b      	lsls	r3, r3, #2
 8019052:	3308      	adds	r3, #8
 8019054:	687a      	ldr	r2, [r7, #4]
 8019056:	4413      	add	r3, r2
    }
 8019058:	4618      	mov	r0, r3
 801905a:	370c      	adds	r7, #12
 801905c:	46bd      	mov	sp, r7
 801905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019062:	4770      	bx	lr

08019064 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8019064:	b480      	push	{r7}
 8019066:	b083      	sub	sp, #12
 8019068:	af00      	add	r7, sp, #0
 801906a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801906c:	2301      	movs	r3, #1
    }
 801906e:	4618      	mov	r0, r3
 8019070:	370c      	adds	r7, #12
 8019072:	46bd      	mov	sp, r7
 8019074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019078:	4770      	bx	lr

0801907a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801907a:	b480      	push	{r7}
 801907c:	b083      	sub	sp, #12
 801907e:	af00      	add	r7, sp, #0
 8019080:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8019082:	f246 5364 	movw	r3, #25956	; 0x6564
    }
 8019086:	4618      	mov	r0, r3
 8019088:	370c      	adds	r7, #12
 801908a:	46bd      	mov	sp, r7
 801908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019090:	4770      	bx	lr

08019092 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8019092:	b480      	push	{r7}
 8019094:	b083      	sub	sp, #12
 8019096:	af00      	add	r7, sp, #0
 8019098:	6078      	str	r0, [r7, #4]
 801909a:	460b      	mov	r3, r1
 801909c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801909e:	887b      	ldrh	r3, [r7, #2]
 80190a0:	f246 5264 	movw	r2, #25956	; 0x6564
 80190a4:	fb02 f303 	mul.w	r3, r2, r3
 80190a8:	3308      	adds	r3, #8
 80190aa:	687a      	ldr	r2, [r7, #4]
 80190ac:	4413      	add	r3, r2
    }
 80190ae:	4618      	mov	r0, r3
 80190b0:	370c      	adds	r7, #12
 80190b2:	46bd      	mov	sp, r7
 80190b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190b8:	4770      	bx	lr

080190ba <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80190ba:	b480      	push	{r7}
 80190bc:	b083      	sub	sp, #12
 80190be:	af00      	add	r7, sp, #0
 80190c0:	6078      	str	r0, [r7, #4]
 80190c2:	460b      	mov	r3, r1
 80190c4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80190c6:	887b      	ldrh	r3, [r7, #2]
 80190c8:	f246 5264 	movw	r2, #25956	; 0x6564
 80190cc:	fb02 f303 	mul.w	r3, r2, r3
 80190d0:	3308      	adds	r3, #8
 80190d2:	687a      	ldr	r2, [r7, #4]
 80190d4:	4413      	add	r3, r2
    }
 80190d6:	4618      	mov	r0, r3
 80190d8:	370c      	adds	r7, #12
 80190da:	46bd      	mov	sp, r7
 80190dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190e0:	4770      	bx	lr

080190e2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80190e2:	b480      	push	{r7}
 80190e4:	b083      	sub	sp, #12
 80190e6:	af00      	add	r7, sp, #0
 80190e8:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80190ea:	2301      	movs	r3, #1
    }
 80190ec:	4618      	mov	r0, r3
 80190ee:	370c      	adds	r7, #12
 80190f0:	46bd      	mov	sp, r7
 80190f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190f6:	4770      	bx	lr

080190f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80190f8:	b480      	push	{r7}
 80190fa:	b083      	sub	sp, #12
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8019100:	2310      	movs	r3, #16
    }
 8019102:	4618      	mov	r0, r3
 8019104:	370c      	adds	r7, #12
 8019106:	46bd      	mov	sp, r7
 8019108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801910c:	4770      	bx	lr

0801910e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801910e:	b480      	push	{r7}
 8019110:	b083      	sub	sp, #12
 8019112:	af00      	add	r7, sp, #0
 8019114:	6078      	str	r0, [r7, #4]
 8019116:	460b      	mov	r3, r1
 8019118:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801911a:	887b      	ldrh	r3, [r7, #2]
 801911c:	011b      	lsls	r3, r3, #4
 801911e:	3308      	adds	r3, #8
 8019120:	687a      	ldr	r2, [r7, #4]
 8019122:	4413      	add	r3, r2
    }
 8019124:	4618      	mov	r0, r3
 8019126:	370c      	adds	r7, #12
 8019128:	46bd      	mov	sp, r7
 801912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801912e:	4770      	bx	lr

08019130 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8019130:	b480      	push	{r7}
 8019132:	b083      	sub	sp, #12
 8019134:	af00      	add	r7, sp, #0
 8019136:	6078      	str	r0, [r7, #4]
 8019138:	460b      	mov	r3, r1
 801913a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801913c:	887b      	ldrh	r3, [r7, #2]
 801913e:	011b      	lsls	r3, r3, #4
 8019140:	3308      	adds	r3, #8
 8019142:	687a      	ldr	r2, [r7, #4]
 8019144:	4413      	add	r3, r2
    }
 8019146:	4618      	mov	r0, r3
 8019148:	370c      	adds	r7, #12
 801914a:	46bd      	mov	sp, r7
 801914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019150:	4770      	bx	lr

08019152 <_GLOBAL__sub_I_touchgfx_init>:
 8019152:	b580      	push	{r7, lr}
 8019154:	af00      	add	r7, sp, #0
 8019156:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801915a:	2001      	movs	r0, #1
 801915c:	f7ff fefc 	bl	8018f58 <_Z41__static_initialization_and_destruction_0ii>
 8019160:	bd80      	pop	{r7, pc}

08019162 <_GLOBAL__sub_D_touchgfx_init>:
 8019162:	b580      	push	{r7, lr}
 8019164:	af00      	add	r7, sp, #0
 8019166:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801916a:	2000      	movs	r0, #0
 801916c:	f7ff fef4 	bl	8018f58 <_Z41__static_initialization_and_destruction_0ii>
 8019170:	bd80      	pop	{r7, pc}

08019172 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8019172:	b580      	push	{r7, lr}
 8019174:	b082      	sub	sp, #8
 8019176:	af00      	add	r7, sp, #0
 8019178:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	3320      	adds	r3, #32
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	6878      	ldr	r0, [r7, #4]
 8019184:	4798      	blx	r3
    }
 8019186:	bf00      	nop
 8019188:	3708      	adds	r7, #8
 801918a:	46bd      	mov	sp, r7
 801918c:	bd80      	pop	{r7, pc}

0801918e <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 801918e:	b480      	push	{r7}
 8019190:	b083      	sub	sp, #12
 8019192:	af00      	add	r7, sp, #0
 8019194:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 801919c:	3301      	adds	r3, #1
 801919e:	b2da      	uxtb	r2, r3
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 80191a6:	bf00      	nop
 80191a8:	370c      	adds	r7, #12
 80191aa:	46bd      	mov	sp, r7
 80191ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b0:	4770      	bx	lr
	...

080191b4 <__NVIC_EnableIRQ>:
{
 80191b4:	b480      	push	{r7}
 80191b6:	b083      	sub	sp, #12
 80191b8:	af00      	add	r7, sp, #0
 80191ba:	4603      	mov	r3, r0
 80191bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80191be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	db0b      	blt.n	80191de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80191c6:	79fb      	ldrb	r3, [r7, #7]
 80191c8:	f003 021f 	and.w	r2, r3, #31
 80191cc:	4907      	ldr	r1, [pc, #28]	; (80191ec <__NVIC_EnableIRQ+0x38>)
 80191ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80191d2:	095b      	lsrs	r3, r3, #5
 80191d4:	2001      	movs	r0, #1
 80191d6:	fa00 f202 	lsl.w	r2, r0, r2
 80191da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80191de:	bf00      	nop
 80191e0:	370c      	adds	r7, #12
 80191e2:	46bd      	mov	sp, r7
 80191e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191e8:	4770      	bx	lr
 80191ea:	bf00      	nop
 80191ec:	e000e100 	.word	0xe000e100

080191f0 <__NVIC_DisableIRQ>:
{
 80191f0:	b480      	push	{r7}
 80191f2:	b083      	sub	sp, #12
 80191f4:	af00      	add	r7, sp, #0
 80191f6:	4603      	mov	r3, r0
 80191f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80191fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	db12      	blt.n	8019228 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8019202:	79fb      	ldrb	r3, [r7, #7]
 8019204:	f003 021f 	and.w	r2, r3, #31
 8019208:	490a      	ldr	r1, [pc, #40]	; (8019234 <__NVIC_DisableIRQ+0x44>)
 801920a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801920e:	095b      	lsrs	r3, r3, #5
 8019210:	2001      	movs	r0, #1
 8019212:	fa00 f202 	lsl.w	r2, r0, r2
 8019216:	3320      	adds	r3, #32
 8019218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801921c:	f3bf 8f4f 	dsb	sy
}
 8019220:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8019222:	f3bf 8f6f 	isb	sy
}
 8019226:	bf00      	nop
}
 8019228:	bf00      	nop
 801922a:	370c      	adds	r7, #12
 801922c:	46bd      	mov	sp, r7
 801922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019232:	4770      	bx	lr
 8019234:	e000e100 	.word	0xe000e100

08019238 <__NVIC_SetPriority>:
{
 8019238:	b480      	push	{r7}
 801923a:	b083      	sub	sp, #12
 801923c:	af00      	add	r7, sp, #0
 801923e:	4603      	mov	r3, r0
 8019240:	6039      	str	r1, [r7, #0]
 8019242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019248:	2b00      	cmp	r3, #0
 801924a:	db0a      	blt.n	8019262 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801924c:	683b      	ldr	r3, [r7, #0]
 801924e:	b2da      	uxtb	r2, r3
 8019250:	490c      	ldr	r1, [pc, #48]	; (8019284 <__NVIC_SetPriority+0x4c>)
 8019252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019256:	0112      	lsls	r2, r2, #4
 8019258:	b2d2      	uxtb	r2, r2
 801925a:	440b      	add	r3, r1
 801925c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8019260:	e00a      	b.n	8019278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019262:	683b      	ldr	r3, [r7, #0]
 8019264:	b2da      	uxtb	r2, r3
 8019266:	4908      	ldr	r1, [pc, #32]	; (8019288 <__NVIC_SetPriority+0x50>)
 8019268:	79fb      	ldrb	r3, [r7, #7]
 801926a:	f003 030f 	and.w	r3, r3, #15
 801926e:	3b04      	subs	r3, #4
 8019270:	0112      	lsls	r2, r2, #4
 8019272:	b2d2      	uxtb	r2, r2
 8019274:	440b      	add	r3, r1
 8019276:	761a      	strb	r2, [r3, #24]
}
 8019278:	bf00      	nop
 801927a:	370c      	adds	r7, #12
 801927c:	46bd      	mov	sp, r7
 801927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019282:	4770      	bx	lr
 8019284:	e000e100 	.word	0xe000e100
 8019288:	e000ed00 	.word	0xe000ed00

0801928c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 801928c:	b5b0      	push	{r4, r5, r7, lr}
 801928e:	b082      	sub	sp, #8
 8019290:	af00      	add	r7, sp, #0
 8019292:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	4618      	mov	r0, r3
 8019298:	f000 fc4d 	bl	8019b36 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 801929c:	687d      	ldr	r5, [r7, #4]
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	3364      	adds	r3, #100	; 0x64
 80192a4:	681c      	ldr	r4, [r3, #0]
 80192a6:	f005 f80b 	bl	801e2c0 <_ZN8touchgfx11Application11getInstanceEv>
 80192aa:	4603      	mov	r3, r0
 80192ac:	4619      	mov	r1, r3
 80192ae:	4628      	mov	r0, r5
 80192b0:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD012C000, (void*)0);
 80192b2:	6878      	ldr	r0, [r7, #4]
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	3388      	adds	r3, #136	; 0x88
 80192ba:	681c      	ldr	r4, [r3, #0]
 80192bc:	2300      	movs	r3, #0
 80192be:	4a04      	ldr	r2, [pc, #16]	; (80192d0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80192c0:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80192c4:	47a0      	blx	r4
}
 80192c6:	bf00      	nop
 80192c8:	3708      	adds	r7, #8
 80192ca:	46bd      	mov	sp, r7
 80192cc:	bdb0      	pop	{r4, r5, r7, pc}
 80192ce:	bf00      	nop
 80192d0:	d012c000 	.word	0xd012c000

080192d4 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80192d4:	b580      	push	{r7, lr}
 80192d6:	b082      	sub	sp, #8
 80192d8:	af00      	add	r7, sp, #0
 80192da:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80192dc:	2109      	movs	r1, #9
 80192de:	205a      	movs	r0, #90	; 0x5a
 80192e0:	f7ff ffaa 	bl	8019238 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80192e4:	2109      	movs	r1, #9
 80192e6:	2058      	movs	r0, #88	; 0x58
 80192e8:	f7ff ffa6 	bl	8019238 <__NVIC_SetPriority>
}
 80192ec:	bf00      	nop
 80192ee:	3708      	adds	r7, #8
 80192f0:	46bd      	mov	sp, r7
 80192f2:	bd80      	pop	{r7, pc}

080192f4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b082      	sub	sp, #8
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80192fc:	205a      	movs	r0, #90	; 0x5a
 80192fe:	f7ff ff59 	bl	80191b4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8019302:	2058      	movs	r0, #88	; 0x58
 8019304:	f7ff ff56 	bl	80191b4 <__NVIC_EnableIRQ>
}
 8019308:	bf00      	nop
 801930a:	3708      	adds	r7, #8
 801930c:	46bd      	mov	sp, r7
 801930e:	bd80      	pop	{r7, pc}

08019310 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8019310:	b580      	push	{r7, lr}
 8019312:	b082      	sub	sp, #8
 8019314:	af00      	add	r7, sp, #0
 8019316:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8019318:	205a      	movs	r0, #90	; 0x5a
 801931a:	f7ff ff69 	bl	80191f0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 801931e:	2058      	movs	r0, #88	; 0x58
 8019320:	f7ff ff66 	bl	80191f0 <__NVIC_DisableIRQ>
}
 8019324:	bf00      	nop
 8019326:	3708      	adds	r7, #8
 8019328:	46bd      	mov	sp, r7
 801932a:	bd80      	pop	{r7, pc}

0801932c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 801932c:	b480      	push	{r7}
 801932e:	b083      	sub	sp, #12
 8019330:	af00      	add	r7, sp, #0
 8019332:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8019334:	4b11      	ldr	r3, [pc, #68]	; (801937c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8019336:	68db      	ldr	r3, [r3, #12]
 8019338:	b29b      	uxth	r3, r3
 801933a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801933e:	b29b      	uxth	r3, r3
 8019340:	3b01      	subs	r3, #1
 8019342:	b29a      	uxth	r2, r3
 8019344:	4b0e      	ldr	r3, [pc, #56]	; (8019380 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8019346:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8019348:	4b0c      	ldr	r3, [pc, #48]	; (801937c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801934a:	691b      	ldr	r3, [r3, #16]
 801934c:	b29b      	uxth	r3, r3
 801934e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8019352:	b29b      	uxth	r3, r3
 8019354:	3b01      	subs	r3, #1
 8019356:	b29a      	uxth	r2, r3
 8019358:	4b0a      	ldr	r3, [pc, #40]	; (8019384 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801935a:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 801935c:	4b08      	ldr	r3, [pc, #32]	; (8019380 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801935e:	881a      	ldrh	r2, [r3, #0]
 8019360:	4b06      	ldr	r3, [pc, #24]	; (801937c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8019362:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8019364:	4b05      	ldr	r3, [pc, #20]	; (801937c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8019366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019368:	4a04      	ldr	r2, [pc, #16]	; (801937c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801936a:	f043 0301 	orr.w	r3, r3, #1
 801936e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8019370:	bf00      	nop
 8019372:	370c      	adds	r7, #12
 8019374:	46bd      	mov	sp, r7
 8019376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801937a:	4770      	bx	lr
 801937c:	40016800 	.word	0x40016800
 8019380:	2000f152 	.word	0x2000f152
 8019384:	2000f154 	.word	0x2000f154

08019388 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8019388:	b580      	push	{r7, lr}
 801938a:	b082      	sub	sp, #8
 801938c:	af00      	add	r7, sp, #0
 801938e:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	4618      	mov	r0, r3
 8019394:	f000 fbb6 	bl	8019b04 <_ZN8touchgfx3HAL10beginFrameEv>
 8019398:	4603      	mov	r3, r0
}
 801939a:	4618      	mov	r0, r3
 801939c:	3708      	adds	r7, #8
 801939e:	46bd      	mov	sp, r7
 80193a0:	bd80      	pop	{r7, pc}
	...

080193a4 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 80193a4:	b580      	push	{r7, lr}
 80193a6:	b082      	sub	sp, #8
 80193a8:	af00      	add	r7, sp, #0
 80193aa:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d002      	beq.n	80193bc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 80193b6:	4b05      	ldr	r3, [pc, #20]	; (80193cc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x28>)
 80193b8:	2201      	movs	r2, #1
 80193ba:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	4618      	mov	r0, r3
 80193c0:	f000 fbac 	bl	8019b1c <_ZN8touchgfx3HAL8endFrameEv>
}
 80193c4:	bf00      	nop
 80193c6:	3708      	adds	r7, #8
 80193c8:	46bd      	mov	sp, r7
 80193ca:	bd80      	pop	{r7, pc}
 80193cc:	2000f150 	.word	0x2000f150

080193d0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80193d0:	b480      	push	{r7}
 80193d2:	b083      	sub	sp, #12
 80193d4:	af00      	add	r7, sp, #0
 80193d6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80193d8:	4b03      	ldr	r3, [pc, #12]	; (80193e8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80193da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80193dc:	4618      	mov	r0, r3
 80193de:	370c      	adds	r7, #12
 80193e0:	46bd      	mov	sp, r7
 80193e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193e6:	4770      	bx	lr
 80193e8:	40016884 	.word	0x40016884

080193ec <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80193ec:	b480      	push	{r7}
 80193ee:	b083      	sub	sp, #12
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	6078      	str	r0, [r7, #4]
 80193f4:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80193f6:	4a06      	ldr	r2, [pc, #24]	; (8019410 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80193f8:	683b      	ldr	r3, [r7, #0]
 80193fa:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80193fc:	4b05      	ldr	r3, [pc, #20]	; (8019414 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80193fe:	2201      	movs	r2, #1
 8019400:	625a      	str	r2, [r3, #36]	; 0x24
}
 8019402:	bf00      	nop
 8019404:	370c      	adds	r7, #12
 8019406:	46bd      	mov	sp, r7
 8019408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801940c:	4770      	bx	lr
 801940e:	bf00      	nop
 8019410:	40016884 	.word	0x40016884
 8019414:	40016800 	.word	0x40016800

08019418 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8019418:	b580      	push	{r7, lr}
 801941a:	b082      	sub	sp, #8
 801941c:	af00      	add	r7, sp, #0
 801941e:	6078      	str	r0, [r7, #4]
 8019420:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	6839      	ldr	r1, [r7, #0]
 8019426:	4618      	mov	r0, r3
 8019428:	f000 fb36 	bl	8019a98 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 801942c:	bf00      	nop
 801942e:	3708      	adds	r7, #8
 8019430:	46bd      	mov	sp, r7
 8019432:	bd80      	pop	{r7, pc}

08019434 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8019434:	b580      	push	{r7, lr}
 8019436:	b084      	sub	sp, #16
 8019438:	af00      	add	r7, sp, #0
 801943a:	60f8      	str	r0, [r7, #12]
 801943c:	60b9      	str	r1, [r7, #8]
 801943e:	607a      	str	r2, [r7, #4]
 8019440:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8019442:	68f8      	ldr	r0, [r7, #12]
 8019444:	683b      	ldr	r3, [r7, #0]
 8019446:	687a      	ldr	r2, [r7, #4]
 8019448:	68b9      	ldr	r1, [r7, #8]
 801944a:	f000 fc8e 	bl	8019d6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 801944e:	4603      	mov	r3, r0
}
 8019450:	4618      	mov	r0, r3
 8019452:	3710      	adds	r7, #16
 8019454:	46bd      	mov	sp, r7
 8019456:	bd80      	pop	{r7, pc}

08019458 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8019458:	b580      	push	{r7, lr}
 801945a:	b082      	sub	sp, #8
 801945c:	af00      	add	r7, sp, #0
 801945e:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8019460:	f7f6 fe14 	bl	801008c <_ZN8touchgfx3HAL11getInstanceEv>
 8019464:	4603      	mov	r3, r0
 8019466:	2b00      	cmp	r3, #0
 8019468:	bf0c      	ite	eq
 801946a:	2301      	moveq	r3, #1
 801946c:	2300      	movne	r3, #0
 801946e:	b2db      	uxtb	r3, r3
 8019470:	2b00      	cmp	r3, #0
 8019472:	d132      	bne.n	80194da <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8019474:	4b1b      	ldr	r3, [pc, #108]	; (80194e4 <HAL_LTDC_LineEventCallback+0x8c>)
 8019476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019478:	4a1b      	ldr	r2, [pc, #108]	; (80194e8 <HAL_LTDC_LineEventCallback+0x90>)
 801947a:	8812      	ldrh	r2, [r2, #0]
 801947c:	4293      	cmp	r3, r2
 801947e:	bf0c      	ite	eq
 8019480:	2301      	moveq	r3, #1
 8019482:	2300      	movne	r3, #0
 8019484:	b2db      	uxtb	r3, r3
 8019486:	2b00      	cmp	r3, #0
 8019488:	d017      	beq.n	80194ba <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801948a:	4b18      	ldr	r3, [pc, #96]	; (80194ec <HAL_LTDC_LineEventCallback+0x94>)
 801948c:	881b      	ldrh	r3, [r3, #0]
 801948e:	4619      	mov	r1, r3
 8019490:	6878      	ldr	r0, [r7, #4]
 8019492:	f7ed fa67 	bl	8006964 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8019496:	f7f6 fdf9 	bl	801008c <_ZN8touchgfx3HAL11getInstanceEv>
 801949a:	4603      	mov	r3, r0
 801949c:	4618      	mov	r0, r3
 801949e:	f7ff fe76 	bl	801918e <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 80194a2:	f7fe fcf3 	bl	8017e8c <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80194a6:	f7f6 fdf1 	bl	801008c <_ZN8touchgfx3HAL11getInstanceEv>
 80194aa:	4603      	mov	r3, r0
 80194ac:	4618      	mov	r0, r3
 80194ae:	f001 f887 	bl	801a5c0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80194b2:	2000      	movs	r0, #0
 80194b4:	f7fe fa1e 	bl	80178f4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80194b8:	e010      	b.n	80194dc <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80194ba:	4b0b      	ldr	r3, [pc, #44]	; (80194e8 <HAL_LTDC_LineEventCallback+0x90>)
 80194bc:	881b      	ldrh	r3, [r3, #0]
 80194be:	4619      	mov	r1, r3
 80194c0:	6878      	ldr	r0, [r7, #4]
 80194c2:	f7ed fa4f 	bl	8006964 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 80194c6:	f7f6 fde1 	bl	801008c <_ZN8touchgfx3HAL11getInstanceEv>
 80194ca:	4603      	mov	r3, r0
 80194cc:	4618      	mov	r0, r3
 80194ce:	f7ff fe50 	bl	8019172 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 80194d2:	2000      	movs	r0, #0
 80194d4:	f7fe fa19 	bl	801790a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80194d8:	e000      	b.n	80194dc <HAL_LTDC_LineEventCallback+0x84>
            return;
 80194da:	bf00      	nop
        }
    }
 80194dc:	3708      	adds	r7, #8
 80194de:	46bd      	mov	sp, r7
 80194e0:	bd80      	pop	{r7, pc}
 80194e2:	bf00      	nop
 80194e4:	40016800 	.word	0x40016800
 80194e8:	2000f152 	.word	0x2000f152
 80194ec:	2000f154 	.word	0x2000f154

080194f0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 80194f0:	8880      	ldrh	r0, [r0, #4]
 80194f2:	4770      	bx	lr

080194f4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 80194f4:	b570      	push	{r4, r5, r6, lr}
 80194f6:	6803      	ldr	r3, [r0, #0]
 80194f8:	4605      	mov	r5, r0
 80194fa:	460c      	mov	r4, r1
 80194fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194fe:	2100      	movs	r1, #0
 8019500:	4798      	blx	r3
 8019502:	682b      	ldr	r3, [r5, #0]
 8019504:	4606      	mov	r6, r0
 8019506:	6a1b      	ldr	r3, [r3, #32]
 8019508:	4628      	mov	r0, r5
 801950a:	4798      	blx	r3
 801950c:	1ba4      	subs	r4, r4, r6
 801950e:	b2a4      	uxth	r4, r4
 8019510:	fbb4 f0f0 	udiv	r0, r4, r0
 8019514:	bd70      	pop	{r4, r5, r6, pc}

08019516 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8019516:	2300      	movs	r3, #0
 8019518:	8083      	strh	r3, [r0, #4]
 801951a:	4770      	bx	lr

0801951c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801951c:	b510      	push	{r4, lr}
 801951e:	6803      	ldr	r3, [r0, #0]
 8019520:	8881      	ldrh	r1, [r0, #4]
 8019522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019524:	4604      	mov	r4, r0
 8019526:	4798      	blx	r3
 8019528:	88a3      	ldrh	r3, [r4, #4]
 801952a:	3301      	adds	r3, #1
 801952c:	80a3      	strh	r3, [r4, #4]
 801952e:	bd10      	pop	{r4, pc}

08019530 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8019530:	6803      	ldr	r3, [r0, #0]
 8019532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019534:	4718      	bx	r3

08019536 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8019536:	4770      	bx	lr

08019538 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8019538:	4a02      	ldr	r2, [pc, #8]	; (8019544 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801953a:	6002      	str	r2, [r0, #0]
 801953c:	2200      	movs	r2, #0
 801953e:	8082      	strh	r2, [r0, #4]
 8019540:	4770      	bx	lr
 8019542:	bf00      	nop
 8019544:	080303f0 	.word	0x080303f0

08019548 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8019548:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801954a:	2000      	movs	r0, #0
 801954c:	b12b      	cbz	r3, 801955a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801954e:	b920      	cbnz	r0, 801955a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8019550:	1a5a      	subs	r2, r3, r1
 8019552:	4250      	negs	r0, r2
 8019554:	4150      	adcs	r0, r2
 8019556:	699b      	ldr	r3, [r3, #24]
 8019558:	e7f8      	b.n	801954c <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 801955a:	4770      	bx	lr

0801955c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 801955c:	2300      	movs	r3, #0
 801955e:	6148      	str	r0, [r1, #20]
 8019560:	618b      	str	r3, [r1, #24]
 8019562:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019564:	b913      	cbnz	r3, 801956c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8019566:	6281      	str	r1, [r0, #40]	; 0x28
 8019568:	4770      	bx	lr
 801956a:	4613      	mov	r3, r2
 801956c:	699a      	ldr	r2, [r3, #24]
 801956e:	2a00      	cmp	r2, #0
 8019570:	d1fb      	bne.n	801956a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8019572:	6199      	str	r1, [r3, #24]
 8019574:	4770      	bx	lr

08019576 <_ZN8touchgfx9Container9removeAllEv>:
 8019576:	2200      	movs	r2, #0
 8019578:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801957a:	b123      	cbz	r3, 8019586 <_ZN8touchgfx9Container9removeAllEv+0x10>
 801957c:	6999      	ldr	r1, [r3, #24]
 801957e:	6281      	str	r1, [r0, #40]	; 0x28
 8019580:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8019584:	e7f8      	b.n	8019578 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8019586:	4770      	bx	lr

08019588 <_ZN8touchgfx9Container6unlinkEv>:
 8019588:	2300      	movs	r3, #0
 801958a:	6283      	str	r3, [r0, #40]	; 0x28
 801958c:	4770      	bx	lr

0801958e <_ZNK8touchgfx9Container12getSolidRectEv>:
 801958e:	2200      	movs	r2, #0
 8019590:	8002      	strh	r2, [r0, #0]
 8019592:	8042      	strh	r2, [r0, #2]
 8019594:	8082      	strh	r2, [r0, #4]
 8019596:	80c2      	strh	r2, [r0, #6]
 8019598:	4770      	bx	lr

0801959a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801959a:	b570      	push	{r4, r5, r6, lr}
 801959c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801959e:	460d      	mov	r5, r1
 80195a0:	4616      	mov	r6, r2
 80195a2:	b13c      	cbz	r4, 80195b4 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80195a4:	6823      	ldr	r3, [r4, #0]
 80195a6:	4620      	mov	r0, r4
 80195a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80195aa:	4632      	mov	r2, r6
 80195ac:	4629      	mov	r1, r5
 80195ae:	4798      	blx	r3
 80195b0:	69a4      	ldr	r4, [r4, #24]
 80195b2:	e7f6      	b.n	80195a2 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80195b4:	bd70      	pop	{r4, r5, r6, pc}

080195b6 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80195b6:	b538      	push	{r3, r4, r5, lr}
 80195b8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80195ba:	460d      	mov	r5, r1
 80195bc:	b134      	cbz	r4, 80195cc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80195be:	682b      	ldr	r3, [r5, #0]
 80195c0:	4621      	mov	r1, r4
 80195c2:	689b      	ldr	r3, [r3, #8]
 80195c4:	4628      	mov	r0, r5
 80195c6:	4798      	blx	r3
 80195c8:	69a4      	ldr	r4, [r4, #24]
 80195ca:	e7f7      	b.n	80195bc <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 80195cc:	bd38      	pop	{r3, r4, r5, pc}

080195ce <_ZNK8touchgfx9Container17invalidateContentEv>:
 80195ce:	b510      	push	{r4, lr}
 80195d0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80195d2:	b12c      	cbz	r4, 80195e0 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 80195d4:	6823      	ldr	r3, [r4, #0]
 80195d6:	4620      	mov	r0, r4
 80195d8:	699b      	ldr	r3, [r3, #24]
 80195da:	4798      	blx	r3
 80195dc:	69a4      	ldr	r4, [r4, #24]
 80195de:	e7f8      	b.n	80195d2 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 80195e0:	bd10      	pop	{r4, pc}

080195e2 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 80195e2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80195e4:	b19b      	cbz	r3, 801960e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80195e6:	428b      	cmp	r3, r1
 80195e8:	d109      	bne.n	80195fe <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 80195ea:	699a      	ldr	r2, [r3, #24]
 80195ec:	2100      	movs	r1, #0
 80195ee:	6159      	str	r1, [r3, #20]
 80195f0:	6282      	str	r2, [r0, #40]	; 0x28
 80195f2:	b902      	cbnz	r2, 80195f6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 80195f4:	4770      	bx	lr
 80195f6:	6199      	str	r1, [r3, #24]
 80195f8:	4770      	bx	lr
 80195fa:	4613      	mov	r3, r2
 80195fc:	b13a      	cbz	r2, 801960e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 80195fe:	699a      	ldr	r2, [r3, #24]
 8019600:	428a      	cmp	r2, r1
 8019602:	d1fa      	bne.n	80195fa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8019604:	698a      	ldr	r2, [r1, #24]
 8019606:	619a      	str	r2, [r3, #24]
 8019608:	2300      	movs	r3, #0
 801960a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801960e:	4770      	bx	lr

08019610 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8019610:	b410      	push	{r4}
 8019612:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019614:	4604      	mov	r4, r0
 8019616:	b92b      	cbnz	r3, 8019624 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8019618:	6803      	ldr	r3, [r0, #0]
 801961a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801961e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019620:	4611      	mov	r1, r2
 8019622:	4718      	bx	r3
 8019624:	b941      	cbnz	r1, 8019638 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8019626:	6193      	str	r3, [r2, #24]
 8019628:	6282      	str	r2, [r0, #40]	; 0x28
 801962a:	6154      	str	r4, [r2, #20]
 801962c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019630:	4770      	bx	lr
 8019632:	4603      	mov	r3, r0
 8019634:	2800      	cmp	r0, #0
 8019636:	d0f9      	beq.n	801962c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8019638:	4299      	cmp	r1, r3
 801963a:	6998      	ldr	r0, [r3, #24]
 801963c:	d1f9      	bne.n	8019632 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801963e:	6190      	str	r0, [r2, #24]
 8019640:	618a      	str	r2, [r1, #24]
 8019642:	e7f2      	b.n	801962a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08019644 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8019644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019648:	461f      	mov	r7, r3
 801964a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801964e:	460d      	mov	r5, r1
 8019650:	4616      	mov	r6, r2
 8019652:	b103      	cbz	r3, 8019656 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8019654:	6038      	str	r0, [r7, #0]
 8019656:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019658:	b314      	cbz	r4, 80196a0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 801965a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801965e:	b1eb      	cbz	r3, 801969c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019660:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019664:	428d      	cmp	r5, r1
 8019666:	db19      	blt.n	801969c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019668:	8923      	ldrh	r3, [r4, #8]
 801966a:	b289      	uxth	r1, r1
 801966c:	440b      	add	r3, r1
 801966e:	b21b      	sxth	r3, r3
 8019670:	429d      	cmp	r5, r3
 8019672:	da13      	bge.n	801969c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019674:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8019678:	4296      	cmp	r6, r2
 801967a:	db0f      	blt.n	801969c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801967c:	8963      	ldrh	r3, [r4, #10]
 801967e:	b292      	uxth	r2, r2
 8019680:	4413      	add	r3, r2
 8019682:	b21b      	sxth	r3, r3
 8019684:	429e      	cmp	r6, r3
 8019686:	da09      	bge.n	801969c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8019688:	6823      	ldr	r3, [r4, #0]
 801968a:	1ab2      	subs	r2, r6, r2
 801968c:	1a69      	subs	r1, r5, r1
 801968e:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8019692:	b212      	sxth	r2, r2
 8019694:	463b      	mov	r3, r7
 8019696:	b209      	sxth	r1, r1
 8019698:	4620      	mov	r0, r4
 801969a:	47c0      	blx	r8
 801969c:	69a4      	ldr	r4, [r4, #24]
 801969e:	e7db      	b.n	8019658 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80196a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080196a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80196a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196a8:	4c6e      	ldr	r4, [pc, #440]	; (8019864 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80196aa:	b0a1      	sub	sp, #132	; 0x84
 80196ac:	6824      	ldr	r4, [r4, #0]
 80196ae:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80196b0:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80196b4:	9303      	str	r3, [sp, #12]
 80196b6:	2400      	movs	r4, #0
 80196b8:	802c      	strh	r4, [r5, #0]
 80196ba:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80196bc:	802c      	strh	r4, [r5, #0]
 80196be:	601c      	str	r4, [r3, #0]
 80196c0:	4606      	mov	r6, r0
 80196c2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80196c6:	f7ff ffbd 	bl	8019644 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80196ca:	f1b9 0f03 	cmp.w	r9, #3
 80196ce:	f340 80c2 	ble.w	8019856 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 80196d2:	4631      	mov	r1, r6
 80196d4:	a80c      	add	r0, sp, #48	; 0x30
 80196d6:	f005 fe25 	bl	801f324 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80196da:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80196de:	9306      	str	r3, [sp, #24]
 80196e0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80196e4:	9307      	str	r3, [sp, #28]
 80196e6:	9b03      	ldr	r3, [sp, #12]
 80196e8:	f8d3 a000 	ldr.w	sl, [r3]
 80196ec:	f1ba 0f00 	cmp.w	sl, #0
 80196f0:	f000 80b4 	beq.w	801985c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 80196f4:	4651      	mov	r1, sl
 80196f6:	a810      	add	r0, sp, #64	; 0x40
 80196f8:	f005 fe14 	bl	801f324 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80196fc:	9b01      	ldr	r3, [sp, #4]
 80196fe:	9a06      	ldr	r2, [sp, #24]
 8019700:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8019704:	189d      	adds	r5, r3, r2
 8019706:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801970a:	9a07      	ldr	r2, [sp, #28]
 801970c:	2002      	movs	r0, #2
 801970e:	fb91 f1f0 	sdiv	r1, r1, r0
 8019712:	4419      	add	r1, r3
 8019714:	1a6d      	subs	r5, r5, r1
 8019716:	9b02      	ldr	r3, [sp, #8]
 8019718:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801971c:	4413      	add	r3, r2
 801971e:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8019722:	fb92 f2f0 	sdiv	r2, r2, r0
 8019726:	440a      	add	r2, r1
 8019728:	1a9b      	subs	r3, r3, r2
 801972a:	435b      	muls	r3, r3
 801972c:	fb05 3505 	mla	r5, r5, r5, r3
 8019730:	4f4d      	ldr	r7, [pc, #308]	; (8019868 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 8019732:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8019734:	ac10      	add	r4, sp, #64	; 0x40
 8019736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019738:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801973a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801973c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801973e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019740:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8019744:	f1b9 0f0c 	cmp.w	r9, #12
 8019748:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801974c:	f04f 0303 	mov.w	r3, #3
 8019750:	bfc8      	it	gt
 8019752:	4698      	movgt	r8, r3
 8019754:	f8cd 9000 	str.w	r9, [sp]
 8019758:	f04f 0400 	mov.w	r4, #0
 801975c:	bfdc      	itt	le
 801975e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8019762:	fb92 f8f3 	sdivle	r8, r2, r3
 8019766:	1c63      	adds	r3, r4, #1
 8019768:	aa10      	add	r2, sp, #64	; 0x40
 801976a:	f004 0401 	and.w	r4, r4, #1
 801976e:	9308      	str	r3, [sp, #32]
 8019770:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8019774:	9b00      	ldr	r3, [sp, #0]
 8019776:	fb93 f3f8 	sdiv	r3, r3, r8
 801977a:	b29b      	uxth	r3, r3
 801977c:	3404      	adds	r4, #4
 801977e:	f04f 0b00 	mov.w	fp, #0
 8019782:	9304      	str	r3, [sp, #16]
 8019784:	9a04      	ldr	r2, [sp, #16]
 8019786:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801978a:	fb13 f302 	smulbb	r3, r3, r2
 801978e:	9a01      	ldr	r2, [sp, #4]
 8019790:	b29b      	uxth	r3, r3
 8019792:	1899      	adds	r1, r3, r2
 8019794:	9305      	str	r3, [sp, #20]
 8019796:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801979a:	b209      	sxth	r1, r1
 801979c:	4299      	cmp	r1, r3
 801979e:	db4d      	blt.n	801983c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80197a0:	8932      	ldrh	r2, [r6, #8]
 80197a2:	4413      	add	r3, r2
 80197a4:	b21b      	sxth	r3, r3
 80197a6:	4299      	cmp	r1, r3
 80197a8:	da48      	bge.n	801983c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80197aa:	9b04      	ldr	r3, [sp, #16]
 80197ac:	6827      	ldr	r7, [r4, #0]
 80197ae:	fb17 f703 	smulbb	r7, r7, r3
 80197b2:	9b02      	ldr	r3, [sp, #8]
 80197b4:	b2bf      	uxth	r7, r7
 80197b6:	18fa      	adds	r2, r7, r3
 80197b8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80197bc:	b212      	sxth	r2, r2
 80197be:	429a      	cmp	r2, r3
 80197c0:	db3c      	blt.n	801983c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80197c2:	8970      	ldrh	r0, [r6, #10]
 80197c4:	4403      	add	r3, r0
 80197c6:	b21b      	sxth	r3, r3
 80197c8:	429a      	cmp	r2, r3
 80197ca:	da37      	bge.n	801983c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80197cc:	2300      	movs	r3, #0
 80197ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80197d0:	4630      	mov	r0, r6
 80197d2:	ab0b      	add	r3, sp, #44	; 0x2c
 80197d4:	f7ff ff36 	bl	8019644 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 80197d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80197da:	b37a      	cbz	r2, 801983c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80197dc:	4552      	cmp	r2, sl
 80197de:	d02d      	beq.n	801983c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80197e0:	4611      	mov	r1, r2
 80197e2:	a80e      	add	r0, sp, #56	; 0x38
 80197e4:	9209      	str	r2, [sp, #36]	; 0x24
 80197e6:	f005 fd9d 	bl	801f324 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80197ea:	9a06      	ldr	r2, [sp, #24]
 80197ec:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 80197f0:	9b01      	ldr	r3, [sp, #4]
 80197f2:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 80197f6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 80197fa:	4413      	add	r3, r2
 80197fc:	f04f 0e02 	mov.w	lr, #2
 8019800:	fb91 f1fe 	sdiv	r1, r1, lr
 8019804:	4401      	add	r1, r0
 8019806:	1a58      	subs	r0, r3, r1
 8019808:	9a07      	ldr	r2, [sp, #28]
 801980a:	9b02      	ldr	r3, [sp, #8]
 801980c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8019810:	fb9c fcfe 	sdiv	ip, ip, lr
 8019814:	4413      	add	r3, r2
 8019816:	448c      	add	ip, r1
 8019818:	eba3 030c 	sub.w	r3, r3, ip
 801981c:	435b      	muls	r3, r3
 801981e:	fb00 3300 	mla	r3, r0, r0, r3
 8019822:	42ab      	cmp	r3, r5
 8019824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019826:	d208      	bcs.n	801983a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8019828:	9803      	ldr	r0, [sp, #12]
 801982a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801982c:	6001      	str	r1, [r0, #0]
 801982e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8019830:	9805      	ldr	r0, [sp, #20]
 8019832:	8008      	strh	r0, [r1, #0]
 8019834:	992b      	ldr	r1, [sp, #172]	; 0xac
 8019836:	461d      	mov	r5, r3
 8019838:	800f      	strh	r7, [r1, #0]
 801983a:	4692      	mov	sl, r2
 801983c:	f10b 0b01 	add.w	fp, fp, #1
 8019840:	f1bb 0f04 	cmp.w	fp, #4
 8019844:	f104 0408 	add.w	r4, r4, #8
 8019848:	d19c      	bne.n	8019784 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 801984a:	9b00      	ldr	r3, [sp, #0]
 801984c:	9c08      	ldr	r4, [sp, #32]
 801984e:	444b      	add	r3, r9
 8019850:	4544      	cmp	r4, r8
 8019852:	9300      	str	r3, [sp, #0]
 8019854:	d187      	bne.n	8019766 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8019856:	b021      	add	sp, #132	; 0x84
 8019858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801985c:	f04f 35ff 	mov.w	r5, #4294967295
 8019860:	e766      	b.n	8019730 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8019862:	bf00      	nop
 8019864:	2000f164 	.word	0x2000f164
 8019868:	0802f99c 	.word	0x0802f99c

0801986c <_ZN8touchgfx4RectaNERKS0_>:
 801986c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019870:	f9b1 7000 	ldrsh.w	r7, [r1]
 8019874:	888c      	ldrh	r4, [r1, #4]
 8019876:	f9b0 9000 	ldrsh.w	r9, [r0]
 801987a:	443c      	add	r4, r7
 801987c:	b2a4      	uxth	r4, r4
 801987e:	fa0f f884 	sxth.w	r8, r4
 8019882:	45c1      	cmp	r9, r8
 8019884:	da2f      	bge.n	80198e6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019886:	8882      	ldrh	r2, [r0, #4]
 8019888:	444a      	add	r2, r9
 801988a:	b292      	uxth	r2, r2
 801988c:	fa0f fe82 	sxth.w	lr, r2
 8019890:	4577      	cmp	r7, lr
 8019892:	da28      	bge.n	80198e6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8019894:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8019898:	88cb      	ldrh	r3, [r1, #6]
 801989a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801989e:	442b      	add	r3, r5
 80198a0:	b21b      	sxth	r3, r3
 80198a2:	429e      	cmp	r6, r3
 80198a4:	da1f      	bge.n	80198e6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80198a6:	88c3      	ldrh	r3, [r0, #6]
 80198a8:	4433      	add	r3, r6
 80198aa:	b29b      	uxth	r3, r3
 80198ac:	fa0f fc83 	sxth.w	ip, r3
 80198b0:	4565      	cmp	r5, ip
 80198b2:	da18      	bge.n	80198e6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80198b4:	454f      	cmp	r7, r9
 80198b6:	bfb8      	it	lt
 80198b8:	464f      	movlt	r7, r9
 80198ba:	42b5      	cmp	r5, r6
 80198bc:	bfb8      	it	lt
 80198be:	4635      	movlt	r5, r6
 80198c0:	45f0      	cmp	r8, lr
 80198c2:	bfd8      	it	le
 80198c4:	4622      	movle	r2, r4
 80198c6:	1bd2      	subs	r2, r2, r7
 80198c8:	8082      	strh	r2, [r0, #4]
 80198ca:	884a      	ldrh	r2, [r1, #2]
 80198cc:	88c9      	ldrh	r1, [r1, #6]
 80198ce:	8007      	strh	r7, [r0, #0]
 80198d0:	440a      	add	r2, r1
 80198d2:	b292      	uxth	r2, r2
 80198d4:	b211      	sxth	r1, r2
 80198d6:	458c      	cmp	ip, r1
 80198d8:	bfa8      	it	ge
 80198da:	4613      	movge	r3, r2
 80198dc:	1b5b      	subs	r3, r3, r5
 80198de:	80c3      	strh	r3, [r0, #6]
 80198e0:	8045      	strh	r5, [r0, #2]
 80198e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80198e6:	2300      	movs	r3, #0
 80198e8:	8003      	strh	r3, [r0, #0]
 80198ea:	8043      	strh	r3, [r0, #2]
 80198ec:	8083      	strh	r3, [r0, #4]
 80198ee:	80c3      	strh	r3, [r0, #6]
 80198f0:	e7f7      	b.n	80198e2 <_ZN8touchgfx4RectaNERKS0_+0x76>

080198f2 <_ZNK8touchgfx4Rect7isEmptyEv>:
 80198f2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	dd06      	ble.n	8019908 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 80198fa:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80198fe:	2800      	cmp	r0, #0
 8019900:	bfcc      	ite	gt
 8019902:	2000      	movgt	r0, #0
 8019904:	2001      	movle	r0, #1
 8019906:	4770      	bx	lr
 8019908:	2001      	movs	r0, #1
 801990a:	4770      	bx	lr

0801990c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801990c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019910:	2300      	movs	r3, #0
 8019912:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8019914:	8003      	strh	r3, [r0, #0]
 8019916:	4604      	mov	r4, r0
 8019918:	8043      	strh	r3, [r0, #2]
 801991a:	8083      	strh	r3, [r0, #4]
 801991c:	80c3      	strh	r3, [r0, #6]
 801991e:	2d00      	cmp	r5, #0
 8019920:	d040      	beq.n	80199a4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8019922:	1d28      	adds	r0, r5, #4
 8019924:	f7ff ffe5 	bl	80198f2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019928:	b988      	cbnz	r0, 801994e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801992a:	4620      	mov	r0, r4
 801992c:	f7ff ffe1 	bl	80198f2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019930:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8019934:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8019938:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801993c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8019940:	b138      	cbz	r0, 8019952 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8019942:	8022      	strh	r2, [r4, #0]
 8019944:	8063      	strh	r3, [r4, #2]
 8019946:	f8a4 e004 	strh.w	lr, [r4, #4]
 801994a:	f8a4 c006 	strh.w	ip, [r4, #6]
 801994e:	69ad      	ldr	r5, [r5, #24]
 8019950:	e7e5      	b.n	801991e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8019952:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019956:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801995a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801995e:	4290      	cmp	r0, r2
 8019960:	4607      	mov	r7, r0
 8019962:	bfa8      	it	ge
 8019964:	4617      	movge	r7, r2
 8019966:	4472      	add	r2, lr
 8019968:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 801996c:	8027      	strh	r7, [r4, #0]
 801996e:	4299      	cmp	r1, r3
 8019970:	460e      	mov	r6, r1
 8019972:	4440      	add	r0, r8
 8019974:	bfa8      	it	ge
 8019976:	461e      	movge	r6, r3
 8019978:	4471      	add	r1, lr
 801997a:	4463      	add	r3, ip
 801997c:	b200      	sxth	r0, r0
 801997e:	b212      	sxth	r2, r2
 8019980:	b209      	sxth	r1, r1
 8019982:	b21b      	sxth	r3, r3
 8019984:	4290      	cmp	r0, r2
 8019986:	bfac      	ite	ge
 8019988:	ebc7 0200 	rsbge	r2, r7, r0
 801998c:	ebc7 0202 	rsblt	r2, r7, r2
 8019990:	4299      	cmp	r1, r3
 8019992:	bfac      	ite	ge
 8019994:	ebc6 0301 	rsbge	r3, r6, r1
 8019998:	ebc6 0303 	rsblt	r3, r6, r3
 801999c:	8066      	strh	r6, [r4, #2]
 801999e:	80a2      	strh	r2, [r4, #4]
 80199a0:	80e3      	strh	r3, [r4, #6]
 80199a2:	e7d4      	b.n	801994e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80199a4:	4620      	mov	r0, r4
 80199a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080199aa <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80199aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80199ae:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80199b2:	b383      	cbz	r3, 8019a16 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80199b4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80199b6:	b374      	cbz	r4, 8019a16 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80199b8:	f9b1 5000 	ldrsh.w	r5, [r1]
 80199bc:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80199c0:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80199c4:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80199c8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80199cc:	b303      	cbz	r3, 8019a10 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80199ce:	4668      	mov	r0, sp
 80199d0:	1d21      	adds	r1, r4, #4
 80199d2:	f8ad 5000 	strh.w	r5, [sp]
 80199d6:	f8ad 6002 	strh.w	r6, [sp, #2]
 80199da:	f8ad 7004 	strh.w	r7, [sp, #4]
 80199de:	f8ad 8006 	strh.w	r8, [sp, #6]
 80199e2:	f7ff ff43 	bl	801986c <_ZN8touchgfx4RectaNERKS0_>
 80199e6:	4668      	mov	r0, sp
 80199e8:	f7ff ff83 	bl	80198f2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80199ec:	b980      	cbnz	r0, 8019a10 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80199ee:	f8bd 3000 	ldrh.w	r3, [sp]
 80199f2:	88a2      	ldrh	r2, [r4, #4]
 80199f4:	1a9b      	subs	r3, r3, r2
 80199f6:	f8ad 3000 	strh.w	r3, [sp]
 80199fa:	88e2      	ldrh	r2, [r4, #6]
 80199fc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019a00:	1a9b      	subs	r3, r3, r2
 8019a02:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019a06:	6823      	ldr	r3, [r4, #0]
 8019a08:	4669      	mov	r1, sp
 8019a0a:	689b      	ldr	r3, [r3, #8]
 8019a0c:	4620      	mov	r0, r4
 8019a0e:	4798      	blx	r3
 8019a10:	69a4      	ldr	r4, [r4, #24]
 8019a12:	2c00      	cmp	r4, #0
 8019a14:	d1d8      	bne.n	80199c8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8019a16:	b002      	add	sp, #8
 8019a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019a1c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8019a1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019a1e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8019a22:	460d      	mov	r5, r1
 8019a24:	4616      	mov	r6, r2
 8019a26:	b323      	cbz	r3, 8019a72 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8019a28:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8019a2a:	b314      	cbz	r4, 8019a72 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8019a2c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8019a30:	b1eb      	cbz	r3, 8019a6e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8019a32:	6828      	ldr	r0, [r5, #0]
 8019a34:	6869      	ldr	r1, [r5, #4]
 8019a36:	466b      	mov	r3, sp
 8019a38:	c303      	stmia	r3!, {r0, r1}
 8019a3a:	4668      	mov	r0, sp
 8019a3c:	1d21      	adds	r1, r4, #4
 8019a3e:	f7ff ff15 	bl	801986c <_ZN8touchgfx4RectaNERKS0_>
 8019a42:	4668      	mov	r0, sp
 8019a44:	f7ff ff55 	bl	80198f2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019a48:	b988      	cbnz	r0, 8019a6e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8019a4a:	f8bd 3000 	ldrh.w	r3, [sp]
 8019a4e:	88a2      	ldrh	r2, [r4, #4]
 8019a50:	1a9b      	subs	r3, r3, r2
 8019a52:	f8ad 3000 	strh.w	r3, [sp]
 8019a56:	88e2      	ldrh	r2, [r4, #6]
 8019a58:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8019a5c:	1a9b      	subs	r3, r3, r2
 8019a5e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8019a62:	6823      	ldr	r3, [r4, #0]
 8019a64:	4632      	mov	r2, r6
 8019a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a68:	4669      	mov	r1, sp
 8019a6a:	4620      	mov	r0, r4
 8019a6c:	4798      	blx	r3
 8019a6e:	69a4      	ldr	r4, [r4, #24]
 8019a70:	e7db      	b.n	8019a2a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8019a72:	b002      	add	sp, #8
 8019a74:	bd70      	pop	{r4, r5, r6, pc}

08019a76 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8019a76:	b513      	push	{r0, r1, r4, lr}
 8019a78:	6803      	ldr	r3, [r0, #0]
 8019a7a:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8019a7e:	2300      	movs	r3, #0
 8019a80:	e9cd 3300 	strd	r3, r3, [sp]
 8019a84:	466b      	mov	r3, sp
 8019a86:	47a0      	blx	r4
 8019a88:	b002      	add	sp, #8
 8019a8a:	bd10      	pop	{r4, pc}

08019a8c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8019a8c:	2301      	movs	r3, #1
 8019a8e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8019a92:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8019a96:	4770      	bx	lr

08019a98 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8019a98:	2301      	movs	r3, #1
 8019a9a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8019a9e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8019aa2:	4770      	bx	lr

08019aa4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8019aa4:	6843      	ldr	r3, [r0, #4]
 8019aa6:	2201      	movs	r2, #1
 8019aa8:	725a      	strb	r2, [r3, #9]
 8019aaa:	6840      	ldr	r0, [r0, #4]
 8019aac:	6803      	ldr	r3, [r0, #0]
 8019aae:	691b      	ldr	r3, [r3, #16]
 8019ab0:	4718      	bx	r3

08019ab2 <_ZN8touchgfx3HAL8flushDMAEv>:
 8019ab2:	6840      	ldr	r0, [r0, #4]
 8019ab4:	6803      	ldr	r3, [r0, #0]
 8019ab6:	689b      	ldr	r3, [r3, #8]
 8019ab8:	4718      	bx	r3

08019aba <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8019aba:	b530      	push	{r4, r5, lr}
 8019abc:	b08b      	sub	sp, #44	; 0x2c
 8019abe:	6804      	ldr	r4, [r0, #0]
 8019ac0:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8019ac4:	9509      	str	r5, [sp, #36]	; 0x24
 8019ac6:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8019aca:	9508      	str	r5, [sp, #32]
 8019acc:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8019ad0:	9507      	str	r5, [sp, #28]
 8019ad2:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8019ad6:	9506      	str	r5, [sp, #24]
 8019ad8:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8019adc:	9505      	str	r5, [sp, #20]
 8019ade:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8019ae2:	9504      	str	r5, [sp, #16]
 8019ae4:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8019ae8:	9503      	str	r5, [sp, #12]
 8019aea:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8019aee:	9502      	str	r5, [sp, #8]
 8019af0:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8019af4:	e9cd 3500 	strd	r3, r5, [sp]
 8019af8:	4613      	mov	r3, r2
 8019afa:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8019afc:	2200      	movs	r2, #0
 8019afe:	47a0      	blx	r4
 8019b00:	b00b      	add	sp, #44	; 0x2c
 8019b02:	bd30      	pop	{r4, r5, pc}

08019b04 <_ZN8touchgfx3HAL10beginFrameEv>:
 8019b04:	4b04      	ldr	r3, [pc, #16]	; (8019b18 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8019b06:	781b      	ldrb	r3, [r3, #0]
 8019b08:	b123      	cbz	r3, 8019b14 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8019b0a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8019b0e:	f080 0001 	eor.w	r0, r0, #1
 8019b12:	4770      	bx	lr
 8019b14:	2001      	movs	r0, #1
 8019b16:	4770      	bx	lr
 8019b18:	2000f160 	.word	0x2000f160

08019b1c <_ZN8touchgfx3HAL8endFrameEv>:
 8019b1c:	b510      	push	{r4, lr}
 8019b1e:	4604      	mov	r4, r0
 8019b20:	6840      	ldr	r0, [r0, #4]
 8019b22:	6803      	ldr	r3, [r0, #0]
 8019b24:	689b      	ldr	r3, [r3, #8]
 8019b26:	4798      	blx	r3
 8019b28:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8019b2c:	b113      	cbz	r3, 8019b34 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8019b2e:	2301      	movs	r3, #1
 8019b30:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8019b34:	bd10      	pop	{r4, pc}

08019b36 <_ZN8touchgfx3HAL10initializeEv>:
 8019b36:	b510      	push	{r4, lr}
 8019b38:	4604      	mov	r4, r0
 8019b3a:	f7fe f941 	bl	8017dc0 <_ZN8touchgfx10OSWrappers10initializeEv>
 8019b3e:	6860      	ldr	r0, [r4, #4]
 8019b40:	6803      	ldr	r3, [r0, #0]
 8019b42:	68db      	ldr	r3, [r3, #12]
 8019b44:	4798      	blx	r3
 8019b46:	68e0      	ldr	r0, [r4, #12]
 8019b48:	6803      	ldr	r3, [r0, #0]
 8019b4a:	689b      	ldr	r3, [r3, #8]
 8019b4c:	4798      	blx	r3
 8019b4e:	6823      	ldr	r3, [r4, #0]
 8019b50:	4620      	mov	r0, r4
 8019b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b58:	4718      	bx	r3

08019b5a <_ZN8touchgfx3HAL9taskEntryEv>:
 8019b5a:	b508      	push	{r3, lr}
 8019b5c:	6803      	ldr	r3, [r0, #0]
 8019b5e:	4604      	mov	r4, r0
 8019b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019b64:	4798      	blx	r3
 8019b66:	6823      	ldr	r3, [r4, #0]
 8019b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019b6a:	4620      	mov	r0, r4
 8019b6c:	4798      	blx	r3
 8019b6e:	f7fe f99d 	bl	8017eac <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8019b72:	6823      	ldr	r3, [r4, #0]
 8019b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b76:	e7f8      	b.n	8019b6a <_ZN8touchgfx3HAL9taskEntryEv+0x10>

08019b78 <_ZN8touchgfx3HAL4tickEv>:
 8019b78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019b7a:	6803      	ldr	r3, [r0, #0]
 8019b7c:	4d5b      	ldr	r5, [pc, #364]	; (8019cec <_ZN8touchgfx3HAL4tickEv+0x174>)
 8019b7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8019b82:	4604      	mov	r4, r0
 8019b84:	4798      	blx	r3
 8019b86:	2800      	cmp	r0, #0
 8019b88:	f000 8095 	beq.w	8019cb6 <_ZN8touchgfx3HAL4tickEv+0x13e>
 8019b8c:	2001      	movs	r0, #1
 8019b8e:	f7fd feb1 	bl	80178f4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8019b92:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8019b96:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8019b9a:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8019b9e:	2600      	movs	r6, #0
 8019ba0:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8019ba4:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8019ba8:	b133      	cbz	r3, 8019bb8 <_ZN8touchgfx3HAL4tickEv+0x40>
 8019baa:	6823      	ldr	r3, [r4, #0]
 8019bac:	4620      	mov	r0, r4
 8019bae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8019bb2:	4798      	blx	r3
 8019bb4:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 8019bb8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8019bbc:	6862      	ldr	r2, [r4, #4]
 8019bbe:	f083 0301 	eor.w	r3, r3, #1
 8019bc2:	7253      	strb	r3, [r2, #9]
 8019bc4:	2601      	movs	r6, #1
 8019bc6:	702e      	strb	r6, [r5, #0]
 8019bc8:	f004 fb7a 	bl	801e2c0 <_ZN8touchgfx11Application11getInstanceEv>
 8019bcc:	6803      	ldr	r3, [r0, #0]
 8019bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019bd0:	4798      	blx	r3
 8019bd2:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8019bd6:	b90b      	cbnz	r3, 8019bdc <_ZN8touchgfx3HAL4tickEv+0x64>
 8019bd8:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8019bdc:	f004 fb70 	bl	801e2c0 <_ZN8touchgfx11Application11getInstanceEv>
 8019be0:	6803      	ldr	r3, [r0, #0]
 8019be2:	695b      	ldr	r3, [r3, #20]
 8019be4:	4798      	blx	r3
 8019be6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019be8:	6803      	ldr	r3, [r0, #0]
 8019bea:	691b      	ldr	r3, [r3, #16]
 8019bec:	4798      	blx	r3
 8019bee:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8019bf2:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 8019bf6:	3b01      	subs	r3, #1
 8019bf8:	b2db      	uxtb	r3, r3
 8019bfa:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8019bfe:	b10a      	cbz	r2, 8019c04 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d1eb      	bne.n	8019bdc <_ZN8touchgfx3HAL4tickEv+0x64>
 8019c04:	4a3a      	ldr	r2, [pc, #232]	; (8019cf0 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8019c06:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 8019c0a:	7813      	ldrb	r3, [r2, #0]
 8019c0c:	3301      	adds	r3, #1
 8019c0e:	b25b      	sxtb	r3, r3
 8019c10:	4299      	cmp	r1, r3
 8019c12:	7013      	strb	r3, [r2, #0]
 8019c14:	dc10      	bgt.n	8019c38 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8019c16:	68e0      	ldr	r0, [r4, #12]
 8019c18:	2300      	movs	r3, #0
 8019c1a:	7013      	strb	r3, [r2, #0]
 8019c1c:	6803      	ldr	r3, [r0, #0]
 8019c1e:	aa03      	add	r2, sp, #12
 8019c20:	68db      	ldr	r3, [r3, #12]
 8019c22:	a902      	add	r1, sp, #8
 8019c24:	4798      	blx	r3
 8019c26:	6823      	ldr	r3, [r4, #0]
 8019c28:	2800      	cmp	r0, #0
 8019c2a:	d050      	beq.n	8019cce <_ZN8touchgfx3HAL4tickEv+0x156>
 8019c2c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019c30:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8019c34:	4620      	mov	r0, r4
 8019c36:	4798      	blx	r3
 8019c38:	6960      	ldr	r0, [r4, #20]
 8019c3a:	2300      	movs	r3, #0
 8019c3c:	f88d 3007 	strb.w	r3, [sp, #7]
 8019c40:	b158      	cbz	r0, 8019c5a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8019c42:	6803      	ldr	r3, [r0, #0]
 8019c44:	f10d 0107 	add.w	r1, sp, #7
 8019c48:	68db      	ldr	r3, [r3, #12]
 8019c4a:	4798      	blx	r3
 8019c4c:	b128      	cbz	r0, 8019c5a <_ZN8touchgfx3HAL4tickEv+0xe2>
 8019c4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019c50:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8019c54:	6803      	ldr	r3, [r0, #0]
 8019c56:	68db      	ldr	r3, [r3, #12]
 8019c58:	4798      	blx	r3
 8019c5a:	f104 001c 	add.w	r0, r4, #28
 8019c5e:	f013 fa3f 	bl	802d0e0 <_ZN8touchgfx8Gestures4tickEv>
 8019c62:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8019c66:	b30b      	cbz	r3, 8019cac <_ZN8touchgfx3HAL4tickEv+0x134>
 8019c68:	6920      	ldr	r0, [r4, #16]
 8019c6a:	6803      	ldr	r3, [r0, #0]
 8019c6c:	691b      	ldr	r3, [r3, #16]
 8019c6e:	4798      	blx	r3
 8019c70:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8019c72:	4606      	mov	r6, r0
 8019c74:	b903      	cbnz	r3, 8019c78 <_ZN8touchgfx3HAL4tickEv+0x100>
 8019c76:	6720      	str	r0, [r4, #112]	; 0x70
 8019c78:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8019c7a:	4a1e      	ldr	r2, [pc, #120]	; (8019cf4 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8019c7c:	1af3      	subs	r3, r6, r3
 8019c7e:	4293      	cmp	r3, r2
 8019c80:	d914      	bls.n	8019cac <_ZN8touchgfx3HAL4tickEv+0x134>
 8019c82:	6920      	ldr	r0, [r4, #16]
 8019c84:	6803      	ldr	r3, [r0, #0]
 8019c86:	699b      	ldr	r3, [r3, #24]
 8019c88:	4798      	blx	r3
 8019c8a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8019c8c:	2264      	movs	r2, #100	; 0x64
 8019c8e:	1af3      	subs	r3, r6, r3
 8019c90:	fbb3 f3f2 	udiv	r3, r3, r2
 8019c94:	fbb0 f0f3 	udiv	r0, r0, r3
 8019c98:	2800      	cmp	r0, #0
 8019c9a:	dc1d      	bgt.n	8019cd8 <_ZN8touchgfx3HAL4tickEv+0x160>
 8019c9c:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8019ca0:	6920      	ldr	r0, [r4, #16]
 8019ca2:	6803      	ldr	r3, [r0, #0]
 8019ca4:	2100      	movs	r1, #0
 8019ca6:	69db      	ldr	r3, [r3, #28]
 8019ca8:	4798      	blx	r3
 8019caa:	6726      	str	r6, [r4, #112]	; 0x70
 8019cac:	f004 fb08 	bl	801e2c0 <_ZN8touchgfx11Application11getInstanceEv>
 8019cb0:	6803      	ldr	r3, [r0, #0]
 8019cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019cb4:	4798      	blx	r3
 8019cb6:	6823      	ldr	r3, [r4, #0]
 8019cb8:	4620      	mov	r0, r4
 8019cba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019cbe:	4798      	blx	r3
 8019cc0:	2001      	movs	r0, #1
 8019cc2:	f7fd fe22 	bl	801790a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8019cc6:	2300      	movs	r3, #0
 8019cc8:	702b      	strb	r3, [r5, #0]
 8019cca:	b004      	add	sp, #16
 8019ccc:	bd70      	pop	{r4, r5, r6, pc}
 8019cce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019cd2:	4620      	mov	r0, r4
 8019cd4:	4798      	blx	r3
 8019cd6:	e7af      	b.n	8019c38 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8019cd8:	2863      	cmp	r0, #99	; 0x63
 8019cda:	bfcb      	itete	gt
 8019cdc:	2300      	movgt	r3, #0
 8019cde:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8019ce2:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8019ce6:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8019cea:	e7d9      	b.n	8019ca0 <_ZN8touchgfx3HAL4tickEv+0x128>
 8019cec:	2000f168 	.word	0x2000f168
 8019cf0:	2000f169 	.word	0x2000f169
 8019cf4:	05f5e100 	.word	0x05f5e100

08019cf8 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8019cf8:	f7fe b8a4 	b.w	8017e44 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019cfc <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8019cfc:	6581      	str	r1, [r0, #88]	; 0x58
 8019cfe:	301c      	adds	r0, #28
 8019d00:	f013 b9ec 	b.w	802d0dc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08019d04 <_ZN8touchgfx3HAL5touchEll>:
 8019d04:	b530      	push	{r4, r5, lr}
 8019d06:	b087      	sub	sp, #28
 8019d08:	4604      	mov	r4, r0
 8019d0a:	a804      	add	r0, sp, #16
 8019d0c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8019d10:	f004 f85c 	bl	801ddcc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8019d14:	9b04      	ldr	r3, [sp, #16]
 8019d16:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019d1a:	a906      	add	r1, sp, #24
 8019d1c:	9b05      	ldr	r3, [sp, #20]
 8019d1e:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8019d22:	a803      	add	r0, sp, #12
 8019d24:	f004 f8a4 	bl	801de70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8019d28:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8019d2c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8019d30:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8019d34:	f104 001c 	add.w	r0, r4, #28
 8019d38:	b189      	cbz	r1, 8019d5e <_ZN8touchgfx3HAL5touchEll+0x5a>
 8019d3a:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8019d3e:	9300      	str	r3, [sp, #0]
 8019d40:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8019d44:	4613      	mov	r3, r2
 8019d46:	462a      	mov	r2, r5
 8019d48:	f013 f9d8 	bl	802d0fc <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8019d4c:	b128      	cbz	r0, 8019d5a <_ZN8touchgfx3HAL5touchEll+0x56>
 8019d4e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8019d52:	65e3      	str	r3, [r4, #92]	; 0x5c
 8019d54:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8019d58:	6623      	str	r3, [r4, #96]	; 0x60
 8019d5a:	b007      	add	sp, #28
 8019d5c:	bd30      	pop	{r4, r5, pc}
 8019d5e:	f013 fa0d 	bl	802d17c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8019d62:	2301      	movs	r3, #1
 8019d64:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8019d68:	e7f1      	b.n	8019d4e <_ZN8touchgfx3HAL5touchEll+0x4a>

08019d6a <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8019d6a:	b510      	push	{r4, lr}
 8019d6c:	2b00      	cmp	r3, #0
 8019d6e:	d046      	beq.n	8019dfe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8019d70:	ea81 0002 	eor.w	r0, r1, r2
 8019d74:	07c4      	lsls	r4, r0, #31
 8019d76:	d508      	bpl.n	8019d8a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8019d78:	440b      	add	r3, r1
 8019d7a:	3a01      	subs	r2, #1
 8019d7c:	428b      	cmp	r3, r1
 8019d7e:	d93e      	bls.n	8019dfe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8019d80:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8019d84:	f801 0b01 	strb.w	r0, [r1], #1
 8019d88:	e7f8      	b.n	8019d7c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8019d8a:	07d0      	lsls	r0, r2, #31
 8019d8c:	bf42      	ittt	mi
 8019d8e:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8019d92:	f801 0b01 	strbmi.w	r0, [r1], #1
 8019d96:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8019d9a:	2b01      	cmp	r3, #1
 8019d9c:	d911      	bls.n	8019dc2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8019d9e:	ea81 0402 	eor.w	r4, r1, r2
 8019da2:	07a4      	lsls	r4, r4, #30
 8019da4:	4610      	mov	r0, r2
 8019da6:	d022      	beq.n	8019dee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8019da8:	f023 0401 	bic.w	r4, r3, #1
 8019dac:	440c      	add	r4, r1
 8019dae:	428c      	cmp	r4, r1
 8019db0:	4602      	mov	r2, r0
 8019db2:	d904      	bls.n	8019dbe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8019db4:	8812      	ldrh	r2, [r2, #0]
 8019db6:	f821 2b02 	strh.w	r2, [r1], #2
 8019dba:	3002      	adds	r0, #2
 8019dbc:	e7f7      	b.n	8019dae <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8019dbe:	f003 0301 	and.w	r3, r3, #1
 8019dc2:	f023 0003 	bic.w	r0, r3, #3
 8019dc6:	4408      	add	r0, r1
 8019dc8:	4288      	cmp	r0, r1
 8019dca:	4614      	mov	r4, r2
 8019dcc:	d904      	bls.n	8019dd8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8019dce:	6824      	ldr	r4, [r4, #0]
 8019dd0:	f841 4b04 	str.w	r4, [r1], #4
 8019dd4:	3204      	adds	r2, #4
 8019dd6:	e7f7      	b.n	8019dc8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8019dd8:	f003 0303 	and.w	r3, r3, #3
 8019ddc:	440b      	add	r3, r1
 8019dde:	3a01      	subs	r2, #1
 8019de0:	428b      	cmp	r3, r1
 8019de2:	d90c      	bls.n	8019dfe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8019de4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8019de8:	f801 0b01 	strb.w	r0, [r1], #1
 8019dec:	e7f8      	b.n	8019de0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8019dee:	0790      	lsls	r0, r2, #30
 8019df0:	d0e7      	beq.n	8019dc2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8019df2:	f832 0b02 	ldrh.w	r0, [r2], #2
 8019df6:	f821 0b02 	strh.w	r0, [r1], #2
 8019dfa:	3b02      	subs	r3, #2
 8019dfc:	e7e1      	b.n	8019dc2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8019dfe:	2001      	movs	r0, #1
 8019e00:	bd10      	pop	{r4, pc}

08019e02 <_ZN8touchgfx3HAL7noTouchEv>:
 8019e02:	b510      	push	{r4, lr}
 8019e04:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8019e08:	4604      	mov	r4, r0
 8019e0a:	b153      	cbz	r3, 8019e22 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8019e0c:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8019e10:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8019e14:	2101      	movs	r1, #1
 8019e16:	301c      	adds	r0, #28
 8019e18:	f013 f9b0 	bl	802d17c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8019e1c:	2300      	movs	r3, #0
 8019e1e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8019e22:	bd10      	pop	{r4, pc}

08019e24 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8019e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019e28:	b085      	sub	sp, #20
 8019e2a:	ad04      	add	r5, sp, #16
 8019e2c:	4604      	mov	r4, r0
 8019e2e:	2000      	movs	r0, #0
 8019e30:	f845 0d04 	str.w	r0, [r5, #-4]!
 8019e34:	69a0      	ldr	r0, [r4, #24]
 8019e36:	6806      	ldr	r6, [r0, #0]
 8019e38:	9501      	str	r5, [sp, #4]
 8019e3a:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8019e3e:	9500      	str	r5, [sp, #0]
 8019e40:	6835      	ldr	r5, [r6, #0]
 8019e42:	4699      	mov	r9, r3
 8019e44:	460f      	mov	r7, r1
 8019e46:	4690      	mov	r8, r2
 8019e48:	47a8      	blx	r5
 8019e4a:	4d10      	ldr	r5, [pc, #64]	; (8019e8c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8019e4c:	4606      	mov	r6, r0
 8019e4e:	f8a5 9000 	strh.w	r9, [r5]
 8019e52:	f7f6 f927 	bl	80100a4 <_ZN8touchgfx3HAL3lcdEv>
 8019e56:	6803      	ldr	r3, [r0, #0]
 8019e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e5a:	4798      	blx	r3
 8019e5c:	b128      	cbz	r0, 8019e6a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8019e5e:	2801      	cmp	r0, #1
 8019e60:	d00b      	beq.n	8019e7a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8019e62:	4630      	mov	r0, r6
 8019e64:	b005      	add	sp, #20
 8019e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e6a:	882b      	ldrh	r3, [r5, #0]
 8019e6c:	fb08 7203 	mla	r2, r8, r3, r7
 8019e70:	9b03      	ldr	r3, [sp, #12]
 8019e72:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8019e76:	63e3      	str	r3, [r4, #60]	; 0x3c
 8019e78:	e7f3      	b.n	8019e62 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8019e7a:	882a      	ldrh	r2, [r5, #0]
 8019e7c:	9b03      	ldr	r3, [sp, #12]
 8019e7e:	fb08 7202 	mla	r2, r8, r2, r7
 8019e82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019e86:	1a9a      	subs	r2, r3, r2
 8019e88:	63e2      	str	r2, [r4, #60]	; 0x3c
 8019e8a:	e7ea      	b.n	8019e62 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8019e8c:	2000f15c 	.word	0x2000f15c

08019e90 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8019e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e92:	b08b      	sub	sp, #44	; 0x2c
 8019e94:	4617      	mov	r7, r2
 8019e96:	4604      	mov	r4, r0
 8019e98:	460e      	mov	r6, r1
 8019e9a:	461d      	mov	r5, r3
 8019e9c:	f7f6 f902 	bl	80100a4 <_ZN8touchgfx3HAL3lcdEv>
 8019ea0:	6803      	ldr	r3, [r0, #0]
 8019ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ea4:	4798      	blx	r3
 8019ea6:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8019eaa:	9007      	str	r0, [sp, #28]
 8019eac:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8019eb0:	4b0d      	ldr	r3, [pc, #52]	; (8019ee8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8019eb2:	6822      	ldr	r2, [r4, #0]
 8019eb4:	881b      	ldrh	r3, [r3, #0]
 8019eb6:	9306      	str	r3, [sp, #24]
 8019eb8:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8019ebc:	9305      	str	r3, [sp, #20]
 8019ebe:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8019ec2:	9304      	str	r3, [sp, #16]
 8019ec4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019ec8:	9303      	str	r3, [sp, #12]
 8019eca:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8019ece:	9302      	str	r3, [sp, #8]
 8019ed0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019ed4:	e9cd 5300 	strd	r5, r3, [sp]
 8019ed8:	4631      	mov	r1, r6
 8019eda:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8019edc:	463b      	mov	r3, r7
 8019ede:	2200      	movs	r2, #0
 8019ee0:	4620      	mov	r0, r4
 8019ee2:	47a8      	blx	r5
 8019ee4:	b00b      	add	sp, #44	; 0x2c
 8019ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ee8:	2000f15c 	.word	0x2000f15c

08019eec <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8019eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019ef0:	4698      	mov	r8, r3
 8019ef2:	6803      	ldr	r3, [r0, #0]
 8019ef4:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8019ef6:	4b15      	ldr	r3, [pc, #84]	; (8019f4c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8019ef8:	b08b      	sub	sp, #44	; 0x2c
 8019efa:	4617      	mov	r7, r2
 8019efc:	f8b3 9000 	ldrh.w	r9, [r3]
 8019f00:	460e      	mov	r6, r1
 8019f02:	4604      	mov	r4, r0
 8019f04:	f7f6 f8ce 	bl	80100a4 <_ZN8touchgfx3HAL3lcdEv>
 8019f08:	6803      	ldr	r3, [r0, #0]
 8019f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f0c:	4798      	blx	r3
 8019f0e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8019f12:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8019f16:	2302      	movs	r3, #2
 8019f18:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8019f1c:	2301      	movs	r3, #1
 8019f1e:	9305      	str	r3, [sp, #20]
 8019f20:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8019f24:	9304      	str	r3, [sp, #16]
 8019f26:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8019f2a:	9303      	str	r3, [sp, #12]
 8019f2c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8019f30:	9302      	str	r3, [sp, #8]
 8019f32:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8019f36:	2200      	movs	r2, #0
 8019f38:	e9cd 8300 	strd	r8, r3, [sp]
 8019f3c:	4631      	mov	r1, r6
 8019f3e:	463b      	mov	r3, r7
 8019f40:	4620      	mov	r0, r4
 8019f42:	47a8      	blx	r5
 8019f44:	b00b      	add	sp, #44	; 0x2c
 8019f46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019f4a:	bf00      	nop
 8019f4c:	2000f15c 	.word	0x2000f15c

08019f50 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8019f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019f54:	4698      	mov	r8, r3
 8019f56:	6803      	ldr	r3, [r0, #0]
 8019f58:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8019f5a:	4b11      	ldr	r3, [pc, #68]	; (8019fa0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8019f5c:	b087      	sub	sp, #28
 8019f5e:	f8b3 9000 	ldrh.w	r9, [r3]
 8019f62:	460e      	mov	r6, r1
 8019f64:	4617      	mov	r7, r2
 8019f66:	4604      	mov	r4, r0
 8019f68:	f7f6 f89c 	bl	80100a4 <_ZN8touchgfx3HAL3lcdEv>
 8019f6c:	6803      	ldr	r3, [r0, #0]
 8019f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019f70:	4798      	blx	r3
 8019f72:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8019f76:	f8cd 900c 	str.w	r9, [sp, #12]
 8019f7a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8019f7e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8019f82:	9302      	str	r3, [sp, #8]
 8019f84:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8019f88:	9301      	str	r3, [sp, #4]
 8019f8a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019f8e:	9300      	str	r3, [sp, #0]
 8019f90:	463a      	mov	r2, r7
 8019f92:	4643      	mov	r3, r8
 8019f94:	4631      	mov	r1, r6
 8019f96:	4620      	mov	r0, r4
 8019f98:	47a8      	blx	r5
 8019f9a:	b007      	add	sp, #28
 8019f9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019fa0:	2000f15c 	.word	0x2000f15c

08019fa4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8019fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fa8:	4604      	mov	r4, r0
 8019faa:	b08f      	sub	sp, #60	; 0x3c
 8019fac:	4610      	mov	r0, r2
 8019fae:	460d      	mov	r5, r1
 8019fb0:	4691      	mov	r9, r2
 8019fb2:	461e      	mov	r6, r3
 8019fb4:	f007 fae6 	bl	8021584 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8019fb8:	2800      	cmp	r0, #0
 8019fba:	f000 809d 	beq.w	801a0f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8019fbe:	6823      	ldr	r3, [r4, #0]
 8019fc0:	f8df b198 	ldr.w	fp, [pc, #408]	; 801a15c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8019fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019fc6:	f8df a198 	ldr.w	sl, [pc, #408]	; 801a160 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8019fca:	4f61      	ldr	r7, [pc, #388]	; (801a150 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8019fcc:	4620      	mov	r0, r4
 8019fce:	4798      	blx	r3
 8019fd0:	6823      	ldr	r3, [r4, #0]
 8019fd2:	4620      	mov	r0, r4
 8019fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019fd6:	4798      	blx	r3
 8019fd8:	f8bb 3000 	ldrh.w	r3, [fp]
 8019fdc:	9301      	str	r3, [sp, #4]
 8019fde:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8019fe2:	f8ba 3000 	ldrh.w	r3, [sl]
 8019fe6:	9302      	str	r3, [sp, #8]
 8019fe8:	883b      	ldrh	r3, [r7, #0]
 8019fea:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8019fee:	9303      	str	r3, [sp, #12]
 8019ff0:	4b58      	ldr	r3, [pc, #352]	; (801a154 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8019ff2:	9305      	str	r3, [sp, #20]
 8019ff4:	881a      	ldrh	r2, [r3, #0]
 8019ff6:	9204      	str	r2, [sp, #16]
 8019ff8:	4640      	mov	r0, r8
 8019ffa:	f007 fb57 	bl	80216ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019ffe:	8038      	strh	r0, [r7, #0]
 801a000:	4640      	mov	r0, r8
 801a002:	f007 fb87 	bl	8021714 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a006:	9b05      	ldr	r3, [sp, #20]
 801a008:	b280      	uxth	r0, r0
 801a00a:	8018      	strh	r0, [r3, #0]
 801a00c:	4b52      	ldr	r3, [pc, #328]	; (801a158 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801a00e:	781b      	ldrb	r3, [r3, #0]
 801a010:	2b00      	cmp	r3, #0
 801a012:	d174      	bne.n	801a0fe <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 801a014:	883b      	ldrh	r3, [r7, #0]
 801a016:	f8ab 3000 	strh.w	r3, [fp]
 801a01a:	f8aa 0000 	strh.w	r0, [sl]
 801a01e:	4648      	mov	r0, r9
 801a020:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 801a024:	f007 faae 	bl	8021584 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801a028:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 801a02c:	2200      	movs	r2, #0
 801a02e:	4611      	mov	r1, r2
 801a030:	4628      	mov	r0, r5
 801a032:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 801a036:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 801a03a:	f7f6 fd7f 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
 801a03e:	2301      	movs	r3, #1
 801a040:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 801a044:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 801a048:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	dd5c      	ble.n	801a10a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801a050:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 801a054:	2b00      	cmp	r3, #0
 801a056:	dd58      	ble.n	801a10a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 801a058:	462a      	mov	r2, r5
 801a05a:	ab0a      	add	r3, sp, #40	; 0x28
 801a05c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801a060:	6851      	ldr	r1, [r2, #4]
 801a062:	c303      	stmia	r3!, {r0, r1}
 801a064:	4631      	mov	r1, r6
 801a066:	a80a      	add	r0, sp, #40	; 0x28
 801a068:	f7ff fc00 	bl	801986c <_ZN8touchgfx4RectaNERKS0_>
 801a06c:	4b38      	ldr	r3, [pc, #224]	; (801a150 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801a06e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a072:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801a076:	2100      	movs	r1, #0
 801a078:	aa0a      	add	r2, sp, #40	; 0x28
 801a07a:	4b36      	ldr	r3, [pc, #216]	; (801a154 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801a07c:	910c      	str	r1, [sp, #48]	; 0x30
 801a07e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a082:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a086:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a08a:	ab08      	add	r3, sp, #32
 801a08c:	e883 0003 	stmia.w	r3, {r0, r1}
 801a090:	4618      	mov	r0, r3
 801a092:	a90c      	add	r1, sp, #48	; 0x30
 801a094:	f7ff fbea 	bl	801986c <_ZN8touchgfx4RectaNERKS0_>
 801a098:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d13c      	bne.n	801a118 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801a09e:	2000      	movs	r0, #0
 801a0a0:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 801a0a4:	2600      	movs	r6, #0
 801a0a6:	682a      	ldr	r2, [r5, #0]
 801a0a8:	696b      	ldr	r3, [r5, #20]
 801a0aa:	616e      	str	r6, [r5, #20]
 801a0ac:	9305      	str	r3, [sp, #20]
 801a0ae:	6892      	ldr	r2, [r2, #8]
 801a0b0:	a908      	add	r1, sp, #32
 801a0b2:	4628      	mov	r0, r5
 801a0b4:	4790      	blx	r2
 801a0b6:	9b05      	ldr	r3, [sp, #20]
 801a0b8:	616b      	str	r3, [r5, #20]
 801a0ba:	4652      	mov	r2, sl
 801a0bc:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 801a0c0:	4649      	mov	r1, r9
 801a0c2:	4628      	mov	r0, r5
 801a0c4:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801a0c8:	f7f6 fd38 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
 801a0cc:	4b23      	ldr	r3, [pc, #140]	; (801a15c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801a0ce:	9a01      	ldr	r2, [sp, #4]
 801a0d0:	801a      	strh	r2, [r3, #0]
 801a0d2:	4b23      	ldr	r3, [pc, #140]	; (801a160 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801a0d4:	9a02      	ldr	r2, [sp, #8]
 801a0d6:	801a      	strh	r2, [r3, #0]
 801a0d8:	4b1d      	ldr	r3, [pc, #116]	; (801a150 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801a0da:	9a03      	ldr	r2, [sp, #12]
 801a0dc:	801a      	strh	r2, [r3, #0]
 801a0de:	4b1d      	ldr	r3, [pc, #116]	; (801a154 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801a0e0:	9a04      	ldr	r2, [sp, #16]
 801a0e2:	801a      	strh	r2, [r3, #0]
 801a0e4:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 801a0e8:	6823      	ldr	r3, [r4, #0]
 801a0ea:	4620      	mov	r0, r4
 801a0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a0ee:	4798      	blx	r3
 801a0f0:	6823      	ldr	r3, [r4, #0]
 801a0f2:	4620      	mov	r0, r4
 801a0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a0f6:	4798      	blx	r3
 801a0f8:	b00f      	add	sp, #60	; 0x3c
 801a0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0fe:	883b      	ldrh	r3, [r7, #0]
 801a100:	f8ab 0000 	strh.w	r0, [fp]
 801a104:	f8aa 3000 	strh.w	r3, [sl]
 801a108:	e789      	b.n	801a01e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 801a10a:	462a      	mov	r2, r5
 801a10c:	ab0a      	add	r3, sp, #40	; 0x28
 801a10e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801a112:	6851      	ldr	r1, [r2, #4]
 801a114:	c303      	stmia	r3!, {r0, r1}
 801a116:	e7a9      	b.n	801a06c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 801a118:	a807      	add	r0, sp, #28
 801a11a:	f007 fc37 	bl	802198c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a11e:	4606      	mov	r6, r0
 801a120:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801a122:	6803      	ldr	r3, [r0, #0]
 801a124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a126:	4798      	blx	r3
 801a128:	4286      	cmp	r6, r0
 801a12a:	d1b8      	bne.n	801a09e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 801a12c:	f7f5 ffba 	bl	80100a4 <_ZN8touchgfx3HAL3lcdEv>
 801a130:	6803      	ldr	r3, [r0, #0]
 801a132:	4606      	mov	r6, r0
 801a134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a136:	9305      	str	r3, [sp, #20]
 801a138:	a807      	add	r0, sp, #28
 801a13a:	f007 fc27 	bl	802198c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a13e:	9b05      	ldr	r3, [sp, #20]
 801a140:	4601      	mov	r1, r0
 801a142:	4630      	mov	r0, r6
 801a144:	4798      	blx	r3
 801a146:	f080 0001 	eor.w	r0, r0, #1
 801a14a:	b2c0      	uxtb	r0, r0
 801a14c:	e7a8      	b.n	801a0a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 801a14e:	bf00      	nop
 801a150:	2000f156 	.word	0x2000f156
 801a154:	2000f158 	.word	0x2000f158
 801a158:	2000f15a 	.word	0x2000f15a
 801a15c:	2000f15c 	.word	0x2000f15c
 801a160:	2000f15e 	.word	0x2000f15e

0801a164 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801a164:	b510      	push	{r4, lr}
 801a166:	4b07      	ldr	r3, [pc, #28]	; (801a184 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801a168:	781b      	ldrb	r3, [r3, #0]
 801a16a:	4604      	mov	r4, r0
 801a16c:	b13b      	cbz	r3, 801a17e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801a16e:	6803      	ldr	r3, [r0, #0]
 801a170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a172:	4798      	blx	r3
 801a174:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801a176:	4283      	cmp	r3, r0
 801a178:	d101      	bne.n	801a17e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801a17a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801a17c:	bd10      	pop	{r4, pc}
 801a17e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801a180:	e7fc      	b.n	801a17c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801a182:	bf00      	nop
 801a184:	2000f160 	.word	0x2000f160

0801a188 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801a188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a18c:	b08a      	sub	sp, #40	; 0x28
 801a18e:	461d      	mov	r5, r3
 801a190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a194:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801a198:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a19c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a1a0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a1a4:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a1a8:	2400      	movs	r4, #0
 801a1aa:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a1ae:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801a1b2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a1b6:	4690      	mov	r8, r2
 801a1b8:	4607      	mov	r7, r0
 801a1ba:	9404      	str	r4, [sp, #16]
 801a1bc:	f88d 4020 	strb.w	r4, [sp, #32]
 801a1c0:	f7ff ffd0 	bl	801a164 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a1c4:	fb06 8505 	mla	r5, r6, r5, r8
 801a1c8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801a1cc:	6878      	ldr	r0, [r7, #4]
 801a1ce:	9505      	str	r5, [sp, #20]
 801a1d0:	f8ad 601e 	strh.w	r6, [sp, #30]
 801a1d4:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801a1d8:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 801a1dc:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801a1e0:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801a1e4:	6803      	ldr	r3, [r0, #0]
 801a1e6:	a901      	add	r1, sp, #4
 801a1e8:	685b      	ldr	r3, [r3, #4]
 801a1ea:	4798      	blx	r3
 801a1ec:	b00a      	add	sp, #40	; 0x28
 801a1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a1f2 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801a1f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a1f6:	b08b      	sub	sp, #44	; 0x2c
 801a1f8:	2400      	movs	r4, #0
 801a1fa:	461d      	mov	r5, r3
 801a1fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a200:	4688      	mov	r8, r1
 801a202:	4691      	mov	r9, r2
 801a204:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801a208:	9404      	str	r4, [sp, #16]
 801a20a:	4607      	mov	r7, r0
 801a20c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a210:	f7ff ffa8 	bl	801a164 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a214:	fb06 9505 	mla	r5, r6, r5, r9
 801a218:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a21c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a220:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801a224:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801a228:	6878      	ldr	r0, [r7, #4]
 801a22a:	9505      	str	r5, [sp, #20]
 801a22c:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a230:	f8ad 401c 	strh.w	r4, [sp, #28]
 801a234:	f8ad 601e 	strh.w	r6, [sp, #30]
 801a238:	f8cd 8010 	str.w	r8, [sp, #16]
 801a23c:	f8ad 4020 	strh.w	r4, [sp, #32]
 801a240:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801a244:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801a248:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801a24c:	6803      	ldr	r3, [r0, #0]
 801a24e:	a901      	add	r1, sp, #4
 801a250:	685b      	ldr	r3, [r3, #4]
 801a252:	4798      	blx	r3
 801a254:	b00b      	add	sp, #44	; 0x2c
 801a256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0801a25c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 801a25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a260:	b08a      	sub	sp, #40	; 0x28
 801a262:	4698      	mov	r8, r3
 801a264:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 801a268:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801a26c:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 801a270:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 801a274:	2300      	movs	r3, #0
 801a276:	2d0b      	cmp	r5, #11
 801a278:	4606      	mov	r6, r0
 801a27a:	9304      	str	r3, [sp, #16]
 801a27c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801a280:	d138      	bne.n	801a2f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 801a282:	2380      	movs	r3, #128	; 0x80
 801a284:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801a288:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a28c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a290:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a294:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a298:	f88d 0020 	strb.w	r0, [sp, #32]
 801a29c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801a2a0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a2a4:	4630      	mov	r0, r6
 801a2a6:	9203      	str	r2, [sp, #12]
 801a2a8:	f7ff ff5c 	bl	801a164 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a2ac:	2c0b      	cmp	r4, #11
 801a2ae:	bf98      	it	ls
 801a2b0:	4b1b      	ldrls	r3, [pc, #108]	; (801a320 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801a2b2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801a2b6:	bf98      	it	ls
 801a2b8:	5d19      	ldrbls	r1, [r3, r4]
 801a2ba:	f8ad 701e 	strh.w	r7, [sp, #30]
 801a2be:	bf88      	it	hi
 801a2c0:	2100      	movhi	r1, #0
 801a2c2:	fb02 8307 	mla	r3, r2, r7, r8
 801a2c6:	10c9      	asrs	r1, r1, #3
 801a2c8:	fb01 0003 	mla	r0, r1, r3, r0
 801a2cc:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801a2d0:	9005      	str	r0, [sp, #20]
 801a2d2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801a2d6:	6870      	ldr	r0, [r6, #4]
 801a2d8:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 801a2dc:	2300      	movs	r3, #0
 801a2de:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801a2e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801a2e6:	6803      	ldr	r3, [r0, #0]
 801a2e8:	a901      	add	r1, sp, #4
 801a2ea:	685b      	ldr	r3, [r3, #4]
 801a2ec:	4798      	blx	r3
 801a2ee:	b00a      	add	sp, #40	; 0x28
 801a2f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2f4:	2d02      	cmp	r5, #2
 801a2f6:	d109      	bne.n	801a30c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 801a2f8:	28ff      	cmp	r0, #255	; 0xff
 801a2fa:	d105      	bne.n	801a308 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 801a2fc:	f1bc 0f00 	cmp.w	ip, #0
 801a300:	bf14      	ite	ne
 801a302:	2340      	movne	r3, #64	; 0x40
 801a304:	2320      	moveq	r3, #32
 801a306:	e7bd      	b.n	801a284 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801a308:	2340      	movs	r3, #64	; 0x40
 801a30a:	e7bb      	b.n	801a284 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801a30c:	28ff      	cmp	r0, #255	; 0xff
 801a30e:	d105      	bne.n	801a31c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 801a310:	f1bc 0f00 	cmp.w	ip, #0
 801a314:	bf14      	ite	ne
 801a316:	2304      	movne	r3, #4
 801a318:	2301      	moveq	r3, #1
 801a31a:	e7b3      	b.n	801a284 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801a31c:	2304      	movs	r3, #4
 801a31e:	e7b1      	b.n	801a284 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801a320:	080304ac 	.word	0x080304ac

0801a324 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 801a324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a328:	b08b      	sub	sp, #44	; 0x2c
 801a32a:	461d      	mov	r5, r3
 801a32c:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 801a330:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801a334:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 801a338:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801a33c:	bf14      	ite	ne
 801a33e:	2308      	movne	r3, #8
 801a340:	2302      	moveq	r3, #2
 801a342:	2400      	movs	r4, #0
 801a344:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a348:	4688      	mov	r8, r1
 801a34a:	4693      	mov	fp, r2
 801a34c:	9404      	str	r4, [sp, #16]
 801a34e:	4607      	mov	r7, r0
 801a350:	f7ff ff08 	bl	801a164 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a354:	2e0b      	cmp	r6, #11
 801a356:	bf98      	it	ls
 801a358:	4b15      	ldrls	r3, [pc, #84]	; (801a3b0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 801a35a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801a35e:	bf98      	it	ls
 801a360:	5d9c      	ldrbls	r4, [r3, r6]
 801a362:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801a366:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a36a:	fb05 b50a 	mla	r5, r5, sl, fp
 801a36e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801a372:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a376:	10e4      	asrs	r4, r4, #3
 801a378:	fb04 0405 	mla	r4, r4, r5, r0
 801a37c:	2300      	movs	r3, #0
 801a37e:	6878      	ldr	r0, [r7, #4]
 801a380:	9405      	str	r4, [sp, #20]
 801a382:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a386:	f8ad a01e 	strh.w	sl, [sp, #30]
 801a38a:	f8cd 8010 	str.w	r8, [sp, #16]
 801a38e:	f88d 9020 	strb.w	r9, [sp, #32]
 801a392:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 801a396:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801a39a:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 801a39e:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 801a3a2:	6803      	ldr	r3, [r0, #0]
 801a3a4:	a901      	add	r1, sp, #4
 801a3a6:	685b      	ldr	r3, [r3, #4]
 801a3a8:	4798      	blx	r3
 801a3aa:	b00b      	add	sp, #44	; 0x2c
 801a3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3b0:	080304ac 	.word	0x080304ac

0801a3b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801a3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3b8:	461e      	mov	r6, r3
 801a3ba:	4b0a      	ldr	r3, [pc, #40]	; (801a3e4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 801a3bc:	460f      	mov	r7, r1
 801a3be:	881d      	ldrh	r5, [r3, #0]
 801a3c0:	4690      	mov	r8, r2
 801a3c2:	f7f5 fe6f 	bl	80100a4 <_ZN8touchgfx3HAL3lcdEv>
 801a3c6:	6803      	ldr	r3, [r0, #0]
 801a3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3ca:	4798      	blx	r3
 801a3cc:	280b      	cmp	r0, #11
 801a3ce:	bf9a      	itte	ls
 801a3d0:	4b05      	ldrls	r3, [pc, #20]	; (801a3e8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801a3d2:	5c1c      	ldrbls	r4, [r3, r0]
 801a3d4:	2400      	movhi	r4, #0
 801a3d6:	fb08 7005 	mla	r0, r8, r5, r7
 801a3da:	10e4      	asrs	r4, r4, #3
 801a3dc:	fb04 6000 	mla	r0, r4, r0, r6
 801a3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3e4:	2000f15c 	.word	0x2000f15c
 801a3e8:	080304ac 	.word	0x080304ac

0801a3ec <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 801a3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a3ee:	b08b      	sub	sp, #44	; 0x2c
 801a3f0:	461f      	mov	r7, r3
 801a3f2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801a3f6:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801a3fa:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801a3fe:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a402:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a406:	f8ad 301a 	strh.w	r3, [sp, #26]
 801a40a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801a40e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a412:	2500      	movs	r5, #0
 801a414:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801a418:	f88d 3020 	strb.w	r3, [sp, #32]
 801a41c:	4604      	mov	r4, r0
 801a41e:	4616      	mov	r6, r2
 801a420:	9504      	str	r5, [sp, #16]
 801a422:	f7ff fe9f 	bl	801a164 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a426:	463a      	mov	r2, r7
 801a428:	4631      	mov	r1, r6
 801a42a:	4603      	mov	r3, r0
 801a42c:	4620      	mov	r0, r4
 801a42e:	f7ff ffc1 	bl	801a3b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a432:	4b0e      	ldr	r3, [pc, #56]	; (801a46c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 801a434:	9005      	str	r0, [sp, #20]
 801a436:	881b      	ldrh	r3, [r3, #0]
 801a438:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a43c:	f7f5 fe32 	bl	80100a4 <_ZN8touchgfx3HAL3lcdEv>
 801a440:	6803      	ldr	r3, [r0, #0]
 801a442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a444:	4798      	blx	r3
 801a446:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a448:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 801a44c:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 801a450:	9304      	str	r3, [sp, #16]
 801a452:	6860      	ldr	r0, [r4, #4]
 801a454:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801a458:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801a45c:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 801a460:	6803      	ldr	r3, [r0, #0]
 801a462:	a901      	add	r1, sp, #4
 801a464:	685b      	ldr	r3, [r3, #4]
 801a466:	4798      	blx	r3
 801a468:	b00b      	add	sp, #44	; 0x2c
 801a46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a46c:	2000f15c 	.word	0x2000f15c

0801a470 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801a470:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a472:	b08d      	sub	sp, #52	; 0x34
 801a474:	466b      	mov	r3, sp
 801a476:	e883 0006 	stmia.w	r3, {r1, r2}
 801a47a:	2300      	movs	r3, #0
 801a47c:	9306      	str	r3, [sp, #24]
 801a47e:	6803      	ldr	r3, [r0, #0]
 801a480:	f8bd 6000 	ldrh.w	r6, [sp]
 801a484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a486:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801a48a:	2501      	movs	r5, #1
 801a48c:	9503      	str	r5, [sp, #12]
 801a48e:	4604      	mov	r4, r0
 801a490:	4798      	blx	r3
 801a492:	463a      	mov	r2, r7
 801a494:	4631      	mov	r1, r6
 801a496:	4603      	mov	r3, r0
 801a498:	4620      	mov	r0, r4
 801a49a:	f7ff ff8b 	bl	801a3b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a49e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801a4a0:	9307      	str	r3, [sp, #28]
 801a4a2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a4a6:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a4aa:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801a4ae:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a4b2:	4b0f      	ldr	r3, [pc, #60]	; (801a4f0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801a4b4:	9004      	str	r0, [sp, #16]
 801a4b6:	881b      	ldrh	r3, [r3, #0]
 801a4b8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801a4bc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801a4c0:	f7f5 fdf0 	bl	80100a4 <_ZN8touchgfx3HAL3lcdEv>
 801a4c4:	6803      	ldr	r3, [r0, #0]
 801a4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4c8:	4798      	blx	r3
 801a4ca:	23ff      	movs	r3, #255	; 0xff
 801a4cc:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801a4d0:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801a4d4:	6860      	ldr	r0, [r4, #4]
 801a4d6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801a4da:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801a4de:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801a4e2:	6803      	ldr	r3, [r0, #0]
 801a4e4:	a903      	add	r1, sp, #12
 801a4e6:	685b      	ldr	r3, [r3, #4]
 801a4e8:	4798      	blx	r3
 801a4ea:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801a4ec:	b00d      	add	sp, #52	; 0x34
 801a4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a4f0:	2000f15c 	.word	0x2000f15c

0801a4f4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801a4f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4f8:	b08c      	sub	sp, #48	; 0x30
 801a4fa:	461e      	mov	r6, r3
 801a4fc:	466d      	mov	r5, sp
 801a4fe:	2300      	movs	r3, #0
 801a500:	e885 0006 	stmia.w	r5, {r1, r2}
 801a504:	9306      	str	r3, [sp, #24]
 801a506:	6803      	ldr	r3, [r0, #0]
 801a508:	f8bd 7000 	ldrh.w	r7, [sp]
 801a50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a50e:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801a512:	2501      	movs	r5, #1
 801a514:	9503      	str	r5, [sp, #12]
 801a516:	4604      	mov	r4, r0
 801a518:	4798      	blx	r3
 801a51a:	4642      	mov	r2, r8
 801a51c:	4639      	mov	r1, r7
 801a51e:	4603      	mov	r3, r0
 801a520:	4620      	mov	r0, r4
 801a522:	f7ff ff47 	bl	801a3b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a526:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801a52a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801a52e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801a532:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a536:	4b11      	ldr	r3, [pc, #68]	; (801a57c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 801a538:	9004      	str	r0, [sp, #16]
 801a53a:	881b      	ldrh	r3, [r3, #0]
 801a53c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 801a540:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a542:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801a546:	9607      	str	r6, [sp, #28]
 801a548:	f7f5 fdac 	bl	80100a4 <_ZN8touchgfx3HAL3lcdEv>
 801a54c:	6803      	ldr	r3, [r0, #0]
 801a54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a550:	4798      	blx	r3
 801a552:	23ff      	movs	r3, #255	; 0xff
 801a554:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801a558:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801a55c:	6860      	ldr	r0, [r4, #4]
 801a55e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801a562:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801a566:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 801a56a:	6803      	ldr	r3, [r0, #0]
 801a56c:	a903      	add	r1, sp, #12
 801a56e:	685b      	ldr	r3, [r3, #4]
 801a570:	4798      	blx	r3
 801a572:	4630      	mov	r0, r6
 801a574:	b00c      	add	sp, #48	; 0x30
 801a576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a57a:	bf00      	nop
 801a57c:	2000f15c 	.word	0x2000f15c

0801a580 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 801a580:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a582:	b085      	sub	sp, #20
 801a584:	ac02      	add	r4, sp, #8
 801a586:	e884 0006 	stmia.w	r4, {r1, r2}
 801a58a:	4605      	mov	r5, r0
 801a58c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 801a590:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 801a594:	f7ff fde6 	bl	801a164 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a598:	463a      	mov	r2, r7
 801a59a:	4603      	mov	r3, r0
 801a59c:	4631      	mov	r1, r6
 801a59e:	4628      	mov	r0, r5
 801a5a0:	f7ff ff08 	bl	801a3b4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801a5a4:	4a05      	ldr	r2, [pc, #20]	; (801a5bc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801a5a6:	682b      	ldr	r3, [r5, #0]
 801a5a8:	8812      	ldrh	r2, [r2, #0]
 801a5aa:	9200      	str	r2, [sp, #0]
 801a5ac:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801a5ae:	e894 0006 	ldmia.w	r4, {r1, r2}
 801a5b2:	4603      	mov	r3, r0
 801a5b4:	4628      	mov	r0, r5
 801a5b6:	47b0      	blx	r6
 801a5b8:	b005      	add	sp, #20
 801a5ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5bc:	2000f15c 	.word	0x2000f15c

0801a5c0 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801a5c0:	b570      	push	{r4, r5, r6, lr}
 801a5c2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801a5c6:	4604      	mov	r4, r0
 801a5c8:	b19b      	cbz	r3, 801a5f2 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801a5ca:	2002      	movs	r0, #2
 801a5cc:	f7fd f9a8 	bl	8017920 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801a5d0:	2300      	movs	r3, #0
 801a5d2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801a5d6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801a5da:	6823      	ldr	r3, [r4, #0]
 801a5dc:	4620      	mov	r0, r4
 801a5de:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801a5e2:	f7ff fdbf 	bl	801a164 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a5e6:	462b      	mov	r3, r5
 801a5e8:	4601      	mov	r1, r0
 801a5ea:	4620      	mov	r0, r4
 801a5ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a5f0:	4718      	bx	r3
 801a5f2:	bd70      	pop	{r4, r5, r6, pc}

0801a5f4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 801a5f4:	b538      	push	{r3, r4, r5, lr}
 801a5f6:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 801a5fa:	428b      	cmp	r3, r1
 801a5fc:	4604      	mov	r4, r0
 801a5fe:	460d      	mov	r5, r1
 801a600:	d006      	beq.n	801a610 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 801a602:	6803      	ldr	r3, [r0, #0]
 801a604:	b929      	cbnz	r1, 801a612 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801a606:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801a60a:	4798      	blx	r3
 801a60c:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 801a610:	bd38      	pop	{r3, r4, r5, pc}
 801a612:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801a616:	e7f8      	b.n	801a60a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801a618 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801a618:	b510      	push	{r4, lr}
 801a61a:	4b0d      	ldr	r3, [pc, #52]	; (801a650 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801a61c:	781b      	ldrb	r3, [r3, #0]
 801a61e:	4604      	mov	r4, r0
 801a620:	b95b      	cbnz	r3, 801a63a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801a622:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801a626:	2b02      	cmp	r3, #2
 801a628:	d007      	beq.n	801a63a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801a62a:	6840      	ldr	r0, [r0, #4]
 801a62c:	f000 f926 	bl	801a87c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801a630:	b118      	cbz	r0, 801a63a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801a632:	6862      	ldr	r2, [r4, #4]
 801a634:	7a53      	ldrb	r3, [r2, #9]
 801a636:	2b00      	cmp	r3, #0
 801a638:	d0fc      	beq.n	801a634 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801a63a:	f7fd fbf5 	bl	8017e28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801a63e:	4620      	mov	r0, r4
 801a640:	2100      	movs	r1, #0
 801a642:	f7ff ffd7 	bl	801a5f4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801a646:	4620      	mov	r0, r4
 801a648:	f7ff fd8c 	bl	801a164 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801a64c:	bd10      	pop	{r4, pc}
 801a64e:	bf00      	nop
 801a650:	2000f160 	.word	0x2000f160

0801a654 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 801a654:	b570      	push	{r4, r5, r6, lr}
 801a656:	4604      	mov	r4, r0
 801a658:	6803      	ldr	r3, [r0, #0]
 801a65a:	b919      	cbnz	r1, 801a664 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 801a65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a65e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a662:	4718      	bx	r3
 801a664:	2200      	movs	r2, #0
 801a666:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 801a66a:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 801a66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a670:	4798      	blx	r3
 801a672:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 801a676:	4605      	mov	r5, r0
 801a678:	2101      	movs	r1, #1
 801a67a:	4620      	mov	r0, r4
 801a67c:	f7ff ffba 	bl	801a5f4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801a680:	4628      	mov	r0, r5
 801a682:	bd70      	pop	{r4, r5, r6, pc}

0801a684 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801a684:	4770      	bx	lr

0801a686 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 801a686:	2000      	movs	r0, #0
 801a688:	4770      	bx	lr

0801a68a <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801a68a:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 801a68e:	1a13      	subs	r3, r2, r0
 801a690:	4258      	negs	r0, r3
 801a692:	4158      	adcs	r0, r3
 801a694:	4770      	bx	lr

0801a696 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801a696:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801a69a:	1a9b      	subs	r3, r3, r2
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	bfdc      	itt	le
 801a6a0:	6882      	ldrle	r2, [r0, #8]
 801a6a2:	189b      	addle	r3, r3, r2
 801a6a4:	2b01      	cmp	r3, #1
 801a6a6:	bfcc      	ite	gt
 801a6a8:	2000      	movgt	r0, #0
 801a6aa:	2001      	movle	r0, #1
 801a6ac:	4770      	bx	lr

0801a6ae <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801a6ae:	6902      	ldr	r2, [r0, #16]
 801a6b0:	6843      	ldr	r3, [r0, #4]
 801a6b2:	2024      	movs	r0, #36	; 0x24
 801a6b4:	fb00 3002 	mla	r0, r0, r2, r3
 801a6b8:	4770      	bx	lr

0801a6ba <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801a6ba:	6803      	ldr	r3, [r0, #0]
 801a6bc:	691b      	ldr	r3, [r3, #16]
 801a6be:	4718      	bx	r3

0801a6c0 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801a6c0:	b570      	push	{r4, r5, r6, lr}
 801a6c2:	2301      	movs	r3, #1
 801a6c4:	7203      	strb	r3, [r0, #8]
 801a6c6:	4604      	mov	r4, r0
 801a6c8:	6840      	ldr	r0, [r0, #4]
 801a6ca:	6803      	ldr	r3, [r0, #0]
 801a6cc:	699b      	ldr	r3, [r3, #24]
 801a6ce:	4798      	blx	r3
 801a6d0:	6803      	ldr	r3, [r0, #0]
 801a6d2:	2b40      	cmp	r3, #64	; 0x40
 801a6d4:	4605      	mov	r5, r0
 801a6d6:	d00c      	beq.n	801a6f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a6d8:	d810      	bhi.n	801a6fc <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801a6da:	2b04      	cmp	r3, #4
 801a6dc:	d01d      	beq.n	801a71a <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 801a6de:	d804      	bhi.n	801a6ea <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 801a6e0:	2b01      	cmp	r3, #1
 801a6e2:	d006      	beq.n	801a6f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a6e4:	2b02      	cmp	r3, #2
 801a6e6:	d02c      	beq.n	801a742 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801a6e8:	bd70      	pop	{r4, r5, r6, pc}
 801a6ea:	2b08      	cmp	r3, #8
 801a6ec:	d01d      	beq.n	801a72a <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 801a6ee:	2b20      	cmp	r3, #32
 801a6f0:	d1fa      	bne.n	801a6e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801a6f2:	6823      	ldr	r3, [r4, #0]
 801a6f4:	4620      	mov	r0, r4
 801a6f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a6f8:	4798      	blx	r3
 801a6fa:	e013      	b.n	801a724 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801a6fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a700:	d0f7      	beq.n	801a6f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a702:	d804      	bhi.n	801a70e <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801a704:	2b80      	cmp	r3, #128	; 0x80
 801a706:	d0f4      	beq.n	801a6f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a70c:	e7f0      	b.n	801a6f0 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 801a70e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a712:	d0ee      	beq.n	801a6f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801a714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a718:	e7e5      	b.n	801a6e6 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801a71a:	6823      	ldr	r3, [r4, #0]
 801a71c:	7f01      	ldrb	r1, [r0, #28]
 801a71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a720:	4620      	mov	r0, r4
 801a722:	4798      	blx	r3
 801a724:	6823      	ldr	r3, [r4, #0]
 801a726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a728:	e006      	b.n	801a738 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801a72a:	6823      	ldr	r3, [r4, #0]
 801a72c:	7f01      	ldrb	r1, [r0, #28]
 801a72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a730:	4620      	mov	r0, r4
 801a732:	4798      	blx	r3
 801a734:	6823      	ldr	r3, [r4, #0]
 801a736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a738:	4629      	mov	r1, r5
 801a73a:	4620      	mov	r0, r4
 801a73c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a740:	4718      	bx	r3
 801a742:	6823      	ldr	r3, [r4, #0]
 801a744:	4620      	mov	r0, r4
 801a746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a748:	4798      	blx	r3
 801a74a:	e7f3      	b.n	801a734 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0801a74c <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801a74c:	4770      	bx	lr

0801a74e <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801a74e:	4770      	bx	lr

0801a750 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801a750:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 801a754:	1ad2      	subs	r2, r2, r3
 801a756:	2a00      	cmp	r2, #0
 801a758:	b510      	push	{r4, lr}
 801a75a:	bfdc      	itt	le
 801a75c:	6884      	ldrle	r4, [r0, #8]
 801a75e:	1912      	addle	r2, r2, r4
 801a760:	2a01      	cmp	r2, #1
 801a762:	dd16      	ble.n	801a792 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 801a764:	6842      	ldr	r2, [r0, #4]
 801a766:	2424      	movs	r4, #36	; 0x24
 801a768:	fb04 2303 	mla	r3, r4, r3, r2
 801a76c:	f101 0220 	add.w	r2, r1, #32
 801a770:	f851 4b04 	ldr.w	r4, [r1], #4
 801a774:	f843 4b04 	str.w	r4, [r3], #4
 801a778:	4291      	cmp	r1, r2
 801a77a:	d1f9      	bne.n	801a770 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801a77c:	780a      	ldrb	r2, [r1, #0]
 801a77e:	701a      	strb	r2, [r3, #0]
 801a780:	68c3      	ldr	r3, [r0, #12]
 801a782:	6882      	ldr	r2, [r0, #8]
 801a784:	f3bf 8f5b 	dmb	ish
 801a788:	3301      	adds	r3, #1
 801a78a:	429a      	cmp	r2, r3
 801a78c:	bfd8      	it	le
 801a78e:	1a9b      	suble	r3, r3, r2
 801a790:	60c3      	str	r3, [r0, #12]
 801a792:	bd10      	pop	{r4, pc}

0801a794 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801a794:	6903      	ldr	r3, [r0, #16]
 801a796:	6882      	ldr	r2, [r0, #8]
 801a798:	f3bf 8f5b 	dmb	ish
 801a79c:	3301      	adds	r3, #1
 801a79e:	429a      	cmp	r2, r3
 801a7a0:	bfd8      	it	le
 801a7a2:	1a9b      	suble	r3, r3, r2
 801a7a4:	6103      	str	r3, [r0, #16]
 801a7a6:	4770      	bx	lr

0801a7a8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801a7a8:	b570      	push	{r4, r5, r6, lr}
 801a7aa:	4604      	mov	r4, r0
 801a7ac:	460e      	mov	r6, r1
 801a7ae:	6860      	ldr	r0, [r4, #4]
 801a7b0:	6803      	ldr	r3, [r0, #0]
 801a7b2:	685b      	ldr	r3, [r3, #4]
 801a7b4:	4798      	blx	r3
 801a7b6:	2800      	cmp	r0, #0
 801a7b8:	d1f9      	bne.n	801a7ae <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801a7ba:	4d0d      	ldr	r5, [pc, #52]	; (801a7f0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 801a7bc:	6828      	ldr	r0, [r5, #0]
 801a7be:	6803      	ldr	r3, [r0, #0]
 801a7c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a7c2:	4798      	blx	r3
 801a7c4:	f7fd fb4a 	bl	8017e5c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801a7c8:	6828      	ldr	r0, [r5, #0]
 801a7ca:	2101      	movs	r1, #1
 801a7cc:	f7ff ff12 	bl	801a5f4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801a7d0:	6860      	ldr	r0, [r4, #4]
 801a7d2:	6803      	ldr	r3, [r0, #0]
 801a7d4:	4631      	mov	r1, r6
 801a7d6:	689b      	ldr	r3, [r3, #8]
 801a7d8:	4798      	blx	r3
 801a7da:	6823      	ldr	r3, [r4, #0]
 801a7dc:	4620      	mov	r0, r4
 801a7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a7e0:	4798      	blx	r3
 801a7e2:	6828      	ldr	r0, [r5, #0]
 801a7e4:	6803      	ldr	r3, [r0, #0]
 801a7e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a7ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a7ec:	4718      	bx	r3
 801a7ee:	bf00      	nop
 801a7f0:	2000f164 	.word	0x2000f164

0801a7f4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801a7f4:	b508      	push	{r3, lr}
 801a7f6:	f7fd fb17 	bl	8017e28 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801a7fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a7fe:	f7fd bb21 	b.w	8017e44 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801a802 <_ZN8touchgfx13DMA_Interface5startEv>:
 801a802:	b510      	push	{r4, lr}
 801a804:	4604      	mov	r4, r0
 801a806:	6840      	ldr	r0, [r0, #4]
 801a808:	6803      	ldr	r3, [r0, #0]
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	4798      	blx	r3
 801a80e:	b948      	cbnz	r0, 801a824 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a810:	7a63      	ldrb	r3, [r4, #9]
 801a812:	b13b      	cbz	r3, 801a824 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a814:	7a23      	ldrb	r3, [r4, #8]
 801a816:	b92b      	cbnz	r3, 801a824 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801a818:	6823      	ldr	r3, [r4, #0]
 801a81a:	4620      	mov	r0, r4
 801a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a81e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a822:	4718      	bx	r3
 801a824:	bd10      	pop	{r4, pc}

0801a826 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801a826:	b570      	push	{r4, r5, r6, lr}
 801a828:	4604      	mov	r4, r0
 801a82a:	6840      	ldr	r0, [r0, #4]
 801a82c:	6803      	ldr	r3, [r0, #0]
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	4798      	blx	r3
 801a832:	4605      	mov	r5, r0
 801a834:	b930      	cbnz	r0, 801a844 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801a836:	7a23      	ldrb	r3, [r4, #8]
 801a838:	b123      	cbz	r3, 801a844 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801a83a:	6860      	ldr	r0, [r4, #4]
 801a83c:	6803      	ldr	r3, [r0, #0]
 801a83e:	695b      	ldr	r3, [r3, #20]
 801a840:	4798      	blx	r3
 801a842:	7225      	strb	r5, [r4, #8]
 801a844:	6860      	ldr	r0, [r4, #4]
 801a846:	6803      	ldr	r3, [r0, #0]
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	4798      	blx	r3
 801a84c:	b928      	cbnz	r0, 801a85a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 801a84e:	6823      	ldr	r3, [r4, #0]
 801a850:	4620      	mov	r0, r4
 801a852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a858:	4718      	bx	r3
 801a85a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a85e:	f7fd bb09 	b.w	8017e74 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

0801a864 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801a864:	b510      	push	{r4, lr}
 801a866:	4c04      	ldr	r4, [pc, #16]	; (801a878 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801a868:	6082      	str	r2, [r0, #8]
 801a86a:	2200      	movs	r2, #0
 801a86c:	e9c0 4100 	strd	r4, r1, [r0]
 801a870:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801a874:	bd10      	pop	{r4, pc}
 801a876:	bf00      	nop
 801a878:	080305e8 	.word	0x080305e8

0801a87c <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801a87c:	6840      	ldr	r0, [r0, #4]
 801a87e:	6803      	ldr	r3, [r0, #0]
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	4718      	bx	r3

0801a884 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 801a884:	b508      	push	{r3, lr}
 801a886:	4b05      	ldr	r3, [pc, #20]	; (801a89c <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 801a888:	6818      	ldr	r0, [r3, #0]
 801a88a:	6803      	ldr	r3, [r0, #0]
 801a88c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801a890:	4798      	blx	r3
 801a892:	1e43      	subs	r3, r0, #1
 801a894:	4258      	negs	r0, r3
 801a896:	4158      	adcs	r0, r3
 801a898:	bd08      	pop	{r3, pc}
 801a89a:	bf00      	nop
 801a89c:	2000f164 	.word	0x2000f164

0801a8a0 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 801a8a0:	b430      	push	{r4, r5}
 801a8a2:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 801a8a6:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801a8aa:	8a02      	ldrh	r2, [r0, #16]
 801a8ac:	9202      	str	r2, [sp, #8]
 801a8ae:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801a8b2:	68c2      	ldr	r2, [r0, #12]
 801a8b4:	4629      	mov	r1, r5
 801a8b6:	4620      	mov	r0, r4
 801a8b8:	bc30      	pop	{r4, r5}
 801a8ba:	f7fd bf19 	b.w	80186f0 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

0801a8be <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 801a8be:	f7fd beff 	b.w	80186c0 <_ZN8touchgfx5paint6rgb5658tearDownEv>

0801a8c2 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 801a8c2:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 801a8c6:	4770      	bx	lr

0801a8c8 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 801a8c8:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 801a8cc:	4770      	bx	lr

0801a8ce <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 801a8ce:	b510      	push	{r4, lr}
 801a8d0:	2200      	movs	r2, #0
 801a8d2:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801a8d6:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 801a8da:	8002      	strh	r2, [r0, #0]
 801a8dc:	8042      	strh	r2, [r0, #2]
 801a8de:	8084      	strh	r4, [r0, #4]
 801a8e0:	80c1      	strh	r1, [r0, #6]
 801a8e2:	bd10      	pop	{r4, pc}

0801a8e4 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 801a8e4:	2200      	movs	r2, #0
 801a8e6:	8002      	strh	r2, [r0, #0]
 801a8e8:	8042      	strh	r2, [r0, #2]
 801a8ea:	8082      	strh	r2, [r0, #4]
 801a8ec:	80c2      	strh	r2, [r0, #6]
 801a8ee:	4770      	bx	lr

0801a8f0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801a8f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a8f2:	6803      	ldr	r3, [r0, #0]
 801a8f4:	460d      	mov	r5, r1
 801a8f6:	4604      	mov	r4, r0
 801a8f8:	4601      	mov	r1, r0
 801a8fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a8fc:	a802      	add	r0, sp, #8
 801a8fe:	4798      	blx	r3
 801a900:	6828      	ldr	r0, [r5, #0]
 801a902:	6869      	ldr	r1, [r5, #4]
 801a904:	466b      	mov	r3, sp
 801a906:	c303      	stmia	r3!, {r0, r1}
 801a908:	4668      	mov	r0, sp
 801a90a:	4619      	mov	r1, r3
 801a90c:	f7fe ffae 	bl	801986c <_ZN8touchgfx4RectaNERKS0_>
 801a910:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801a912:	b1a8      	cbz	r0, 801a940 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801a914:	6803      	ldr	r3, [r0, #0]
 801a916:	1d21      	adds	r1, r4, #4
 801a918:	68db      	ldr	r3, [r3, #12]
 801a91a:	4798      	blx	r3
 801a91c:	b180      	cbz	r0, 801a940 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801a91e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801a922:	2b00      	cmp	r3, #0
 801a924:	dd0c      	ble.n	801a940 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801a926:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 801a92a:	2d00      	cmp	r5, #0
 801a92c:	dd08      	ble.n	801a940 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801a92e:	4a2d      	ldr	r2, [pc, #180]	; (801a9e4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 801a930:	7812      	ldrb	r2, [r2, #0]
 801a932:	b13a      	cbz	r2, 801a944 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 801a934:	2a01      	cmp	r2, #1
 801a936:	d02d      	beq.n	801a994 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 801a938:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801a93a:	6803      	ldr	r3, [r0, #0]
 801a93c:	691b      	ldr	r3, [r3, #16]
 801a93e:	4798      	blx	r3
 801a940:	b004      	add	sp, #16
 801a942:	bd70      	pop	{r4, r5, r6, pc}
 801a944:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a948:	441d      	add	r5, r3
 801a94a:	b2ad      	uxth	r5, r5
 801a94c:	b22e      	sxth	r6, r5
 801a94e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801a952:	42b3      	cmp	r3, r6
 801a954:	daf0      	bge.n	801a938 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a956:	6823      	ldr	r3, [r4, #0]
 801a958:	4669      	mov	r1, sp
 801a95a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a95c:	4620      	mov	r0, r4
 801a95e:	4798      	blx	r3
 801a960:	b940      	cbnz	r0, 801a974 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 801a962:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801a966:	2b01      	cmp	r3, #1
 801a968:	d004      	beq.n	801a974 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 801a96a:	3301      	adds	r3, #1
 801a96c:	105b      	asrs	r3, r3, #1
 801a96e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a972:	e7f0      	b.n	801a956 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 801a974:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801a978:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801a97c:	4413      	add	r3, r2
 801a97e:	b29b      	uxth	r3, r3
 801a980:	441a      	add	r2, r3
 801a982:	b212      	sxth	r2, r2
 801a984:	4296      	cmp	r6, r2
 801a986:	f8ad 3002 	strh.w	r3, [sp, #2]
 801a98a:	dae0      	bge.n	801a94e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801a98c:	1aeb      	subs	r3, r5, r3
 801a98e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a992:	e7dc      	b.n	801a94e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801a994:	f8bd 5000 	ldrh.w	r5, [sp]
 801a998:	441d      	add	r5, r3
 801a99a:	b2ad      	uxth	r5, r5
 801a99c:	b22e      	sxth	r6, r5
 801a99e:	f9bd 3000 	ldrsh.w	r3, [sp]
 801a9a2:	42b3      	cmp	r3, r6
 801a9a4:	dac8      	bge.n	801a938 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801a9a6:	6823      	ldr	r3, [r4, #0]
 801a9a8:	4669      	mov	r1, sp
 801a9aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a9ac:	4620      	mov	r0, r4
 801a9ae:	4798      	blx	r3
 801a9b0:	b940      	cbnz	r0, 801a9c4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 801a9b2:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801a9b6:	2b01      	cmp	r3, #1
 801a9b8:	d004      	beq.n	801a9c4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 801a9ba:	3301      	adds	r3, #1
 801a9bc:	105b      	asrs	r3, r3, #1
 801a9be:	f8ad 3004 	strh.w	r3, [sp, #4]
 801a9c2:	e7f0      	b.n	801a9a6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 801a9c4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801a9c8:	f8bd 3000 	ldrh.w	r3, [sp]
 801a9cc:	4413      	add	r3, r2
 801a9ce:	b29b      	uxth	r3, r3
 801a9d0:	441a      	add	r2, r3
 801a9d2:	b212      	sxth	r2, r2
 801a9d4:	4296      	cmp	r6, r2
 801a9d6:	f8ad 3000 	strh.w	r3, [sp]
 801a9da:	dae0      	bge.n	801a99e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 801a9dc:	1aeb      	subs	r3, r5, r3
 801a9de:	f8ad 3004 	strh.w	r3, [sp, #4]
 801a9e2:	e7dc      	b.n	801a99e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 801a9e4:	2000f15a 	.word	0x2000f15a

0801a9e8 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801a9e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a9ea:	6803      	ldr	r3, [r0, #0]
 801a9ec:	4604      	mov	r4, r0
 801a9ee:	4601      	mov	r1, r0
 801a9f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a9f2:	4668      	mov	r0, sp
 801a9f4:	4798      	blx	r3
 801a9f6:	2100      	movs	r1, #0
 801a9f8:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 801a9fc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801aa00:	9102      	str	r1, [sp, #8]
 801aa02:	4668      	mov	r0, sp
 801aa04:	a902      	add	r1, sp, #8
 801aa06:	f8ad 200c 	strh.w	r2, [sp, #12]
 801aa0a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801aa0e:	f7fe ff2d 	bl	801986c <_ZN8touchgfx4RectaNERKS0_>
 801aa12:	6823      	ldr	r3, [r4, #0]
 801aa14:	4669      	mov	r1, sp
 801aa16:	691b      	ldr	r3, [r3, #16]
 801aa18:	4620      	mov	r0, r4
 801aa1a:	4798      	blx	r3
 801aa1c:	b004      	add	sp, #16
 801aa1e:	bd10      	pop	{r4, pc}

0801aa20 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 801aa20:	2101      	movs	r1, #1
 801aa22:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 801aa26:	490b      	ldr	r1, [pc, #44]	; (801aa54 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801aa28:	6001      	str	r1, [r0, #0]
 801aa2a:	2200      	movs	r2, #0
 801aa2c:	21ff      	movs	r1, #255	; 0xff
 801aa2e:	8082      	strh	r2, [r0, #4]
 801aa30:	80c2      	strh	r2, [r0, #6]
 801aa32:	8102      	strh	r2, [r0, #8]
 801aa34:	8142      	strh	r2, [r0, #10]
 801aa36:	8182      	strh	r2, [r0, #12]
 801aa38:	81c2      	strh	r2, [r0, #14]
 801aa3a:	8202      	strh	r2, [r0, #16]
 801aa3c:	8242      	strh	r2, [r0, #18]
 801aa3e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801aa42:	61c2      	str	r2, [r0, #28]
 801aa44:	8402      	strh	r2, [r0, #32]
 801aa46:	8442      	strh	r2, [r0, #34]	; 0x22
 801aa48:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 801aa4c:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 801aa50:	6282      	str	r2, [r0, #40]	; 0x28
 801aa52:	4770      	bx	lr
 801aa54:	08030644 	.word	0x08030644

0801aa58 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 801aa58:	f101 0364 	add.w	r3, r1, #100	; 0x64
 801aa5c:	4602      	mov	r2, r0
 801aa5e:	cb03      	ldmia	r3!, {r0, r1}
 801aa60:	6010      	str	r0, [r2, #0]
 801aa62:	6051      	str	r1, [r2, #4]
 801aa64:	4610      	mov	r0, r2
 801aa66:	4770      	bx	lr

0801aa68 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 801aa68:	b507      	push	{r0, r1, r2, lr}
 801aa6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801aa6e:	ab01      	add	r3, sp, #4
 801aa70:	6809      	ldr	r1, [r1, #0]
 801aa72:	6800      	ldr	r0, [r0, #0]
 801aa74:	f004 fd5d 	bl	801f532 <_ZN8touchgfx6muldivElllRl>
 801aa78:	b003      	add	sp, #12
 801aa7a:	f85d fb04 	ldr.w	pc, [sp], #4

0801aa7e <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 801aa7e:	6800      	ldr	r0, [r0, #0]
 801aa80:	2800      	cmp	r0, #0
 801aa82:	bfb9      	ittee	lt
 801aa84:	2320      	movlt	r3, #32
 801aa86:	fb90 f0f3 	sdivlt	r0, r0, r3
 801aa8a:	301f      	addge	r0, #31
 801aa8c:	1140      	asrge	r0, r0, #5
 801aa8e:	4770      	bx	lr

0801aa90 <_ZNK8touchgfx4Line17invalidateContentEv>:
 801aa90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa94:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 801aa98:	b089      	sub	sp, #36	; 0x24
 801aa9a:	4604      	mov	r4, r0
 801aa9c:	b353      	cbz	r3, 801aaf4 <_ZNK8touchgfx4Line17invalidateContentEv+0x64>
 801aa9e:	6803      	ldr	r3, [r0, #0]
 801aaa0:	4601      	mov	r1, r0
 801aaa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801aaa4:	a802      	add	r0, sp, #8
 801aaa6:	4798      	blx	r3
 801aaa8:	2220      	movs	r2, #32
 801aaaa:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
 801aaae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aab0:	fb9a f0f2 	sdiv	r0, sl, r2
 801aab4:	fb91 f5f2 	sdiv	r5, r1, r2
 801aab8:	1b40      	subs	r0, r0, r5
 801aaba:	2800      	cmp	r0, #0
 801aabc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801aabe:	fb93 f6f2 	sdiv	r6, r3, r2
 801aac2:	bfb8      	it	lt
 801aac4:	4240      	neglt	r0, r0
 801aac6:	0076      	lsls	r6, r6, #1
 801aac8:	4286      	cmp	r6, r0
 801aaca:	f8d4 b000 	ldr.w	fp, [r4]
 801aace:	dc0c      	bgt.n	801aaea <_ZNK8touchgfx4Line17invalidateContentEv+0x5a>
 801aad0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801aad2:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 801aad6:	fb95 f0f2 	sdiv	r0, r5, r2
 801aada:	fb98 f7f2 	sdiv	r7, r8, r2
 801aade:	1bc0      	subs	r0, r0, r7
 801aae0:	2800      	cmp	r0, #0
 801aae2:	bfb8      	it	lt
 801aae4:	4240      	neglt	r0, r0
 801aae6:	4286      	cmp	r6, r0
 801aae8:	dd07      	ble.n	801aafa <_ZNK8touchgfx4Line17invalidateContentEv+0x6a>
 801aaea:	f8db 3010 	ldr.w	r3, [fp, #16]
 801aaee:	a902      	add	r1, sp, #8
 801aaf0:	4620      	mov	r0, r4
 801aaf2:	4798      	blx	r3
 801aaf4:	b009      	add	sp, #36	; 0x24
 801aaf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aafa:	3301      	adds	r3, #1
 801aafc:	2002      	movs	r0, #2
 801aafe:	f10d 0920 	add.w	r9, sp, #32
 801ab02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ab06:	4103      	asrs	r3, r0
 801ab08:	f849 3d08 	str.w	r3, [r9, #-8]!
 801ab0c:	eb01 060a 	add.w	r6, r1, sl
 801ab10:	eb08 0705 	add.w	r7, r8, r5
 801ab14:	fb96 f6f0 	sdiv	r6, r6, r0
 801ab18:	fb97 f7f0 	sdiv	r7, r7, r0
 801ab1c:	4648      	mov	r0, r9
 801ab1e:	9101      	str	r1, [sp, #4]
 801ab20:	b236      	sxth	r6, r6
 801ab22:	b23f      	sxth	r7, r7
 801ab24:	fb96 f6f2 	sdiv	r6, r6, r2
 801ab28:	fb97 f7f2 	sdiv	r7, r7, r2
 801ab2c:	f7ff ffa7 	bl	801aa7e <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801ab30:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801ab34:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 801ab38:	9901      	ldr	r1, [sp, #4]
 801ab3a:	4293      	cmp	r3, r2
 801ab3c:	fa1f fe87 	uxth.w	lr, r7
 801ab40:	fa1f fc86 	uxth.w	ip, r6
 801ab44:	eba1 0a0a 	sub.w	sl, r1, sl
 801ab48:	b280      	uxth	r0, r0
 801ab4a:	da54      	bge.n	801abf6 <_ZNK8touchgfx4Line17invalidateContentEv+0x166>
 801ab4c:	ebac 0100 	sub.w	r1, ip, r0
 801ab50:	b289      	uxth	r1, r1
 801ab52:	4460      	add	r0, ip
 801ab54:	f1ba 0f00 	cmp.w	sl, #0
 801ab58:	b20e      	sxth	r6, r1
 801ab5a:	b280      	uxth	r0, r0
 801ab5c:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 801ab60:	f9bd c00a 	ldrsh.w	ip, [sp, #10]
 801ab64:	da29      	bge.n	801abba <_ZNK8touchgfx4Line17invalidateContentEv+0x12a>
 801ab66:	eba8 0505 	sub.w	r5, r8, r5
 801ab6a:	2d00      	cmp	r5, #0
 801ab6c:	da2a      	bge.n	801abc4 <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 801ab6e:	fa1f f88a 	uxth.w	r8, sl
 801ab72:	eba0 0008 	sub.w	r0, r0, r8
 801ab76:	fa1f f58c 	uxth.w	r5, ip
 801ab7a:	4443      	add	r3, r8
 801ab7c:	f8ad 0014 	strh.w	r0, [sp, #20]
 801ab80:	1a59      	subs	r1, r3, r1
 801ab82:	ebae 0005 	sub.w	r0, lr, r5
 801ab86:	f8ad a010 	strh.w	sl, [sp, #16]
 801ab8a:	f8ad c012 	strh.w	ip, [sp, #18]
 801ab8e:	f8ad 0016 	strh.w	r0, [sp, #22]
 801ab92:	f8ad 6018 	strh.w	r6, [sp, #24]
 801ab96:	f8ad 701a 	strh.w	r7, [sp, #26]
 801ab9a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801ab9e:	442a      	add	r2, r5
 801aba0:	eba2 0e0e 	sub.w	lr, r2, lr
 801aba4:	f8ad e01e 	strh.w	lr, [sp, #30]
 801aba8:	f8db 3010 	ldr.w	r3, [fp, #16]
 801abac:	a904      	add	r1, sp, #16
 801abae:	4620      	mov	r0, r4
 801abb0:	4798      	blx	r3
 801abb2:	6823      	ldr	r3, [r4, #0]
 801abb4:	4649      	mov	r1, r9
 801abb6:	691b      	ldr	r3, [r3, #16]
 801abb8:	e79a      	b.n	801aaf0 <_ZNK8touchgfx4Line17invalidateContentEv+0x60>
 801abba:	d003      	beq.n	801abc4 <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 801abbc:	eba8 0505 	sub.w	r5, r8, r5
 801abc0:	2d00      	cmp	r5, #0
 801abc2:	dcd4      	bgt.n	801ab6e <_ZNK8touchgfx4Line17invalidateContentEv+0xde>
 801abc4:	fa1f f88a 	uxth.w	r8, sl
 801abc8:	4443      	add	r3, r8
 801abca:	fa1f f58c 	uxth.w	r5, ip
 801abce:	1a59      	subs	r1, r3, r1
 801abd0:	eba0 0008 	sub.w	r0, r0, r8
 801abd4:	ebae 0305 	sub.w	r3, lr, r5
 801abd8:	f8ad 6010 	strh.w	r6, [sp, #16]
 801abdc:	f8ad c012 	strh.w	ip, [sp, #18]
 801abe0:	f8ad 1014 	strh.w	r1, [sp, #20]
 801abe4:	f8ad 3016 	strh.w	r3, [sp, #22]
 801abe8:	f8ad a018 	strh.w	sl, [sp, #24]
 801abec:	f8ad 701a 	strh.w	r7, [sp, #26]
 801abf0:	f8ad 001c 	strh.w	r0, [sp, #28]
 801abf4:	e7d3      	b.n	801ab9e <_ZNK8touchgfx4Line17invalidateContentEv+0x10e>
 801abf6:	ebae 0100 	sub.w	r1, lr, r0
 801abfa:	b289      	uxth	r1, r1
 801abfc:	4470      	add	r0, lr
 801abfe:	f1ba 0f00 	cmp.w	sl, #0
 801ac02:	b20f      	sxth	r7, r1
 801ac04:	b280      	uxth	r0, r0
 801ac06:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 801ac0a:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 801ac0e:	da20      	bge.n	801ac52 <_ZNK8touchgfx4Line17invalidateContentEv+0x1c2>
 801ac10:	eba8 0505 	sub.w	r5, r8, r5
 801ac14:	2d00      	cmp	r5, #0
 801ac16:	da21      	bge.n	801ac5c <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 801ac18:	fa1f f88e 	uxth.w	r8, lr
 801ac1c:	fa1f f58a 	uxth.w	r5, sl
 801ac20:	4443      	add	r3, r8
 801ac22:	442a      	add	r2, r5
 801ac24:	f8ad e010 	strh.w	lr, [sp, #16]
 801ac28:	1b40      	subs	r0, r0, r5
 801ac2a:	ebac 0e08 	sub.w	lr, ip, r8
 801ac2e:	1a51      	subs	r1, r2, r1
 801ac30:	eba3 0c0c 	sub.w	ip, r3, ip
 801ac34:	f8ad a012 	strh.w	sl, [sp, #18]
 801ac38:	f8ad e014 	strh.w	lr, [sp, #20]
 801ac3c:	f8ad 0016 	strh.w	r0, [sp, #22]
 801ac40:	f8ad 6018 	strh.w	r6, [sp, #24]
 801ac44:	f8ad 701a 	strh.w	r7, [sp, #26]
 801ac48:	f8ad c01c 	strh.w	ip, [sp, #28]
 801ac4c:	f8ad 101e 	strh.w	r1, [sp, #30]
 801ac50:	e7aa      	b.n	801aba8 <_ZNK8touchgfx4Line17invalidateContentEv+0x118>
 801ac52:	d003      	beq.n	801ac5c <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 801ac54:	eba8 0505 	sub.w	r5, r8, r5
 801ac58:	2d00      	cmp	r5, #0
 801ac5a:	dcdd      	bgt.n	801ac18 <_ZNK8touchgfx4Line17invalidateContentEv+0x188>
 801ac5c:	fa1f f58e 	uxth.w	r5, lr
 801ac60:	fa1f f88a 	uxth.w	r8, sl
 801ac64:	4442      	add	r2, r8
 801ac66:	442b      	add	r3, r5
 801ac68:	f8ad 7012 	strh.w	r7, [sp, #18]
 801ac6c:	1a51      	subs	r1, r2, r1
 801ac6e:	ebac 0705 	sub.w	r7, ip, r5
 801ac72:	eba0 0008 	sub.w	r0, r0, r8
 801ac76:	eba3 0c0c 	sub.w	ip, r3, ip
 801ac7a:	f8ad e010 	strh.w	lr, [sp, #16]
 801ac7e:	f8ad 7014 	strh.w	r7, [sp, #20]
 801ac82:	f8ad 1016 	strh.w	r1, [sp, #22]
 801ac86:	f8ad 6018 	strh.w	r6, [sp, #24]
 801ac8a:	f8ad a01a 	strh.w	sl, [sp, #26]
 801ac8e:	f8ad c01c 	strh.w	ip, [sp, #28]
 801ac92:	f8ad 001e 	strh.w	r0, [sp, #30]
 801ac96:	e787      	b.n	801aba8 <_ZNK8touchgfx4Line17invalidateContentEv+0x118>

0801ac98 <_ZN8touchgfx7CWRUtil4sineEi>:
 801ac98:	f44f 73b4 	mov.w	r3, #360	; 0x168
 801ac9c:	fb90 f2f3 	sdiv	r2, r0, r3
 801aca0:	fb02 0013 	mls	r0, r2, r3, r0
 801aca4:	2800      	cmp	r0, #0
 801aca6:	bfb8      	it	lt
 801aca8:	18c0      	addlt	r0, r0, r3
 801acaa:	285a      	cmp	r0, #90	; 0x5a
 801acac:	4b09      	ldr	r3, [pc, #36]	; (801acd4 <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 801acae:	dc02      	bgt.n	801acb6 <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 801acb0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801acb4:	4770      	bx	lr
 801acb6:	28b4      	cmp	r0, #180	; 0xb4
 801acb8:	dc02      	bgt.n	801acc0 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 801acba:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 801acbe:	e7f7      	b.n	801acb0 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 801acc0:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 801acc4:	bfd4      	ite	le
 801acc6:	38b4      	suble	r0, #180	; 0xb4
 801acc8:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 801accc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801acd0:	4240      	negs	r0, r0
 801acd2:	4770      	bx	lr
 801acd4:	08030720 	.word	0x08030720

0801acd8 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 801acd8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801acdc:	bf2c      	ite	cs
 801acde:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 801ace2:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 801ace6:	2300      	movs	r3, #0
 801ace8:	1899      	adds	r1, r3, r2
 801acea:	4288      	cmp	r0, r1
 801acec:	bf24      	itt	cs
 801acee:	1853      	addcs	r3, r2, r1
 801acf0:	1a40      	subcs	r0, r0, r1
 801acf2:	0892      	lsrs	r2, r2, #2
 801acf4:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801acf8:	d1f6      	bne.n	801ace8 <_ZN8touchgfx7CWRUtil5isqrtEm+0x10>
 801acfa:	4618      	mov	r0, r3
 801acfc:	4770      	bx	lr

0801acfe <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 801acfe:	b510      	push	{r4, lr}
 801ad00:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 801ad04:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 801ad08:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 801ad0c:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 801ad10:	13a4      	asrs	r4, r4, #14
 801ad12:	139b      	asrs	r3, r3, #14
 801ad14:	429c      	cmp	r4, r3
 801ad16:	bfb8      	it	lt
 801ad18:	461c      	movlt	r4, r3
 801ad1a:	2c01      	cmp	r4, #1
 801ad1c:	dd07      	ble.n	801ad2e <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 801ad1e:	fb91 f1f4 	sdiv	r1, r1, r4
 801ad22:	fb90 f0f4 	sdiv	r0, r0, r4
 801ad26:	f7ff ffea 	bl	801acfe <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801ad2a:	4360      	muls	r0, r4
 801ad2c:	bd10      	pop	{r4, pc}
 801ad2e:	4340      	muls	r0, r0
 801ad30:	fb01 0001 	mla	r0, r1, r1, r0
 801ad34:	f7ff ffd0 	bl	801acd8 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801ad38:	e7f8      	b.n	801ad2c <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>
	...

0801ad3c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 801ad3c:	2800      	cmp	r0, #0
 801ad3e:	b508      	push	{r3, lr}
 801ad40:	da05      	bge.n	801ad4e <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 801ad42:	4240      	negs	r0, r0
 801ad44:	f7ff fffa 	bl	801ad3c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801ad48:	4240      	negs	r0, r0
 801ad4a:	b240      	sxtb	r0, r0
 801ad4c:	bd08      	pop	{r3, pc}
 801ad4e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801ad52:	dc11      	bgt.n	801ad78 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 801ad54:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 801ad58:	dd09      	ble.n	801ad6e <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 801ad5a:	4340      	muls	r0, r0
 801ad5c:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 801ad60:	f7ff ffba 	bl	801acd8 <_ZN8touchgfx7CWRUtil5isqrtEm>
 801ad64:	f7ff ffea 	bl	801ad3c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801ad68:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801ad6c:	e7ed      	b.n	801ad4a <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 801ad6e:	3003      	adds	r0, #3
 801ad70:	10c0      	asrs	r0, r0, #3
 801ad72:	4b02      	ldr	r3, [pc, #8]	; (801ad7c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 801ad74:	5618      	ldrsb	r0, [r3, r0]
 801ad76:	e7e9      	b.n	801ad4c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801ad78:	2000      	movs	r0, #0
 801ad7a:	e7e7      	b.n	801ad4c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 801ad7c:	080306c4 	.word	0x080306c4

0801ad80 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 801ad80:	4281      	cmp	r1, r0
 801ad82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ad84:	460c      	mov	r4, r1
 801ad86:	4615      	mov	r5, r2
 801ad88:	dd07      	ble.n	801ad9a <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1a>
 801ad8a:	4601      	mov	r1, r0
 801ad8c:	4620      	mov	r0, r4
 801ad8e:	f7ff fff7 	bl	801ad80 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801ad92:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 801ad96:	b003      	add	sp, #12
 801ad98:	bd30      	pop	{r4, r5, pc}
 801ad9a:	f7ff ffb0 	bl	801acfe <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801ad9e:	6028      	str	r0, [r5, #0]
 801ada0:	2800      	cmp	r0, #0
 801ada2:	d0f8      	beq.n	801ad96 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>
 801ada4:	4602      	mov	r2, r0
 801ada6:	ab01      	add	r3, sp, #4
 801ada8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801adac:	4620      	mov	r0, r4
 801adae:	f004 fbc0 	bl	801f532 <_ZN8touchgfx6muldivElllRl>
 801adb2:	f7ff ffc3 	bl	801ad3c <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 801adb6:	e7ee      	b.n	801ad96 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>

0801adb8 <_ZN8touchgfx4LineC1Ev>:
 801adb8:	b510      	push	{r4, lr}
 801adba:	4604      	mov	r4, r0
 801adbc:	f7ff fe30 	bl	801aa20 <_ZN8touchgfx12CanvasWidgetC1Ev>
 801adc0:	4b0c      	ldr	r3, [pc, #48]	; (801adf4 <_ZN8touchgfx4LineC1Ev+0x3c>)
 801adc2:	6023      	str	r3, [r4, #0]
 801adc4:	2220      	movs	r2, #32
 801adc6:	2300      	movs	r3, #0
 801adc8:	63e2      	str	r2, [r4, #60]	; 0x3c
 801adca:	2212      	movs	r2, #18
 801adcc:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 801add0:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 801add4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 801add8:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 801addc:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 801ade0:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 801ade4:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 801ade8:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 801adec:	66e2      	str	r2, [r4, #108]	; 0x6c
 801adee:	60a3      	str	r3, [r4, #8]
 801adf0:	4620      	mov	r0, r4
 801adf2:	bd10      	pop	{r4, pc}
 801adf4:	080307e0 	.word	0x080307e0

0801adf8 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 801adf8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801adfc:	6b47      	ldr	r7, [r0, #52]	; 0x34
 801adfe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801ae00:	6b85      	ldr	r5, [r0, #56]	; 0x38
 801ae02:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801ae04:	1aff      	subs	r7, r7, r3
 801ae06:	4604      	mov	r4, r0
 801ae08:	eba5 0502 	sub.w	r5, r5, r2
 801ae0c:	d142      	bne.n	801ae94 <_ZN8touchgfx4Line17updateCachedShapeEv+0x9c>
 801ae0e:	b955      	cbnz	r5, 801ae26 <_ZN8touchgfx4Line17updateCachedShapeEv+0x2e>
 801ae10:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
 801ae14:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 801ae18:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
 801ae1c:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
 801ae20:	b002      	add	sp, #8
 801ae22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae26:	ea85 78e5 	eor.w	r8, r5, r5, asr #31
 801ae2a:	eba8 78e5 	sub.w	r8, r8, r5, asr #31
 801ae2e:	4629      	mov	r1, r5
 801ae30:	4642      	mov	r2, r8
 801ae32:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801ae34:	f004 fb9c 	bl	801f570 <_ZN8touchgfx6muldivElll>
 801ae38:	2502      	movs	r5, #2
 801ae3a:	4642      	mov	r2, r8
 801ae3c:	fb90 f6f5 	sdiv	r6, r0, r5
 801ae40:	4639      	mov	r1, r7
 801ae42:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801ae44:	f004 fb94 	bl	801f570 <_ZN8touchgfx6muldivElll>
 801ae48:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
 801ae4c:	fb90 f5f5 	sdiv	r5, r0, r5
 801ae50:	f1b9 0f00 	cmp.w	r9, #0
 801ae54:	d067      	beq.n	801af26 <_ZN8touchgfx4Line17updateCachedShapeEv+0x12e>
 801ae56:	f1b9 0f02 	cmp.w	r9, #2
 801ae5a:	d878      	bhi.n	801af4e <_ZN8touchgfx4Line17updateCachedShapeEv+0x156>
 801ae5c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801ae5e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801ae60:	1b93      	subs	r3, r2, r6
 801ae62:	1b5b      	subs	r3, r3, r5
 801ae64:	6463      	str	r3, [r4, #68]	; 0x44
 801ae66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801ae68:	18e9      	adds	r1, r5, r3
 801ae6a:	1b89      	subs	r1, r1, r6
 801ae6c:	6561      	str	r1, [r4, #84]	; 0x54
 801ae6e:	1b81      	subs	r1, r0, r6
 801ae70:	4429      	add	r1, r5
 801ae72:	64a1      	str	r1, [r4, #72]	; 0x48
 801ae74:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ae76:	4430      	add	r0, r6
 801ae78:	186f      	adds	r7, r5, r1
 801ae7a:	4432      	add	r2, r6
 801ae7c:	1b49      	subs	r1, r1, r5
 801ae7e:	4437      	add	r7, r6
 801ae80:	4428      	add	r0, r5
 801ae82:	4431      	add	r1, r6
 801ae84:	1b52      	subs	r2, r2, r5
 801ae86:	1b5b      	subs	r3, r3, r5
 801ae88:	65a7      	str	r7, [r4, #88]	; 0x58
 801ae8a:	64e0      	str	r0, [r4, #76]	; 0x4c
 801ae8c:	65e1      	str	r1, [r4, #92]	; 0x5c
 801ae8e:	6522      	str	r2, [r4, #80]	; 0x50
 801ae90:	1b9b      	subs	r3, r3, r6
 801ae92:	e05b      	b.n	801af4c <_ZN8touchgfx4Line17updateCachedShapeEv+0x154>
 801ae94:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 801ae98:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 801ae9c:	2d00      	cmp	r5, #0
 801ae9e:	d0c6      	beq.n	801ae2e <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 801aea0:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 801aea4:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 801aea8:	fb93 f2f8 	sdiv	r2, r3, r8
 801aeac:	fb08 3312 	mls	r3, r8, r2, r3
 801aeb0:	b353      	cbz	r3, 801af08 <_ZN8touchgfx4Line17updateCachedShapeEv+0x110>
 801aeb2:	fb98 f2f3 	sdiv	r2, r8, r3
 801aeb6:	fb03 8812 	mls	r8, r3, r2, r8
 801aeba:	f1b8 0f00 	cmp.w	r8, #0
 801aebe:	d1f3      	bne.n	801aea8 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb0>
 801aec0:	2b01      	cmp	r3, #1
 801aec2:	bf1c      	itt	ne
 801aec4:	fb95 f5f3 	sdivne	r5, r5, r3
 801aec8:	fb97 f7f3 	sdivne	r7, r7, r3
 801aecc:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
 801aed0:	f24b 5104 	movw	r1, #46340	; 0xb504
 801aed4:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 801aed8:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 801aedc:	428b      	cmp	r3, r1
 801aede:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 801aee2:	4608      	mov	r0, r1
 801aee4:	dd01      	ble.n	801aeea <_ZN8touchgfx4Line17updateCachedShapeEv+0xf2>
 801aee6:	428a      	cmp	r2, r1
 801aee8:	dc10      	bgt.n	801af0c <_ZN8touchgfx4Line17updateCachedShapeEv+0x114>
 801aeea:	fb90 f3f3 	sdiv	r3, r0, r3
 801aeee:	fb90 f2f2 	sdiv	r2, r0, r2
 801aef2:	4293      	cmp	r3, r2
 801aef4:	bfa8      	it	ge
 801aef6:	4613      	movge	r3, r2
 801aef8:	435f      	muls	r7, r3
 801aefa:	435d      	muls	r5, r3
 801aefc:	4629      	mov	r1, r5
 801aefe:	4638      	mov	r0, r7
 801af00:	f7ff fefd 	bl	801acfe <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 801af04:	4680      	mov	r8, r0
 801af06:	e792      	b.n	801ae2e <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 801af08:	4643      	mov	r3, r8
 801af0a:	e7d9      	b.n	801aec0 <_ZN8touchgfx4Line17updateCachedShapeEv+0xc8>
 801af0c:	fb93 f3f1 	sdiv	r3, r3, r1
 801af10:	fb92 f2f1 	sdiv	r2, r2, r1
 801af14:	4293      	cmp	r3, r2
 801af16:	bfcc      	ite	gt
 801af18:	3301      	addgt	r3, #1
 801af1a:	1c53      	addle	r3, r2, #1
 801af1c:	fb97 f7f3 	sdiv	r7, r7, r3
 801af20:	fb95 f5f3 	sdiv	r5, r5, r3
 801af24:	e7ea      	b.n	801aefc <_ZN8touchgfx4Line17updateCachedShapeEv+0x104>
 801af26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801af28:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801af2a:	1b93      	subs	r3, r2, r6
 801af2c:	6463      	str	r3, [r4, #68]	; 0x44
 801af2e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801af30:	18e9      	adds	r1, r5, r3
 801af32:	6561      	str	r1, [r4, #84]	; 0x54
 801af34:	1b81      	subs	r1, r0, r6
 801af36:	64a1      	str	r1, [r4, #72]	; 0x48
 801af38:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801af3a:	4430      	add	r0, r6
 801af3c:	186f      	adds	r7, r5, r1
 801af3e:	4432      	add	r2, r6
 801af40:	1b49      	subs	r1, r1, r5
 801af42:	65a7      	str	r7, [r4, #88]	; 0x58
 801af44:	64e0      	str	r0, [r4, #76]	; 0x4c
 801af46:	65e1      	str	r1, [r4, #92]	; 0x5c
 801af48:	6522      	str	r2, [r4, #80]	; 0x50
 801af4a:	1b5b      	subs	r3, r3, r5
 801af4c:	6623      	str	r3, [r4, #96]	; 0x60
 801af4e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801af50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801af52:	9200      	str	r2, [sp, #0]
 801af54:	9301      	str	r3, [sp, #4]
 801af56:	f104 0148 	add.w	r1, r4, #72	; 0x48
 801af5a:	f104 0c54 	add.w	ip, r4, #84	; 0x54
 801af5e:	680f      	ldr	r7, [r1, #0]
 801af60:	9800      	ldr	r0, [sp, #0]
 801af62:	42ba      	cmp	r2, r7
 801af64:	bfa8      	it	ge
 801af66:	463a      	movge	r2, r7
 801af68:	4287      	cmp	r7, r0
 801af6a:	bfc8      	it	gt
 801af6c:	9700      	strgt	r7, [sp, #0]
 801af6e:	690f      	ldr	r7, [r1, #16]
 801af70:	9801      	ldr	r0, [sp, #4]
 801af72:	42bb      	cmp	r3, r7
 801af74:	bfa8      	it	ge
 801af76:	463b      	movge	r3, r7
 801af78:	3104      	adds	r1, #4
 801af7a:	4287      	cmp	r7, r0
 801af7c:	bfc8      	it	gt
 801af7e:	9701      	strgt	r7, [sp, #4]
 801af80:	458c      	cmp	ip, r1
 801af82:	d1ec      	bne.n	801af5e <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 801af84:	4668      	mov	r0, sp
 801af86:	2720      	movs	r7, #32
 801af88:	fb92 f8f7 	sdiv	r8, r2, r7
 801af8c:	fb93 f7f7 	sdiv	r7, r3, r7
 801af90:	f7ff fd75 	bl	801aa7e <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801af94:	4682      	mov	sl, r0
 801af96:	a801      	add	r0, sp, #4
 801af98:	f7ff fd71 	bl	801aa7e <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801af9c:	ebaa 0208 	sub.w	r2, sl, r8
 801afa0:	1bc0      	subs	r0, r0, r7
 801afa2:	f1b9 0f01 	cmp.w	r9, #1
 801afa6:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
 801afaa:	f8a4 7066 	strh.w	r7, [r4, #102]	; 0x66
 801afae:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
 801afb2:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
 801afb6:	f47f af33 	bne.w	801ae20 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>
 801afba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801afbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801afbe:	1b83      	subs	r3, r0, r6
 801afc0:	6463      	str	r3, [r4, #68]	; 0x44
 801afc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801afc4:	18ea      	adds	r2, r5, r3
 801afc6:	6562      	str	r2, [r4, #84]	; 0x54
 801afc8:	1b8a      	subs	r2, r1, r6
 801afca:	64a2      	str	r2, [r4, #72]	; 0x48
 801afcc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801afce:	4431      	add	r1, r6
 801afd0:	18af      	adds	r7, r5, r2
 801afd2:	4406      	add	r6, r0
 801afd4:	1b52      	subs	r2, r2, r5
 801afd6:	1b5d      	subs	r5, r3, r5
 801afd8:	65a7      	str	r7, [r4, #88]	; 0x58
 801afda:	64e1      	str	r1, [r4, #76]	; 0x4c
 801afdc:	65e2      	str	r2, [r4, #92]	; 0x5c
 801afde:	6526      	str	r6, [r4, #80]	; 0x50
 801afe0:	6625      	str	r5, [r4, #96]	; 0x60
 801afe2:	e71d      	b.n	801ae20 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>

0801afe4 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 801afe4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801afe6:	428b      	cmp	r3, r1
 801afe8:	d102      	bne.n	801aff0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 801afea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801afec:	4293      	cmp	r3, r2
 801afee:	d003      	beq.n	801aff8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 801aff0:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
 801aff4:	f7ff bf00 	b.w	801adf8 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801aff8:	4770      	bx	lr

0801affa <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 801affa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801affc:	428b      	cmp	r3, r1
 801affe:	d102      	bne.n	801b006 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 801b000:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801b002:	4293      	cmp	r3, r2
 801b004:	d003      	beq.n	801b00e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 801b006:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 801b00a:	f7ff bef5 	b.w	801adf8 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801b00e:	4770      	bx	lr

0801b010 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 801b010:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
 801b014:	f7ff bef0 	b.w	801adf8 <_ZN8touchgfx4Line17updateCachedShapeEv>

0801b018 <_ZN8touchgfx6CanvasD1Ev>:
 801b018:	b510      	push	{r4, lr}
 801b01a:	4b04      	ldr	r3, [pc, #16]	; (801b02c <_ZN8touchgfx6CanvasD1Ev+0x14>)
 801b01c:	4604      	mov	r4, r0
 801b01e:	f840 3b20 	str.w	r3, [r0], #32
 801b022:	f000 fdc1 	bl	801bba8 <_ZN8touchgfx7OutlineD1Ev>
 801b026:	4620      	mov	r0, r4
 801b028:	bd10      	pop	{r4, pc}
 801b02a:	bf00      	nop
 801b02c:	080306bc 	.word	0x080306bc

0801b030 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 801b030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b034:	b0a0      	sub	sp, #128	; 0x80
 801b036:	4604      	mov	r4, r0
 801b038:	460a      	mov	r2, r1
 801b03a:	4601      	mov	r1, r0
 801b03c:	a804      	add	r0, sp, #16
 801b03e:	f012 f9ed 	bl	802d41c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 801b042:	2300      	movs	r3, #0
 801b044:	9301      	str	r3, [sp, #4]
 801b046:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801b04a:	2b01      	cmp	r3, #1
 801b04c:	d17c      	bne.n	801b148 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x118>
 801b04e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801b050:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801b052:	6d61      	ldr	r1, [r4, #84]	; 0x54
 801b054:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b056:	1ac0      	subs	r0, r0, r3
 801b058:	eba1 0102 	sub.w	r1, r1, r2
 801b05c:	d437      	bmi.n	801b0ce <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x9e>
 801b05e:	2900      	cmp	r1, #0
 801b060:	aa01      	add	r2, sp, #4
 801b062:	db2e      	blt.n	801b0c2 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x92>
 801b064:	f7ff fe8c 	bl	801ad80 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801b068:	f100 065a 	add.w	r6, r0, #90	; 0x5a
 801b06c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801b06e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801b070:	a804      	add	r0, sp, #16
 801b072:	f012 fbab 	bl	802d7cc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801b076:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801b078:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b07a:	a804      	add	r0, sp, #16
 801b07c:	f012 fa7c 	bl	802d578 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801b080:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 801b082:	2db3      	cmp	r5, #179	; 0xb3
 801b084:	dc33      	bgt.n	801b0ee <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xbe>
 801b086:	eba6 0805 	sub.w	r8, r6, r5
 801b08a:	4640      	mov	r0, r8
 801b08c:	f7ff fe04 	bl	801ac98 <_ZN8touchgfx7CWRUtil4sineEi>
 801b090:	a902      	add	r1, sp, #8
 801b092:	9002      	str	r0, [sp, #8]
 801b094:	a801      	add	r0, sp, #4
 801b096:	f7ff fce7 	bl	801aa68 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b09a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b09c:	1847      	adds	r7, r0, r1
 801b09e:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 801b0a2:	f7ff fdf9 	bl	801ac98 <_ZN8touchgfx7CWRUtil4sineEi>
 801b0a6:	a903      	add	r1, sp, #12
 801b0a8:	9003      	str	r0, [sp, #12]
 801b0aa:	a801      	add	r0, sp, #4
 801b0ac:	f7ff fcdc 	bl	801aa68 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b0b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801b0b2:	4639      	mov	r1, r7
 801b0b4:	1a12      	subs	r2, r2, r0
 801b0b6:	a804      	add	r0, sp, #16
 801b0b8:	f012 fa5e 	bl	802d578 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801b0bc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801b0be:	441d      	add	r5, r3
 801b0c0:	e7df      	b.n	801b082 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x52>
 801b0c2:	4249      	negs	r1, r1
 801b0c4:	f7ff fe5c 	bl	801ad80 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801b0c8:	f1c0 065a 	rsb	r6, r0, #90	; 0x5a
 801b0cc:	e7ce      	b.n	801b06c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 801b0ce:	2900      	cmp	r1, #0
 801b0d0:	f1c0 0000 	rsb	r0, r0, #0
 801b0d4:	aa01      	add	r2, sp, #4
 801b0d6:	db04      	blt.n	801b0e2 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb2>
 801b0d8:	f7ff fe52 	bl	801ad80 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801b0dc:	f5c0 7687 	rsb	r6, r0, #270	; 0x10e
 801b0e0:	e7c4      	b.n	801b06c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 801b0e2:	4249      	negs	r1, r1
 801b0e4:	f7ff fe4c 	bl	801ad80 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 801b0e8:	f500 7687 	add.w	r6, r0, #270	; 0x10e
 801b0ec:	e7be      	b.n	801b06c <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 801b0ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801b0f0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801b0f2:	a804      	add	r0, sp, #16
 801b0f4:	f012 fa40 	bl	802d578 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801b0f8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801b0fa:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801b0fc:	a804      	add	r0, sp, #16
 801b0fe:	f012 fa3b 	bl	802d578 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801b102:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 801b104:	f1c5 05b4 	rsb	r5, r5, #180	; 0xb4
 801b108:	2d00      	cmp	r5, #0
 801b10a:	dd31      	ble.n	801b170 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x140>
 801b10c:	eb05 0806 	add.w	r8, r5, r6
 801b110:	4640      	mov	r0, r8
 801b112:	f7ff fdc1 	bl	801ac98 <_ZN8touchgfx7CWRUtil4sineEi>
 801b116:	a902      	add	r1, sp, #8
 801b118:	9002      	str	r0, [sp, #8]
 801b11a:	a801      	add	r0, sp, #4
 801b11c:	f7ff fca4 	bl	801aa68 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b120:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801b122:	1847      	adds	r7, r0, r1
 801b124:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 801b128:	f7ff fdb6 	bl	801ac98 <_ZN8touchgfx7CWRUtil4sineEi>
 801b12c:	a903      	add	r1, sp, #12
 801b12e:	9003      	str	r0, [sp, #12]
 801b130:	a801      	add	r0, sp, #4
 801b132:	f7ff fc99 	bl	801aa68 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 801b136:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801b138:	4639      	mov	r1, r7
 801b13a:	1a12      	subs	r2, r2, r0
 801b13c:	a804      	add	r0, sp, #16
 801b13e:	f012 fa1b 	bl	802d578 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801b142:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801b144:	1aed      	subs	r5, r5, r3
 801b146:	e7df      	b.n	801b108 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xd8>
 801b148:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801b14a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801b14c:	a804      	add	r0, sp, #16
 801b14e:	f012 fb3d 	bl	802d7cc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 801b152:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801b154:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b156:	a804      	add	r0, sp, #16
 801b158:	f012 fa0e 	bl	802d578 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801b15c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 801b15e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 801b160:	a804      	add	r0, sp, #16
 801b162:	f012 fa09 	bl	802d578 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801b166:	6e22      	ldr	r2, [r4, #96]	; 0x60
 801b168:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801b16a:	a804      	add	r0, sp, #16
 801b16c:	f012 fa04 	bl	802d578 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 801b170:	21ff      	movs	r1, #255	; 0xff
 801b172:	a804      	add	r0, sp, #16
 801b174:	f012 fa7c 	bl	802d670 <_ZN8touchgfx6Canvas6renderEh>
 801b178:	4604      	mov	r4, r0
 801b17a:	a804      	add	r0, sp, #16
 801b17c:	f7ff ff4c 	bl	801b018 <_ZN8touchgfx6CanvasD1Ev>
 801b180:	4620      	mov	r0, r4
 801b182:	b020      	add	sp, #128	; 0x80
 801b184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b188 <_ZN8touchgfx6CanvasD0Ev>:
 801b188:	b510      	push	{r4, lr}
 801b18a:	4604      	mov	r4, r0
 801b18c:	f7ff ff44 	bl	801b018 <_ZN8touchgfx6CanvasD1Ev>
 801b190:	4620      	mov	r0, r4
 801b192:	2170      	movs	r1, #112	; 0x70
 801b194:	f012 fb6c 	bl	802d870 <_ZdlPvj>
 801b198:	4620      	mov	r0, r4
 801b19a:	bd10      	pop	{r4, pc}

0801b19c <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 801b19c:	2000      	movs	r0, #0
 801b19e:	4770      	bx	lr

0801b1a0 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 801b1a0:	4b07      	ldr	r3, [pc, #28]	; (801b1c0 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 801b1a2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801b1a4:	881b      	ldrh	r3, [r3, #0]
 801b1a6:	4293      	cmp	r3, r2
 801b1a8:	bf81      	itttt	hi
 801b1aa:	4b06      	ldrhi	r3, [pc, #24]	; (801b1c4 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 801b1ac:	681b      	ldrhi	r3, [r3, #0]
 801b1ae:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 801b1b2:	7858      	ldrbhi	r0, [r3, #1]
 801b1b4:	bf8c      	ite	hi
 801b1b6:	f000 0003 	andhi.w	r0, r0, #3
 801b1ba:	2000      	movls	r0, #0
 801b1bc:	4770      	bx	lr
 801b1be:	bf00      	nop
 801b1c0:	2000f1c0 	.word	0x2000f1c0
 801b1c4:	2000f1bc 	.word	0x2000f1bc

0801b1c8 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 801b1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1cc:	4b10      	ldr	r3, [pc, #64]	; (801b210 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 801b1ce:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801b1d0:	881b      	ldrh	r3, [r3, #0]
 801b1d2:	428b      	cmp	r3, r1
 801b1d4:	4604      	mov	r4, r0
 801b1d6:	d918      	bls.n	801b20a <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 801b1d8:	6803      	ldr	r3, [r0, #0]
 801b1da:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 801b1dc:	4b0d      	ldr	r3, [pc, #52]	; (801b214 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 801b1de:	6818      	ldr	r0, [r3, #0]
 801b1e0:	f7fa fec8 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 801b1e4:	6823      	ldr	r3, [r4, #0]
 801b1e6:	4606      	mov	r6, r0
 801b1e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b1ea:	4620      	mov	r0, r4
 801b1ec:	4798      	blx	r3
 801b1ee:	6823      	ldr	r3, [r4, #0]
 801b1f0:	4607      	mov	r7, r0
 801b1f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b1f6:	4620      	mov	r0, r4
 801b1f8:	4798      	blx	r3
 801b1fa:	463a      	mov	r2, r7
 801b1fc:	4603      	mov	r3, r0
 801b1fe:	4631      	mov	r1, r6
 801b200:	4620      	mov	r0, r4
 801b202:	46ac      	mov	ip, r5
 801b204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b208:	4760      	bx	ip
 801b20a:	2000      	movs	r0, #0
 801b20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b210:	2000f1c0 	.word	0x2000f1c0
 801b214:	2000f1c8 	.word	0x2000f1c8

0801b218 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 801b218:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b21c:	4b17      	ldr	r3, [pc, #92]	; (801b27c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 801b21e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801b220:	881b      	ldrh	r3, [r3, #0]
 801b222:	428b      	cmp	r3, r1
 801b224:	4604      	mov	r4, r0
 801b226:	d926      	bls.n	801b276 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 801b228:	4b15      	ldr	r3, [pc, #84]	; (801b280 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 801b230:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 801b234:	4b13      	ldr	r3, [pc, #76]	; (801b284 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 801b236:	7855      	ldrb	r5, [r2, #1]
 801b238:	681b      	ldr	r3, [r3, #0]
 801b23a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801b23e:	6833      	ldr	r3, [r6, #0]
 801b240:	69df      	ldr	r7, [r3, #28]
 801b242:	4b11      	ldr	r3, [pc, #68]	; (801b288 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 801b244:	6818      	ldr	r0, [r3, #0]
 801b246:	f7fa fe95 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 801b24a:	6823      	ldr	r3, [r4, #0]
 801b24c:	4680      	mov	r8, r0
 801b24e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b250:	4620      	mov	r0, r4
 801b252:	4798      	blx	r3
 801b254:	6823      	ldr	r3, [r4, #0]
 801b256:	4681      	mov	r9, r0
 801b258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b25c:	4620      	mov	r0, r4
 801b25e:	4798      	blx	r3
 801b260:	f3c5 0581 	ubfx	r5, r5, #2, #2
 801b264:	9000      	str	r0, [sp, #0]
 801b266:	464b      	mov	r3, r9
 801b268:	4642      	mov	r2, r8
 801b26a:	4629      	mov	r1, r5
 801b26c:	4630      	mov	r0, r6
 801b26e:	47b8      	blx	r7
 801b270:	b003      	add	sp, #12
 801b272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b276:	2000      	movs	r0, #0
 801b278:	e7fa      	b.n	801b270 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 801b27a:	bf00      	nop
 801b27c:	2000f1c0 	.word	0x2000f1c0
 801b280:	2000f1bc 	.word	0x2000f1bc
 801b284:	2000f1c4 	.word	0x2000f1c4
 801b288:	2000f1c8 	.word	0x2000f1c8

0801b28c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 801b28c:	b40e      	push	{r1, r2, r3}
 801b28e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b292:	4b2f      	ldr	r3, [pc, #188]	; (801b350 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 801b294:	881a      	ldrh	r2, [r3, #0]
 801b296:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801b298:	429a      	cmp	r2, r3
 801b29a:	b09d      	sub	sp, #116	; 0x74
 801b29c:	4604      	mov	r4, r0
 801b29e:	d954      	bls.n	801b34a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 801b2a0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801b354 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801b2a4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801b358 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 801b2a8:	aa26      	add	r2, sp, #152	; 0x98
 801b2aa:	9202      	str	r2, [sp, #8]
 801b2ac:	f8d9 2000 	ldr.w	r2, [r9]
 801b2b0:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801b2b4:	f8d8 3000 	ldr.w	r3, [r8]
 801b2b8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801b2bc:	682b      	ldr	r3, [r5, #0]
 801b2be:	4628      	mov	r0, r5
 801b2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b2c2:	4798      	blx	r3
 801b2c4:	b207      	sxth	r7, r0
 801b2c6:	4606      	mov	r6, r0
 801b2c8:	a803      	add	r0, sp, #12
 801b2ca:	f004 fca5 	bl	801fc18 <_ZN8touchgfx12TextProviderC1Ev>
 801b2ce:	682b      	ldr	r3, [r5, #0]
 801b2d0:	4628      	mov	r0, r5
 801b2d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b2d4:	4798      	blx	r3
 801b2d6:	682b      	ldr	r3, [r5, #0]
 801b2d8:	4682      	mov	sl, r0
 801b2da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b2dc:	4628      	mov	r0, r5
 801b2de:	4798      	blx	r3
 801b2e0:	4653      	mov	r3, sl
 801b2e2:	9000      	str	r0, [sp, #0]
 801b2e4:	9a02      	ldr	r2, [sp, #8]
 801b2e6:	9925      	ldr	r1, [sp, #148]	; 0x94
 801b2e8:	a803      	add	r0, sp, #12
 801b2ea:	f004 fcf0 	bl	801fcce <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b2ee:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801b2f0:	f8d9 3000 	ldr.w	r3, [r9]
 801b2f4:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 801b2f8:	8925      	ldrh	r5, [r4, #8]
 801b2fa:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801b2fe:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 801b302:	eba5 050c 	sub.w	r5, r5, ip
 801b306:	784a      	ldrb	r2, [r1, #1]
 801b308:	f8d8 3000 	ldr.w	r3, [r8]
 801b30c:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801b310:	b22d      	sxth	r5, r5
 801b312:	9500      	str	r5, [sp, #0]
 801b314:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801b318:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801b31c:	a803      	add	r0, sp, #12
 801b31e:	f002 fae9 	bl	801d8f4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801b322:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801b326:	18b9      	adds	r1, r7, r2
 801b328:	2900      	cmp	r1, #0
 801b32a:	b203      	sxth	r3, r0
 801b32c:	dd0b      	ble.n	801b346 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 801b32e:	3b01      	subs	r3, #1
 801b330:	fb13 f302 	smulbb	r3, r3, r2
 801b334:	fb16 3300 	smlabb	r3, r6, r0, r3
 801b338:	b21f      	sxth	r7, r3
 801b33a:	4638      	mov	r0, r7
 801b33c:	b01d      	add	sp, #116	; 0x74
 801b33e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b342:	b003      	add	sp, #12
 801b344:	4770      	bx	lr
 801b346:	2b00      	cmp	r3, #0
 801b348:	dcf7      	bgt.n	801b33a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801b34a:	2700      	movs	r7, #0
 801b34c:	e7f5      	b.n	801b33a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 801b34e:	bf00      	nop
 801b350:	2000f1c0 	.word	0x2000f1c0
 801b354:	2000f1bc 	.word	0x2000f1bc
 801b358:	2000f1c4 	.word	0x2000f1c4

0801b35c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 801b35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b360:	4bbb      	ldr	r3, [pc, #748]	; (801b650 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 801b362:	460c      	mov	r4, r1
 801b364:	881b      	ldrh	r3, [r3, #0]
 801b366:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 801b368:	428b      	cmp	r3, r1
 801b36a:	b0a9      	sub	sp, #164	; 0xa4
 801b36c:	4681      	mov	r9, r0
 801b36e:	d809      	bhi.n	801b384 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 801b370:	2300      	movs	r3, #0
 801b372:	f04f 32ff 	mov.w	r2, #4294967295
 801b376:	e9c0 3200 	strd	r3, r2, [r0]
 801b37a:	6083      	str	r3, [r0, #8]
 801b37c:	4648      	mov	r0, r9
 801b37e:	b029      	add	sp, #164	; 0xa4
 801b380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b384:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 801b658 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 801b388:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 801b65c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 801b38c:	f8db 3000 	ldr.w	r3, [fp]
 801b390:	f8d8 0000 	ldr.w	r0, [r8]
 801b394:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801b398:	4bae      	ldr	r3, [pc, #696]	; (801b654 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 801b39a:	681b      	ldr	r3, [r3, #0]
 801b39c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801b3a0:	f7fa fde8 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 801b3a4:	682b      	ldr	r3, [r5, #0]
 801b3a6:	4607      	mov	r7, r0
 801b3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b3aa:	4628      	mov	r0, r5
 801b3ac:	4798      	blx	r3
 801b3ae:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 801b3b0:	f8cd 800c 	str.w	r8, [sp, #12]
 801b3b4:	4430      	add	r0, r6
 801b3b6:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 801b3ba:	b283      	uxth	r3, r0
 801b3bc:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 801b3c0:	9302      	str	r3, [sp, #8]
 801b3c2:	4650      	mov	r0, sl
 801b3c4:	2e00      	cmp	r6, #0
 801b3c6:	f040 8091 	bne.w	801b4ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 801b3ca:	f004 fc25 	bl	801fc18 <_ZN8touchgfx12TextProviderC1Ev>
 801b3ce:	682b      	ldr	r3, [r5, #0]
 801b3d0:	4628      	mov	r0, r5
 801b3d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b3d4:	4798      	blx	r3
 801b3d6:	682b      	ldr	r3, [r5, #0]
 801b3d8:	9005      	str	r0, [sp, #20]
 801b3da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b3dc:	4628      	mov	r0, r5
 801b3de:	4798      	blx	r3
 801b3e0:	6823      	ldr	r3, [r4, #0]
 801b3e2:	4680      	mov	r8, r0
 801b3e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b3e6:	4620      	mov	r0, r4
 801b3e8:	4798      	blx	r3
 801b3ea:	6822      	ldr	r2, [r4, #0]
 801b3ec:	9004      	str	r0, [sp, #16]
 801b3ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801b3f2:	4620      	mov	r0, r4
 801b3f4:	4790      	blx	r2
 801b3f6:	9905      	ldr	r1, [sp, #20]
 801b3f8:	9b04      	ldr	r3, [sp, #16]
 801b3fa:	9001      	str	r0, [sp, #4]
 801b3fc:	9300      	str	r3, [sp, #0]
 801b3fe:	460a      	mov	r2, r1
 801b400:	4643      	mov	r3, r8
 801b402:	4639      	mov	r1, r7
 801b404:	4650      	mov	r0, sl
 801b406:	f004 fc77 	bl	801fcf8 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801b40a:	4637      	mov	r7, r6
 801b40c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801b40e:	f8db 3000 	ldr.w	r3, [fp]
 801b412:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801b416:	4629      	mov	r1, r5
 801b418:	785b      	ldrb	r3, [r3, #1]
 801b41a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b41e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801b422:	4650      	mov	r0, sl
 801b424:	f001 ffb8 	bl	801d398 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801b428:	4287      	cmp	r7, r0
 801b42a:	bfb8      	it	lt
 801b42c:	b207      	sxthlt	r7, r0
 801b42e:	3601      	adds	r6, #1
 801b430:	4650      	mov	r0, sl
 801b432:	b2b6      	uxth	r6, r6
 801b434:	f004 fc17 	bl	801fc66 <_ZN8touchgfx12TextProvider11endOfStringEv>
 801b438:	2800      	cmp	r0, #0
 801b43a:	d0e7      	beq.n	801b40c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 801b43c:	9b02      	ldr	r3, [sp, #8]
 801b43e:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 801b442:	fb13 f606 	smulbb	r6, r3, r6
 801b446:	eba6 0608 	sub.w	r6, r6, r8
 801b44a:	b2b6      	uxth	r6, r6
 801b44c:	fa0f f886 	sxth.w	r8, r6
 801b450:	f1b8 0f00 	cmp.w	r8, #0
 801b454:	dd06      	ble.n	801b464 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 801b456:	682b      	ldr	r3, [r5, #0]
 801b458:	4628      	mov	r0, r5
 801b45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b45c:	4798      	blx	r3
 801b45e:	4430      	add	r0, r6
 801b460:	fa0f f880 	sxth.w	r8, r0
 801b464:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b468:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801b46c:	6823      	ldr	r3, [r4, #0]
 801b46e:	bf08      	it	eq
 801b470:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 801b474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b476:	bf18      	it	ne
 801b478:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 801b47c:	4620      	mov	r0, r4
 801b47e:	4798      	blx	r3
 801b480:	2801      	cmp	r0, #1
 801b482:	b2ba      	uxth	r2, r7
 801b484:	f000 80d1 	beq.w	801b62a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 801b488:	2802      	cmp	r0, #2
 801b48a:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801b48e:	f000 80d2 	beq.w	801b636 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 801b492:	b21e      	sxth	r6, r3
 801b494:	7a29      	ldrb	r1, [r5, #8]
 801b496:	7a6d      	ldrb	r5, [r5, #9]
 801b498:	1a76      	subs	r6, r6, r1
 801b49a:	4429      	add	r1, r5
 801b49c:	440a      	add	r2, r1
 801b49e:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801b4a2:	b2b3      	uxth	r3, r6
 801b4a4:	b292      	uxth	r2, r2
 801b4a6:	2902      	cmp	r1, #2
 801b4a8:	b21f      	sxth	r7, r3
 801b4aa:	b216      	sxth	r6, r2
 801b4ac:	f000 80c6 	beq.w	801b63c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 801b4b0:	2903      	cmp	r1, #3
 801b4b2:	f000 80d5 	beq.w	801b660 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 801b4b6:	2901      	cmp	r1, #1
 801b4b8:	f040 80db 	bne.w	801b672 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 801b4bc:	8923      	ldrh	r3, [r4, #8]
 801b4be:	4632      	mov	r2, r6
 801b4c0:	eba3 0308 	sub.w	r3, r3, r8
 801b4c4:	4646      	mov	r6, r8
 801b4c6:	463d      	mov	r5, r7
 801b4c8:	4690      	mov	r8, r2
 801b4ca:	b21f      	sxth	r7, r3
 801b4cc:	9b03      	ldr	r3, [sp, #12]
 801b4ce:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801b4d0:	6818      	ldr	r0, [r3, #0]
 801b4d2:	f7fa fd4f 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 801b4d6:	f8a9 7000 	strh.w	r7, [r9]
 801b4da:	f8a9 5002 	strh.w	r5, [r9, #2]
 801b4de:	f8a9 6004 	strh.w	r6, [r9, #4]
 801b4e2:	f8a9 8006 	strh.w	r8, [r9, #6]
 801b4e6:	f8c9 0008 	str.w	r0, [r9, #8]
 801b4ea:	e747      	b.n	801b37c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 801b4ec:	f004 fb94 	bl	801fc18 <_ZN8touchgfx12TextProviderC1Ev>
 801b4f0:	682b      	ldr	r3, [r5, #0]
 801b4f2:	4628      	mov	r0, r5
 801b4f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b4f6:	4798      	blx	r3
 801b4f8:	682b      	ldr	r3, [r5, #0]
 801b4fa:	4606      	mov	r6, r0
 801b4fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b4fe:	4628      	mov	r0, r5
 801b500:	4798      	blx	r3
 801b502:	6823      	ldr	r3, [r4, #0]
 801b504:	4680      	mov	r8, r0
 801b506:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b508:	4620      	mov	r0, r4
 801b50a:	4798      	blx	r3
 801b50c:	6822      	ldr	r2, [r4, #0]
 801b50e:	9004      	str	r0, [sp, #16]
 801b510:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801b514:	4620      	mov	r0, r4
 801b516:	4790      	blx	r2
 801b518:	9b04      	ldr	r3, [sp, #16]
 801b51a:	9001      	str	r0, [sp, #4]
 801b51c:	4632      	mov	r2, r6
 801b51e:	9300      	str	r3, [sp, #0]
 801b520:	4639      	mov	r1, r7
 801b522:	4643      	mov	r3, r8
 801b524:	4650      	mov	r0, sl
 801b526:	f004 fbe7 	bl	801fcf8 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801b52a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b52e:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 801b532:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801b534:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 801b538:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801b53c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801b540:	bf0a      	itet	eq
 801b542:	4642      	moveq	r2, r8
 801b544:	461a      	movne	r2, r3
 801b546:	4698      	moveq	r8, r3
 801b548:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801b54c:	1ad2      	subs	r2, r2, r3
 801b54e:	f8db 3000 	ldr.w	r3, [fp]
 801b552:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801b556:	7859      	ldrb	r1, [r3, #1]
 801b558:	f8cd a020 	str.w	sl, [sp, #32]
 801b55c:	2300      	movs	r3, #0
 801b55e:	f3c1 0181 	ubfx	r1, r1, #2, #2
 801b562:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b566:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b56a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801b56e:	950a      	str	r5, [sp, #40]	; 0x28
 801b570:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801b574:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b578:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801b57c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801b580:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801b584:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801b588:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801b58c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 801b590:	b350      	cbz	r0, 801b5e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28c>
 801b592:	682b      	ldr	r3, [r5, #0]
 801b594:	4628      	mov	r0, r5
 801b596:	695b      	ldr	r3, [r3, #20]
 801b598:	4798      	blx	r3
 801b59a:	4607      	mov	r7, r0
 801b59c:	b320      	cbz	r0, 801b5e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28c>
 801b59e:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b5a0:	6803      	ldr	r3, [r0, #0]
 801b5a2:	4639      	mov	r1, r7
 801b5a4:	68db      	ldr	r3, [r3, #12]
 801b5a6:	4798      	blx	r3
 801b5a8:	4606      	mov	r6, r0
 801b5aa:	b1e8      	cbz	r0, 801b5e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28c>
 801b5ac:	7b43      	ldrb	r3, [r0, #13]
 801b5ae:	7a82      	ldrb	r2, [r0, #10]
 801b5b0:	005b      	lsls	r3, r3, #1
 801b5b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b5b6:	4313      	orrs	r3, r2
 801b5b8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 801b5bc:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 801b5c0:	2b04      	cmp	r3, #4
 801b5c2:	d111      	bne.n	801b5e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28c>
 801b5c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b5c6:	6803      	ldr	r3, [r0, #0]
 801b5c8:	4632      	mov	r2, r6
 801b5ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b5cc:	4639      	mov	r1, r7
 801b5ce:	4798      	blx	r3
 801b5d0:	7b73      	ldrb	r3, [r6, #13]
 801b5d2:	005b      	lsls	r3, r3, #1
 801b5d4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801b5d8:	7ab3      	ldrb	r3, [r6, #10]
 801b5da:	4313      	orrs	r3, r2
 801b5dc:	4418      	add	r0, r3
 801b5de:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b5e2:	4418      	add	r0, r3
 801b5e4:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 801b5e8:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 801b5ec:	2600      	movs	r6, #0
 801b5ee:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 801b5f2:	4637      	mov	r7, r6
 801b5f4:	45c3      	cmp	fp, r8
 801b5f6:	bfd4      	ite	le
 801b5f8:	2100      	movle	r1, #0
 801b5fa:	2101      	movgt	r1, #1
 801b5fc:	a807      	add	r0, sp, #28
 801b5fe:	f002 f8aa 	bl	801d756 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801b602:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801b606:	429f      	cmp	r7, r3
 801b608:	bfb8      	it	lt
 801b60a:	b21f      	sxthlt	r7, r3
 801b60c:	9b02      	ldr	r3, [sp, #8]
 801b60e:	eba8 0803 	sub.w	r8, r8, r3
 801b612:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801b616:	3601      	adds	r6, #1
 801b618:	b2b6      	uxth	r6, r6
 801b61a:	fa0f f888 	sxth.w	r8, r8
 801b61e:	2b00      	cmp	r3, #0
 801b620:	f43f af0c 	beq.w	801b43c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 801b624:	45c2      	cmp	sl, r8
 801b626:	dbe5      	blt.n	801b5f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x298>
 801b628:	e708      	b.n	801b43c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 801b62a:	1bf6      	subs	r6, r6, r7
 801b62c:	2702      	movs	r7, #2
 801b62e:	fb96 f6f7 	sdiv	r6, r6, r7
 801b632:	b236      	sxth	r6, r6
 801b634:	e72e      	b.n	801b494 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x138>
 801b636:	4413      	add	r3, r2
 801b638:	1af6      	subs	r6, r6, r3
 801b63a:	e7fa      	b.n	801b632 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 801b63c:	8925      	ldrh	r5, [r4, #8]
 801b63e:	1aad      	subs	r5, r5, r2
 801b640:	1aed      	subs	r5, r5, r3
 801b642:	b22f      	sxth	r7, r5
 801b644:	8965      	ldrh	r5, [r4, #10]
 801b646:	eba5 0508 	sub.w	r5, r5, r8
 801b64a:	b22d      	sxth	r5, r5
 801b64c:	e73e      	b.n	801b4cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x170>
 801b64e:	bf00      	nop
 801b650:	2000f1c0 	.word	0x2000f1c0
 801b654:	2000f1c4 	.word	0x2000f1c4
 801b658:	2000f1bc 	.word	0x2000f1bc
 801b65c:	2000f1c8 	.word	0x2000f1c8
 801b660:	8965      	ldrh	r5, [r4, #10]
 801b662:	1aad      	subs	r5, r5, r2
 801b664:	1aed      	subs	r5, r5, r3
 801b666:	4633      	mov	r3, r6
 801b668:	b22d      	sxth	r5, r5
 801b66a:	4646      	mov	r6, r8
 801b66c:	2700      	movs	r7, #0
 801b66e:	4698      	mov	r8, r3
 801b670:	e72c      	b.n	801b4cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x170>
 801b672:	2500      	movs	r5, #0
 801b674:	e72a      	b.n	801b4cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x170>
 801b676:	bf00      	nop

0801b678 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 801b678:	b513      	push	{r0, r1, r4, lr}
 801b67a:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 801b67e:	4604      	mov	r4, r0
 801b680:	b1fb      	cbz	r3, 801b6c2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b682:	4b16      	ldr	r3, [pc, #88]	; (801b6dc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 801b684:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801b686:	881b      	ldrh	r3, [r3, #0]
 801b688:	428b      	cmp	r3, r1
 801b68a:	d91a      	bls.n	801b6c2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b68c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801b690:	2b00      	cmp	r3, #0
 801b692:	dd16      	ble.n	801b6c2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b694:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b698:	2b00      	cmp	r3, #0
 801b69a:	dd12      	ble.n	801b6c2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b69c:	4b10      	ldr	r3, [pc, #64]	; (801b6e0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 801b69e:	6818      	ldr	r0, [r3, #0]
 801b6a0:	f7fa fc68 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 801b6a4:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 801b6a8:	6822      	ldr	r2, [r4, #0]
 801b6aa:	2b00      	cmp	r3, #0
 801b6ac:	db06      	blt.n	801b6bc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801b6ae:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801b6b2:	2b00      	cmp	r3, #0
 801b6b4:	db02      	blt.n	801b6bc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801b6b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801b6b8:	4298      	cmp	r0, r3
 801b6ba:	d004      	beq.n	801b6c6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 801b6bc:	6953      	ldr	r3, [r2, #20]
 801b6be:	4620      	mov	r0, r4
 801b6c0:	4798      	blx	r3
 801b6c2:	b002      	add	sp, #8
 801b6c4:	bd10      	pop	{r4, pc}
 801b6c6:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 801b6ca:	c903      	ldmia	r1, {r0, r1}
 801b6cc:	466b      	mov	r3, sp
 801b6ce:	e883 0003 	stmia.w	r3, {r0, r1}
 801b6d2:	6912      	ldr	r2, [r2, #16]
 801b6d4:	4619      	mov	r1, r3
 801b6d6:	4620      	mov	r0, r4
 801b6d8:	4790      	blx	r2
 801b6da:	e7f2      	b.n	801b6c2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801b6dc:	2000f1c0 	.word	0x2000f1c0
 801b6e0:	2000f1c8 	.word	0x2000f1c8

0801b6e4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801b6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6e8:	4b44      	ldr	r3, [pc, #272]	; (801b7fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 801b6ea:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801b6ec:	881b      	ldrh	r3, [r3, #0]
 801b6ee:	4293      	cmp	r3, r2
 801b6f0:	b08e      	sub	sp, #56	; 0x38
 801b6f2:	4604      	mov	r4, r0
 801b6f4:	d97e      	bls.n	801b7f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801b6f6:	6808      	ldr	r0, [r1, #0]
 801b6f8:	4d41      	ldr	r5, [pc, #260]	; (801b800 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 801b6fa:	6849      	ldr	r1, [r1, #4]
 801b6fc:	ab05      	add	r3, sp, #20
 801b6fe:	c303      	stmia	r3!, {r0, r1}
 801b700:	4611      	mov	r1, r2
 801b702:	6828      	ldr	r0, [r5, #0]
 801b704:	f7fa fc36 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 801b708:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	db11      	blt.n	801b734 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801b710:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801b714:	2b00      	cmp	r3, #0
 801b716:	db0d      	blt.n	801b734 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801b718:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801b71a:	4298      	cmp	r0, r3
 801b71c:	d10a      	bne.n	801b734 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801b71e:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801b722:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b726:	ab09      	add	r3, sp, #36	; 0x24
 801b728:	e883 0003 	stmia.w	r3, {r0, r1}
 801b72c:	4619      	mov	r1, r3
 801b72e:	a805      	add	r0, sp, #20
 801b730:	f7fe f89c 	bl	801986c <_ZN8touchgfx4RectaNERKS0_>
 801b734:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b738:	2b00      	cmp	r3, #0
 801b73a:	dd5b      	ble.n	801b7f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801b73c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801b740:	2b00      	cmp	r3, #0
 801b742:	dd57      	ble.n	801b7f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801b744:	4f2f      	ldr	r7, [pc, #188]	; (801b804 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801b746:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801b748:	683b      	ldr	r3, [r7, #0]
 801b74a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801b74e:	4b2e      	ldr	r3, [pc, #184]	; (801b808 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 801b750:	681b      	ldr	r3, [r3, #0]
 801b752:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801b756:	2e00      	cmp	r6, #0
 801b758:	d04c      	beq.n	801b7f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801b75a:	6823      	ldr	r3, [r4, #0]
 801b75c:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 801b760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b762:	4620      	mov	r0, r4
 801b764:	4798      	blx	r3
 801b766:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801b768:	683b      	ldr	r3, [r7, #0]
 801b76a:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 801b76e:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 801b772:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 801b776:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b778:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801b77c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 801b780:	785b      	ldrb	r3, [r3, #1]
 801b782:	9609      	str	r6, [sp, #36]	; 0x24
 801b784:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801b788:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b78c:	4b1f      	ldr	r3, [pc, #124]	; (801b80c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 801b78e:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 801b792:	681b      	ldr	r3, [r3, #0]
 801b794:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 801b798:	910b      	str	r1, [sp, #44]	; 0x2c
 801b79a:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 801b79e:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 801b7a2:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 801b7a6:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 801b7aa:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b7ae:	b10a      	cbz	r2, 801b7b4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 801b7b0:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801b7b2:	b906      	cbnz	r6, 801b7b6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 801b7b4:	689e      	ldr	r6, [r3, #8]
 801b7b6:	af07      	add	r7, sp, #28
 801b7b8:	4621      	mov	r1, r4
 801b7ba:	4638      	mov	r0, r7
 801b7bc:	f003 fdb2 	bl	801f324 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b7c0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801b7c2:	6828      	ldr	r0, [r5, #0]
 801b7c4:	f7fa fbd6 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 801b7c8:	6823      	ldr	r3, [r4, #0]
 801b7ca:	4605      	mov	r5, r0
 801b7cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b7ce:	4620      	mov	r0, r4
 801b7d0:	4798      	blx	r3
 801b7d2:	6823      	ldr	r3, [r4, #0]
 801b7d4:	4680      	mov	r8, r0
 801b7d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b7da:	4620      	mov	r0, r4
 801b7dc:	4798      	blx	r3
 801b7de:	e9cd 8002 	strd	r8, r0, [sp, #8]
 801b7e2:	ab09      	add	r3, sp, #36	; 0x24
 801b7e4:	9300      	str	r3, [sp, #0]
 801b7e6:	9501      	str	r5, [sp, #4]
 801b7e8:	ab05      	add	r3, sp, #20
 801b7ea:	e897 0006 	ldmia.w	r7, {r1, r2}
 801b7ee:	4630      	mov	r0, r6
 801b7f0:	f7fa fb51 	bl	8015e96 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801b7f4:	b00e      	add	sp, #56	; 0x38
 801b7f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b7fa:	bf00      	nop
 801b7fc:	2000f1c0 	.word	0x2000f1c0
 801b800:	2000f1c8 	.word	0x2000f1c8
 801b804:	2000f1bc 	.word	0x2000f1bc
 801b808:	2000f1c4 	.word	0x2000f1c4
 801b80c:	2000f164 	.word	0x2000f164

0801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801b810:	b538      	push	{r3, r4, r5, lr}
 801b812:	4b0e      	ldr	r3, [pc, #56]	; (801b84c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 801b814:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801b816:	881b      	ldrh	r3, [r3, #0]
 801b818:	429a      	cmp	r2, r3
 801b81a:	4604      	mov	r4, r0
 801b81c:	d214      	bcs.n	801b848 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801b81e:	6803      	ldr	r3, [r0, #0]
 801b820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b822:	4798      	blx	r3
 801b824:	6823      	ldr	r3, [r4, #0]
 801b826:	4605      	mov	r5, r0
 801b828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b82a:	4620      	mov	r0, r4
 801b82c:	4798      	blx	r3
 801b82e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b832:	b22d      	sxth	r5, r5
 801b834:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801b838:	4601      	mov	r1, r0
 801b83a:	bf06      	itte	eq
 801b83c:	4602      	moveq	r2, r0
 801b83e:	4629      	moveq	r1, r5
 801b840:	462a      	movne	r2, r5
 801b842:	4620      	mov	r0, r4
 801b844:	f7f8 fdd1 	bl	80143ea <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801b848:	bd38      	pop	{r3, r4, r5, pc}
 801b84a:	bf00      	nop
 801b84c:	2000f1c0 	.word	0x2000f1c0

0801b850 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801b850:	b530      	push	{r4, r5, lr}
 801b852:	888b      	ldrh	r3, [r1, #4]
 801b854:	8583      	strh	r3, [r0, #44]	; 0x2c
 801b856:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801b85a:	b085      	sub	sp, #20
 801b85c:	4604      	mov	r4, r0
 801b85e:	b923      	cbnz	r3, 801b86a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801b860:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801b864:	b90b      	cbnz	r3, 801b86a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801b866:	f7ff ffd3 	bl	801b810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 801b86a:	6823      	ldr	r3, [r4, #0]
 801b86c:	466d      	mov	r5, sp
 801b86e:	4621      	mov	r1, r4
 801b870:	4628      	mov	r0, r5
 801b872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b876:	4798      	blx	r3
 801b878:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801b87c:	343c      	adds	r4, #60	; 0x3c
 801b87e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801b882:	b005      	add	sp, #20
 801b884:	bd30      	pop	{r4, r5, pc}
	...

0801b888 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv>:
 801b888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b88c:	4b3c      	ldr	r3, [pc, #240]	; (801b980 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xf8>)
 801b88e:	881a      	ldrh	r2, [r3, #0]
 801b890:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 801b892:	429a      	cmp	r2, r3
 801b894:	4604      	mov	r4, r0
 801b896:	d942      	bls.n	801b91e <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x96>
 801b898:	6803      	ldr	r3, [r0, #0]
 801b89a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b89c:	4798      	blx	r3
 801b89e:	6823      	ldr	r3, [r4, #0]
 801b8a0:	4681      	mov	r9, r0
 801b8a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b8a4:	4620      	mov	r0, r4
 801b8a6:	4798      	blx	r3
 801b8a8:	6823      	ldr	r3, [r4, #0]
 801b8aa:	4680      	mov	r8, r0
 801b8ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b8ae:	4620      	mov	r0, r4
 801b8b0:	4798      	blx	r3
 801b8b2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b8b6:	4605      	mov	r5, r0
 801b8b8:	b287      	uxth	r7, r0
 801b8ba:	fa0f f688 	sxth.w	r6, r8
 801b8be:	b1cb      	cbz	r3, 801b8f4 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x6c>
 801b8c0:	2b02      	cmp	r3, #2
 801b8c2:	d12e      	bne.n	801b922 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x9a>
 801b8c4:	f1b9 0f02 	cmp.w	r9, #2
 801b8c8:	d017      	beq.n	801b8fa <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x72>
 801b8ca:	8920      	ldrh	r0, [r4, #8]
 801b8cc:	88a1      	ldrh	r1, [r4, #4]
 801b8ce:	6822      	ldr	r2, [r4, #0]
 801b8d0:	f1b9 0f01 	cmp.w	r9, #1
 801b8d4:	bf13      	iteet	ne
 801b8d6:	1840      	addne	r0, r0, r1
 801b8d8:	2302      	moveq	r3, #2
 801b8da:	eba0 0008 	subeq.w	r0, r0, r8
 801b8de:	eba0 0108 	subne.w	r1, r0, r8
 801b8e2:	bf04      	itt	eq
 801b8e4:	fb90 f3f3 	sdiveq	r3, r0, r3
 801b8e8:	18c9      	addeq	r1, r1, r3
 801b8ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801b8ec:	b209      	sxth	r1, r1
 801b8ee:	4620      	mov	r0, r4
 801b8f0:	4790      	blx	r2
 801b8f2:	e002      	b.n	801b8fa <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x72>
 801b8f4:	f1b9 0f00 	cmp.w	r9, #0
 801b8f8:	d1e7      	bne.n	801b8ca <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x42>
 801b8fa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b8fe:	2b02      	cmp	r3, #2
 801b900:	d108      	bne.n	801b914 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x8c>
 801b902:	88e3      	ldrh	r3, [r4, #6]
 801b904:	8961      	ldrh	r1, [r4, #10]
 801b906:	4419      	add	r1, r3
 801b908:	6823      	ldr	r3, [r4, #0]
 801b90a:	1bc9      	subs	r1, r1, r7
 801b90c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b90e:	b209      	sxth	r1, r1
 801b910:	4620      	mov	r0, r4
 801b912:	4798      	blx	r3
 801b914:	462a      	mov	r2, r5
 801b916:	4631      	mov	r1, r6
 801b918:	4620      	mov	r0, r4
 801b91a:	f7f8 fd66 	bl	80143ea <_ZN8touchgfx8Drawable14setWidthHeightEss>
 801b91e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b922:	2b01      	cmp	r3, #1
 801b924:	d112      	bne.n	801b94c <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xc4>
 801b926:	f1b9 0f00 	cmp.w	r9, #0
 801b92a:	d114      	bne.n	801b956 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xce>
 801b92c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b930:	2b01      	cmp	r3, #1
 801b932:	d108      	bne.n	801b946 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xbe>
 801b934:	88a3      	ldrh	r3, [r4, #4]
 801b936:	8921      	ldrh	r1, [r4, #8]
 801b938:	4419      	add	r1, r3
 801b93a:	6823      	ldr	r3, [r4, #0]
 801b93c:	1bc9      	subs	r1, r1, r7
 801b93e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b940:	b209      	sxth	r1, r1
 801b942:	4620      	mov	r0, r4
 801b944:	4798      	blx	r3
 801b946:	4632      	mov	r2, r6
 801b948:	4629      	mov	r1, r5
 801b94a:	e7e5      	b.n	801b918 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0x90>
 801b94c:	2b03      	cmp	r3, #3
 801b94e:	d102      	bne.n	801b956 <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xce>
 801b950:	f1b9 0f02 	cmp.w	r9, #2
 801b954:	d0ea      	beq.n	801b92c <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xa4>
 801b956:	8963      	ldrh	r3, [r4, #10]
 801b958:	88e1      	ldrh	r1, [r4, #6]
 801b95a:	6822      	ldr	r2, [r4, #0]
 801b95c:	f1b9 0f01 	cmp.w	r9, #1
 801b960:	bf0b      	itete	eq
 801b962:	2002      	moveq	r0, #2
 801b964:	185b      	addne	r3, r3, r1
 801b966:	eba3 0308 	subeq.w	r3, r3, r8
 801b96a:	eba3 0108 	subne.w	r1, r3, r8
 801b96e:	bf04      	itt	eq
 801b970:	fb93 f0f0 	sdiveq	r0, r3, r0
 801b974:	1809      	addeq	r1, r1, r0
 801b976:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801b978:	b209      	sxth	r1, r1
 801b97a:	4620      	mov	r0, r4
 801b97c:	4790      	blx	r2
 801b97e:	e7d5      	b.n	801b92c <_ZN8touchgfx8TextArea32resizeToCurrentTextWithAlignmentEv+0xa4>
 801b980:	2000f1c0 	.word	0x2000f1c0

0801b984 <_ZNK8touchgfx3Box12getSolidRectEv>:
 801b984:	2300      	movs	r3, #0
 801b986:	8083      	strh	r3, [r0, #4]
 801b988:	80c3      	strh	r3, [r0, #6]
 801b98a:	8003      	strh	r3, [r0, #0]
 801b98c:	8043      	strh	r3, [r0, #2]
 801b98e:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801b992:	2bff      	cmp	r3, #255	; 0xff
 801b994:	bf01      	itttt	eq
 801b996:	890b      	ldrheq	r3, [r1, #8]
 801b998:	8083      	strheq	r3, [r0, #4]
 801b99a:	894b      	ldrheq	r3, [r1, #10]
 801b99c:	80c3      	strheq	r3, [r0, #6]
 801b99e:	4770      	bx	lr

0801b9a0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801b9a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b9a2:	4604      	mov	r4, r0
 801b9a4:	6808      	ldr	r0, [r1, #0]
 801b9a6:	6849      	ldr	r1, [r1, #4]
 801b9a8:	466b      	mov	r3, sp
 801b9aa:	c303      	stmia	r3!, {r0, r1}
 801b9ac:	6823      	ldr	r3, [r4, #0]
 801b9ae:	4669      	mov	r1, sp
 801b9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9b2:	4620      	mov	r0, r4
 801b9b4:	4798      	blx	r3
 801b9b6:	4b08      	ldr	r3, [pc, #32]	; (801b9d8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801b9b8:	681b      	ldr	r3, [r3, #0]
 801b9ba:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801b9be:	b10a      	cbz	r2, 801b9c4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801b9c0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801b9c2:	b900      	cbnz	r0, 801b9c6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801b9c4:	6898      	ldr	r0, [r3, #8]
 801b9c6:	6803      	ldr	r3, [r0, #0]
 801b9c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801b9ca:	6a1d      	ldr	r5, [r3, #32]
 801b9cc:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801b9d0:	4669      	mov	r1, sp
 801b9d2:	47a8      	blx	r5
 801b9d4:	b003      	add	sp, #12
 801b9d6:	bd30      	pop	{r4, r5, pc}
 801b9d8:	2000f164 	.word	0x2000f164

0801b9dc <_ZNK8touchgfx3Box17invalidateContentEv>:
 801b9dc:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 801b9e0:	b12a      	cbz	r2, 801b9ee <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801b9e2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801b9e6:	b112      	cbz	r2, 801b9ee <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801b9e8:	6803      	ldr	r3, [r0, #0]
 801b9ea:	695b      	ldr	r3, [r3, #20]
 801b9ec:	4718      	bx	r3
 801b9ee:	4770      	bx	lr

0801b9f0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 801b9f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b9f4:	4b2f      	ldr	r3, [pc, #188]	; (801bab4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 801b9f6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 801b9f8:	881b      	ldrh	r3, [r3, #0]
 801b9fa:	4293      	cmp	r3, r2
 801b9fc:	b08d      	sub	sp, #52	; 0x34
 801b9fe:	4604      	mov	r4, r0
 801ba00:	460f      	mov	r7, r1
 801ba02:	d954      	bls.n	801baae <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 801ba04:	4b2c      	ldr	r3, [pc, #176]	; (801bab8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 801ba06:	6819      	ldr	r1, [r3, #0]
 801ba08:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 801ba0c:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 801ba10:	4a2a      	ldr	r2, [pc, #168]	; (801babc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 801ba12:	6812      	ldr	r2, [r2, #0]
 801ba14:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 801ba18:	2900      	cmp	r1, #0
 801ba1a:	d048      	beq.n	801baae <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 801ba1c:	785a      	ldrb	r2, [r3, #1]
 801ba1e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801ba22:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801ba26:	4b26      	ldr	r3, [pc, #152]	; (801bac0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 801ba28:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 801ba2c:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 801ba30:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 801ba34:	6b26      	ldr	r6, [r4, #48]	; 0x30
 801ba36:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 801ba3a:	9107      	str	r1, [sp, #28]
 801ba3c:	f3c2 0801 	ubfx	r8, r2, #0, #2
 801ba40:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801ba44:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 801ba48:	681a      	ldr	r2, [r3, #0]
 801ba4a:	f88d 8020 	strb.w	r8, [sp, #32]
 801ba4e:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 801ba52:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 801ba56:	9609      	str	r6, [sp, #36]	; 0x24
 801ba58:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 801ba5c:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 801ba60:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 801ba64:	b10b      	cbz	r3, 801ba6a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 801ba66:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 801ba68:	b905      	cbnz	r5, 801ba6c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 801ba6a:	6895      	ldr	r5, [r2, #8]
 801ba6c:	ae05      	add	r6, sp, #20
 801ba6e:	4621      	mov	r1, r4
 801ba70:	4630      	mov	r0, r6
 801ba72:	f003 fc57 	bl	801f324 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801ba76:	4b13      	ldr	r3, [pc, #76]	; (801bac4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 801ba78:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801ba7a:	6818      	ldr	r0, [r3, #0]
 801ba7c:	f7fa fa7a 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 801ba80:	6823      	ldr	r3, [r4, #0]
 801ba82:	4680      	mov	r8, r0
 801ba84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ba86:	4620      	mov	r0, r4
 801ba88:	4798      	blx	r3
 801ba8a:	6823      	ldr	r3, [r4, #0]
 801ba8c:	4681      	mov	r9, r0
 801ba8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ba92:	4620      	mov	r0, r4
 801ba94:	4798      	blx	r3
 801ba96:	e9cd 9002 	strd	r9, r0, [sp, #8]
 801ba9a:	ab07      	add	r3, sp, #28
 801ba9c:	9300      	str	r3, [sp, #0]
 801ba9e:	f8cd 8004 	str.w	r8, [sp, #4]
 801baa2:	463b      	mov	r3, r7
 801baa4:	e896 0006 	ldmia.w	r6, {r1, r2}
 801baa8:	4628      	mov	r0, r5
 801baaa:	f7fa f9f4 	bl	8015e96 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801baae:	b00d      	add	sp, #52	; 0x34
 801bab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bab4:	2000f1c0 	.word	0x2000f1c0
 801bab8:	2000f1bc 	.word	0x2000f1bc
 801babc:	2000f1c4 	.word	0x2000f1c4
 801bac0:	2000f164 	.word	0x2000f164
 801bac4:	2000f1c8 	.word	0x2000f1c8

0801bac8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
 801bac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bacc:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 801bad0:	b0a0      	sub	sp, #128	; 0x80
 801bad2:	4604      	mov	r4, r0
 801bad4:	b193      	cbz	r3, 801bafc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801bad6:	4b30      	ldr	r3, [pc, #192]	; (801bb98 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd0>)
 801bad8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801bada:	881b      	ldrh	r3, [r3, #0]
 801badc:	428b      	cmp	r3, r1
 801bade:	d90d      	bls.n	801bafc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801bae0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	dd09      	ble.n	801bafc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801bae8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801baec:	2b00      	cmp	r3, #0
 801baee:	dd05      	ble.n	801bafc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801baf0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 801baf4:	b12b      	cbz	r3, 801bb02 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x3a>
 801baf6:	6803      	ldr	r3, [r0, #0]
 801baf8:	695b      	ldr	r3, [r3, #20]
 801bafa:	4798      	blx	r3
 801bafc:	b020      	add	sp, #128	; 0x80
 801bafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb02:	4b26      	ldr	r3, [pc, #152]	; (801bb9c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd4>)
 801bb04:	681b      	ldr	r3, [r3, #0]
 801bb06:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 801bb0a:	4b25      	ldr	r3, [pc, #148]	; (801bba0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd8>)
 801bb0c:	681b      	ldr	r3, [r3, #0]
 801bb0e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801bb12:	4b24      	ldr	r3, [pc, #144]	; (801bba4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xdc>)
 801bb14:	6818      	ldr	r0, [r3, #0]
 801bb16:	f7fa fa2d 	bl	8015f74 <_ZNK8touchgfx5Texts7getTextEt>
 801bb1a:	4606      	mov	r6, r0
 801bb1c:	a807      	add	r0, sp, #28
 801bb1e:	f004 f87b 	bl	801fc18 <_ZN8touchgfx12TextProviderC1Ev>
 801bb22:	682b      	ldr	r3, [r5, #0]
 801bb24:	4628      	mov	r0, r5
 801bb26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bb28:	4798      	blx	r3
 801bb2a:	682b      	ldr	r3, [r5, #0]
 801bb2c:	4607      	mov	r7, r0
 801bb2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bb30:	4628      	mov	r0, r5
 801bb32:	4798      	blx	r3
 801bb34:	6823      	ldr	r3, [r4, #0]
 801bb36:	4605      	mov	r5, r0
 801bb38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bb3a:	4620      	mov	r0, r4
 801bb3c:	4798      	blx	r3
 801bb3e:	6823      	ldr	r3, [r4, #0]
 801bb40:	4680      	mov	r8, r0
 801bb42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bb46:	4620      	mov	r0, r4
 801bb48:	4798      	blx	r3
 801bb4a:	462b      	mov	r3, r5
 801bb4c:	e9cd 8000 	strd	r8, r0, [sp]
 801bb50:	463a      	mov	r2, r7
 801bb52:	a807      	add	r0, sp, #28
 801bb54:	4631      	mov	r1, r6
 801bb56:	f004 f8cf 	bl	801fcf8 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801bb5a:	a807      	add	r0, sp, #28
 801bb5c:	f004 fc88 	bl	8020470 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801bb60:	280a      	cmp	r0, #10
 801bb62:	d103      	bne.n	801bb6c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xa4>
 801bb64:	6823      	ldr	r3, [r4, #0]
 801bb66:	4620      	mov	r0, r4
 801bb68:	695b      	ldr	r3, [r3, #20]
 801bb6a:	e7c6      	b.n	801bafa <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x32>
 801bb6c:	a807      	add	r0, sp, #28
 801bb6e:	f004 fc7f 	bl	8020470 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801bb72:	2800      	cmp	r0, #0
 801bb74:	d1f4      	bne.n	801bb60 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x98>
 801bb76:	ad04      	add	r5, sp, #16
 801bb78:	4621      	mov	r1, r4
 801bb7a:	4628      	mov	r0, r5
 801bb7c:	f7ff fbee 	bl	801b35c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 801bb80:	e895 0003 	ldmia.w	r5, {r0, r1}
 801bb84:	6822      	ldr	r2, [r4, #0]
 801bb86:	ab02      	add	r3, sp, #8
 801bb88:	e883 0003 	stmia.w	r3, {r0, r1}
 801bb8c:	6912      	ldr	r2, [r2, #16]
 801bb8e:	4619      	mov	r1, r3
 801bb90:	4620      	mov	r0, r4
 801bb92:	4790      	blx	r2
 801bb94:	e7b2      	b.n	801bafc <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801bb96:	bf00      	nop
 801bb98:	2000f1c0 	.word	0x2000f1c0
 801bb9c:	2000f1bc 	.word	0x2000f1bc
 801bba0:	2000f1c4 	.word	0x2000f1c4
 801bba4:	2000f1c8 	.word	0x2000f1c8

0801bba8 <_ZN8touchgfx7OutlineD1Ev>:
 801bba8:	4770      	bx	lr

0801bbaa <_ZN8touchgfx7OutlineD0Ev>:
 801bbaa:	b510      	push	{r4, lr}
 801bbac:	2130      	movs	r1, #48	; 0x30
 801bbae:	4604      	mov	r4, r0
 801bbb0:	f011 fe5e 	bl	802d870 <_ZdlPvj>
 801bbb4:	4620      	mov	r0, r4
 801bbb6:	bd10      	pop	{r4, pc}

0801bbb8 <_ZN8touchgfx7Outline5resetEv>:
 801bbb8:	b510      	push	{r4, lr}
 801bbba:	4604      	mov	r4, r0
 801bbbc:	f000 fe8c 	bl	801c8d8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801bbc0:	60e0      	str	r0, [r4, #12]
 801bbc2:	f000 fe8f 	bl	801c8e4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801bbc6:	68e3      	ldr	r3, [r4, #12]
 801bbc8:	6123      	str	r3, [r4, #16]
 801bbca:	08c0      	lsrs	r0, r0, #3
 801bbcc:	2200      	movs	r2, #0
 801bbce:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801bbd2:	3801      	subs	r0, #1
 801bbd4:	6060      	str	r0, [r4, #4]
 801bbd6:	60a2      	str	r2, [r4, #8]
 801bbd8:	8019      	strh	r1, [r3, #0]
 801bbda:	8059      	strh	r1, [r3, #2]
 801bbdc:	809a      	strh	r2, [r3, #4]
 801bbde:	80da      	strh	r2, [r3, #6]
 801bbe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bbe2:	f023 0301 	bic.w	r3, r3, #1
 801bbe6:	f043 0302 	orr.w	r3, r3, #2
 801bbea:	6263      	str	r3, [r4, #36]	; 0x24
 801bbec:	bd10      	pop	{r4, pc}
	...

0801bbf0 <_ZN8touchgfx7OutlineC1Ev>:
 801bbf0:	b510      	push	{r4, lr}
 801bbf2:	4b0a      	ldr	r3, [pc, #40]	; (801bc1c <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801bbf4:	6003      	str	r3, [r0, #0]
 801bbf6:	2300      	movs	r3, #0
 801bbf8:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801bbfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801bc00:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801bc04:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801bc08:	6243      	str	r3, [r0, #36]	; 0x24
 801bc0a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801bc0e:	4604      	mov	r4, r0
 801bc10:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 801bc14:	f7ff ffd0 	bl	801bbb8 <_ZN8touchgfx7Outline5resetEv>
 801bc18:	4620      	mov	r0, r4
 801bc1a:	bd10      	pop	{r4, pc}
 801bc1c:	080309e0 	.word	0x080309e0

0801bc20 <_ZN8touchgfx7Outline10renderLineEiiii>:
 801bc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc24:	b093      	sub	sp, #76	; 0x4c
 801bc26:	1156      	asrs	r6, r2, #5
 801bc28:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801bc2a:	9305      	str	r3, [sp, #20]
 801bc2c:	f004 051f 	and.w	r5, r4, #31
 801bc30:	1153      	asrs	r3, r2, #5
 801bc32:	9504      	str	r5, [sp, #16]
 801bc34:	1165      	asrs	r5, r4, #5
 801bc36:	9303      	str	r3, [sp, #12]
 801bc38:	42ae      	cmp	r6, r5
 801bc3a:	ea4f 1364 	mov.w	r3, r4, asr #5
 801bc3e:	9306      	str	r3, [sp, #24]
 801bc40:	f002 031f 	and.w	r3, r2, #31
 801bc44:	f040 80f8 	bne.w	801be38 <_ZN8touchgfx7Outline10renderLineEiiii+0x218>
 801bc48:	9c04      	ldr	r4, [sp, #16]
 801bc4a:	9a05      	ldr	r2, [sp, #20]
 801bc4c:	42a3      	cmp	r3, r4
 801bc4e:	ea4f 1e62 	mov.w	lr, r2, asr #5
 801bc52:	6902      	ldr	r2, [r0, #16]
 801bc54:	d125      	bne.n	801bca2 <_ZN8touchgfx7Outline10renderLineEiiii+0x82>
 801bc56:	f9b2 3000 	ldrsh.w	r3, [r2]
 801bc5a:	459e      	cmp	lr, r3
 801bc5c:	d103      	bne.n	801bc66 <_ZN8touchgfx7Outline10renderLineEiiii+0x46>
 801bc5e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801bc62:	429e      	cmp	r6, r3
 801bc64:	d035      	beq.n	801bcd2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801bc66:	88d1      	ldrh	r1, [r2, #6]
 801bc68:	8893      	ldrh	r3, [r2, #4]
 801bc6a:	430b      	orrs	r3, r1
 801bc6c:	d010      	beq.n	801bc90 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 801bc6e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801bc72:	2b00      	cmp	r3, #0
 801bc74:	db0c      	blt.n	801bc90 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 801bc76:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801bc78:	428b      	cmp	r3, r1
 801bc7a:	da09      	bge.n	801bc90 <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 801bc7c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801bc80:	428b      	cmp	r3, r1
 801bc82:	bf38      	it	cc
 801bc84:	3208      	addcc	r2, #8
 801bc86:	f103 0301 	add.w	r3, r3, #1
 801bc8a:	bf38      	it	cc
 801bc8c:	6102      	strcc	r2, [r0, #16]
 801bc8e:	6083      	str	r3, [r0, #8]
 801bc90:	6903      	ldr	r3, [r0, #16]
 801bc92:	9a03      	ldr	r2, [sp, #12]
 801bc94:	f8a3 e000 	strh.w	lr, [r3]
 801bc98:	805a      	strh	r2, [r3, #2]
 801bc9a:	2200      	movs	r2, #0
 801bc9c:	809a      	strh	r2, [r3, #4]
 801bc9e:	80da      	strh	r2, [r3, #6]
 801bca0:	e017      	b.n	801bcd2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801bca2:	9c05      	ldr	r4, [sp, #20]
 801bca4:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 801bca8:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801bcac:	f004 041f 	and.w	r4, r4, #31
 801bcb0:	114e      	asrs	r6, r1, #5
 801bcb2:	9402      	str	r4, [sp, #8]
 801bcb4:	9c04      	ldr	r4, [sp, #16]
 801bcb6:	4576      	cmp	r6, lr
 801bcb8:	f001 0c1f 	and.w	ip, r1, #31
 801bcbc:	eba4 0403 	sub.w	r4, r4, r3
 801bcc0:	d10a      	bne.n	801bcd8 <_ZN8touchgfx7Outline10renderLineEiiii+0xb8>
 801bcc2:	9b02      	ldr	r3, [sp, #8]
 801bcc4:	449c      	add	ip, r3
 801bcc6:	44a0      	add	r8, r4
 801bcc8:	fb04 a40c 	mla	r4, r4, ip, sl
 801bccc:	f8a2 8004 	strh.w	r8, [r2, #4]
 801bcd0:	80d4      	strh	r4, [r2, #6]
 801bcd2:	b013      	add	sp, #76	; 0x4c
 801bcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcd8:	9d05      	ldr	r5, [sp, #20]
 801bcda:	1a69      	subs	r1, r5, r1
 801bcdc:	bf5b      	ittet	pl
 801bcde:	f1cc 0520 	rsbpl	r5, ip, #32
 801bce2:	436c      	mulpl	r4, r5
 801bce4:	2500      	movmi	r5, #0
 801bce6:	2520      	movpl	r5, #32
 801bce8:	bf44      	itt	mi
 801bcea:	fb04 f40c 	mulmi.w	r4, r4, ip
 801bcee:	4249      	negmi	r1, r1
 801bcf0:	9501      	str	r5, [sp, #4]
 801bcf2:	9f01      	ldr	r7, [sp, #4]
 801bcf4:	fb94 f5f1 	sdiv	r5, r4, r1
 801bcf8:	fb01 4415 	mls	r4, r1, r5, r4
 801bcfc:	bf54      	ite	pl
 801bcfe:	f04f 0901 	movpl.w	r9, #1
 801bd02:	f04f 39ff 	movmi.w	r9, #4294967295
 801bd06:	2c00      	cmp	r4, #0
 801bd08:	bfb8      	it	lt
 801bd0a:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801bd0e:	44bc      	add	ip, r7
 801bd10:	44a8      	add	r8, r5
 801bd12:	fb05 ac0c 	mla	ip, r5, ip, sl
 801bd16:	f8a2 8004 	strh.w	r8, [r2, #4]
 801bd1a:	f8a2 c006 	strh.w	ip, [r2, #6]
 801bd1e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801bd22:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801bd26:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801bd2a:	bfb8      	it	lt
 801bd2c:	1864      	addlt	r4, r4, r1
 801bd2e:	ea58 0202 	orrs.w	r2, r8, r2
 801bd32:	444e      	add	r6, r9
 801bd34:	d011      	beq.n	801bd5a <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 801bd36:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801bd3a:	f1b8 0f00 	cmp.w	r8, #0
 801bd3e:	db0c      	blt.n	801bd5a <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 801bd40:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801bd42:	4590      	cmp	r8, r2
 801bd44:	da09      	bge.n	801bd5a <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 801bd46:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 801bd4a:	4590      	cmp	r8, r2
 801bd4c:	bf3c      	itt	cc
 801bd4e:	f10c 0208 	addcc.w	r2, ip, #8
 801bd52:	6102      	strcc	r2, [r0, #16]
 801bd54:	f108 0201 	add.w	r2, r8, #1
 801bd58:	6082      	str	r2, [r0, #8]
 801bd5a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801bd5e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801bd62:	f8ac 6000 	strh.w	r6, [ip]
 801bd66:	2700      	movs	r7, #0
 801bd68:	45b6      	cmp	lr, r6
 801bd6a:	f8ac 2002 	strh.w	r2, [ip, #2]
 801bd6e:	f8ac 7004 	strh.w	r7, [ip, #4]
 801bd72:	f8ac 7006 	strh.w	r7, [ip, #6]
 801bd76:	442b      	add	r3, r5
 801bd78:	d04d      	beq.n	801be16 <_ZN8touchgfx7Outline10renderLineEiiii+0x1f6>
 801bd7a:	9f04      	ldr	r7, [sp, #16]
 801bd7c:	1aff      	subs	r7, r7, r3
 801bd7e:	443d      	add	r5, r7
 801bd80:	016d      	lsls	r5, r5, #5
 801bd82:	fb95 f8f1 	sdiv	r8, r5, r1
 801bd86:	fb01 5518 	mls	r5, r1, r8, r5
 801bd8a:	2d00      	cmp	r5, #0
 801bd8c:	bfb8      	it	lt
 801bd8e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801bd92:	f108 0701 	add.w	r7, r8, #1
 801bd96:	bfb8      	it	lt
 801bd98:	186d      	addlt	r5, r5, r1
 801bd9a:	1a64      	subs	r4, r4, r1
 801bd9c:	9703      	str	r7, [sp, #12]
 801bd9e:	f04f 0a00 	mov.w	sl, #0
 801bda2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801bda6:	1964      	adds	r4, r4, r5
 801bda8:	bf58      	it	pl
 801bdaa:	9f03      	ldrpl	r7, [sp, #12]
 801bdac:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801bdb0:	bf48      	it	mi
 801bdb2:	4647      	movmi	r7, r8
 801bdb4:	44bb      	add	fp, r7
 801bdb6:	f8ac b004 	strh.w	fp, [ip, #4]
 801bdba:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801bdbe:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801bdc2:	f8ac b006 	strh.w	fp, [ip, #6]
 801bdc6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801bdca:	443b      	add	r3, r7
 801bdcc:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801bdd0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801bdd4:	bf58      	it	pl
 801bdd6:	1a64      	subpl	r4, r4, r1
 801bdd8:	ea5b 0707 	orrs.w	r7, fp, r7
 801bddc:	444e      	add	r6, r9
 801bdde:	d011      	beq.n	801be04 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 801bde0:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801bde4:	f1bb 0f00 	cmp.w	fp, #0
 801bde8:	db0c      	blt.n	801be04 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 801bdea:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801bdec:	45bb      	cmp	fp, r7
 801bdee:	da09      	bge.n	801be04 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 801bdf0:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801bdf4:	45bb      	cmp	fp, r7
 801bdf6:	bf3c      	itt	cc
 801bdf8:	f10c 0708 	addcc.w	r7, ip, #8
 801bdfc:	6107      	strcc	r7, [r0, #16]
 801bdfe:	f10b 0701 	add.w	r7, fp, #1
 801be02:	6087      	str	r7, [r0, #8]
 801be04:	6907      	ldr	r7, [r0, #16]
 801be06:	45b6      	cmp	lr, r6
 801be08:	803e      	strh	r6, [r7, #0]
 801be0a:	807a      	strh	r2, [r7, #2]
 801be0c:	f8a7 a004 	strh.w	sl, [r7, #4]
 801be10:	f8a7 a006 	strh.w	sl, [r7, #6]
 801be14:	d1c5      	bne.n	801bda2 <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 801be16:	9a04      	ldr	r2, [sp, #16]
 801be18:	1ad3      	subs	r3, r2, r3
 801be1a:	6902      	ldr	r2, [r0, #16]
 801be1c:	8891      	ldrh	r1, [r2, #4]
 801be1e:	88d6      	ldrh	r6, [r2, #6]
 801be20:	4419      	add	r1, r3
 801be22:	8091      	strh	r1, [r2, #4]
 801be24:	9902      	ldr	r1, [sp, #8]
 801be26:	f101 0c20 	add.w	ip, r1, #32
 801be2a:	9901      	ldr	r1, [sp, #4]
 801be2c:	ebac 0c01 	sub.w	ip, ip, r1
 801be30:	fb03 630c 	mla	r3, r3, ip, r6
 801be34:	80d3      	strh	r3, [r2, #6]
 801be36:	e74c      	b.n	801bcd2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801be38:	9d05      	ldr	r5, [sp, #20]
 801be3a:	1aa2      	subs	r2, r4, r2
 801be3c:	eba5 0501 	sub.w	r5, r5, r1
 801be40:	9508      	str	r5, [sp, #32]
 801be42:	9202      	str	r2, [sp, #8]
 801be44:	f140 8128 	bpl.w	801c098 <_ZN8touchgfx7Outline10renderLineEiiii+0x478>
 801be48:	9a03      	ldr	r2, [sp, #12]
 801be4a:	2a00      	cmp	r2, #0
 801be4c:	f6ff af41 	blt.w	801bcd2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801be50:	9a02      	ldr	r2, [sp, #8]
 801be52:	4252      	negs	r2, r2
 801be54:	9202      	str	r2, [sp, #8]
 801be56:	9a06      	ldr	r2, [sp, #24]
 801be58:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801be5c:	f04f 34ff 	mov.w	r4, #4294967295
 801be60:	9206      	str	r2, [sp, #24]
 801be62:	462a      	mov	r2, r5
 801be64:	940b      	str	r4, [sp, #44]	; 0x2c
 801be66:	435a      	muls	r2, r3
 801be68:	2400      	movs	r4, #0
 801be6a:	9d02      	ldr	r5, [sp, #8]
 801be6c:	9401      	str	r4, [sp, #4]
 801be6e:	9c02      	ldr	r4, [sp, #8]
 801be70:	fb92 f4f4 	sdiv	r4, r2, r4
 801be74:	fb05 2214 	mls	r2, r5, r4, r2
 801be78:	2a00      	cmp	r2, #0
 801be7a:	9207      	str	r2, [sp, #28]
 801be7c:	bfbc      	itt	lt
 801be7e:	1952      	addlt	r2, r2, r5
 801be80:	9207      	strlt	r2, [sp, #28]
 801be82:	9a01      	ldr	r2, [sp, #4]
 801be84:	6905      	ldr	r5, [r0, #16]
 801be86:	bfb8      	it	lt
 801be88:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801be8c:	eb04 0901 	add.w	r9, r4, r1
 801be90:	429a      	cmp	r2, r3
 801be92:	ea4f 1669 	mov.w	r6, r9, asr #5
 801be96:	f040 8112 	bne.w	801c0be <_ZN8touchgfx7Outline10renderLineEiiii+0x49e>
 801be9a:	f9b5 3000 	ldrsh.w	r3, [r5]
 801be9e:	429e      	cmp	r6, r3
 801bea0:	d104      	bne.n	801beac <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 801bea2:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801bea6:	9a03      	ldr	r2, [sp, #12]
 801bea8:	429a      	cmp	r2, r3
 801beaa:	d01b      	beq.n	801bee4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 801beac:	88ea      	ldrh	r2, [r5, #6]
 801beae:	88ab      	ldrh	r3, [r5, #4]
 801beb0:	4313      	orrs	r3, r2
 801beb2:	d010      	beq.n	801bed6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 801beb4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801beb8:	2a00      	cmp	r2, #0
 801beba:	db0c      	blt.n	801bed6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 801bebc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801bebe:	429a      	cmp	r2, r3
 801bec0:	da09      	bge.n	801bed6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 801bec2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801bec6:	429a      	cmp	r2, r3
 801bec8:	bf38      	it	cc
 801beca:	3508      	addcc	r5, #8
 801becc:	f102 0201 	add.w	r2, r2, #1
 801bed0:	bf38      	it	cc
 801bed2:	6105      	strcc	r5, [r0, #16]
 801bed4:	6082      	str	r2, [r0, #8]
 801bed6:	6903      	ldr	r3, [r0, #16]
 801bed8:	9a03      	ldr	r2, [sp, #12]
 801beda:	805a      	strh	r2, [r3, #2]
 801bedc:	2200      	movs	r2, #0
 801bede:	801e      	strh	r6, [r3, #0]
 801bee0:	809a      	strh	r2, [r3, #4]
 801bee2:	80da      	strh	r2, [r3, #6]
 801bee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bee6:	9a03      	ldr	r2, [sp, #12]
 801bee8:	6901      	ldr	r1, [r0, #16]
 801beea:	441a      	add	r2, r3
 801beec:	f9b1 3000 	ldrsh.w	r3, [r1]
 801bef0:	42b3      	cmp	r3, r6
 801bef2:	d103      	bne.n	801befc <_ZN8touchgfx7Outline10renderLineEiiii+0x2dc>
 801bef4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801bef8:	429a      	cmp	r2, r3
 801befa:	d01a      	beq.n	801bf32 <_ZN8touchgfx7Outline10renderLineEiiii+0x312>
 801befc:	88cc      	ldrh	r4, [r1, #6]
 801befe:	888b      	ldrh	r3, [r1, #4]
 801bf00:	4323      	orrs	r3, r4
 801bf02:	d010      	beq.n	801bf26 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 801bf04:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801bf08:	2c00      	cmp	r4, #0
 801bf0a:	db0c      	blt.n	801bf26 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 801bf0c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801bf0e:	429c      	cmp	r4, r3
 801bf10:	da09      	bge.n	801bf26 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 801bf12:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801bf16:	429c      	cmp	r4, r3
 801bf18:	bf38      	it	cc
 801bf1a:	3108      	addcc	r1, #8
 801bf1c:	f104 0401 	add.w	r4, r4, #1
 801bf20:	bf38      	it	cc
 801bf22:	6101      	strcc	r1, [r0, #16]
 801bf24:	6084      	str	r4, [r0, #8]
 801bf26:	6903      	ldr	r3, [r0, #16]
 801bf28:	2100      	movs	r1, #0
 801bf2a:	801e      	strh	r6, [r3, #0]
 801bf2c:	805a      	strh	r2, [r3, #2]
 801bf2e:	8099      	strh	r1, [r3, #4]
 801bf30:	80d9      	strh	r1, [r3, #6]
 801bf32:	9b06      	ldr	r3, [sp, #24]
 801bf34:	4293      	cmp	r3, r2
 801bf36:	f000 8082 	beq.w	801c03e <_ZN8touchgfx7Outline10renderLineEiiii+0x41e>
 801bf3a:	9b08      	ldr	r3, [sp, #32]
 801bf3c:	9c02      	ldr	r4, [sp, #8]
 801bf3e:	9902      	ldr	r1, [sp, #8]
 801bf40:	015b      	lsls	r3, r3, #5
 801bf42:	fb93 f1f1 	sdiv	r1, r3, r1
 801bf46:	fb04 3311 	mls	r3, r4, r1, r3
 801bf4a:	2b00      	cmp	r3, #0
 801bf4c:	9103      	str	r1, [sp, #12]
 801bf4e:	9308      	str	r3, [sp, #32]
 801bf50:	da04      	bge.n	801bf5c <_ZN8touchgfx7Outline10renderLineEiiii+0x33c>
 801bf52:	1e4b      	subs	r3, r1, #1
 801bf54:	9303      	str	r3, [sp, #12]
 801bf56:	9b08      	ldr	r3, [sp, #32]
 801bf58:	4423      	add	r3, r4
 801bf5a:	9308      	str	r3, [sp, #32]
 801bf5c:	9b07      	ldr	r3, [sp, #28]
 801bf5e:	9902      	ldr	r1, [sp, #8]
 801bf60:	1a5b      	subs	r3, r3, r1
 801bf62:	9307      	str	r3, [sp, #28]
 801bf64:	9b01      	ldr	r3, [sp, #4]
 801bf66:	f1c3 0320 	rsb	r3, r3, #32
 801bf6a:	930e      	str	r3, [sp, #56]	; 0x38
 801bf6c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801bf6e:	9b01      	ldr	r3, [sp, #4]
 801bf70:	1a5b      	subs	r3, r3, r1
 801bf72:	464f      	mov	r7, r9
 801bf74:	930a      	str	r3, [sp, #40]	; 0x28
 801bf76:	2600      	movs	r6, #0
 801bf78:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801bf7c:	185b      	adds	r3, r3, r1
 801bf7e:	bf58      	it	pl
 801bf80:	9902      	ldrpl	r1, [sp, #8]
 801bf82:	9307      	str	r3, [sp, #28]
 801bf84:	bf5d      	ittte	pl
 801bf86:	1a5b      	subpl	r3, r3, r1
 801bf88:	9307      	strpl	r3, [sp, #28]
 801bf8a:	9b03      	ldrpl	r3, [sp, #12]
 801bf8c:	9903      	ldrmi	r1, [sp, #12]
 801bf8e:	bf58      	it	pl
 801bf90:	1c59      	addpl	r1, r3, #1
 801bf92:	4489      	add	r9, r1
 801bf94:	2a00      	cmp	r2, #0
 801bf96:	ea4f 1a69 	mov.w	sl, r9, asr #5
 801bf9a:	db2e      	blt.n	801bffa <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 801bf9c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801bf9e:	4293      	cmp	r3, r2
 801bfa0:	dd2b      	ble.n	801bffa <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 801bfa2:	9c01      	ldr	r4, [sp, #4]
 801bfa4:	6905      	ldr	r5, [r0, #16]
 801bfa6:	46a0      	mov	r8, r4
 801bfa8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801bfaa:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 801bfae:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 801bfb2:	45a0      	cmp	r8, r4
 801bfb4:	f040 814f 	bne.w	801c256 <_ZN8touchgfx7Outline10renderLineEiiii+0x636>
 801bfb8:	f9b5 1000 	ldrsh.w	r1, [r5]
 801bfbc:	4551      	cmp	r1, sl
 801bfbe:	d103      	bne.n	801bfc8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3a8>
 801bfc0:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801bfc4:	4291      	cmp	r1, r2
 801bfc6:	d018      	beq.n	801bffa <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 801bfc8:	ea5c 010e 	orrs.w	r1, ip, lr
 801bfcc:	d00f      	beq.n	801bfee <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 801bfce:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801bfd2:	2900      	cmp	r1, #0
 801bfd4:	db0b      	blt.n	801bfee <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 801bfd6:	428b      	cmp	r3, r1
 801bfd8:	dd09      	ble.n	801bfee <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 801bfda:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 801bfde:	4299      	cmp	r1, r3
 801bfe0:	bf38      	it	cc
 801bfe2:	3508      	addcc	r5, #8
 801bfe4:	f101 0101 	add.w	r1, r1, #1
 801bfe8:	bf38      	it	cc
 801bfea:	6105      	strcc	r5, [r0, #16]
 801bfec:	6081      	str	r1, [r0, #8]
 801bfee:	6903      	ldr	r3, [r0, #16]
 801bff0:	f8a3 a000 	strh.w	sl, [r3]
 801bff4:	805a      	strh	r2, [r3, #2]
 801bff6:	809e      	strh	r6, [r3, #4]
 801bff8:	80de      	strh	r6, [r3, #6]
 801bffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bffc:	6901      	ldr	r1, [r0, #16]
 801bffe:	441a      	add	r2, r3
 801c000:	88cc      	ldrh	r4, [r1, #6]
 801c002:	888b      	ldrh	r3, [r1, #4]
 801c004:	4323      	orrs	r3, r4
 801c006:	d010      	beq.n	801c02a <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 801c008:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801c00c:	2c00      	cmp	r4, #0
 801c00e:	db0c      	blt.n	801c02a <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 801c010:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801c012:	429c      	cmp	r4, r3
 801c014:	da09      	bge.n	801c02a <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 801c016:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801c01a:	429c      	cmp	r4, r3
 801c01c:	bf38      	it	cc
 801c01e:	3108      	addcc	r1, #8
 801c020:	f104 0401 	add.w	r4, r4, #1
 801c024:	bf38      	it	cc
 801c026:	6101      	strcc	r1, [r0, #16]
 801c028:	6084      	str	r4, [r0, #8]
 801c02a:	6903      	ldr	r3, [r0, #16]
 801c02c:	f8a3 a000 	strh.w	sl, [r3]
 801c030:	805a      	strh	r2, [r3, #2]
 801c032:	809e      	strh	r6, [r3, #4]
 801c034:	80de      	strh	r6, [r3, #6]
 801c036:	9b06      	ldr	r3, [sp, #24]
 801c038:	4293      	cmp	r3, r2
 801c03a:	464f      	mov	r7, r9
 801c03c:	d19c      	bne.n	801bf78 <_ZN8touchgfx7Outline10renderLineEiiii+0x358>
 801c03e:	9b01      	ldr	r3, [sp, #4]
 801c040:	6907      	ldr	r7, [r0, #16]
 801c042:	f1c3 0620 	rsb	r6, r3, #32
 801c046:	9b05      	ldr	r3, [sp, #20]
 801c048:	ea4f 1e63 	mov.w	lr, r3, asr #5
 801c04c:	9b04      	ldr	r3, [sp, #16]
 801c04e:	429e      	cmp	r6, r3
 801c050:	f040 81cc 	bne.w	801c3ec <_ZN8touchgfx7Outline10renderLineEiiii+0x7cc>
 801c054:	f9b7 3000 	ldrsh.w	r3, [r7]
 801c058:	459e      	cmp	lr, r3
 801c05a:	d104      	bne.n	801c066 <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 801c05c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c060:	429a      	cmp	r2, r3
 801c062:	f43f ae36 	beq.w	801bcd2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801c066:	88f9      	ldrh	r1, [r7, #6]
 801c068:	88bb      	ldrh	r3, [r7, #4]
 801c06a:	430b      	orrs	r3, r1
 801c06c:	d010      	beq.n	801c090 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 801c06e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c072:	2b00      	cmp	r3, #0
 801c074:	db0c      	blt.n	801c090 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 801c076:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801c078:	428b      	cmp	r3, r1
 801c07a:	da09      	bge.n	801c090 <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 801c07c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 801c080:	428b      	cmp	r3, r1
 801c082:	bf38      	it	cc
 801c084:	3708      	addcc	r7, #8
 801c086:	f103 0301 	add.w	r3, r3, #1
 801c08a:	bf38      	it	cc
 801c08c:	6107      	strcc	r7, [r0, #16]
 801c08e:	6083      	str	r3, [r0, #8]
 801c090:	6903      	ldr	r3, [r0, #16]
 801c092:	f8a3 e000 	strh.w	lr, [r3]
 801c096:	e5ff      	b.n	801bc98 <_ZN8touchgfx7Outline10renderLineEiiii+0x78>
 801c098:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801c09a:	9c03      	ldr	r4, [sp, #12]
 801c09c:	42a2      	cmp	r2, r4
 801c09e:	f6ff ae18 	blt.w	801bcd2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801c0a2:	9c06      	ldr	r4, [sp, #24]
 801c0a4:	42a2      	cmp	r2, r4
 801c0a6:	bfb8      	it	lt
 801c0a8:	3201      	addlt	r2, #1
 801c0aa:	9c08      	ldr	r4, [sp, #32]
 801c0ac:	bfb8      	it	lt
 801c0ae:	9206      	strlt	r2, [sp, #24]
 801c0b0:	f1c3 0220 	rsb	r2, r3, #32
 801c0b4:	4362      	muls	r2, r4
 801c0b6:	2401      	movs	r4, #1
 801c0b8:	940b      	str	r4, [sp, #44]	; 0x2c
 801c0ba:	2420      	movs	r4, #32
 801c0bc:	e6d5      	b.n	801be6a <_ZN8touchgfx7Outline10renderLineEiiii+0x24a>
 801c0be:	f009 021f 	and.w	r2, r9, #31
 801c0c2:	ea4f 1861 	mov.w	r8, r1, asr #5
 801c0c6:	920c      	str	r2, [sp, #48]	; 0x30
 801c0c8:	9a01      	ldr	r2, [sp, #4]
 801c0ca:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 801c0ce:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 801c0d2:	45b0      	cmp	r8, r6
 801c0d4:	f001 011f 	and.w	r1, r1, #31
 801c0d8:	eba2 0203 	sub.w	r2, r2, r3
 801c0dc:	d108      	bne.n	801c0f0 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d0>
 801c0de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c0e0:	4419      	add	r1, r3
 801c0e2:	4496      	add	lr, r2
 801c0e4:	fb02 a101 	mla	r1, r2, r1, sl
 801c0e8:	f8a5 e004 	strh.w	lr, [r5, #4]
 801c0ec:	80e9      	strh	r1, [r5, #6]
 801c0ee:	e6f9      	b.n	801bee4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 801c0f0:	2c00      	cmp	r4, #0
 801c0f2:	f2c0 80a9 	blt.w	801c248 <_ZN8touchgfx7Outline10renderLineEiiii+0x628>
 801c0f6:	2701      	movs	r7, #1
 801c0f8:	f1c1 0c20 	rsb	ip, r1, #32
 801c0fc:	970a      	str	r7, [sp, #40]	; 0x28
 801c0fe:	fb02 f20c 	mul.w	r2, r2, ip
 801c102:	2720      	movs	r7, #32
 801c104:	9709      	str	r7, [sp, #36]	; 0x24
 801c106:	fb92 fcf4 	sdiv	ip, r2, r4
 801c10a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c10c:	fb04 221c 	mls	r2, r4, ip, r2
 801c110:	2a00      	cmp	r2, #0
 801c112:	bfb8      	it	lt
 801c114:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 801c118:	4439      	add	r1, r7
 801c11a:	fb0c a101 	mla	r1, ip, r1, sl
 801c11e:	80e9      	strh	r1, [r5, #6]
 801c120:	44e6      	add	lr, ip
 801c122:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c124:	f8a5 e004 	strh.w	lr, [r5, #4]
 801c128:	eb08 0501 	add.w	r5, r8, r1
 801c12c:	6901      	ldr	r1, [r0, #16]
 801c12e:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 801c132:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 801c136:	bfb8      	it	lt
 801c138:	1912      	addlt	r2, r2, r4
 801c13a:	ea58 070e 	orrs.w	r7, r8, lr
 801c13e:	d010      	beq.n	801c162 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 801c140:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 801c144:	f1be 0f00 	cmp.w	lr, #0
 801c148:	db0b      	blt.n	801c162 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 801c14a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801c14c:	45be      	cmp	lr, r7
 801c14e:	da08      	bge.n	801c162 <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 801c150:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801c154:	45be      	cmp	lr, r7
 801c156:	bf3c      	itt	cc
 801c158:	3108      	addcc	r1, #8
 801c15a:	6101      	strcc	r1, [r0, #16]
 801c15c:	f10e 0101 	add.w	r1, lr, #1
 801c160:	6081      	str	r1, [r0, #8]
 801c162:	6901      	ldr	r1, [r0, #16]
 801c164:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801c168:	800d      	strh	r5, [r1, #0]
 801c16a:	f04f 0e00 	mov.w	lr, #0
 801c16e:	42ae      	cmp	r6, r5
 801c170:	f8a1 8002 	strh.w	r8, [r1, #2]
 801c174:	f8a1 e004 	strh.w	lr, [r1, #4]
 801c178:	f8a1 e006 	strh.w	lr, [r1, #6]
 801c17c:	4463      	add	r3, ip
 801c17e:	d054      	beq.n	801c22a <_ZN8touchgfx7Outline10renderLineEiiii+0x60a>
 801c180:	9901      	ldr	r1, [sp, #4]
 801c182:	1ac9      	subs	r1, r1, r3
 801c184:	4461      	add	r1, ip
 801c186:	0149      	lsls	r1, r1, #5
 801c188:	fb91 fef4 	sdiv	lr, r1, r4
 801c18c:	fb04 111e 	mls	r1, r4, lr, r1
 801c190:	2900      	cmp	r1, #0
 801c192:	bfb8      	it	lt
 801c194:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 801c198:	f10e 0701 	add.w	r7, lr, #1
 801c19c:	bfb8      	it	lt
 801c19e:	1909      	addlt	r1, r1, r4
 801c1a0:	1b12      	subs	r2, r2, r4
 801c1a2:	970d      	str	r7, [sp, #52]	; 0x34
 801c1a4:	f8d0 a010 	ldr.w	sl, [r0, #16]
 801c1a8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801c1aa:	f8ba b004 	ldrh.w	fp, [sl, #4]
 801c1ae:	1852      	adds	r2, r2, r1
 801c1b0:	bf54      	ite	pl
 801c1b2:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 801c1b6:	46f4      	movmi	ip, lr
 801c1b8:	44e3      	add	fp, ip
 801c1ba:	f8aa b004 	strh.w	fp, [sl, #4]
 801c1be:	f8ba b006 	ldrh.w	fp, [sl, #6]
 801c1c2:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 801c1c6:	f8aa b006 	strh.w	fp, [sl, #6]
 801c1ca:	4463      	add	r3, ip
 801c1cc:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c1d0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801c1d4:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801c1d8:	bf58      	it	pl
 801c1da:	1b12      	subpl	r2, r2, r4
 801c1dc:	443d      	add	r5, r7
 801c1de:	ea5b 070a 	orrs.w	r7, fp, sl
 801c1e2:	d014      	beq.n	801c20e <_ZN8touchgfx7Outline10renderLineEiiii+0x5ee>
 801c1e4:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 801c1e8:	f1ba 0f00 	cmp.w	sl, #0
 801c1ec:	db0f      	blt.n	801c20e <_ZN8touchgfx7Outline10renderLineEiiii+0x5ee>
 801c1ee:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801c1f0:	45ba      	cmp	sl, r7
 801c1f2:	da0c      	bge.n	801c20e <_ZN8touchgfx7Outline10renderLineEiiii+0x5ee>
 801c1f4:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 801c1f8:	45ba      	cmp	sl, r7
 801c1fa:	bf38      	it	cc
 801c1fc:	f10c 0c08 	addcc.w	ip, ip, #8
 801c200:	f10a 0a01 	add.w	sl, sl, #1
 801c204:	bf38      	it	cc
 801c206:	f8c0 c010 	strcc.w	ip, [r0, #16]
 801c20a:	f8c0 a008 	str.w	sl, [r0, #8]
 801c20e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c212:	f04f 0700 	mov.w	r7, #0
 801c216:	42ae      	cmp	r6, r5
 801c218:	f8ac 5000 	strh.w	r5, [ip]
 801c21c:	f8ac 8002 	strh.w	r8, [ip, #2]
 801c220:	f8ac 7004 	strh.w	r7, [ip, #4]
 801c224:	f8ac 7006 	strh.w	r7, [ip, #6]
 801c228:	d1bc      	bne.n	801c1a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x584>
 801c22a:	6904      	ldr	r4, [r0, #16]
 801c22c:	9a01      	ldr	r2, [sp, #4]
 801c22e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c230:	1ad3      	subs	r3, r2, r3
 801c232:	88a2      	ldrh	r2, [r4, #4]
 801c234:	441a      	add	r2, r3
 801c236:	80a2      	strh	r2, [r4, #4]
 801c238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c23a:	3120      	adds	r1, #32
 801c23c:	1a89      	subs	r1, r1, r2
 801c23e:	88e2      	ldrh	r2, [r4, #6]
 801c240:	fb03 2301 	mla	r3, r3, r1, r2
 801c244:	80e3      	strh	r3, [r4, #6]
 801c246:	e64d      	b.n	801bee4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 801c248:	f04f 37ff 	mov.w	r7, #4294967295
 801c24c:	970a      	str	r7, [sp, #40]	; 0x28
 801c24e:	434a      	muls	r2, r1
 801c250:	4264      	negs	r4, r4
 801c252:	2700      	movs	r7, #0
 801c254:	e756      	b.n	801c104 <_ZN8touchgfx7Outline10renderLineEiiii+0x4e4>
 801c256:	ea4f 1867 	mov.w	r8, r7, asr #5
 801c25a:	f009 031f 	and.w	r3, r9, #31
 801c25e:	45d0      	cmp	r8, sl
 801c260:	f007 071f 	and.w	r7, r7, #31
 801c264:	930f      	str	r3, [sp, #60]	; 0x3c
 801c266:	fa1f fc8c 	uxth.w	ip, ip
 801c26a:	fa1f fe8e 	uxth.w	lr, lr
 801c26e:	d10a      	bne.n	801c286 <_ZN8touchgfx7Outline10renderLineEiiii+0x666>
 801c270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c272:	449c      	add	ip, r3
 801c274:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c276:	f8a5 c004 	strh.w	ip, [r5, #4]
 801c27a:	441f      	add	r7, r3
 801c27c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c27e:	fb03 e707 	mla	r7, r3, r7, lr
 801c282:	80ef      	strh	r7, [r5, #6]
 801c284:	e6b9      	b.n	801bffa <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 801c286:	2900      	cmp	r1, #0
 801c288:	f2c0 80a8 	blt.w	801c3dc <_ZN8touchgfx7Outline10renderLineEiiii+0x7bc>
 801c28c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c28e:	f1c7 0320 	rsb	r3, r7, #32
 801c292:	4363      	muls	r3, r4
 801c294:	2401      	movs	r4, #1
 801c296:	940d      	str	r4, [sp, #52]	; 0x34
 801c298:	2420      	movs	r4, #32
 801c29a:	940c      	str	r4, [sp, #48]	; 0x30
 801c29c:	fb93 f4f1 	sdiv	r4, r3, r1
 801c2a0:	fb01 3b14 	mls	fp, r1, r4, r3
 801c2a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c2a6:	f1bb 0f00 	cmp.w	fp, #0
 801c2aa:	bfb8      	it	lt
 801c2ac:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801c2b0:	441f      	add	r7, r3
 801c2b2:	fb04 e707 	mla	r7, r4, r7, lr
 801c2b6:	44a4      	add	ip, r4
 801c2b8:	f8a5 c004 	strh.w	ip, [r5, #4]
 801c2bc:	80ef      	strh	r7, [r5, #6]
 801c2be:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c2c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c2c4:	f8bc e006 	ldrh.w	lr, [ip, #6]
 801c2c8:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801c2cc:	bfb8      	it	lt
 801c2ce:	448b      	addlt	fp, r1
 801c2d0:	eb08 0503 	add.w	r5, r8, r3
 801c2d4:	ea5e 0307 	orrs.w	r3, lr, r7
 801c2d8:	d011      	beq.n	801c2fe <_ZN8touchgfx7Outline10renderLineEiiii+0x6de>
 801c2da:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 801c2de:	f1be 0f00 	cmp.w	lr, #0
 801c2e2:	db0c      	blt.n	801c2fe <_ZN8touchgfx7Outline10renderLineEiiii+0x6de>
 801c2e4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801c2e6:	45be      	cmp	lr, r7
 801c2e8:	da09      	bge.n	801c2fe <_ZN8touchgfx7Outline10renderLineEiiii+0x6de>
 801c2ea:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801c2ee:	45be      	cmp	lr, r7
 801c2f0:	bf3c      	itt	cc
 801c2f2:	f10c 0708 	addcc.w	r7, ip, #8
 801c2f6:	6107      	strcc	r7, [r0, #16]
 801c2f8:	f10e 0701 	add.w	r7, lr, #1
 801c2fc:	6087      	str	r7, [r0, #8]
 801c2fe:	6907      	ldr	r7, [r0, #16]
 801c300:	b213      	sxth	r3, r2
 801c302:	9310      	str	r3, [sp, #64]	; 0x40
 801c304:	807b      	strh	r3, [r7, #2]
 801c306:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c308:	803d      	strh	r5, [r7, #0]
 801c30a:	4555      	cmp	r5, sl
 801c30c:	80be      	strh	r6, [r7, #4]
 801c30e:	80fe      	strh	r6, [r7, #6]
 801c310:	eb04 0c03 	add.w	ip, r4, r3
 801c314:	d051      	beq.n	801c3ba <_ZN8touchgfx7Outline10renderLineEiiii+0x79a>
 801c316:	9b01      	ldr	r3, [sp, #4]
 801c318:	eba3 070c 	sub.w	r7, r3, ip
 801c31c:	443c      	add	r4, r7
 801c31e:	0164      	lsls	r4, r4, #5
 801c320:	fb94 f8f1 	sdiv	r8, r4, r1
 801c324:	fb01 4418 	mls	r4, r1, r8, r4
 801c328:	2c00      	cmp	r4, #0
 801c32a:	bfb8      	it	lt
 801c32c:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801c330:	ebab 0301 	sub.w	r3, fp, r1
 801c334:	f108 0701 	add.w	r7, r8, #1
 801c338:	bfb8      	it	lt
 801c33a:	1864      	addlt	r4, r4, r1
 801c33c:	9309      	str	r3, [sp, #36]	; 0x24
 801c33e:	9711      	str	r7, [sp, #68]	; 0x44
 801c340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c342:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801c346:	191b      	adds	r3, r3, r4
 801c348:	bf58      	it	pl
 801c34a:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 801c34c:	f8be b004 	ldrh.w	fp, [lr, #4]
 801c350:	9309      	str	r3, [sp, #36]	; 0x24
 801c352:	bf48      	it	mi
 801c354:	4647      	movmi	r7, r8
 801c356:	44bb      	add	fp, r7
 801c358:	f8ae b004 	strh.w	fp, [lr, #4]
 801c35c:	f8be b006 	ldrh.w	fp, [lr, #6]
 801c360:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801c364:	f8ae b006 	strh.w	fp, [lr, #6]
 801c368:	f8d0 e010 	ldr.w	lr, [r0, #16]
 801c36c:	44bc      	add	ip, r7
 801c36e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801c370:	f8be b006 	ldrh.w	fp, [lr, #6]
 801c374:	443d      	add	r5, r7
 801c376:	f8be 7004 	ldrh.w	r7, [lr, #4]
 801c37a:	bf5c      	itt	pl
 801c37c:	1a5b      	subpl	r3, r3, r1
 801c37e:	9309      	strpl	r3, [sp, #36]	; 0x24
 801c380:	ea5b 0307 	orrs.w	r3, fp, r7
 801c384:	d011      	beq.n	801c3aa <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 801c386:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801c38a:	f1bb 0f00 	cmp.w	fp, #0
 801c38e:	db0c      	blt.n	801c3aa <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 801c390:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801c392:	45bb      	cmp	fp, r7
 801c394:	da09      	bge.n	801c3aa <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 801c396:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801c39a:	45bb      	cmp	fp, r7
 801c39c:	bf3c      	itt	cc
 801c39e:	f10e 0708 	addcc.w	r7, lr, #8
 801c3a2:	6107      	strcc	r7, [r0, #16]
 801c3a4:	f10b 0701 	add.w	r7, fp, #1
 801c3a8:	6087      	str	r7, [r0, #8]
 801c3aa:	6907      	ldr	r7, [r0, #16]
 801c3ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c3ae:	803d      	strh	r5, [r7, #0]
 801c3b0:	4555      	cmp	r5, sl
 801c3b2:	807b      	strh	r3, [r7, #2]
 801c3b4:	80be      	strh	r6, [r7, #4]
 801c3b6:	80fe      	strh	r6, [r7, #6]
 801c3b8:	d1c2      	bne.n	801c340 <_ZN8touchgfx7Outline10renderLineEiiii+0x720>
 801c3ba:	9b01      	ldr	r3, [sp, #4]
 801c3bc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c3be:	eba3 0c0c 	sub.w	ip, r3, ip
 801c3c2:	6903      	ldr	r3, [r0, #16]
 801c3c4:	8899      	ldrh	r1, [r3, #4]
 801c3c6:	4461      	add	r1, ip
 801c3c8:	8099      	strh	r1, [r3, #4]
 801c3ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c3cc:	3720      	adds	r7, #32
 801c3ce:	1a7f      	subs	r7, r7, r1
 801c3d0:	88d9      	ldrh	r1, [r3, #6]
 801c3d2:	fb0c 1c07 	mla	ip, ip, r7, r1
 801c3d6:	f8a3 c006 	strh.w	ip, [r3, #6]
 801c3da:	e60e      	b.n	801bffa <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 801c3dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c3de:	f04f 34ff 	mov.w	r4, #4294967295
 801c3e2:	940d      	str	r4, [sp, #52]	; 0x34
 801c3e4:	437b      	muls	r3, r7
 801c3e6:	4249      	negs	r1, r1
 801c3e8:	2400      	movs	r4, #0
 801c3ea:	e756      	b.n	801c29a <_ZN8touchgfx7Outline10renderLineEiiii+0x67a>
 801c3ec:	9905      	ldr	r1, [sp, #20]
 801c3ee:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 801c3f2:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 801c3f6:	f001 011f 	and.w	r1, r1, #31
 801c3fa:	ea4f 1b69 	mov.w	fp, r9, asr #5
 801c3fe:	9102      	str	r1, [sp, #8]
 801c400:	9904      	ldr	r1, [sp, #16]
 801c402:	45f3      	cmp	fp, lr
 801c404:	f009 0c1f 	and.w	ip, r9, #31
 801c408:	eba1 0406 	sub.w	r4, r1, r6
 801c40c:	d108      	bne.n	801c420 <_ZN8touchgfx7Outline10renderLineEiiii+0x800>
 801c40e:	9b02      	ldr	r3, [sp, #8]
 801c410:	449c      	add	ip, r3
 801c412:	44a0      	add	r8, r4
 801c414:	fb04 a40c 	mla	r4, r4, ip, sl
 801c418:	f8a7 8004 	strh.w	r8, [r7, #4]
 801c41c:	80fc      	strh	r4, [r7, #6]
 801c41e:	e458      	b.n	801bcd2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801c420:	9905      	ldr	r1, [sp, #20]
 801c422:	ebb1 0109 	subs.w	r1, r1, r9
 801c426:	bf5b      	ittet	pl
 801c428:	f1cc 0520 	rsbpl	r5, ip, #32
 801c42c:	436c      	mulpl	r4, r5
 801c42e:	2500      	movmi	r5, #0
 801c430:	2520      	movpl	r5, #32
 801c432:	bf44      	itt	mi
 801c434:	fb04 f40c 	mulmi.w	r4, r4, ip
 801c438:	4249      	negmi	r1, r1
 801c43a:	9501      	str	r5, [sp, #4]
 801c43c:	9b01      	ldr	r3, [sp, #4]
 801c43e:	fb94 f5f1 	sdiv	r5, r4, r1
 801c442:	fb01 4415 	mls	r4, r1, r5, r4
 801c446:	bf54      	ite	pl
 801c448:	f04f 0901 	movpl.w	r9, #1
 801c44c:	f04f 39ff 	movmi.w	r9, #4294967295
 801c450:	2c00      	cmp	r4, #0
 801c452:	bfb8      	it	lt
 801c454:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801c458:	449c      	add	ip, r3
 801c45a:	44a8      	add	r8, r5
 801c45c:	fb05 ac0c 	mla	ip, r5, ip, sl
 801c460:	f8a7 8004 	strh.w	r8, [r7, #4]
 801c464:	f8a7 c006 	strh.w	ip, [r7, #6]
 801c468:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c46c:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801c470:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801c474:	bfb8      	it	lt
 801c476:	1864      	addlt	r4, r4, r1
 801c478:	ea58 0707 	orrs.w	r7, r8, r7
 801c47c:	eb0b 0309 	add.w	r3, fp, r9
 801c480:	d011      	beq.n	801c4a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 801c482:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 801c486:	f1b8 0f00 	cmp.w	r8, #0
 801c48a:	db0c      	blt.n	801c4a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 801c48c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801c48e:	45b8      	cmp	r8, r7
 801c490:	da09      	bge.n	801c4a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 801c492:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 801c496:	45b8      	cmp	r8, r7
 801c498:	bf3c      	itt	cc
 801c49a:	f10c 0708 	addcc.w	r7, ip, #8
 801c49e:	6107      	strcc	r7, [r0, #16]
 801c4a0:	f108 0701 	add.w	r7, r8, #1
 801c4a4:	6087      	str	r7, [r0, #8]
 801c4a6:	6907      	ldr	r7, [r0, #16]
 801c4a8:	f04f 0c00 	mov.w	ip, #0
 801c4ac:	b212      	sxth	r2, r2
 801c4ae:	459e      	cmp	lr, r3
 801c4b0:	803b      	strh	r3, [r7, #0]
 801c4b2:	807a      	strh	r2, [r7, #2]
 801c4b4:	f8a7 c004 	strh.w	ip, [r7, #4]
 801c4b8:	f8a7 c006 	strh.w	ip, [r7, #6]
 801c4bc:	442e      	add	r6, r5
 801c4be:	d04d      	beq.n	801c55c <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 801c4c0:	9f04      	ldr	r7, [sp, #16]
 801c4c2:	1bbf      	subs	r7, r7, r6
 801c4c4:	443d      	add	r5, r7
 801c4c6:	016d      	lsls	r5, r5, #5
 801c4c8:	fb95 f8f1 	sdiv	r8, r5, r1
 801c4cc:	fb01 5518 	mls	r5, r1, r8, r5
 801c4d0:	4565      	cmp	r5, ip
 801c4d2:	bfb8      	it	lt
 801c4d4:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801c4d8:	f108 0701 	add.w	r7, r8, #1
 801c4dc:	bfb8      	it	lt
 801c4de:	186d      	addlt	r5, r5, r1
 801c4e0:	1a64      	subs	r4, r4, r1
 801c4e2:	9703      	str	r7, [sp, #12]
 801c4e4:	f04f 0a00 	mov.w	sl, #0
 801c4e8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c4ec:	1964      	adds	r4, r4, r5
 801c4ee:	bf58      	it	pl
 801c4f0:	9f03      	ldrpl	r7, [sp, #12]
 801c4f2:	f8bc b004 	ldrh.w	fp, [ip, #4]
 801c4f6:	bf48      	it	mi
 801c4f8:	4647      	movmi	r7, r8
 801c4fa:	44bb      	add	fp, r7
 801c4fc:	f8ac b004 	strh.w	fp, [ip, #4]
 801c500:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801c504:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801c508:	f8ac b006 	strh.w	fp, [ip, #6]
 801c50c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801c510:	443e      	add	r6, r7
 801c512:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801c516:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801c51a:	bf58      	it	pl
 801c51c:	1a64      	subpl	r4, r4, r1
 801c51e:	ea5b 0707 	orrs.w	r7, fp, r7
 801c522:	444b      	add	r3, r9
 801c524:	d011      	beq.n	801c54a <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 801c526:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801c52a:	f1bb 0f00 	cmp.w	fp, #0
 801c52e:	db0c      	blt.n	801c54a <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 801c530:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801c532:	45bb      	cmp	fp, r7
 801c534:	da09      	bge.n	801c54a <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 801c536:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801c53a:	45bb      	cmp	fp, r7
 801c53c:	bf3c      	itt	cc
 801c53e:	f10c 0708 	addcc.w	r7, ip, #8
 801c542:	6107      	strcc	r7, [r0, #16]
 801c544:	f10b 0701 	add.w	r7, fp, #1
 801c548:	6087      	str	r7, [r0, #8]
 801c54a:	6907      	ldr	r7, [r0, #16]
 801c54c:	459e      	cmp	lr, r3
 801c54e:	803b      	strh	r3, [r7, #0]
 801c550:	807a      	strh	r2, [r7, #2]
 801c552:	f8a7 a004 	strh.w	sl, [r7, #4]
 801c556:	f8a7 a006 	strh.w	sl, [r7, #6]
 801c55a:	d1c5      	bne.n	801c4e8 <_ZN8touchgfx7Outline10renderLineEiiii+0x8c8>
 801c55c:	9b04      	ldr	r3, [sp, #16]
 801c55e:	1b9e      	subs	r6, r3, r6
 801c560:	6903      	ldr	r3, [r0, #16]
 801c562:	889a      	ldrh	r2, [r3, #4]
 801c564:	4432      	add	r2, r6
 801c566:	809a      	strh	r2, [r3, #4]
 801c568:	9a02      	ldr	r2, [sp, #8]
 801c56a:	f102 0c20 	add.w	ip, r2, #32
 801c56e:	9a01      	ldr	r2, [sp, #4]
 801c570:	ebac 0c02 	sub.w	ip, ip, r2
 801c574:	88da      	ldrh	r2, [r3, #6]
 801c576:	fb06 260c 	mla	r6, r6, ip, r2
 801c57a:	80de      	strh	r6, [r3, #6]
 801c57c:	f7ff bba9 	b.w	801bcd2 <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>

0801c580 <_ZN8touchgfx7Outline6lineToEii>:
 801c580:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801c582:	079b      	lsls	r3, r3, #30
 801c584:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c586:	460e      	mov	r6, r1
 801c588:	4615      	mov	r5, r2
 801c58a:	d511      	bpl.n	801c5b0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801c58c:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 801c590:	ea86 0701 	eor.w	r7, r6, r1
 801c594:	ea85 0302 	eor.w	r3, r5, r2
 801c598:	433b      	orrs	r3, r7
 801c59a:	d009      	beq.n	801c5b0 <_ZN8touchgfx7Outline6lineToEii+0x30>
 801c59c:	4633      	mov	r3, r6
 801c59e:	9500      	str	r5, [sp, #0]
 801c5a0:	f7ff fb3e 	bl	801bc20 <_ZN8touchgfx7Outline10renderLineEiiii>
 801c5a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801c5a6:	e9c0 6505 	strd	r6, r5, [r0, #20]
 801c5aa:	f043 0301 	orr.w	r3, r3, #1
 801c5ae:	6243      	str	r3, [r0, #36]	; 0x24
 801c5b0:	b003      	add	sp, #12
 801c5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c5b4 <_ZN8touchgfx7Outline6moveToEii>:
 801c5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801c5b8:	4615      	mov	r5, r2
 801c5ba:	079a      	lsls	r2, r3, #30
 801c5bc:	4604      	mov	r4, r0
 801c5be:	460e      	mov	r6, r1
 801c5c0:	d401      	bmi.n	801c5c6 <_ZN8touchgfx7Outline6moveToEii+0x12>
 801c5c2:	f7ff faf9 	bl	801bbb8 <_ZN8touchgfx7Outline5resetEv>
 801c5c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c5c8:	07db      	lsls	r3, r3, #31
 801c5ca:	d504      	bpl.n	801c5d6 <_ZN8touchgfx7Outline6moveToEii+0x22>
 801c5cc:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801c5d0:	4620      	mov	r0, r4
 801c5d2:	f7ff ffd5 	bl	801c580 <_ZN8touchgfx7Outline6lineToEii>
 801c5d6:	6923      	ldr	r3, [r4, #16]
 801c5d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c5dc:	1170      	asrs	r0, r6, #5
 801c5de:	4290      	cmp	r0, r2
 801c5e0:	ea4f 1165 	mov.w	r1, r5, asr #5
 801c5e4:	d103      	bne.n	801c5ee <_ZN8touchgfx7Outline6moveToEii+0x3a>
 801c5e6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801c5ea:	4291      	cmp	r1, r2
 801c5ec:	d01a      	beq.n	801c624 <_ZN8touchgfx7Outline6moveToEii+0x70>
 801c5ee:	88df      	ldrh	r7, [r3, #6]
 801c5f0:	889a      	ldrh	r2, [r3, #4]
 801c5f2:	433a      	orrs	r2, r7
 801c5f4:	d010      	beq.n	801c618 <_ZN8touchgfx7Outline6moveToEii+0x64>
 801c5f6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801c5fa:	2a00      	cmp	r2, #0
 801c5fc:	db0c      	blt.n	801c618 <_ZN8touchgfx7Outline6moveToEii+0x64>
 801c5fe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801c600:	42ba      	cmp	r2, r7
 801c602:	da09      	bge.n	801c618 <_ZN8touchgfx7Outline6moveToEii+0x64>
 801c604:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801c608:	42ba      	cmp	r2, r7
 801c60a:	bf38      	it	cc
 801c60c:	3308      	addcc	r3, #8
 801c60e:	f102 0201 	add.w	r2, r2, #1
 801c612:	bf38      	it	cc
 801c614:	6123      	strcc	r3, [r4, #16]
 801c616:	60a2      	str	r2, [r4, #8]
 801c618:	6923      	ldr	r3, [r4, #16]
 801c61a:	2200      	movs	r2, #0
 801c61c:	8018      	strh	r0, [r3, #0]
 801c61e:	8059      	strh	r1, [r3, #2]
 801c620:	809a      	strh	r2, [r3, #4]
 801c622:	80da      	strh	r2, [r3, #6]
 801c624:	6166      	str	r6, [r4, #20]
 801c626:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801c62a:	6225      	str	r5, [r4, #32]
 801c62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801c62e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 801c62e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c632:	b0d0      	sub	sp, #320	; 0x140
 801c634:	466c      	mov	r4, sp
 801c636:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801c63a:	4627      	mov	r7, r4
 801c63c:	1a0d      	subs	r5, r1, r0
 801c63e:	2d48      	cmp	r5, #72	; 0x48
 801c640:	f100 0308 	add.w	r3, r0, #8
 801c644:	f340 80d5 	ble.w	801c7f2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801c648:	112d      	asrs	r5, r5, #4
 801c64a:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801c64e:	f9b0 9000 	ldrsh.w	r9, [r0]
 801c652:	6816      	ldr	r6, [r2, #0]
 801c654:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 801c658:	6006      	str	r6, [r0, #0]
 801c65a:	6856      	ldr	r6, [r2, #4]
 801c65c:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801c660:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801c664:	6046      	str	r6, [r0, #4]
 801c666:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801c66a:	f8a2 8002 	strh.w	r8, [r2, #2]
 801c66e:	f8a2 e004 	strh.w	lr, [r2, #4]
 801c672:	f8a2 c006 	strh.w	ip, [r2, #6]
 801c676:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801c67a:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 801c67e:	4565      	cmp	r5, ip
 801c680:	f1a1 0208 	sub.w	r2, r1, #8
 801c684:	db06      	blt.n	801c694 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 801c686:	d119      	bne.n	801c6bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801c688:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 801c68c:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801c690:	42ae      	cmp	r6, r5
 801c692:	dd13      	ble.n	801c6bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801c694:	460e      	mov	r6, r1
 801c696:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 801c69a:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801c69e:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 801c6a2:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801c6a6:	601d      	str	r5, [r3, #0]
 801c6a8:	6875      	ldr	r5, [r6, #4]
 801c6aa:	605d      	str	r5, [r3, #4]
 801c6ac:	f821 9c08 	strh.w	r9, [r1, #-8]
 801c6b0:	f821 cc06 	strh.w	ip, [r1, #-6]
 801c6b4:	f821 8c04 	strh.w	r8, [r1, #-4]
 801c6b8:	f821 ec02 	strh.w	lr, [r1, #-2]
 801c6bc:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801c6c0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801c6c4:	42ae      	cmp	r6, r5
 801c6c6:	db06      	blt.n	801c6d6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801c6c8:	d116      	bne.n	801c6f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801c6ca:	f9b0 c000 	ldrsh.w	ip, [r0]
 801c6ce:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801c6d2:	45ac      	cmp	ip, r5
 801c6d4:	da10      	bge.n	801c6f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801c6d6:	681d      	ldr	r5, [r3, #0]
 801c6d8:	f9b0 8000 	ldrsh.w	r8, [r0]
 801c6dc:	6005      	str	r5, [r0, #0]
 801c6de:	685d      	ldr	r5, [r3, #4]
 801c6e0:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801c6e4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801c6e8:	f8a0 8008 	strh.w	r8, [r0, #8]
 801c6ec:	6045      	str	r5, [r0, #4]
 801c6ee:	8146      	strh	r6, [r0, #10]
 801c6f0:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801c6f4:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801c6f8:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801c6fc:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801c700:	4565      	cmp	r5, ip
 801c702:	db06      	blt.n	801c712 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801c704:	d119      	bne.n	801c73a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801c706:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 801c70a:	f9b0 5000 	ldrsh.w	r5, [r0]
 801c70e:	42ae      	cmp	r6, r5
 801c710:	da13      	bge.n	801c73a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801c712:	460e      	mov	r6, r1
 801c714:	f9b0 9000 	ldrsh.w	r9, [r0]
 801c718:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801c71c:	6005      	str	r5, [r0, #0]
 801c71e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801c722:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801c726:	6875      	ldr	r5, [r6, #4]
 801c728:	6045      	str	r5, [r0, #4]
 801c72a:	f821 9c08 	strh.w	r9, [r1, #-8]
 801c72e:	f821 cc06 	strh.w	ip, [r1, #-6]
 801c732:	f821 8c04 	strh.w	r8, [r1, #-4]
 801c736:	f821 ec02 	strh.w	lr, [r1, #-2]
 801c73a:	3308      	adds	r3, #8
 801c73c:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801c740:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801c744:	45e6      	cmp	lr, ip
 801c746:	dbf8      	blt.n	801c73a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801c748:	d105      	bne.n	801c756 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801c74a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c74e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801c752:	42ae      	cmp	r6, r5
 801c754:	dbf1      	blt.n	801c73a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801c756:	4615      	mov	r5, r2
 801c758:	3a08      	subs	r2, #8
 801c75a:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 801c75e:	45b4      	cmp	ip, r6
 801c760:	dbf9      	blt.n	801c756 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801c762:	d105      	bne.n	801c770 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801c764:	f9b0 8000 	ldrsh.w	r8, [r0]
 801c768:	f9b2 6000 	ldrsh.w	r6, [r2]
 801c76c:	45b0      	cmp	r8, r6
 801c76e:	dbf2      	blt.n	801c756 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801c770:	4293      	cmp	r3, r2
 801c772:	f1a5 0608 	sub.w	r6, r5, #8
 801c776:	d816      	bhi.n	801c7a6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801c778:	f8d6 c000 	ldr.w	ip, [r6]
 801c77c:	f9b3 a000 	ldrsh.w	sl, [r3]
 801c780:	f8c3 c000 	str.w	ip, [r3]
 801c784:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801c788:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801c78c:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801c790:	f8c3 c004 	str.w	ip, [r3, #4]
 801c794:	f825 ac08 	strh.w	sl, [r5, #-8]
 801c798:	f825 ec06 	strh.w	lr, [r5, #-6]
 801c79c:	f825 9c04 	strh.w	r9, [r5, #-4]
 801c7a0:	f825 8c02 	strh.w	r8, [r5, #-2]
 801c7a4:	e7c9      	b.n	801c73a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801c7a6:	f8d6 e000 	ldr.w	lr, [r6]
 801c7aa:	f9b0 a000 	ldrsh.w	sl, [r0]
 801c7ae:	f8c0 e000 	str.w	lr, [r0]
 801c7b2:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 801c7b6:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 801c7ba:	f8d6 e004 	ldr.w	lr, [r6, #4]
 801c7be:	f8c0 e004 	str.w	lr, [r0, #4]
 801c7c2:	f825 ac08 	strh.w	sl, [r5, #-8]
 801c7c6:	f825 cc06 	strh.w	ip, [r5, #-6]
 801c7ca:	f825 9c04 	strh.w	r9, [r5, #-4]
 801c7ce:	f825 8c02 	strh.w	r8, [r5, #-2]
 801c7d2:	1acd      	subs	r5, r1, r3
 801c7d4:	1a16      	subs	r6, r2, r0
 801c7d6:	10ed      	asrs	r5, r5, #3
 801c7d8:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 801c7dc:	bfb5      	itete	lt
 801c7de:	e9c4 0200 	strdlt	r0, r2, [r4]
 801c7e2:	e9c4 3100 	strdge	r3, r1, [r4]
 801c7e6:	460a      	movlt	r2, r1
 801c7e8:	4603      	movge	r3, r0
 801c7ea:	3408      	adds	r4, #8
 801c7ec:	4618      	mov	r0, r3
 801c7ee:	4611      	mov	r1, r2
 801c7f0:	e724      	b.n	801c63c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801c7f2:	4299      	cmp	r1, r3
 801c7f4:	d928      	bls.n	801c848 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x21a>
 801c7f6:	f1a3 0210 	sub.w	r2, r3, #16
 801c7fa:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 801c7fe:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 801c802:	45ac      	cmp	ip, r5
 801c804:	db06      	blt.n	801c814 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801c806:	d11d      	bne.n	801c844 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 801c808:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801c80c:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801c810:	42ae      	cmp	r6, r5
 801c812:	da17      	bge.n	801c844 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 801c814:	4615      	mov	r5, r2
 801c816:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 801c81a:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801c81e:	6116      	str	r6, [r2, #16]
 801c820:	686e      	ldr	r6, [r5, #4]
 801c822:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 801c826:	f9b2 e016 	ldrsh.w	lr, [r2, #22]
 801c82a:	f8a2 9008 	strh.w	r9, [r2, #8]
 801c82e:	42a8      	cmp	r0, r5
 801c830:	6156      	str	r6, [r2, #20]
 801c832:	f8a2 c00a 	strh.w	ip, [r2, #10]
 801c836:	f8a2 800c 	strh.w	r8, [r2, #12]
 801c83a:	f8a2 e00e 	strh.w	lr, [r2, #14]
 801c83e:	f1a2 0208 	sub.w	r2, r2, #8
 801c842:	d1da      	bne.n	801c7fa <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 801c844:	3308      	adds	r3, #8
 801c846:	e7d4      	b.n	801c7f2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801c848:	42bc      	cmp	r4, r7
 801c84a:	d903      	bls.n	801c854 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x226>
 801c84c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 801c850:	3c08      	subs	r4, #8
 801c852:	e6f3      	b.n	801c63c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801c854:	b050      	add	sp, #320	; 0x140
 801c856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801c85a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801c85a:	b510      	push	{r4, lr}
 801c85c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801c85e:	07da      	lsls	r2, r3, #31
 801c860:	4604      	mov	r4, r0
 801c862:	d507      	bpl.n	801c874 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 801c864:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801c868:	f7ff fe8a 	bl	801c580 <_ZN8touchgfx7Outline6lineToEii>
 801c86c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801c86e:	f023 0301 	bic.w	r3, r3, #1
 801c872:	6243      	str	r3, [r0, #36]	; 0x24
 801c874:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c876:	079b      	lsls	r3, r3, #30
 801c878:	d521      	bpl.n	801c8be <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801c87a:	6923      	ldr	r3, [r4, #16]
 801c87c:	88d9      	ldrh	r1, [r3, #6]
 801c87e:	889a      	ldrh	r2, [r3, #4]
 801c880:	430a      	orrs	r2, r1
 801c882:	d010      	beq.n	801c8a6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801c884:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801c888:	2a00      	cmp	r2, #0
 801c88a:	db0c      	blt.n	801c8a6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801c88c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801c88e:	428a      	cmp	r2, r1
 801c890:	da09      	bge.n	801c8a6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801c892:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801c896:	4291      	cmp	r1, r2
 801c898:	bf88      	it	hi
 801c89a:	3308      	addhi	r3, #8
 801c89c:	f102 0201 	add.w	r2, r2, #1
 801c8a0:	bf88      	it	hi
 801c8a2:	6123      	strhi	r3, [r4, #16]
 801c8a4:	60a2      	str	r2, [r4, #8]
 801c8a6:	68a1      	ldr	r1, [r4, #8]
 801c8a8:	b129      	cbz	r1, 801c8b6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801c8aa:	6863      	ldr	r3, [r4, #4]
 801c8ac:	4299      	cmp	r1, r3
 801c8ae:	d802      	bhi.n	801c8b6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801c8b0:	68e0      	ldr	r0, [r4, #12]
 801c8b2:	f7ff febc 	bl	801c62e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801c8b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c8b8:	f023 0302 	bic.w	r3, r3, #2
 801c8bc:	6263      	str	r3, [r4, #36]	; 0x24
 801c8be:	68e0      	ldr	r0, [r4, #12]
 801c8c0:	bd10      	pop	{r4, pc}
	...

0801c8c4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 801c8c4:	4b02      	ldr	r3, [pc, #8]	; (801c8d0 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801c8c6:	6018      	str	r0, [r3, #0]
 801c8c8:	4b02      	ldr	r3, [pc, #8]	; (801c8d4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801c8ca:	6019      	str	r1, [r3, #0]
 801c8cc:	4770      	bx	lr
 801c8ce:	bf00      	nop
 801c8d0:	2000f16c 	.word	0x2000f16c
 801c8d4:	2000f170 	.word	0x2000f170

0801c8d8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801c8d8:	4b01      	ldr	r3, [pc, #4]	; (801c8e0 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801c8da:	6818      	ldr	r0, [r3, #0]
 801c8dc:	4770      	bx	lr
 801c8de:	bf00      	nop
 801c8e0:	2000f16c 	.word	0x2000f16c

0801c8e4 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 801c8e4:	4b01      	ldr	r3, [pc, #4]	; (801c8ec <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801c8e6:	6818      	ldr	r0, [r3, #0]
 801c8e8:	4770      	bx	lr
 801c8ea:	bf00      	nop
 801c8ec:	2000f170 	.word	0x2000f170

0801c8f0 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 801c8f0:	b510      	push	{r4, lr}
 801c8f2:	6803      	ldr	r3, [r0, #0]
 801c8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c8f6:	460c      	mov	r4, r1
 801c8f8:	4798      	blx	r3
 801c8fa:	1b03      	subs	r3, r0, r4
 801c8fc:	4258      	negs	r0, r3
 801c8fe:	4158      	adcs	r0, r3
 801c900:	bd10      	pop	{r4, pc}
	...

0801c904 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 801c904:	4b01      	ldr	r3, [pc, #4]	; (801c90c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801c906:	6019      	str	r1, [r3, #0]
 801c908:	4770      	bx	lr
 801c90a:	bf00      	nop
 801c90c:	2000f174 	.word	0x2000f174

0801c910 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801c910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c914:	4696      	mov	lr, r2
 801c916:	4605      	mov	r5, r0
 801c918:	4614      	mov	r4, r2
 801c91a:	460e      	mov	r6, r1
 801c91c:	461f      	mov	r7, r3
 801c91e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c922:	b097      	sub	sp, #92	; 0x5c
 801c924:	f10d 0c1c 	add.w	ip, sp, #28
 801c928:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c92c:	f8de 3000 	ldr.w	r3, [lr]
 801c930:	f8cc 3000 	str.w	r3, [ip]
 801c934:	f104 0e14 	add.w	lr, r4, #20
 801c938:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c93c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801c940:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c944:	f8de 3000 	ldr.w	r3, [lr]
 801c948:	f8cc 3000 	str.w	r3, [ip]
 801c94c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801c950:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c954:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801c958:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c95c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 801c960:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 801c964:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801c968:	f8de 3000 	ldr.w	r3, [lr]
 801c96c:	f8cc 3000 	str.w	r3, [ip]
 801c970:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c972:	682b      	ldr	r3, [r5, #0]
 801c974:	9201      	str	r2, [sp, #4]
 801c976:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801c97a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c97c:	9200      	str	r2, [sp, #0]
 801c97e:	f8cd 8008 	str.w	r8, [sp, #8]
 801c982:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 801c986:	aa07      	add	r2, sp, #28
 801c988:	463b      	mov	r3, r7
 801c98a:	4631      	mov	r1, r6
 801c98c:	4628      	mov	r0, r5
 801c98e:	47d8      	blx	fp
 801c990:	46a6      	mov	lr, r4
 801c992:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c996:	f10d 0c1c 	add.w	ip, sp, #28
 801c99a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c99e:	f8de 3000 	ldr.w	r3, [lr]
 801c9a2:	f8cc 3000 	str.w	r3, [ip]
 801c9a6:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801c9aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c9ae:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801c9b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c9b6:	343c      	adds	r4, #60	; 0x3c
 801c9b8:	f8de 3000 	ldr.w	r3, [lr]
 801c9bc:	f8cc 3000 	str.w	r3, [ip]
 801c9c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801c9c2:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801c9c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c9ca:	6823      	ldr	r3, [r4, #0]
 801c9cc:	f8cc 3000 	str.w	r3, [ip]
 801c9d0:	682b      	ldr	r3, [r5, #0]
 801c9d2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801c9d6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c9d8:	9201      	str	r2, [sp, #4]
 801c9da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c9dc:	9200      	str	r2, [sp, #0]
 801c9de:	f8cd 8008 	str.w	r8, [sp, #8]
 801c9e2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801c9e4:	aa07      	add	r2, sp, #28
 801c9e6:	463b      	mov	r3, r7
 801c9e8:	4631      	mov	r1, r6
 801c9ea:	4628      	mov	r0, r5
 801c9ec:	47a0      	blx	r4
 801c9ee:	b017      	add	sp, #92	; 0x5c
 801c9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c9f4 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801c9f4:	2000      	movs	r0, #0
 801c9f6:	4770      	bx	lr

0801c9f8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 801c9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9fc:	b08d      	sub	sp, #52	; 0x34
 801c9fe:	4688      	mov	r8, r1
 801ca00:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ca02:	f8d3 c000 	ldr.w	ip, [r3]
 801ca06:	680f      	ldr	r7, [r1, #0]
 801ca08:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801ca0c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 801ca10:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801ca14:	edd3 6a07 	vldr	s13, [r3, #28]
 801ca18:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ca1a:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801ca1e:	f9b1 9000 	ldrsh.w	r9, [r1]
 801ca22:	f9ba 1000 	ldrsh.w	r1, [sl]
 801ca26:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801ca2a:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801ca2e:	eba7 070c 	sub.w	r7, r7, ip
 801ca32:	42bc      	cmp	r4, r7
 801ca34:	bfa8      	it	ge
 801ca36:	463c      	movge	r4, r7
 801ca38:	ee07 4a90 	vmov	s15, r4
 801ca3c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801ca40:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 801ca44:	ee25 4a04 	vmul.f32	s8, s10, s8
 801ca48:	ee65 4a24 	vmul.f32	s9, s10, s9
 801ca4c:	ee25 5a27 	vmul.f32	s10, s10, s15
 801ca50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ca54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801ca58:	eb09 0e0c 	add.w	lr, r9, ip
 801ca5c:	4571      	cmp	r1, lr
 801ca5e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801ca62:	ee32 1a05 	vadd.f32	s2, s4, s10
 801ca66:	ee36 0a84 	vadd.f32	s0, s13, s8
 801ca6a:	ee61 1a87 	vmul.f32	s3, s3, s14
 801ca6e:	ee22 2a07 	vmul.f32	s4, s4, s14
 801ca72:	f340 808d 	ble.w	801cb90 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 801ca76:	eba1 060e 	sub.w	r6, r1, lr
 801ca7a:	fb96 f5f4 	sdiv	r5, r6, r4
 801ca7e:	ee07 5a10 	vmov	s14, r5
 801ca82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ca86:	2d00      	cmp	r5, #0
 801ca88:	fb04 6615 	mls	r6, r4, r5, r6
 801ca8c:	eea7 0a04 	vfma.f32	s0, s14, s8
 801ca90:	eee7 0a24 	vfma.f32	s1, s14, s9
 801ca94:	eea7 1a05 	vfma.f32	s2, s14, s10
 801ca98:	dd13      	ble.n	801cac2 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 801ca9a:	ee70 6a44 	vsub.f32	s13, s0, s8
 801ca9e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801caa2:	eef5 6a40 	vcmp.f32	s13, #0.0
 801caa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801caaa:	bf18      	it	ne
 801caac:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801cab0:	ee31 2a45 	vsub.f32	s4, s2, s10
 801cab4:	bf08      	it	eq
 801cab6:	eeb0 7a67 	vmoveq.f32	s14, s15
 801caba:	ee61 1a87 	vmul.f32	s3, s3, s14
 801cabe:	ee22 2a07 	vmul.f32	s4, s4, s14
 801cac2:	fb05 f204 	mul.w	r2, r5, r4
 801cac6:	1abf      	subs	r7, r7, r2
 801cac8:	4494      	add	ip, r2
 801caca:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801cace:	4411      	add	r1, r2
 801cad0:	eb09 020c 	add.w	r2, r9, ip
 801cad4:	443a      	add	r2, r7
 801cad6:	b209      	sxth	r1, r1
 801cad8:	428a      	cmp	r2, r1
 801cada:	bfc4      	itt	gt
 801cadc:	eba1 0209 	subgt.w	r2, r1, r9
 801cae0:	eba2 070c 	subgt.w	r7, r2, ip
 801cae4:	2f00      	cmp	r7, #0
 801cae6:	dd50      	ble.n	801cb8a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 801cae8:	fb97 f1f4 	sdiv	r1, r7, r4
 801caec:	fb04 7211 	mls	r2, r4, r1, r7
 801caf0:	b90a      	cbnz	r2, 801caf6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 801caf2:	3901      	subs	r1, #1
 801caf4:	4622      	mov	r2, r4
 801caf6:	eec7 3a80 	vdiv.f32	s7, s15, s0
 801cafa:	6840      	ldr	r0, [r0, #4]
 801cafc:	900b      	str	r0, [sp, #44]	; 0x2c
 801cafe:	f8d0 a000 	ldr.w	sl, [r0]
 801cb02:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801cb04:	9008      	str	r0, [sp, #32]
 801cb06:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801cb0a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801cb0c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801cb10:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801cb14:	695b      	ldr	r3, [r3, #20]
 801cb16:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801cb18:	445b      	add	r3, fp
 801cb1a:	eef0 6a42 	vmov.f32	s13, s4
 801cb1e:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801cb22:	ee21 3a23 	vmul.f32	s6, s2, s7
 801cb26:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801cb2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cb2e:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801cb32:	9307      	str	r3, [sp, #28]
 801cb34:	ee17 7a90 	vmov	r7, s15
 801cb38:	ee73 7a42 	vsub.f32	s15, s6, s4
 801cb3c:	eeb0 7a61 	vmov.f32	s14, s3
 801cb40:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801cb44:	ee16 3a90 	vmov	r3, s13
 801cb48:	fb97 f7f4 	sdiv	r7, r7, r4
 801cb4c:	ee17 ca90 	vmov	ip, s15
 801cb50:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801cb54:	fb9c fcf4 	sdiv	ip, ip, r4
 801cb58:	fb0c 3306 	mla	r3, ip, r6, r3
 801cb5c:	9302      	str	r3, [sp, #8]
 801cb5e:	ee17 3a10 	vmov	r3, s14
 801cb62:	44b6      	add	lr, r6
 801cb64:	fb04 e505 	mla	r5, r4, r5, lr
 801cb68:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801cb6c:	fb07 3706 	mla	r7, r7, r6, r3
 801cb70:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801cb74:	e9cd 4700 	strd	r4, r7, [sp]
 801cb78:	2900      	cmp	r1, #0
 801cb7a:	bfcc      	ite	gt
 801cb7c:	46a1      	movgt	r9, r4
 801cb7e:	4691      	movle	r9, r2
 801cb80:	eba9 0306 	sub.w	r3, r9, r6
 801cb84:	f8da 4008 	ldr.w	r4, [sl, #8]
 801cb88:	47a0      	blx	r4
 801cb8a:	b00d      	add	sp, #52	; 0x34
 801cb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb90:	2500      	movs	r5, #0
 801cb92:	462e      	mov	r6, r5
 801cb94:	e799      	b.n	801caca <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0801cb98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801cb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb9c:	b0db      	sub	sp, #364	; 0x16c
 801cb9e:	461d      	mov	r5, r3
 801cba0:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801cba4:	930a      	str	r3, [sp, #40]	; 0x28
 801cba6:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801cbaa:	930b      	str	r3, [sp, #44]	; 0x2c
 801cbac:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801cbb0:	9310      	str	r3, [sp, #64]	; 0x40
 801cbb2:	6803      	ldr	r3, [r0, #0]
 801cbb4:	910f      	str	r1, [sp, #60]	; 0x3c
 801cbb6:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801cbb8:	9009      	str	r0, [sp, #36]	; 0x24
 801cbba:	4614      	mov	r4, r2
 801cbbc:	4629      	mov	r1, r5
 801cbbe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801cbc2:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801cbc6:	47b8      	blx	r7
 801cbc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cbca:	6058      	str	r0, [r3, #4]
 801cbcc:	2800      	cmp	r0, #0
 801cbce:	f000 83a1 	beq.w	801d314 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cbd2:	682b      	ldr	r3, [r5, #0]
 801cbd4:	9314      	str	r3, [sp, #80]	; 0x50
 801cbd6:	686b      	ldr	r3, [r5, #4]
 801cbd8:	9315      	str	r3, [sp, #84]	; 0x54
 801cbda:	4bc4      	ldr	r3, [pc, #784]	; (801ceec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 801cbdc:	ed94 7a02 	vldr	s14, [r4, #8]
 801cbe0:	7819      	ldrb	r1, [r3, #0]
 801cbe2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801cbe6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801cbea:	2900      	cmp	r1, #0
 801cbec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cbf0:	bf16      	itet	ne
 801cbf2:	4619      	movne	r1, r3
 801cbf4:	4611      	moveq	r1, r2
 801cbf6:	4613      	movne	r3, r2
 801cbf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbfc:	9116      	str	r1, [sp, #88]	; 0x58
 801cbfe:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801cc02:	f240 8387 	bls.w	801d314 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cc06:	ed94 7a07 	vldr	s14, [r4, #28]
 801cc0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cc0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc12:	f240 837f 	bls.w	801d314 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cc16:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801cc1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cc1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc22:	f240 8377 	bls.w	801d314 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cc26:	6822      	ldr	r2, [r4, #0]
 801cc28:	4bb1      	ldr	r3, [pc, #708]	; (801cef0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801cc2a:	429a      	cmp	r2, r3
 801cc2c:	f2c0 8372 	blt.w	801d314 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cc30:	49b0      	ldr	r1, [pc, #704]	; (801cef4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801cc32:	6963      	ldr	r3, [r4, #20]
 801cc34:	428a      	cmp	r2, r1
 801cc36:	f300 836d 	bgt.w	801d314 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cc3a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801cc3e:	48ae      	ldr	r0, [pc, #696]	; (801cef8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801cc40:	33ff      	adds	r3, #255	; 0xff
 801cc42:	4283      	cmp	r3, r0
 801cc44:	f200 8366 	bhi.w	801d314 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cc48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801cc4a:	4dac      	ldr	r5, [pc, #688]	; (801cefc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801cc4c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801cc50:	33ff      	adds	r3, #255	; 0xff
 801cc52:	42ab      	cmp	r3, r5
 801cc54:	f200 835e 	bhi.w	801d314 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cc58:	6862      	ldr	r2, [r4, #4]
 801cc5a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801cc5e:	33ff      	adds	r3, #255	; 0xff
 801cc60:	4283      	cmp	r3, r0
 801cc62:	f200 8357 	bhi.w	801d314 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cc66:	69a1      	ldr	r1, [r4, #24]
 801cc68:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801cc6c:	33ff      	adds	r3, #255	; 0xff
 801cc6e:	4283      	cmp	r3, r0
 801cc70:	f200 8350 	bhi.w	801d314 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cc74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801cc76:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801cc7a:	30ff      	adds	r0, #255	; 0xff
 801cc7c:	42a8      	cmp	r0, r5
 801cc7e:	f200 8349 	bhi.w	801d314 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801cc82:	428a      	cmp	r2, r1
 801cc84:	f280 8110 	bge.w	801cea8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801cc88:	429a      	cmp	r2, r3
 801cc8a:	f300 8119 	bgt.w	801cec0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801cc8e:	4299      	cmp	r1, r3
 801cc90:	f280 811d 	bge.w	801cece <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801cc94:	2502      	movs	r5, #2
 801cc96:	2701      	movs	r7, #1
 801cc98:	46a9      	mov	r9, r5
 801cc9a:	46b8      	mov	r8, r7
 801cc9c:	f04f 0a00 	mov.w	sl, #0
 801cca0:	4621      	mov	r1, r4
 801cca2:	a849      	add	r0, sp, #292	; 0x124
 801cca4:	f003 fd00 	bl	80206a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 801cca8:	4622      	mov	r2, r4
 801ccaa:	4653      	mov	r3, sl
 801ccac:	a949      	add	r1, sp, #292	; 0x124
 801ccae:	f8cd 9000 	str.w	r9, [sp]
 801ccb2:	a819      	add	r0, sp, #100	; 0x64
 801ccb4:	f003 fe28 	bl	8020908 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801ccb8:	4622      	mov	r2, r4
 801ccba:	4653      	mov	r3, sl
 801ccbc:	a949      	add	r1, sp, #292	; 0x124
 801ccbe:	f8cd 8000 	str.w	r8, [sp]
 801ccc2:	a829      	add	r0, sp, #164	; 0xa4
 801ccc4:	f003 fe20 	bl	8020908 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801ccc8:	4643      	mov	r3, r8
 801ccca:	4622      	mov	r2, r4
 801cccc:	a949      	add	r1, sp, #292	; 0x124
 801ccce:	f8cd 9000 	str.w	r9, [sp]
 801ccd2:	a839      	add	r0, sp, #228	; 0xe4
 801ccd4:	f003 fe18 	bl	8020908 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 801ccd8:	42af      	cmp	r7, r5
 801ccda:	bfb5      	itete	lt
 801ccdc:	2300      	movlt	r3, #0
 801ccde:	2301      	movge	r3, #1
 801cce0:	930e      	strlt	r3, [sp, #56]	; 0x38
 801cce2:	930e      	strge	r3, [sp, #56]	; 0x38
 801cce4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cce6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ccea:	af12      	add	r7, sp, #72	; 0x48
 801ccec:	bfb9      	ittee	lt
 801ccee:	ad29      	addlt	r5, sp, #164	; 0xa4
 801ccf0:	ac19      	addlt	r4, sp, #100	; 0x64
 801ccf2:	ad19      	addge	r5, sp, #100	; 0x64
 801ccf4:	ac29      	addge	r4, sp, #164	; 0xa4
 801ccf6:	e887 0003 	stmia.w	r7, {r0, r1}
 801ccfa:	b928      	cbnz	r0, 801cd08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 801ccfc:	4b80      	ldr	r3, [pc, #512]	; (801cf00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801ccfe:	6818      	ldr	r0, [r3, #0]
 801cd00:	6803      	ldr	r3, [r0, #0]
 801cd02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cd04:	4798      	blx	r3
 801cd06:	6038      	str	r0, [r7, #0]
 801cd08:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801cd0a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801cd0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801cd12:	930c      	str	r3, [sp, #48]	; 0x30
 801cd14:	990c      	ldr	r1, [sp, #48]	; 0x30
 801cd16:	6963      	ldr	r3, [r4, #20]
 801cd18:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 801cd1a:	440b      	add	r3, r1
 801cd1c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801cd20:	4408      	add	r0, r1
 801cd22:	b200      	sxth	r0, r0
 801cd24:	4283      	cmp	r3, r0
 801cd26:	900d      	str	r0, [sp, #52]	; 0x34
 801cd28:	f280 80dd 	bge.w	801cee6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 801cd2c:	428b      	cmp	r3, r1
 801cd2e:	da08      	bge.n	801cd42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801cd30:	2a00      	cmp	r2, #0
 801cd32:	dd06      	ble.n	801cd42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801cd34:	1acb      	subs	r3, r1, r3
 801cd36:	429a      	cmp	r2, r3
 801cd38:	f2c0 80e4 	blt.w	801cf04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 801cd3c:	2b00      	cmp	r3, #0
 801cd3e:	f300 80e2 	bgt.w	801cf06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801cd42:	6967      	ldr	r7, [r4, #20]
 801cd44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cd46:	443b      	add	r3, r7
 801cd48:	461f      	mov	r7, r3
 801cd4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd4c:	1bdf      	subs	r7, r3, r7
 801cd4e:	4297      	cmp	r7, r2
 801cd50:	bfa8      	it	ge
 801cd52:	4617      	movge	r7, r2
 801cd54:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801cd58:	2f00      	cmp	r7, #0
 801cd5a:	f340 8166 	ble.w	801d02a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801cd5e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801cd60:	6829      	ldr	r1, [r5, #0]
 801cd62:	f9b3 2000 	ldrsh.w	r2, [r3]
 801cd66:	f9bb 3000 	ldrsh.w	r3, [fp]
 801cd6a:	6820      	ldr	r0, [r4, #0]
 801cd6c:	4411      	add	r1, r2
 801cd6e:	4299      	cmp	r1, r3
 801cd70:	dd1a      	ble.n	801cda8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801cd72:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801cd76:	440b      	add	r3, r1
 801cd78:	4402      	add	r2, r0
 801cd7a:	b21b      	sxth	r3, r3
 801cd7c:	429a      	cmp	r2, r3
 801cd7e:	dc13      	bgt.n	801cda8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801cd80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cd84:	681b      	ldr	r3, [r3, #0]
 801cd86:	9206      	str	r2, [sp, #24]
 801cd88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cd8a:	9205      	str	r2, [sp, #20]
 801cd8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cd8e:	9500      	str	r5, [sp, #0]
 801cd90:	e9cd b203 	strd	fp, r2, [sp, #12]
 801cd94:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801cd96:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cd98:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801cd9c:	a912      	add	r1, sp, #72	; 0x48
 801cd9e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801cda2:	aa49      	add	r2, sp, #292	; 0x124
 801cda4:	4623      	mov	r3, r4
 801cda6:	47c8      	blx	r9
 801cda8:	e9d4 2300 	ldrd	r2, r3, [r4]
 801cdac:	441a      	add	r2, r3
 801cdae:	6963      	ldr	r3, [r4, #20]
 801cdb0:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801cdb4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801cdb8:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801cdbc:	68a1      	ldr	r1, [r4, #8]
 801cdbe:	ed94 6a08 	vldr	s12, [r4, #32]
 801cdc2:	6022      	str	r2, [r4, #0]
 801cdc4:	3301      	adds	r3, #1
 801cdc6:	6163      	str	r3, [r4, #20]
 801cdc8:	69a3      	ldr	r3, [r4, #24]
 801cdca:	ee37 7a27 	vadd.f32	s14, s14, s15
 801cdce:	3b01      	subs	r3, #1
 801cdd0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801cdd4:	61a3      	str	r3, [r4, #24]
 801cdd6:	6923      	ldr	r3, [r4, #16]
 801cdd8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801cddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cde0:	edd4 6a07 	vldr	s13, [r4, #28]
 801cde4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801cde8:	440b      	add	r3, r1
 801cdea:	68e1      	ldr	r1, [r4, #12]
 801cdec:	6123      	str	r3, [r4, #16]
 801cdee:	ee76 6a86 	vadd.f32	s13, s13, s12
 801cdf2:	428b      	cmp	r3, r1
 801cdf4:	edc4 6a07 	vstr	s13, [r4, #28]
 801cdf8:	db15      	blt.n	801ce26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 801cdfa:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801cdfe:	ee76 6a26 	vadd.f32	s13, s12, s13
 801ce02:	3201      	adds	r2, #1
 801ce04:	edc4 6a07 	vstr	s13, [r4, #28]
 801ce08:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801ce0c:	6022      	str	r2, [r4, #0]
 801ce0e:	ee36 7a87 	vadd.f32	s14, s13, s14
 801ce12:	1a5b      	subs	r3, r3, r1
 801ce14:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801ce18:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801ce1c:	6123      	str	r3, [r4, #16]
 801ce1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ce22:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801ce26:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ce2a:	441a      	add	r2, r3
 801ce2c:	696b      	ldr	r3, [r5, #20]
 801ce2e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801ce32:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801ce36:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801ce3a:	68a9      	ldr	r1, [r5, #8]
 801ce3c:	ed95 6a08 	vldr	s12, [r5, #32]
 801ce40:	602a      	str	r2, [r5, #0]
 801ce42:	3301      	adds	r3, #1
 801ce44:	616b      	str	r3, [r5, #20]
 801ce46:	69ab      	ldr	r3, [r5, #24]
 801ce48:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ce4c:	3b01      	subs	r3, #1
 801ce4e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801ce52:	61ab      	str	r3, [r5, #24]
 801ce54:	692b      	ldr	r3, [r5, #16]
 801ce56:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801ce5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ce5e:	edd5 6a07 	vldr	s13, [r5, #28]
 801ce62:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801ce66:	440b      	add	r3, r1
 801ce68:	68e9      	ldr	r1, [r5, #12]
 801ce6a:	612b      	str	r3, [r5, #16]
 801ce6c:	ee76 6a86 	vadd.f32	s13, s13, s12
 801ce70:	428b      	cmp	r3, r1
 801ce72:	edc5 6a07 	vstr	s13, [r5, #28]
 801ce76:	db15      	blt.n	801cea4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801ce78:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801ce7c:	ee76 6a26 	vadd.f32	s13, s12, s13
 801ce80:	3201      	adds	r2, #1
 801ce82:	edc5 6a07 	vstr	s13, [r5, #28]
 801ce86:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801ce8a:	602a      	str	r2, [r5, #0]
 801ce8c:	ee36 7a87 	vadd.f32	s14, s13, s14
 801ce90:	1a5b      	subs	r3, r3, r1
 801ce92:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801ce96:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801ce9a:	612b      	str	r3, [r5, #16]
 801ce9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801cea0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801cea4:	3f01      	subs	r7, #1
 801cea6:	e757      	b.n	801cd58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801cea8:	4299      	cmp	r1, r3
 801ceaa:	dc13      	bgt.n	801ced4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801ceac:	429a      	cmp	r2, r3
 801ceae:	da14      	bge.n	801ceda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801ceb0:	2502      	movs	r5, #2
 801ceb2:	2703      	movs	r7, #3
 801ceb4:	46a9      	mov	r9, r5
 801ceb6:	f04f 0800 	mov.w	r8, #0
 801ceba:	f04f 0a01 	mov.w	sl, #1
 801cebe:	e6ef      	b.n	801cca0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801cec0:	2501      	movs	r5, #1
 801cec2:	2700      	movs	r7, #0
 801cec4:	46a9      	mov	r9, r5
 801cec6:	46b8      	mov	r8, r7
 801cec8:	f04f 0a02 	mov.w	sl, #2
 801cecc:	e6e8      	b.n	801cca0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801cece:	2501      	movs	r5, #1
 801ced0:	2702      	movs	r7, #2
 801ced2:	e6e1      	b.n	801cc98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801ced4:	2500      	movs	r5, #0
 801ced6:	2701      	movs	r7, #1
 801ced8:	e7f4      	b.n	801cec4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801ceda:	2702      	movs	r7, #2
 801cedc:	2503      	movs	r5, #3
 801cede:	f04f 0900 	mov.w	r9, #0
 801cee2:	46b8      	mov	r8, r7
 801cee4:	e7e9      	b.n	801ceba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801cee6:	4613      	mov	r3, r2
 801cee8:	e728      	b.n	801cd3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801ceea:	bf00      	nop
 801ceec:	2000f15a 	.word	0x2000f15a
 801cef0:	fffd8f01 	.word	0xfffd8f01
 801cef4:	00027100 	.word	0x00027100
 801cef8:	0004e1ff 	.word	0x0004e1ff
 801cefc:	0004e1fe 	.word	0x0004e1fe
 801cf00:	2000f164 	.word	0x2000f164
 801cf04:	4613      	mov	r3, r2
 801cf06:	992b      	ldr	r1, [sp, #172]	; 0xac
 801cf08:	9111      	str	r1, [sp, #68]	; 0x44
 801cf0a:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801cf0e:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801cf12:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801cf14:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801cf18:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801cf1c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801cf20:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801cf24:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801cf28:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801cf2c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801cf30:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801cf34:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801cf38:	469e      	mov	lr, r3
 801cf3a:	469c      	mov	ip, r3
 801cf3c:	f04f 0900 	mov.w	r9, #0
 801cf40:	f1bc 0f00 	cmp.w	ip, #0
 801cf44:	d147      	bne.n	801cfd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801cf46:	eb03 0c07 	add.w	ip, r3, r7
 801cf4a:	1ad7      	subs	r7, r2, r3
 801cf4c:	f1b9 0f00 	cmp.w	r9, #0
 801cf50:	d009      	beq.n	801cf66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801cf52:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801cf56:	9029      	str	r0, [sp, #164]	; 0xa4
 801cf58:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801cf5c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801cf60:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801cf64:	912d      	str	r1, [sp, #180]	; 0xb4
 801cf66:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801cf68:	9111      	str	r1, [sp, #68]	; 0x44
 801cf6a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801cf6e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801cf72:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801cf76:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801cf7a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801cf7e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801cf82:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801cf86:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801cf8a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801cf8e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801cf92:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801cf96:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801cf9a:	f04f 0800 	mov.w	r8, #0
 801cf9e:	f1be 0f00 	cmp.w	lr, #0
 801cfa2:	d031      	beq.n	801d008 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801cfa4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801cfa6:	4431      	add	r1, r6
 801cfa8:	4549      	cmp	r1, r9
 801cfaa:	4450      	add	r0, sl
 801cfac:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801cfb0:	ee37 7a04 	vadd.f32	s14, s14, s8
 801cfb4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801cfb8:	db08      	blt.n	801cfcc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801cfba:	ee77 7a85 	vadd.f32	s15, s15, s10
 801cfbe:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801cfc2:	ee37 7a06 	vadd.f32	s14, s14, s12
 801cfc6:	3001      	adds	r0, #1
 801cfc8:	eba1 0109 	sub.w	r1, r1, r9
 801cfcc:	f10e 3eff 	add.w	lr, lr, #4294967295
 801cfd0:	f04f 0801 	mov.w	r8, #1
 801cfd4:	e7e3      	b.n	801cf9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801cfd6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801cfd8:	4431      	add	r1, r6
 801cfda:	4541      	cmp	r1, r8
 801cfdc:	4450      	add	r0, sl
 801cfde:	ee37 7a24 	vadd.f32	s14, s14, s9
 801cfe2:	ee77 7a84 	vadd.f32	s15, s15, s8
 801cfe6:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801cfea:	db08      	blt.n	801cffe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801cfec:	ee76 6a85 	vadd.f32	s13, s13, s10
 801cff0:	ee37 7a25 	vadd.f32	s14, s14, s11
 801cff4:	ee77 7a86 	vadd.f32	s15, s15, s12
 801cff8:	3001      	adds	r0, #1
 801cffa:	eba1 0108 	sub.w	r1, r1, r8
 801cffe:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d002:	f04f 0901 	mov.w	r9, #1
 801d006:	e79b      	b.n	801cf40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801d008:	449c      	add	ip, r3
 801d00a:	1aff      	subs	r7, r7, r3
 801d00c:	f1b8 0f00 	cmp.w	r8, #0
 801d010:	d009      	beq.n	801d026 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801d012:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801d016:	9019      	str	r0, [sp, #100]	; 0x64
 801d018:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801d01c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801d020:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801d024:	911d      	str	r1, [sp, #116]	; 0x74
 801d026:	1ad2      	subs	r2, r2, r3
 801d028:	e68b      	b.n	801cd42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801d02a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d02c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801d02e:	2b00      	cmp	r3, #0
 801d030:	f000 80d1 	beq.w	801d1d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801d034:	ad19      	add	r5, sp, #100	; 0x64
 801d036:	ac39      	add	r4, sp, #228	; 0xe4
 801d038:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801d03a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801d03e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d042:	930c      	str	r3, [sp, #48]	; 0x30
 801d044:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d046:	6963      	ldr	r3, [r4, #20]
 801d048:	440b      	add	r3, r1
 801d04a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801d04e:	4408      	add	r0, r1
 801d050:	b200      	sxth	r0, r0
 801d052:	4283      	cmp	r3, r0
 801d054:	900d      	str	r0, [sp, #52]	; 0x34
 801d056:	f280 80c1 	bge.w	801d1dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801d05a:	428b      	cmp	r3, r1
 801d05c:	da08      	bge.n	801d070 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801d05e:	2a00      	cmp	r2, #0
 801d060:	dd06      	ble.n	801d070 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801d062:	1acb      	subs	r3, r1, r3
 801d064:	429a      	cmp	r2, r3
 801d066:	f2c0 80bb 	blt.w	801d1e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	f300 80b9 	bgt.w	801d1e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801d070:	6967      	ldr	r7, [r4, #20]
 801d072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d074:	443b      	add	r3, r7
 801d076:	461f      	mov	r7, r3
 801d078:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d07a:	1bdf      	subs	r7, r3, r7
 801d07c:	4297      	cmp	r7, r2
 801d07e:	bfa8      	it	ge
 801d080:	4617      	movge	r7, r2
 801d082:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801d086:	2f00      	cmp	r7, #0
 801d088:	f340 813c 	ble.w	801d304 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801d08c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801d08e:	6829      	ldr	r1, [r5, #0]
 801d090:	f9b3 2000 	ldrsh.w	r2, [r3]
 801d094:	f9bb 3000 	ldrsh.w	r3, [fp]
 801d098:	6820      	ldr	r0, [r4, #0]
 801d09a:	4411      	add	r1, r2
 801d09c:	4299      	cmp	r1, r3
 801d09e:	dd1a      	ble.n	801d0d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801d0a0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801d0a4:	440b      	add	r3, r1
 801d0a6:	4402      	add	r2, r0
 801d0a8:	b21b      	sxth	r3, r3
 801d0aa:	429a      	cmp	r2, r3
 801d0ac:	dc13      	bgt.n	801d0d6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801d0ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d0b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d0b2:	681b      	ldr	r3, [r3, #0]
 801d0b4:	9206      	str	r2, [sp, #24]
 801d0b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801d0b8:	9205      	str	r2, [sp, #20]
 801d0ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d0bc:	9500      	str	r5, [sp, #0]
 801d0be:	e9cd b203 	strd	fp, r2, [sp, #12]
 801d0c2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801d0c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d0c6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801d0ca:	a912      	add	r1, sp, #72	; 0x48
 801d0cc:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801d0d0:	aa49      	add	r2, sp, #292	; 0x124
 801d0d2:	4623      	mov	r3, r4
 801d0d4:	47c8      	blx	r9
 801d0d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d0da:	441a      	add	r2, r3
 801d0dc:	6963      	ldr	r3, [r4, #20]
 801d0de:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801d0e2:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801d0e6:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801d0ea:	68a1      	ldr	r1, [r4, #8]
 801d0ec:	ed94 6a08 	vldr	s12, [r4, #32]
 801d0f0:	6022      	str	r2, [r4, #0]
 801d0f2:	3301      	adds	r3, #1
 801d0f4:	6163      	str	r3, [r4, #20]
 801d0f6:	69a3      	ldr	r3, [r4, #24]
 801d0f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d0fc:	3b01      	subs	r3, #1
 801d0fe:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801d102:	61a3      	str	r3, [r4, #24]
 801d104:	6923      	ldr	r3, [r4, #16]
 801d106:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801d10a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d10e:	edd4 6a07 	vldr	s13, [r4, #28]
 801d112:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801d116:	440b      	add	r3, r1
 801d118:	68e1      	ldr	r1, [r4, #12]
 801d11a:	6123      	str	r3, [r4, #16]
 801d11c:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d120:	428b      	cmp	r3, r1
 801d122:	edc4 6a07 	vstr	s13, [r4, #28]
 801d126:	db15      	blt.n	801d154 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801d128:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801d12c:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d130:	3201      	adds	r2, #1
 801d132:	edc4 6a07 	vstr	s13, [r4, #28]
 801d136:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801d13a:	6022      	str	r2, [r4, #0]
 801d13c:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d140:	1a5b      	subs	r3, r3, r1
 801d142:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801d146:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801d14a:	6123      	str	r3, [r4, #16]
 801d14c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d150:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801d154:	e9d5 2300 	ldrd	r2, r3, [r5]
 801d158:	441a      	add	r2, r3
 801d15a:	696b      	ldr	r3, [r5, #20]
 801d15c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801d160:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801d164:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801d168:	68a9      	ldr	r1, [r5, #8]
 801d16a:	ed95 6a08 	vldr	s12, [r5, #32]
 801d16e:	602a      	str	r2, [r5, #0]
 801d170:	3301      	adds	r3, #1
 801d172:	616b      	str	r3, [r5, #20]
 801d174:	69ab      	ldr	r3, [r5, #24]
 801d176:	ee37 7a27 	vadd.f32	s14, s14, s15
 801d17a:	3b01      	subs	r3, #1
 801d17c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801d180:	61ab      	str	r3, [r5, #24]
 801d182:	692b      	ldr	r3, [r5, #16]
 801d184:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801d188:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d18c:	edd5 6a07 	vldr	s13, [r5, #28]
 801d190:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801d194:	440b      	add	r3, r1
 801d196:	68e9      	ldr	r1, [r5, #12]
 801d198:	612b      	str	r3, [r5, #16]
 801d19a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801d19e:	428b      	cmp	r3, r1
 801d1a0:	edc5 6a07 	vstr	s13, [r5, #28]
 801d1a4:	db15      	blt.n	801d1d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801d1a6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801d1aa:	ee76 6a26 	vadd.f32	s13, s12, s13
 801d1ae:	3201      	adds	r2, #1
 801d1b0:	edc5 6a07 	vstr	s13, [r5, #28]
 801d1b4:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801d1b8:	602a      	str	r2, [r5, #0]
 801d1ba:	ee36 7a87 	vadd.f32	s14, s13, s14
 801d1be:	1a5b      	subs	r3, r3, r1
 801d1c0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801d1c4:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801d1c8:	612b      	str	r3, [r5, #16]
 801d1ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 801d1ce:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801d1d2:	3f01      	subs	r7, #1
 801d1d4:	e757      	b.n	801d086 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801d1d6:	ad39      	add	r5, sp, #228	; 0xe4
 801d1d8:	ac19      	add	r4, sp, #100	; 0x64
 801d1da:	e72d      	b.n	801d038 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801d1dc:	4613      	mov	r3, r2
 801d1de:	e744      	b.n	801d06a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801d1e0:	4613      	mov	r3, r2
 801d1e2:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801d1e6:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801d1e8:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801d1ec:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801d1f0:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801d1f4:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801d1f8:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801d1fc:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801d200:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801d204:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801d206:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801d20a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801d20e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801d212:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801d216:	960e      	str	r6, [sp, #56]	; 0x38
 801d218:	469e      	mov	lr, r3
 801d21a:	461f      	mov	r7, r3
 801d21c:	f04f 0900 	mov.w	r9, #0
 801d220:	2f00      	cmp	r7, #0
 801d222:	d146      	bne.n	801d2b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801d224:	449c      	add	ip, r3
 801d226:	1ad7      	subs	r7, r2, r3
 801d228:	f1b9 0f00 	cmp.w	r9, #0
 801d22c:	d009      	beq.n	801d242 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801d22e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801d232:	9039      	str	r0, [sp, #228]	; 0xe4
 801d234:	913d      	str	r1, [sp, #244]	; 0xf4
 801d236:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801d23a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801d23e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801d242:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801d244:	910e      	str	r1, [sp, #56]	; 0x38
 801d246:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801d24a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801d24e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801d252:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801d256:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801d25a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801d25e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801d262:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801d266:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801d26a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801d26e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801d272:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801d276:	f04f 0800 	mov.w	r8, #0
 801d27a:	f1be 0f00 	cmp.w	lr, #0
 801d27e:	d030      	beq.n	801d2e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801d280:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801d282:	4431      	add	r1, r6
 801d284:	4549      	cmp	r1, r9
 801d286:	4450      	add	r0, sl
 801d288:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801d28c:	ee37 7a04 	vadd.f32	s14, s14, s8
 801d290:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801d294:	db08      	blt.n	801d2a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801d296:	ee77 7a85 	vadd.f32	s15, s15, s10
 801d29a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801d29e:	ee37 7a06 	vadd.f32	s14, s14, s12
 801d2a2:	3001      	adds	r0, #1
 801d2a4:	eba1 0109 	sub.w	r1, r1, r9
 801d2a8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d2ac:	f04f 0801 	mov.w	r8, #1
 801d2b0:	e7e3      	b.n	801d27a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801d2b2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801d2b4:	4431      	add	r1, r6
 801d2b6:	4541      	cmp	r1, r8
 801d2b8:	4450      	add	r0, sl
 801d2ba:	ee37 7a24 	vadd.f32	s14, s14, s9
 801d2be:	ee77 7a84 	vadd.f32	s15, s15, s8
 801d2c2:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801d2c6:	db08      	blt.n	801d2da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801d2c8:	ee76 6a85 	vadd.f32	s13, s13, s10
 801d2cc:	ee37 7a25 	vadd.f32	s14, s14, s11
 801d2d0:	ee77 7a86 	vadd.f32	s15, s15, s12
 801d2d4:	3001      	adds	r0, #1
 801d2d6:	eba1 0108 	sub.w	r1, r1, r8
 801d2da:	3f01      	subs	r7, #1
 801d2dc:	f04f 0901 	mov.w	r9, #1
 801d2e0:	e79e      	b.n	801d220 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801d2e2:	449c      	add	ip, r3
 801d2e4:	1aff      	subs	r7, r7, r3
 801d2e6:	f1b8 0f00 	cmp.w	r8, #0
 801d2ea:	d009      	beq.n	801d300 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801d2ec:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801d2f0:	9019      	str	r0, [sp, #100]	; 0x64
 801d2f2:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801d2f6:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801d2fa:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801d2fe:	911d      	str	r1, [sp, #116]	; 0x74
 801d300:	1ad2      	subs	r2, r2, r3
 801d302:	e6b5      	b.n	801d070 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801d304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d306:	681b      	ldr	r3, [r3, #0]
 801d308:	b923      	cbnz	r3, 801d314 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801d30a:	4b04      	ldr	r3, [pc, #16]	; (801d31c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801d30c:	6818      	ldr	r0, [r3, #0]
 801d30e:	6803      	ldr	r3, [r0, #0]
 801d310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d312:	4798      	blx	r3
 801d314:	b05b      	add	sp, #364	; 0x16c
 801d316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d31a:	bf00      	nop
 801d31c:	2000f164 	.word	0x2000f164

0801d320 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801d320:	b570      	push	{r4, r5, r6, lr}
 801d322:	4604      	mov	r4, r0
 801d324:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801d328:	9804      	ldr	r0, [sp, #16]
 801d32a:	6061      	str	r1, [r4, #4]
 801d32c:	2500      	movs	r5, #0
 801d32e:	8025      	strh	r5, [r4, #0]
 801d330:	7223      	strb	r3, [r4, #8]
 801d332:	7266      	strb	r6, [r4, #9]
 801d334:	60e0      	str	r0, [r4, #12]
 801d336:	8222      	strh	r2, [r4, #16]
 801d338:	8265      	strh	r5, [r4, #18]
 801d33a:	82a5      	strh	r5, [r4, #20]
 801d33c:	82e5      	strh	r5, [r4, #22]
 801d33e:	8325      	strh	r5, [r4, #24]
 801d340:	8365      	strh	r5, [r4, #26]
 801d342:	83a5      	strh	r5, [r4, #28]
 801d344:	77a5      	strb	r5, [r4, #30]
 801d346:	b32e      	cbz	r6, 801d394 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801d348:	6803      	ldr	r3, [r0, #0]
 801d34a:	695b      	ldr	r3, [r3, #20]
 801d34c:	4798      	blx	r3
 801d34e:	4606      	mov	r6, r0
 801d350:	b300      	cbz	r0, 801d394 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801d352:	68e0      	ldr	r0, [r4, #12]
 801d354:	6803      	ldr	r3, [r0, #0]
 801d356:	4631      	mov	r1, r6
 801d358:	68db      	ldr	r3, [r3, #12]
 801d35a:	4798      	blx	r3
 801d35c:	4605      	mov	r5, r0
 801d35e:	b1c8      	cbz	r0, 801d394 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801d360:	7b43      	ldrb	r3, [r0, #13]
 801d362:	7a82      	ldrb	r2, [r0, #10]
 801d364:	005b      	lsls	r3, r3, #1
 801d366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d36a:	4313      	orrs	r3, r2
 801d36c:	83a3      	strh	r3, [r4, #28]
 801d36e:	7a63      	ldrb	r3, [r4, #9]
 801d370:	2b04      	cmp	r3, #4
 801d372:	d10f      	bne.n	801d394 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801d374:	68e0      	ldr	r0, [r4, #12]
 801d376:	6803      	ldr	r3, [r0, #0]
 801d378:	462a      	mov	r2, r5
 801d37a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d37c:	4631      	mov	r1, r6
 801d37e:	4798      	blx	r3
 801d380:	7b6b      	ldrb	r3, [r5, #13]
 801d382:	005b      	lsls	r3, r3, #1
 801d384:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d388:	7aab      	ldrb	r3, [r5, #10]
 801d38a:	4313      	orrs	r3, r2
 801d38c:	4418      	add	r0, r3
 801d38e:	8ba3      	ldrh	r3, [r4, #28]
 801d390:	4418      	add	r0, r3
 801d392:	83a0      	strh	r0, [r4, #28]
 801d394:	4620      	mov	r0, r4
 801d396:	bd70      	pop	{r4, r5, r6, pc}

0801d398 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801d398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d39c:	2400      	movs	r4, #0
 801d39e:	b085      	sub	sp, #20
 801d3a0:	4681      	mov	r9, r0
 801d3a2:	4688      	mov	r8, r1
 801d3a4:	4692      	mov	sl, r2
 801d3a6:	469b      	mov	fp, r3
 801d3a8:	4627      	mov	r7, r4
 801d3aa:	4625      	mov	r5, r4
 801d3ac:	4626      	mov	r6, r4
 801d3ae:	4554      	cmp	r4, sl
 801d3b0:	da2a      	bge.n	801d408 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801d3b2:	2300      	movs	r3, #0
 801d3b4:	9303      	str	r3, [sp, #12]
 801d3b6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801d3ba:	429d      	cmp	r5, r3
 801d3bc:	d004      	beq.n	801d3c8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801d3be:	f242 030b 	movw	r3, #8203	; 0x200b
 801d3c2:	429d      	cmp	r5, r3
 801d3c4:	bf18      	it	ne
 801d3c6:	462f      	movne	r7, r5
 801d3c8:	ab03      	add	r3, sp, #12
 801d3ca:	4642      	mov	r2, r8
 801d3cc:	4659      	mov	r1, fp
 801d3ce:	4648      	mov	r0, r9
 801d3d0:	f002 ff80 	bl	80202d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d3d4:	4605      	mov	r5, r0
 801d3d6:	b1b8      	cbz	r0, 801d408 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801d3d8:	280a      	cmp	r0, #10
 801d3da:	d015      	beq.n	801d408 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801d3dc:	9a03      	ldr	r2, [sp, #12]
 801d3de:	b18a      	cbz	r2, 801d404 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801d3e0:	7b50      	ldrb	r0, [r2, #13]
 801d3e2:	7a93      	ldrb	r3, [r2, #10]
 801d3e4:	8895      	ldrh	r5, [r2, #4]
 801d3e6:	0040      	lsls	r0, r0, #1
 801d3e8:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801d3ec:	4303      	orrs	r3, r0
 801d3ee:	9301      	str	r3, [sp, #4]
 801d3f0:	f8d8 3000 	ldr.w	r3, [r8]
 801d3f4:	4639      	mov	r1, r7
 801d3f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d3f8:	4640      	mov	r0, r8
 801d3fa:	4798      	blx	r3
 801d3fc:	9b01      	ldr	r3, [sp, #4]
 801d3fe:	4418      	add	r0, r3
 801d400:	4406      	add	r6, r0
 801d402:	b2b6      	uxth	r6, r6
 801d404:	3401      	adds	r4, #1
 801d406:	e7d2      	b.n	801d3ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801d408:	4630      	mov	r0, r6
 801d40a:	b005      	add	sp, #20
 801d40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d410 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801d410:	2a02      	cmp	r2, #2
 801d412:	b530      	push	{r4, r5, lr}
 801d414:	d011      	beq.n	801d43a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801d416:	2a03      	cmp	r2, #3
 801d418:	d01c      	beq.n	801d454 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801d41a:	2a01      	cmp	r2, #1
 801d41c:	d10c      	bne.n	801d438 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801d41e:	888b      	ldrh	r3, [r1, #4]
 801d420:	8801      	ldrh	r1, [r0, #0]
 801d422:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801d426:	8844      	ldrh	r4, [r0, #2]
 801d428:	8004      	strh	r4, [r0, #0]
 801d42a:	1a5b      	subs	r3, r3, r1
 801d42c:	1a9b      	subs	r3, r3, r2
 801d42e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801d432:	8043      	strh	r3, [r0, #2]
 801d434:	8081      	strh	r1, [r0, #4]
 801d436:	80c2      	strh	r2, [r0, #6]
 801d438:	bd30      	pop	{r4, r5, pc}
 801d43a:	88cb      	ldrh	r3, [r1, #6]
 801d43c:	8842      	ldrh	r2, [r0, #2]
 801d43e:	1a9b      	subs	r3, r3, r2
 801d440:	88c2      	ldrh	r2, [r0, #6]
 801d442:	1a9b      	subs	r3, r3, r2
 801d444:	888a      	ldrh	r2, [r1, #4]
 801d446:	8801      	ldrh	r1, [r0, #0]
 801d448:	8043      	strh	r3, [r0, #2]
 801d44a:	1a52      	subs	r2, r2, r1
 801d44c:	8881      	ldrh	r1, [r0, #4]
 801d44e:	1a52      	subs	r2, r2, r1
 801d450:	8002      	strh	r2, [r0, #0]
 801d452:	e7f1      	b.n	801d438 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801d454:	88cb      	ldrh	r3, [r1, #6]
 801d456:	8841      	ldrh	r1, [r0, #2]
 801d458:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801d45c:	f9b0 5000 	ldrsh.w	r5, [r0]
 801d460:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801d464:	8045      	strh	r5, [r0, #2]
 801d466:	1a5b      	subs	r3, r3, r1
 801d468:	1a9b      	subs	r3, r3, r2
 801d46a:	8003      	strh	r3, [r0, #0]
 801d46c:	8082      	strh	r2, [r0, #4]
 801d46e:	80c4      	strh	r4, [r0, #6]
 801d470:	e7e2      	b.n	801d438 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801d472 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801d472:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d476:	b09f      	sub	sp, #124	; 0x7c
 801d478:	9116      	str	r1, [sp, #88]	; 0x58
 801d47a:	9317      	str	r3, [sp, #92]	; 0x5c
 801d47c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801d47e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d480:	8809      	ldrh	r1, [r1, #0]
 801d482:	889b      	ldrh	r3, [r3, #4]
 801d484:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801d488:	9212      	str	r2, [sp, #72]	; 0x48
 801d48a:	440b      	add	r3, r1
 801d48c:	b21b      	sxth	r3, r3
 801d48e:	9310      	str	r3, [sp, #64]	; 0x40
 801d490:	f8d8 3000 	ldr.w	r3, [r8]
 801d494:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801d498:	7a59      	ldrb	r1, [r3, #9]
 801d49a:	7a1b      	ldrb	r3, [r3, #8]
 801d49c:	9011      	str	r0, [sp, #68]	; 0x44
 801d49e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801d4a2:	9114      	str	r1, [sp, #80]	; 0x50
 801d4a4:	9315      	str	r3, [sp, #84]	; 0x54
 801d4a6:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 801d4aa:	2a00      	cmp	r2, #0
 801d4ac:	d06a      	beq.n	801d584 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801d4ae:	f898 3010 	ldrb.w	r3, [r8, #16]
 801d4b2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801d4b4:	2b04      	cmp	r3, #4
 801d4b6:	bf14      	ite	ne
 801d4b8:	2301      	movne	r3, #1
 801d4ba:	2302      	moveq	r3, #2
 801d4bc:	4413      	add	r3, r2
 801d4be:	f04f 0900 	mov.w	r9, #0
 801d4c2:	930f      	str	r3, [sp, #60]	; 0x3c
 801d4c4:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801d4c8:	464c      	mov	r4, r9
 801d4ca:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801d4ce:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801d4d2:	4293      	cmp	r3, r2
 801d4d4:	f280 808f 	bge.w	801d5f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801d4d8:	2300      	movs	r3, #0
 801d4da:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 801d4de:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 801d4e2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801d4e6:	429c      	cmp	r4, r3
 801d4e8:	d006      	beq.n	801d4f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801d4ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d4ec:	f242 020b 	movw	r2, #8203	; 0x200b
 801d4f0:	4294      	cmp	r4, r2
 801d4f2:	bf18      	it	ne
 801d4f4:	4623      	movne	r3, r4
 801d4f6:	930d      	str	r3, [sp, #52]	; 0x34
 801d4f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d4fa:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801d4fc:	f8d8 2000 	ldr.w	r2, [r8]
 801d500:	428b      	cmp	r3, r1
 801d502:	db41      	blt.n	801d588 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801d504:	6813      	ldr	r3, [r2, #0]
 801d506:	4610      	mov	r0, r2
 801d508:	695b      	ldr	r3, [r3, #20]
 801d50a:	4798      	blx	r3
 801d50c:	4604      	mov	r4, r0
 801d50e:	f8d8 0000 	ldr.w	r0, [r8]
 801d512:	6803      	ldr	r3, [r0, #0]
 801d514:	aa1d      	add	r2, sp, #116	; 0x74
 801d516:	689e      	ldr	r6, [r3, #8]
 801d518:	4621      	mov	r1, r4
 801d51a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801d51e:	47b0      	blx	r6
 801d520:	901c      	str	r0, [sp, #112]	; 0x70
 801d522:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801d526:	429c      	cmp	r4, r3
 801d528:	f000 80e9 	beq.w	801d6fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801d52c:	f242 030b 	movw	r3, #8203	; 0x200b
 801d530:	429c      	cmp	r4, r3
 801d532:	f000 80e4 	beq.w	801d6fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801d536:	2c00      	cmp	r4, #0
 801d538:	f000 80f6 	beq.w	801d728 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 801d53c:	2c0a      	cmp	r4, #10
 801d53e:	d060      	beq.n	801d602 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801d540:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801d542:	b36a      	cbz	r2, 801d5a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801d544:	8894      	ldrh	r4, [r2, #4]
 801d546:	f1bb 0f00 	cmp.w	fp, #0
 801d54a:	d03b      	beq.n	801d5c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801d54c:	f892 900d 	ldrb.w	r9, [r2, #13]
 801d550:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801d554:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801d558:	f892 900a 	ldrb.w	r9, [r2, #10]
 801d55c:	f1bb 0f01 	cmp.w	fp, #1
 801d560:	ea49 0903 	orr.w	r9, r9, r3
 801d564:	d134      	bne.n	801d5d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 801d566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d568:	eba5 0509 	sub.w	r5, r5, r9
 801d56c:	2b00      	cmp	r3, #0
 801d56e:	d14f      	bne.n	801d610 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801d570:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d572:	eb09 0305 	add.w	r3, r9, r5
 801d576:	4413      	add	r3, r2
 801d578:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d57a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801d57e:	4293      	cmp	r3, r2
 801d580:	da51      	bge.n	801d626 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801d582:	e038      	b.n	801d5f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801d584:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801d586:	e79a      	b.n	801d4be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801d588:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801d58c:	9301      	str	r3, [sp, #4]
 801d58e:	ab1d      	add	r3, sp, #116	; 0x74
 801d590:	9300      	str	r3, [sp, #0]
 801d592:	4659      	mov	r1, fp
 801d594:	ab1c      	add	r3, sp, #112	; 0x70
 801d596:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801d598:	f002 fee5 	bl	8020366 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801d59c:	4604      	mov	r4, r0
 801d59e:	e7c0      	b.n	801d522 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801d5a0:	f8d8 0000 	ldr.w	r0, [r8]
 801d5a4:	6803      	ldr	r3, [r0, #0]
 801d5a6:	691b      	ldr	r3, [r3, #16]
 801d5a8:	4798      	blx	r3
 801d5aa:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801d5ae:	4298      	cmp	r0, r3
 801d5b0:	f000 80a5 	beq.w	801d6fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801d5b4:	f242 030b 	movw	r3, #8203	; 0x200b
 801d5b8:	4298      	cmp	r0, r3
 801d5ba:	f000 80a0 	beq.w	801d6fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801d5be:	f1bb 0f00 	cmp.w	fp, #0
 801d5c2:	d100      	bne.n	801d5c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801d5c4:	444d      	add	r5, r9
 801d5c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801d5c8:	2a00      	cmp	r2, #0
 801d5ca:	d1bf      	bne.n	801d54c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801d5cc:	4691      	mov	r9, r2
 801d5ce:	e096      	b.n	801d6fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801d5d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d5d2:	2b00      	cmp	r3, #0
 801d5d4:	f000 80aa 	beq.w	801d72c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 801d5d8:	f1bb 0f00 	cmp.w	fp, #0
 801d5dc:	d118      	bne.n	801d610 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801d5de:	f8d8 0000 	ldr.w	r0, [r8]
 801d5e2:	990d      	ldr	r1, [sp, #52]	; 0x34
 801d5e4:	6803      	ldr	r3, [r0, #0]
 801d5e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d5e8:	4798      	blx	r3
 801d5ea:	4405      	add	r5, r0
 801d5ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d5ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d5f0:	1aeb      	subs	r3, r5, r3
 801d5f2:	4293      	cmp	r3, r2
 801d5f4:	dd17      	ble.n	801d626 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801d5f6:	2c00      	cmp	r4, #0
 801d5f8:	f000 8096 	beq.w	801d728 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 801d5fc:	2c0a      	cmp	r4, #10
 801d5fe:	f040 8084 	bne.w	801d70a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801d602:	240a      	movs	r4, #10
 801d604:	fab4 f084 	clz	r0, r4
 801d608:	0940      	lsrs	r0, r0, #5
 801d60a:	b01f      	add	sp, #124	; 0x7c
 801d60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d610:	f8d8 0000 	ldr.w	r0, [r8]
 801d614:	990d      	ldr	r1, [sp, #52]	; 0x34
 801d616:	6803      	ldr	r3, [r0, #0]
 801d618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d61a:	4798      	blx	r3
 801d61c:	f1bb 0f01 	cmp.w	fp, #1
 801d620:	eba5 0500 	sub.w	r5, r5, r0
 801d624:	d0a4      	beq.n	801d570 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801d626:	981c      	ldr	r0, [sp, #112]	; 0x70
 801d628:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d62a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801d62e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801d632:	7b43      	ldrb	r3, [r0, #13]
 801d634:	015b      	lsls	r3, r3, #5
 801d636:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d63a:	7983      	ldrb	r3, [r0, #6]
 801d63c:	4429      	add	r1, r5
 801d63e:	4313      	orrs	r3, r2
 801d640:	440b      	add	r3, r1
 801d642:	42b3      	cmp	r3, r6
 801d644:	db5b      	blt.n	801d6fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801d646:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d648:	4299      	cmp	r1, r3
 801d64a:	da58      	bge.n	801d6fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801d64c:	f8d8 0000 	ldr.w	r0, [r8]
 801d650:	6803      	ldr	r3, [r0, #0]
 801d652:	42ae      	cmp	r6, r5
 801d654:	bfc8      	it	gt
 801d656:	1b76      	subgt	r6, r6, r5
 801d658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d65a:	bfcc      	ite	gt
 801d65c:	b2b6      	uxthgt	r6, r6
 801d65e:	2600      	movle	r6, #0
 801d660:	4798      	blx	r3
 801d662:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d664:	7b5a      	ldrb	r2, [r3, #13]
 801d666:	00d1      	lsls	r1, r2, #3
 801d668:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801d66c:	7a19      	ldrb	r1, [r3, #8]
 801d66e:	4339      	orrs	r1, r7
 801d670:	0657      	lsls	r7, r2, #25
 801d672:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801d674:	bf44      	itt	mi
 801d676:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801d67a:	b209      	sxthmi	r1, r1
 801d67c:	19c7      	adds	r7, r0, r7
 801d67e:	1a7f      	subs	r7, r7, r1
 801d680:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801d682:	b2bf      	uxth	r7, r7
 801d684:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801d688:	fa0f fa87 	sxth.w	sl, r7
 801d68c:	4551      	cmp	r1, sl
 801d68e:	dd3a      	ble.n	801d706 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 801d690:	0112      	lsls	r2, r2, #4
 801d692:	79d8      	ldrb	r0, [r3, #7]
 801d694:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d698:	4302      	orrs	r2, r0
 801d69a:	4492      	add	sl, r2
 801d69c:	4551      	cmp	r1, sl
 801d69e:	dc2e      	bgt.n	801d6fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801d6a0:	1bcf      	subs	r7, r1, r7
 801d6a2:	b2bf      	uxth	r7, r7
 801d6a4:	468a      	mov	sl, r1
 801d6a6:	9319      	str	r3, [sp, #100]	; 0x64
 801d6a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d6aa:	f8d8 0000 	ldr.w	r0, [r8]
 801d6ae:	681a      	ldr	r2, [r3, #0]
 801d6b0:	6801      	ldr	r1, [r0, #0]
 801d6b2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801d6b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801d6b6:	9313      	str	r3, [sp, #76]	; 0x4c
 801d6b8:	9218      	str	r2, [sp, #96]	; 0x60
 801d6ba:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801d6bc:	4788      	blx	r1
 801d6be:	f898 1006 	ldrb.w	r1, [r8, #6]
 801d6c2:	910b      	str	r1, [sp, #44]	; 0x2c
 801d6c4:	f898 100e 	ldrb.w	r1, [r8, #14]
 801d6c8:	910a      	str	r1, [sp, #40]	; 0x28
 801d6ca:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801d6ce:	9109      	str	r1, [sp, #36]	; 0x24
 801d6d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801d6d2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801d6d6:	9305      	str	r3, [sp, #20]
 801d6d8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801d6da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d6dc:	9206      	str	r2, [sp, #24]
 801d6de:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801d6e2:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801d6e6:	e9cd a601 	strd	sl, r6, [sp, #4]
 801d6ea:	442e      	add	r6, r5
 801d6ec:	b236      	sxth	r6, r6
 801d6ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d6f0:	9600      	str	r6, [sp, #0]
 801d6f2:	681a      	ldr	r2, [r3, #0]
 801d6f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 801d6f6:	685b      	ldr	r3, [r3, #4]
 801d6f8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d6fa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d6fc:	47b0      	blx	r6
 801d6fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d700:	3301      	adds	r3, #1
 801d702:	930e      	str	r3, [sp, #56]	; 0x38
 801d704:	e6e3      	b.n	801d4ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801d706:	2700      	movs	r7, #0
 801d708:	e7cd      	b.n	801d6a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 801d70a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801d70c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801d70e:	3501      	adds	r5, #1
 801d710:	429d      	cmp	r5, r3
 801d712:	f6bf af77 	bge.w	801d604 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801d716:	4659      	mov	r1, fp
 801d718:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801d71a:	f7f8 fb0b 	bl	8015d34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d71e:	4604      	mov	r4, r0
 801d720:	b110      	cbz	r0, 801d728 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 801d722:	280a      	cmp	r0, #10
 801d724:	d1f2      	bne.n	801d70c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 801d726:	e76c      	b.n	801d602 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801d728:	2400      	movs	r4, #0
 801d72a:	e76b      	b.n	801d604 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801d72c:	f1bb 0f00 	cmp.w	fp, #0
 801d730:	f43f af5c 	beq.w	801d5ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 801d734:	e777      	b.n	801d626 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801d736 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801d736:	b530      	push	{r4, r5, lr}
 801d738:	8a44      	ldrh	r4, [r0, #18]
 801d73a:	8ac5      	ldrh	r5, [r0, #22]
 801d73c:	82c3      	strh	r3, [r0, #22]
 801d73e:	442c      	add	r4, r5
 801d740:	1ae4      	subs	r4, r4, r3
 801d742:	8244      	strh	r4, [r0, #18]
 801d744:	8b03      	ldrh	r3, [r0, #24]
 801d746:	8a84      	ldrh	r4, [r0, #20]
 801d748:	4422      	add	r2, r4
 801d74a:	440c      	add	r4, r1
 801d74c:	1a59      	subs	r1, r3, r1
 801d74e:	8342      	strh	r2, [r0, #26]
 801d750:	8284      	strh	r4, [r0, #20]
 801d752:	8301      	strh	r1, [r0, #24]
 801d754:	bd30      	pop	{r4, r5, pc}

0801d756 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801d756:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d75a:	7a43      	ldrb	r3, [r0, #9]
 801d75c:	1eda      	subs	r2, r3, #3
 801d75e:	b087      	sub	sp, #28
 801d760:	4604      	mov	r4, r0
 801d762:	b2d2      	uxtb	r2, r2
 801d764:	460f      	mov	r7, r1
 801d766:	2900      	cmp	r1, #0
 801d768:	d036      	beq.n	801d7d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801d76a:	2a01      	cmp	r2, #1
 801d76c:	d932      	bls.n	801d7d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801d76e:	1e58      	subs	r0, r3, #1
 801d770:	f1d0 0b00 	rsbs	fp, r0, #0
 801d774:	eb4b 0b00 	adc.w	fp, fp, r0
 801d778:	1e99      	subs	r1, r3, #2
 801d77a:	424b      	negs	r3, r1
 801d77c:	414b      	adcs	r3, r1
 801d77e:	9303      	str	r3, [sp, #12]
 801d780:	2300      	movs	r3, #0
 801d782:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801d786:	2500      	movs	r5, #0
 801d788:	8265      	strh	r5, [r4, #18]
 801d78a:	82a5      	strh	r5, [r4, #20]
 801d78c:	46a9      	mov	r9, r5
 801d78e:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801d792:	2300      	movs	r3, #0
 801d794:	9305      	str	r3, [sp, #20]
 801d796:	8823      	ldrh	r3, [r4, #0]
 801d798:	2b20      	cmp	r3, #32
 801d79a:	d02b      	beq.n	801d7f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801d79c:	eba3 020a 	sub.w	r2, r3, sl
 801d7a0:	4256      	negs	r6, r2
 801d7a2:	4156      	adcs	r6, r2
 801d7a4:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801d7a8:	4293      	cmp	r3, r2
 801d7aa:	d004      	beq.n	801d7b6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801d7ac:	4553      	cmp	r3, sl
 801d7ae:	bf16      	itet	ne
 801d7b0:	4699      	movne	r9, r3
 801d7b2:	2601      	moveq	r6, #1
 801d7b4:	2600      	movne	r6, #0
 801d7b6:	ab05      	add	r3, sp, #20
 801d7b8:	68e2      	ldr	r2, [r4, #12]
 801d7ba:	7a21      	ldrb	r1, [r4, #8]
 801d7bc:	6860      	ldr	r0, [r4, #4]
 801d7be:	f002 fd89 	bl	80202d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801d7c2:	8020      	strh	r0, [r4, #0]
 801d7c4:	b9c8      	cbnz	r0, 801d7fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801d7c6:	8b22      	ldrh	r2, [r4, #24]
 801d7c8:	2300      	movs	r3, #0
 801d7ca:	4611      	mov	r1, r2
 801d7cc:	4620      	mov	r0, r4
 801d7ce:	f7ff ffb2 	bl	801d736 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801d7d2:	e066      	b.n	801d8a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801d7d4:	468b      	mov	fp, r1
 801d7d6:	e7cf      	b.n	801d778 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801d7d8:	3b01      	subs	r3, #1
 801d7da:	2a01      	cmp	r2, #1
 801d7dc:	bf8c      	ite	hi
 801d7de:	2200      	movhi	r2, #0
 801d7e0:	2201      	movls	r2, #1
 801d7e2:	2b01      	cmp	r3, #1
 801d7e4:	bf8c      	ite	hi
 801d7e6:	2300      	movhi	r3, #0
 801d7e8:	2301      	movls	r3, #1
 801d7ea:	9202      	str	r2, [sp, #8]
 801d7ec:	9301      	str	r3, [sp, #4]
 801d7ee:	9103      	str	r1, [sp, #12]
 801d7f0:	468b      	mov	fp, r1
 801d7f2:	e7c8      	b.n	801d786 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801d7f4:	4699      	mov	r9, r3
 801d7f6:	2601      	movs	r6, #1
 801d7f8:	e7dd      	b.n	801d7b6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801d7fa:	8ae3      	ldrh	r3, [r4, #22]
 801d7fc:	280a      	cmp	r0, #10
 801d7fe:	f103 0301 	add.w	r3, r3, #1
 801d802:	82e3      	strh	r3, [r4, #22]
 801d804:	d0df      	beq.n	801d7c6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801d806:	9a05      	ldr	r2, [sp, #20]
 801d808:	bb42      	cbnz	r2, 801d85c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801d80a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801d80e:	4298      	cmp	r0, r3
 801d810:	d001      	beq.n	801d816 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801d812:	4550      	cmp	r0, sl
 801d814:	d1bd      	bne.n	801d792 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801d816:	8823      	ldrh	r3, [r4, #0]
 801d818:	8b21      	ldrh	r1, [r4, #24]
 801d81a:	2b20      	cmp	r3, #32
 801d81c:	d001      	beq.n	801d822 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801d81e:	4553      	cmp	r3, sl
 801d820:	d131      	bne.n	801d886 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801d822:	2e00      	cmp	r6, #0
 801d824:	bf0a      	itet	eq
 801d826:	460d      	moveq	r5, r1
 801d828:	4630      	movne	r0, r6
 801d82a:	2001      	moveq	r0, #1
 801d82c:	440a      	add	r2, r1
 801d82e:	8aa3      	ldrh	r3, [r4, #20]
 801d830:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801d834:	b292      	uxth	r2, r2
 801d836:	8322      	strh	r2, [r4, #24]
 801d838:	4413      	add	r3, r2
 801d83a:	2f00      	cmp	r7, #0
 801d83c:	d03a      	beq.n	801d8b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801d83e:	f1bb 0f00 	cmp.w	fp, #0
 801d842:	d102      	bne.n	801d84a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801d844:	9903      	ldr	r1, [sp, #12]
 801d846:	b301      	cbz	r1, 801d88a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801d848:	b1f8      	cbz	r0, 801d88a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801d84a:	8ba1      	ldrh	r1, [r4, #28]
 801d84c:	4419      	add	r1, r3
 801d84e:	458c      	cmp	ip, r1
 801d850:	da2a      	bge.n	801d8a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801d852:	8a61      	ldrh	r1, [r4, #18]
 801d854:	b341      	cbz	r1, 801d8a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801d856:	4563      	cmp	r3, ip
 801d858:	dd9b      	ble.n	801d792 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801d85a:	e01c      	b.n	801d896 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801d85c:	8893      	ldrh	r3, [r2, #4]
 801d85e:	8023      	strh	r3, [r4, #0]
 801d860:	f892 800d 	ldrb.w	r8, [r2, #13]
 801d864:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801d868:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801d86c:	f892 800a 	ldrb.w	r8, [r2, #10]
 801d870:	ea48 0800 	orr.w	r8, r8, r0
 801d874:	68e0      	ldr	r0, [r4, #12]
 801d876:	6803      	ldr	r3, [r0, #0]
 801d878:	4649      	mov	r1, r9
 801d87a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d87c:	4798      	blx	r3
 801d87e:	eb08 0200 	add.w	r2, r8, r0
 801d882:	b292      	uxth	r2, r2
 801d884:	e7c7      	b.n	801d816 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801d886:	2000      	movs	r0, #0
 801d888:	e7d0      	b.n	801d82c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801d88a:	4563      	cmp	r3, ip
 801d88c:	dd81      	ble.n	801d792 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801d88e:	8a63      	ldrh	r3, [r4, #18]
 801d890:	2b00      	cmp	r3, #0
 801d892:	f43f af7e 	beq.w	801d792 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801d896:	2301      	movs	r3, #1
 801d898:	77a3      	strb	r3, [r4, #30]
 801d89a:	8ba2      	ldrh	r2, [r4, #28]
 801d89c:	8b63      	ldrh	r3, [r4, #26]
 801d89e:	4413      	add	r3, r2
 801d8a0:	8363      	strh	r3, [r4, #26]
 801d8a2:	b007      	add	sp, #28
 801d8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8a8:	2300      	movs	r3, #0
 801d8aa:	4611      	mov	r1, r2
 801d8ac:	4620      	mov	r0, r4
 801d8ae:	f7ff ff42 	bl	801d736 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801d8b2:	e76e      	b.n	801d792 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801d8b4:	4563      	cmp	r3, ip
 801d8b6:	dd14      	ble.n	801d8e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801d8b8:	9b02      	ldr	r3, [sp, #8]
 801d8ba:	b113      	cbz	r3, 801d8c2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801d8bc:	2301      	movs	r3, #1
 801d8be:	460a      	mov	r2, r1
 801d8c0:	e783      	b.n	801d7ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801d8c2:	9b01      	ldr	r3, [sp, #4]
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	f43f af64 	beq.w	801d792 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801d8ca:	2800      	cmp	r0, #0
 801d8cc:	f47f af61 	bne.w	801d792 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801d8d0:	b116      	cbz	r6, 801d8d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801d8d2:	2301      	movs	r3, #1
 801d8d4:	462a      	mov	r2, r5
 801d8d6:	e779      	b.n	801d7cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801d8d8:	8a63      	ldrh	r3, [r4, #18]
 801d8da:	2b00      	cmp	r3, #0
 801d8dc:	f43f af59 	beq.w	801d792 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801d8e0:	e7df      	b.n	801d8a2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801d8e2:	2800      	cmp	r0, #0
 801d8e4:	f47f af55 	bne.w	801d792 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801d8e8:	2e00      	cmp	r6, #0
 801d8ea:	f43f af52 	beq.w	801d792 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801d8ee:	2301      	movs	r3, #1
 801d8f0:	462a      	mov	r2, r5
 801d8f2:	e7db      	b.n	801d8ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801d8f4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801d8f4:	b530      	push	{r4, r5, lr}
 801d8f6:	4605      	mov	r5, r0
 801d8f8:	b08b      	sub	sp, #44	; 0x2c
 801d8fa:	b191      	cbz	r1, 801d922 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801d8fc:	e9cd 3100 	strd	r3, r1, [sp]
 801d900:	4613      	mov	r3, r2
 801d902:	4601      	mov	r1, r0
 801d904:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801d908:	a802      	add	r0, sp, #8
 801d90a:	f7ff fd09 	bl	801d320 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801d90e:	2401      	movs	r4, #1
 801d910:	2100      	movs	r1, #0
 801d912:	a802      	add	r0, sp, #8
 801d914:	f7ff ff1f 	bl	801d756 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801d918:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801d91c:	b163      	cbz	r3, 801d938 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801d91e:	3401      	adds	r4, #1
 801d920:	e7f6      	b.n	801d910 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801d922:	f002 fda5 	bl	8020470 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801d926:	2401      	movs	r4, #1
 801d928:	280a      	cmp	r0, #10
 801d92a:	4628      	mov	r0, r5
 801d92c:	bf08      	it	eq
 801d92e:	3401      	addeq	r4, #1
 801d930:	f002 fd9e 	bl	8020470 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801d934:	2800      	cmp	r0, #0
 801d936:	d1f7      	bne.n	801d928 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801d938:	b2a0      	uxth	r0, r4
 801d93a:	b00b      	add	sp, #44	; 0x2c
 801d93c:	bd30      	pop	{r4, r5, pc}

0801d93e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801d93e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d942:	b0e5      	sub	sp, #404	; 0x194
 801d944:	4689      	mov	r9, r1
 801d946:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801d94a:	900a      	str	r0, [sp, #40]	; 0x28
 801d94c:	461c      	mov	r4, r3
 801d94e:	f1ba 0f00 	cmp.w	sl, #0
 801d952:	f000 80b4 	beq.w	801dabe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801d956:	681b      	ldr	r3, [r3, #0]
 801d958:	2b00      	cmp	r3, #0
 801d95a:	f000 80b0 	beq.w	801dabe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801d95e:	7ba3      	ldrb	r3, [r4, #14]
 801d960:	2b00      	cmp	r3, #0
 801d962:	f000 80ac 	beq.w	801dabe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801d966:	6810      	ldr	r0, [r2, #0]
 801d968:	6851      	ldr	r1, [r2, #4]
 801d96a:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801d96e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801d972:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801d976:	4643      	mov	r3, r8
 801d978:	c303      	stmia	r3!, {r0, r1}
 801d97a:	2500      	movs	r5, #0
 801d97c:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801d980:	79a2      	ldrb	r2, [r4, #6]
 801d982:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801d986:	a90f      	add	r1, sp, #60	; 0x3c
 801d988:	4640      	mov	r0, r8
 801d98a:	950f      	str	r5, [sp, #60]	; 0x3c
 801d98c:	f7ff fd40 	bl	801d410 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801d990:	a90f      	add	r1, sp, #60	; 0x3c
 801d992:	4608      	mov	r0, r1
 801d994:	79a2      	ldrb	r2, [r4, #6]
 801d996:	af19      	add	r7, sp, #100	; 0x64
 801d998:	f7ff fd3a 	bl	801d410 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801d99c:	4638      	mov	r0, r7
 801d99e:	f002 f93b 	bl	801fc18 <_ZN8touchgfx12TextProviderC1Ev>
 801d9a2:	6820      	ldr	r0, [r4, #0]
 801d9a4:	6803      	ldr	r3, [r0, #0]
 801d9a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d9a8:	4798      	blx	r3
 801d9aa:	4606      	mov	r6, r0
 801d9ac:	6820      	ldr	r0, [r4, #0]
 801d9ae:	6803      	ldr	r3, [r0, #0]
 801d9b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d9b2:	4798      	blx	r3
 801d9b4:	4633      	mov	r3, r6
 801d9b6:	9000      	str	r0, [sp, #0]
 801d9b8:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801d9ba:	4651      	mov	r1, sl
 801d9bc:	4638      	mov	r0, r7
 801d9be:	f002 f986 	bl	801fcce <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801d9c2:	6820      	ldr	r0, [r4, #0]
 801d9c4:	7923      	ldrb	r3, [r4, #4]
 801d9c6:	9308      	str	r3, [sp, #32]
 801d9c8:	6803      	ldr	r3, [r0, #0]
 801d9ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d9cc:	4798      	blx	r3
 801d9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d9d2:	181e      	adds	r6, r3, r0
 801d9d4:	42ae      	cmp	r6, r5
 801d9d6:	dd06      	ble.n	801d9e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801d9d8:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801d9dc:	4282      	cmp	r2, r0
 801d9de:	bfa4      	itt	ge
 801d9e0:	189d      	addge	r5, r3, r2
 801d9e2:	fb95 f5f6 	sdivge	r5, r5, r6
 801d9e6:	a832      	add	r0, sp, #200	; 0xc8
 801d9e8:	f002 f916 	bl	801fc18 <_ZN8touchgfx12TextProviderC1Ev>
 801d9ec:	7c23      	ldrb	r3, [r4, #16]
 801d9ee:	b17b      	cbz	r3, 801da10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801d9f0:	6820      	ldr	r0, [r4, #0]
 801d9f2:	6803      	ldr	r3, [r0, #0]
 801d9f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d9f6:	4798      	blx	r3
 801d9f8:	4683      	mov	fp, r0
 801d9fa:	6820      	ldr	r0, [r4, #0]
 801d9fc:	6803      	ldr	r3, [r0, #0]
 801d9fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801da00:	4798      	blx	r3
 801da02:	465b      	mov	r3, fp
 801da04:	9000      	str	r0, [sp, #0]
 801da06:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801da08:	4651      	mov	r1, sl
 801da0a:	a832      	add	r0, sp, #200	; 0xc8
 801da0c:	f002 f95f 	bl	801fcce <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801da10:	7be1      	ldrb	r1, [r4, #15]
 801da12:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801da16:	7963      	ldrb	r3, [r4, #5]
 801da18:	1a52      	subs	r2, r2, r1
 801da1a:	7c21      	ldrb	r1, [r4, #16]
 801da1c:	9101      	str	r1, [sp, #4]
 801da1e:	6821      	ldr	r1, [r4, #0]
 801da20:	9100      	str	r1, [sp, #0]
 801da22:	b292      	uxth	r2, r2
 801da24:	a932      	add	r1, sp, #200	; 0xc8
 801da26:	a811      	add	r0, sp, #68	; 0x44
 801da28:	f7ff fc7a 	bl	801d320 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801da2c:	7c23      	ldrb	r3, [r4, #16]
 801da2e:	b9bb      	cbnz	r3, 801da60 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801da30:	fa1f fa86 	uxth.w	sl, r6
 801da34:	2d00      	cmp	r5, #0
 801da36:	dd45      	ble.n	801dac4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801da38:	4638      	mov	r0, r7
 801da3a:	f002 fd19 	bl	8020470 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801da3e:	2800      	cmp	r0, #0
 801da40:	d03d      	beq.n	801dabe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801da42:	280a      	cmp	r0, #10
 801da44:	d1f6      	bne.n	801da34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801da46:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801da4a:	4453      	add	r3, sl
 801da4c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801da50:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801da54:	eba3 030a 	sub.w	r3, r3, sl
 801da58:	3d01      	subs	r5, #1
 801da5a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801da5e:	e7e9      	b.n	801da34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801da60:	0073      	lsls	r3, r6, #1
 801da62:	9309      	str	r3, [sp, #36]	; 0x24
 801da64:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801da68:	fa1f fa86 	uxth.w	sl, r6
 801da6c:	2d00      	cmp	r5, #0
 801da6e:	dd29      	ble.n	801dac4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801da70:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801da74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da76:	428b      	cmp	r3, r1
 801da78:	bfd4      	ite	le
 801da7a:	2100      	movle	r1, #0
 801da7c:	2101      	movgt	r1, #1
 801da7e:	a811      	add	r0, sp, #68	; 0x44
 801da80:	f7ff fe69 	bl	801d756 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801da84:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801da88:	3b01      	subs	r3, #1
 801da8a:	b29b      	uxth	r3, r3
 801da8c:	455b      	cmp	r3, fp
 801da8e:	930b      	str	r3, [sp, #44]	; 0x2c
 801da90:	d005      	beq.n	801da9e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801da92:	7961      	ldrb	r1, [r4, #5]
 801da94:	4638      	mov	r0, r7
 801da96:	f7f8 f94d 	bl	8015d34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801da9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801da9c:	e7f4      	b.n	801da88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801da9e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801daa2:	4453      	add	r3, sl
 801daa4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801daa8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801daac:	eba3 030a 	sub.w	r3, r3, sl
 801dab0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801dab4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801dab8:	3d01      	subs	r5, #1
 801daba:	2b00      	cmp	r3, #0
 801dabc:	d1d6      	bne.n	801da6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801dabe:	b065      	add	sp, #404	; 0x194
 801dac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dac4:	0075      	lsls	r5, r6, #1
 801dac6:	f04f 0a00 	mov.w	sl, #0
 801daca:	7c23      	ldrb	r3, [r4, #16]
 801dacc:	2b00      	cmp	r3, #0
 801dace:	d066      	beq.n	801db9e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801dad0:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801dad4:	428d      	cmp	r5, r1
 801dad6:	bfd4      	ite	le
 801dad8:	2100      	movle	r1, #0
 801dada:	2101      	movgt	r1, #1
 801dadc:	a811      	add	r0, sp, #68	; 0x44
 801dade:	f7ff fe3a 	bl	801d756 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801dae2:	9b08      	ldr	r3, [sp, #32]
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	d055      	beq.n	801db94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801dae8:	f894 b010 	ldrb.w	fp, [r4, #16]
 801daec:	2264      	movs	r2, #100	; 0x64
 801daee:	4639      	mov	r1, r7
 801daf0:	a84b      	add	r0, sp, #300	; 0x12c
 801daf2:	f010 f863 	bl	802dbbc <memcpy>
 801daf6:	f1bb 0f00 	cmp.w	fp, #0
 801dafa:	d058      	beq.n	801dbae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801dafc:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801db00:	7922      	ldrb	r2, [r4, #4]
 801db02:	2a01      	cmp	r2, #1
 801db04:	d13c      	bne.n	801db80 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801db06:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801db0a:	1ac0      	subs	r0, r0, r3
 801db0c:	2302      	movs	r3, #2
 801db0e:	fb90 f0f3 	sdiv	r0, r0, r3
 801db12:	b200      	sxth	r0, r0
 801db14:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801db18:	4418      	add	r0, r3
 801db1a:	7c23      	ldrb	r3, [r4, #16]
 801db1c:	b200      	sxth	r0, r0
 801db1e:	2b00      	cmp	r3, #0
 801db20:	d03a      	beq.n	801db98 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801db22:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801db26:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801db2a:	9000      	str	r0, [sp, #0]
 801db2c:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801db30:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801db34:	980a      	ldr	r0, [sp, #40]	; 0x28
 801db36:	e9cd a703 	strd	sl, r7, [sp, #12]
 801db3a:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801db3e:	464a      	mov	r2, r9
 801db40:	2100      	movs	r1, #0
 801db42:	f7ff fc96 	bl	801d472 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801db46:	2800      	cmp	r0, #0
 801db48:	d1b9      	bne.n	801dabe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801db4a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801db4e:	b2b2      	uxth	r2, r6
 801db50:	4611      	mov	r1, r2
 801db52:	4413      	add	r3, r2
 801db54:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801db58:	1a52      	subs	r2, r2, r1
 801db5a:	7c21      	ldrb	r1, [r4, #16]
 801db5c:	b21b      	sxth	r3, r3
 801db5e:	b212      	sxth	r2, r2
 801db60:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801db64:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801db68:	b109      	cbz	r1, 801db6e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 801db6a:	42b2      	cmp	r2, r6
 801db6c:	dba7      	blt.n	801dabe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801db6e:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801db72:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801db76:	440a      	add	r2, r1
 801db78:	b212      	sxth	r2, r2
 801db7a:	4293      	cmp	r3, r2
 801db7c:	dda5      	ble.n	801daca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 801db7e:	e79e      	b.n	801dabe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801db80:	2a02      	cmp	r2, #2
 801db82:	d105      	bne.n	801db90 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801db84:	7be2      	ldrb	r2, [r4, #15]
 801db86:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801db8a:	1a80      	subs	r0, r0, r2
 801db8c:	1ac0      	subs	r0, r0, r3
 801db8e:	e7c0      	b.n	801db12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 801db90:	2000      	movs	r0, #0
 801db92:	e7bf      	b.n	801db14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801db94:	7be0      	ldrb	r0, [r4, #15]
 801db96:	e7bd      	b.n	801db14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801db98:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801db9c:	e7c3      	b.n	801db26 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 801db9e:	9b08      	ldr	r3, [sp, #32]
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	d0f7      	beq.n	801db94 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801dba4:	2264      	movs	r2, #100	; 0x64
 801dba6:	4639      	mov	r1, r7
 801dba8:	a84b      	add	r0, sp, #300	; 0x12c
 801dbaa:	f010 f807 	bl	802dbbc <memcpy>
 801dbae:	2300      	movs	r3, #0
 801dbb0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801dbb4:	6821      	ldr	r1, [r4, #0]
 801dbb6:	a84b      	add	r0, sp, #300	; 0x12c
 801dbb8:	f7ff fbee 	bl	801d398 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801dbbc:	b203      	sxth	r3, r0
 801dbbe:	e79f      	b.n	801db00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

0801dbc0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801dbc0:	2b03      	cmp	r3, #3
 801dbc2:	d818      	bhi.n	801dbf6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801dbc4:	e8df f003 	tbb	[pc, r3]
 801dbc8:	130d0602 	.word	0x130d0602
 801dbcc:	f9b0 2000 	ldrsh.w	r2, [r0]
 801dbd0:	1850      	adds	r0, r2, r1
 801dbd2:	4770      	bx	lr
 801dbd4:	8803      	ldrh	r3, [r0, #0]
 801dbd6:	8880      	ldrh	r0, [r0, #4]
 801dbd8:	4418      	add	r0, r3
 801dbda:	b200      	sxth	r0, r0
 801dbdc:	1a80      	subs	r0, r0, r2
 801dbde:	3801      	subs	r0, #1
 801dbe0:	4770      	bx	lr
 801dbe2:	8803      	ldrh	r3, [r0, #0]
 801dbe4:	8880      	ldrh	r0, [r0, #4]
 801dbe6:	4418      	add	r0, r3
 801dbe8:	b200      	sxth	r0, r0
 801dbea:	1a40      	subs	r0, r0, r1
 801dbec:	e7f7      	b.n	801dbde <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801dbee:	f9b0 0000 	ldrsh.w	r0, [r0]
 801dbf2:	4410      	add	r0, r2
 801dbf4:	4770      	bx	lr
 801dbf6:	2000      	movs	r0, #0
 801dbf8:	4770      	bx	lr

0801dbfa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801dbfa:	2b03      	cmp	r3, #3
 801dbfc:	d817      	bhi.n	801dc2e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801dbfe:	e8df f003 	tbb	[pc, r3]
 801dc02:	0602      	.short	0x0602
 801dc04:	1009      	.short	0x1009
 801dc06:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801dc0a:	1850      	adds	r0, r2, r1
 801dc0c:	4770      	bx	lr
 801dc0e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801dc12:	e7fa      	b.n	801dc0a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801dc14:	8843      	ldrh	r3, [r0, #2]
 801dc16:	88c0      	ldrh	r0, [r0, #6]
 801dc18:	4418      	add	r0, r3
 801dc1a:	b200      	sxth	r0, r0
 801dc1c:	1a80      	subs	r0, r0, r2
 801dc1e:	3801      	subs	r0, #1
 801dc20:	4770      	bx	lr
 801dc22:	8843      	ldrh	r3, [r0, #2]
 801dc24:	88c0      	ldrh	r0, [r0, #6]
 801dc26:	4418      	add	r0, r3
 801dc28:	b200      	sxth	r0, r0
 801dc2a:	1a40      	subs	r0, r0, r1
 801dc2c:	e7f7      	b.n	801dc1e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801dc2e:	2000      	movs	r0, #0
 801dc30:	4770      	bx	lr
	...

0801dc34 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801dc34:	4b01      	ldr	r3, [pc, #4]	; (801dc3c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801dc36:	2200      	movs	r2, #0
 801dc38:	601a      	str	r2, [r3, #0]
 801dc3a:	4770      	bx	lr
 801dc3c:	2000f174 	.word	0x2000f174

0801dc40 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801dc40:	4603      	mov	r3, r0
 801dc42:	b1c8      	cbz	r0, 801dc78 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801dc44:	0c02      	lsrs	r2, r0, #16
 801dc46:	0412      	lsls	r2, r2, #16
 801dc48:	b9a2      	cbnz	r2, 801dc74 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801dc4a:	0403      	lsls	r3, r0, #16
 801dc4c:	2010      	movs	r0, #16
 801dc4e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801dc52:	bf04      	itt	eq
 801dc54:	021b      	lsleq	r3, r3, #8
 801dc56:	3008      	addeq	r0, #8
 801dc58:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801dc5c:	bf04      	itt	eq
 801dc5e:	011b      	lsleq	r3, r3, #4
 801dc60:	3004      	addeq	r0, #4
 801dc62:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801dc66:	bf04      	itt	eq
 801dc68:	009b      	lsleq	r3, r3, #2
 801dc6a:	3002      	addeq	r0, #2
 801dc6c:	2b00      	cmp	r3, #0
 801dc6e:	db04      	blt.n	801dc7a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801dc70:	3001      	adds	r0, #1
 801dc72:	4770      	bx	lr
 801dc74:	2000      	movs	r0, #0
 801dc76:	e7ea      	b.n	801dc4e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801dc78:	2020      	movs	r0, #32
 801dc7a:	4770      	bx	lr

0801dc7c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801dc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc80:	b087      	sub	sp, #28
 801dc82:	4681      	mov	r9, r0
 801dc84:	4698      	mov	r8, r3
 801dc86:	4610      	mov	r0, r2
 801dc88:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801dc8c:	460d      	mov	r5, r1
 801dc8e:	b981      	cbnz	r1, 801dcb2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801dc90:	b14b      	cbz	r3, 801dca6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801dc92:	460b      	mov	r3, r1
 801dc94:	e9cd 4700 	strd	r4, r7, [sp]
 801dc98:	464a      	mov	r2, r9
 801dc9a:	4641      	mov	r1, r8
 801dc9c:	f7ff ffee 	bl	801dc7c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801dca0:	b007      	add	sp, #28
 801dca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dca6:	f04f 33ff 	mov.w	r3, #4294967295
 801dcaa:	603b      	str	r3, [r7, #0]
 801dcac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801dcb0:	e7f6      	b.n	801dca0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801dcb2:	fa32 fa01 	lsrs.w	sl, r2, r1
 801dcb6:	d107      	bne.n	801dcc8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801dcb8:	fb09 f602 	mul.w	r6, r9, r2
 801dcbc:	fbb6 f0f4 	udiv	r0, r6, r4
 801dcc0:	fb04 6610 	mls	r6, r4, r0, r6
 801dcc4:	603e      	str	r6, [r7, #0]
 801dcc6:	e7eb      	b.n	801dca0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801dcc8:	2601      	movs	r6, #1
 801dcca:	408e      	lsls	r6, r1
 801dccc:	3e01      	subs	r6, #1
 801dcce:	4016      	ands	r6, r2
 801dcd0:	fa09 fb01 	lsl.w	fp, r9, r1
 801dcd4:	4630      	mov	r0, r6
 801dcd6:	fbbb f3f4 	udiv	r3, fp, r4
 801dcda:	9302      	str	r3, [sp, #8]
 801dcdc:	fb0a f303 	mul.w	r3, sl, r3
 801dce0:	9303      	str	r3, [sp, #12]
 801dce2:	f7ff ffad 	bl	801dc40 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801dce6:	464a      	mov	r2, r9
 801dce8:	460b      	mov	r3, r1
 801dcea:	e9cd 4700 	strd	r4, r7, [sp]
 801dcee:	4601      	mov	r1, r0
 801dcf0:	4630      	mov	r0, r6
 801dcf2:	f7ff ffc3 	bl	801dc7c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801dcf6:	9b02      	ldr	r3, [sp, #8]
 801dcf8:	fb04 bb13 	mls	fp, r4, r3, fp
 801dcfc:	4606      	mov	r6, r0
 801dcfe:	4658      	mov	r0, fp
 801dd00:	eb05 0108 	add.w	r1, r5, r8
 801dd04:	f7ff ff9c 	bl	801dc40 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801dd08:	ab05      	add	r3, sp, #20
 801dd0a:	e9cd 4300 	strd	r4, r3, [sp]
 801dd0e:	465a      	mov	r2, fp
 801dd10:	4603      	mov	r3, r0
 801dd12:	4650      	mov	r0, sl
 801dd14:	f7ff ffb2 	bl	801dc7c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801dd18:	6839      	ldr	r1, [r7, #0]
 801dd1a:	9a05      	ldr	r2, [sp, #20]
 801dd1c:	9b03      	ldr	r3, [sp, #12]
 801dd1e:	4411      	add	r1, r2
 801dd20:	fbb1 f2f4 	udiv	r2, r1, r4
 801dd24:	18d3      	adds	r3, r2, r3
 801dd26:	441e      	add	r6, r3
 801dd28:	fb04 1412 	mls	r4, r4, r2, r1
 801dd2c:	4430      	add	r0, r6
 801dd2e:	603c      	str	r4, [r7, #0]
 801dd30:	e7b6      	b.n	801dca0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801dd32 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801dd32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dd36:	b085      	sub	sp, #20
 801dd38:	f1b0 0900 	subs.w	r9, r0, #0
 801dd3c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801dd3e:	461d      	mov	r5, r3
 801dd40:	bfbf      	itttt	lt
 801dd42:	6823      	ldrlt	r3, [r4, #0]
 801dd44:	425b      	neglt	r3, r3
 801dd46:	f1c9 0900 	rsblt	r9, r9, #0
 801dd4a:	6023      	strlt	r3, [r4, #0]
 801dd4c:	bfb4      	ite	lt
 801dd4e:	f04f 36ff 	movlt.w	r6, #4294967295
 801dd52:	2601      	movge	r6, #1
 801dd54:	2a00      	cmp	r2, #0
 801dd56:	4617      	mov	r7, r2
 801dd58:	da04      	bge.n	801dd64 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801dd5a:	6823      	ldr	r3, [r4, #0]
 801dd5c:	425b      	negs	r3, r3
 801dd5e:	4257      	negs	r7, r2
 801dd60:	4276      	negs	r6, r6
 801dd62:	6023      	str	r3, [r4, #0]
 801dd64:	2d00      	cmp	r5, #0
 801dd66:	4638      	mov	r0, r7
 801dd68:	bfba      	itte	lt
 801dd6a:	426d      	neglt	r5, r5
 801dd6c:	f04f 38ff 	movlt.w	r8, #4294967295
 801dd70:	f04f 0801 	movge.w	r8, #1
 801dd74:	f7ff ff64 	bl	801dc40 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801dd78:	ab03      	add	r3, sp, #12
 801dd7a:	e9cd 5300 	strd	r5, r3, [sp]
 801dd7e:	463a      	mov	r2, r7
 801dd80:	4603      	mov	r3, r0
 801dd82:	4648      	mov	r0, r9
 801dd84:	f7ff ff7a 	bl	801dc7c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801dd88:	6823      	ldr	r3, [r4, #0]
 801dd8a:	9a03      	ldr	r2, [sp, #12]
 801dd8c:	4546      	cmp	r6, r8
 801dd8e:	441a      	add	r2, r3
 801dd90:	fb92 f3f5 	sdiv	r3, r2, r5
 801dd94:	4418      	add	r0, r3
 801dd96:	bf18      	it	ne
 801dd98:	4240      	negne	r0, r0
 801dd9a:	fb05 2313 	mls	r3, r5, r3, r2
 801dd9e:	1c72      	adds	r2, r6, #1
 801dda0:	6023      	str	r3, [r4, #0]
 801dda2:	d105      	bne.n	801ddb0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801dda4:	2b00      	cmp	r3, #0
 801dda6:	f1c3 0200 	rsb	r2, r3, #0
 801ddaa:	db0b      	blt.n	801ddc4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801ddac:	6022      	str	r2, [r4, #0]
 801ddae:	e006      	b.n	801ddbe <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ddb0:	2e01      	cmp	r6, #1
 801ddb2:	d104      	bne.n	801ddbe <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ddb4:	2b00      	cmp	r3, #0
 801ddb6:	da02      	bge.n	801ddbe <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801ddb8:	442b      	add	r3, r5
 801ddba:	3801      	subs	r0, #1
 801ddbc:	6023      	str	r3, [r4, #0]
 801ddbe:	b005      	add	sp, #20
 801ddc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ddc4:	3801      	subs	r0, #1
 801ddc6:	1b52      	subs	r2, r2, r5
 801ddc8:	e7f0      	b.n	801ddac <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801ddcc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801ddcc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801ddd0:	4c1c      	ldr	r4, [pc, #112]	; (801de44 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801ddd2:	6807      	ldr	r7, [r0, #0]
 801ddd4:	69a3      	ldr	r3, [r4, #24]
 801ddd6:	4605      	mov	r5, r0
 801ddd8:	b92b      	cbnz	r3, 801dde6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801ddda:	6840      	ldr	r0, [r0, #4]
 801dddc:	e9c5 7000 	strd	r7, r0, [r5]
 801dde0:	b004      	add	sp, #16
 801dde2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dde6:	68a2      	ldr	r2, [r4, #8]
 801dde8:	6820      	ldr	r0, [r4, #0]
 801ddea:	ae04      	add	r6, sp, #16
 801ddec:	f04f 0802 	mov.w	r8, #2
 801ddf0:	fb93 f1f8 	sdiv	r1, r3, r8
 801ddf4:	440a      	add	r2, r1
 801ddf6:	f846 2d04 	str.w	r2, [r6, #-4]!
 801ddfa:	69e1      	ldr	r1, [r4, #28]
 801ddfc:	9600      	str	r6, [sp, #0]
 801ddfe:	463a      	mov	r2, r7
 801de00:	f7ff ff97 	bl	801dd32 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801de04:	69a3      	ldr	r3, [r4, #24]
 801de06:	686a      	ldr	r2, [r5, #4]
 801de08:	6a21      	ldr	r1, [r4, #32]
 801de0a:	9600      	str	r6, [sp, #0]
 801de0c:	4607      	mov	r7, r0
 801de0e:	6860      	ldr	r0, [r4, #4]
 801de10:	f7ff ff8f 	bl	801dd32 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801de14:	6962      	ldr	r2, [r4, #20]
 801de16:	69a3      	ldr	r3, [r4, #24]
 801de18:	fb93 f8f8 	sdiv	r8, r3, r8
 801de1c:	4442      	add	r2, r8
 801de1e:	9203      	str	r2, [sp, #12]
 801de20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801de22:	682a      	ldr	r2, [r5, #0]
 801de24:	9600      	str	r6, [sp, #0]
 801de26:	4407      	add	r7, r0
 801de28:	68e0      	ldr	r0, [r4, #12]
 801de2a:	f7ff ff82 	bl	801dd32 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801de2e:	9600      	str	r6, [sp, #0]
 801de30:	4680      	mov	r8, r0
 801de32:	69a3      	ldr	r3, [r4, #24]
 801de34:	686a      	ldr	r2, [r5, #4]
 801de36:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801de38:	6920      	ldr	r0, [r4, #16]
 801de3a:	f7ff ff7a 	bl	801dd32 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801de3e:	4440      	add	r0, r8
 801de40:	e7cc      	b.n	801dddc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801de42:	bf00      	nop
 801de44:	2000f178 	.word	0x2000f178

0801de48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801de48:	4b07      	ldr	r3, [pc, #28]	; (801de68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801de4a:	781b      	ldrb	r3, [r3, #0]
 801de4c:	2b01      	cmp	r3, #1
 801de4e:	d109      	bne.n	801de64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801de50:	f9b1 3000 	ldrsh.w	r3, [r1]
 801de54:	f9b0 2000 	ldrsh.w	r2, [r0]
 801de58:	8003      	strh	r3, [r0, #0]
 801de5a:	4b04      	ldr	r3, [pc, #16]	; (801de6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801de5c:	881b      	ldrh	r3, [r3, #0]
 801de5e:	3b01      	subs	r3, #1
 801de60:	1a9b      	subs	r3, r3, r2
 801de62:	800b      	strh	r3, [r1, #0]
 801de64:	4770      	bx	lr
 801de66:	bf00      	nop
 801de68:	2000f15a 	.word	0x2000f15a
 801de6c:	2000f156 	.word	0x2000f156

0801de70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801de70:	b510      	push	{r4, lr}
 801de72:	4b07      	ldr	r3, [pc, #28]	; (801de90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801de74:	781b      	ldrb	r3, [r3, #0]
 801de76:	2b01      	cmp	r3, #1
 801de78:	d108      	bne.n	801de8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801de7a:	4b06      	ldr	r3, [pc, #24]	; (801de94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801de7c:	880c      	ldrh	r4, [r1, #0]
 801de7e:	881b      	ldrh	r3, [r3, #0]
 801de80:	f9b0 2000 	ldrsh.w	r2, [r0]
 801de84:	3b01      	subs	r3, #1
 801de86:	1b1b      	subs	r3, r3, r4
 801de88:	8003      	strh	r3, [r0, #0]
 801de8a:	800a      	strh	r2, [r1, #0]
 801de8c:	bd10      	pop	{r4, pc}
 801de8e:	bf00      	nop
 801de90:	2000f15a 	.word	0x2000f15a
 801de94:	2000f156 	.word	0x2000f156

0801de98 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801de98:	b510      	push	{r4, lr}
 801de9a:	4b0a      	ldr	r3, [pc, #40]	; (801dec4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801de9c:	781b      	ldrb	r3, [r3, #0]
 801de9e:	2b01      	cmp	r3, #1
 801dea0:	d10e      	bne.n	801dec0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801dea2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801dea6:	8843      	ldrh	r3, [r0, #2]
 801dea8:	f9b0 4000 	ldrsh.w	r4, [r0]
 801deac:	8044      	strh	r4, [r0, #2]
 801deae:	18ca      	adds	r2, r1, r3
 801deb0:	4b05      	ldr	r3, [pc, #20]	; (801dec8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801deb2:	881b      	ldrh	r3, [r3, #0]
 801deb4:	1a9b      	subs	r3, r3, r2
 801deb6:	8003      	strh	r3, [r0, #0]
 801deb8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801debc:	80c3      	strh	r3, [r0, #6]
 801debe:	8081      	strh	r1, [r0, #4]
 801dec0:	bd10      	pop	{r4, pc}
 801dec2:	bf00      	nop
 801dec4:	2000f15a 	.word	0x2000f15a
 801dec8:	2000f156 	.word	0x2000f156

0801decc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801decc:	4b08      	ldr	r3, [pc, #32]	; (801def0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801dece:	781b      	ldrb	r3, [r3, #0]
 801ded0:	2b01      	cmp	r3, #1
 801ded2:	d10c      	bne.n	801deee <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801ded4:	8803      	ldrh	r3, [r0, #0]
 801ded6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801deda:	8842      	ldrh	r2, [r0, #2]
 801dedc:	8002      	strh	r2, [r0, #0]
 801dede:	185a      	adds	r2, r3, r1
 801dee0:	4b04      	ldr	r3, [pc, #16]	; (801def4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801dee2:	881b      	ldrh	r3, [r3, #0]
 801dee4:	1a9b      	subs	r3, r3, r2
 801dee6:	8043      	strh	r3, [r0, #2]
 801dee8:	88c3      	ldrh	r3, [r0, #6]
 801deea:	8083      	strh	r3, [r0, #4]
 801deec:	80c1      	strh	r1, [r0, #6]
 801deee:	4770      	bx	lr
 801def0:	2000f15a 	.word	0x2000f15a
 801def4:	2000f156 	.word	0x2000f156

0801def8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801def8:	b510      	push	{r4, lr}
 801defa:	4b07      	ldr	r3, [pc, #28]	; (801df18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801defc:	781b      	ldrb	r3, [r3, #0]
 801defe:	2b01      	cmp	r3, #1
 801df00:	d108      	bne.n	801df14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801df02:	f9b1 3000 	ldrsh.w	r3, [r1]
 801df06:	f9b0 4000 	ldrsh.w	r4, [r0]
 801df0a:	8003      	strh	r3, [r0, #0]
 801df0c:	8893      	ldrh	r3, [r2, #4]
 801df0e:	3b01      	subs	r3, #1
 801df10:	1b1b      	subs	r3, r3, r4
 801df12:	800b      	strh	r3, [r1, #0]
 801df14:	bd10      	pop	{r4, pc}
 801df16:	bf00      	nop
 801df18:	2000f15a 	.word	0x2000f15a

0801df1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801df1c:	b510      	push	{r4, lr}
 801df1e:	4b0a      	ldr	r3, [pc, #40]	; (801df48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801df20:	781b      	ldrb	r3, [r3, #0]
 801df22:	2b01      	cmp	r3, #1
 801df24:	460a      	mov	r2, r1
 801df26:	d10d      	bne.n	801df44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801df28:	8881      	ldrh	r1, [r0, #4]
 801df2a:	8803      	ldrh	r3, [r0, #0]
 801df2c:	440b      	add	r3, r1
 801df2e:	4601      	mov	r1, r0
 801df30:	3b01      	subs	r3, #1
 801df32:	f821 3b02 	strh.w	r3, [r1], #2
 801df36:	f7ff ffdf 	bl	801def8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801df3a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801df3e:	88c2      	ldrh	r2, [r0, #6]
 801df40:	8082      	strh	r2, [r0, #4]
 801df42:	80c3      	strh	r3, [r0, #6]
 801df44:	bd10      	pop	{r4, pc}
 801df46:	bf00      	nop
 801df48:	2000f15a 	.word	0x2000f15a

0801df4c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801df4c:	b570      	push	{r4, r5, r6, lr}
 801df4e:	4c0b      	ldr	r4, [pc, #44]	; (801df7c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801df50:	2300      	movs	r3, #0
 801df52:	4605      	mov	r5, r0
 801df54:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801df58:	6820      	ldr	r0, [r4, #0]
 801df5a:	460e      	mov	r6, r1
 801df5c:	b110      	cbz	r0, 801df64 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 801df5e:	6803      	ldr	r3, [r0, #0]
 801df60:	695b      	ldr	r3, [r3, #20]
 801df62:	4798      	blx	r3
 801df64:	6026      	str	r6, [r4, #0]
 801df66:	6833      	ldr	r3, [r6, #0]
 801df68:	4630      	mov	r0, r6
 801df6a:	68db      	ldr	r3, [r3, #12]
 801df6c:	4798      	blx	r3
 801df6e:	682b      	ldr	r3, [r5, #0]
 801df70:	4628      	mov	r0, r5
 801df72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801df74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801df78:	4718      	bx	r3
 801df7a:	bf00      	nop
 801df7c:	2000f1a8 	.word	0x2000f1a8

0801df80 <_ZN8touchgfx11Application13requestRedrawEv>:
 801df80:	4b06      	ldr	r3, [pc, #24]	; (801df9c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801df82:	f9b3 2000 	ldrsh.w	r2, [r3]
 801df86:	4b06      	ldr	r3, [pc, #24]	; (801dfa0 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801df88:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801df8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801df90:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801df94:	2100      	movs	r1, #0
 801df96:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801df9a:	4770      	bx	lr
 801df9c:	2000f156 	.word	0x2000f156
 801dfa0:	2000f158 	.word	0x2000f158

0801dfa4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801dfa4:	4b03      	ldr	r3, [pc, #12]	; (801dfb4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801dfa6:	6818      	ldr	r0, [r3, #0]
 801dfa8:	b110      	cbz	r0, 801dfb0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801dfaa:	6803      	ldr	r3, [r0, #0]
 801dfac:	699b      	ldr	r3, [r3, #24]
 801dfae:	4718      	bx	r3
 801dfb0:	4770      	bx	lr
 801dfb2:	bf00      	nop
 801dfb4:	2000f1a8 	.word	0x2000f1a8

0801dfb8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801dfb8:	4770      	bx	lr
	...

0801dfbc <_ZN8touchgfx11Application4drawEv>:
 801dfbc:	b507      	push	{r0, r1, r2, lr}
 801dfbe:	4b09      	ldr	r3, [pc, #36]	; (801dfe4 <_ZN8touchgfx11Application4drawEv+0x28>)
 801dfc0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dfc4:	4b08      	ldr	r3, [pc, #32]	; (801dfe8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801dfc6:	f8ad 2004 	strh.w	r2, [sp, #4]
 801dfca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801dfce:	f8ad 3006 	strh.w	r3, [sp, #6]
 801dfd2:	6803      	ldr	r3, [r0, #0]
 801dfd4:	2100      	movs	r1, #0
 801dfd6:	9100      	str	r1, [sp, #0]
 801dfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dfda:	4669      	mov	r1, sp
 801dfdc:	4798      	blx	r3
 801dfde:	b003      	add	sp, #12
 801dfe0:	f85d fb04 	ldr.w	pc, [sp], #4
 801dfe4:	2000f156 	.word	0x2000f156
 801dfe8:	2000f158 	.word	0x2000f158

0801dfec <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801dfec:	4b03      	ldr	r3, [pc, #12]	; (801dffc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801dfee:	6818      	ldr	r0, [r3, #0]
 801dff0:	b110      	cbz	r0, 801dff8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801dff2:	6803      	ldr	r3, [r0, #0]
 801dff4:	69db      	ldr	r3, [r3, #28]
 801dff6:	4718      	bx	r3
 801dff8:	4770      	bx	lr
 801dffa:	bf00      	nop
 801dffc:	2000f1a8 	.word	0x2000f1a8

0801e000 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801e000:	4b03      	ldr	r3, [pc, #12]	; (801e010 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801e002:	6818      	ldr	r0, [r3, #0]
 801e004:	b110      	cbz	r0, 801e00c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801e006:	6803      	ldr	r3, [r0, #0]
 801e008:	6a1b      	ldr	r3, [r3, #32]
 801e00a:	4718      	bx	r3
 801e00c:	4770      	bx	lr
 801e00e:	bf00      	nop
 801e010:	2000f1a8 	.word	0x2000f1a8

0801e014 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801e014:	2300      	movs	r3, #0
 801e016:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801e01a:	4770      	bx	lr

0801e01c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801e01c:	4b03      	ldr	r3, [pc, #12]	; (801e02c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801e01e:	6818      	ldr	r0, [r3, #0]
 801e020:	b110      	cbz	r0, 801e028 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801e022:	6803      	ldr	r3, [r0, #0]
 801e024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e026:	4718      	bx	r3
 801e028:	4770      	bx	lr
 801e02a:	bf00      	nop
 801e02c:	2000f1a8 	.word	0x2000f1a8

0801e030 <_ZN8touchgfx11Application15handleTickEventEv>:
 801e030:	b570      	push	{r4, r5, r6, lr}
 801e032:	4d32      	ldr	r5, [pc, #200]	; (801e0fc <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 801e034:	4604      	mov	r4, r0
 801e036:	6828      	ldr	r0, [r5, #0]
 801e038:	b140      	cbz	r0, 801e04c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801e03a:	7a03      	ldrb	r3, [r0, #8]
 801e03c:	b933      	cbnz	r3, 801e04c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801e03e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801e042:	6803      	ldr	r3, [r0, #0]
 801e044:	689b      	ldr	r3, [r3, #8]
 801e046:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e04a:	4718      	bx	r3
 801e04c:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 801e050:	b97b      	cbnz	r3, 801e072 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801e052:	b170      	cbz	r0, 801e072 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801e054:	7a03      	ldrb	r3, [r0, #8]
 801e056:	b163      	cbz	r3, 801e072 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801e058:	4b29      	ldr	r3, [pc, #164]	; (801e100 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801e05a:	6818      	ldr	r0, [r3, #0]
 801e05c:	b110      	cbz	r0, 801e064 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801e05e:	6803      	ldr	r3, [r0, #0]
 801e060:	691b      	ldr	r3, [r3, #16]
 801e062:	4798      	blx	r3
 801e064:	6828      	ldr	r0, [r5, #0]
 801e066:	6803      	ldr	r3, [r0, #0]
 801e068:	68db      	ldr	r3, [r3, #12]
 801e06a:	4798      	blx	r3
 801e06c:	2301      	movs	r3, #1
 801e06e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801e072:	2500      	movs	r5, #0
 801e074:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801e078:	42a8      	cmp	r0, r5
 801e07a:	dd0c      	ble.n	801e096 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801e07c:	1963      	adds	r3, r4, r5
 801e07e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801e082:	b132      	cbz	r2, 801e092 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801e084:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801e088:	4413      	add	r3, r2
 801e08a:	6858      	ldr	r0, [r3, #4]
 801e08c:	6803      	ldr	r3, [r0, #0]
 801e08e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e090:	4798      	blx	r3
 801e092:	3501      	adds	r5, #1
 801e094:	e7ee      	b.n	801e074 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801e096:	2300      	movs	r3, #0
 801e098:	461a      	mov	r2, r3
 801e09a:	4298      	cmp	r0, r3
 801e09c:	d015      	beq.n	801e0ca <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801e09e:	18e1      	adds	r1, r4, r3
 801e0a0:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801e0a4:	b16d      	cbz	r5, 801e0c2 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 801e0a6:	429a      	cmp	r2, r3
 801e0a8:	d00a      	beq.n	801e0c0 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 801e0aa:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801e0ae:	4431      	add	r1, r6
 801e0b0:	684e      	ldr	r6, [r1, #4]
 801e0b2:	b291      	uxth	r1, r2
 801e0b4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801e0b8:	604e      	str	r6, [r1, #4]
 801e0ba:	18a1      	adds	r1, r4, r2
 801e0bc:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801e0c0:	3201      	adds	r2, #1
 801e0c2:	3301      	adds	r3, #1
 801e0c4:	e7e9      	b.n	801e09a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801e0c6:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801e0ca:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 801e0ce:	4295      	cmp	r5, r2
 801e0d0:	dd0d      	ble.n	801e0ee <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 801e0d2:	1e6b      	subs	r3, r5, #1
 801e0d4:	b29b      	uxth	r3, r3
 801e0d6:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 801e0da:	4618      	mov	r0, r3
 801e0dc:	3104      	adds	r1, #4
 801e0de:	4285      	cmp	r5, r0
 801e0e0:	ddf1      	ble.n	801e0c6 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 801e0e2:	f851 6f04 	ldr.w	r6, [r1, #4]!
 801e0e6:	f841 6c04 	str.w	r6, [r1, #-4]
 801e0ea:	3001      	adds	r0, #1
 801e0ec:	e7f7      	b.n	801e0de <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 801e0ee:	4b04      	ldr	r3, [pc, #16]	; (801e100 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801e0f0:	6818      	ldr	r0, [r3, #0]
 801e0f2:	b110      	cbz	r0, 801e0fa <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801e0f4:	6803      	ldr	r3, [r0, #0]
 801e0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e0f8:	e7a5      	b.n	801e046 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801e0fa:	bd70      	pop	{r4, r5, r6, pc}
 801e0fc:	2000f1ac 	.word	0x2000f1ac
 801e100:	2000f1a8 	.word	0x2000f1a8

0801e104 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801e104:	b510      	push	{r4, lr}
 801e106:	f9b1 4000 	ldrsh.w	r4, [r1]
 801e10a:	888a      	ldrh	r2, [r1, #4]
 801e10c:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e110:	4422      	add	r2, r4
 801e112:	b212      	sxth	r2, r2
 801e114:	4293      	cmp	r3, r2
 801e116:	da15      	bge.n	801e144 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801e118:	8882      	ldrh	r2, [r0, #4]
 801e11a:	4413      	add	r3, r2
 801e11c:	b21b      	sxth	r3, r3
 801e11e:	429c      	cmp	r4, r3
 801e120:	da10      	bge.n	801e144 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801e122:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801e126:	88c9      	ldrh	r1, [r1, #6]
 801e128:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801e12c:	4419      	add	r1, r3
 801e12e:	b209      	sxth	r1, r1
 801e130:	428a      	cmp	r2, r1
 801e132:	da07      	bge.n	801e144 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801e134:	88c0      	ldrh	r0, [r0, #6]
 801e136:	4410      	add	r0, r2
 801e138:	b200      	sxth	r0, r0
 801e13a:	4283      	cmp	r3, r0
 801e13c:	bfac      	ite	ge
 801e13e:	2000      	movge	r0, #0
 801e140:	2001      	movlt	r0, #1
 801e142:	bd10      	pop	{r4, pc}
 801e144:	2000      	movs	r0, #0
 801e146:	e7fc      	b.n	801e142 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801e148 <_ZN8touchgfx4Rect10restrictToEss>:
 801e148:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e14c:	2b00      	cmp	r3, #0
 801e14e:	b510      	push	{r4, lr}
 801e150:	da04      	bge.n	801e15c <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801e152:	8884      	ldrh	r4, [r0, #4]
 801e154:	4423      	add	r3, r4
 801e156:	8083      	strh	r3, [r0, #4]
 801e158:	2300      	movs	r3, #0
 801e15a:	8003      	strh	r3, [r0, #0]
 801e15c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e160:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e164:	1b09      	subs	r1, r1, r4
 801e166:	428b      	cmp	r3, r1
 801e168:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e16c:	bfc8      	it	gt
 801e16e:	8081      	strhgt	r1, [r0, #4]
 801e170:	2b00      	cmp	r3, #0
 801e172:	da04      	bge.n	801e17e <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801e174:	88c1      	ldrh	r1, [r0, #6]
 801e176:	440b      	add	r3, r1
 801e178:	80c3      	strh	r3, [r0, #6]
 801e17a:	2300      	movs	r3, #0
 801e17c:	8043      	strh	r3, [r0, #2]
 801e17e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801e182:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801e186:	1a52      	subs	r2, r2, r1
 801e188:	4293      	cmp	r3, r2
 801e18a:	bfc8      	it	gt
 801e18c:	80c2      	strhgt	r2, [r0, #6]
 801e18e:	bd10      	pop	{r4, pc}

0801e190 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801e190:	b510      	push	{r4, lr}
 801e192:	4b10      	ldr	r3, [pc, #64]	; (801e1d4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801e194:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e198:	4b0f      	ldr	r3, [pc, #60]	; (801e1d8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801e19a:	460c      	mov	r4, r1
 801e19c:	4620      	mov	r0, r4
 801e19e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e1a2:	f7ff ffd1 	bl	801e148 <_ZN8touchgfx4Rect10restrictToEss>
 801e1a6:	4b0d      	ldr	r3, [pc, #52]	; (801e1dc <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801e1a8:	6818      	ldr	r0, [r3, #0]
 801e1aa:	b190      	cbz	r0, 801e1d2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801e1ac:	6803      	ldr	r3, [r0, #0]
 801e1ae:	4621      	mov	r1, r4
 801e1b0:	689b      	ldr	r3, [r3, #8]
 801e1b2:	4798      	blx	r3
 801e1b4:	4b0a      	ldr	r3, [pc, #40]	; (801e1e0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801e1b6:	6818      	ldr	r0, [r3, #0]
 801e1b8:	b118      	cbz	r0, 801e1c2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801e1ba:	6803      	ldr	r3, [r0, #0]
 801e1bc:	4621      	mov	r1, r4
 801e1be:	689b      	ldr	r3, [r3, #8]
 801e1c0:	4798      	blx	r3
 801e1c2:	4b08      	ldr	r3, [pc, #32]	; (801e1e4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801e1c4:	6818      	ldr	r0, [r3, #0]
 801e1c6:	6803      	ldr	r3, [r0, #0]
 801e1c8:	4621      	mov	r1, r4
 801e1ca:	69db      	ldr	r3, [r3, #28]
 801e1cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e1d0:	4718      	bx	r3
 801e1d2:	bd10      	pop	{r4, pc}
 801e1d4:	2000f158 	.word	0x2000f158
 801e1d8:	2000f156 	.word	0x2000f156
 801e1dc:	2000f1a8 	.word	0x2000f1a8
 801e1e0:	2000f1a4 	.word	0x2000f1a4
 801e1e4:	2000f164 	.word	0x2000f164

0801e1e8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801e1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1ea:	4606      	mov	r6, r0
 801e1ec:	4608      	mov	r0, r1
 801e1ee:	460f      	mov	r7, r1
 801e1f0:	f7fb fb7f 	bl	80198f2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e1f4:	b9e8      	cbnz	r0, 801e232 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801e1f6:	f9b7 5000 	ldrsh.w	r5, [r7]
 801e1fa:	f9b6 4000 	ldrsh.w	r4, [r6]
 801e1fe:	42a5      	cmp	r5, r4
 801e200:	db17      	blt.n	801e232 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801e202:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801e206:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801e20a:	429a      	cmp	r2, r3
 801e20c:	db11      	blt.n	801e232 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801e20e:	88b9      	ldrh	r1, [r7, #4]
 801e210:	440d      	add	r5, r1
 801e212:	88b1      	ldrh	r1, [r6, #4]
 801e214:	440c      	add	r4, r1
 801e216:	b22d      	sxth	r5, r5
 801e218:	b224      	sxth	r4, r4
 801e21a:	42a5      	cmp	r5, r4
 801e21c:	dc09      	bgt.n	801e232 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801e21e:	88f8      	ldrh	r0, [r7, #6]
 801e220:	4410      	add	r0, r2
 801e222:	88f2      	ldrh	r2, [r6, #6]
 801e224:	4413      	add	r3, r2
 801e226:	b200      	sxth	r0, r0
 801e228:	b21b      	sxth	r3, r3
 801e22a:	4298      	cmp	r0, r3
 801e22c:	bfcc      	ite	gt
 801e22e:	2000      	movgt	r0, #0
 801e230:	2001      	movle	r0, #1
 801e232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e234 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801e234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e236:	4604      	mov	r4, r0
 801e238:	4608      	mov	r0, r1
 801e23a:	460d      	mov	r5, r1
 801e23c:	f7fb fb59 	bl	80198f2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e240:	b978      	cbnz	r0, 801e262 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801e242:	4620      	mov	r0, r4
 801e244:	f7fb fb55 	bl	80198f2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e248:	f9b5 6000 	ldrsh.w	r6, [r5]
 801e24c:	b150      	cbz	r0, 801e264 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801e24e:	8026      	strh	r6, [r4, #0]
 801e250:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801e254:	8063      	strh	r3, [r4, #2]
 801e256:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801e25a:	80a3      	strh	r3, [r4, #4]
 801e25c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801e260:	80e3      	strh	r3, [r4, #6]
 801e262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e264:	f9b4 1000 	ldrsh.w	r1, [r4]
 801e268:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801e26c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801e270:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801e274:	88ed      	ldrh	r5, [r5, #6]
 801e276:	42b1      	cmp	r1, r6
 801e278:	460f      	mov	r7, r1
 801e27a:	bfa8      	it	ge
 801e27c:	4637      	movge	r7, r6
 801e27e:	4293      	cmp	r3, r2
 801e280:	4618      	mov	r0, r3
 801e282:	4466      	add	r6, ip
 801e284:	bfa8      	it	ge
 801e286:	4610      	movge	r0, r2
 801e288:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801e28c:	8027      	strh	r7, [r4, #0]
 801e28e:	442a      	add	r2, r5
 801e290:	88e5      	ldrh	r5, [r4, #6]
 801e292:	8060      	strh	r0, [r4, #2]
 801e294:	4461      	add	r1, ip
 801e296:	442b      	add	r3, r5
 801e298:	b236      	sxth	r6, r6
 801e29a:	b209      	sxth	r1, r1
 801e29c:	b212      	sxth	r2, r2
 801e29e:	b21b      	sxth	r3, r3
 801e2a0:	428e      	cmp	r6, r1
 801e2a2:	bfac      	ite	ge
 801e2a4:	ebc7 0106 	rsbge	r1, r7, r6
 801e2a8:	ebc7 0101 	rsblt	r1, r7, r1
 801e2ac:	429a      	cmp	r2, r3
 801e2ae:	bfac      	ite	ge
 801e2b0:	ebc0 0202 	rsbge	r2, r0, r2
 801e2b4:	ebc0 0203 	rsblt	r2, r0, r3
 801e2b8:	80a1      	strh	r1, [r4, #4]
 801e2ba:	80e2      	strh	r2, [r4, #6]
 801e2bc:	e7d1      	b.n	801e262 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801e2c0 <_ZN8touchgfx11Application11getInstanceEv>:
 801e2c0:	4b01      	ldr	r3, [pc, #4]	; (801e2c8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801e2c2:	6818      	ldr	r0, [r3, #0]
 801e2c4:	4770      	bx	lr
 801e2c6:	bf00      	nop
 801e2c8:	2000f1b8 	.word	0x2000f1b8

0801e2cc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801e2cc:	2300      	movs	r3, #0
 801e2ce:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801e2d2:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801e2d6:	30a8      	adds	r0, #168	; 0xa8
 801e2d8:	f802 3b01 	strb.w	r3, [r2], #1
 801e2dc:	4282      	cmp	r2, r0
 801e2de:	d1fb      	bne.n	801e2d8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801e2e0:	4770      	bx	lr

0801e2e2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801e2e2:	4603      	mov	r3, r0
 801e2e4:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801e2e8:	2200      	movs	r2, #0
 801e2ea:	801a      	strh	r2, [r3, #0]
 801e2ec:	805a      	strh	r2, [r3, #2]
 801e2ee:	809a      	strh	r2, [r3, #4]
 801e2f0:	80da      	strh	r2, [r3, #6]
 801e2f2:	3308      	adds	r3, #8
 801e2f4:	428b      	cmp	r3, r1
 801e2f6:	d1f8      	bne.n	801e2ea <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801e2f8:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801e2fc:	4770      	bx	lr
	...

0801e300 <_ZN8touchgfx11ApplicationC1Ev>:
 801e300:	b570      	push	{r4, r5, r6, lr}
 801e302:	4b19      	ldr	r3, [pc, #100]	; (801e368 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801e304:	6003      	str	r3, [r0, #0]
 801e306:	2500      	movs	r5, #0
 801e308:	4604      	mov	r4, r0
 801e30a:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 801e30e:	30a8      	adds	r0, #168	; 0xa8
 801e310:	f7ff ffe7 	bl	801e2e2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e314:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801e318:	f7ff ffe3 	bl	801e2e2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e31c:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801e320:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801e324:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801e328:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801e32c:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801e330:	490e      	ldr	r1, [pc, #56]	; (801e36c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801e332:	480f      	ldr	r0, [pc, #60]	; (801e370 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801e334:	4e0f      	ldr	r6, [pc, #60]	; (801e374 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801e336:	f00e fe7f 	bl	802d038 <CRC_Lock>
 801e33a:	4b0f      	ldr	r3, [pc, #60]	; (801e378 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801e33c:	b158      	cbz	r0, 801e356 <_ZN8touchgfx11ApplicationC1Ev+0x56>
 801e33e:	801d      	strh	r5, [r3, #0]
 801e340:	4a0e      	ldr	r2, [pc, #56]	; (801e37c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801e342:	2300      	movs	r3, #0
 801e344:	6013      	str	r3, [r2, #0]
 801e346:	4a0e      	ldr	r2, [pc, #56]	; (801e380 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801e348:	6033      	str	r3, [r6, #0]
 801e34a:	4620      	mov	r0, r4
 801e34c:	6013      	str	r3, [r2, #0]
 801e34e:	f7ff ffbd 	bl	801e2cc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801e352:	4620      	mov	r0, r4
 801e354:	bd70      	pop	{r4, r5, r6, pc}
 801e356:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e35a:	2002      	movs	r0, #2
 801e35c:	801a      	strh	r2, [r3, #0]
 801e35e:	6030      	str	r0, [r6, #0]
 801e360:	f001 fae0 	bl	801f924 <_ZN8touchgfx6Screen4drawEv>
 801e364:	e7ec      	b.n	801e340 <_ZN8touchgfx11ApplicationC1Ev+0x40>
 801e366:	bf00      	nop
 801e368:	08030a48 	.word	0x08030a48
 801e36c:	b5e8b5cd 	.word	0xb5e8b5cd
 801e370:	f407a5c2 	.word	0xf407a5c2
 801e374:	2000f1a8 	.word	0x2000f1a8
 801e378:	20000020 	.word	0x20000020
 801e37c:	2000f1b8 	.word	0x2000f1b8
 801e380:	2000f1ac 	.word	0x2000f1ac

0801e384 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801e384:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801e388:	3b01      	subs	r3, #1
 801e38a:	b29b      	uxth	r3, r3
 801e38c:	428b      	cmp	r3, r1
 801e38e:	b510      	push	{r4, lr}
 801e390:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801e394:	d908      	bls.n	801e3a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801e396:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801e39a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801e39e:	681a      	ldr	r2, [r3, #0]
 801e3a0:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801e3a4:	685a      	ldr	r2, [r3, #4]
 801e3a6:	6062      	str	r2, [r4, #4]
 801e3a8:	bd10      	pop	{r4, pc}
	...

0801e3ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801e3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3b0:	4b94      	ldr	r3, [pc, #592]	; (801e604 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801e3b2:	b08f      	sub	sp, #60	; 0x3c
 801e3b4:	ac0a      	add	r4, sp, #40	; 0x28
 801e3b6:	e884 0006 	stmia.w	r4, {r1, r2}
 801e3ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e3be:	4b92      	ldr	r3, [pc, #584]	; (801e608 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 801e3c0:	4683      	mov	fp, r0
 801e3c2:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e3c6:	4620      	mov	r0, r4
 801e3c8:	f7ff febe 	bl	801e148 <_ZN8touchgfx4Rect10restrictToEss>
 801e3cc:	4620      	mov	r0, r4
 801e3ce:	f7fb fa90 	bl	80198f2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e3d2:	2800      	cmp	r0, #0
 801e3d4:	d16a      	bne.n	801e4ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801e3d6:	9403      	str	r4, [sp, #12]
 801e3d8:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801e3dc:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801e3e0:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801e3e4:	2400      	movs	r4, #0
 801e3e6:	9301      	str	r3, [sp, #4]
 801e3e8:	36a0      	adds	r6, #160	; 0xa0
 801e3ea:	42a5      	cmp	r5, r4
 801e3ec:	d00d      	beq.n	801e40a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 801e3ee:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801e3f2:	9803      	ldr	r0, [sp, #12]
 801e3f4:	f7ff fef8 	bl	801e1e8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801e3f8:	b128      	cbz	r0, 801e406 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801e3fa:	1e69      	subs	r1, r5, #1
 801e3fc:	1b09      	subs	r1, r1, r4
 801e3fe:	b289      	uxth	r1, r1
 801e400:	9801      	ldr	r0, [sp, #4]
 801e402:	f7ff ffbf 	bl	801e384 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e406:	3401      	adds	r4, #1
 801e408:	e7ef      	b.n	801e3ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 801e40a:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801e40e:	9704      	str	r7, [sp, #16]
 801e410:	1e7b      	subs	r3, r7, #1
 801e412:	9302      	str	r3, [sp, #8]
 801e414:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801e418:	2400      	movs	r4, #0
 801e41a:	4655      	mov	r5, sl
 801e41c:	9705      	str	r7, [sp, #20]
 801e41e:	4626      	mov	r6, r4
 801e420:	9b05      	ldr	r3, [sp, #20]
 801e422:	2b00      	cmp	r3, #0
 801e424:	d078      	beq.n	801e518 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 801e426:	9903      	ldr	r1, [sp, #12]
 801e428:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801e42c:	f7ff fe6a 	bl	801e104 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e430:	b360      	cbz	r0, 801e48c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801e432:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801e436:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801e43a:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 801e43e:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801e442:	45e6      	cmp	lr, ip
 801e444:	db35      	blt.n	801e4b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801e446:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801e44a:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801e44e:	4472      	add	r2, lr
 801e450:	4463      	add	r3, ip
 801e452:	b212      	sxth	r2, r2
 801e454:	b21b      	sxth	r3, r3
 801e456:	429a      	cmp	r2, r3
 801e458:	dc2b      	bgt.n	801e4b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801e45a:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801e45e:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801e462:	fa1f f288 	uxth.w	r2, r8
 801e466:	4413      	add	r3, r2
 801e468:	b29b      	uxth	r3, r3
 801e46a:	45c1      	cmp	r9, r8
 801e46c:	fa0f fe83 	sxth.w	lr, r3
 801e470:	fa1f fc89 	uxth.w	ip, r9
 801e474:	db0f      	blt.n	801e496 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801e476:	eba3 030c 	sub.w	r3, r3, ip
 801e47a:	1ac9      	subs	r1, r1, r3
 801e47c:	b209      	sxth	r1, r1
 801e47e:	2900      	cmp	r1, #0
 801e480:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801e484:	dd12      	ble.n	801e4ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801e486:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801e48a:	4604      	mov	r4, r0
 801e48c:	9b05      	ldr	r3, [sp, #20]
 801e48e:	3b01      	subs	r3, #1
 801e490:	9305      	str	r3, [sp, #20]
 801e492:	3d08      	subs	r5, #8
 801e494:	e7c4      	b.n	801e420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 801e496:	4461      	add	r1, ip
 801e498:	b209      	sxth	r1, r1
 801e49a:	4571      	cmp	r1, lr
 801e49c:	dc3a      	bgt.n	801e514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801e49e:	eba2 020c 	sub.w	r2, r2, ip
 801e4a2:	b212      	sxth	r2, r2
 801e4a4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801e4a8:	2a00      	cmp	r2, #0
 801e4aa:	dcee      	bgt.n	801e48a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801e4ac:	b00f      	add	sp, #60	; 0x3c
 801e4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4b2:	45c1      	cmp	r9, r8
 801e4b4:	db2e      	blt.n	801e514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801e4b6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801e4ba:	4499      	add	r9, r3
 801e4bc:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801e4c0:	4498      	add	r8, r3
 801e4c2:	fa0f f989 	sxth.w	r9, r9
 801e4c6:	fa0f f888 	sxth.w	r8, r8
 801e4ca:	45c1      	cmp	r9, r8
 801e4cc:	dc22      	bgt.n	801e514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801e4ce:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801e4d2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801e4d6:	fa1f f28c 	uxth.w	r2, ip
 801e4da:	4413      	add	r3, r2
 801e4dc:	b29b      	uxth	r3, r3
 801e4de:	45e6      	cmp	lr, ip
 801e4e0:	fa1f f88e 	uxth.w	r8, lr
 801e4e4:	fa0f f983 	sxth.w	r9, r3
 801e4e8:	db0a      	blt.n	801e500 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 801e4ea:	eba3 0308 	sub.w	r3, r3, r8
 801e4ee:	1ac9      	subs	r1, r1, r3
 801e4f0:	b209      	sxth	r1, r1
 801e4f2:	2900      	cmp	r1, #0
 801e4f4:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801e4f8:	ddd8      	ble.n	801e4ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801e4fa:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801e4fe:	e7c4      	b.n	801e48a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801e500:	4441      	add	r1, r8
 801e502:	b209      	sxth	r1, r1
 801e504:	4549      	cmp	r1, r9
 801e506:	dc05      	bgt.n	801e514 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801e508:	eba2 0208 	sub.w	r2, r2, r8
 801e50c:	b212      	sxth	r2, r2
 801e50e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801e512:	e7c9      	b.n	801e4a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801e514:	4606      	mov	r6, r0
 801e516:	e7b9      	b.n	801e48c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801e518:	2c00      	cmp	r4, #0
 801e51a:	f47f af7d 	bne.w	801e418 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 801e51e:	2e00      	cmp	r6, #0
 801e520:	f000 81e1 	beq.w	801e8e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801e524:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801e528:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801e52c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801e530:	b2b9      	uxth	r1, r7
 801e532:	9105      	str	r1, [sp, #20]
 801e534:	9805      	ldr	r0, [sp, #20]
 801e536:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801e53a:	4401      	add	r1, r0
 801e53c:	b2b3      	uxth	r3, r6
 801e53e:	b289      	uxth	r1, r1
 801e540:	441a      	add	r2, r3
 801e542:	9106      	str	r1, [sp, #24]
 801e544:	b292      	uxth	r2, r2
 801e546:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 801e54a:	fa0f f882 	sxth.w	r8, r2
 801e54e:	4655      	mov	r5, sl
 801e550:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801e554:	9b04      	ldr	r3, [sp, #16]
 801e556:	2b00      	cmp	r3, #0
 801e558:	d058      	beq.n	801e60c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 801e55a:	9903      	ldr	r1, [sp, #12]
 801e55c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801e560:	f7ff fdd0 	bl	801e104 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e564:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801e568:	b1d8      	cbz	r0, 801e5a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801e56a:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801e56e:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801e572:	4576      	cmp	r6, lr
 801e574:	dc26      	bgt.n	801e5c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801e576:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801e57a:	44f4      	add	ip, lr
 801e57c:	fa0f fc8c 	sxth.w	ip, ip
 801e580:	45e0      	cmp	r8, ip
 801e582:	db1f      	blt.n	801e5c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801e584:	428f      	cmp	r7, r1
 801e586:	fa1f fc81 	uxth.w	ip, r1
 801e58a:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801e58e:	dc0f      	bgt.n	801e5b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 801e590:	9806      	ldr	r0, [sp, #24]
 801e592:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801e596:	eba0 0c0c 	sub.w	ip, r0, ip
 801e59a:	eba1 010c 	sub.w	r1, r1, ip
 801e59e:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801e5a2:	4620      	mov	r0, r4
 801e5a4:	9904      	ldr	r1, [sp, #16]
 801e5a6:	3901      	subs	r1, #1
 801e5a8:	9104      	str	r1, [sp, #16]
 801e5aa:	3d08      	subs	r5, #8
 801e5ac:	4604      	mov	r4, r0
 801e5ae:	e7cf      	b.n	801e550 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 801e5b0:	4461      	add	r1, ip
 801e5b2:	b209      	sxth	r1, r1
 801e5b4:	4549      	cmp	r1, r9
 801e5b6:	dcf5      	bgt.n	801e5a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801e5b8:	9905      	ldr	r1, [sp, #20]
 801e5ba:	eba1 0c0c 	sub.w	ip, r1, ip
 801e5be:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801e5c2:	e7ee      	b.n	801e5a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801e5c4:	428f      	cmp	r7, r1
 801e5c6:	dced      	bgt.n	801e5a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801e5c8:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801e5cc:	4461      	add	r1, ip
 801e5ce:	b209      	sxth	r1, r1
 801e5d0:	4589      	cmp	r9, r1
 801e5d2:	dbe7      	blt.n	801e5a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801e5d4:	4576      	cmp	r6, lr
 801e5d6:	fa1f fc8e 	uxth.w	ip, lr
 801e5da:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801e5de:	dc08      	bgt.n	801e5f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801e5e0:	eba2 0c0c 	sub.w	ip, r2, ip
 801e5e4:	eba1 010c 	sub.w	r1, r1, ip
 801e5e8:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801e5ec:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801e5f0:	e7d7      	b.n	801e5a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801e5f2:	4461      	add	r1, ip
 801e5f4:	b209      	sxth	r1, r1
 801e5f6:	4588      	cmp	r8, r1
 801e5f8:	dbd4      	blt.n	801e5a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801e5fa:	eba3 0c0c 	sub.w	ip, r3, ip
 801e5fe:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801e602:	e7ce      	b.n	801e5a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801e604:	2000f158 	.word	0x2000f158
 801e608:	2000f156 	.word	0x2000f156
 801e60c:	2c00      	cmp	r4, #0
 801e60e:	f000 816a 	beq.w	801e8e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801e612:	9b02      	ldr	r3, [sp, #8]
 801e614:	3301      	adds	r3, #1
 801e616:	f000 8166 	beq.w	801e8e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801e61a:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801e61e:	4621      	mov	r1, r4
 801e620:	9803      	ldr	r0, [sp, #12]
 801e622:	f7ff fde1 	bl	801e1e8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801e626:	b120      	cbz	r0, 801e632 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 801e628:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801e62c:	9801      	ldr	r0, [sp, #4]
 801e62e:	f7ff fea9 	bl	801e384 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e632:	9903      	ldr	r1, [sp, #12]
 801e634:	4620      	mov	r0, r4
 801e636:	f7ff fd65 	bl	801e104 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e63a:	2800      	cmp	r0, #0
 801e63c:	f000 809b 	beq.w	801e776 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801e640:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 801e644:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 801e648:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801e64c:	9309      	str	r3, [sp, #36]	; 0x24
 801e64e:	b281      	uxth	r1, r0
 801e650:	eb01 0c03 	add.w	ip, r1, r3
 801e654:	fa1f f98c 	uxth.w	r9, ip
 801e658:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801e65c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801e660:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 801e664:	b2ab      	uxth	r3, r5
 801e666:	eb03 040c 	add.w	r4, r3, ip
 801e66a:	b2a4      	uxth	r4, r4
 801e66c:	9405      	str	r4, [sp, #20]
 801e66e:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801e672:	9404      	str	r4, [sp, #16]
 801e674:	4285      	cmp	r5, r0
 801e676:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 801e67a:	f340 809a 	ble.w	801e7b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 801e67e:	1a5b      	subs	r3, r3, r1
 801e680:	b29b      	uxth	r3, r3
 801e682:	4596      	cmp	lr, r2
 801e684:	fa0f f589 	sxth.w	r5, r9
 801e688:	b21e      	sxth	r6, r3
 801e68a:	dd2e      	ble.n	801e6ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 801e68c:	9f02      	ldr	r7, [sp, #8]
 801e68e:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801e692:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801e696:	9f04      	ldr	r7, [sp, #16]
 801e698:	1b7f      	subs	r7, r7, r5
 801e69a:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 801e69e:	fa1f fe8e 	uxth.w	lr, lr
 801e6a2:	b292      	uxth	r2, r2
 801e6a4:	ebae 0102 	sub.w	r1, lr, r2
 801e6a8:	4486      	add	lr, r0
 801e6aa:	442a      	add	r2, r5
 801e6ac:	b289      	uxth	r1, r1
 801e6ae:	fa0f fe8e 	sxth.w	lr, lr
 801e6b2:	b212      	sxth	r2, r2
 801e6b4:	b20c      	sxth	r4, r1
 801e6b6:	ebae 0202 	sub.w	r2, lr, r2
 801e6ba:	4367      	muls	r7, r4
 801e6bc:	4372      	muls	r2, r6
 801e6be:	4297      	cmp	r7, r2
 801e6c0:	db09      	blt.n	801e6d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 801e6c2:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 801e6c6:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801e6ca:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801e6ce:	449c      	add	ip, r3
 801e6d0:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801e6d4:	e680      	b.n	801e3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e6d6:	4401      	add	r1, r0
 801e6d8:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801e6dc:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 801e6e0:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801e6e4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801e6e8:	e676      	b.n	801e3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e6ea:	9f04      	ldr	r7, [sp, #16]
 801e6ec:	42bd      	cmp	r5, r7
 801e6ee:	da27      	bge.n	801e740 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 801e6f0:	9902      	ldr	r1, [sp, #8]
 801e6f2:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801e6f6:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 801e6fa:	eb04 010e 	add.w	r1, r4, lr
 801e6fe:	fa1f f881 	uxth.w	r8, r1
 801e702:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 801e706:	4411      	add	r1, r2
 801e708:	eba1 0108 	sub.w	r1, r1, r8
 801e70c:	b289      	uxth	r1, r1
 801e70e:	fa0f f988 	sxth.w	r9, r8
 801e712:	eba2 020e 	sub.w	r2, r2, lr
 801e716:	fa0f f881 	sxth.w	r8, r1
 801e71a:	1b7f      	subs	r7, r7, r5
 801e71c:	4372      	muls	r2, r6
 801e71e:	fb08 f707 	mul.w	r7, r8, r7
 801e722:	42ba      	cmp	r2, r7
 801e724:	dc06      	bgt.n	801e734 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801e726:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 801e72a:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 801e72e:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 801e732:	e7ca      	b.n	801e6ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801e734:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 801e738:	4421      	add	r1, r4
 801e73a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801e73e:	e64b      	b.n	801e3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e740:	9d05      	ldr	r5, [sp, #20]
 801e742:	eba9 0505 	sub.w	r5, r9, r5
 801e746:	b2ad      	uxth	r5, r5
 801e748:	2c06      	cmp	r4, #6
 801e74a:	fa0f fe85 	sxth.w	lr, r5
 801e74e:	d818      	bhi.n	801e782 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 801e750:	9b04      	ldr	r3, [sp, #16]
 801e752:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801e756:	1c63      	adds	r3, r4, #1
 801e758:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 801e75c:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 801e760:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801e764:	9b01      	ldr	r3, [sp, #4]
 801e766:	9d01      	ldr	r5, [sp, #4]
 801e768:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e76c:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 801e770:	805a      	strh	r2, [r3, #2]
 801e772:	809e      	strh	r6, [r3, #4]
 801e774:	80d9      	strh	r1, [r3, #6]
 801e776:	9b02      	ldr	r3, [sp, #8]
 801e778:	3b01      	subs	r3, #1
 801e77a:	9302      	str	r3, [sp, #8]
 801e77c:	f1aa 0a08 	sub.w	sl, sl, #8
 801e780:	e747      	b.n	801e612 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 801e782:	9a02      	ldr	r2, [sp, #8]
 801e784:	45b6      	cmp	lr, r6
 801e786:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801e78a:	db0d      	blt.n	801e7a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 801e78c:	449c      	add	ip, r3
 801e78e:	fa1f fc8c 	uxth.w	ip, ip
 801e792:	445a      	add	r2, fp
 801e794:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801e798:	448c      	add	ip, r1
 801e79a:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 801e79e:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 801e7a2:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 801e7a6:	e617      	b.n	801e3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e7a8:	445a      	add	r2, fp
 801e7aa:	44ac      	add	ip, r5
 801e7ac:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 801e7b0:	e78e      	b.n	801e6d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801e7b2:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801e7b6:	fa1f f18e 	uxth.w	r1, lr
 801e7ba:	eb01 0806 	add.w	r8, r1, r6
 801e7be:	b293      	uxth	r3, r2
 801e7c0:	fa1f f888 	uxth.w	r8, r8
 801e7c4:	9306      	str	r3, [sp, #24]
 801e7c6:	fa0f f388 	sxth.w	r3, r8
 801e7ca:	9307      	str	r3, [sp, #28]
 801e7cc:	9f06      	ldr	r7, [sp, #24]
 801e7ce:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 801e7d2:	443b      	add	r3, r7
 801e7d4:	b29b      	uxth	r3, r3
 801e7d6:	4596      	cmp	lr, r2
 801e7d8:	9308      	str	r3, [sp, #32]
 801e7da:	da25      	bge.n	801e828 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 801e7dc:	9905      	ldr	r1, [sp, #20]
 801e7de:	eba3 0308 	sub.w	r3, r3, r8
 801e7e2:	eba9 0401 	sub.w	r4, r9, r1
 801e7e6:	b2a4      	uxth	r4, r4
 801e7e8:	b29b      	uxth	r3, r3
 801e7ea:	fa0f f984 	sxth.w	r9, r4
 801e7ee:	b219      	sxth	r1, r3
 801e7f0:	eba2 020e 	sub.w	r2, r2, lr
 801e7f4:	1b40      	subs	r0, r0, r5
 801e7f6:	fb09 f202 	mul.w	r2, r9, r2
 801e7fa:	4348      	muls	r0, r1
 801e7fc:	4282      	cmp	r2, r0
 801e7fe:	9a02      	ldr	r2, [sp, #8]
 801e800:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801e804:	445a      	add	r2, fp
 801e806:	dc06      	bgt.n	801e816 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801e808:	9b07      	ldr	r3, [sp, #28]
 801e80a:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 801e80e:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 801e812:	44a4      	add	ip, r4
 801e814:	e75c      	b.n	801e6d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801e816:	9904      	ldr	r1, [sp, #16]
 801e818:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 801e81c:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 801e820:	4433      	add	r3, r6
 801e822:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801e826:	e5d7      	b.n	801e3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e828:	9f06      	ldr	r7, [sp, #24]
 801e82a:	9b04      	ldr	r3, [sp, #16]
 801e82c:	1bc9      	subs	r1, r1, r7
 801e82e:	fa0f f789 	sxth.w	r7, r9
 801e832:	b289      	uxth	r1, r1
 801e834:	429f      	cmp	r7, r3
 801e836:	fa0f fe81 	sxth.w	lr, r1
 801e83a:	dd22      	ble.n	801e882 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 801e83c:	9a05      	ldr	r2, [sp, #20]
 801e83e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801e842:	1b40      	subs	r0, r0, r5
 801e844:	eba9 0202 	sub.w	r2, r9, r2
 801e848:	9d07      	ldr	r5, [sp, #28]
 801e84a:	b292      	uxth	r2, r2
 801e84c:	eba5 0a03 	sub.w	sl, r5, r3
 801e850:	b214      	sxth	r4, r2
 801e852:	9b02      	ldr	r3, [sp, #8]
 801e854:	fb0e f000 	mul.w	r0, lr, r0
 801e858:	fb04 fa0a 	mul.w	sl, r4, sl
 801e85c:	00db      	lsls	r3, r3, #3
 801e85e:	4550      	cmp	r0, sl
 801e860:	445b      	add	r3, fp
 801e862:	db03      	blt.n	801e86c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 801e864:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 801e868:	4494      	add	ip, r2
 801e86a:	e731      	b.n	801e6d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801e86c:	9a04      	ldr	r2, [sp, #16]
 801e86e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801e872:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 801e876:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801e87a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801e87e:	4431      	add	r1, r6
 801e880:	e75b      	b.n	801e73a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 801e882:	9b08      	ldr	r3, [sp, #32]
 801e884:	eba3 0308 	sub.w	r3, r3, r8
 801e888:	b29b      	uxth	r3, r3
 801e88a:	2c06      	cmp	r4, #6
 801e88c:	b21d      	sxth	r5, r3
 801e88e:	d813      	bhi.n	801e8b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 801e890:	9b07      	ldr	r3, [sp, #28]
 801e892:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801e896:	1c63      	adds	r3, r4, #1
 801e898:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 801e89c:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801e8a0:	9b01      	ldr	r3, [sp, #4]
 801e8a2:	9901      	ldr	r1, [sp, #4]
 801e8a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e8a8:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 801e8ac:	805a      	strh	r2, [r3, #2]
 801e8ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e8b0:	809a      	strh	r2, [r3, #4]
 801e8b2:	f8a3 e006 	strh.w	lr, [r3, #6]
 801e8b6:	e75e      	b.n	801e776 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801e8b8:	9802      	ldr	r0, [sp, #8]
 801e8ba:	4575      	cmp	r5, lr
 801e8bc:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801e8c0:	db0d      	blt.n	801e8de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 801e8c2:	4431      	add	r1, r6
 801e8c4:	9b06      	ldr	r3, [sp, #24]
 801e8c6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801e8ca:	b289      	uxth	r1, r1
 801e8cc:	4458      	add	r0, fp
 801e8ce:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801e8d2:	4419      	add	r1, r3
 801e8d4:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 801e8d8:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 801e8dc:	e57c      	b.n	801e3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e8de:	4458      	add	r0, fp
 801e8e0:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 801e8e4:	e79c      	b.n	801e820 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 801e8e6:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 801e8ea:	2e07      	cmp	r6, #7
 801e8ec:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801e8f0:	d812      	bhi.n	801e918 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 801e8f2:	1c75      	adds	r5, r6, #1
 801e8f4:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 801e8f8:	9d01      	ldr	r5, [sp, #4]
 801e8fa:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801e8fe:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801e902:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801e906:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801e90a:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801e90e:	442c      	add	r4, r5
 801e910:	8061      	strh	r1, [r4, #2]
 801e912:	80a2      	strh	r2, [r4, #4]
 801e914:	80e3      	strh	r3, [r4, #6]
 801e916:	e5c9      	b.n	801e4ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801e918:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801e91c:	3e01      	subs	r6, #1
 801e91e:	445c      	add	r4, fp
 801e920:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801e924:	f04f 37ff 	mov.w	r7, #4294967295
 801e928:	2500      	movs	r5, #0
 801e92a:	9305      	str	r3, [sp, #20]
 801e92c:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 801e930:	9302      	str	r3, [sp, #8]
 801e932:	1e72      	subs	r2, r6, #1
 801e934:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 801e938:	9304      	str	r3, [sp, #16]
 801e93a:	4691      	mov	r9, r2
 801e93c:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 801e940:	f1b9 3fff 	cmp.w	r9, #4294967295
 801e944:	bf14      	ite	ne
 801e946:	9905      	ldrne	r1, [sp, #20]
 801e948:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801e94c:	6818      	ldr	r0, [r3, #0]
 801e94e:	9207      	str	r2, [sp, #28]
 801e950:	bf18      	it	ne
 801e952:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801e956:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801e95a:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801e95e:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801e962:	9306      	str	r3, [sp, #24]
 801e964:	fb18 f801 	smulbb	r8, r8, r1
 801e968:	6859      	ldr	r1, [r3, #4]
 801e96a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801e96e:	4671      	mov	r1, lr
 801e970:	a80c      	add	r0, sp, #48	; 0x30
 801e972:	f7ff fc5f 	bl	801e234 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e976:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801e97a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801e97e:	9b04      	ldr	r3, [sp, #16]
 801e980:	9a02      	ldr	r2, [sp, #8]
 801e982:	fb10 f001 	smulbb	r0, r0, r1
 801e986:	fb02 8803 	mla	r8, r2, r3, r8
 801e98a:	eba0 0108 	sub.w	r1, r0, r8
 801e98e:	f04f 0c08 	mov.w	ip, #8
 801e992:	fb90 f0fc 	sdiv	r0, r0, ip
 801e996:	4288      	cmp	r0, r1
 801e998:	dc20      	bgt.n	801e9dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x630>
 801e99a:	4551      	cmp	r1, sl
 801e99c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801e9a0:	da03      	bge.n	801e9aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801e9a2:	b1d9      	cbz	r1, 801e9dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x630>
 801e9a4:	468a      	mov	sl, r1
 801e9a6:	464f      	mov	r7, r9
 801e9a8:	4635      	mov	r5, r6
 801e9aa:	f109 39ff 	add.w	r9, r9, #4294967295
 801e9ae:	f119 0f02 	cmn.w	r9, #2
 801e9b2:	d1c5      	bne.n	801e940 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801e9b4:	4616      	mov	r6, r2
 801e9b6:	3201      	adds	r2, #1
 801e9b8:	f1a4 0408 	sub.w	r4, r4, #8
 801e9bc:	d1b6      	bne.n	801e92c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 801e9be:	9b01      	ldr	r3, [sp, #4]
 801e9c0:	b2ac      	uxth	r4, r5
 801e9c2:	00ed      	lsls	r5, r5, #3
 801e9c4:	1958      	adds	r0, r3, r5
 801e9c6:	1c7b      	adds	r3, r7, #1
 801e9c8:	d10b      	bne.n	801e9e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x636>
 801e9ca:	4601      	mov	r1, r0
 801e9cc:	9803      	ldr	r0, [sp, #12]
 801e9ce:	f7ff fc31 	bl	801e234 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e9d2:	4621      	mov	r1, r4
 801e9d4:	9801      	ldr	r0, [sp, #4]
 801e9d6:	f7ff fcd5 	bl	801e384 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e9da:	e4fd      	b.n	801e3d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801e9dc:	464f      	mov	r7, r9
 801e9de:	4635      	mov	r5, r6
 801e9e0:	e7ed      	b.n	801e9be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x612>
 801e9e2:	9b01      	ldr	r3, [sp, #4]
 801e9e4:	00ff      	lsls	r7, r7, #3
 801e9e6:	19d9      	adds	r1, r3, r7
 801e9e8:	f7ff fc24 	bl	801e234 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e9ec:	9b03      	ldr	r3, [sp, #12]
 801e9ee:	cb03      	ldmia	r3!, {r0, r1}
 801e9f0:	445f      	add	r7, fp
 801e9f2:	445d      	add	r5, fp
 801e9f4:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 801e9f8:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 801e9fc:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 801ea00:	9b03      	ldr	r3, [sp, #12]
 801ea02:	6869      	ldr	r1, [r5, #4]
 801ea04:	c303      	stmia	r3!, {r0, r1}
 801ea06:	e7e4      	b.n	801e9d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>

0801ea08 <_ZN8touchgfx11Application10invalidateEv>:
 801ea08:	4b09      	ldr	r3, [pc, #36]	; (801ea30 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801ea0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ea0e:	4b09      	ldr	r3, [pc, #36]	; (801ea34 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801ea10:	b082      	sub	sp, #8
 801ea12:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ea16:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ea1a:	2100      	movs	r1, #0
 801ea1c:	9100      	str	r1, [sp, #0]
 801ea1e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801ea22:	ab02      	add	r3, sp, #8
 801ea24:	e913 0006 	ldmdb	r3, {r1, r2}
 801ea28:	b002      	add	sp, #8
 801ea2a:	f7ff bcbf 	b.w	801e3ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ea2e:	bf00      	nop
 801ea30:	2000f156 	.word	0x2000f156
 801ea34:	2000f158 	.word	0x2000f158

0801ea38 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801ea38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea3c:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801ea40:	b09b      	sub	sp, #108	; 0x6c
 801ea42:	4604      	mov	r4, r0
 801ea44:	4630      	mov	r0, r6
 801ea46:	f7fa ff54 	bl	80198f2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ea4a:	4605      	mov	r5, r0
 801ea4c:	b940      	cbnz	r0, 801ea60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801ea4e:	e896 0006 	ldmia.w	r6, {r1, r2}
 801ea52:	4620      	mov	r0, r4
 801ea54:	f7ff fcaa 	bl	801e3ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ea58:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801ea5c:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801ea60:	4bc9      	ldr	r3, [pc, #804]	; (801ed88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801ea62:	681b      	ldr	r3, [r3, #0]
 801ea64:	2b00      	cmp	r3, #0
 801ea66:	d03e      	beq.n	801eae6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801ea68:	4dc8      	ldr	r5, [pc, #800]	; (801ed8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801ea6a:	4628      	mov	r0, r5
 801ea6c:	f7fa ff41 	bl	80198f2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ea70:	4606      	mov	r6, r0
 801ea72:	2800      	cmp	r0, #0
 801ea74:	d137      	bne.n	801eae6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801ea76:	4628      	mov	r0, r5
 801ea78:	f7ff fa0e 	bl	801de98 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801ea7c:	6829      	ldr	r1, [r5, #0]
 801ea7e:	686a      	ldr	r2, [r5, #4]
 801ea80:	4620      	mov	r0, r4
 801ea82:	f7ff fc93 	bl	801e3ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ea86:	802e      	strh	r6, [r5, #0]
 801ea88:	806e      	strh	r6, [r5, #2]
 801ea8a:	80ae      	strh	r6, [r5, #4]
 801ea8c:	80ee      	strh	r6, [r5, #6]
 801ea8e:	ae09      	add	r6, sp, #36	; 0x24
 801ea90:	4630      	mov	r0, r6
 801ea92:	f7ff fc26 	bl	801e2e2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ea96:	4abe      	ldr	r2, [pc, #760]	; (801ed90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801ea98:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801ea9c:	8815      	ldrh	r5, [r2, #0]
 801ea9e:	9202      	str	r2, [sp, #8]
 801eaa0:	462b      	mov	r3, r5
 801eaa2:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801eaa6:	429f      	cmp	r7, r3
 801eaa8:	d924      	bls.n	801eaf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801eaaa:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801eaae:	2907      	cmp	r1, #7
 801eab0:	d816      	bhi.n	801eae0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801eab2:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801eab6:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801eaba:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801eabe:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801eac2:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801eac6:	1c4a      	adds	r2, r1, #1
 801eac8:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801eacc:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801ead0:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801ead4:	f8a2 9002 	strh.w	r9, [r2, #2]
 801ead8:	f8a2 e004 	strh.w	lr, [r2, #4]
 801eadc:	f8a2 c006 	strh.w	ip, [r2, #6]
 801eae0:	3301      	adds	r3, #1
 801eae2:	b29b      	uxth	r3, r3
 801eae4:	e7df      	b.n	801eaa6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801eae6:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801eaea:	2b00      	cmp	r3, #0
 801eaec:	d1cf      	bne.n	801ea8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801eaee:	b01b      	add	sp, #108	; 0x6c
 801eaf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eaf4:	462f      	mov	r7, r5
 801eaf6:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801eafa:	42bb      	cmp	r3, r7
 801eafc:	d90b      	bls.n	801eb16 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801eafe:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801eb02:	4620      	mov	r0, r4
 801eb04:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801eb08:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801eb0c:	3701      	adds	r7, #1
 801eb0e:	f7ff fc4d 	bl	801e3ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801eb12:	b2bf      	uxth	r7, r7
 801eb14:	e7ef      	b.n	801eaf6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801eb16:	4a9f      	ldr	r2, [pc, #636]	; (801ed94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801eb18:	6813      	ldr	r3, [r2, #0]
 801eb1a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801eb1e:	2b01      	cmp	r3, #1
 801eb20:	4690      	mov	r8, r2
 801eb22:	f040 80e6 	bne.w	801ecf2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 801eb26:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801eb2a:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801eb2e:	4629      	mov	r1, r5
 801eb30:	33aa      	adds	r3, #170	; 0xaa
 801eb32:	2500      	movs	r5, #0
 801eb34:	428f      	cmp	r7, r1
 801eb36:	f103 0308 	add.w	r3, r3, #8
 801eb3a:	dd0a      	ble.n	801eb52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801eb3c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801eb40:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801eb44:	4402      	add	r2, r0
 801eb46:	b212      	sxth	r2, r2
 801eb48:	4295      	cmp	r5, r2
 801eb4a:	bfb8      	it	lt
 801eb4c:	4615      	movlt	r5, r2
 801eb4e:	3101      	adds	r1, #1
 801eb50:	e7f0      	b.n	801eb34 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801eb52:	4b91      	ldr	r3, [pc, #580]	; (801ed98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801eb54:	f8df b23c 	ldr.w	fp, [pc, #572]	; 801ed94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 801eb58:	881b      	ldrh	r3, [r3, #0]
 801eb5a:	2b0f      	cmp	r3, #15
 801eb5c:	bf88      	it	hi
 801eb5e:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801eb62:	f04f 0300 	mov.w	r3, #0
 801eb66:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801eb6a:	bf98      	it	ls
 801eb6c:	f04f 0a01 	movls.w	sl, #1
 801eb70:	46d8      	mov	r8, fp
 801eb72:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801eb76:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801eb7a:	4438      	add	r0, r7
 801eb7c:	b207      	sxth	r7, r0
 801eb7e:	f8db 0000 	ldr.w	r0, [fp]
 801eb82:	42bd      	cmp	r5, r7
 801eb84:	6803      	ldr	r3, [r0, #0]
 801eb86:	f340 8084 	ble.w	801ec92 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801eb8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801eb8e:	4798      	blx	r3
 801eb90:	eb07 030a 	add.w	r3, r7, sl
 801eb94:	4298      	cmp	r0, r3
 801eb96:	da07      	bge.n	801eba8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 801eb98:	4285      	cmp	r5, r0
 801eb9a:	dd05      	ble.n	801eba8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 801eb9c:	4287      	cmp	r7, r0
 801eb9e:	dd6d      	ble.n	801ec7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801eba0:	2f00      	cmp	r7, #0
 801eba2:	dd6b      	ble.n	801ec7c <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801eba4:	4628      	mov	r0, r5
 801eba6:	e004      	b.n	801ebb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 801eba8:	4287      	cmp	r7, r0
 801ebaa:	dcfb      	bgt.n	801eba4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801ebac:	42a8      	cmp	r0, r5
 801ebae:	bfa8      	it	ge
 801ebb0:	4628      	movge	r0, r5
 801ebb2:	4b7a      	ldr	r3, [pc, #488]	; (801ed9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801ebb4:	f8ad 7016 	strh.w	r7, [sp, #22]
 801ebb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ebbc:	f8ad 3018 	strh.w	r3, [sp, #24]
 801ebc0:	9b02      	ldr	r3, [sp, #8]
 801ebc2:	1bc0      	subs	r0, r0, r7
 801ebc4:	2200      	movs	r2, #0
 801ebc6:	881f      	ldrh	r7, [r3, #0]
 801ebc8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ebcc:	f8ad 001a 	strh.w	r0, [sp, #26]
 801ebd0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ebd4:	42bb      	cmp	r3, r7
 801ebd6:	d9cc      	bls.n	801eb72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 801ebd8:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801ebdc:	ab07      	add	r3, sp, #28
 801ebde:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ebe2:	6851      	ldr	r1, [r2, #4]
 801ebe4:	c303      	stmia	r3!, {r0, r1}
 801ebe6:	a905      	add	r1, sp, #20
 801ebe8:	a807      	add	r0, sp, #28
 801ebea:	f7ff fa8b 	bl	801e104 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ebee:	2800      	cmp	r0, #0
 801ebf0:	d04c      	beq.n	801ec8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 801ebf2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801ebf6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801ebfa:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801ebfe:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801ec02:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801ec06:	9303      	str	r3, [sp, #12]
 801ec08:	4686      	mov	lr, r0
 801ec0a:	4290      	cmp	r0, r2
 801ec0c:	4448      	add	r0, r9
 801ec0e:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801ec12:	bfb8      	it	lt
 801ec14:	4696      	movlt	lr, r2
 801ec16:	444a      	add	r2, r9
 801ec18:	4299      	cmp	r1, r3
 801ec1a:	b280      	uxth	r0, r0
 801ec1c:	b292      	uxth	r2, r2
 801ec1e:	468c      	mov	ip, r1
 801ec20:	fa0f f982 	sxth.w	r9, r2
 801ec24:	bfb8      	it	lt
 801ec26:	469c      	movlt	ip, r3
 801ec28:	b203      	sxth	r3, r0
 801ec2a:	454b      	cmp	r3, r9
 801ec2c:	bfb8      	it	lt
 801ec2e:	4602      	movlt	r2, r0
 801ec30:	eba2 020e 	sub.w	r2, r2, lr
 801ec34:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ec38:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801ec3c:	9b03      	ldr	r3, [sp, #12]
 801ec3e:	f8ad e01c 	strh.w	lr, [sp, #28]
 801ec42:	4411      	add	r1, r2
 801ec44:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801ec48:	f8ad c01e 	strh.w	ip, [sp, #30]
 801ec4c:	4413      	add	r3, r2
 801ec4e:	b289      	uxth	r1, r1
 801ec50:	b29b      	uxth	r3, r3
 801ec52:	b208      	sxth	r0, r1
 801ec54:	b21a      	sxth	r2, r3
 801ec56:	4290      	cmp	r0, r2
 801ec58:	bfb8      	it	lt
 801ec5a:	460b      	movlt	r3, r1
 801ec5c:	eba3 030c 	sub.w	r3, r3, ip
 801ec60:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801ec64:	a807      	add	r0, sp, #28
 801ec66:	f7fa fe44 	bl	80198f2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ec6a:	b920      	cbnz	r0, 801ec76 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 801ec6c:	6823      	ldr	r3, [r4, #0]
 801ec6e:	a907      	add	r1, sp, #28
 801ec70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ec72:	4620      	mov	r0, r4
 801ec74:	4798      	blx	r3
 801ec76:	3701      	adds	r7, #1
 801ec78:	b2bf      	uxth	r7, r7
 801ec7a:	e7a9      	b.n	801ebd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 801ec7c:	f8d8 0000 	ldr.w	r0, [r8]
 801ec80:	6803      	ldr	r3, [r0, #0]
 801ec82:	2101      	movs	r1, #1
 801ec84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801ec88:	4798      	blx	r3
 801ec8a:	e772      	b.n	801eb72 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 801ec8c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801ec90:	e7e8      	b.n	801ec64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 801ec92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec94:	4798      	blx	r3
 801ec96:	4b42      	ldr	r3, [pc, #264]	; (801eda0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801ec98:	781b      	ldrb	r3, [r3, #0]
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	f43f af27 	beq.w	801eaee <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801eca0:	2300      	movs	r3, #0
 801eca2:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801eca6:	9b02      	ldr	r3, [sp, #8]
 801eca8:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801ecac:	881b      	ldrh	r3, [r3, #0]
 801ecae:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801ecb2:	429d      	cmp	r5, r3
 801ecb4:	f67f af1b 	bls.w	801eaee <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801ecb8:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 801ecbc:	2907      	cmp	r1, #7
 801ecbe:	d815      	bhi.n	801ecec <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 801ecc0:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801ecc4:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801ecc8:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801eccc:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801ecd0:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801ecd4:	1c4a      	adds	r2, r1, #1
 801ecd6:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 801ecda:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801ecde:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801ece2:	f8a2 e002 	strh.w	lr, [r2, #2]
 801ece6:	f8a2 c004 	strh.w	ip, [r2, #4]
 801ecea:	80d7      	strh	r7, [r2, #6]
 801ecec:	3301      	adds	r3, #1
 801ecee:	b29b      	uxth	r3, r3
 801ecf0:	e7df      	b.n	801ecb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 801ecf2:	2b02      	cmp	r3, #2
 801ecf4:	f040 8136 	bne.w	801ef64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 801ecf8:	4b2a      	ldr	r3, [pc, #168]	; (801eda4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 801ecfa:	781b      	ldrb	r3, [r3, #0]
 801ecfc:	2b01      	cmp	r3, #1
 801ecfe:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801ed02:	f000 809c 	beq.w	801ee3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801ed06:	9b02      	ldr	r3, [sp, #8]
 801ed08:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 801ed0c:	f8b3 b000 	ldrh.w	fp, [r3]
 801ed10:	f10b 0b01 	add.w	fp, fp, #1
 801ed14:	fa1f fb8b 	uxth.w	fp, fp
 801ed18:	2a00      	cmp	r2, #0
 801ed1a:	d0bc      	beq.n	801ec96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801ed1c:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801ed20:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801ed24:	441d      	add	r5, r3
 801ed26:	b22d      	sxth	r5, r5
 801ed28:	4659      	mov	r1, fp
 801ed2a:	f04f 0800 	mov.w	r8, #0
 801ed2e:	b28b      	uxth	r3, r1
 801ed30:	429a      	cmp	r2, r3
 801ed32:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801ed36:	f240 80c1 	bls.w	801eebc <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 801ed3a:	4427      	add	r7, r4
 801ed3c:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801ed40:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 801ed44:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 801ed48:	4563      	cmp	r3, ip
 801ed4a:	4608      	mov	r0, r1
 801ed4c:	f340 80a3 	ble.w	801ee96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 801ed50:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 801ed54:	4465      	add	r5, ip
 801ed56:	b22d      	sxth	r5, r5
 801ed58:	429d      	cmp	r5, r3
 801ed5a:	bfa8      	it	ge
 801ed5c:	461d      	movge	r5, r3
 801ed5e:	3101      	adds	r1, #1
 801ed60:	4680      	mov	r8, r0
 801ed62:	e7e4      	b.n	801ed2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 801ed64:	d10b      	bne.n	801ed7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 801ed66:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801ed6a:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801ed6e:	458c      	cmp	ip, r1
 801ed70:	bfb4      	ite	lt
 801ed72:	469c      	movlt	ip, r3
 801ed74:	46bc      	movge	ip, r7
 801ed76:	4572      	cmp	r2, lr
 801ed78:	bfb8      	it	lt
 801ed7a:	4672      	movlt	r2, lr
 801ed7c:	e088      	b.n	801ee90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801ed7e:	428a      	cmp	r2, r1
 801ed80:	bfb8      	it	lt
 801ed82:	460a      	movlt	r2, r1
 801ed84:	46bc      	mov	ip, r7
 801ed86:	e083      	b.n	801ee90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801ed88:	2000f1a4 	.word	0x2000f1a4
 801ed8c:	2000f1b0 	.word	0x2000f1b0
 801ed90:	20000020 	.word	0x20000020
 801ed94:	2000f164 	.word	0x2000f164
 801ed98:	2000f158 	.word	0x2000f158
 801ed9c:	2000f156 	.word	0x2000f156
 801eda0:	2000f160 	.word	0x2000f160
 801eda4:	2000f15a 	.word	0x2000f15a
 801eda8:	1961      	adds	r1, r4, r5
 801edaa:	ab07      	add	r3, sp, #28
 801edac:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801edb0:	6849      	ldr	r1, [r1, #4]
 801edb2:	c303      	stmia	r3!, {r0, r1}
 801edb4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801edb8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801edbc:	2b13      	cmp	r3, #19
 801edbe:	bfd8      	it	le
 801edc0:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801edc4:	f8ad 201c 	strh.w	r2, [sp, #28]
 801edc8:	440b      	add	r3, r1
 801edca:	1a9b      	subs	r3, r3, r2
 801edcc:	a807      	add	r0, sp, #28
 801edce:	f8ad 3020 	strh.w	r3, [sp, #32]
 801edd2:	f7ff f87b 	bl	801decc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801edd6:	a807      	add	r0, sp, #28
 801edd8:	f7fa fd8b 	bl	80198f2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801eddc:	bb78      	cbnz	r0, 801ee3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801edde:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801ede2:	f8d8 0000 	ldr.w	r0, [r8]
 801ede6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801edea:	f8d0 e000 	ldr.w	lr, [r0]
 801edee:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801edf2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801edf6:	f1bc 0f14 	cmp.w	ip, #20
 801edfa:	bfa8      	it	ge
 801edfc:	f04f 0c14 	movge.w	ip, #20
 801ee00:	fa1f fc8c 	uxth.w	ip, ip
 801ee04:	f8cd c000 	str.w	ip, [sp]
 801ee08:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801ee0c:	47d0      	blx	sl
 801ee0e:	4682      	mov	sl, r0
 801ee10:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ee14:	a807      	add	r0, sp, #28
 801ee16:	f7ff f83f 	bl	801de98 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801ee1a:	6823      	ldr	r3, [r4, #0]
 801ee1c:	4425      	add	r5, r4
 801ee1e:	4620      	mov	r0, r4
 801ee20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ee22:	a907      	add	r1, sp, #28
 801ee24:	4798      	blx	r3
 801ee26:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801ee2a:	eba0 000a 	sub.w	r0, r0, sl
 801ee2e:	b200      	sxth	r0, r0
 801ee30:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801ee34:	b918      	cbnz	r0, 801ee3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801ee36:	b2b9      	uxth	r1, r7
 801ee38:	4648      	mov	r0, r9
 801ee3a:	f7ff faa3 	bl	801e384 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ee3e:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801ee42:	f1bb 0f00 	cmp.w	fp, #0
 801ee46:	f43f af26 	beq.w	801ec96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801ee4a:	9b02      	ldr	r3, [sp, #8]
 801ee4c:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801ee50:	881b      	ldrh	r3, [r3, #0]
 801ee52:	3301      	adds	r3, #1
 801ee54:	b29b      	uxth	r3, r3
 801ee56:	2700      	movs	r7, #0
 801ee58:	b299      	uxth	r1, r3
 801ee5a:	458b      	cmp	fp, r1
 801ee5c:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 801ee60:	d9a2      	bls.n	801eda8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 801ee62:	4425      	add	r5, r4
 801ee64:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801ee68:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801ee6c:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801ee70:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801ee74:	4408      	add	r0, r1
 801ee76:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801ee7a:	4471      	add	r1, lr
 801ee7c:	b200      	sxth	r0, r0
 801ee7e:	b209      	sxth	r1, r1
 801ee80:	4288      	cmp	r0, r1
 801ee82:	469c      	mov	ip, r3
 801ee84:	f6bf af6e 	bge.w	801ed64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 801ee88:	4586      	cmp	lr, r0
 801ee8a:	4672      	mov	r2, lr
 801ee8c:	bfb8      	it	lt
 801ee8e:	4602      	movlt	r2, r0
 801ee90:	3301      	adds	r3, #1
 801ee92:	4667      	mov	r7, ip
 801ee94:	e7e0      	b.n	801ee58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 801ee96:	d10c      	bne.n	801eeb2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 801ee98:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 801ee9c:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 801eea0:	4287      	cmp	r7, r0
 801eea2:	bfb4      	ite	lt
 801eea4:	4608      	movlt	r0, r1
 801eea6:	4640      	movge	r0, r8
 801eea8:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 801eeac:	443b      	add	r3, r7
 801eeae:	b21b      	sxth	r3, r3
 801eeb0:	e752      	b.n	801ed58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801eeb2:	4565      	cmp	r5, ip
 801eeb4:	bfa8      	it	ge
 801eeb6:	4665      	movge	r5, ip
 801eeb8:	4640      	mov	r0, r8
 801eeba:	e750      	b.n	801ed5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 801eebc:	eb09 0007 	add.w	r0, r9, r7
 801eec0:	4427      	add	r7, r4
 801eec2:	9203      	str	r2, [sp, #12]
 801eec4:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 801eec8:	f1ba 0f13 	cmp.w	sl, #19
 801eecc:	bfde      	ittt	le
 801eece:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 801eed2:	4455      	addle	r5, sl
 801eed4:	b22d      	sxthle	r5, r5
 801eed6:	f7fa fd0c 	bl	80198f2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801eeda:	9a03      	ldr	r2, [sp, #12]
 801eedc:	2800      	cmp	r0, #0
 801eede:	f47f af1b 	bne.w	801ed18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 801eee2:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 801eee6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801eeea:	482a      	ldr	r0, [pc, #168]	; (801ef94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 801eeec:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 801eef0:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 801eef4:	6800      	ldr	r0, [r0, #0]
 801eef6:	f8ad 101c 	strh.w	r1, [sp, #28]
 801eefa:	1aad      	subs	r5, r5, r2
 801eefc:	2d14      	cmp	r5, #20
 801eefe:	f8ad 201e 	strh.w	r2, [sp, #30]
 801ef02:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ef06:	bfa8      	it	ge
 801ef08:	2514      	movge	r5, #20
 801ef0a:	f8d0 c000 	ldr.w	ip, [r0]
 801ef0e:	b2ad      	uxth	r5, r5
 801ef10:	fa1f fa8a 	uxth.w	sl, sl
 801ef14:	4555      	cmp	r5, sl
 801ef16:	bf94      	ite	ls
 801ef18:	9500      	strls	r5, [sp, #0]
 801ef1a:	f8cd a000 	strhi.w	sl, [sp]
 801ef1e:	b292      	uxth	r2, r2
 801ef20:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801ef24:	b29b      	uxth	r3, r3
 801ef26:	b289      	uxth	r1, r1
 801ef28:	47a8      	blx	r5
 801ef2a:	6823      	ldr	r3, [r4, #0]
 801ef2c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ef30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ef32:	a907      	add	r1, sp, #28
 801ef34:	4620      	mov	r0, r4
 801ef36:	4798      	blx	r3
 801ef38:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801ef3c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801ef40:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 801ef44:	1a5b      	subs	r3, r3, r1
 801ef46:	440a      	add	r2, r1
 801ef48:	b21b      	sxth	r3, r3
 801ef4a:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 801ef4e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 801ef52:	2b00      	cmp	r3, #0
 801ef54:	f47f aed7 	bne.w	801ed06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 801ef58:	fa1f f188 	uxth.w	r1, r8
 801ef5c:	4648      	mov	r0, r9
 801ef5e:	f7ff fa11 	bl	801e384 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ef62:	e6d0      	b.n	801ed06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 801ef64:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ef68:	42ab      	cmp	r3, r5
 801ef6a:	f67f ae94 	bls.w	801ec96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801ef6e:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801ef72:	ab07      	add	r3, sp, #28
 801ef74:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ef78:	6851      	ldr	r1, [r2, #4]
 801ef7a:	c303      	stmia	r3!, {r0, r1}
 801ef7c:	a807      	add	r0, sp, #28
 801ef7e:	f7fa fcb8 	bl	80198f2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ef82:	b920      	cbnz	r0, 801ef8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 801ef84:	6823      	ldr	r3, [r4, #0]
 801ef86:	a907      	add	r1, sp, #28
 801ef88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ef8a:	4620      	mov	r0, r4
 801ef8c:	4798      	blx	r3
 801ef8e:	3501      	adds	r5, #1
 801ef90:	b2ad      	uxth	r5, r5
 801ef92:	e7e7      	b.n	801ef64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 801ef94:	2000f164 	.word	0x2000f164

0801ef98 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801ef98:	4b03      	ldr	r3, [pc, #12]	; (801efa8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801ef9a:	2200      	movs	r2, #0
 801ef9c:	801a      	strh	r2, [r3, #0]
 801ef9e:	805a      	strh	r2, [r3, #2]
 801efa0:	809a      	strh	r2, [r3, #4]
 801efa2:	80da      	strh	r2, [r3, #6]
 801efa4:	4770      	bx	lr
 801efa6:	bf00      	nop
 801efa8:	2000f1b0 	.word	0x2000f1b0

0801efac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801efac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efb0:	4606      	mov	r6, r0
 801efb2:	b09d      	sub	sp, #116	; 0x74
 801efb4:	a803      	add	r0, sp, #12
 801efb6:	4614      	mov	r4, r2
 801efb8:	468a      	mov	sl, r1
 801efba:	461d      	mov	r5, r3
 801efbc:	f000 fe2c 	bl	801fc18 <_ZN8touchgfx12TextProviderC1Ev>
 801efc0:	6833      	ldr	r3, [r6, #0]
 801efc2:	4630      	mov	r0, r6
 801efc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801efc6:	4798      	blx	r3
 801efc8:	6833      	ldr	r3, [r6, #0]
 801efca:	4607      	mov	r7, r0
 801efcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801efce:	4630      	mov	r0, r6
 801efd0:	4798      	blx	r3
 801efd2:	462a      	mov	r2, r5
 801efd4:	9000      	str	r0, [sp, #0]
 801efd6:	4621      	mov	r1, r4
 801efd8:	463b      	mov	r3, r7
 801efda:	a803      	add	r0, sp, #12
 801efdc:	f000 fe77 	bl	801fcce <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801efe0:	2500      	movs	r5, #0
 801efe2:	462c      	mov	r4, r5
 801efe4:	46a9      	mov	r9, r5
 801efe6:	46a8      	mov	r8, r5
 801efe8:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801efec:	2300      	movs	r3, #0
 801efee:	9302      	str	r3, [sp, #8]
 801eff0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801eff4:	429c      	cmp	r4, r3
 801eff6:	d002      	beq.n	801effe <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801eff8:	455c      	cmp	r4, fp
 801effa:	bf18      	it	ne
 801effc:	4625      	movne	r5, r4
 801effe:	ab02      	add	r3, sp, #8
 801f000:	4632      	mov	r2, r6
 801f002:	4651      	mov	r1, sl
 801f004:	a803      	add	r0, sp, #12
 801f006:	f001 f965 	bl	80202d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f00a:	4604      	mov	r4, r0
 801f00c:	b108      	cbz	r0, 801f012 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801f00e:	280a      	cmp	r0, #10
 801f010:	d10a      	bne.n	801f028 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801f012:	45c1      	cmp	r9, r8
 801f014:	bf38      	it	cc
 801f016:	46c1      	movcc	r9, r8
 801f018:	f04f 0800 	mov.w	r8, #0
 801f01c:	2c00      	cmp	r4, #0
 801f01e:	d1e5      	bne.n	801efec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801f020:	4648      	mov	r0, r9
 801f022:	b01d      	add	sp, #116	; 0x74
 801f024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f028:	9a02      	ldr	r2, [sp, #8]
 801f02a:	2a00      	cmp	r2, #0
 801f02c:	d0de      	beq.n	801efec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801f02e:	7b57      	ldrb	r7, [r2, #13]
 801f030:	6833      	ldr	r3, [r6, #0]
 801f032:	8894      	ldrh	r4, [r2, #4]
 801f034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f036:	007f      	lsls	r7, r7, #1
 801f038:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801f03c:	7a97      	ldrb	r7, [r2, #10]
 801f03e:	4629      	mov	r1, r5
 801f040:	4307      	orrs	r7, r0
 801f042:	4630      	mov	r0, r6
 801f044:	4798      	blx	r3
 801f046:	4438      	add	r0, r7
 801f048:	4480      	add	r8, r0
 801f04a:	fa1f f888 	uxth.w	r8, r8
 801f04e:	e7e5      	b.n	801f01c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801f050 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801f050:	b508      	push	{r3, lr}
 801f052:	6803      	ldr	r3, [r0, #0]
 801f054:	68db      	ldr	r3, [r3, #12]
 801f056:	4798      	blx	r3
 801f058:	b128      	cbz	r0, 801f066 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801f05a:	7b43      	ldrb	r3, [r0, #13]
 801f05c:	7a80      	ldrb	r0, [r0, #10]
 801f05e:	005b      	lsls	r3, r3, #1
 801f060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f064:	4318      	orrs	r0, r3
 801f066:	bd08      	pop	{r3, pc}

0801f068 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801f068:	b40e      	push	{r1, r2, r3}
 801f06a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f06c:	b09e      	sub	sp, #120	; 0x78
 801f06e:	ab23      	add	r3, sp, #140	; 0x8c
 801f070:	4605      	mov	r5, r0
 801f072:	f853 4b04 	ldr.w	r4, [r3], #4
 801f076:	9303      	str	r3, [sp, #12]
 801f078:	a805      	add	r0, sp, #20
 801f07a:	f000 fdcd 	bl	801fc18 <_ZN8touchgfx12TextProviderC1Ev>
 801f07e:	682b      	ldr	r3, [r5, #0]
 801f080:	4628      	mov	r0, r5
 801f082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f084:	4798      	blx	r3
 801f086:	682b      	ldr	r3, [r5, #0]
 801f088:	4606      	mov	r6, r0
 801f08a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f08c:	4628      	mov	r0, r5
 801f08e:	4798      	blx	r3
 801f090:	4633      	mov	r3, r6
 801f092:	ae1e      	add	r6, sp, #120	; 0x78
 801f094:	4621      	mov	r1, r4
 801f096:	9000      	str	r0, [sp, #0]
 801f098:	9a03      	ldr	r2, [sp, #12]
 801f09a:	2400      	movs	r4, #0
 801f09c:	a805      	add	r0, sp, #20
 801f09e:	f000 fe16 	bl	801fcce <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801f0a2:	f846 4d68 	str.w	r4, [r6, #-104]!
 801f0a6:	462a      	mov	r2, r5
 801f0a8:	4633      	mov	r3, r6
 801f0aa:	4621      	mov	r1, r4
 801f0ac:	a805      	add	r0, sp, #20
 801f0ae:	f001 f911 	bl	80202d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f0b2:	b1f0      	cbz	r0, 801f0f2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 801f0b4:	280a      	cmp	r0, #10
 801f0b6:	d018      	beq.n	801f0ea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801f0b8:	9f04      	ldr	r7, [sp, #16]
 801f0ba:	b1b7      	cbz	r7, 801f0ea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801f0bc:	7b78      	ldrb	r0, [r7, #13]
 801f0be:	7a3b      	ldrb	r3, [r7, #8]
 801f0c0:	88aa      	ldrh	r2, [r5, #4]
 801f0c2:	00c1      	lsls	r1, r0, #3
 801f0c4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801f0c8:	4319      	orrs	r1, r3
 801f0ca:	0643      	lsls	r3, r0, #25
 801f0cc:	bf44      	itt	mi
 801f0ce:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801f0d2:	b219      	sxthmi	r1, r3
 801f0d4:	0100      	lsls	r0, r0, #4
 801f0d6:	79fb      	ldrb	r3, [r7, #7]
 801f0d8:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801f0dc:	4303      	orrs	r3, r0
 801f0de:	4413      	add	r3, r2
 801f0e0:	1a5b      	subs	r3, r3, r1
 801f0e2:	b29b      	uxth	r3, r3
 801f0e4:	42a3      	cmp	r3, r4
 801f0e6:	bfc8      	it	gt
 801f0e8:	b21c      	sxthgt	r4, r3
 801f0ea:	4633      	mov	r3, r6
 801f0ec:	462a      	mov	r2, r5
 801f0ee:	2100      	movs	r1, #0
 801f0f0:	e7dc      	b.n	801f0ac <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801f0f2:	b2a0      	uxth	r0, r4
 801f0f4:	b01e      	add	sp, #120	; 0x78
 801f0f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f0fa:	b003      	add	sp, #12
 801f0fc:	4770      	bx	lr

0801f0fe <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801f0fe:	b40e      	push	{r1, r2, r3}
 801f100:	b570      	push	{r4, r5, r6, lr}
 801f102:	b09d      	sub	sp, #116	; 0x74
 801f104:	ab21      	add	r3, sp, #132	; 0x84
 801f106:	4604      	mov	r4, r0
 801f108:	f853 5b04 	ldr.w	r5, [r3], #4
 801f10c:	9302      	str	r3, [sp, #8]
 801f10e:	a803      	add	r0, sp, #12
 801f110:	f000 fd82 	bl	801fc18 <_ZN8touchgfx12TextProviderC1Ev>
 801f114:	6823      	ldr	r3, [r4, #0]
 801f116:	4620      	mov	r0, r4
 801f118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f11a:	4798      	blx	r3
 801f11c:	6823      	ldr	r3, [r4, #0]
 801f11e:	4606      	mov	r6, r0
 801f120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f122:	4620      	mov	r0, r4
 801f124:	4798      	blx	r3
 801f126:	4633      	mov	r3, r6
 801f128:	9000      	str	r0, [sp, #0]
 801f12a:	9a02      	ldr	r2, [sp, #8]
 801f12c:	4629      	mov	r1, r5
 801f12e:	a803      	add	r0, sp, #12
 801f130:	f000 fdcd 	bl	801fcce <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801f134:	a803      	add	r0, sp, #12
 801f136:	f001 f99b 	bl	8020470 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801f13a:	2401      	movs	r4, #1
 801f13c:	b2a3      	uxth	r3, r4
 801f13e:	b140      	cbz	r0, 801f152 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 801f140:	280a      	cmp	r0, #10
 801f142:	bf08      	it	eq
 801f144:	3301      	addeq	r3, #1
 801f146:	a803      	add	r0, sp, #12
 801f148:	bf08      	it	eq
 801f14a:	b21c      	sxtheq	r4, r3
 801f14c:	f001 f990 	bl	8020470 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801f150:	e7f4      	b.n	801f13c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801f152:	4618      	mov	r0, r3
 801f154:	b01d      	add	sp, #116	; 0x74
 801f156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f15a:	b003      	add	sp, #12
 801f15c:	4770      	bx	lr

0801f15e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801f15e:	b40e      	push	{r1, r2, r3}
 801f160:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f162:	b09e      	sub	sp, #120	; 0x78
 801f164:	ab23      	add	r3, sp, #140	; 0x8c
 801f166:	4604      	mov	r4, r0
 801f168:	f853 5b04 	ldr.w	r5, [r3], #4
 801f16c:	9303      	str	r3, [sp, #12]
 801f16e:	a805      	add	r0, sp, #20
 801f170:	f000 fd52 	bl	801fc18 <_ZN8touchgfx12TextProviderC1Ev>
 801f174:	6823      	ldr	r3, [r4, #0]
 801f176:	4620      	mov	r0, r4
 801f178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f17a:	4798      	blx	r3
 801f17c:	6823      	ldr	r3, [r4, #0]
 801f17e:	4606      	mov	r6, r0
 801f180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f182:	4620      	mov	r0, r4
 801f184:	4798      	blx	r3
 801f186:	4633      	mov	r3, r6
 801f188:	4629      	mov	r1, r5
 801f18a:	9000      	str	r0, [sp, #0]
 801f18c:	9a03      	ldr	r2, [sp, #12]
 801f18e:	a805      	add	r0, sp, #20
 801f190:	ad1e      	add	r5, sp, #120	; 0x78
 801f192:	f000 fd9c 	bl	801fcce <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801f196:	2100      	movs	r1, #0
 801f198:	f845 1d68 	str.w	r1, [r5, #-104]!
 801f19c:	4622      	mov	r2, r4
 801f19e:	462b      	mov	r3, r5
 801f1a0:	a805      	add	r0, sp, #20
 801f1a2:	f001 f897 	bl	80202d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f1a6:	26ff      	movs	r6, #255	; 0xff
 801f1a8:	b1d8      	cbz	r0, 801f1e2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801f1aa:	280a      	cmp	r0, #10
 801f1ac:	d012      	beq.n	801f1d4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801f1ae:	9804      	ldr	r0, [sp, #16]
 801f1b0:	b180      	cbz	r0, 801f1d4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801f1b2:	7b47      	ldrb	r7, [r0, #13]
 801f1b4:	7922      	ldrb	r2, [r4, #4]
 801f1b6:	00fb      	lsls	r3, r7, #3
 801f1b8:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801f1bc:	7a03      	ldrb	r3, [r0, #8]
 801f1be:	430b      	orrs	r3, r1
 801f1c0:	0679      	lsls	r1, r7, #25
 801f1c2:	bf44      	itt	mi
 801f1c4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801f1c8:	b21b      	sxthmi	r3, r3
 801f1ca:	1ad3      	subs	r3, r2, r3
 801f1cc:	b2db      	uxtb	r3, r3
 801f1ce:	429e      	cmp	r6, r3
 801f1d0:	bf28      	it	cs
 801f1d2:	461e      	movcs	r6, r3
 801f1d4:	462b      	mov	r3, r5
 801f1d6:	4622      	mov	r2, r4
 801f1d8:	2100      	movs	r1, #0
 801f1da:	a805      	add	r0, sp, #20
 801f1dc:	f001 f87a 	bl	80202d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801f1e0:	e7e2      	b.n	801f1a8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801f1e2:	4630      	mov	r0, r6
 801f1e4:	b01e      	add	sp, #120	; 0x78
 801f1e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f1ea:	b003      	add	sp, #12
 801f1ec:	4770      	bx	lr

0801f1ee <_ZNK8touchgfx8Drawable10invalidateEv>:
 801f1ee:	b513      	push	{r0, r1, r4, lr}
 801f1f0:	6803      	ldr	r3, [r0, #0]
 801f1f2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801f1f6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f1fa:	f8ad 1004 	strh.w	r1, [sp, #4]
 801f1fe:	2400      	movs	r4, #0
 801f200:	9400      	str	r4, [sp, #0]
 801f202:	f8ad 2006 	strh.w	r2, [sp, #6]
 801f206:	691b      	ldr	r3, [r3, #16]
 801f208:	4669      	mov	r1, sp
 801f20a:	4798      	blx	r3
 801f20c:	b002      	add	sp, #8
 801f20e:	bd10      	pop	{r4, pc}

0801f210 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801f210:	b538      	push	{r3, r4, r5, lr}
 801f212:	680b      	ldr	r3, [r1, #0]
 801f214:	460c      	mov	r4, r1
 801f216:	68db      	ldr	r3, [r3, #12]
 801f218:	4605      	mov	r5, r0
 801f21a:	4798      	blx	r3
 801f21c:	6823      	ldr	r3, [r4, #0]
 801f21e:	4620      	mov	r0, r4
 801f220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f222:	4629      	mov	r1, r5
 801f224:	4798      	blx	r3
 801f226:	4628      	mov	r0, r5
 801f228:	bd38      	pop	{r3, r4, r5, pc}

0801f22a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801f22a:	b410      	push	{r4}
 801f22c:	880a      	ldrh	r2, [r1, #0]
 801f22e:	8884      	ldrh	r4, [r0, #4]
 801f230:	4422      	add	r2, r4
 801f232:	800a      	strh	r2, [r1, #0]
 801f234:	88c4      	ldrh	r4, [r0, #6]
 801f236:	884a      	ldrh	r2, [r1, #2]
 801f238:	4422      	add	r2, r4
 801f23a:	804a      	strh	r2, [r1, #2]
 801f23c:	6940      	ldr	r0, [r0, #20]
 801f23e:	b120      	cbz	r0, 801f24a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801f240:	6803      	ldr	r3, [r0, #0]
 801f242:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f248:	4718      	bx	r3
 801f24a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f24e:	4770      	bx	lr

0801f250 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801f250:	b570      	push	{r4, r5, r6, lr}
 801f252:	8882      	ldrh	r2, [r0, #4]
 801f254:	880b      	ldrh	r3, [r1, #0]
 801f256:	4413      	add	r3, r2
 801f258:	800b      	strh	r3, [r1, #0]
 801f25a:	88c2      	ldrh	r2, [r0, #6]
 801f25c:	884b      	ldrh	r3, [r1, #2]
 801f25e:	460c      	mov	r4, r1
 801f260:	4413      	add	r3, r2
 801f262:	804b      	strh	r3, [r1, #2]
 801f264:	4605      	mov	r5, r0
 801f266:	1d01      	adds	r1, r0, #4
 801f268:	4620      	mov	r0, r4
 801f26a:	f7fa faff 	bl	801986c <_ZN8touchgfx4RectaNERKS0_>
 801f26e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f272:	2b00      	cmp	r3, #0
 801f274:	dd0b      	ble.n	801f28e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801f276:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f27a:	2b00      	cmp	r3, #0
 801f27c:	dd07      	ble.n	801f28e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801f27e:	6968      	ldr	r0, [r5, #20]
 801f280:	b128      	cbz	r0, 801f28e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801f282:	6803      	ldr	r3, [r0, #0]
 801f284:	4621      	mov	r1, r4
 801f286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f288:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f28c:	4718      	bx	r3
 801f28e:	bd70      	pop	{r4, r5, r6, pc}

0801f290 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801f290:	b570      	push	{r4, r5, r6, lr}
 801f292:	8882      	ldrh	r2, [r0, #4]
 801f294:	880b      	ldrh	r3, [r1, #0]
 801f296:	4413      	add	r3, r2
 801f298:	800b      	strh	r3, [r1, #0]
 801f29a:	88c2      	ldrh	r2, [r0, #6]
 801f29c:	884b      	ldrh	r3, [r1, #2]
 801f29e:	460c      	mov	r4, r1
 801f2a0:	4413      	add	r3, r2
 801f2a2:	804b      	strh	r3, [r1, #2]
 801f2a4:	4605      	mov	r5, r0
 801f2a6:	1d01      	adds	r1, r0, #4
 801f2a8:	4620      	mov	r0, r4
 801f2aa:	f7fa fadf 	bl	801986c <_ZN8touchgfx4RectaNERKS0_>
 801f2ae:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f2b2:	2b00      	cmp	r3, #0
 801f2b4:	dd18      	ble.n	801f2e8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801f2b6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f2ba:	2b00      	cmp	r3, #0
 801f2bc:	dd14      	ble.n	801f2e8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801f2be:	6968      	ldr	r0, [r5, #20]
 801f2c0:	b128      	cbz	r0, 801f2ce <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801f2c2:	6803      	ldr	r3, [r0, #0]
 801f2c4:	4621      	mov	r1, r4
 801f2c6:	691b      	ldr	r3, [r3, #16]
 801f2c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f2cc:	4718      	bx	r3
 801f2ce:	4b07      	ldr	r3, [pc, #28]	; (801f2ec <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801f2d0:	681b      	ldr	r3, [r3, #0]
 801f2d2:	3304      	adds	r3, #4
 801f2d4:	429d      	cmp	r5, r3
 801f2d6:	d107      	bne.n	801f2e8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801f2d8:	f7fe fff2 	bl	801e2c0 <_ZN8touchgfx11Application11getInstanceEv>
 801f2dc:	6821      	ldr	r1, [r4, #0]
 801f2de:	6862      	ldr	r2, [r4, #4]
 801f2e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f2e4:	f7ff b862 	b.w	801e3ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801f2e8:	bd70      	pop	{r4, r5, r6, pc}
 801f2ea:	bf00      	nop
 801f2ec:	2000f1a8 	.word	0x2000f1a8

0801f2f0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801f2f0:	b570      	push	{r4, r5, r6, lr}
 801f2f2:	4604      	mov	r4, r0
 801f2f4:	4616      	mov	r6, r2
 801f2f6:	460d      	mov	r5, r1
 801f2f8:	b901      	cbnz	r1, 801f2fc <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801f2fa:	b192      	cbz	r2, 801f322 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801f2fc:	6823      	ldr	r3, [r4, #0]
 801f2fe:	4620      	mov	r0, r4
 801f300:	699b      	ldr	r3, [r3, #24]
 801f302:	4798      	blx	r3
 801f304:	88e2      	ldrh	r2, [r4, #6]
 801f306:	88a1      	ldrh	r1, [r4, #4]
 801f308:	4432      	add	r2, r6
 801f30a:	4429      	add	r1, r5
 801f30c:	4620      	mov	r0, r4
 801f30e:	b212      	sxth	r2, r2
 801f310:	b209      	sxth	r1, r1
 801f312:	f7f1 fc13 	bl	8010b3c <_ZN8touchgfx8Drawable5setXYEss>
 801f316:	6823      	ldr	r3, [r4, #0]
 801f318:	4620      	mov	r0, r4
 801f31a:	699b      	ldr	r3, [r3, #24]
 801f31c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f320:	4718      	bx	r3
 801f322:	bd70      	pop	{r4, r5, r6, pc}

0801f324 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801f324:	b510      	push	{r4, lr}
 801f326:	4604      	mov	r4, r0
 801f328:	4608      	mov	r0, r1
 801f32a:	2300      	movs	r3, #0
 801f32c:	8023      	strh	r3, [r4, #0]
 801f32e:	8063      	strh	r3, [r4, #2]
 801f330:	6803      	ldr	r3, [r0, #0]
 801f332:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f336:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801f33a:	80a1      	strh	r1, [r4, #4]
 801f33c:	80e2      	strh	r2, [r4, #6]
 801f33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f340:	4621      	mov	r1, r4
 801f342:	4798      	blx	r3
 801f344:	4620      	mov	r0, r4
 801f346:	bd10      	pop	{r4, pc}

0801f348 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801f348:	b530      	push	{r4, r5, lr}
 801f34a:	8083      	strh	r3, [r0, #4]
 801f34c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801f350:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801f354:	7183      	strb	r3, [r0, #6]
 801f356:	79c3      	ldrb	r3, [r0, #7]
 801f358:	6101      	str	r1, [r0, #16]
 801f35a:	f365 0306 	bfi	r3, r5, #0, #7
 801f35e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801f362:	8282      	strh	r2, [r0, #20]
 801f364:	f365 13c7 	bfi	r3, r5, #7, #1
 801f368:	71c3      	strb	r3, [r0, #7]
 801f36a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801f36e:	7203      	strb	r3, [r0, #8]
 801f370:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801f374:	7243      	strb	r3, [r0, #9]
 801f376:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801f37a:	8143      	strh	r3, [r0, #10]
 801f37c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801f380:	8183      	strh	r3, [r0, #12]
 801f382:	4b01      	ldr	r3, [pc, #4]	; (801f388 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801f384:	6003      	str	r3, [r0, #0]
 801f386:	bd30      	pop	{r4, r5, pc}
 801f388:	08030afc 	.word	0x08030afc

0801f38c <_ZNK8touchgfx9ConstFont4findEt>:
 801f38c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f38e:	6904      	ldr	r4, [r0, #16]
 801f390:	b3bc      	cbz	r4, 801f402 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f392:	88a3      	ldrh	r3, [r4, #4]
 801f394:	8a82      	ldrh	r2, [r0, #20]
 801f396:	1acb      	subs	r3, r1, r3
 801f398:	f102 32ff 	add.w	r2, r2, #4294967295
 801f39c:	d431      	bmi.n	801f402 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f39e:	4293      	cmp	r3, r2
 801f3a0:	dd0c      	ble.n	801f3bc <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801f3a2:	230e      	movs	r3, #14
 801f3a4:	fb03 4302 	mla	r3, r3, r2, r4
 801f3a8:	889b      	ldrh	r3, [r3, #4]
 801f3aa:	1a5b      	subs	r3, r3, r1
 801f3ac:	1ad3      	subs	r3, r2, r3
 801f3ae:	429a      	cmp	r2, r3
 801f3b0:	db27      	blt.n	801f402 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f3b2:	2b00      	cmp	r3, #0
 801f3b4:	bfbc      	itt	lt
 801f3b6:	2302      	movlt	r3, #2
 801f3b8:	fb92 f3f3 	sdivlt	r3, r2, r3
 801f3bc:	2500      	movs	r5, #0
 801f3be:	260e      	movs	r6, #14
 801f3c0:	4295      	cmp	r5, r2
 801f3c2:	dc1e      	bgt.n	801f402 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f3c4:	fb06 4003 	mla	r0, r6, r3, r4
 801f3c8:	8887      	ldrh	r7, [r0, #4]
 801f3ca:	42b9      	cmp	r1, r7
 801f3cc:	d01a      	beq.n	801f404 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801f3ce:	d20d      	bcs.n	801f3ec <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801f3d0:	1e5a      	subs	r2, r3, #1
 801f3d2:	4295      	cmp	r5, r2
 801f3d4:	dc15      	bgt.n	801f402 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f3d6:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801f3da:	1a5b      	subs	r3, r3, r1
 801f3dc:	1ad3      	subs	r3, r2, r3
 801f3de:	429a      	cmp	r2, r3
 801f3e0:	db0f      	blt.n	801f402 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f3e2:	429d      	cmp	r5, r3
 801f3e4:	ddec      	ble.n	801f3c0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801f3e6:	1953      	adds	r3, r2, r5
 801f3e8:	105b      	asrs	r3, r3, #1
 801f3ea:	e7e9      	b.n	801f3c0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801f3ec:	1c5d      	adds	r5, r3, #1
 801f3ee:	42aa      	cmp	r2, r5
 801f3f0:	db07      	blt.n	801f402 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f3f2:	8a43      	ldrh	r3, [r0, #18]
 801f3f4:	1acb      	subs	r3, r1, r3
 801f3f6:	442b      	add	r3, r5
 801f3f8:	429d      	cmp	r5, r3
 801f3fa:	dc02      	bgt.n	801f402 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801f3fc:	429a      	cmp	r2, r3
 801f3fe:	dadf      	bge.n	801f3c0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801f400:	e7f1      	b.n	801f3e6 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801f402:	2000      	movs	r0, #0
 801f404:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f406 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801f406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f408:	4604      	mov	r4, r0
 801f40a:	4617      	mov	r7, r2
 801f40c:	461e      	mov	r6, r3
 801f40e:	b911      	cbnz	r1, 801f416 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801f410:	2500      	movs	r5, #0
 801f412:	4628      	mov	r0, r5
 801f414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f416:	290a      	cmp	r1, #10
 801f418:	d0fa      	beq.n	801f410 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801f41a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801f41e:	4291      	cmp	r1, r2
 801f420:	d0f6      	beq.n	801f410 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801f422:	f242 020b 	movw	r2, #8203	; 0x200b
 801f426:	4291      	cmp	r1, r2
 801f428:	d0f2      	beq.n	801f410 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801f42a:	f7ff ffaf 	bl	801f38c <_ZNK8touchgfx9ConstFont4findEt>
 801f42e:	4605      	mov	r5, r0
 801f430:	b950      	cbnz	r0, 801f448 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801f432:	6823      	ldr	r3, [r4, #0]
 801f434:	4620      	mov	r0, r4
 801f436:	691b      	ldr	r3, [r3, #16]
 801f438:	4798      	blx	r3
 801f43a:	4601      	mov	r1, r0
 801f43c:	4620      	mov	r0, r4
 801f43e:	f7ff ffa5 	bl	801f38c <_ZNK8touchgfx9ConstFont4findEt>
 801f442:	4605      	mov	r5, r0
 801f444:	2800      	cmp	r0, #0
 801f446:	d0e3      	beq.n	801f410 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801f448:	6823      	ldr	r3, [r4, #0]
 801f44a:	4629      	mov	r1, r5
 801f44c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f44e:	4620      	mov	r0, r4
 801f450:	4798      	blx	r3
 801f452:	6038      	str	r0, [r7, #0]
 801f454:	6823      	ldr	r3, [r4, #0]
 801f456:	4620      	mov	r0, r4
 801f458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f45a:	4798      	blx	r3
 801f45c:	7030      	strb	r0, [r6, #0]
 801f45e:	e7d8      	b.n	801f412 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801f460 <_ZN8touchgfx4clzuEm>:
 801f460:	4603      	mov	r3, r0
 801f462:	b1c8      	cbz	r0, 801f498 <_ZN8touchgfx4clzuEm+0x38>
 801f464:	0c02      	lsrs	r2, r0, #16
 801f466:	0412      	lsls	r2, r2, #16
 801f468:	b9a2      	cbnz	r2, 801f494 <_ZN8touchgfx4clzuEm+0x34>
 801f46a:	0403      	lsls	r3, r0, #16
 801f46c:	2010      	movs	r0, #16
 801f46e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801f472:	bf04      	itt	eq
 801f474:	021b      	lsleq	r3, r3, #8
 801f476:	3008      	addeq	r0, #8
 801f478:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801f47c:	bf04      	itt	eq
 801f47e:	011b      	lsleq	r3, r3, #4
 801f480:	3004      	addeq	r0, #4
 801f482:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801f486:	bf04      	itt	eq
 801f488:	009b      	lsleq	r3, r3, #2
 801f48a:	3002      	addeq	r0, #2
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	db04      	blt.n	801f49a <_ZN8touchgfx4clzuEm+0x3a>
 801f490:	3001      	adds	r0, #1
 801f492:	4770      	bx	lr
 801f494:	2000      	movs	r0, #0
 801f496:	e7ea      	b.n	801f46e <_ZN8touchgfx4clzuEm+0xe>
 801f498:	2020      	movs	r0, #32
 801f49a:	4770      	bx	lr

0801f49c <_ZN8touchgfx7muldivuEmmmRm>:
 801f49c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4a0:	4680      	mov	r8, r0
 801f4a2:	460f      	mov	r7, r1
 801f4a4:	4615      	mov	r5, r2
 801f4a6:	461e      	mov	r6, r3
 801f4a8:	f7ff ffda 	bl	801f460 <_ZN8touchgfx4clzuEm>
 801f4ac:	b998      	cbnz	r0, 801f4d6 <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801f4ae:	4608      	mov	r0, r1
 801f4b0:	f7ff ffd6 	bl	801f460 <_ZN8touchgfx4clzuEm>
 801f4b4:	2800      	cmp	r0, #0
 801f4b6:	dd08      	ble.n	801f4ca <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801f4b8:	4633      	mov	r3, r6
 801f4ba:	462a      	mov	r2, r5
 801f4bc:	4641      	mov	r1, r8
 801f4be:	4638      	mov	r0, r7
 801f4c0:	f7ff ffec 	bl	801f49c <_ZN8touchgfx7muldivuEmmmRm>
 801f4c4:	b003      	add	sp, #12
 801f4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4ca:	f04f 33ff 	mov.w	r3, #4294967295
 801f4ce:	6033      	str	r3, [r6, #0]
 801f4d0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801f4d4:	e7f6      	b.n	801f4c4 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801f4d6:	fa31 f900 	lsrs.w	r9, r1, r0
 801f4da:	fb01 f308 	mul.w	r3, r1, r8
 801f4de:	d105      	bne.n	801f4ec <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801f4e0:	fbb3 f0f5 	udiv	r0, r3, r5
 801f4e4:	fb05 3510 	mls	r5, r5, r0, r3
 801f4e8:	6035      	str	r5, [r6, #0]
 801f4ea:	e7eb      	b.n	801f4c4 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801f4ec:	2301      	movs	r3, #1
 801f4ee:	fa08 fb00 	lsl.w	fp, r8, r0
 801f4f2:	fa03 f000 	lsl.w	r0, r3, r0
 801f4f6:	3801      	subs	r0, #1
 801f4f8:	462a      	mov	r2, r5
 801f4fa:	4633      	mov	r3, r6
 801f4fc:	4641      	mov	r1, r8
 801f4fe:	4038      	ands	r0, r7
 801f500:	f7ff ffcc 	bl	801f49c <_ZN8touchgfx7muldivuEmmmRm>
 801f504:	fbbb faf5 	udiv	sl, fp, r5
 801f508:	462a      	mov	r2, r5
 801f50a:	4607      	mov	r7, r0
 801f50c:	ab01      	add	r3, sp, #4
 801f50e:	fb05 b11a 	mls	r1, r5, sl, fp
 801f512:	4648      	mov	r0, r9
 801f514:	f7ff ffc2 	bl	801f49c <_ZN8touchgfx7muldivuEmmmRm>
 801f518:	9b01      	ldr	r3, [sp, #4]
 801f51a:	6832      	ldr	r2, [r6, #0]
 801f51c:	fb09 f40a 	mul.w	r4, r9, sl
 801f520:	441a      	add	r2, r3
 801f522:	fbb2 f3f5 	udiv	r3, r2, r5
 801f526:	441c      	add	r4, r3
 801f528:	443c      	add	r4, r7
 801f52a:	4420      	add	r0, r4
 801f52c:	fb05 2513 	mls	r5, r5, r3, r2
 801f530:	e7da      	b.n	801f4e8 <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801f532 <_ZN8touchgfx6muldivElllRl>:
 801f532:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f534:	2800      	cmp	r0, #0
 801f536:	bfba      	itte	lt
 801f538:	4240      	neglt	r0, r0
 801f53a:	f04f 34ff 	movlt.w	r4, #4294967295
 801f53e:	2401      	movge	r4, #1
 801f540:	2900      	cmp	r1, #0
 801f542:	bfbc      	itt	lt
 801f544:	4249      	neglt	r1, r1
 801f546:	4264      	neglt	r4, r4
 801f548:	2a00      	cmp	r2, #0
 801f54a:	bfb6      	itet	lt
 801f54c:	4265      	neglt	r5, r4
 801f54e:	4625      	movge	r5, r4
 801f550:	4252      	neglt	r2, r2
 801f552:	4288      	cmp	r0, r1
 801f554:	461e      	mov	r6, r3
 801f556:	bfc2      	ittt	gt
 801f558:	4603      	movgt	r3, r0
 801f55a:	4608      	movgt	r0, r1
 801f55c:	4619      	movgt	r1, r3
 801f55e:	ab01      	add	r3, sp, #4
 801f560:	f7ff ff9c 	bl	801f49c <_ZN8touchgfx7muldivuEmmmRm>
 801f564:	9b01      	ldr	r3, [sp, #4]
 801f566:	4368      	muls	r0, r5
 801f568:	435c      	muls	r4, r3
 801f56a:	6034      	str	r4, [r6, #0]
 801f56c:	b002      	add	sp, #8
 801f56e:	bd70      	pop	{r4, r5, r6, pc}

0801f570 <_ZN8touchgfx6muldivElll>:
 801f570:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f572:	4606      	mov	r6, r0
 801f574:	ab01      	add	r3, sp, #4
 801f576:	460d      	mov	r5, r1
 801f578:	4614      	mov	r4, r2
 801f57a:	f7ff ffda 	bl	801f532 <_ZN8touchgfx6muldivElllRl>
 801f57e:	2e00      	cmp	r6, #0
 801f580:	db20      	blt.n	801f5c4 <_ZN8touchgfx6muldivElll+0x54>
 801f582:	bf14      	ite	ne
 801f584:	2301      	movne	r3, #1
 801f586:	2300      	moveq	r3, #0
 801f588:	2d00      	cmp	r5, #0
 801f58a:	db1e      	blt.n	801f5ca <_ZN8touchgfx6muldivElll+0x5a>
 801f58c:	bf14      	ite	ne
 801f58e:	2201      	movne	r2, #1
 801f590:	2200      	moveq	r2, #0
 801f592:	2c00      	cmp	r4, #0
 801f594:	fb03 f202 	mul.w	r2, r3, r2
 801f598:	db1a      	blt.n	801f5d0 <_ZN8touchgfx6muldivElll+0x60>
 801f59a:	bf14      	ite	ne
 801f59c:	2301      	movne	r3, #1
 801f59e:	2300      	moveq	r3, #0
 801f5a0:	4353      	muls	r3, r2
 801f5a2:	2b01      	cmp	r3, #1
 801f5a4:	d117      	bne.n	801f5d6 <_ZN8touchgfx6muldivElll+0x66>
 801f5a6:	9b01      	ldr	r3, [sp, #4]
 801f5a8:	2c00      	cmp	r4, #0
 801f5aa:	bfb8      	it	lt
 801f5ac:	4264      	neglt	r4, r4
 801f5ae:	2b00      	cmp	r3, #0
 801f5b0:	f104 0401 	add.w	r4, r4, #1
 801f5b4:	bfb8      	it	lt
 801f5b6:	425b      	neglt	r3, r3
 801f5b8:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801f5bc:	db00      	blt.n	801f5c0 <_ZN8touchgfx6muldivElll+0x50>
 801f5be:	3001      	adds	r0, #1
 801f5c0:	b002      	add	sp, #8
 801f5c2:	bd70      	pop	{r4, r5, r6, pc}
 801f5c4:	f04f 33ff 	mov.w	r3, #4294967295
 801f5c8:	e7de      	b.n	801f588 <_ZN8touchgfx6muldivElll+0x18>
 801f5ca:	f04f 32ff 	mov.w	r2, #4294967295
 801f5ce:	e7e0      	b.n	801f592 <_ZN8touchgfx6muldivElll+0x22>
 801f5d0:	f04f 33ff 	mov.w	r3, #4294967295
 801f5d4:	e7e4      	b.n	801f5a0 <_ZN8touchgfx6muldivElll+0x30>
 801f5d6:	3301      	adds	r3, #1
 801f5d8:	d1f2      	bne.n	801f5c0 <_ZN8touchgfx6muldivElll+0x50>
 801f5da:	9b01      	ldr	r3, [sp, #4]
 801f5dc:	2c00      	cmp	r4, #0
 801f5de:	bfb8      	it	lt
 801f5e0:	4264      	neglt	r4, r4
 801f5e2:	2b00      	cmp	r3, #0
 801f5e4:	bfb8      	it	lt
 801f5e6:	425b      	neglt	r3, r3
 801f5e8:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801f5ec:	bfc8      	it	gt
 801f5ee:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801f5f2:	e7e5      	b.n	801f5c0 <_ZN8touchgfx6muldivElll+0x50>

0801f5f4 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801f5f4:	2000      	movs	r0, #0
 801f5f6:	4770      	bx	lr

0801f5f8 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801f5f8:	2001      	movs	r0, #1
 801f5fa:	4770      	bx	lr

0801f5fc <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801f5fc:	2002      	movs	r0, #2
 801f5fe:	4770      	bx	lr

0801f600 <_ZN8touchgfx12GestureEventD1Ev>:
 801f600:	4770      	bx	lr

0801f602 <_ZN8touchgfx9DragEventD1Ev>:
 801f602:	4770      	bx	lr

0801f604 <_ZN8touchgfx10ClickEventD1Ev>:
 801f604:	4770      	bx	lr

0801f606 <_ZN8touchgfx10ClickEventD0Ev>:
 801f606:	b510      	push	{r4, lr}
 801f608:	210c      	movs	r1, #12
 801f60a:	4604      	mov	r4, r0
 801f60c:	f00e f930 	bl	802d870 <_ZdlPvj>
 801f610:	4620      	mov	r0, r4
 801f612:	bd10      	pop	{r4, pc}

0801f614 <_ZN8touchgfx9DragEventD0Ev>:
 801f614:	b510      	push	{r4, lr}
 801f616:	2110      	movs	r1, #16
 801f618:	4604      	mov	r4, r0
 801f61a:	f00e f929 	bl	802d870 <_ZdlPvj>
 801f61e:	4620      	mov	r0, r4
 801f620:	bd10      	pop	{r4, pc}

0801f622 <_ZN8touchgfx12GestureEventD0Ev>:
 801f622:	b510      	push	{r4, lr}
 801f624:	210c      	movs	r1, #12
 801f626:	4604      	mov	r4, r0
 801f628:	f00e f922 	bl	802d870 <_ZdlPvj>
 801f62c:	4620      	mov	r0, r4
 801f62e:	bd10      	pop	{r4, pc}

0801f630 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801f630:	b530      	push	{r4, r5, lr}
 801f632:	460d      	mov	r5, r1
 801f634:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801f636:	b087      	sub	sp, #28
 801f638:	4604      	mov	r4, r0
 801f63a:	b301      	cbz	r1, 801f67e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801f63c:	a801      	add	r0, sp, #4
 801f63e:	f7ff fe71 	bl	801f324 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f642:	892a      	ldrh	r2, [r5, #8]
 801f644:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801f648:	7928      	ldrb	r0, [r5, #4]
 801f64a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801f64e:	f88d 0010 	strb.w	r0, [sp, #16]
 801f652:	1ad2      	subs	r2, r2, r3
 801f654:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801f656:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f658:	f8ad 1012 	strh.w	r1, [sp, #18]
 801f65c:	441a      	add	r2, r3
 801f65e:	896b      	ldrh	r3, [r5, #10]
 801f660:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801f664:	f8ad 2014 	strh.w	r2, [sp, #20]
 801f668:	1b5b      	subs	r3, r3, r5
 801f66a:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801f66c:	442b      	add	r3, r5
 801f66e:	4d05      	ldr	r5, [pc, #20]	; (801f684 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801f670:	9503      	str	r5, [sp, #12]
 801f672:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f676:	6803      	ldr	r3, [r0, #0]
 801f678:	a903      	add	r1, sp, #12
 801f67a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f67c:	4798      	blx	r3
 801f67e:	b007      	add	sp, #28
 801f680:	bd30      	pop	{r4, r5, pc}
 801f682:	bf00      	nop
 801f684:	08030b7c 	.word	0x08030b7c

0801f688 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801f688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f68c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801f68e:	b08a      	sub	sp, #40	; 0x28
 801f690:	4604      	mov	r4, r0
 801f692:	460d      	mov	r5, r1
 801f694:	b113      	cbz	r3, 801f69c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801f696:	790b      	ldrb	r3, [r1, #4]
 801f698:	2b00      	cmp	r3, #0
 801f69a:	d044      	beq.n	801f726 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801f69c:	f104 0804 	add.w	r8, r4, #4
 801f6a0:	4641      	mov	r1, r8
 801f6a2:	a803      	add	r0, sp, #12
 801f6a4:	f7ff fe3e 	bl	801f324 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f6a8:	792b      	ldrb	r3, [r5, #4]
 801f6aa:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801f6ae:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801f6b2:	b983      	cbnz	r3, 801f6d6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801f6b4:	892a      	ldrh	r2, [r5, #8]
 801f6b6:	88e9      	ldrh	r1, [r5, #6]
 801f6b8:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801f6bc:	1b92      	subs	r2, r2, r6
 801f6be:	1bc9      	subs	r1, r1, r7
 801f6c0:	9301      	str	r3, [sp, #4]
 801f6c2:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801f6c6:	9300      	str	r3, [sp, #0]
 801f6c8:	b212      	sxth	r2, r2
 801f6ca:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801f6ce:	b209      	sxth	r1, r1
 801f6d0:	4640      	mov	r0, r8
 801f6d2:	f7f9 ffe7 	bl	80196a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801f6d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801f6d8:	b329      	cbz	r1, 801f726 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801f6da:	a805      	add	r0, sp, #20
 801f6dc:	f7ff fe22 	bl	801f324 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f6e0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801f6e4:	792b      	ldrb	r3, [r5, #4]
 801f6e6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f6e8:	f88d 3020 	strb.w	r3, [sp, #32]
 801f6ec:	1abf      	subs	r7, r7, r2
 801f6ee:	88ea      	ldrh	r2, [r5, #6]
 801f6f0:	4417      	add	r7, r2
 801f6f2:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801f6f4:	4417      	add	r7, r2
 801f6f6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801f6fa:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801f6fe:	1ab6      	subs	r6, r6, r2
 801f700:	892a      	ldrh	r2, [r5, #8]
 801f702:	4416      	add	r6, r2
 801f704:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801f706:	4416      	add	r6, r2
 801f708:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801f70c:	4a07      	ldr	r2, [pc, #28]	; (801f72c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801f70e:	9207      	str	r2, [sp, #28]
 801f710:	2600      	movs	r6, #0
 801f712:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801f716:	6803      	ldr	r3, [r0, #0]
 801f718:	a907      	add	r1, sp, #28
 801f71a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f71c:	4798      	blx	r3
 801f71e:	792b      	ldrb	r3, [r5, #4]
 801f720:	b10b      	cbz	r3, 801f726 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801f722:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801f726:	b00a      	add	sp, #40	; 0x28
 801f728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f72c:	08030b54 	.word	0x08030b54

0801f730 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801f730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f734:	460c      	mov	r4, r1
 801f736:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801f738:	b088      	sub	sp, #32
 801f73a:	4605      	mov	r5, r0
 801f73c:	2900      	cmp	r1, #0
 801f73e:	d06d      	beq.n	801f81c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801f740:	4668      	mov	r0, sp
 801f742:	f7ff fdef 	bl	801f324 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f746:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801f748:	88e3      	ldrh	r3, [r4, #6]
 801f74a:	f9bd 8000 	ldrsh.w	r8, [sp]
 801f74e:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801f752:	440b      	add	r3, r1
 801f754:	b21b      	sxth	r3, r3
 801f756:	4543      	cmp	r3, r8
 801f758:	db31      	blt.n	801f7be <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801f75a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801f75e:	44c4      	add	ip, r8
 801f760:	fa0f fc8c 	sxth.w	ip, ip
 801f764:	4563      	cmp	r3, ip
 801f766:	da2a      	bge.n	801f7be <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801f768:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801f76a:	8926      	ldrh	r6, [r4, #8]
 801f76c:	4416      	add	r6, r2
 801f76e:	b236      	sxth	r6, r6
 801f770:	42be      	cmp	r6, r7
 801f772:	db24      	blt.n	801f7be <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801f774:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801f778:	4438      	add	r0, r7
 801f77a:	b200      	sxth	r0, r0
 801f77c:	4286      	cmp	r6, r0
 801f77e:	da1e      	bge.n	801f7be <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801f780:	8963      	ldrh	r3, [r4, #10]
 801f782:	4419      	add	r1, r3
 801f784:	b209      	sxth	r1, r1
 801f786:	4541      	cmp	r1, r8
 801f788:	db08      	blt.n	801f79c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801f78a:	4561      	cmp	r1, ip
 801f78c:	da06      	bge.n	801f79c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801f78e:	89a3      	ldrh	r3, [r4, #12]
 801f790:	441a      	add	r2, r3
 801f792:	b212      	sxth	r2, r2
 801f794:	42ba      	cmp	r2, r7
 801f796:	db01      	blt.n	801f79c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801f798:	4282      	cmp	r2, r0
 801f79a:	db10      	blt.n	801f7be <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801f79c:	4b21      	ldr	r3, [pc, #132]	; (801f824 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801f79e:	9304      	str	r3, [sp, #16]
 801f7a0:	2302      	movs	r3, #2
 801f7a2:	f88d 3014 	strb.w	r3, [sp, #20]
 801f7a6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801f7a8:	2300      	movs	r3, #0
 801f7aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f7ae:	f8ad 3018 	strh.w	r3, [sp, #24]
 801f7b2:	f8ad 301a 	strh.w	r3, [sp, #26]
 801f7b6:	6803      	ldr	r3, [r0, #0]
 801f7b8:	a904      	add	r1, sp, #16
 801f7ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f7bc:	4798      	blx	r3
 801f7be:	1d29      	adds	r1, r5, #4
 801f7c0:	a802      	add	r0, sp, #8
 801f7c2:	f7ff fdaf 	bl	801f324 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f7c6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f7ca:	88e0      	ldrh	r0, [r4, #6]
 801f7cc:	7921      	ldrb	r1, [r4, #4]
 801f7ce:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801f7d2:	8922      	ldrh	r2, [r4, #8]
 801f7d4:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801f7d6:	f88d 1014 	strb.w	r1, [sp, #20]
 801f7da:	eba3 0808 	sub.w	r8, r3, r8
 801f7de:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f7e2:	1bdf      	subs	r7, r3, r7
 801f7e4:	b2bb      	uxth	r3, r7
 801f7e6:	fa1f f888 	uxth.w	r8, r8
 801f7ea:	8967      	ldrh	r7, [r4, #10]
 801f7ec:	89a4      	ldrh	r4, [r4, #12]
 801f7ee:	4440      	add	r0, r8
 801f7f0:	4460      	add	r0, ip
 801f7f2:	441a      	add	r2, r3
 801f7f4:	44b8      	add	r8, r7
 801f7f6:	4423      	add	r3, r4
 801f7f8:	f8ad 0016 	strh.w	r0, [sp, #22]
 801f7fc:	4433      	add	r3, r6
 801f7fe:	4432      	add	r2, r6
 801f800:	44e0      	add	r8, ip
 801f802:	4c09      	ldr	r4, [pc, #36]	; (801f828 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801f804:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801f806:	9404      	str	r4, [sp, #16]
 801f808:	f8ad 2018 	strh.w	r2, [sp, #24]
 801f80c:	f8ad 801a 	strh.w	r8, [sp, #26]
 801f810:	f8ad 301c 	strh.w	r3, [sp, #28]
 801f814:	6803      	ldr	r3, [r0, #0]
 801f816:	a904      	add	r1, sp, #16
 801f818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f81a:	4798      	blx	r3
 801f81c:	b008      	add	sp, #32
 801f81e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f822:	bf00      	nop
 801f824:	08030b54 	.word	0x08030b54
 801f828:	08030b68 	.word	0x08030b68

0801f82c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801f82c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f82e:	4604      	mov	r4, r0
 801f830:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801f834:	3201      	adds	r2, #1
 801f836:	d112      	bne.n	801f85e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801f838:	6803      	ldr	r3, [r0, #0]
 801f83a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801f83e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f842:	f8ad 1004 	strh.w	r1, [sp, #4]
 801f846:	2500      	movs	r5, #0
 801f848:	9500      	str	r5, [sp, #0]
 801f84a:	466d      	mov	r5, sp
 801f84c:	4629      	mov	r1, r5
 801f84e:	f8ad 2006 	strh.w	r2, [sp, #6]
 801f852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f854:	4798      	blx	r3
 801f856:	e895 0003 	ldmia.w	r5, {r0, r1}
 801f85a:	e884 0003 	stmia.w	r4, {r0, r1}
 801f85e:	4620      	mov	r0, r4
 801f860:	b003      	add	sp, #12
 801f862:	bd30      	pop	{r4, r5, pc}

0801f864 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801f864:	b513      	push	{r0, r1, r4, lr}
 801f866:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801f86a:	3301      	adds	r3, #1
 801f86c:	4604      	mov	r4, r0
 801f86e:	d109      	bne.n	801f884 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801f870:	4601      	mov	r1, r0
 801f872:	4668      	mov	r0, sp
 801f874:	f7ff fd56 	bl	801f324 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f878:	f8bd 3000 	ldrh.w	r3, [sp]
 801f87c:	8423      	strh	r3, [r4, #32]
 801f87e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f882:	8463      	strh	r3, [r4, #34]	; 0x22
 801f884:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801f888:	b002      	add	sp, #8
 801f88a:	bd10      	pop	{r4, pc}

0801f88c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801f88c:	b513      	push	{r0, r1, r4, lr}
 801f88e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801f892:	3301      	adds	r3, #1
 801f894:	4604      	mov	r4, r0
 801f896:	d109      	bne.n	801f8ac <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801f898:	4601      	mov	r1, r0
 801f89a:	4668      	mov	r0, sp
 801f89c:	f7ff fd42 	bl	801f324 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f8a0:	f8bd 3000 	ldrh.w	r3, [sp]
 801f8a4:	8423      	strh	r3, [r4, #32]
 801f8a6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f8aa:	8463      	strh	r3, [r4, #34]	; 0x22
 801f8ac:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801f8b0:	b002      	add	sp, #8
 801f8b2:	bd10      	pop	{r4, pc}

0801f8b4 <_ZN8touchgfx6ScreenC1Ev>:
 801f8b4:	b570      	push	{r4, r5, r6, lr}
 801f8b6:	4605      	mov	r5, r0
 801f8b8:	4b16      	ldr	r3, [pc, #88]	; (801f914 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801f8ba:	f845 3b04 	str.w	r3, [r5], #4
 801f8be:	2300      	movs	r3, #0
 801f8c0:	8103      	strh	r3, [r0, #8]
 801f8c2:	8143      	strh	r3, [r0, #10]
 801f8c4:	8183      	strh	r3, [r0, #12]
 801f8c6:	81c3      	strh	r3, [r0, #14]
 801f8c8:	8203      	strh	r3, [r0, #16]
 801f8ca:	8243      	strh	r3, [r0, #18]
 801f8cc:	8283      	strh	r3, [r0, #20]
 801f8ce:	82c3      	strh	r3, [r0, #22]
 801f8d0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801f8d4:	6203      	str	r3, [r0, #32]
 801f8d6:	8483      	strh	r3, [r0, #36]	; 0x24
 801f8d8:	84c3      	strh	r3, [r0, #38]	; 0x26
 801f8da:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801f8de:	4a0e      	ldr	r2, [pc, #56]	; (801f918 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801f8e0:	6343      	str	r3, [r0, #52]	; 0x34
 801f8e2:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801f8e6:	4b0d      	ldr	r3, [pc, #52]	; (801f91c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801f8e8:	6042      	str	r2, [r0, #4]
 801f8ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 801f8ee:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801f8f0:	4a0b      	ldr	r2, [pc, #44]	; (801f920 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801f8f2:	4604      	mov	r4, r0
 801f8f4:	2101      	movs	r1, #1
 801f8f6:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801f8fa:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801f8fe:	f9b2 1000 	ldrsh.w	r1, [r2]
 801f902:	4628      	mov	r0, r5
 801f904:	4798      	blx	r3
 801f906:	6863      	ldr	r3, [r4, #4]
 801f908:	4628      	mov	r0, r5
 801f90a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f90c:	4631      	mov	r1, r6
 801f90e:	4798      	blx	r3
 801f910:	4620      	mov	r0, r4
 801f912:	bd70      	pop	{r4, r5, r6, pc}
 801f914:	08030b90 	.word	0x08030b90
 801f918:	08030424 	.word	0x08030424
 801f91c:	2000f158 	.word	0x2000f158
 801f920:	2000f156 	.word	0x2000f156

0801f924 <_ZN8touchgfx6Screen4drawEv>:
 801f924:	b507      	push	{r0, r1, r2, lr}
 801f926:	4b09      	ldr	r3, [pc, #36]	; (801f94c <_ZN8touchgfx6Screen4drawEv+0x28>)
 801f928:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f92c:	4b08      	ldr	r3, [pc, #32]	; (801f950 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801f92e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801f932:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f936:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f93a:	6803      	ldr	r3, [r0, #0]
 801f93c:	2100      	movs	r1, #0
 801f93e:	9100      	str	r1, [sp, #0]
 801f940:	689b      	ldr	r3, [r3, #8]
 801f942:	4669      	mov	r1, sp
 801f944:	4798      	blx	r3
 801f946:	b003      	add	sp, #12
 801f948:	f85d fb04 	ldr.w	pc, [sp], #4
 801f94c:	2000f156 	.word	0x2000f156
 801f950:	2000f158 	.word	0x2000f158

0801f954 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801f954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f958:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801f95c:	2b00      	cmp	r3, #0
 801f95e:	b089      	sub	sp, #36	; 0x24
 801f960:	4680      	mov	r8, r0
 801f962:	460c      	mov	r4, r1
 801f964:	4615      	mov	r5, r2
 801f966:	dd0e      	ble.n	801f986 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801f968:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801f96c:	2b00      	cmp	r3, #0
 801f96e:	dd0a      	ble.n	801f986 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801f970:	4628      	mov	r0, r5
 801f972:	f7ff ff5b 	bl	801f82c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801f976:	4621      	mov	r1, r4
 801f978:	f7fe fbc4 	bl	801e104 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801f97c:	69eb      	ldr	r3, [r5, #28]
 801f97e:	b928      	cbnz	r0, 801f98c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801f980:	461d      	mov	r5, r3
 801f982:	2b00      	cmp	r3, #0
 801f984:	d1f4      	bne.n	801f970 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801f986:	b009      	add	sp, #36	; 0x24
 801f988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f98c:	ae04      	add	r6, sp, #16
 801f98e:	2b00      	cmp	r3, #0
 801f990:	f000 80b5 	beq.w	801fafe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801f994:	682b      	ldr	r3, [r5, #0]
 801f996:	4629      	mov	r1, r5
 801f998:	68db      	ldr	r3, [r3, #12]
 801f99a:	a802      	add	r0, sp, #8
 801f99c:	4798      	blx	r3
 801f99e:	4628      	mov	r0, r5
 801f9a0:	f7ff ff60 	bl	801f864 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801f9a4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801f9a8:	4407      	add	r7, r0
 801f9aa:	4628      	mov	r0, r5
 801f9ac:	f7ff ff6e 	bl	801f88c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801f9b0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f9b4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801f9b8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801f9bc:	4418      	add	r0, r3
 801f9be:	4621      	mov	r1, r4
 801f9c0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801f9c4:	f8ad 0012 	strh.w	r0, [sp, #18]
 801f9c8:	b23f      	sxth	r7, r7
 801f9ca:	4630      	mov	r0, r6
 801f9cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f9d0:	f8ad 7010 	strh.w	r7, [sp, #16]
 801f9d4:	f7f9 ff4a 	bl	801986c <_ZN8touchgfx4RectaNERKS0_>
 801f9d8:	4628      	mov	r0, r5
 801f9da:	f7ff ff27 	bl	801f82c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801f9de:	4602      	mov	r2, r0
 801f9e0:	e896 0003 	ldmia.w	r6, {r0, r1}
 801f9e4:	ab06      	add	r3, sp, #24
 801f9e6:	e883 0003 	stmia.w	r3, {r0, r1}
 801f9ea:	4611      	mov	r1, r2
 801f9ec:	4618      	mov	r0, r3
 801f9ee:	f7f9 ff3d 	bl	801986c <_ZN8touchgfx4RectaNERKS0_>
 801f9f2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801f9f6:	f9b4 1000 	ldrsh.w	r1, [r4]
 801f9fa:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801f9fe:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801fa02:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801fa06:	4299      	cmp	r1, r3
 801fa08:	d10b      	bne.n	801fa22 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801fa0a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801fa0e:	4552      	cmp	r2, sl
 801fa10:	d107      	bne.n	801fa22 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801fa12:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801fa16:	455a      	cmp	r2, fp
 801fa18:	d103      	bne.n	801fa22 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801fa1a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801fa1e:	454a      	cmp	r2, r9
 801fa20:	d06d      	beq.n	801fafe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801fa22:	f1bb 0f00 	cmp.w	fp, #0
 801fa26:	dd65      	ble.n	801faf4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801fa28:	f1b9 0f00 	cmp.w	r9, #0
 801fa2c:	dd62      	ble.n	801faf4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801fa2e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801fa32:	fa1f f08a 	uxth.w	r0, sl
 801fa36:	4552      	cmp	r2, sl
 801fa38:	9000      	str	r0, [sp, #0]
 801fa3a:	da12      	bge.n	801fa62 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801fa3c:	9301      	str	r3, [sp, #4]
 801fa3e:	9b00      	ldr	r3, [sp, #0]
 801fa40:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801fa44:	f8ad 2012 	strh.w	r2, [sp, #18]
 801fa48:	1a9a      	subs	r2, r3, r2
 801fa4a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801fa4e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801fa52:	f8ad 2016 	strh.w	r2, [sp, #22]
 801fa56:	69ea      	ldr	r2, [r5, #28]
 801fa58:	4631      	mov	r1, r6
 801fa5a:	4640      	mov	r0, r8
 801fa5c:	f7ff ff7a 	bl	801f954 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fa60:	9b01      	ldr	r3, [sp, #4]
 801fa62:	f9b4 2000 	ldrsh.w	r2, [r4]
 801fa66:	429a      	cmp	r2, r3
 801fa68:	b29f      	uxth	r7, r3
 801fa6a:	da0d      	bge.n	801fa88 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801fa6c:	f8ad 2010 	strh.w	r2, [sp, #16]
 801fa70:	1aba      	subs	r2, r7, r2
 801fa72:	f8ad a012 	strh.w	sl, [sp, #18]
 801fa76:	f8ad 2014 	strh.w	r2, [sp, #20]
 801fa7a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801fa7e:	69ea      	ldr	r2, [r5, #28]
 801fa80:	4631      	mov	r1, r6
 801fa82:	4640      	mov	r0, r8
 801fa84:	f7ff ff66 	bl	801f954 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fa88:	8822      	ldrh	r2, [r4, #0]
 801fa8a:	88a3      	ldrh	r3, [r4, #4]
 801fa8c:	445f      	add	r7, fp
 801fa8e:	4413      	add	r3, r2
 801fa90:	b29b      	uxth	r3, r3
 801fa92:	b2bf      	uxth	r7, r7
 801fa94:	b23a      	sxth	r2, r7
 801fa96:	b219      	sxth	r1, r3
 801fa98:	4291      	cmp	r1, r2
 801fa9a:	dd0d      	ble.n	801fab8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801fa9c:	1bdb      	subs	r3, r3, r7
 801fa9e:	f8ad 2010 	strh.w	r2, [sp, #16]
 801faa2:	f8ad a012 	strh.w	sl, [sp, #18]
 801faa6:	f8ad 3014 	strh.w	r3, [sp, #20]
 801faaa:	f8ad 9016 	strh.w	r9, [sp, #22]
 801faae:	69ea      	ldr	r2, [r5, #28]
 801fab0:	4631      	mov	r1, r6
 801fab2:	4640      	mov	r0, r8
 801fab4:	f7ff ff4e 	bl	801f954 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fab8:	88e2      	ldrh	r2, [r4, #6]
 801faba:	8863      	ldrh	r3, [r4, #2]
 801fabc:	4413      	add	r3, r2
 801fabe:	9a00      	ldr	r2, [sp, #0]
 801fac0:	444a      	add	r2, r9
 801fac2:	b29b      	uxth	r3, r3
 801fac4:	fa1f f982 	uxth.w	r9, r2
 801fac8:	fa0f f289 	sxth.w	r2, r9
 801facc:	b219      	sxth	r1, r3
 801face:	428a      	cmp	r2, r1
 801fad0:	da15      	bge.n	801fafe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801fad2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801fad6:	f9b4 0000 	ldrsh.w	r0, [r4]
 801fada:	f8ad 1014 	strh.w	r1, [sp, #20]
 801fade:	eba3 0309 	sub.w	r3, r3, r9
 801fae2:	f8ad 0010 	strh.w	r0, [sp, #16]
 801fae6:	f8ad 2012 	strh.w	r2, [sp, #18]
 801faea:	f8ad 3016 	strh.w	r3, [sp, #22]
 801faee:	69ea      	ldr	r2, [r5, #28]
 801faf0:	4631      	mov	r1, r6
 801faf2:	e001      	b.n	801faf8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801faf4:	69ea      	ldr	r2, [r5, #28]
 801faf6:	4621      	mov	r1, r4
 801faf8:	4640      	mov	r0, r8
 801fafa:	f7ff ff2b 	bl	801f954 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fafe:	4628      	mov	r0, r5
 801fb00:	f7ff fe94 	bl	801f82c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801fb04:	6861      	ldr	r1, [r4, #4]
 801fb06:	4602      	mov	r2, r0
 801fb08:	6820      	ldr	r0, [r4, #0]
 801fb0a:	4633      	mov	r3, r6
 801fb0c:	c303      	stmia	r3!, {r0, r1}
 801fb0e:	4611      	mov	r1, r2
 801fb10:	4630      	mov	r0, r6
 801fb12:	f7f9 feab 	bl	801986c <_ZN8touchgfx4RectaNERKS0_>
 801fb16:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801fb1a:	2b00      	cmp	r3, #0
 801fb1c:	f77f af33 	ble.w	801f986 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801fb20:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801fb24:	2b00      	cmp	r3, #0
 801fb26:	f77f af2e 	ble.w	801f986 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801fb2a:	4628      	mov	r0, r5
 801fb2c:	f7ff fe9a 	bl	801f864 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801fb30:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801fb34:	1a18      	subs	r0, r3, r0
 801fb36:	f8ad 0010 	strh.w	r0, [sp, #16]
 801fb3a:	4628      	mov	r0, r5
 801fb3c:	f7ff fea6 	bl	801f88c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801fb40:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801fb44:	1a18      	subs	r0, r3, r0
 801fb46:	f8ad 0012 	strh.w	r0, [sp, #18]
 801fb4a:	682b      	ldr	r3, [r5, #0]
 801fb4c:	4631      	mov	r1, r6
 801fb4e:	689b      	ldr	r3, [r3, #8]
 801fb50:	4628      	mov	r0, r5
 801fb52:	4798      	blx	r3
 801fb54:	e717      	b.n	801f986 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801fb56 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801fb56:	b570      	push	{r4, r5, r6, lr}
 801fb58:	460c      	mov	r4, r1
 801fb5a:	b086      	sub	sp, #24
 801fb5c:	1d06      	adds	r6, r0, #4
 801fb5e:	2300      	movs	r3, #0
 801fb60:	4631      	mov	r1, r6
 801fb62:	4605      	mov	r5, r0
 801fb64:	a802      	add	r0, sp, #8
 801fb66:	9301      	str	r3, [sp, #4]
 801fb68:	f7ff fbdc 	bl	801f324 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fb6c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801fb70:	8822      	ldrh	r2, [r4, #0]
 801fb72:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801fb76:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801fb7a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801fb7e:	1ad2      	subs	r2, r2, r3
 801fb80:	8863      	ldrh	r3, [r4, #2]
 801fb82:	f8ad 2010 	strh.w	r2, [sp, #16]
 801fb86:	1a5b      	subs	r3, r3, r1
 801fb88:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801fb8c:	f8ad 1016 	strh.w	r1, [sp, #22]
 801fb90:	aa01      	add	r2, sp, #4
 801fb92:	a904      	add	r1, sp, #16
 801fb94:	4630      	mov	r0, r6
 801fb96:	f8ad 3012 	strh.w	r3, [sp, #18]
 801fb9a:	f7f9 ff3f 	bl	8019a1c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801fb9e:	9a01      	ldr	r2, [sp, #4]
 801fba0:	b11a      	cbz	r2, 801fbaa <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801fba2:	4621      	mov	r1, r4
 801fba4:	4628      	mov	r0, r5
 801fba6:	f7ff fed5 	bl	801f954 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801fbaa:	b006      	add	sp, #24
 801fbac:	bd70      	pop	{r4, r5, r6, pc}

0801fbae <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801fbae:	b530      	push	{r4, r5, lr}
 801fbb0:	4602      	mov	r2, r0
 801fbb2:	4604      	mov	r4, r0
 801fbb4:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801fbb8:	b085      	sub	sp, #20
 801fbba:	460d      	mov	r5, r1
 801fbbc:	6851      	ldr	r1, [r2, #4]
 801fbbe:	466b      	mov	r3, sp
 801fbc0:	c303      	stmia	r3!, {r0, r1}
 801fbc2:	4629      	mov	r1, r5
 801fbc4:	4668      	mov	r0, sp
 801fbc6:	f7f9 fe51 	bl	801986c <_ZN8touchgfx4RectaNERKS0_>
 801fbca:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801fbce:	b12b      	cbz	r3, 801fbdc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801fbd0:	4669      	mov	r1, sp
 801fbd2:	4620      	mov	r0, r4
 801fbd4:	f7ff ffbf 	bl	801fb56 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801fbd8:	b005      	add	sp, #20
 801fbda:	bd30      	pop	{r4, r5, pc}
 801fbdc:	3404      	adds	r4, #4
 801fbde:	4621      	mov	r1, r4
 801fbe0:	a802      	add	r0, sp, #8
 801fbe2:	f7ff fb9f 	bl	801f324 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801fbe6:	f8bd 3000 	ldrh.w	r3, [sp]
 801fbea:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801fbee:	1a9b      	subs	r3, r3, r2
 801fbf0:	f8ad 3000 	strh.w	r3, [sp]
 801fbf4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801fbf8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801fbfc:	4669      	mov	r1, sp
 801fbfe:	1a9b      	subs	r3, r3, r2
 801fc00:	4620      	mov	r0, r4
 801fc02:	f8ad 3002 	strh.w	r3, [sp, #2]
 801fc06:	f7f9 fed0 	bl	80199aa <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801fc0a:	e7e5      	b.n	801fbd8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801fc0c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801fc0c:	680a      	ldr	r2, [r1, #0]
 801fc0e:	460b      	mov	r3, r1
 801fc10:	6992      	ldr	r2, [r2, #24]
 801fc12:	1d01      	adds	r1, r0, #4
 801fc14:	4618      	mov	r0, r3
 801fc16:	4710      	bx	r2

0801fc18 <_ZN8touchgfx12TextProviderC1Ev>:
 801fc18:	b538      	push	{r3, r4, r5, lr}
 801fc1a:	2500      	movs	r5, #0
 801fc1c:	2302      	movs	r3, #2
 801fc1e:	4604      	mov	r4, r0
 801fc20:	e9c0 5500 	strd	r5, r5, [r0]
 801fc24:	7403      	strb	r3, [r0, #16]
 801fc26:	6145      	str	r5, [r0, #20]
 801fc28:	7605      	strb	r5, [r0, #24]
 801fc2a:	83c5      	strh	r5, [r0, #30]
 801fc2c:	8405      	strh	r5, [r0, #32]
 801fc2e:	86c5      	strh	r5, [r0, #54]	; 0x36
 801fc30:	8705      	strh	r5, [r0, #56]	; 0x38
 801fc32:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801fc34:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801fc38:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801fc3c:	220e      	movs	r2, #14
 801fc3e:	4629      	mov	r1, r5
 801fc40:	304c      	adds	r0, #76	; 0x4c
 801fc42:	f00d ffc9 	bl	802dbd8 <memset>
 801fc46:	2301      	movs	r3, #1
 801fc48:	4620      	mov	r0, r4
 801fc4a:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801fc4e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801fc52:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801fc56:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801fc5a:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801fc5e:	f7f6 f90f 	bl	8015e80 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801fc62:	4620      	mov	r0, r4
 801fc64:	bd38      	pop	{r3, r4, r5, pc}

0801fc66 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801fc66:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801fc68:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801fc6c:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801fc6e:	fab0 f080 	clz	r0, r0
 801fc72:	0940      	lsrs	r0, r0, #5
 801fc74:	4770      	bx	lr

0801fc76 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801fc76:	b530      	push	{r4, r5, lr}
 801fc78:	2500      	movs	r5, #0
 801fc7a:	2401      	movs	r4, #1
 801fc7c:	6843      	ldr	r3, [r0, #4]
 801fc7e:	b913      	cbnz	r3, 801fc86 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801fc80:	6803      	ldr	r3, [r0, #0]
 801fc82:	b313      	cbz	r3, 801fcca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801fc84:	6043      	str	r3, [r0, #4]
 801fc86:	7e03      	ldrb	r3, [r0, #24]
 801fc88:	b143      	cbz	r3, 801fc9c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801fc8a:	6943      	ldr	r3, [r0, #20]
 801fc8c:	b12b      	cbz	r3, 801fc9a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801fc8e:	881a      	ldrh	r2, [r3, #0]
 801fc90:	b11a      	cbz	r2, 801fc9a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801fc92:	1c9a      	adds	r2, r3, #2
 801fc94:	6142      	str	r2, [r0, #20]
 801fc96:	8818      	ldrh	r0, [r3, #0]
 801fc98:	bd30      	pop	{r4, r5, pc}
 801fc9a:	7605      	strb	r5, [r0, #24]
 801fc9c:	6843      	ldr	r3, [r0, #4]
 801fc9e:	8819      	ldrh	r1, [r3, #0]
 801fca0:	b199      	cbz	r1, 801fcca <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801fca2:	1c9a      	adds	r2, r3, #2
 801fca4:	2902      	cmp	r1, #2
 801fca6:	6042      	str	r2, [r0, #4]
 801fca8:	d1f5      	bne.n	801fc96 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801fcaa:	7c03      	ldrb	r3, [r0, #16]
 801fcac:	2b01      	cmp	r3, #1
 801fcae:	d8e5      	bhi.n	801fc7c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801fcb0:	1c5a      	adds	r2, r3, #1
 801fcb2:	3302      	adds	r3, #2
 801fcb4:	7402      	strb	r2, [r0, #16]
 801fcb6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801fcba:	6143      	str	r3, [r0, #20]
 801fcbc:	2b00      	cmp	r3, #0
 801fcbe:	d0dd      	beq.n	801fc7c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801fcc0:	881b      	ldrh	r3, [r3, #0]
 801fcc2:	2b00      	cmp	r3, #0
 801fcc4:	d0da      	beq.n	801fc7c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801fcc6:	7604      	strb	r4, [r0, #24]
 801fcc8:	e7d8      	b.n	801fc7c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801fcca:	2000      	movs	r0, #0
 801fccc:	e7e4      	b.n	801fc98 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801fcce <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801fcce:	b430      	push	{r4, r5}
 801fcd0:	6001      	str	r1, [r0, #0]
 801fcd2:	2100      	movs	r1, #0
 801fcd4:	6041      	str	r1, [r0, #4]
 801fcd6:	6815      	ldr	r5, [r2, #0]
 801fcd8:	6085      	str	r5, [r0, #8]
 801fcda:	6852      	ldr	r2, [r2, #4]
 801fcdc:	6443      	str	r3, [r0, #68]	; 0x44
 801fcde:	9b02      	ldr	r3, [sp, #8]
 801fce0:	60c2      	str	r2, [r0, #12]
 801fce2:	7401      	strb	r1, [r0, #16]
 801fce4:	6141      	str	r1, [r0, #20]
 801fce6:	7601      	strb	r1, [r0, #24]
 801fce8:	8701      	strh	r1, [r0, #56]	; 0x38
 801fcea:	8401      	strh	r1, [r0, #32]
 801fcec:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801fcf0:	6483      	str	r3, [r0, #72]	; 0x48
 801fcf2:	bc30      	pop	{r4, r5}
 801fcf4:	f7f6 b8c4 	b.w	8015e80 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801fcf8 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801fcf8:	b408      	push	{r3}
 801fcfa:	b510      	push	{r4, lr}
 801fcfc:	b085      	sub	sp, #20
 801fcfe:	ac07      	add	r4, sp, #28
 801fd00:	f854 3b04 	ldr.w	r3, [r4], #4
 801fd04:	9300      	str	r3, [sp, #0]
 801fd06:	4613      	mov	r3, r2
 801fd08:	4622      	mov	r2, r4
 801fd0a:	9403      	str	r4, [sp, #12]
 801fd0c:	f7ff ffdf 	bl	801fcce <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801fd10:	b005      	add	sp, #20
 801fd12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fd16:	b001      	add	sp, #4
 801fd18:	4770      	bx	lr

0801fd1a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801fd1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fd1c:	4605      	mov	r5, r0
 801fd1e:	4608      	mov	r0, r1
 801fd20:	b1e9      	cbz	r1, 801fd5e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801fd22:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801fd26:	460b      	mov	r3, r1
 801fd28:	f101 0708 	add.w	r7, r1, #8
 801fd2c:	4622      	mov	r2, r4
 801fd2e:	6818      	ldr	r0, [r3, #0]
 801fd30:	6859      	ldr	r1, [r3, #4]
 801fd32:	4626      	mov	r6, r4
 801fd34:	c603      	stmia	r6!, {r0, r1}
 801fd36:	3308      	adds	r3, #8
 801fd38:	42bb      	cmp	r3, r7
 801fd3a:	4634      	mov	r4, r6
 801fd3c:	d1f7      	bne.n	801fd2e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801fd3e:	6818      	ldr	r0, [r3, #0]
 801fd40:	6030      	str	r0, [r6, #0]
 801fd42:	889b      	ldrh	r3, [r3, #4]
 801fd44:	80b3      	strh	r3, [r6, #4]
 801fd46:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801fd4a:	015b      	lsls	r3, r3, #5
 801fd4c:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801fd50:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801fd54:	430b      	orrs	r3, r1
 801fd56:	425b      	negs	r3, r3
 801fd58:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801fd5c:	4610      	mov	r0, r2
 801fd5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801fd60 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801fd60:	b538      	push	{r3, r4, r5, lr}
 801fd62:	460c      	mov	r4, r1
 801fd64:	6811      	ldr	r1, [r2, #0]
 801fd66:	4610      	mov	r0, r2
 801fd68:	68cd      	ldr	r5, [r1, #12]
 801fd6a:	4619      	mov	r1, r3
 801fd6c:	47a8      	blx	r5
 801fd6e:	2800      	cmp	r0, #0
 801fd70:	bf08      	it	eq
 801fd72:	4620      	moveq	r0, r4
 801fd74:	bd38      	pop	{r3, r4, r5, pc}
	...

0801fd78 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801fd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd7a:	4604      	mov	r4, r0
 801fd7c:	4615      	mov	r5, r2
 801fd7e:	4608      	mov	r0, r1
 801fd80:	b93a      	cbnz	r2, 801fd92 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801fd82:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801fd86:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801fd8a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801fd8e:	4628      	mov	r0, r5
 801fd90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fd92:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801fd96:	8893      	ldrh	r3, [r2, #4]
 801fd98:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801fd9c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801fda0:	79ee      	ldrb	r6, [r5, #7]
 801fda2:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801fda6:	4316      	orrs	r6, r2
 801fda8:	19da      	adds	r2, r3, r7
 801fdaa:	b291      	uxth	r1, r2
 801fdac:	291d      	cmp	r1, #29
 801fdae:	b2b7      	uxth	r7, r6
 801fdb0:	d87a      	bhi.n	801fea8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 801fdb2:	2201      	movs	r2, #1
 801fdb4:	408a      	lsls	r2, r1
 801fdb6:	4975      	ldr	r1, [pc, #468]	; (801ff8c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801fdb8:	420a      	tst	r2, r1
 801fdba:	ea4f 06e6 	mov.w	r6, r6, asr #3
 801fdbe:	d12d      	bne.n	801fe1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801fdc0:	f412 7f60 	tst.w	r2, #896	; 0x380
 801fdc4:	d070      	beq.n	801fea8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 801fdc6:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801fdca:	462b      	mov	r3, r5
 801fdcc:	f105 0e08 	add.w	lr, r5, #8
 801fdd0:	4615      	mov	r5, r2
 801fdd2:	6818      	ldr	r0, [r3, #0]
 801fdd4:	6859      	ldr	r1, [r3, #4]
 801fdd6:	4694      	mov	ip, r2
 801fdd8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801fddc:	3308      	adds	r3, #8
 801fdde:	4573      	cmp	r3, lr
 801fde0:	4662      	mov	r2, ip
 801fde2:	d1f6      	bne.n	801fdd2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801fde4:	6818      	ldr	r0, [r3, #0]
 801fde6:	f8cc 0000 	str.w	r0, [ip]
 801fdea:	889b      	ldrh	r3, [r3, #4]
 801fdec:	f8ac 3004 	strh.w	r3, [ip, #4]
 801fdf0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801fdf4:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801fdf8:	b2b3      	uxth	r3, r6
 801fdfa:	1aca      	subs	r2, r1, r3
 801fdfc:	b292      	uxth	r2, r2
 801fdfe:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801fe02:	10d2      	asrs	r2, r2, #3
 801fe04:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801fe08:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801fe0c:	4302      	orrs	r2, r0
 801fe0e:	1bcf      	subs	r7, r1, r7
 801fe10:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801fe14:	1afb      	subs	r3, r7, r3
 801fe16:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801fe1a:	e7b8      	b.n	801fd8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801fe1c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801fe1e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801fe22:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801fe24:	f640 6333 	movw	r3, #3635	; 0xe33
 801fe28:	4299      	cmp	r1, r3
 801fe2a:	d110      	bne.n	801fe4e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801fe2c:	6803      	ldr	r3, [r0, #0]
 801fe2e:	68db      	ldr	r3, [r3, #12]
 801fe30:	4798      	blx	r3
 801fe32:	7b41      	ldrb	r1, [r0, #13]
 801fe34:	00cb      	lsls	r3, r1, #3
 801fe36:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801fe3a:	7a03      	ldrb	r3, [r0, #8]
 801fe3c:	0648      	lsls	r0, r1, #25
 801fe3e:	ea43 0302 	orr.w	r3, r3, r2
 801fe42:	bf44      	itt	mi
 801fe44:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801fe48:	b21b      	sxthmi	r3, r3
 801fe4a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801fe4e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801fe52:	443b      	add	r3, r7
 801fe54:	4433      	add	r3, r6
 801fe56:	b29b      	uxth	r3, r3
 801fe58:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801fe5c:	462a      	mov	r2, r5
 801fe5e:	f105 0c08 	add.w	ip, r5, #8
 801fe62:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801fe66:	4635      	mov	r5, r6
 801fe68:	6810      	ldr	r0, [r2, #0]
 801fe6a:	6851      	ldr	r1, [r2, #4]
 801fe6c:	4637      	mov	r7, r6
 801fe6e:	c703      	stmia	r7!, {r0, r1}
 801fe70:	3208      	adds	r2, #8
 801fe72:	4562      	cmp	r2, ip
 801fe74:	463e      	mov	r6, r7
 801fe76:	d1f7      	bne.n	801fe68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801fe78:	6810      	ldr	r0, [r2, #0]
 801fe7a:	6038      	str	r0, [r7, #0]
 801fe7c:	8892      	ldrh	r2, [r2, #4]
 801fe7e:	80ba      	strh	r2, [r7, #4]
 801fe80:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801fe84:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801fe88:	10db      	asrs	r3, r3, #3
 801fe8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801fe8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801fe92:	4313      	orrs	r3, r2
 801fe94:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801fe98:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801fe9c:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801fea0:	1a9b      	subs	r3, r3, r2
 801fea2:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801fea6:	e772      	b.n	801fd8e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801fea8:	f023 0204 	bic.w	r2, r3, #4
 801feac:	f640 611b 	movw	r1, #3611	; 0xe1b
 801feb0:	428a      	cmp	r2, r1
 801feb2:	d003      	beq.n	801febc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801feb4:	f640 621d 	movw	r2, #3613	; 0xe1d
 801feb8:	4293      	cmp	r3, r2
 801feba:	d120      	bne.n	801fefe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x186>
 801febc:	3b01      	subs	r3, #1
 801febe:	4602      	mov	r2, r0
 801fec0:	b29b      	uxth	r3, r3
 801fec2:	4629      	mov	r1, r5
 801fec4:	4620      	mov	r0, r4
 801fec6:	f7ff ff4b 	bl	801fd60 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801feca:	7b41      	ldrb	r1, [r0, #13]
 801fecc:	00cb      	lsls	r3, r1, #3
 801fece:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801fed2:	7a03      	ldrb	r3, [r0, #8]
 801fed4:	0649      	lsls	r1, r1, #25
 801fed6:	ea43 0302 	orr.w	r3, r3, r2
 801feda:	bf44      	itt	mi
 801fedc:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801fee0:	b21b      	sxthmi	r3, r3
 801fee2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801fee6:	7b6b      	ldrb	r3, [r5, #13]
 801fee8:	7aaa      	ldrb	r2, [r5, #10]
 801feea:	005b      	lsls	r3, r3, #1
 801feec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801fef0:	4313      	orrs	r3, r2
 801fef2:	115a      	asrs	r2, r3, #5
 801fef4:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801fef8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801fefc:	e036      	b.n	801ff6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801fefe:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801ff02:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801ff06:	7a2a      	ldrb	r2, [r5, #8]
 801ff08:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801ff0c:	ea42 0201 	orr.w	r2, r2, r1
 801ff10:	bf1c      	itt	ne
 801ff12:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801ff16:	b212      	sxthne	r2, r2
 801ff18:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801ff1c:	f640 6109 	movw	r1, #3593	; 0xe09
 801ff20:	f023 0210 	bic.w	r2, r3, #16
 801ff24:	428a      	cmp	r2, r1
 801ff26:	d003      	beq.n	801ff30 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b8>
 801ff28:	f640 6213 	movw	r2, #3603	; 0xe13
 801ff2c:	4293      	cmp	r3, r2
 801ff2e:	d12a      	bne.n	801ff86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801ff30:	7b6e      	ldrb	r6, [r5, #13]
 801ff32:	0076      	lsls	r6, r6, #1
 801ff34:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801ff38:	7aae      	ldrb	r6, [r5, #10]
 801ff3a:	4316      	orrs	r6, r2
 801ff3c:	f640 6213 	movw	r2, #3603	; 0xe13
 801ff40:	4293      	cmp	r3, r2
 801ff42:	bf18      	it	ne
 801ff44:	f103 33ff 	addne.w	r3, r3, #4294967295
 801ff48:	4602      	mov	r2, r0
 801ff4a:	bf14      	ite	ne
 801ff4c:	b29b      	uxthne	r3, r3
 801ff4e:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801ff52:	4629      	mov	r1, r5
 801ff54:	4620      	mov	r0, r4
 801ff56:	f7ff ff03 	bl	801fd60 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801ff5a:	7b43      	ldrb	r3, [r0, #13]
 801ff5c:	7a82      	ldrb	r2, [r0, #10]
 801ff5e:	005b      	lsls	r3, r3, #1
 801ff60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ff64:	4313      	orrs	r3, r2
 801ff66:	1af6      	subs	r6, r6, r3
 801ff68:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801ff6c:	7b69      	ldrb	r1, [r5, #13]
 801ff6e:	00cb      	lsls	r3, r1, #3
 801ff70:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ff74:	7a2b      	ldrb	r3, [r5, #8]
 801ff76:	4313      	orrs	r3, r2
 801ff78:	064a      	lsls	r2, r1, #25
 801ff7a:	bf44      	itt	mi
 801ff7c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ff80:	b21b      	sxthmi	r3, r3
 801ff82:	1bdb      	subs	r3, r3, r7
 801ff84:	e747      	b.n	801fe16 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801ff86:	2300      	movs	r3, #0
 801ff88:	e7b6      	b.n	801fef8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x180>
 801ff8a:	bf00      	nop
 801ff8c:	3fc00079 	.word	0x3fc00079

0801ff90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801ff90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ff94:	4604      	mov	r4, r0
 801ff96:	b942      	cbnz	r2, 801ffaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801ff98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801ff9c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801ffa0:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801ffa4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801ffa8:	e047      	b.n	802003a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801ffaa:	7b51      	ldrb	r1, [r2, #13]
 801ffac:	8893      	ldrh	r3, [r2, #4]
 801ffae:	010d      	lsls	r5, r1, #4
 801ffb0:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801ffb4:	79d5      	ldrb	r5, [r2, #7]
 801ffb6:	4305      	orrs	r5, r0
 801ffb8:	2d04      	cmp	r5, #4
 801ffba:	bfcc      	ite	gt
 801ffbc:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801ffc0:	f04f 0e01 	movle.w	lr, #1
 801ffc4:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801ffc8:	f200 80ab 	bhi.w	8020122 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801ffcc:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801ffd0:	4283      	cmp	r3, r0
 801ffd2:	d216      	bcs.n	8020002 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ffd4:	f240 605b 	movw	r0, #1627	; 0x65b
 801ffd8:	4283      	cmp	r3, r0
 801ffda:	d859      	bhi.n	8020090 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801ffdc:	f240 6057 	movw	r0, #1623	; 0x657
 801ffe0:	4283      	cmp	r3, r0
 801ffe2:	d20e      	bcs.n	8020002 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ffe4:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801ffe8:	d24a      	bcs.n	8020080 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801ffea:	f240 604e 	movw	r0, #1614	; 0x64e
 801ffee:	4283      	cmp	r3, r0
 801fff0:	d207      	bcs.n	8020002 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801fff2:	f240 601a 	movw	r0, #1562	; 0x61a
 801fff6:	4283      	cmp	r3, r0
 801fff8:	d02a      	beq.n	8020050 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801fffa:	d821      	bhi.n	8020040 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801fffc:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8020000:	d35b      	bcc.n	80200ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8020002:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8020006:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 802000a:	f040 80d0 	bne.w	80201ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 802000e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8020012:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8020016:	f040 80ca 	bne.w	80201ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 802001a:	00cb      	lsls	r3, r1, #3
 802001c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8020020:	7a13      	ldrb	r3, [r2, #8]
 8020022:	0649      	lsls	r1, r1, #25
 8020024:	ea43 0300 	orr.w	r3, r3, r0
 8020028:	bf44      	itt	mi
 802002a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 802002e:	b21b      	sxthmi	r3, r3
 8020030:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8020034:	1b5d      	subs	r5, r3, r5
 8020036:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 802003a:	4610      	mov	r0, r2
 802003c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020040:	f240 604b 	movw	r0, #1611	; 0x64b
 8020044:	4283      	cmp	r3, r0
 8020046:	d338      	bcc.n	80200ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8020048:	f240 604c 	movw	r0, #1612	; 0x64c
 802004c:	4283      	cmp	r3, r0
 802004e:	d9d8      	bls.n	8020002 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8020050:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8020054:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8020058:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 802005c:	f040 80f2 	bne.w	8020244 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8020060:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8020064:	f040 80ee 	bne.w	8020244 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8020068:	00cb      	lsls	r3, r1, #3
 802006a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 802006e:	7a13      	ldrb	r3, [r2, #8]
 8020070:	064e      	lsls	r6, r1, #25
 8020072:	ea43 0300 	orr.w	r3, r3, r0
 8020076:	bf44      	itt	mi
 8020078:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 802007c:	b21b      	sxthmi	r3, r3
 802007e:	e7d9      	b.n	8020034 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8020080:	f240 6054 	movw	r0, #1620	; 0x654
 8020084:	4283      	cmp	r3, r0
 8020086:	d8e3      	bhi.n	8020050 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8020088:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 802008c:	d9e0      	bls.n	8020050 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 802008e:	e7b8      	b.n	8020002 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8020090:	f240 6074 	movw	r0, #1652	; 0x674
 8020094:	4283      	cmp	r3, r0
 8020096:	d0b4      	beq.n	8020002 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8020098:	d82d      	bhi.n	80200f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 802009a:	f240 605e 	movw	r0, #1630	; 0x65e
 802009e:	4283      	cmp	r3, r0
 80200a0:	d804      	bhi.n	80200ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80200a2:	f240 605d 	movw	r0, #1629	; 0x65d
 80200a6:	4283      	cmp	r3, r0
 80200a8:	d3d2      	bcc.n	8020050 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80200aa:	e7aa      	b.n	8020002 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80200ac:	f240 605f 	movw	r0, #1631	; 0x65f
 80200b0:	4283      	cmp	r3, r0
 80200b2:	d0cd      	beq.n	8020050 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80200b4:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80200b8:	d0a3      	beq.n	8020002 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80200ba:	00cb      	lsls	r3, r1, #3
 80200bc:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80200c0:	7a13      	ldrb	r3, [r2, #8]
 80200c2:	0649      	lsls	r1, r1, #25
 80200c4:	ea43 0300 	orr.w	r3, r3, r0
 80200c8:	bf44      	itt	mi
 80200ca:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80200ce:	b21b      	sxthmi	r3, r3
 80200d0:	1b5d      	subs	r5, r3, r5
 80200d2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80200d6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80200da:	7b53      	ldrb	r3, [r2, #13]
 80200dc:	015b      	lsls	r3, r3, #5
 80200de:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80200e2:	7993      	ldrb	r3, [r2, #6]
 80200e4:	430b      	orrs	r3, r1
 80200e6:	005b      	lsls	r3, r3, #1
 80200e8:	2105      	movs	r1, #5
 80200ea:	fb93 f3f1 	sdiv	r3, r3, r1
 80200ee:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80200f2:	440b      	add	r3, r1
 80200f4:	e756      	b.n	801ffa4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80200f6:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80200fa:	4283      	cmp	r3, r0
 80200fc:	d809      	bhi.n	8020112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80200fe:	f240 60df 	movw	r0, #1759	; 0x6df
 8020102:	4283      	cmp	r3, r0
 8020104:	f4bf af7d 	bcs.w	8020002 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8020108:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 802010c:	2b05      	cmp	r3, #5
 802010e:	d8d4      	bhi.n	80200ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8020110:	e777      	b.n	8020002 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8020112:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8020116:	4283      	cmp	r3, r0
 8020118:	d09a      	beq.n	8020050 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 802011a:	f240 60e4 	movw	r0, #1764	; 0x6e4
 802011e:	4283      	cmp	r3, r0
 8020120:	e7ca      	b.n	80200b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8020122:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8020126:	d22b      	bcs.n	8020180 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8020128:	f640 00ed 	movw	r0, #2285	; 0x8ed
 802012c:	4283      	cmp	r3, r0
 802012e:	d28f      	bcs.n	8020050 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8020130:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8020134:	4283      	cmp	r3, r0
 8020136:	d816      	bhi.n	8020166 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8020138:	f640 00e4 	movw	r0, #2276	; 0x8e4
 802013c:	4283      	cmp	r3, r0
 802013e:	f4bf af60 	bcs.w	8020002 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8020142:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8020146:	4283      	cmp	r3, r0
 8020148:	d80a      	bhi.n	8020160 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 802014a:	f240 60eb 	movw	r0, #1771	; 0x6eb
 802014e:	4283      	cmp	r3, r0
 8020150:	f4bf af57 	bcs.w	8020002 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8020154:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8020158:	4283      	cmp	r3, r0
 802015a:	f43f af79 	beq.w	8020050 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 802015e:	e7ac      	b.n	80200ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8020160:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8020164:	e7f8      	b.n	8020158 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8020166:	f640 00e8 	movw	r0, #2280	; 0x8e8
 802016a:	4283      	cmp	r3, r0
 802016c:	d802      	bhi.n	8020174 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 802016e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8020172:	e798      	b.n	80200a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8020174:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8020178:	4283      	cmp	r3, r0
 802017a:	f47f af42 	bne.w	8020002 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 802017e:	e767      	b.n	8020050 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8020180:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8020184:	4283      	cmp	r3, r0
 8020186:	f43f af63 	beq.w	8020050 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 802018a:	d802      	bhi.n	8020192 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 802018c:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8020190:	e7f2      	b.n	8020178 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8020192:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8020196:	4283      	cmp	r3, r0
 8020198:	d805      	bhi.n	80201a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 802019a:	f640 00f9 	movw	r0, #2297	; 0x8f9
 802019e:	4283      	cmp	r3, r0
 80201a0:	f4ff af2f 	bcc.w	8020002 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80201a4:	e754      	b.n	8020050 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80201a6:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80201aa:	4283      	cmp	r3, r0
 80201ac:	e7af      	b.n	802010e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80201ae:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80201b2:	4617      	mov	r7, r2
 80201b4:	f102 0808 	add.w	r8, r2, #8
 80201b8:	4666      	mov	r6, ip
 80201ba:	6838      	ldr	r0, [r7, #0]
 80201bc:	6879      	ldr	r1, [r7, #4]
 80201be:	46e6      	mov	lr, ip
 80201c0:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80201c4:	3708      	adds	r7, #8
 80201c6:	4547      	cmp	r7, r8
 80201c8:	46f4      	mov	ip, lr
 80201ca:	d1f6      	bne.n	80201ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80201cc:	6838      	ldr	r0, [r7, #0]
 80201ce:	f8ce 0000 	str.w	r0, [lr]
 80201d2:	88b9      	ldrh	r1, [r7, #4]
 80201d4:	f8ae 1004 	strh.w	r1, [lr, #4]
 80201d8:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80201dc:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80201e0:	d009      	beq.n	80201f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 80201e2:	7b51      	ldrb	r1, [r2, #13]
 80201e4:	7992      	ldrb	r2, [r2, #6]
 80201e6:	0149      	lsls	r1, r1, #5
 80201e8:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80201ec:	4311      	orrs	r1, r2
 80201ee:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80201f2:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80201f6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80201fa:	b2ad      	uxth	r5, r5
 80201fc:	d00d      	beq.n	802021a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 80201fe:	442b      	add	r3, r5
 8020200:	b29b      	uxth	r3, r3
 8020202:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8020206:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 802020a:	10db      	asrs	r3, r3, #3
 802020c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8020210:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8020214:	4313      	orrs	r3, r2
 8020216:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 802021a:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 802021e:	00cb      	lsls	r3, r1, #3
 8020220:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8020224:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8020228:	064f      	lsls	r7, r1, #25
 802022a:	ea43 0302 	orr.w	r3, r3, r2
 802022e:	bf44      	itt	mi
 8020230:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8020234:	b21b      	sxthmi	r3, r3
 8020236:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 802023a:	1b5b      	subs	r3, r3, r5
 802023c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8020240:	4632      	mov	r2, r6
 8020242:	e6fa      	b.n	802003a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8020244:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8020248:	4617      	mov	r7, r2
 802024a:	f102 0908 	add.w	r9, r2, #8
 802024e:	4666      	mov	r6, ip
 8020250:	6838      	ldr	r0, [r7, #0]
 8020252:	6879      	ldr	r1, [r7, #4]
 8020254:	46e0      	mov	r8, ip
 8020256:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 802025a:	3708      	adds	r7, #8
 802025c:	454f      	cmp	r7, r9
 802025e:	46c4      	mov	ip, r8
 8020260:	d1f6      	bne.n	8020250 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 8020262:	6838      	ldr	r0, [r7, #0]
 8020264:	f8c8 0000 	str.w	r0, [r8]
 8020268:	88b9      	ldrh	r1, [r7, #4]
 802026a:	f8a8 1004 	strh.w	r1, [r8, #4]
 802026e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8020272:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8020276:	d009      	beq.n	802028c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8020278:	7b51      	ldrb	r1, [r2, #13]
 802027a:	7992      	ldrb	r2, [r2, #6]
 802027c:	0149      	lsls	r1, r1, #5
 802027e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8020282:	4311      	orrs	r1, r2
 8020284:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8020288:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 802028c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8020290:	d00e      	beq.n	80202b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 8020292:	eba3 030e 	sub.w	r3, r3, lr
 8020296:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 802029a:	b29b      	uxth	r3, r3
 802029c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80202a0:	10db      	asrs	r3, r3, #3
 80202a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80202a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80202aa:	4313      	orrs	r3, r2
 80202ac:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80202b0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80202b4:	00cb      	lsls	r3, r1, #3
 80202b6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80202ba:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80202be:	0648      	lsls	r0, r1, #25
 80202c0:	ea43 0302 	orr.w	r3, r3, r2
 80202c4:	bf44      	itt	mi
 80202c6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80202ca:	b21b      	sxthmi	r3, r3
 80202cc:	1b5d      	subs	r5, r3, r5
 80202ce:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80202d2:	e7b5      	b.n	8020240 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

080202d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80202d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80202d8:	461e      	mov	r6, r3
 80202da:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80202dc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80202e0:	4604      	mov	r4, r0
 80202e2:	4617      	mov	r7, r2
 80202e4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80202e8:	f7f5 fd24 	bl	8015d34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80202ec:	4605      	mov	r5, r0
 80202ee:	b918      	cbnz	r0, 80202f8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80202f0:	6030      	str	r0, [r6, #0]
 80202f2:	4628      	mov	r0, r5
 80202f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80202f8:	683b      	ldr	r3, [r7, #0]
 80202fa:	4601      	mov	r1, r0
 80202fc:	68db      	ldr	r3, [r3, #12]
 80202fe:	4638      	mov	r0, r7
 8020300:	4798      	blx	r3
 8020302:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8020306:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802030a:	4602      	mov	r2, r0
 802030c:	6030      	str	r0, [r6, #0]
 802030e:	d213      	bcs.n	8020338 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8020310:	4643      	mov	r3, r8
 8020312:	4639      	mov	r1, r7
 8020314:	4620      	mov	r0, r4
 8020316:	f7ff fe3b 	bl	801ff90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 802031a:	6030      	str	r0, [r6, #0]
 802031c:	6833      	ldr	r3, [r6, #0]
 802031e:	b143      	cbz	r3, 8020332 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8020320:	7b5a      	ldrb	r2, [r3, #13]
 8020322:	7a9b      	ldrb	r3, [r3, #10]
 8020324:	0052      	lsls	r2, r2, #1
 8020326:	f402 7280 	and.w	r2, r2, #256	; 0x100
 802032a:	4313      	orrs	r3, r2
 802032c:	bf0c      	ite	eq
 802032e:	2301      	moveq	r3, #1
 8020330:	2300      	movne	r3, #0
 8020332:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8020336:	e7dc      	b.n	80202f2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8020338:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 802033c:	b29b      	uxth	r3, r3
 802033e:	2b7f      	cmp	r3, #127	; 0x7f
 8020340:	d804      	bhi.n	802034c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8020342:	4639      	mov	r1, r7
 8020344:	4620      	mov	r0, r4
 8020346:	f7ff fd17 	bl	801fd78 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 802034a:	e7e6      	b.n	802031a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 802034c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8020350:	2b00      	cmp	r3, #0
 8020352:	d0e3      	beq.n	802031c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8020354:	f640 1302 	movw	r3, #2306	; 0x902
 8020358:	429d      	cmp	r5, r3
 802035a:	d1df      	bne.n	802031c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 802035c:	4601      	mov	r1, r0
 802035e:	4620      	mov	r0, r4
 8020360:	f7ff fcdb 	bl	801fd1a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8020364:	e7d9      	b.n	802031a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08020366 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8020366:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802036a:	461e      	mov	r6, r3
 802036c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 802036e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020372:	4604      	mov	r4, r0
 8020374:	4617      	mov	r7, r2
 8020376:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 802037a:	f7f5 fcdb 	bl	8015d34 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 802037e:	4605      	mov	r5, r0
 8020380:	b918      	cbnz	r0, 802038a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8020382:	6030      	str	r0, [r6, #0]
 8020384:	4628      	mov	r0, r5
 8020386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802038a:	683b      	ldr	r3, [r7, #0]
 802038c:	4601      	mov	r1, r0
 802038e:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8020392:	4638      	mov	r0, r7
 8020394:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8020398:	47c8      	blx	r9
 802039a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 802039e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80203a2:	4602      	mov	r2, r0
 80203a4:	6030      	str	r0, [r6, #0]
 80203a6:	d213      	bcs.n	80203d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 80203a8:	4643      	mov	r3, r8
 80203aa:	4639      	mov	r1, r7
 80203ac:	4620      	mov	r0, r4
 80203ae:	f7ff fdef 	bl	801ff90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80203b2:	6030      	str	r0, [r6, #0]
 80203b4:	6833      	ldr	r3, [r6, #0]
 80203b6:	b143      	cbz	r3, 80203ca <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 80203b8:	7b5a      	ldrb	r2, [r3, #13]
 80203ba:	7a9b      	ldrb	r3, [r3, #10]
 80203bc:	0052      	lsls	r2, r2, #1
 80203be:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80203c2:	4313      	orrs	r3, r2
 80203c4:	bf0c      	ite	eq
 80203c6:	2301      	moveq	r3, #1
 80203c8:	2300      	movne	r3, #0
 80203ca:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80203ce:	e7d9      	b.n	8020384 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 80203d0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80203d4:	b29b      	uxth	r3, r3
 80203d6:	2b7f      	cmp	r3, #127	; 0x7f
 80203d8:	d804      	bhi.n	80203e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 80203da:	4639      	mov	r1, r7
 80203dc:	4620      	mov	r0, r4
 80203de:	f7ff fccb 	bl	801fd78 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80203e2:	e7e6      	b.n	80203b2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 80203e4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80203e8:	2b00      	cmp	r3, #0
 80203ea:	d0e3      	beq.n	80203b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80203ec:	f640 1302 	movw	r3, #2306	; 0x902
 80203f0:	429d      	cmp	r5, r3
 80203f2:	d1df      	bne.n	80203b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80203f4:	4601      	mov	r1, r0
 80203f6:	4620      	mov	r0, r4
 80203f8:	f7ff fc8f 	bl	801fd1a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80203fc:	e7d9      	b.n	80203b2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

080203fe <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80203fe:	b510      	push	{r4, lr}
 8020400:	4604      	mov	r4, r0
 8020402:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8020406:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8020408:	b1f1      	cbz	r1, 8020448 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 802040a:	2b0a      	cmp	r3, #10
 802040c:	d02f      	beq.n	802046e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 802040e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8020410:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8020414:	3901      	subs	r1, #1
 8020416:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8020418:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 802041c:	1c51      	adds	r1, r2, #1
 802041e:	b289      	uxth	r1, r1
 8020420:	2901      	cmp	r1, #1
 8020422:	bf84      	itt	hi
 8020424:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8020428:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 802042a:	f103 0201 	add.w	r2, r3, #1
 802042e:	8722      	strh	r2, [r4, #56]	; 0x38
 8020430:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8020432:	bf98      	it	ls
 8020434:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8020436:	4413      	add	r3, r2
 8020438:	b29b      	uxth	r3, r3
 802043a:	2b09      	cmp	r3, #9
 802043c:	bf88      	it	hi
 802043e:	3b0a      	subhi	r3, #10
 8020440:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020444:	8458      	strh	r0, [r3, #34]	; 0x22
 8020446:	e7dc      	b.n	8020402 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8020448:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 802044a:	2b0a      	cmp	r3, #10
 802044c:	d00f      	beq.n	802046e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 802044e:	4620      	mov	r0, r4
 8020450:	f7ff fc11 	bl	801fc76 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8020454:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8020456:	1c5a      	adds	r2, r3, #1
 8020458:	8722      	strh	r2, [r4, #56]	; 0x38
 802045a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 802045c:	4413      	add	r3, r2
 802045e:	b29b      	uxth	r3, r3
 8020460:	2b09      	cmp	r3, #9
 8020462:	bf88      	it	hi
 8020464:	3b0a      	subhi	r3, #10
 8020466:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802046a:	8458      	strh	r0, [r3, #34]	; 0x22
 802046c:	e7ec      	b.n	8020448 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 802046e:	bd10      	pop	{r4, pc}

08020470 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8020470:	b538      	push	{r3, r4, r5, lr}
 8020472:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8020474:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8020478:	4604      	mov	r4, r0
 802047a:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 802047c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 802047e:	3a01      	subs	r2, #1
 8020480:	8702      	strh	r2, [r0, #56]	; 0x38
 8020482:	1c5a      	adds	r2, r3, #1
 8020484:	b292      	uxth	r2, r2
 8020486:	2a09      	cmp	r2, #9
 8020488:	bf86      	itte	hi
 802048a:	3b09      	subhi	r3, #9
 802048c:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 802048e:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8020490:	f7ff ffb5 	bl	80203fe <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8020494:	8c23      	ldrh	r3, [r4, #32]
 8020496:	2b01      	cmp	r3, #1
 8020498:	bf9c      	itt	ls
 802049a:	3301      	addls	r3, #1
 802049c:	8423      	strhls	r3, [r4, #32]
 802049e:	8be3      	ldrh	r3, [r4, #30]
 80204a0:	b90b      	cbnz	r3, 80204a6 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 80204a2:	2302      	movs	r3, #2
 80204a4:	83e3      	strh	r3, [r4, #30]
 80204a6:	8be3      	ldrh	r3, [r4, #30]
 80204a8:	3b01      	subs	r3, #1
 80204aa:	b29b      	uxth	r3, r3
 80204ac:	83e3      	strh	r3, [r4, #30]
 80204ae:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80204b2:	4628      	mov	r0, r5
 80204b4:	8365      	strh	r5, [r4, #26]
 80204b6:	bd38      	pop	{r3, r4, r5, pc}

080204b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80204b8:	428a      	cmp	r2, r1
 80204ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80204be:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 80204c0:	d931      	bls.n	8020526 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 80204c2:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 80204c4:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 80204c8:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 80204cc:	19ee      	adds	r6, r5, r7
 80204ce:	1a54      	subs	r4, r2, r1
 80204d0:	3e01      	subs	r6, #1
 80204d2:	fa1f fe84 	uxth.w	lr, r4
 80204d6:	b2b4      	uxth	r4, r6
 80204d8:	eba4 090e 	sub.w	r9, r4, lr
 80204dc:	fa1f f989 	uxth.w	r9, r9
 80204e0:	2c09      	cmp	r4, #9
 80204e2:	4626      	mov	r6, r4
 80204e4:	bf88      	it	hi
 80204e6:	f1a4 060a 	subhi.w	r6, r4, #10
 80204ea:	f1bc 0f00 	cmp.w	ip, #0
 80204ee:	bf08      	it	eq
 80204f0:	f04f 0c02 	moveq.w	ip, #2
 80204f4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80204f8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80204fc:	fa1f fc8c 	uxth.w	ip, ip
 8020500:	3c01      	subs	r4, #1
 8020502:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8020506:	b2a4      	uxth	r4, r4
 8020508:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 802050c:	454c      	cmp	r4, r9
 802050e:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8020512:	d1e5      	bne.n	80204e0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8020514:	eba5 050e 	sub.w	r5, r5, lr
 8020518:	eb0e 0408 	add.w	r4, lr, r8
 802051c:	8705      	strh	r5, [r0, #56]	; 0x38
 802051e:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8020522:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8020526:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8020528:	1a64      	subs	r4, r4, r1
 802052a:	4439      	add	r1, r7
 802052c:	b289      	uxth	r1, r1
 802052e:	2909      	cmp	r1, #9
 8020530:	bf88      	it	hi
 8020532:	390a      	subhi	r1, #10
 8020534:	8704      	strh	r4, [r0, #56]	; 0x38
 8020536:	86c1      	strh	r1, [r0, #54]	; 0x36
 8020538:	250a      	movs	r5, #10
 802053a:	b18a      	cbz	r2, 8020560 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 802053c:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 802053e:	3a01      	subs	r2, #1
 8020540:	b292      	uxth	r2, r2
 8020542:	3101      	adds	r1, #1
 8020544:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8020548:	8701      	strh	r1, [r0, #56]	; 0x38
 802054a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 802054c:	b901      	cbnz	r1, 8020550 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 802054e:	86c5      	strh	r5, [r0, #54]	; 0x36
 8020550:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8020552:	3901      	subs	r1, #1
 8020554:	b289      	uxth	r1, r1
 8020556:	86c1      	strh	r1, [r0, #54]	; 0x36
 8020558:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 802055c:	844c      	strh	r4, [r1, #34]	; 0x22
 802055e:	e7ec      	b.n	802053a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8020560:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020564:	f7ff bf4b 	b.w	80203fe <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08020568 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8020568:	b570      	push	{r4, r5, r6, lr}
 802056a:	2500      	movs	r5, #0
 802056c:	4295      	cmp	r5, r2
 802056e:	d011      	beq.n	8020594 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8020570:	8bc4      	ldrh	r4, [r0, #30]
 8020572:	f831 6b02 	ldrh.w	r6, [r1], #2
 8020576:	4414      	add	r4, r2
 8020578:	3c01      	subs	r4, #1
 802057a:	1b64      	subs	r4, r4, r5
 802057c:	b2a4      	uxth	r4, r4
 802057e:	2c01      	cmp	r4, #1
 8020580:	bf88      	it	hi
 8020582:	3c02      	subhi	r4, #2
 8020584:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020588:	8b64      	ldrh	r4, [r4, #26]
 802058a:	42b4      	cmp	r4, r6
 802058c:	d117      	bne.n	80205be <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 802058e:	3501      	adds	r5, #1
 8020590:	b2ad      	uxth	r5, r5
 8020592:	e7eb      	b.n	802056c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8020594:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020598:	2400      	movs	r4, #0
 802059a:	4413      	add	r3, r2
 802059c:	b2a2      	uxth	r2, r4
 802059e:	429a      	cmp	r2, r3
 80205a0:	da0f      	bge.n	80205c2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 80205a2:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 80205a4:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80205a8:	4432      	add	r2, r6
 80205aa:	b292      	uxth	r2, r2
 80205ac:	2a09      	cmp	r2, #9
 80205ae:	bf88      	it	hi
 80205b0:	3a0a      	subhi	r2, #10
 80205b2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80205b6:	3401      	adds	r4, #1
 80205b8:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80205ba:	42aa      	cmp	r2, r5
 80205bc:	d0ee      	beq.n	802059c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80205be:	2000      	movs	r0, #0
 80205c0:	bd70      	pop	{r4, r5, r6, pc}
 80205c2:	2001      	movs	r0, #1
 80205c4:	e7fc      	b.n	80205c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080205c6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80205c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205ca:	4605      	mov	r5, r0
 80205cc:	4616      	mov	r6, r2
 80205ce:	1c8c      	adds	r4, r1, #2
 80205d0:	8809      	ldrh	r1, [r1, #0]
 80205d2:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80205d6:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80205da:	42b3      	cmp	r3, r6
 80205dc:	d124      	bne.n	8020628 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80205de:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80205e2:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80205e6:	f001 070f 	and.w	r7, r1, #15
 80205ea:	f8cd 8000 	str.w	r8, [sp]
 80205ee:	464b      	mov	r3, r9
 80205f0:	4652      	mov	r2, sl
 80205f2:	4621      	mov	r1, r4
 80205f4:	4628      	mov	r0, r5
 80205f6:	f7ff ffb7 	bl	8020568 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80205fa:	4683      	mov	fp, r0
 80205fc:	b168      	cbz	r0, 802061a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80205fe:	eb0a 0109 	add.w	r1, sl, r9
 8020602:	4441      	add	r1, r8
 8020604:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8020608:	463a      	mov	r2, r7
 802060a:	4649      	mov	r1, r9
 802060c:	4628      	mov	r0, r5
 802060e:	f7ff ff53 	bl	80204b8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8020612:	4658      	mov	r0, fp
 8020614:	b003      	add	sp, #12
 8020616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802061a:	eb07 010a 	add.w	r1, r7, sl
 802061e:	4449      	add	r1, r9
 8020620:	4441      	add	r1, r8
 8020622:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8020626:	e7d2      	b.n	80205ce <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8020628:	f04f 0b00 	mov.w	fp, #0
 802062c:	e7f1      	b.n	8020612 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0802062e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 802062e:	b570      	push	{r4, r5, r6, lr}
 8020630:	8810      	ldrh	r0, [r2, #0]
 8020632:	4298      	cmp	r0, r3
 8020634:	d817      	bhi.n	8020666 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8020636:	1e48      	subs	r0, r1, #1
 8020638:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 802063c:	4298      	cmp	r0, r3
 802063e:	d312      	bcc.n	8020666 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8020640:	2400      	movs	r4, #0
 8020642:	428c      	cmp	r4, r1
 8020644:	d20f      	bcs.n	8020666 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8020646:	1860      	adds	r0, r4, r1
 8020648:	1040      	asrs	r0, r0, #1
 802064a:	0085      	lsls	r5, r0, #2
 802064c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8020650:	42b3      	cmp	r3, r6
 8020652:	d902      	bls.n	802065a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8020654:	3001      	adds	r0, #1
 8020656:	b284      	uxth	r4, r0
 8020658:	e7f3      	b.n	8020642 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 802065a:	d201      	bcs.n	8020660 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 802065c:	b281      	uxth	r1, r0
 802065e:	e7f0      	b.n	8020642 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8020660:	442a      	add	r2, r5
 8020662:	8850      	ldrh	r0, [r2, #2]
 8020664:	bd70      	pop	{r4, r5, r6, pc}
 8020666:	2000      	movs	r0, #0
 8020668:	e7fc      	b.n	8020664 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0802066a <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 802066a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802066e:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8020670:	886f      	ldrh	r7, [r5, #2]
 8020672:	4604      	mov	r4, r0
 8020674:	087f      	lsrs	r7, r7, #1
 8020676:	260b      	movs	r6, #11
 8020678:	3e01      	subs	r6, #1
 802067a:	d013      	beq.n	80206a4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 802067c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 802067e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020682:	462a      	mov	r2, r5
 8020684:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8020688:	4639      	mov	r1, r7
 802068a:	4643      	mov	r3, r8
 802068c:	4620      	mov	r0, r4
 802068e:	f7ff ffce 	bl	802062e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8020692:	b138      	cbz	r0, 80206a4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8020694:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8020698:	4642      	mov	r2, r8
 802069a:	4620      	mov	r0, r4
 802069c:	f7ff ff93 	bl	80205c6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80206a0:	2800      	cmp	r0, #0
 80206a2:	d1e9      	bne.n	8020678 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80206a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080206a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80206a8:	b570      	push	{r4, r5, r6, lr}
 80206aa:	694a      	ldr	r2, [r1, #20]
 80206ac:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80206ae:	684b      	ldr	r3, [r1, #4]
 80206b0:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80206b2:	1b54      	subs	r4, r2, r5
 80206b4:	f000 8106 	beq.w	80208c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80206b8:	1b9b      	subs	r3, r3, r6
 80206ba:	d003      	beq.n	80206c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80206bc:	4363      	muls	r3, r4
 80206be:	2210      	movs	r2, #16
 80206c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80206c4:	680c      	ldr	r4, [r1, #0]
 80206c6:	698a      	ldr	r2, [r1, #24]
 80206c8:	1b65      	subs	r5, r4, r5
 80206ca:	f000 80fd 	beq.w	80208c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80206ce:	1b92      	subs	r2, r2, r6
 80206d0:	d003      	beq.n	80206da <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80206d2:	436a      	muls	r2, r5
 80206d4:	2410      	movs	r4, #16
 80206d6:	fb92 f2f4 	sdiv	r2, r2, r4
 80206da:	1a9b      	subs	r3, r3, r2
 80206dc:	ee07 3a90 	vmov	s15, r3
 80206e0:	ed9f 4a88 	vldr	s8, [pc, #544]	; 8020904 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80206e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80206e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80206ec:	ee67 7a84 	vmul.f32	s15, s15, s8
 80206f0:	460a      	mov	r2, r1
 80206f2:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80206f6:	4603      	mov	r3, r0
 80206f8:	f100 040c 	add.w	r4, r0, #12
 80206fc:	eeb1 6a43 	vneg.f32	s12, s6
 8020700:	edd2 7a02 	vldr	s15, [r2, #8]
 8020704:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8020708:	3214      	adds	r2, #20
 802070a:	ece3 6a01 	vstmia	r3!, {s13}
 802070e:	ed52 7a02 	vldr	s15, [r2, #-8]
 8020712:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020716:	429c      	cmp	r4, r3
 8020718:	edc3 7a02 	vstr	s15, [r3, #8]
 802071c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8020720:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020724:	edc3 7a05 	vstr	s15, [r3, #20]
 8020728:	d1ea      	bne.n	8020700 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 802072a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 802072c:	698b      	ldr	r3, [r1, #24]
 802072e:	edd0 4a02 	vldr	s9, [r0, #8]
 8020732:	edd0 3a00 	vldr	s7, [r0]
 8020736:	edd0 6a01 	vldr	s13, [r0, #4]
 802073a:	ed90 5a05 	vldr	s10, [r0, #20]
 802073e:	ed90 2a03 	vldr	s4, [r0, #12]
 8020742:	edd0 5a04 	vldr	s11, [r0, #16]
 8020746:	ed90 1a07 	vldr	s2, [r0, #28]
 802074a:	edd0 2a06 	vldr	s5, [r0, #24]
 802074e:	1a9b      	subs	r3, r3, r2
 8020750:	ee07 3a90 	vmov	s15, r3
 8020754:	684b      	ldr	r3, [r1, #4]
 8020756:	1a9b      	subs	r3, r3, r2
 8020758:	ee07 3a10 	vmov	s14, r3
 802075c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020760:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8020764:	ee67 7a84 	vmul.f32	s15, s15, s8
 8020768:	ee73 4ae4 	vsub.f32	s9, s7, s9
 802076c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020770:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8020774:	ee27 7a04 	vmul.f32	s14, s14, s8
 8020778:	ee75 5ac5 	vsub.f32	s11, s11, s10
 802077c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020780:	ee32 5a45 	vsub.f32	s10, s4, s10
 8020784:	ee67 7a83 	vmul.f32	s15, s15, s6
 8020788:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 802078c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 802078e:	694a      	ldr	r2, [r1, #20]
 8020790:	1b13      	subs	r3, r2, r4
 8020792:	ee07 3a10 	vmov	s14, r3
 8020796:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802079a:	680b      	ldr	r3, [r1, #0]
 802079c:	ee27 7a04 	vmul.f32	s14, s14, s8
 80207a0:	1b1b      	subs	r3, r3, r4
 80207a2:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80207a6:	ee07 3a10 	vmov	s14, r3
 80207aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80207ae:	ee27 7a04 	vmul.f32	s14, s14, s8
 80207b2:	eee6 4a87 	vfma.f32	s9, s13, s14
 80207b6:	ee64 4a86 	vmul.f32	s9, s9, s12
 80207ba:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 80207be:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80207c0:	698b      	ldr	r3, [r1, #24]
 80207c2:	1a9b      	subs	r3, r3, r2
 80207c4:	ee06 3a90 	vmov	s13, r3
 80207c8:	684b      	ldr	r3, [r1, #4]
 80207ca:	1a9b      	subs	r3, r3, r2
 80207cc:	ee07 3a10 	vmov	s14, r3
 80207d0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80207d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80207d8:	ee66 6a84 	vmul.f32	s13, s13, s8
 80207dc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80207e0:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80207e4:	eee5 6a87 	vfma.f32	s13, s11, s14
 80207e8:	ee66 6a83 	vmul.f32	s13, s13, s6
 80207ec:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 80207f0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80207f2:	694a      	ldr	r2, [r1, #20]
 80207f4:	1b13      	subs	r3, r2, r4
 80207f6:	ee07 3a10 	vmov	s14, r3
 80207fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80207fe:	680b      	ldr	r3, [r1, #0]
 8020800:	ee27 7a04 	vmul.f32	s14, s14, s8
 8020804:	1b1b      	subs	r3, r3, r4
 8020806:	ee25 5a47 	vnmul.f32	s10, s10, s14
 802080a:	ee07 3a10 	vmov	s14, r3
 802080e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020812:	ee27 7a04 	vmul.f32	s14, s14, s8
 8020816:	eea5 5a87 	vfma.f32	s10, s11, s14
 802081a:	edd0 5a08 	vldr	s11, [r0, #32]
 802081e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8020822:	ee31 1a65 	vsub.f32	s2, s2, s11
 8020826:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 802082a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 802082c:	698b      	ldr	r3, [r1, #24]
 802082e:	1a9b      	subs	r3, r3, r2
 8020830:	ee07 3a10 	vmov	s14, r3
 8020834:	684b      	ldr	r3, [r1, #4]
 8020836:	1a9b      	subs	r3, r3, r2
 8020838:	ee01 3a90 	vmov	s3, r3
 802083c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020840:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8020844:	ee27 7a04 	vmul.f32	s14, s14, s8
 8020848:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 802084c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8020850:	ee61 1a84 	vmul.f32	s3, s3, s8
 8020854:	eea1 7a21 	vfma.f32	s14, s2, s3
 8020858:	ee27 7a03 	vmul.f32	s14, s14, s6
 802085c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8020860:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8020862:	694a      	ldr	r2, [r1, #20]
 8020864:	1b13      	subs	r3, r2, r4
 8020866:	ee03 3a10 	vmov	s6, r3
 802086a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 802086e:	680b      	ldr	r3, [r1, #0]
 8020870:	ee23 3a04 	vmul.f32	s6, s6, s8
 8020874:	1b1b      	subs	r3, r3, r4
 8020876:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 802087a:	ee03 3a10 	vmov	s6, r3
 802087e:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8020882:	ee23 4a04 	vmul.f32	s8, s6, s8
 8020886:	eee1 5a04 	vfma.f32	s11, s2, s8
 802088a:	ee25 6a86 	vmul.f32	s12, s11, s12
 802088e:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8020892:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8020896:	eee3 5aa6 	vfma.f32	s11, s7, s13
 802089a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 802089e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80208a2:	dd13      	ble.n	80208cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80208a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80208a8:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80208ac:	63c3      	str	r3, [r0, #60]	; 0x3c
 80208ae:	eee3 7a87 	vfma.f32	s15, s7, s14
 80208b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80208b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80208ba:	dd15      	ble.n	80208e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80208bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80208c0:	6403      	str	r3, [r0, #64]	; 0x40
 80208c2:	bd70      	pop	{r4, r5, r6, pc}
 80208c4:	4623      	mov	r3, r4
 80208c6:	e6fd      	b.n	80206c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80208c8:	462a      	mov	r2, r5
 80208ca:	e706      	b.n	80206da <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80208cc:	d502      	bpl.n	80208d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80208ce:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80208d2:	e7e9      	b.n	80208a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80208d4:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80208d8:	eea3 2a85 	vfma.f32	s4, s7, s10
 80208dc:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80208e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80208e4:	dade      	bge.n	80208a4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80208e6:	e7f2      	b.n	80208ce <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80208e8:	d502      	bpl.n	80208f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80208ea:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80208ee:	e7e7      	b.n	80208c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80208f0:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80208f4:	eee3 4a86 	vfma.f32	s9, s7, s12
 80208f8:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80208fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020900:	dadc      	bge.n	80208bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8020902:	e7f2      	b.n	80208ea <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8020904:	3d800000 	.word	0x3d800000

08020908 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8020908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802090c:	2714      	movs	r7, #20
 802090e:	435f      	muls	r7, r3
 8020910:	eb02 0c07 	add.w	ip, r2, r7
 8020914:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8020918:	f115 0e0f 	adds.w	lr, r5, #15
 802091c:	f100 80a2 	bmi.w	8020a64 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8020920:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8020924:	9c08      	ldr	r4, [sp, #32]
 8020926:	f8c0 e014 	str.w	lr, [r0, #20]
 802092a:	2614      	movs	r6, #20
 802092c:	4366      	muls	r6, r4
 802092e:	eb02 0806 	add.w	r8, r2, r6
 8020932:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8020936:	f115 040f 	adds.w	r4, r5, #15
 802093a:	f100 809f 	bmi.w	8020a7c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 802093e:	1124      	asrs	r4, r4, #4
 8020940:	eba4 040e 	sub.w	r4, r4, lr
 8020944:	6184      	str	r4, [r0, #24]
 8020946:	2c00      	cmp	r4, #0
 8020948:	f000 808a 	beq.w	8020a60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 802094c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8020950:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8020954:	5995      	ldr	r5, [r2, r6]
 8020956:	eba4 0809 	sub.w	r8, r4, r9
 802095a:	59d4      	ldr	r4, [r2, r7]
 802095c:	eba5 0a04 	sub.w	sl, r5, r4
 8020960:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8020964:	fb0e fe05 	mul.w	lr, lr, r5
 8020968:	fb0a ee19 	mls	lr, sl, r9, lr
 802096c:	fb08 e404 	mla	r4, r8, r4, lr
 8020970:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8020974:	3c01      	subs	r4, #1
 8020976:	19a4      	adds	r4, r4, r6
 8020978:	f100 808c 	bmi.w	8020a94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 802097c:	fb94 fef6 	sdiv	lr, r4, r6
 8020980:	f8c0 e000 	str.w	lr, [r0]
 8020984:	fb06 441e 	mls	r4, r6, lr, r4
 8020988:	6104      	str	r4, [r0, #16]
 802098a:	2d00      	cmp	r5, #0
 802098c:	f2c0 8095 	blt.w	8020aba <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8020990:	fb95 f4f6 	sdiv	r4, r5, r6
 8020994:	6044      	str	r4, [r0, #4]
 8020996:	fb06 5514 	mls	r5, r6, r4, r5
 802099a:	6085      	str	r5, [r0, #8]
 802099c:	60c6      	str	r6, [r0, #12]
 802099e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80209a2:	6945      	ldr	r5, [r0, #20]
 80209a4:	59d2      	ldr	r2, [r2, r7]
 80209a6:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8020adc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 80209aa:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80209ae:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80209b2:	ee07 4a10 	vmov	s14, r4
 80209b6:	6804      	ldr	r4, [r0, #0]
 80209b8:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 80209bc:	ee07 2a90 	vmov	s15, r2
 80209c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80209c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80209c8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80209cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80209d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80209d4:	edd3 6a00 	vldr	s13, [r3]
 80209d8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80209dc:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 80209e0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80209e4:	edc0 6a07 	vstr	s13, [r0, #28]
 80209e8:	edd0 6a01 	vldr	s13, [r0, #4]
 80209ec:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 80209f0:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80209f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80209f8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80209fc:	ed80 6a08 	vstr	s12, [r0, #32]
 8020a00:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8020a02:	6242      	str	r2, [r0, #36]	; 0x24
 8020a04:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8020a08:	ed93 6a03 	vldr	s12, [r3, #12]
 8020a0c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8020a10:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8020a14:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8020a18:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8020a1c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8020a20:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8020a24:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8020a28:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8020a2c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8020a2e:	6302      	str	r2, [r0, #48]	; 0x30
 8020a30:	ed93 6a06 	vldr	s12, [r3, #24]
 8020a34:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8020a38:	eea5 6a87 	vfma.f32	s12, s11, s14
 8020a3c:	eeb0 7a46 	vmov.f32	s14, s12
 8020a40:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8020a44:	eea6 7a27 	vfma.f32	s14, s12, s15
 8020a48:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8020a4c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8020a50:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8020a54:	eee6 7a87 	vfma.f32	s15, s13, s14
 8020a58:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8020a5c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8020a5e:	63c3      	str	r3, [r0, #60]	; 0x3c
 8020a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a64:	f1c5 0501 	rsb	r5, r5, #1
 8020a68:	f015 050f 	ands.w	r5, r5, #15
 8020a6c:	bf18      	it	ne
 8020a6e:	2501      	movne	r5, #1
 8020a70:	2410      	movs	r4, #16
 8020a72:	fb9e fef4 	sdiv	lr, lr, r4
 8020a76:	ebae 0e05 	sub.w	lr, lr, r5
 8020a7a:	e753      	b.n	8020924 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8020a7c:	f1c5 0501 	rsb	r5, r5, #1
 8020a80:	f015 050f 	ands.w	r5, r5, #15
 8020a84:	bf18      	it	ne
 8020a86:	2501      	movne	r5, #1
 8020a88:	f04f 0910 	mov.w	r9, #16
 8020a8c:	fb94 f4f9 	sdiv	r4, r4, r9
 8020a90:	1b64      	subs	r4, r4, r5
 8020a92:	e755      	b.n	8020940 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8020a94:	4264      	negs	r4, r4
 8020a96:	fb94 fef6 	sdiv	lr, r4, r6
 8020a9a:	f1ce 0800 	rsb	r8, lr, #0
 8020a9e:	fb06 441e 	mls	r4, r6, lr, r4
 8020aa2:	f8c0 8000 	str.w	r8, [r0]
 8020aa6:	6104      	str	r4, [r0, #16]
 8020aa8:	2c00      	cmp	r4, #0
 8020aaa:	f43f af6e 	beq.w	802098a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8020aae:	ea6f 0e0e 	mvn.w	lr, lr
 8020ab2:	f8c0 e000 	str.w	lr, [r0]
 8020ab6:	1b34      	subs	r4, r6, r4
 8020ab8:	e766      	b.n	8020988 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8020aba:	426d      	negs	r5, r5
 8020abc:	fb95 f4f6 	sdiv	r4, r5, r6
 8020ac0:	f1c4 0e00 	rsb	lr, r4, #0
 8020ac4:	fb06 5514 	mls	r5, r6, r4, r5
 8020ac8:	f8c0 e004 	str.w	lr, [r0, #4]
 8020acc:	6085      	str	r5, [r0, #8]
 8020ace:	2d00      	cmp	r5, #0
 8020ad0:	f43f af64 	beq.w	802099c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8020ad4:	43e4      	mvns	r4, r4
 8020ad6:	6044      	str	r4, [r0, #4]
 8020ad8:	1b75      	subs	r5, r6, r5
 8020ada:	e75e      	b.n	802099a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8020adc:	3d800000 	.word	0x3d800000

08020ae0 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8020ae0:	4602      	mov	r2, r0
 8020ae2:	b148      	cbz	r0, 8020af8 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8020ae4:	2300      	movs	r3, #0
 8020ae6:	b298      	uxth	r0, r3
 8020ae8:	3301      	adds	r3, #1
 8020aea:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8020aee:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8020af2:	2900      	cmp	r1, #0
 8020af4:	d1f7      	bne.n	8020ae6 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8020af6:	4770      	bx	lr
 8020af8:	4770      	bx	lr

08020afa <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8020afa:	b530      	push	{r4, r5, lr}
 8020afc:	4604      	mov	r4, r0
 8020afe:	b159      	cbz	r1, 8020b18 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8020b00:	b148      	cbz	r0, 8020b16 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8020b02:	2300      	movs	r3, #0
 8020b04:	b298      	uxth	r0, r3
 8020b06:	4282      	cmp	r2, r0
 8020b08:	d905      	bls.n	8020b16 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8020b0a:	5ccd      	ldrb	r5, [r1, r3]
 8020b0c:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8020b10:	3301      	adds	r3, #1
 8020b12:	2d00      	cmp	r5, #0
 8020b14:	d1f6      	bne.n	8020b04 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8020b16:	bd30      	pop	{r4, r5, pc}
 8020b18:	4608      	mov	r0, r1
 8020b1a:	e7fc      	b.n	8020b16 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08020b1c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 8020b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020b1e:	b08b      	sub	sp, #44	; 0x2c
 8020b20:	468c      	mov	ip, r1
 8020b22:	2100      	movs	r1, #0
 8020b24:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8020b28:	ae01      	add	r6, sp, #4
 8020b2a:	211f      	movs	r1, #31
 8020b2c:	fbb0 f7f3 	udiv	r7, r0, r3
 8020b30:	fb03 0517 	mls	r5, r3, r7, r0
 8020b34:	b2ec      	uxtb	r4, r5
 8020b36:	2d09      	cmp	r5, #9
 8020b38:	bfd4      	ite	le
 8020b3a:	3430      	addle	r4, #48	; 0x30
 8020b3c:	3457      	addgt	r4, #87	; 0x57
 8020b3e:	b2e4      	uxtb	r4, r4
 8020b40:	558c      	strb	r4, [r1, r6]
 8020b42:	4638      	mov	r0, r7
 8020b44:	1e4c      	subs	r4, r1, #1
 8020b46:	b92f      	cbnz	r7, 8020b54 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 8020b48:	4431      	add	r1, r6
 8020b4a:	4660      	mov	r0, ip
 8020b4c:	f7ff ffd5 	bl	8020afa <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8020b50:	b00b      	add	sp, #44	; 0x2c
 8020b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020b54:	4621      	mov	r1, r4
 8020b56:	e7e9      	b.n	8020b2c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

08020b58 <_ZN8touchgfx7Unicode4itoaElPtti>:
 8020b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020b5a:	4607      	mov	r7, r0
 8020b5c:	b08b      	sub	sp, #44	; 0x2c
 8020b5e:	4608      	mov	r0, r1
 8020b60:	b341      	cbz	r1, 8020bb4 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8020b62:	1e99      	subs	r1, r3, #2
 8020b64:	2922      	cmp	r1, #34	; 0x22
 8020b66:	d825      	bhi.n	8020bb4 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 8020b68:	2100      	movs	r1, #0
 8020b6a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8020b6e:	463c      	mov	r4, r7
 8020b70:	261f      	movs	r6, #31
 8020b72:	f10d 0c04 	add.w	ip, sp, #4
 8020b76:	fb94 fef3 	sdiv	lr, r4, r3
 8020b7a:	fb03 441e 	mls	r4, r3, lr, r4
 8020b7e:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8020b82:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8020b86:	b2ec      	uxtb	r4, r5
 8020b88:	2d09      	cmp	r5, #9
 8020b8a:	bfd4      	ite	le
 8020b8c:	3430      	addle	r4, #48	; 0x30
 8020b8e:	3457      	addgt	r4, #87	; 0x57
 8020b90:	b2e4      	uxtb	r4, r4
 8020b92:	f80c 4006 	strb.w	r4, [ip, r6]
 8020b96:	4674      	mov	r4, lr
 8020b98:	1e71      	subs	r1, r6, #1
 8020b9a:	b96c      	cbnz	r4, 8020bb8 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 8020b9c:	2f00      	cmp	r7, #0
 8020b9e:	da05      	bge.n	8020bac <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 8020ba0:	ab0a      	add	r3, sp, #40	; 0x28
 8020ba2:	4419      	add	r1, r3
 8020ba4:	232d      	movs	r3, #45	; 0x2d
 8020ba6:	f801 3c24 	strb.w	r3, [r1, #-36]
 8020baa:	1eb1      	subs	r1, r6, #2
 8020bac:	3101      	adds	r1, #1
 8020bae:	4461      	add	r1, ip
 8020bb0:	f7ff ffa3 	bl	8020afa <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8020bb4:	b00b      	add	sp, #44	; 0x2c
 8020bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020bb8:	460e      	mov	r6, r1
 8020bba:	e7dc      	b.n	8020b76 <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

08020bbc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8020bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bc0:	4691      	mov	r9, r2
 8020bc2:	b085      	sub	sp, #20
 8020bc4:	6802      	ldr	r2, [r0, #0]
 8020bc6:	9201      	str	r2, [sp, #4]
 8020bc8:	4688      	mov	r8, r1
 8020bca:	4683      	mov	fp, r0
 8020bcc:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8020bd0:	9103      	str	r1, [sp, #12]
 8020bd2:	4610      	mov	r0, r2
 8020bd4:	461c      	mov	r4, r3
 8020bd6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8020bda:	9302      	str	r3, [sp, #8]
 8020bdc:	f7ff ff80 	bl	8020ae0 <_ZN8touchgfx7Unicode6strlenEPKt>
 8020be0:	f1b8 0f00 	cmp.w	r8, #0
 8020be4:	bf0c      	ite	eq
 8020be6:	4684      	moveq	ip, r0
 8020be8:	f100 0c01 	addne.w	ip, r0, #1
 8020bec:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 8020bf0:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 8020bf4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8020bf6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020bf8:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8020bfc:	9903      	ldr	r1, [sp, #12]
 8020bfe:	fa1f fc8c 	uxth.w	ip, ip
 8020c02:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8020c06:	d041      	beq.n	8020c8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8020c08:	d834      	bhi.n	8020c74 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8020c0a:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 8020c0e:	d059      	beq.n	8020cc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8020c10:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 8020c14:	d03a      	beq.n	8020c8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8020c16:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 8020c1a:	d034      	beq.n	8020c86 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8020c1c:	2400      	movs	r4, #0
 8020c1e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8020c22:	3a01      	subs	r2, #1
 8020c24:	b169      	cbz	r1, 8020c42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8020c26:	9911      	ldr	r1, [sp, #68]	; 0x44
 8020c28:	458c      	cmp	ip, r1
 8020c2a:	da09      	bge.n	8020c40 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8020c2c:	eba1 010c 	sub.w	r1, r1, ip
 8020c30:	b289      	uxth	r1, r1
 8020c32:	b933      	cbnz	r3, 8020c42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8020c34:	2e00      	cmp	r6, #0
 8020c36:	d051      	beq.n	8020cdc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8020c38:	2800      	cmp	r0, #0
 8020c3a:	d04f      	beq.n	8020cdc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8020c3c:	440c      	add	r4, r1
 8020c3e:	b2a4      	uxth	r4, r4
 8020c40:	2100      	movs	r1, #0
 8020c42:	682b      	ldr	r3, [r5, #0]
 8020c44:	4293      	cmp	r3, r2
 8020c46:	da07      	bge.n	8020c58 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8020c48:	f1b8 0f00 	cmp.w	r8, #0
 8020c4c:	d004      	beq.n	8020c58 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8020c4e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8020c52:	682b      	ldr	r3, [r5, #0]
 8020c54:	3301      	adds	r3, #1
 8020c56:	602b      	str	r3, [r5, #0]
 8020c58:	2730      	movs	r7, #48	; 0x30
 8020c5a:	2c00      	cmp	r4, #0
 8020c5c:	d04e      	beq.n	8020cfc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8020c5e:	682e      	ldr	r6, [r5, #0]
 8020c60:	3c01      	subs	r4, #1
 8020c62:	42b2      	cmp	r2, r6
 8020c64:	b2a4      	uxth	r4, r4
 8020c66:	dd49      	ble.n	8020cfc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8020c68:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8020c6c:	682b      	ldr	r3, [r5, #0]
 8020c6e:	3301      	adds	r3, #1
 8020c70:	602b      	str	r3, [r5, #0]
 8020c72:	e7f2      	b.n	8020c5a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8020c74:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 8020c78:	d01d      	beq.n	8020cb6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8020c7a:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 8020c7e:	d002      	beq.n	8020c86 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8020c80:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 8020c84:	e7c9      	b.n	8020c1a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8020c86:	4684      	mov	ip, r0
 8020c88:	f04f 0800 	mov.w	r8, #0
 8020c8c:	2c00      	cmp	r4, #0
 8020c8e:	d0c6      	beq.n	8020c1e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8020c90:	b947      	cbnz	r7, 8020ca4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8020c92:	2801      	cmp	r0, #1
 8020c94:	d106      	bne.n	8020ca4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8020c96:	8814      	ldrh	r4, [r2, #0]
 8020c98:	2c30      	cmp	r4, #48	; 0x30
 8020c9a:	bf02      	ittt	eq
 8020c9c:	3202      	addeq	r2, #2
 8020c9e:	f8cb 2000 	streq.w	r2, [fp]
 8020ca2:	4638      	moveq	r0, r7
 8020ca4:	45bc      	cmp	ip, r7
 8020ca6:	da14      	bge.n	8020cd2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8020ca8:	b2bf      	uxth	r7, r7
 8020caa:	eba7 040c 	sub.w	r4, r7, ip
 8020cae:	b2a4      	uxth	r4, r4
 8020cb0:	46bc      	mov	ip, r7
 8020cb2:	2600      	movs	r6, #0
 8020cb4:	e7b3      	b.n	8020c1e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8020cb6:	4684      	mov	ip, r0
 8020cb8:	b16c      	cbz	r4, 8020cd6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8020cba:	42b8      	cmp	r0, r7
 8020cbc:	dd00      	ble.n	8020cc0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8020cbe:	b2b8      	uxth	r0, r7
 8020cc0:	2400      	movs	r4, #0
 8020cc2:	e003      	b.n	8020ccc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8020cc4:	f04f 0c01 	mov.w	ip, #1
 8020cc8:	2400      	movs	r4, #0
 8020cca:	4660      	mov	r0, ip
 8020ccc:	4626      	mov	r6, r4
 8020cce:	46a0      	mov	r8, r4
 8020cd0:	e7a5      	b.n	8020c1e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8020cd2:	2400      	movs	r4, #0
 8020cd4:	e7ed      	b.n	8020cb2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8020cd6:	4626      	mov	r6, r4
 8020cd8:	46a0      	mov	r8, r4
 8020cda:	e7a0      	b.n	8020c1e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8020cdc:	2900      	cmp	r1, #0
 8020cde:	d0b0      	beq.n	8020c42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8020ce0:	2720      	movs	r7, #32
 8020ce2:	682e      	ldr	r6, [r5, #0]
 8020ce4:	2900      	cmp	r1, #0
 8020ce6:	d0ac      	beq.n	8020c42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8020ce8:	3901      	subs	r1, #1
 8020cea:	4296      	cmp	r6, r2
 8020cec:	b289      	uxth	r1, r1
 8020cee:	daa7      	bge.n	8020c40 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8020cf0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8020cf4:	682b      	ldr	r3, [r5, #0]
 8020cf6:	3301      	adds	r3, #1
 8020cf8:	602b      	str	r3, [r5, #0]
 8020cfa:	e7f2      	b.n	8020ce2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8020cfc:	b188      	cbz	r0, 8020d22 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8020cfe:	682b      	ldr	r3, [r5, #0]
 8020d00:	3801      	subs	r0, #1
 8020d02:	429a      	cmp	r2, r3
 8020d04:	b280      	uxth	r0, r0
 8020d06:	dd0c      	ble.n	8020d22 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8020d08:	f8db 3000 	ldr.w	r3, [fp]
 8020d0c:	1c9c      	adds	r4, r3, #2
 8020d0e:	f8cb 4000 	str.w	r4, [fp]
 8020d12:	881c      	ldrh	r4, [r3, #0]
 8020d14:	682b      	ldr	r3, [r5, #0]
 8020d16:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8020d1a:	682b      	ldr	r3, [r5, #0]
 8020d1c:	3301      	adds	r3, #1
 8020d1e:	602b      	str	r3, [r5, #0]
 8020d20:	e7ec      	b.n	8020cfc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8020d22:	2620      	movs	r6, #32
 8020d24:	b151      	cbz	r1, 8020d3c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8020d26:	6828      	ldr	r0, [r5, #0]
 8020d28:	3901      	subs	r1, #1
 8020d2a:	4282      	cmp	r2, r0
 8020d2c:	b289      	uxth	r1, r1
 8020d2e:	dd05      	ble.n	8020d3c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8020d30:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8020d34:	682b      	ldr	r3, [r5, #0]
 8020d36:	3301      	adds	r3, #1
 8020d38:	602b      	str	r3, [r5, #0]
 8020d3a:	e7f3      	b.n	8020d24 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8020d3c:	b005      	add	sp, #20
 8020d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020d42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8020d42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020d46:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8020d4a:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 8020d4e:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 8020d52:	2400      	movs	r4, #0
 8020d54:	8014      	strh	r4, [r2, #0]
 8020d56:	701c      	strb	r4, [r3, #0]
 8020d58:	f888 4000 	strb.w	r4, [r8]
 8020d5c:	f88c 4000 	strb.w	r4, [ip]
 8020d60:	f88e 4000 	strb.w	r4, [lr]
 8020d64:	703c      	strb	r4, [r7, #0]
 8020d66:	6804      	ldr	r4, [r0, #0]
 8020d68:	b1a4      	cbz	r4, 8020d94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8020d6a:	8824      	ldrh	r4, [r4, #0]
 8020d6c:	f04f 0901 	mov.w	r9, #1
 8020d70:	b314      	cbz	r4, 8020db8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8020d72:	2c2b      	cmp	r4, #43	; 0x2b
 8020d74:	d001      	beq.n	8020d7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8020d76:	2c20      	cmp	r4, #32
 8020d78:	d110      	bne.n	8020d9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8020d7a:	8014      	strh	r4, [r2, #0]
 8020d7c:	6804      	ldr	r4, [r0, #0]
 8020d7e:	b10c      	cbz	r4, 8020d84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8020d80:	3402      	adds	r4, #2
 8020d82:	6004      	str	r4, [r0, #0]
 8020d84:	680c      	ldr	r4, [r1, #0]
 8020d86:	b10c      	cbz	r4, 8020d8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8020d88:	3401      	adds	r4, #1
 8020d8a:	600c      	str	r4, [r1, #0]
 8020d8c:	6804      	ldr	r4, [r0, #0]
 8020d8e:	b17c      	cbz	r4, 8020db0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8020d90:	8824      	ldrh	r4, [r4, #0]
 8020d92:	e7ed      	b.n	8020d70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8020d94:	680c      	ldr	r4, [r1, #0]
 8020d96:	b17c      	cbz	r4, 8020db8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8020d98:	7824      	ldrb	r4, [r4, #0]
 8020d9a:	e7e7      	b.n	8020d6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8020d9c:	2c2d      	cmp	r4, #45	; 0x2d
 8020d9e:	d102      	bne.n	8020da6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8020da0:	f883 9000 	strb.w	r9, [r3]
 8020da4:	e7ea      	b.n	8020d7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8020da6:	2c23      	cmp	r4, #35	; 0x23
 8020da8:	d107      	bne.n	8020dba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8020daa:	f888 9000 	strb.w	r9, [r8]
 8020dae:	e7e5      	b.n	8020d7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8020db0:	680c      	ldr	r4, [r1, #0]
 8020db2:	b10c      	cbz	r4, 8020db8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8020db4:	7824      	ldrb	r4, [r4, #0]
 8020db6:	e7db      	b.n	8020d70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8020db8:	2400      	movs	r4, #0
 8020dba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8020dbe:	2b09      	cmp	r3, #9
 8020dc0:	d901      	bls.n	8020dc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8020dc2:	2c2a      	cmp	r4, #42	; 0x2a
 8020dc4:	d122      	bne.n	8020e0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8020dc6:	2301      	movs	r3, #1
 8020dc8:	2c30      	cmp	r4, #48	; 0x30
 8020dca:	f88e 3000 	strb.w	r3, [lr]
 8020dce:	d10d      	bne.n	8020dec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8020dd0:	f88c 3000 	strb.w	r3, [ip]
 8020dd4:	6803      	ldr	r3, [r0, #0]
 8020dd6:	b10b      	cbz	r3, 8020ddc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8020dd8:	3302      	adds	r3, #2
 8020dda:	6003      	str	r3, [r0, #0]
 8020ddc:	680b      	ldr	r3, [r1, #0]
 8020dde:	b10b      	cbz	r3, 8020de4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8020de0:	3301      	adds	r3, #1
 8020de2:	600b      	str	r3, [r1, #0]
 8020de4:	6803      	ldr	r3, [r0, #0]
 8020de6:	2b00      	cmp	r3, #0
 8020de8:	d02f      	beq.n	8020e4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8020dea:	881c      	ldrh	r4, [r3, #0]
 8020dec:	2c2a      	cmp	r4, #42	; 0x2a
 8020dee:	d135      	bne.n	8020e5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8020df0:	f04f 33ff 	mov.w	r3, #4294967295
 8020df4:	6033      	str	r3, [r6, #0]
 8020df6:	6803      	ldr	r3, [r0, #0]
 8020df8:	b10b      	cbz	r3, 8020dfe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8020dfa:	3302      	adds	r3, #2
 8020dfc:	6003      	str	r3, [r0, #0]
 8020dfe:	680b      	ldr	r3, [r1, #0]
 8020e00:	b10b      	cbz	r3, 8020e06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8020e02:	3301      	adds	r3, #1
 8020e04:	600b      	str	r3, [r1, #0]
 8020e06:	6803      	ldr	r3, [r0, #0]
 8020e08:	b31b      	cbz	r3, 8020e52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8020e0a:	881c      	ldrh	r4, [r3, #0]
 8020e0c:	2c2e      	cmp	r4, #46	; 0x2e
 8020e0e:	d11a      	bne.n	8020e46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8020e10:	2301      	movs	r3, #1
 8020e12:	703b      	strb	r3, [r7, #0]
 8020e14:	6803      	ldr	r3, [r0, #0]
 8020e16:	b10b      	cbz	r3, 8020e1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8020e18:	3302      	adds	r3, #2
 8020e1a:	6003      	str	r3, [r0, #0]
 8020e1c:	680b      	ldr	r3, [r1, #0]
 8020e1e:	b10b      	cbz	r3, 8020e24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8020e20:	3301      	adds	r3, #1
 8020e22:	600b      	str	r3, [r1, #0]
 8020e24:	6803      	ldr	r3, [r0, #0]
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	d036      	beq.n	8020e98 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8020e2a:	881b      	ldrh	r3, [r3, #0]
 8020e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8020e2e:	d137      	bne.n	8020ea0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8020e30:	f04f 33ff 	mov.w	r3, #4294967295
 8020e34:	602b      	str	r3, [r5, #0]
 8020e36:	6803      	ldr	r3, [r0, #0]
 8020e38:	b10b      	cbz	r3, 8020e3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8020e3a:	3302      	adds	r3, #2
 8020e3c:	6003      	str	r3, [r0, #0]
 8020e3e:	680b      	ldr	r3, [r1, #0]
 8020e40:	b10b      	cbz	r3, 8020e46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8020e42:	3301      	adds	r3, #1
 8020e44:	600b      	str	r3, [r1, #0]
 8020e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020e4a:	680c      	ldr	r4, [r1, #0]
 8020e4c:	b134      	cbz	r4, 8020e5c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8020e4e:	7824      	ldrb	r4, [r4, #0]
 8020e50:	e7cc      	b.n	8020dec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8020e52:	680b      	ldr	r3, [r1, #0]
 8020e54:	2b00      	cmp	r3, #0
 8020e56:	d0f6      	beq.n	8020e46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8020e58:	781c      	ldrb	r4, [r3, #0]
 8020e5a:	e7d7      	b.n	8020e0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8020e5c:	2300      	movs	r3, #0
 8020e5e:	6033      	str	r3, [r6, #0]
 8020e60:	220a      	movs	r2, #10
 8020e62:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8020e66:	fa1f f38c 	uxth.w	r3, ip
 8020e6a:	2b09      	cmp	r3, #9
 8020e6c:	d8ce      	bhi.n	8020e0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8020e6e:	6833      	ldr	r3, [r6, #0]
 8020e70:	fb02 c303 	mla	r3, r2, r3, ip
 8020e74:	6033      	str	r3, [r6, #0]
 8020e76:	6803      	ldr	r3, [r0, #0]
 8020e78:	b10b      	cbz	r3, 8020e7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8020e7a:	3302      	adds	r3, #2
 8020e7c:	6003      	str	r3, [r0, #0]
 8020e7e:	680b      	ldr	r3, [r1, #0]
 8020e80:	b10b      	cbz	r3, 8020e86 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8020e82:	3301      	adds	r3, #1
 8020e84:	600b      	str	r3, [r1, #0]
 8020e86:	6803      	ldr	r3, [r0, #0]
 8020e88:	b10b      	cbz	r3, 8020e8e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8020e8a:	881c      	ldrh	r4, [r3, #0]
 8020e8c:	e7e9      	b.n	8020e62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8020e8e:	680c      	ldr	r4, [r1, #0]
 8020e90:	2c00      	cmp	r4, #0
 8020e92:	d0e6      	beq.n	8020e62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8020e94:	7824      	ldrb	r4, [r4, #0]
 8020e96:	e7e4      	b.n	8020e62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8020e98:	680b      	ldr	r3, [r1, #0]
 8020e9a:	b10b      	cbz	r3, 8020ea0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8020e9c:	781b      	ldrb	r3, [r3, #0]
 8020e9e:	e7c5      	b.n	8020e2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8020ea0:	2200      	movs	r2, #0
 8020ea2:	602a      	str	r2, [r5, #0]
 8020ea4:	240a      	movs	r4, #10
 8020ea6:	3b30      	subs	r3, #48	; 0x30
 8020ea8:	b29e      	uxth	r6, r3
 8020eaa:	2e09      	cmp	r6, #9
 8020eac:	682a      	ldr	r2, [r5, #0]
 8020eae:	d813      	bhi.n	8020ed8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8020eb0:	fb04 3302 	mla	r3, r4, r2, r3
 8020eb4:	602b      	str	r3, [r5, #0]
 8020eb6:	6803      	ldr	r3, [r0, #0]
 8020eb8:	b10b      	cbz	r3, 8020ebe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8020eba:	3302      	adds	r3, #2
 8020ebc:	6003      	str	r3, [r0, #0]
 8020ebe:	680b      	ldr	r3, [r1, #0]
 8020ec0:	b10b      	cbz	r3, 8020ec6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8020ec2:	3301      	adds	r3, #1
 8020ec4:	600b      	str	r3, [r1, #0]
 8020ec6:	6803      	ldr	r3, [r0, #0]
 8020ec8:	b10b      	cbz	r3, 8020ece <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8020eca:	881b      	ldrh	r3, [r3, #0]
 8020ecc:	e7eb      	b.n	8020ea6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8020ece:	680b      	ldr	r3, [r1, #0]
 8020ed0:	2b00      	cmp	r3, #0
 8020ed2:	d0e8      	beq.n	8020ea6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8020ed4:	781b      	ldrb	r3, [r3, #0]
 8020ed6:	e7e6      	b.n	8020ea6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8020ed8:	2a06      	cmp	r2, #6
 8020eda:	bfa8      	it	ge
 8020edc:	2206      	movge	r2, #6
 8020ede:	602a      	str	r2, [r5, #0]
 8020ee0:	e7b1      	b.n	8020e46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08020ee2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8020ee2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ee6:	b0a3      	sub	sp, #140	; 0x8c
 8020ee8:	2600      	movs	r6, #0
 8020eea:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8020eee:	4607      	mov	r7, r0
 8020ef0:	4688      	mov	r8, r1
 8020ef2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8020ef6:	4631      	mov	r1, r6
 8020ef8:	2242      	movs	r2, #66	; 0x42
 8020efa:	4648      	mov	r0, r9
 8020efc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8020efe:	960d      	str	r6, [sp, #52]	; 0x34
 8020f00:	f00c fe6a 	bl	802dbd8 <memset>
 8020f04:	b15f      	cbz	r7, 8020f1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8020f06:	f108 3aff 	add.w	sl, r8, #4294967295
 8020f0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020f0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020f0e:	b152      	cbz	r2, 8020f26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8020f10:	8812      	ldrh	r2, [r2, #0]
 8020f12:	b10a      	cbz	r2, 8020f18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8020f14:	459a      	cmp	sl, r3
 8020f16:	dc2e      	bgt.n	8020f76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8020f18:	2200      	movs	r2, #0
 8020f1a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8020f1e:	4638      	mov	r0, r7
 8020f20:	b023      	add	sp, #140	; 0x8c
 8020f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f26:	9a08      	ldr	r2, [sp, #32]
 8020f28:	2a00      	cmp	r2, #0
 8020f2a:	d0f5      	beq.n	8020f18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8020f2c:	7812      	ldrb	r2, [r2, #0]
 8020f2e:	e7f0      	b.n	8020f12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8020f30:	2d00      	cmp	r5, #0
 8020f32:	d0ea      	beq.n	8020f0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8020f34:	782a      	ldrb	r2, [r5, #0]
 8020f36:	b142      	cbz	r2, 8020f4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8020f38:	2a25      	cmp	r2, #37	; 0x25
 8020f3a:	d001      	beq.n	8020f40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8020f3c:	459a      	cmp	sl, r3
 8020f3e:	dc08      	bgt.n	8020f52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8020f40:	f1bb 0f00 	cmp.w	fp, #0
 8020f44:	d121      	bne.n	8020f8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8020f46:	2d00      	cmp	r5, #0
 8020f48:	d0df      	beq.n	8020f0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8020f4a:	782a      	ldrb	r2, [r5, #0]
 8020f4c:	f04f 0b00 	mov.w	fp, #0
 8020f50:	e01d      	b.n	8020f8e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8020f52:	f1bb 0f00 	cmp.w	fp, #0
 8020f56:	d078      	beq.n	802104a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 8020f58:	f8bb 2000 	ldrh.w	r2, [fp]
 8020f5c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8020f60:	f1bb 0f00 	cmp.w	fp, #0
 8020f64:	d002      	beq.n	8020f6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8020f66:	f10b 0202 	add.w	r2, fp, #2
 8020f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8020f6c:	b10d      	cbz	r5, 8020f72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8020f6e:	3501      	adds	r5, #1
 8020f70:	9508      	str	r5, [sp, #32]
 8020f72:	3301      	adds	r3, #1
 8020f74:	930d      	str	r3, [sp, #52]	; 0x34
 8020f76:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 8020f7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020f7c:	f1bb 0f00 	cmp.w	fp, #0
 8020f80:	d0d6      	beq.n	8020f30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8020f82:	f8bb 2000 	ldrh.w	r2, [fp]
 8020f86:	2a00      	cmp	r2, #0
 8020f88:	d1d6      	bne.n	8020f38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 8020f8a:	f8bb 2000 	ldrh.w	r2, [fp]
 8020f8e:	2a00      	cmp	r2, #0
 8020f90:	d0bb      	beq.n	8020f0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8020f92:	459a      	cmp	sl, r3
 8020f94:	ddb9      	ble.n	8020f0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8020f96:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 8020f9a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8020f9e:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 8020fa2:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8020fa6:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 8020faa:	960e      	str	r6, [sp, #56]	; 0x38
 8020fac:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 8020fb0:	960f      	str	r6, [sp, #60]	; 0x3c
 8020fb2:	f1bb 0f00 	cmp.w	fp, #0
 8020fb6:	d002      	beq.n	8020fbe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8020fb8:	f10b 0302 	add.w	r3, fp, #2
 8020fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8020fbe:	b10d      	cbz	r5, 8020fc4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 8020fc0:	1c6b      	adds	r3, r5, #1
 8020fc2:	9308      	str	r3, [sp, #32]
 8020fc4:	ab0f      	add	r3, sp, #60	; 0x3c
 8020fc6:	9305      	str	r3, [sp, #20]
 8020fc8:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8020fcc:	9304      	str	r3, [sp, #16]
 8020fce:	ab0e      	add	r3, sp, #56	; 0x38
 8020fd0:	9303      	str	r3, [sp, #12]
 8020fd2:	ab0c      	add	r3, sp, #48	; 0x30
 8020fd4:	9302      	str	r3, [sp, #8]
 8020fd6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8020fda:	9301      	str	r3, [sp, #4]
 8020fdc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8020fe0:	9300      	str	r3, [sp, #0]
 8020fe2:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8020fe6:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 8020fea:	a908      	add	r1, sp, #32
 8020fec:	a809      	add	r0, sp, #36	; 0x24
 8020fee:	f7ff fea8 	bl	8020d42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 8020ff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020ff4:	2b00      	cmp	r3, #0
 8020ff6:	bfbe      	ittt	lt
 8020ff8:	6823      	ldrlt	r3, [r4, #0]
 8020ffa:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8020ffe:	930e      	strlt	r3, [sp, #56]	; 0x38
 8021000:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021002:	bfb8      	it	lt
 8021004:	3404      	addlt	r4, #4
 8021006:	2b00      	cmp	r3, #0
 8021008:	bfb8      	it	lt
 802100a:	6823      	ldrlt	r3, [r4, #0]
 802100c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8021010:	bfbe      	ittt	lt
 8021012:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8021016:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8021018:	3404      	addlt	r4, #4
 802101a:	b1d9      	cbz	r1, 8021054 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 802101c:	880b      	ldrh	r3, [r1, #0]
 802101e:	2b69      	cmp	r3, #105	; 0x69
 8021020:	d01f      	beq.n	8021062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8021022:	d82f      	bhi.n	8021084 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 8021024:	2b58      	cmp	r3, #88	; 0x58
 8021026:	d01c      	beq.n	8021062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8021028:	d818      	bhi.n	802105c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 802102a:	2b25      	cmp	r3, #37	; 0x25
 802102c:	d034      	beq.n	8021098 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 802102e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8021032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021034:	f1bb 0f00 	cmp.w	fp, #0
 8021038:	f000 80b8 	beq.w	80211ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 802103c:	f8bb 5000 	ldrh.w	r5, [fp]
 8021040:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8021044:	3301      	adds	r3, #1
 8021046:	930d      	str	r3, [sp, #52]	; 0x34
 8021048:	e029      	b.n	802109e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 802104a:	b10d      	cbz	r5, 8021050 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 802104c:	782a      	ldrb	r2, [r5, #0]
 802104e:	e785      	b.n	8020f5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8021050:	462a      	mov	r2, r5
 8021052:	e783      	b.n	8020f5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8021054:	2a00      	cmp	r2, #0
 8021056:	d0ea      	beq.n	802102e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8021058:	7813      	ldrb	r3, [r2, #0]
 802105a:	e7e0      	b.n	802101e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 802105c:	3b63      	subs	r3, #99	; 0x63
 802105e:	2b01      	cmp	r3, #1
 8021060:	d8e5      	bhi.n	802102e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8021062:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8021066:	b329      	cbz	r1, 80210b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 8021068:	880b      	ldrh	r3, [r1, #0]
 802106a:	2b69      	cmp	r3, #105	; 0x69
 802106c:	d063      	beq.n	8021136 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 802106e:	d825      	bhi.n	80210bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 8021070:	2b63      	cmp	r3, #99	; 0x63
 8021072:	d038      	beq.n	80210e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 8021074:	2b64      	cmp	r3, #100	; 0x64
 8021076:	d05e      	beq.n	8021136 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 8021078:	2b58      	cmp	r3, #88	; 0x58
 802107a:	d07b      	beq.n	8021174 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 802107c:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 8021080:	4625      	mov	r5, r4
 8021082:	e036      	b.n	80210f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8021084:	2b73      	cmp	r3, #115	; 0x73
 8021086:	d0ec      	beq.n	8021062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8021088:	d802      	bhi.n	8021090 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 802108a:	2b6f      	cmp	r3, #111	; 0x6f
 802108c:	d1cf      	bne.n	802102e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 802108e:	e7e8      	b.n	8021062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8021090:	2b75      	cmp	r3, #117	; 0x75
 8021092:	d0e6      	beq.n	8021062 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8021094:	2b78      	cmp	r3, #120	; 0x78
 8021096:	e7f9      	b.n	802108c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 8021098:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802109a:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 802109e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80210a0:	b10b      	cbz	r3, 80210a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 80210a2:	3302      	adds	r3, #2
 80210a4:	9309      	str	r3, [sp, #36]	; 0x24
 80210a6:	9b08      	ldr	r3, [sp, #32]
 80210a8:	2b00      	cmp	r3, #0
 80210aa:	f43f af2e 	beq.w	8020f0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80210ae:	3301      	adds	r3, #1
 80210b0:	9308      	str	r3, [sp, #32]
 80210b2:	e72a      	b.n	8020f0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80210b4:	2a00      	cmp	r2, #0
 80210b6:	d0e1      	beq.n	802107c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 80210b8:	7813      	ldrb	r3, [r2, #0]
 80210ba:	e7d6      	b.n	802106a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 80210bc:	2b73      	cmp	r3, #115	; 0x73
 80210be:	d036      	beq.n	802112e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 80210c0:	d807      	bhi.n	80210d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 80210c2:	2b6f      	cmp	r3, #111	; 0x6f
 80210c4:	d1da      	bne.n	802107c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 80210c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80210c8:	1d25      	adds	r5, r4, #4
 80210ca:	eba8 0202 	sub.w	r2, r8, r2
 80210ce:	2308      	movs	r3, #8
 80210d0:	e04a      	b.n	8021168 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 80210d2:	2b75      	cmp	r3, #117	; 0x75
 80210d4:	d043      	beq.n	802115e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 80210d6:	2b78      	cmp	r3, #120	; 0x78
 80210d8:	d1d0      	bne.n	802107c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 80210da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80210dc:	1d25      	adds	r5, r4, #4
 80210de:	eba8 0202 	sub.w	r2, r8, r2
 80210e2:	2310      	movs	r3, #16
 80210e4:	e040      	b.n	8021168 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 80210e6:	6823      	ldr	r3, [r4, #0]
 80210e8:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 80210ec:	1d25      	adds	r5, r4, #4
 80210ee:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 80210f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80210f4:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80210f8:	2b00      	cmp	r3, #0
 80210fa:	d052      	beq.n	80211a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 80210fc:	881a      	ldrh	r2, [r3, #0]
 80210fe:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8021102:	a80d      	add	r0, sp, #52	; 0x34
 8021104:	9005      	str	r0, [sp, #20]
 8021106:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 802110a:	9004      	str	r0, [sp, #16]
 802110c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802110e:	9003      	str	r0, [sp, #12]
 8021110:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 8021114:	9002      	str	r0, [sp, #8]
 8021116:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8021118:	9001      	str	r0, [sp, #4]
 802111a:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 802111e:	9000      	str	r0, [sp, #0]
 8021120:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8021124:	a810      	add	r0, sp, #64	; 0x40
 8021126:	f7ff fd49 	bl	8020bbc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 802112a:	462c      	mov	r4, r5
 802112c:	e7b7      	b.n	802109e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 802112e:	6823      	ldr	r3, [r4, #0]
 8021130:	1d25      	adds	r5, r4, #4
 8021132:	9310      	str	r3, [sp, #64]	; 0x40
 8021134:	e7dd      	b.n	80210f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8021136:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021138:	6820      	ldr	r0, [r4, #0]
 802113a:	eba8 0202 	sub.w	r2, r8, r2
 802113e:	230a      	movs	r3, #10
 8021140:	b292      	uxth	r2, r2
 8021142:	4649      	mov	r1, r9
 8021144:	f7ff fd08 	bl	8020b58 <_ZN8touchgfx7Unicode4itoaElPtti>
 8021148:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 802114c:	2b2d      	cmp	r3, #45	; 0x2d
 802114e:	f104 0504 	add.w	r5, r4, #4
 8021152:	d1ce      	bne.n	80210f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8021154:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8021158:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802115a:	3302      	adds	r3, #2
 802115c:	e7e9      	b.n	8021132 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 802115e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021160:	1d25      	adds	r5, r4, #4
 8021162:	eba8 0202 	sub.w	r2, r8, r2
 8021166:	230a      	movs	r3, #10
 8021168:	b292      	uxth	r2, r2
 802116a:	4649      	mov	r1, r9
 802116c:	6820      	ldr	r0, [r4, #0]
 802116e:	f7ff fcd5 	bl	8020b1c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8021172:	e7be      	b.n	80210f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8021174:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021176:	6820      	ldr	r0, [r4, #0]
 8021178:	eba8 0202 	sub.w	r2, r8, r2
 802117c:	b292      	uxth	r2, r2
 802117e:	2310      	movs	r3, #16
 8021180:	4649      	mov	r1, r9
 8021182:	f7ff fccb 	bl	8020b1c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 8021186:	1d25      	adds	r5, r4, #4
 8021188:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 802118c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8021190:	2b00      	cmp	r3, #0
 8021192:	d0ae      	beq.n	80210f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8021194:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8021198:	2919      	cmp	r1, #25
 802119a:	d8f7      	bhi.n	802118c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 802119c:	3b20      	subs	r3, #32
 802119e:	8013      	strh	r3, [r2, #0]
 80211a0:	e7f4      	b.n	802118c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 80211a2:	9a08      	ldr	r2, [sp, #32]
 80211a4:	2a00      	cmp	r2, #0
 80211a6:	d0aa      	beq.n	80210fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 80211a8:	7812      	ldrb	r2, [r2, #0]
 80211aa:	e7a8      	b.n	80210fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 80211ac:	2d00      	cmp	r5, #0
 80211ae:	f43f af47 	beq.w	8021040 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 80211b2:	782d      	ldrb	r5, [r5, #0]
 80211b4:	e744      	b.n	8021040 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

080211b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 80211b6:	b507      	push	{r0, r1, r2, lr}
 80211b8:	9300      	str	r3, [sp, #0]
 80211ba:	4613      	mov	r3, r2
 80211bc:	2200      	movs	r2, #0
 80211be:	f7ff fe90 	bl	8020ee2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 80211c2:	b003      	add	sp, #12
 80211c4:	f85d fb04 	ldr.w	pc, [sp], #4

080211c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 80211c8:	b40c      	push	{r2, r3}
 80211ca:	b507      	push	{r0, r1, r2, lr}
 80211cc:	ab04      	add	r3, sp, #16
 80211ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80211d2:	9301      	str	r3, [sp, #4]
 80211d4:	f7ff ffef 	bl	80211b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80211d8:	b003      	add	sp, #12
 80211da:	f85d eb04 	ldr.w	lr, [sp], #4
 80211de:	b002      	add	sp, #8
 80211e0:	4770      	bx	lr
	...

080211e4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>:
 80211e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80211e8:	b0c3      	sub	sp, #268	; 0x10c
 80211ea:	2600      	movs	r6, #0
 80211ec:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 80211f0:	4607      	mov	r7, r0
 80211f2:	4689      	mov	r9, r1
 80211f4:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80211f8:	4631      	mov	r1, r6
 80211fa:	22c8      	movs	r2, #200	; 0xc8
 80211fc:	4640      	mov	r0, r8
 80211fe:	f8dd a130 	ldr.w	sl, [sp, #304]	; 0x130
 8021202:	960c      	str	r6, [sp, #48]	; 0x30
 8021204:	f00c fce8 	bl	802dbd8 <memset>
 8021208:	b17f      	cbz	r7, 802122a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x46>
 802120a:	eddf 5aa4 	vldr	s11, [pc, #656]	; 802149c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2b8>
 802120e:	f8df b298 	ldr.w	fp, [pc, #664]	; 80214a8 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c4>
 8021212:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021214:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021216:	b162      	cbz	r2, 8021232 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x4e>
 8021218:	8812      	ldrh	r2, [r2, #0]
 802121a:	b11a      	cbz	r2, 8021224 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x40>
 802121c:	f109 31ff 	add.w	r1, r9, #4294967295
 8021220:	4299      	cmp	r1, r3
 8021222:	dc26      	bgt.n	8021272 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8e>
 8021224:	2200      	movs	r2, #0
 8021226:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 802122a:	4638      	mov	r0, r7
 802122c:	b043      	add	sp, #268	; 0x10c
 802122e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021232:	9a08      	ldr	r2, [sp, #32]
 8021234:	2a00      	cmp	r2, #0
 8021236:	d0f5      	beq.n	8021224 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x40>
 8021238:	7812      	ldrb	r2, [r2, #0]
 802123a:	e7ee      	b.n	802121a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x36>
 802123c:	2c00      	cmp	r4, #0
 802123e:	d0e8      	beq.n	8021212 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 8021240:	7822      	ldrb	r2, [r4, #0]
 8021242:	b132      	cbz	r2, 8021252 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x6e>
 8021244:	2a25      	cmp	r2, #37	; 0x25
 8021246:	d001      	beq.n	802124c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x68>
 8021248:	4299      	cmp	r1, r3
 802124a:	dc05      	bgt.n	8021258 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x74>
 802124c:	b9cd      	cbnz	r5, 8021282 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x9e>
 802124e:	2c00      	cmp	r4, #0
 8021250:	d0df      	beq.n	8021212 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 8021252:	7822      	ldrb	r2, [r4, #0]
 8021254:	2500      	movs	r5, #0
 8021256:	e015      	b.n	8021284 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xa0>
 8021258:	2d00      	cmp	r5, #0
 802125a:	d073      	beq.n	8021344 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x160>
 802125c:	882a      	ldrh	r2, [r5, #0]
 802125e:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8021262:	b10d      	cbz	r5, 8021268 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x84>
 8021264:	3502      	adds	r5, #2
 8021266:	9509      	str	r5, [sp, #36]	; 0x24
 8021268:	b10c      	cbz	r4, 802126e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x8a>
 802126a:	3401      	adds	r4, #1
 802126c:	9408      	str	r4, [sp, #32]
 802126e:	3301      	adds	r3, #1
 8021270:	930c      	str	r3, [sp, #48]	; 0x30
 8021272:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
 8021276:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021278:	2d00      	cmp	r5, #0
 802127a:	d0df      	beq.n	802123c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x58>
 802127c:	882a      	ldrh	r2, [r5, #0]
 802127e:	2a00      	cmp	r2, #0
 8021280:	d1e0      	bne.n	8021244 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x60>
 8021282:	882a      	ldrh	r2, [r5, #0]
 8021284:	2a00      	cmp	r2, #0
 8021286:	d0c4      	beq.n	8021212 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 8021288:	4299      	cmp	r1, r3
 802128a:	ddc2      	ble.n	8021212 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 802128c:	2300      	movs	r3, #0
 802128e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8021292:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021296:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802129a:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 802129e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80212a2:	930d      	str	r3, [sp, #52]	; 0x34
 80212a4:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 80212a8:	930e      	str	r3, [sp, #56]	; 0x38
 80212aa:	b10d      	cbz	r5, 80212b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xcc>
 80212ac:	1cab      	adds	r3, r5, #2
 80212ae:	9309      	str	r3, [sp, #36]	; 0x24
 80212b0:	b10c      	cbz	r4, 80212b6 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0xd2>
 80212b2:	1c63      	adds	r3, r4, #1
 80212b4:	9308      	str	r3, [sp, #32]
 80212b6:	ab0e      	add	r3, sp, #56	; 0x38
 80212b8:	9305      	str	r3, [sp, #20]
 80212ba:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 80212be:	9304      	str	r3, [sp, #16]
 80212c0:	ab0d      	add	r3, sp, #52	; 0x34
 80212c2:	9303      	str	r3, [sp, #12]
 80212c4:	ab0b      	add	r3, sp, #44	; 0x2c
 80212c6:	9302      	str	r3, [sp, #8]
 80212c8:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
 80212cc:	9301      	str	r3, [sp, #4]
 80212ce:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 80212d2:	9300      	str	r3, [sp, #0]
 80212d4:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 80212d8:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 80212dc:	a908      	add	r1, sp, #32
 80212de:	a809      	add	r0, sp, #36	; 0x24
 80212e0:	f7ff fd2f 	bl	8020d42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 80212e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80212e6:	2b00      	cmp	r3, #0
 80212e8:	da0b      	bge.n	8021302 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x11e>
 80212ea:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 80212ee:	edd3 7a00 	vldr	s15, [r3]
 80212f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80212f6:	3601      	adds	r6, #1
 80212f8:	ee17 3a90 	vmov	r3, s15
 80212fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021300:	930d      	str	r3, [sp, #52]	; 0x34
 8021302:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021304:	2b00      	cmp	r3, #0
 8021306:	da0b      	bge.n	8021320 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x13c>
 8021308:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 802130c:	edd3 7a00 	vldr	s15, [r3]
 8021310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021314:	3601      	adds	r6, #1
 8021316:	ee17 3a90 	vmov	r3, s15
 802131a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802131e:	930e      	str	r3, [sp, #56]	; 0x38
 8021320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021322:	b1a3      	cbz	r3, 802134e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x16a>
 8021324:	881a      	ldrh	r2, [r3, #0]
 8021326:	2a25      	cmp	r2, #37	; 0x25
 8021328:	d016      	beq.n	8021358 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x174>
 802132a:	2a66      	cmp	r2, #102	; 0x66
 802132c:	d01a      	beq.n	8021364 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x180>
 802132e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8021332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021334:	2d00      	cmp	r5, #0
 8021336:	f000 80fe 	beq.w	8021536 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x352>
 802133a:	882c      	ldrh	r4, [r5, #0]
 802133c:	f827 4013 	strh.w	r4, [r7, r3, lsl #1]
 8021340:	3301      	adds	r3, #1
 8021342:	e00d      	b.n	8021360 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x17c>
 8021344:	b10c      	cbz	r4, 802134a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x166>
 8021346:	7822      	ldrb	r2, [r4, #0]
 8021348:	e789      	b.n	802125e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x7a>
 802134a:	4622      	mov	r2, r4
 802134c:	e787      	b.n	802125e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x7a>
 802134e:	9b08      	ldr	r3, [sp, #32]
 8021350:	2b00      	cmp	r3, #0
 8021352:	d0ec      	beq.n	802132e <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x14a>
 8021354:	781a      	ldrb	r2, [r3, #0]
 8021356:	e7e6      	b.n	8021326 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x142>
 8021358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802135a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 802135e:	3302      	adds	r3, #2
 8021360:	930c      	str	r3, [sp, #48]	; 0x30
 8021362:	e042      	b.n	80213ea <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x206>
 8021364:	eb0a 0386 	add.w	r3, sl, r6, lsl #2
 8021368:	edd3 7a00 	vldr	s15, [r3]
 802136c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 8021370:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8021374:	3601      	adds	r6, #1
 8021376:	b923      	cbnz	r3, 8021382 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x19e>
 8021378:	2301      	movs	r3, #1
 802137a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
 802137e:	2306      	movs	r3, #6
 8021380:	930e      	str	r3, [sp, #56]	; 0x38
 8021382:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8021386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802138a:	bf48      	it	mi
 802138c:	eef1 7a67 	vnegmi.f32	s15, s15
 8021390:	eeb0 7ae7 	vabs.f32	s14, s15
 8021394:	bf48      	it	mi
 8021396:	232d      	movmi	r3, #45	; 0x2d
 8021398:	eeb4 7a65 	vcmp.f32	s14, s11
 802139c:	bf48      	it	mi
 802139e:	f8ad 302e 	strhmi.w	r3, [sp, #46]	; 0x2e
 80213a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80213a6:	dd2b      	ble.n	8021400 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x21c>
 80213a8:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 80213ac:	2366      	movs	r3, #102	; 0x66
 80213ae:	9311      	str	r3, [sp, #68]	; 0x44
 80213b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80213b2:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80213b6:	2b00      	cmp	r3, #0
 80213b8:	f000 80b7 	beq.w	802152a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x346>
 80213bc:	881a      	ldrh	r2, [r3, #0]
 80213be:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80213c2:	a80c      	add	r0, sp, #48	; 0x30
 80213c4:	9005      	str	r0, [sp, #20]
 80213c6:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
 80213ca:	9004      	str	r0, [sp, #16]
 80213cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80213ce:	9003      	str	r0, [sp, #12]
 80213d0:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 80213d4:	9002      	str	r0, [sp, #8]
 80213d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80213d8:	9001      	str	r0, [sp, #4]
 80213da:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 80213de:	9000      	str	r0, [sp, #0]
 80213e0:	e9cd 9706 	strd	r9, r7, [sp, #24]
 80213e4:	a80f      	add	r0, sp, #60	; 0x3c
 80213e6:	f7ff fbe9 	bl	8020bbc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 80213ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80213ec:	b10b      	cbz	r3, 80213f2 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x20e>
 80213ee:	3302      	adds	r3, #2
 80213f0:	9309      	str	r3, [sp, #36]	; 0x24
 80213f2:	9b08      	ldr	r3, [sp, #32]
 80213f4:	2b00      	cmp	r3, #0
 80213f6:	f43f af0c 	beq.w	8021212 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 80213fa:	3301      	adds	r3, #1
 80213fc:	9308      	str	r3, [sp, #32]
 80213fe:	e708      	b.n	8021212 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e>
 8021400:	eef4 7a67 	vcmp.f32	s15, s15
 8021404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021408:	d60b      	bvs.n	8021422 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x23e>
 802140a:	980e      	ldr	r0, [sp, #56]	; 0x38
 802140c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80214a0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2bc>
 8021410:	2300      	movs	r3, #0
 8021412:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8021416:	4283      	cmp	r3, r0
 8021418:	da07      	bge.n	802142a <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x246>
 802141a:	ee87 7a06 	vdiv.f32	s14, s14, s12
 802141e:	3301      	adds	r3, #1
 8021420:	e7f9      	b.n	8021416 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x232>
 8021422:	4b20      	ldr	r3, [pc, #128]	; (80214a4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c0>)
 8021424:	9310      	str	r3, [sp, #64]	; 0x40
 8021426:	236e      	movs	r3, #110	; 0x6e
 8021428:	e7c1      	b.n	80213ae <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1ca>
 802142a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802142e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021432:	eeb0 7a67 	vmov.f32	s14, s15
 8021436:	eeb4 7ac6 	vcmpe.f32	s14, s12
 802143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802143e:	da27      	bge.n	8021490 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2ac>
 8021440:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021442:	2100      	movs	r1, #0
 8021444:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 8021448:	eba9 0202 	sub.w	r2, r9, r2
 802144c:	eef4 6ac5 	vcmpe.f32	s13, s10
 8021450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021454:	b28c      	uxth	r4, r1
 8021456:	db2a      	blt.n	80214ae <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2ca>
 8021458:	1a53      	subs	r3, r2, r1
 802145a:	2b00      	cmp	r3, #0
 802145c:	dd27      	ble.n	80214ae <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2ca>
 802145e:	2963      	cmp	r1, #99	; 0x63
 8021460:	d024      	beq.n	80214ac <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2c8>
 8021462:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8021466:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 802146a:	ee17 3a10 	vmov	r3, s14
 802146e:	2b09      	cmp	r3, #9
 8021470:	bfa8      	it	ge
 8021472:	2309      	movge	r3, #9
 8021474:	ee07 3a10 	vmov	s14, r3
 8021478:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802147c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8021480:	f828 4011 	strh.w	r4, [r8, r1, lsl #1]
 8021484:	eee7 7a66 	vfms.f32	s15, s14, s13
 8021488:	3101      	adds	r1, #1
 802148a:	eec6 6a86 	vdiv.f32	s13, s13, s12
 802148e:	e7dd      	b.n	802144c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x268>
 8021490:	ee66 6a86 	vmul.f32	s13, s13, s12
 8021494:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8021498:	e7cd      	b.n	8021436 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x252>
 802149a:	bf00      	nop
 802149c:	7f7fffff 	.word	0x7f7fffff
 80214a0:	3f000002 	.word	0x3f000002
 80214a4:	0061006e 	.word	0x0061006e
 80214a8:	006e0069 	.word	0x006e0069
 80214ac:	460c      	mov	r4, r1
 80214ae:	2a63      	cmp	r2, #99	; 0x63
 80214b0:	bfd4      	ite	le
 80214b2:	ebc4 0202 	rsble	r2, r4, r2
 80214b6:	f1c4 0263 	rsbgt	r2, r4, #99	; 0x63
 80214ba:	2a00      	cmp	r2, #0
 80214bc:	dd30      	ble.n	8021520 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x33c>
 80214be:	4603      	mov	r3, r0
 80214c0:	2501      	movs	r5, #1
 80214c2:	210a      	movs	r1, #10
 80214c4:	2b00      	cmp	r3, #0
 80214c6:	dd0d      	ble.n	80214e4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x300>
 80214c8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80214cc:	3b01      	subs	r3, #1
 80214ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80214d2:	ee17 ca10 	vmov	ip, s14
 80214d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80214da:	fb01 c505 	mla	r5, r1, r5, ip
 80214de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80214e2:	e7ef      	b.n	80214c4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x2e0>
 80214e4:	2800      	cmp	r0, #0
 80214e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80214ea:	bfac      	ite	ge
 80214ec:	1a18      	subge	r0, r3, r0
 80214ee:	4618      	movlt	r0, r3
 80214f0:	0064      	lsls	r4, r4, #1
 80214f2:	900e      	str	r0, [sp, #56]	; 0x38
 80214f4:	230a      	movs	r3, #10
 80214f6:	b292      	uxth	r2, r2
 80214f8:	eb08 0104 	add.w	r1, r8, r4
 80214fc:	4628      	mov	r0, r5
 80214fe:	f7ff fb2b 	bl	8020b58 <_ZN8touchgfx7Unicode4itoaElPtti>
 8021502:	2d01      	cmp	r5, #1
 8021504:	dc0a      	bgt.n	802151c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x338>
 8021506:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 802150a:	2b00      	cmp	r3, #0
 802150c:	bf0c      	ite	eq
 802150e:	2300      	moveq	r3, #0
 8021510:	232e      	movne	r3, #46	; 0x2e
 8021512:	aa42      	add	r2, sp, #264	; 0x108
 8021514:	4414      	add	r4, r2
 8021516:	f824 3cc8 	strh.w	r3, [r4, #-200]
 802151a:	e749      	b.n	80213b0 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1cc>
 802151c:	232e      	movs	r3, #46	; 0x2e
 802151e:	e7f8      	b.n	8021512 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x32e>
 8021520:	ab42      	add	r3, sp, #264	; 0x108
 8021522:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8021526:	2300      	movs	r3, #0
 8021528:	e7f5      	b.n	8021516 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x332>
 802152a:	9a08      	ldr	r2, [sp, #32]
 802152c:	2a00      	cmp	r2, #0
 802152e:	f43f af46 	beq.w	80213be <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1da>
 8021532:	7812      	ldrb	r2, [r2, #0]
 8021534:	e743      	b.n	80213be <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x1da>
 8021536:	2c00      	cmp	r4, #0
 8021538:	f43f af00 	beq.w	802133c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x158>
 802153c:	7824      	ldrb	r4, [r4, #0]
 802153e:	e6fd      	b.n	802133c <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf+0x158>

08021540 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKcPKf>:
 8021540:	b507      	push	{r0, r1, r2, lr}
 8021542:	9300      	str	r3, [sp, #0]
 8021544:	4613      	mov	r3, r2
 8021546:	2200      	movs	r2, #0
 8021548:	f7ff fe4c 	bl	80211e4 <_ZN8touchgfx7Unicode14snprintfFloatsEPttPKtPKcPKf>
 802154c:	b003      	add	sp, #12
 802154e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08021554 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8021554:	4b01      	ldr	r3, [pc, #4]	; (802155c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8021556:	6018      	str	r0, [r3, #0]
 8021558:	4770      	bx	lr
 802155a:	bf00      	nop
 802155c:	2000f1cc 	.word	0x2000f1cc

08021560 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8021560:	4b06      	ldr	r3, [pc, #24]	; (802157c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8021562:	881a      	ldrh	r2, [r3, #0]
 8021564:	4282      	cmp	r2, r0
 8021566:	d807      	bhi.n	8021578 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8021568:	4b05      	ldr	r3, [pc, #20]	; (8021580 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 802156a:	881b      	ldrh	r3, [r3, #0]
 802156c:	4413      	add	r3, r2
 802156e:	4298      	cmp	r0, r3
 8021570:	bfac      	ite	ge
 8021572:	2000      	movge	r0, #0
 8021574:	2001      	movlt	r0, #1
 8021576:	4770      	bx	lr
 8021578:	2000      	movs	r0, #0
 802157a:	4770      	bx	lr
 802157c:	2000f1ec 	.word	0x2000f1ec
 8021580:	2000f1f0 	.word	0x2000f1f0

08021584 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8021584:	b508      	push	{r3, lr}
 8021586:	4601      	mov	r1, r0
 8021588:	f7ff ffea 	bl	8021560 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 802158c:	b118      	cbz	r0, 8021596 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 802158e:	4b02      	ldr	r3, [pc, #8]	; (8021598 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8021590:	681b      	ldr	r3, [r3, #0]
 8021592:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8021596:	bd08      	pop	{r3, pc}
 8021598:	2000f1d0 	.word	0x2000f1d0

0802159c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 802159c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802159e:	4c24      	ldr	r4, [pc, #144]	; (8021630 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80215a0:	6823      	ldr	r3, [r4, #0]
 80215a2:	2b00      	cmp	r3, #0
 80215a4:	d042      	beq.n	802162c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80215a6:	4a23      	ldr	r2, [pc, #140]	; (8021634 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80215a8:	4d23      	ldr	r5, [pc, #140]	; (8021638 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80215aa:	8811      	ldrh	r1, [r2, #0]
 80215ac:	f8b5 c000 	ldrh.w	ip, [r5]
 80215b0:	4822      	ldr	r0, [pc, #136]	; (802163c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80215b2:	4461      	add	r1, ip
 80215b4:	1c4a      	adds	r2, r1, #1
 80215b6:	f022 0201 	bic.w	r2, r2, #1
 80215ba:	008f      	lsls	r7, r1, #2
 80215bc:	0412      	lsls	r2, r2, #16
 80215be:	19de      	adds	r6, r3, r7
 80215c0:	0c12      	lsrs	r2, r2, #16
 80215c2:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 80215c6:	6006      	str	r6, [r0, #0]
 80215c8:	4e1d      	ldr	r6, [pc, #116]	; (8021640 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80215ca:	19da      	adds	r2, r3, r7
 80215cc:	6032      	str	r2, [r6, #0]
 80215ce:	220e      	movs	r2, #14
 80215d0:	fb02 f20c 	mul.w	r2, r2, ip
 80215d4:	3203      	adds	r2, #3
 80215d6:	f022 0203 	bic.w	r2, r2, #3
 80215da:	443a      	add	r2, r7
 80215dc:	4f19      	ldr	r7, [pc, #100]	; (8021644 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80215de:	4413      	add	r3, r2
 80215e0:	603b      	str	r3, [r7, #0]
 80215e2:	4f19      	ldr	r7, [pc, #100]	; (8021648 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80215e4:	2300      	movs	r3, #0
 80215e6:	803b      	strh	r3, [r7, #0]
 80215e8:	4f18      	ldr	r7, [pc, #96]	; (802164c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80215ea:	683f      	ldr	r7, [r7, #0]
 80215ec:	1aba      	subs	r2, r7, r2
 80215ee:	4f18      	ldr	r7, [pc, #96]	; (8021650 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80215f0:	603a      	str	r2, [r7, #0]
 80215f2:	4a18      	ldr	r2, [pc, #96]	; (8021654 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80215f4:	469c      	mov	ip, r3
 80215f6:	8013      	strh	r3, [r2, #0]
 80215f8:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80215fc:	428b      	cmp	r3, r1
 80215fe:	d10d      	bne.n	802161c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8021600:	882d      	ldrh	r5, [r5, #0]
 8021602:	6830      	ldr	r0, [r6, #0]
 8021604:	2300      	movs	r3, #0
 8021606:	240e      	movs	r4, #14
 8021608:	429d      	cmp	r5, r3
 802160a:	d90f      	bls.n	802162c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 802160c:	fb04 0203 	mla	r2, r4, r3, r0
 8021610:	3301      	adds	r3, #1
 8021612:	7b11      	ldrb	r1, [r2, #12]
 8021614:	f36f 1145 	bfc	r1, #5, #1
 8021618:	7311      	strb	r1, [r2, #12]
 802161a:	e7f5      	b.n	8021608 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 802161c:	6822      	ldr	r2, [r4, #0]
 802161e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8021622:	6802      	ldr	r2, [r0, #0]
 8021624:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8021628:	3301      	adds	r3, #1
 802162a:	e7e7      	b.n	80215fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 802162c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802162e:	bf00      	nop
 8021630:	2000f1d0 	.word	0x2000f1d0
 8021634:	2000f1ec 	.word	0x2000f1ec
 8021638:	2000f1f0 	.word	0x2000f1f0
 802163c:	2000f1e4 	.word	0x2000f1e4
 8021640:	2000f1d4 	.word	0x2000f1d4
 8021644:	2000f1dc 	.word	0x2000f1dc
 8021648:	2000f1ee 	.word	0x2000f1ee
 802164c:	2000f1d8 	.word	0x2000f1d8
 8021650:	2000f1e8 	.word	0x2000f1e8
 8021654:	2000f1e0 	.word	0x2000f1e0

08021658 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8021658:	4b06      	ldr	r3, [pc, #24]	; (8021674 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 802165a:	681b      	ldr	r3, [r3, #0]
 802165c:	b943      	cbnz	r3, 8021670 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 802165e:	b139      	cbz	r1, 8021670 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8021660:	4b05      	ldr	r3, [pc, #20]	; (8021678 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8021662:	801a      	strh	r2, [r3, #0]
 8021664:	4b05      	ldr	r3, [pc, #20]	; (802167c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8021666:	6019      	str	r1, [r3, #0]
 8021668:	4b05      	ldr	r3, [pc, #20]	; (8021680 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 802166a:	6018      	str	r0, [r3, #0]
 802166c:	f7ff bf96 	b.w	802159c <_ZN8touchgfx6Bitmap10clearCacheEv>
 8021670:	4770      	bx	lr
 8021672:	bf00      	nop
 8021674:	2000f1dc 	.word	0x2000f1dc
 8021678:	2000f1f0 	.word	0x2000f1f0
 802167c:	2000f1d8 	.word	0x2000f1d8
 8021680:	2000f1d0 	.word	0x2000f1d0

08021684 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8021684:	b470      	push	{r4, r5, r6}
 8021686:	4c07      	ldr	r4, [pc, #28]	; (80216a4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8021688:	6826      	ldr	r6, [r4, #0]
 802168a:	4605      	mov	r5, r0
 802168c:	4610      	mov	r0, r2
 802168e:	9a03      	ldr	r2, [sp, #12]
 8021690:	b936      	cbnz	r6, 80216a0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8021692:	6025      	str	r5, [r4, #0]
 8021694:	4c04      	ldr	r4, [pc, #16]	; (80216a8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8021696:	8021      	strh	r1, [r4, #0]
 8021698:	bc70      	pop	{r4, r5, r6}
 802169a:	4619      	mov	r1, r3
 802169c:	f7ff bfdc 	b.w	8021658 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80216a0:	bc70      	pop	{r4, r5, r6}
 80216a2:	4770      	bx	lr
 80216a4:	2000f1f4 	.word	0x2000f1f4
 80216a8:	2000f1ec 	.word	0x2000f1ec

080216ac <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80216ac:	4a12      	ldr	r2, [pc, #72]	; (80216f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80216ae:	8803      	ldrh	r3, [r0, #0]
 80216b0:	8812      	ldrh	r2, [r2, #0]
 80216b2:	4293      	cmp	r3, r2
 80216b4:	d207      	bcs.n	80216c6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80216b6:	4a11      	ldr	r2, [pc, #68]	; (80216fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80216b8:	6812      	ldr	r2, [r2, #0]
 80216ba:	2114      	movs	r1, #20
 80216bc:	fb01 2303 	mla	r3, r1, r3, r2
 80216c0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80216c4:	4770      	bx	lr
 80216c6:	490e      	ldr	r1, [pc, #56]	; (8021700 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80216c8:	8809      	ldrh	r1, [r1, #0]
 80216ca:	4411      	add	r1, r2
 80216cc:	428b      	cmp	r3, r1
 80216ce:	da04      	bge.n	80216da <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 80216d0:	1a9b      	subs	r3, r3, r2
 80216d2:	4a0c      	ldr	r2, [pc, #48]	; (8021704 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80216d4:	210e      	movs	r1, #14
 80216d6:	6812      	ldr	r2, [r2, #0]
 80216d8:	e7f0      	b.n	80216bc <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 80216da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80216de:	4293      	cmp	r3, r2
 80216e0:	d108      	bne.n	80216f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 80216e2:	4b09      	ldr	r3, [pc, #36]	; (8021708 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80216e4:	781b      	ldrb	r3, [r3, #0]
 80216e6:	b91b      	cbnz	r3, 80216f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 80216e8:	4b08      	ldr	r3, [pc, #32]	; (802170c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80216ea:	f9b3 0000 	ldrsh.w	r0, [r3]
 80216ee:	4770      	bx	lr
 80216f0:	4b07      	ldr	r3, [pc, #28]	; (8021710 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80216f2:	e7fa      	b.n	80216ea <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 80216f4:	2000      	movs	r0, #0
 80216f6:	4770      	bx	lr
 80216f8:	2000f1ec 	.word	0x2000f1ec
 80216fc:	2000f1f4 	.word	0x2000f1f4
 8021700:	2000f1f0 	.word	0x2000f1f0
 8021704:	2000f1d4 	.word	0x2000f1d4
 8021708:	2000f15a 	.word	0x2000f15a
 802170c:	2000f15c 	.word	0x2000f15c
 8021710:	2000f15e 	.word	0x2000f15e

08021714 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8021714:	4a12      	ldr	r2, [pc, #72]	; (8021760 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8021716:	8803      	ldrh	r3, [r0, #0]
 8021718:	8812      	ldrh	r2, [r2, #0]
 802171a:	4293      	cmp	r3, r2
 802171c:	d207      	bcs.n	802172e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 802171e:	4a11      	ldr	r2, [pc, #68]	; (8021764 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8021720:	6812      	ldr	r2, [r2, #0]
 8021722:	2114      	movs	r1, #20
 8021724:	fb01 2303 	mla	r3, r1, r3, r2
 8021728:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 802172c:	4770      	bx	lr
 802172e:	490e      	ldr	r1, [pc, #56]	; (8021768 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8021730:	8809      	ldrh	r1, [r1, #0]
 8021732:	4411      	add	r1, r2
 8021734:	428b      	cmp	r3, r1
 8021736:	da04      	bge.n	8021742 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8021738:	1a9b      	subs	r3, r3, r2
 802173a:	4a0c      	ldr	r2, [pc, #48]	; (802176c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 802173c:	210e      	movs	r1, #14
 802173e:	6812      	ldr	r2, [r2, #0]
 8021740:	e7f0      	b.n	8021724 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8021742:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8021746:	4293      	cmp	r3, r2
 8021748:	d108      	bne.n	802175c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 802174a:	4b09      	ldr	r3, [pc, #36]	; (8021770 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 802174c:	781b      	ldrb	r3, [r3, #0]
 802174e:	b91b      	cbnz	r3, 8021758 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8021750:	4b08      	ldr	r3, [pc, #32]	; (8021774 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8021752:	f9b3 0000 	ldrsh.w	r0, [r3]
 8021756:	4770      	bx	lr
 8021758:	4b07      	ldr	r3, [pc, #28]	; (8021778 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 802175a:	e7fa      	b.n	8021752 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 802175c:	2000      	movs	r0, #0
 802175e:	4770      	bx	lr
 8021760:	2000f1ec 	.word	0x2000f1ec
 8021764:	2000f1f4 	.word	0x2000f1f4
 8021768:	2000f1f0 	.word	0x2000f1f0
 802176c:	2000f1d4 	.word	0x2000f1d4
 8021770:	2000f15a 	.word	0x2000f15a
 8021774:	2000f15e 	.word	0x2000f15e
 8021778:	2000f15c 	.word	0x2000f15c

0802177c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 802177c:	b510      	push	{r4, lr}
 802177e:	4a1f      	ldr	r2, [pc, #124]	; (80217fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8021780:	880b      	ldrh	r3, [r1, #0]
 8021782:	8812      	ldrh	r2, [r2, #0]
 8021784:	4293      	cmp	r3, r2
 8021786:	d213      	bcs.n	80217b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8021788:	4a1d      	ldr	r2, [pc, #116]	; (8021800 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 802178a:	6812      	ldr	r2, [r2, #0]
 802178c:	2114      	movs	r1, #20
 802178e:	fb01 2303 	mla	r3, r1, r3, r2
 8021792:	8a1a      	ldrh	r2, [r3, #16]
 8021794:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8021798:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 802179c:	8a5b      	ldrh	r3, [r3, #18]
 802179e:	8004      	strh	r4, [r0, #0]
 80217a0:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80217a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80217a8:	8041      	strh	r1, [r0, #2]
 80217aa:	8082      	strh	r2, [r0, #4]
 80217ac:	80c3      	strh	r3, [r0, #6]
 80217ae:	e00e      	b.n	80217ce <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80217b0:	4914      	ldr	r1, [pc, #80]	; (8021804 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 80217b2:	8809      	ldrh	r1, [r1, #0]
 80217b4:	4411      	add	r1, r2
 80217b6:	428b      	cmp	r3, r1
 80217b8:	da0a      	bge.n	80217d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 80217ba:	1a9b      	subs	r3, r3, r2
 80217bc:	4a12      	ldr	r2, [pc, #72]	; (8021808 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80217be:	6812      	ldr	r2, [r2, #0]
 80217c0:	210e      	movs	r1, #14
 80217c2:	fb01 2303 	mla	r3, r1, r3, r2
 80217c6:	681a      	ldr	r2, [r3, #0]
 80217c8:	6002      	str	r2, [r0, #0]
 80217ca:	685a      	ldr	r2, [r3, #4]
 80217cc:	6042      	str	r2, [r0, #4]
 80217ce:	bd10      	pop	{r4, pc}
 80217d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80217d4:	4293      	cmp	r3, r2
 80217d6:	d10b      	bne.n	80217f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 80217d8:	4b0c      	ldr	r3, [pc, #48]	; (802180c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80217da:	f9b3 1000 	ldrsh.w	r1, [r3]
 80217de:	4b0c      	ldr	r3, [pc, #48]	; (8021810 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80217e0:	8081      	strh	r1, [r0, #4]
 80217e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80217e6:	80c2      	strh	r2, [r0, #6]
 80217e8:	2300      	movs	r3, #0
 80217ea:	8003      	strh	r3, [r0, #0]
 80217ec:	8043      	strh	r3, [r0, #2]
 80217ee:	e7ee      	b.n	80217ce <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80217f0:	2300      	movs	r3, #0
 80217f2:	8003      	strh	r3, [r0, #0]
 80217f4:	8043      	strh	r3, [r0, #2]
 80217f6:	8083      	strh	r3, [r0, #4]
 80217f8:	e7d8      	b.n	80217ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 80217fa:	bf00      	nop
 80217fc:	2000f1ec 	.word	0x2000f1ec
 8021800:	2000f1f4 	.word	0x2000f1f4
 8021804:	2000f1f0 	.word	0x2000f1f0
 8021808:	2000f1d4 	.word	0x2000f1d4
 802180c:	2000f156 	.word	0x2000f156
 8021810:	2000f158 	.word	0x2000f158

08021814 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8021814:	4a17      	ldr	r2, [pc, #92]	; (8021874 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8021816:	8803      	ldrh	r3, [r0, #0]
 8021818:	8812      	ldrh	r2, [r2, #0]
 802181a:	4293      	cmp	r3, r2
 802181c:	d213      	bcs.n	8021846 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 802181e:	4a16      	ldr	r2, [pc, #88]	; (8021878 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8021820:	6812      	ldr	r2, [r2, #0]
 8021822:	2114      	movs	r1, #20
 8021824:	fb01 2303 	mla	r3, r1, r3, r2
 8021828:	8a1a      	ldrh	r2, [r3, #16]
 802182a:	8919      	ldrh	r1, [r3, #8]
 802182c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8021830:	428a      	cmp	r2, r1
 8021832:	db1d      	blt.n	8021870 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8021834:	8a58      	ldrh	r0, [r3, #18]
 8021836:	f3c0 000c 	ubfx	r0, r0, #0, #13
 802183a:	895b      	ldrh	r3, [r3, #10]
 802183c:	4298      	cmp	r0, r3
 802183e:	bfac      	ite	ge
 8021840:	2000      	movge	r0, #0
 8021842:	2001      	movlt	r0, #1
 8021844:	4770      	bx	lr
 8021846:	490d      	ldr	r1, [pc, #52]	; (802187c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8021848:	8809      	ldrh	r1, [r1, #0]
 802184a:	4411      	add	r1, r2
 802184c:	428b      	cmp	r3, r1
 802184e:	da0d      	bge.n	802186c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8021850:	1a9b      	subs	r3, r3, r2
 8021852:	4a0b      	ldr	r2, [pc, #44]	; (8021880 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8021854:	6812      	ldr	r2, [r2, #0]
 8021856:	210e      	movs	r1, #14
 8021858:	fb01 2303 	mla	r3, r1, r3, r2
 802185c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8021860:	891a      	ldrh	r2, [r3, #8]
 8021862:	4291      	cmp	r1, r2
 8021864:	db04      	blt.n	8021870 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8021866:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 802186a:	e7e6      	b.n	802183a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 802186c:	2000      	movs	r0, #0
 802186e:	4770      	bx	lr
 8021870:	2001      	movs	r0, #1
 8021872:	4770      	bx	lr
 8021874:	2000f1ec 	.word	0x2000f1ec
 8021878:	2000f1f4 	.word	0x2000f1f4
 802187c:	2000f1f0 	.word	0x2000f1f0
 8021880:	2000f1d4 	.word	0x2000f1d4

08021884 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8021884:	4a12      	ldr	r2, [pc, #72]	; (80218d0 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8021886:	8803      	ldrh	r3, [r0, #0]
 8021888:	8811      	ldrh	r1, [r2, #0]
 802188a:	428b      	cmp	r3, r1
 802188c:	d20b      	bcs.n	80218a6 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 802188e:	4a11      	ldr	r2, [pc, #68]	; (80218d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8021890:	6812      	ldr	r2, [r2, #0]
 8021892:	b112      	cbz	r2, 802189a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8021894:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8021898:	b9c0      	cbnz	r0, 80218cc <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 802189a:	4a0f      	ldr	r2, [pc, #60]	; (80218d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 802189c:	6811      	ldr	r1, [r2, #0]
 802189e:	2214      	movs	r2, #20
 80218a0:	4353      	muls	r3, r2
 80218a2:	58c8      	ldr	r0, [r1, r3]
 80218a4:	4770      	bx	lr
 80218a6:	4a0d      	ldr	r2, [pc, #52]	; (80218dc <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80218a8:	8812      	ldrh	r2, [r2, #0]
 80218aa:	440a      	add	r2, r1
 80218ac:	4293      	cmp	r3, r2
 80218ae:	da04      	bge.n	80218ba <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80218b0:	4a08      	ldr	r2, [pc, #32]	; (80218d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80218b2:	6812      	ldr	r2, [r2, #0]
 80218b4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80218b8:	4770      	bx	lr
 80218ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80218be:	4293      	cmp	r3, r2
 80218c0:	d103      	bne.n	80218ca <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80218c2:	4b07      	ldr	r3, [pc, #28]	; (80218e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80218c4:	681b      	ldr	r3, [r3, #0]
 80218c6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80218c8:	4770      	bx	lr
 80218ca:	2000      	movs	r0, #0
 80218cc:	4770      	bx	lr
 80218ce:	bf00      	nop
 80218d0:	2000f1ec 	.word	0x2000f1ec
 80218d4:	2000f1d0 	.word	0x2000f1d0
 80218d8:	2000f1f4 	.word	0x2000f1f4
 80218dc:	2000f1f0 	.word	0x2000f1f0
 80218e0:	2000f164 	.word	0x2000f164

080218e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80218e4:	4b24      	ldr	r3, [pc, #144]	; (8021978 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80218e6:	8802      	ldrh	r2, [r0, #0]
 80218e8:	8818      	ldrh	r0, [r3, #0]
 80218ea:	4282      	cmp	r2, r0
 80218ec:	d221      	bcs.n	8021932 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80218ee:	4b23      	ldr	r3, [pc, #140]	; (802197c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80218f0:	6819      	ldr	r1, [r3, #0]
 80218f2:	2314      	movs	r3, #20
 80218f4:	fb03 1302 	mla	r3, r3, r2, r1
 80218f8:	6858      	ldr	r0, [r3, #4]
 80218fa:	2800      	cmp	r0, #0
 80218fc:	d03a      	beq.n	8021974 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80218fe:	4920      	ldr	r1, [pc, #128]	; (8021980 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8021900:	6809      	ldr	r1, [r1, #0]
 8021902:	2900      	cmp	r1, #0
 8021904:	d036      	beq.n	8021974 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8021906:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 802190a:	2900      	cmp	r1, #0
 802190c:	d032      	beq.n	8021974 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 802190e:	891a      	ldrh	r2, [r3, #8]
 8021910:	8958      	ldrh	r0, [r3, #10]
 8021912:	4350      	muls	r0, r2
 8021914:	7c5a      	ldrb	r2, [r3, #17]
 8021916:	7cdb      	ldrb	r3, [r3, #19]
 8021918:	0952      	lsrs	r2, r2, #5
 802191a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 802191e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8021922:	2b0b      	cmp	r3, #11
 8021924:	bf18      	it	ne
 8021926:	0040      	lslne	r0, r0, #1
 8021928:	3003      	adds	r0, #3
 802192a:	f020 0003 	bic.w	r0, r0, #3
 802192e:	4408      	add	r0, r1
 8021930:	4770      	bx	lr
 8021932:	4b14      	ldr	r3, [pc, #80]	; (8021984 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8021934:	881b      	ldrh	r3, [r3, #0]
 8021936:	4403      	add	r3, r0
 8021938:	429a      	cmp	r2, r3
 802193a:	da1a      	bge.n	8021972 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 802193c:	4b12      	ldr	r3, [pc, #72]	; (8021988 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 802193e:	681b      	ldr	r3, [r3, #0]
 8021940:	1a10      	subs	r0, r2, r0
 8021942:	210e      	movs	r1, #14
 8021944:	fb01 3000 	mla	r0, r1, r0, r3
 8021948:	7b03      	ldrb	r3, [r0, #12]
 802194a:	f003 031f 	and.w	r3, r3, #31
 802194e:	2b0b      	cmp	r3, #11
 8021950:	d10b      	bne.n	802196a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8021952:	8903      	ldrh	r3, [r0, #8]
 8021954:	8940      	ldrh	r0, [r0, #10]
 8021956:	4358      	muls	r0, r3
 8021958:	4b09      	ldr	r3, [pc, #36]	; (8021980 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 802195a:	6819      	ldr	r1, [r3, #0]
 802195c:	3003      	adds	r0, #3
 802195e:	f020 0303 	bic.w	r3, r0, #3
 8021962:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8021966:	4418      	add	r0, r3
 8021968:	4770      	bx	lr
 802196a:	2b0d      	cmp	r3, #13
 802196c:	d101      	bne.n	8021972 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 802196e:	300d      	adds	r0, #13
 8021970:	4770      	bx	lr
 8021972:	2000      	movs	r0, #0
 8021974:	4770      	bx	lr
 8021976:	bf00      	nop
 8021978:	2000f1ec 	.word	0x2000f1ec
 802197c:	2000f1f4 	.word	0x2000f1f4
 8021980:	2000f1d0 	.word	0x2000f1d0
 8021984:	2000f1f0 	.word	0x2000f1f0
 8021988:	2000f1d4 	.word	0x2000f1d4

0802198c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 802198c:	b510      	push	{r4, lr}
 802198e:	4a17      	ldr	r2, [pc, #92]	; (80219ec <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8021990:	8803      	ldrh	r3, [r0, #0]
 8021992:	8812      	ldrh	r2, [r2, #0]
 8021994:	4293      	cmp	r3, r2
 8021996:	d20c      	bcs.n	80219b2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8021998:	4a15      	ldr	r2, [pc, #84]	; (80219f0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 802199a:	6812      	ldr	r2, [r2, #0]
 802199c:	2114      	movs	r1, #20
 802199e:	fb01 2303 	mla	r3, r1, r3, r2
 80219a2:	7c58      	ldrb	r0, [r3, #17]
 80219a4:	0942      	lsrs	r2, r0, #5
 80219a6:	7cd8      	ldrb	r0, [r3, #19]
 80219a8:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80219ac:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80219b0:	bd10      	pop	{r4, pc}
 80219b2:	4910      	ldr	r1, [pc, #64]	; (80219f4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80219b4:	8809      	ldrh	r1, [r1, #0]
 80219b6:	4411      	add	r1, r2
 80219b8:	428b      	cmp	r3, r1
 80219ba:	da09      	bge.n	80219d0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 80219bc:	1a9b      	subs	r3, r3, r2
 80219be:	4a0e      	ldr	r2, [pc, #56]	; (80219f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 80219c0:	6812      	ldr	r2, [r2, #0]
 80219c2:	210e      	movs	r1, #14
 80219c4:	fb01 2303 	mla	r3, r1, r3, r2
 80219c8:	7b18      	ldrb	r0, [r3, #12]
 80219ca:	f000 001f 	and.w	r0, r0, #31
 80219ce:	e7ef      	b.n	80219b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80219d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80219d4:	4293      	cmp	r3, r2
 80219d6:	d106      	bne.n	80219e6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 80219d8:	f7ee fb64 	bl	80100a4 <_ZN8touchgfx3HAL3lcdEv>
 80219dc:	6803      	ldr	r3, [r0, #0]
 80219de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80219e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80219e4:	4718      	bx	r3
 80219e6:	2000      	movs	r0, #0
 80219e8:	e7e2      	b.n	80219b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80219ea:	bf00      	nop
 80219ec:	2000f1ec 	.word	0x2000f1ec
 80219f0:	2000f1f4 	.word	0x2000f1f4
 80219f4:	2000f1f0 	.word	0x2000f1f0
 80219f8:	2000f1d4 	.word	0x2000f1d4

080219fc <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 80219fc:	2010      	movs	r0, #16
 80219fe:	4770      	bx	lr

08021a00 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8021a00:	2000      	movs	r0, #0
 8021a02:	4770      	bx	lr

08021a04 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8021a04:	4b02      	ldr	r3, [pc, #8]	; (8021a10 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8021a06:	8818      	ldrh	r0, [r3, #0]
 8021a08:	0040      	lsls	r0, r0, #1
 8021a0a:	b280      	uxth	r0, r0
 8021a0c:	4770      	bx	lr
 8021a0e:	bf00      	nop
 8021a10:	2000f15c 	.word	0x2000f15c

08021a14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8021a14:	2bff      	cmp	r3, #255	; 0xff
 8021a16:	d050      	beq.n	8021aba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8021a18:	2a0b      	cmp	r2, #11
 8021a1a:	d04a      	beq.n	8021ab2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8021a1c:	d80e      	bhi.n	8021a3c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8021a1e:	2a03      	cmp	r2, #3
 8021a20:	d03f      	beq.n	8021aa2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8021a22:	d804      	bhi.n	8021a2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8021a24:	2a01      	cmp	r2, #1
 8021a26:	d03e      	beq.n	8021aa6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8021a28:	d93f      	bls.n	8021aaa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8021a2a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8021a2c:	4770      	bx	lr
 8021a2e:	2a09      	cmp	r2, #9
 8021a30:	d03f      	beq.n	8021ab2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8021a32:	d83c      	bhi.n	8021aae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8021a34:	2a08      	cmp	r2, #8
 8021a36:	d03a      	beq.n	8021aae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8021a38:	2000      	movs	r0, #0
 8021a3a:	4770      	bx	lr
 8021a3c:	2a2f      	cmp	r2, #47	; 0x2f
 8021a3e:	d024      	beq.n	8021a8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8021a40:	d80d      	bhi.n	8021a5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8021a42:	2a2d      	cmp	r2, #45	; 0x2d
 8021a44:	d014      	beq.n	8021a70 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8021a46:	d826      	bhi.n	8021a96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8021a48:	2a2c      	cmp	r2, #44	; 0x2c
 8021a4a:	d1f5      	bne.n	8021a38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021a4c:	684b      	ldr	r3, [r1, #4]
 8021a4e:	781b      	ldrb	r3, [r3, #0]
 8021a50:	2b01      	cmp	r3, #1
 8021a52:	d018      	beq.n	8021a86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8021a54:	d323      	bcc.n	8021a9e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8021a56:	2b02      	cmp	r3, #2
 8021a58:	d1ee      	bne.n	8021a38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021a5a:	6880      	ldr	r0, [r0, #8]
 8021a5c:	4770      	bx	lr
 8021a5e:	2a31      	cmp	r2, #49	; 0x31
 8021a60:	d004      	beq.n	8021a6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8021a62:	d328      	bcc.n	8021ab6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8021a64:	2a32      	cmp	r2, #50	; 0x32
 8021a66:	d026      	beq.n	8021ab6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8021a68:	2a33      	cmp	r2, #51	; 0x33
 8021a6a:	d1e5      	bne.n	8021a38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021a6c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8021a6e:	4770      	bx	lr
 8021a70:	684b      	ldr	r3, [r1, #4]
 8021a72:	781b      	ldrb	r3, [r3, #0]
 8021a74:	2b01      	cmp	r3, #1
 8021a76:	d004      	beq.n	8021a82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8021a78:	d30b      	bcc.n	8021a92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8021a7a:	2b02      	cmp	r3, #2
 8021a7c:	d1dc      	bne.n	8021a38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021a7e:	6900      	ldr	r0, [r0, #16]
 8021a80:	4770      	bx	lr
 8021a82:	6a00      	ldr	r0, [r0, #32]
 8021a84:	4770      	bx	lr
 8021a86:	6980      	ldr	r0, [r0, #24]
 8021a88:	4770      	bx	lr
 8021a8a:	684b      	ldr	r3, [r1, #4]
 8021a8c:	781b      	ldrb	r3, [r3, #0]
 8021a8e:	2b00      	cmp	r3, #0
 8021a90:	d1d2      	bne.n	8021a38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021a92:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8021a94:	4770      	bx	lr
 8021a96:	684b      	ldr	r3, [r1, #4]
 8021a98:	781b      	ldrb	r3, [r3, #0]
 8021a9a:	2b00      	cmp	r3, #0
 8021a9c:	d1cc      	bne.n	8021a38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021a9e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8021aa0:	4770      	bx	lr
 8021aa2:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8021aa4:	4770      	bx	lr
 8021aa6:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8021aa8:	4770      	bx	lr
 8021aaa:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8021aac:	4770      	bx	lr
 8021aae:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8021ab0:	4770      	bx	lr
 8021ab2:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8021ab4:	4770      	bx	lr
 8021ab6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8021ab8:	4770      	bx	lr
 8021aba:	2a0b      	cmp	r2, #11
 8021abc:	d049      	beq.n	8021b52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8021abe:	d80e      	bhi.n	8021ade <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8021ac0:	2a03      	cmp	r2, #3
 8021ac2:	d040      	beq.n	8021b46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8021ac4:	d804      	bhi.n	8021ad0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8021ac6:	2a01      	cmp	r2, #1
 8021ac8:	d03f      	beq.n	8021b4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8021aca:	d940      	bls.n	8021b4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8021acc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8021ace:	4770      	bx	lr
 8021ad0:	2a09      	cmp	r2, #9
 8021ad2:	d03e      	beq.n	8021b52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8021ad4:	d801      	bhi.n	8021ada <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8021ad6:	2a08      	cmp	r2, #8
 8021ad8:	d1ae      	bne.n	8021a38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021ada:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8021adc:	4770      	bx	lr
 8021ade:	2a2f      	cmp	r2, #47	; 0x2f
 8021ae0:	d024      	beq.n	8021b2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8021ae2:	d80d      	bhi.n	8021b00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8021ae4:	2a2d      	cmp	r2, #45	; 0x2d
 8021ae6:	d014      	beq.n	8021b12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8021ae8:	d826      	bhi.n	8021b38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8021aea:	2a2c      	cmp	r2, #44	; 0x2c
 8021aec:	d1a4      	bne.n	8021a38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021aee:	684b      	ldr	r3, [r1, #4]
 8021af0:	781b      	ldrb	r3, [r3, #0]
 8021af2:	2b01      	cmp	r3, #1
 8021af4:	d018      	beq.n	8021b28 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8021af6:	d324      	bcc.n	8021b42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8021af8:	2b02      	cmp	r3, #2
 8021afa:	d19d      	bne.n	8021a38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021afc:	68c0      	ldr	r0, [r0, #12]
 8021afe:	4770      	bx	lr
 8021b00:	2a31      	cmp	r2, #49	; 0x31
 8021b02:	d004      	beq.n	8021b0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8021b04:	d327      	bcc.n	8021b56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8021b06:	2a32      	cmp	r2, #50	; 0x32
 8021b08:	d025      	beq.n	8021b56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8021b0a:	2a33      	cmp	r2, #51	; 0x33
 8021b0c:	d194      	bne.n	8021a38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021b0e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8021b10:	4770      	bx	lr
 8021b12:	684b      	ldr	r3, [r1, #4]
 8021b14:	781b      	ldrb	r3, [r3, #0]
 8021b16:	2b01      	cmp	r3, #1
 8021b18:	d004      	beq.n	8021b24 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8021b1a:	d30b      	bcc.n	8021b34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8021b1c:	2b02      	cmp	r3, #2
 8021b1e:	d18b      	bne.n	8021a38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021b20:	6940      	ldr	r0, [r0, #20]
 8021b22:	4770      	bx	lr
 8021b24:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8021b26:	4770      	bx	lr
 8021b28:	69c0      	ldr	r0, [r0, #28]
 8021b2a:	4770      	bx	lr
 8021b2c:	684b      	ldr	r3, [r1, #4]
 8021b2e:	781b      	ldrb	r3, [r3, #0]
 8021b30:	2b00      	cmp	r3, #0
 8021b32:	d181      	bne.n	8021a38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021b34:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8021b36:	4770      	bx	lr
 8021b38:	684b      	ldr	r3, [r1, #4]
 8021b3a:	781b      	ldrb	r3, [r3, #0]
 8021b3c:	2b00      	cmp	r3, #0
 8021b3e:	f47f af7b 	bne.w	8021a38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8021b42:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8021b44:	4770      	bx	lr
 8021b46:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8021b48:	4770      	bx	lr
 8021b4a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8021b4c:	4770      	bx	lr
 8021b4e:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8021b50:	4770      	bx	lr
 8021b52:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8021b54:	4770      	bx	lr
 8021b56:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8021b58:	4770      	bx	lr

08021b5a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021b5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b5e:	b087      	sub	sp, #28
 8021b60:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021b62:	9205      	str	r2, [sp, #20]
 8021b64:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8021b68:	9202      	str	r2, [sp, #8]
 8021b6a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8021b6e:	9101      	str	r1, [sp, #4]
 8021b70:	6841      	ldr	r1, [r0, #4]
 8021b72:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8021b76:	fb01 2404 	mla	r4, r1, r4, r2
 8021b7a:	6802      	ldr	r2, [r0, #0]
 8021b7c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021b80:	f8de 2000 	ldr.w	r2, [lr]
 8021b84:	9203      	str	r2, [sp, #12]
 8021b86:	f8de 2004 	ldr.w	r2, [lr, #4]
 8021b8a:	3204      	adds	r2, #4
 8021b8c:	9204      	str	r2, [sp, #16]
 8021b8e:	9a02      	ldr	r2, [sp, #8]
 8021b90:	43d6      	mvns	r6, r2
 8021b92:	b2f6      	uxtb	r6, r6
 8021b94:	9a01      	ldr	r2, [sp, #4]
 8021b96:	2a00      	cmp	r2, #0
 8021b98:	dc03      	bgt.n	8021ba2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021b9a:	9a05      	ldr	r2, [sp, #20]
 8021b9c:	2a00      	cmp	r2, #0
 8021b9e:	f340 8129 	ble.w	8021df4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8021ba2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021ba4:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8021ba8:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8021bac:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021bb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021bb2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021bb6:	2b00      	cmp	r3, #0
 8021bb8:	dd0e      	ble.n	8021bd8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8021bba:	1408      	asrs	r0, r1, #16
 8021bbc:	d405      	bmi.n	8021bca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021bbe:	4560      	cmp	r0, ip
 8021bc0:	da03      	bge.n	8021bca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021bc2:	1410      	asrs	r0, r2, #16
 8021bc4:	d401      	bmi.n	8021bca <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021bc6:	42b8      	cmp	r0, r7
 8021bc8:	db07      	blt.n	8021bda <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8021bca:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021bcc:	4401      	add	r1, r0
 8021bce:	9814      	ldr	r0, [sp, #80]	; 0x50
 8021bd0:	3b01      	subs	r3, #1
 8021bd2:	4402      	add	r2, r0
 8021bd4:	3402      	adds	r4, #2
 8021bd6:	e7ee      	b.n	8021bb6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8021bd8:	d071      	beq.n	8021cbe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8021bda:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021bdc:	1e58      	subs	r0, r3, #1
 8021bde:	fb05 1500 	mla	r5, r5, r0, r1
 8021be2:	142d      	asrs	r5, r5, #16
 8021be4:	d45f      	bmi.n	8021ca6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8021be6:	4565      	cmp	r5, ip
 8021be8:	da5d      	bge.n	8021ca6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8021bea:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021bec:	fb05 2000 	mla	r0, r5, r0, r2
 8021bf0:	1400      	asrs	r0, r0, #16
 8021bf2:	d458      	bmi.n	8021ca6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8021bf4:	42b8      	cmp	r0, r7
 8021bf6:	da56      	bge.n	8021ca6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8021bf8:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8021bfc:	4699      	mov	r9, r3
 8021bfe:	46a2      	mov	sl, r4
 8021c00:	f1b9 0f00 	cmp.w	r9, #0
 8021c04:	dd57      	ble.n	8021cb6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8021c06:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8021c0a:	9803      	ldr	r0, [sp, #12]
 8021c0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8021c10:	140d      	asrs	r5, r1, #16
 8021c12:	fb07 000c 	mla	r0, r7, ip, r0
 8021c16:	f109 39ff 	add.w	r9, r9, #4294967295
 8021c1a:	5d40      	ldrb	r0, [r0, r5]
 8021c1c:	9d04      	ldr	r5, [sp, #16]
 8021c1e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8021c22:	f8ba 5000 	ldrh.w	r5, [sl]
 8021c26:	122f      	asrs	r7, r5, #8
 8021c28:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8021c2c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021c30:	fb17 f706 	smulbb	r7, r7, r6
 8021c34:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8021c38:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021c3c:	00ed      	lsls	r5, r5, #3
 8021c3e:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8021c42:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8021c46:	10c7      	asrs	r7, r0, #3
 8021c48:	b2ed      	uxtb	r5, r5
 8021c4a:	00c0      	lsls	r0, r0, #3
 8021c4c:	fb18 f806 	smulbb	r8, r8, r6
 8021c50:	fb15 f506 	smulbb	r5, r5, r6
 8021c54:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021c58:	b2c0      	uxtb	r0, r0
 8021c5a:	fa1f fc8c 	uxth.w	ip, ip
 8021c5e:	fb07 870b 	mla	r7, r7, fp, r8
 8021c62:	fb00 500b 	mla	r0, r0, fp, r5
 8021c66:	b280      	uxth	r0, r0
 8021c68:	b2bf      	uxth	r7, r7
 8021c6a:	f10c 0501 	add.w	r5, ip, #1
 8021c6e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8021c72:	f107 0801 	add.w	r8, r7, #1
 8021c76:	1c45      	adds	r5, r0, #1
 8021c78:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8021c7c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8021c80:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021c82:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021c86:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021c8a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8021c8e:	ea45 0c0c 	orr.w	ip, r5, ip
 8021c92:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021c96:	4401      	add	r1, r0
 8021c98:	9814      	ldr	r0, [sp, #80]	; 0x50
 8021c9a:	ea4c 0c08 	orr.w	ip, ip, r8
 8021c9e:	f82a cb02 	strh.w	ip, [sl], #2
 8021ca2:	4402      	add	r2, r0
 8021ca4:	e7ac      	b.n	8021c00 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8021ca6:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8021caa:	f04f 0800 	mov.w	r8, #0
 8021cae:	eb03 0008 	add.w	r0, r3, r8
 8021cb2:	2800      	cmp	r0, #0
 8021cb4:	dc41      	bgt.n	8021d3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8021cb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021cba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021cbe:	9b01      	ldr	r3, [sp, #4]
 8021cc0:	2b00      	cmp	r3, #0
 8021cc2:	f340 8097 	ble.w	8021df4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8021cc6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021cca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021cce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021cd2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021cd4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021cd8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021cdc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021ce0:	eef0 6a62 	vmov.f32	s13, s5
 8021ce4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021ce8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021cec:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021cf0:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8021cf4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021cf8:	eef0 6a43 	vmov.f32	s13, s6
 8021cfc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021d00:	ee12 2a90 	vmov	r2, s5
 8021d04:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021d08:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d0c:	ee13 2a10 	vmov	r2, s6
 8021d10:	9313      	str	r3, [sp, #76]	; 0x4c
 8021d12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021d14:	fb92 f3f3 	sdiv	r3, r2, r3
 8021d18:	9314      	str	r3, [sp, #80]	; 0x50
 8021d1a:	9b01      	ldr	r3, [sp, #4]
 8021d1c:	9a05      	ldr	r2, [sp, #20]
 8021d1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021d22:	3b01      	subs	r3, #1
 8021d24:	9301      	str	r3, [sp, #4]
 8021d26:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8021d2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021d2c:	eeb0 3a67 	vmov.f32	s6, s15
 8021d30:	bf08      	it	eq
 8021d32:	4613      	moveq	r3, r2
 8021d34:	eef0 2a47 	vmov.f32	s5, s14
 8021d38:	e72c      	b.n	8021b94 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021d3a:	140f      	asrs	r7, r1, #16
 8021d3c:	d453      	bmi.n	8021de6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8021d3e:	f8de 5008 	ldr.w	r5, [lr, #8]
 8021d42:	42bd      	cmp	r5, r7
 8021d44:	dd4f      	ble.n	8021de6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8021d46:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8021d4a:	d44c      	bmi.n	8021de6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8021d4c:	f8de 000c 	ldr.w	r0, [lr, #12]
 8021d50:	4560      	cmp	r0, ip
 8021d52:	dd48      	ble.n	8021de6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8021d54:	9803      	ldr	r0, [sp, #12]
 8021d56:	b22d      	sxth	r5, r5
 8021d58:	fb0c 0505 	mla	r5, ip, r5, r0
 8021d5c:	5de8      	ldrb	r0, [r5, r7]
 8021d5e:	9d04      	ldr	r5, [sp, #16]
 8021d60:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8021d64:	f06f 0501 	mvn.w	r5, #1
 8021d68:	fb05 fb08 	mul.w	fp, r5, r8
 8021d6c:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8021d70:	f834 500b 	ldrh.w	r5, [r4, fp]
 8021d74:	122f      	asrs	r7, r5, #8
 8021d76:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8021d7a:	fb17 f706 	smulbb	r7, r7, r6
 8021d7e:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8021d82:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021d86:	00ed      	lsls	r5, r5, #3
 8021d88:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8021d8c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8021d90:	10c7      	asrs	r7, r0, #3
 8021d92:	b2ed      	uxtb	r5, r5
 8021d94:	00c0      	lsls	r0, r0, #3
 8021d96:	fb19 f906 	smulbb	r9, r9, r6
 8021d9a:	fb15 f506 	smulbb	r5, r5, r6
 8021d9e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8021da2:	b2c0      	uxtb	r0, r0
 8021da4:	fa1f fc8c 	uxth.w	ip, ip
 8021da8:	fb07 970a 	mla	r7, r7, sl, r9
 8021dac:	fb00 500a 	mla	r0, r0, sl, r5
 8021db0:	b2bf      	uxth	r7, r7
 8021db2:	b280      	uxth	r0, r0
 8021db4:	f10c 0501 	add.w	r5, ip, #1
 8021db8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8021dbc:	f107 0901 	add.w	r9, r7, #1
 8021dc0:	1c45      	adds	r5, r0, #1
 8021dc2:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8021dc6:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8021dca:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8021dce:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8021dd2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8021dd6:	ea45 0c0c 	orr.w	ip, r5, ip
 8021dda:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021dde:	ea4c 0c09 	orr.w	ip, ip, r9
 8021de2:	f824 c00b 	strh.w	ip, [r4, fp]
 8021de6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021de8:	4401      	add	r1, r0
 8021dea:	9814      	ldr	r0, [sp, #80]	; 0x50
 8021dec:	f108 38ff 	add.w	r8, r8, #4294967295
 8021df0:	4402      	add	r2, r0
 8021df2:	e75c      	b.n	8021cae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8021df4:	b007      	add	sp, #28
 8021df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021dfa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021dfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021dfe:	b085      	sub	sp, #20
 8021e00:	4693      	mov	fp, r2
 8021e02:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8021e04:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021e06:	6870      	ldr	r0, [r6, #4]
 8021e08:	9100      	str	r1, [sp, #0]
 8021e0a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8021e0e:	fb00 2404 	mla	r4, r0, r4, r2
 8021e12:	6832      	ldr	r2, [r6, #0]
 8021e14:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8021e18:	682a      	ldr	r2, [r5, #0]
 8021e1a:	9201      	str	r2, [sp, #4]
 8021e1c:	686a      	ldr	r2, [r5, #4]
 8021e1e:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8021e22:	3204      	adds	r2, #4
 8021e24:	9202      	str	r2, [sp, #8]
 8021e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021e2a:	9a00      	ldr	r2, [sp, #0]
 8021e2c:	2a00      	cmp	r2, #0
 8021e2e:	dc03      	bgt.n	8021e38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8021e30:	f1bb 0f00 	cmp.w	fp, #0
 8021e34:	f340 80a0 	ble.w	8021f78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8021e38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021e3a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8021e3e:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8021e42:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8021e46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8021e48:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021e4c:	2b00      	cmp	r3, #0
 8021e4e:	dd0c      	ble.n	8021e6a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021e50:	1406      	asrs	r6, r0, #16
 8021e52:	d405      	bmi.n	8021e60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021e54:	454e      	cmp	r6, r9
 8021e56:	da03      	bge.n	8021e60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021e58:	1416      	asrs	r6, r2, #16
 8021e5a:	d401      	bmi.n	8021e60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8021e5c:	4546      	cmp	r6, r8
 8021e5e:	db05      	blt.n	8021e6c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021e60:	4470      	add	r0, lr
 8021e62:	4462      	add	r2, ip
 8021e64:	3b01      	subs	r3, #1
 8021e66:	3402      	adds	r4, #2
 8021e68:	e7f0      	b.n	8021e4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8021e6a:	d00f      	beq.n	8021e8c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021e6c:	1e5e      	subs	r6, r3, #1
 8021e6e:	fb0e 0706 	mla	r7, lr, r6, r0
 8021e72:	143f      	asrs	r7, r7, #16
 8021e74:	d541      	bpl.n	8021efa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8021e76:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8021e7a:	4698      	mov	r8, r3
 8021e7c:	9603      	str	r6, [sp, #12]
 8021e7e:	f1b8 0f00 	cmp.w	r8, #0
 8021e82:	dc59      	bgt.n	8021f38 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8021e84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021e88:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021e8c:	9b00      	ldr	r3, [sp, #0]
 8021e8e:	2b00      	cmp	r3, #0
 8021e90:	dd72      	ble.n	8021f78 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8021e92:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021e96:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021e9a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021e9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021ea0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021ea4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021ea8:	eeb0 6a62 	vmov.f32	s12, s5
 8021eac:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021eb0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021eb4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021eb8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8021ebc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021ec0:	eeb0 6a43 	vmov.f32	s12, s6
 8021ec4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021ec8:	ee12 2a90 	vmov	r2, s5
 8021ecc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021ed0:	fb92 fef3 	sdiv	lr, r2, r3
 8021ed4:	ee13 2a10 	vmov	r2, s6
 8021ed8:	fb92 fcf3 	sdiv	ip, r2, r3
 8021edc:	9b00      	ldr	r3, [sp, #0]
 8021ede:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021ee2:	3b01      	subs	r3, #1
 8021ee4:	9300      	str	r3, [sp, #0]
 8021ee6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8021eea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021eec:	eeb0 3a67 	vmov.f32	s6, s15
 8021ef0:	bf08      	it	eq
 8021ef2:	465b      	moveq	r3, fp
 8021ef4:	eef0 2a47 	vmov.f32	s5, s14
 8021ef8:	e797      	b.n	8021e2a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8021efa:	454f      	cmp	r7, r9
 8021efc:	dabb      	bge.n	8021e76 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021efe:	fb0c 2606 	mla	r6, ip, r6, r2
 8021f02:	1436      	asrs	r6, r6, #16
 8021f04:	d4b7      	bmi.n	8021e76 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021f06:	4546      	cmp	r6, r8
 8021f08:	dab5      	bge.n	8021e76 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8021f0a:	461e      	mov	r6, r3
 8021f0c:	46a0      	mov	r8, r4
 8021f0e:	2e00      	cmp	r6, #0
 8021f10:	ddb8      	ble.n	8021e84 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021f12:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8021f16:	9901      	ldr	r1, [sp, #4]
 8021f18:	1417      	asrs	r7, r2, #16
 8021f1a:	ea4f 4920 	mov.w	r9, r0, asr #16
 8021f1e:	fb0a 1707 	mla	r7, sl, r7, r1
 8021f22:	9902      	ldr	r1, [sp, #8]
 8021f24:	f817 7009 	ldrb.w	r7, [r7, r9]
 8021f28:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8021f2c:	f828 7b02 	strh.w	r7, [r8], #2
 8021f30:	4470      	add	r0, lr
 8021f32:	4462      	add	r2, ip
 8021f34:	3e01      	subs	r6, #1
 8021f36:	e7ea      	b.n	8021f0e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8021f38:	ea5f 4920 	movs.w	r9, r0, asr #16
 8021f3c:	d417      	bmi.n	8021f6e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8021f3e:	68ae      	ldr	r6, [r5, #8]
 8021f40:	454e      	cmp	r6, r9
 8021f42:	dd14      	ble.n	8021f6e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8021f44:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8021f48:	d411      	bmi.n	8021f6e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8021f4a:	68ef      	ldr	r7, [r5, #12]
 8021f4c:	4557      	cmp	r7, sl
 8021f4e:	dd0e      	ble.n	8021f6e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8021f50:	9f01      	ldr	r7, [sp, #4]
 8021f52:	b236      	sxth	r6, r6
 8021f54:	fb0a 7606 	mla	r6, sl, r6, r7
 8021f58:	9f02      	ldr	r7, [sp, #8]
 8021f5a:	f816 6009 	ldrb.w	r6, [r6, r9]
 8021f5e:	f06f 0101 	mvn.w	r1, #1
 8021f62:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8021f66:	fb01 f608 	mul.w	r6, r1, r8
 8021f6a:	9903      	ldr	r1, [sp, #12]
 8021f6c:	538f      	strh	r7, [r1, r6]
 8021f6e:	4470      	add	r0, lr
 8021f70:	4462      	add	r2, ip
 8021f72:	f108 38ff 	add.w	r8, r8, #4294967295
 8021f76:	e782      	b.n	8021e7e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021f78:	b005      	add	sp, #20
 8021f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021f7e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021f7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f82:	b087      	sub	sp, #28
 8021f84:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8021f86:	9205      	str	r2, [sp, #20]
 8021f88:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8021f8c:	9203      	str	r2, [sp, #12]
 8021f8e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8021f92:	9102      	str	r1, [sp, #8]
 8021f94:	6861      	ldr	r1, [r4, #4]
 8021f96:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8021f9a:	fb01 2000 	mla	r0, r1, r0, r2
 8021f9e:	6822      	ldr	r2, [r4, #0]
 8021fa0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8021fa4:	9200      	str	r2, [sp, #0]
 8021fa6:	f8dc 2000 	ldr.w	r2, [ip]
 8021faa:	9204      	str	r2, [sp, #16]
 8021fac:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8021fb0:	3204      	adds	r2, #4
 8021fb2:	9201      	str	r2, [sp, #4]
 8021fb4:	9a03      	ldr	r2, [sp, #12]
 8021fb6:	43d5      	mvns	r5, r2
 8021fb8:	b2ed      	uxtb	r5, r5
 8021fba:	9a02      	ldr	r2, [sp, #8]
 8021fbc:	2a00      	cmp	r2, #0
 8021fbe:	dc03      	bgt.n	8021fc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021fc0:	9a05      	ldr	r2, [sp, #20]
 8021fc2:	2a00      	cmp	r2, #0
 8021fc4:	f340 812c 	ble.w	8022220 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8021fc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021fca:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8021fce:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8021fd2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8021fd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021fd8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8021fdc:	2b00      	cmp	r3, #0
 8021fde:	dd10      	ble.n	8022002 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8021fe0:	140c      	asrs	r4, r1, #16
 8021fe2:	d405      	bmi.n	8021ff0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021fe4:	4574      	cmp	r4, lr
 8021fe6:	da03      	bge.n	8021ff0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021fe8:	1414      	asrs	r4, r2, #16
 8021fea:	d401      	bmi.n	8021ff0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8021fec:	42bc      	cmp	r4, r7
 8021fee:	db09      	blt.n	8022004 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8021ff0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8021ff2:	9800      	ldr	r0, [sp, #0]
 8021ff4:	4421      	add	r1, r4
 8021ff6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8021ff8:	3002      	adds	r0, #2
 8021ffa:	4422      	add	r2, r4
 8021ffc:	3b01      	subs	r3, #1
 8021ffe:	9000      	str	r0, [sp, #0]
 8022000:	e7ec      	b.n	8021fdc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8022002:	d071      	beq.n	80220e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8022004:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8022006:	1e5c      	subs	r4, r3, #1
 8022008:	fb06 1604 	mla	r6, r6, r4, r1
 802200c:	1436      	asrs	r6, r6, #16
 802200e:	d45d      	bmi.n	80220cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8022010:	4576      	cmp	r6, lr
 8022012:	da5b      	bge.n	80220cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8022014:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8022016:	fb06 2404 	mla	r4, r6, r4, r2
 802201a:	1424      	asrs	r4, r4, #16
 802201c:	d456      	bmi.n	80220cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 802201e:	42bc      	cmp	r4, r7
 8022020:	da54      	bge.n	80220cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8022022:	f8dd 9000 	ldr.w	r9, [sp]
 8022026:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 802202a:	4698      	mov	r8, r3
 802202c:	f1b8 0f00 	cmp.w	r8, #0
 8022030:	dd54      	ble.n	80220dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8022032:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8022036:	9804      	ldr	r0, [sp, #16]
 8022038:	1414      	asrs	r4, r2, #16
 802203a:	fb07 0404 	mla	r4, r7, r4, r0
 802203e:	140e      	asrs	r6, r1, #16
 8022040:	9801      	ldr	r0, [sp, #4]
 8022042:	f814 e006 	ldrb.w	lr, [r4, r6]
 8022046:	f8b9 4000 	ldrh.w	r4, [r9]
 802204a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802204e:	eb00 0b0e 	add.w	fp, r0, lr
 8022052:	1227      	asrs	r7, r4, #8
 8022054:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8022058:	f89b b001 	ldrb.w	fp, [fp, #1]
 802205c:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8022060:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022062:	fb16 f60a 	smulbb	r6, r6, sl
 8022066:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802206a:	fb07 6705 	mla	r7, r7, r5, r6
 802206e:	10e6      	asrs	r6, r4, #3
 8022070:	00e4      	lsls	r4, r4, #3
 8022072:	b2e4      	uxtb	r4, r4
 8022074:	fb1b fb0a 	smulbb	fp, fp, sl
 8022078:	fb14 f405 	smulbb	r4, r4, r5
 802207c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022080:	b2bf      	uxth	r7, r7
 8022082:	fb06 b605 	mla	r6, r6, r5, fp
 8022086:	fb0e 4e0a 	mla	lr, lr, sl, r4
 802208a:	b2b6      	uxth	r6, r6
 802208c:	fa1f fe8e 	uxth.w	lr, lr
 8022090:	1c7c      	adds	r4, r7, #1
 8022092:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8022096:	f106 0b01 	add.w	fp, r6, #1
 802209a:	f10e 0401 	add.w	r4, lr, #1
 802209e:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 80220a2:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80220a6:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80220aa:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80220ae:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80220b2:	4327      	orrs	r7, r4
 80220b4:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80220b8:	4401      	add	r1, r0
 80220ba:	9814      	ldr	r0, [sp, #80]	; 0x50
 80220bc:	ea47 070b 	orr.w	r7, r7, fp
 80220c0:	f829 7b02 	strh.w	r7, [r9], #2
 80220c4:	4402      	add	r2, r0
 80220c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80220ca:	e7af      	b.n	802202c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80220cc:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 80220d0:	f04f 0e00 	mov.w	lr, #0
 80220d4:	eb03 040e 	add.w	r4, r3, lr
 80220d8:	2c00      	cmp	r4, #0
 80220da:	dc43      	bgt.n	8022164 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80220dc:	9a00      	ldr	r2, [sp, #0]
 80220de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80220e2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80220e6:	9300      	str	r3, [sp, #0]
 80220e8:	9b02      	ldr	r3, [sp, #8]
 80220ea:	2b00      	cmp	r3, #0
 80220ec:	f340 8098 	ble.w	8022220 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80220f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80220f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80220f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80220fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80220fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022102:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022106:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802210a:	eef0 6a62 	vmov.f32	s13, s5
 802210e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022112:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022116:	ee77 2a62 	vsub.f32	s5, s14, s5
 802211a:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 802211e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022122:	eef0 6a43 	vmov.f32	s13, s6
 8022126:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802212a:	ee12 2a90 	vmov	r2, s5
 802212e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022132:	fb92 f3f3 	sdiv	r3, r2, r3
 8022136:	ee13 2a10 	vmov	r2, s6
 802213a:	9313      	str	r3, [sp, #76]	; 0x4c
 802213c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802213e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022142:	9314      	str	r3, [sp, #80]	; 0x50
 8022144:	9b02      	ldr	r3, [sp, #8]
 8022146:	9a05      	ldr	r2, [sp, #20]
 8022148:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802214c:	3b01      	subs	r3, #1
 802214e:	9302      	str	r3, [sp, #8]
 8022150:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8022154:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022156:	eeb0 3a67 	vmov.f32	s6, s15
 802215a:	bf08      	it	eq
 802215c:	4613      	moveq	r3, r2
 802215e:	eef0 2a47 	vmov.f32	s5, s14
 8022162:	e72a      	b.n	8021fba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022164:	140f      	asrs	r7, r1, #16
 8022166:	d454      	bmi.n	8022212 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8022168:	f8dc 6008 	ldr.w	r6, [ip, #8]
 802216c:	42be      	cmp	r6, r7
 802216e:	dd50      	ble.n	8022212 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8022170:	ea5f 4822 	movs.w	r8, r2, asr #16
 8022174:	d44d      	bmi.n	8022212 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8022176:	f8dc 400c 	ldr.w	r4, [ip, #12]
 802217a:	4544      	cmp	r4, r8
 802217c:	dd49      	ble.n	8022212 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802217e:	9c04      	ldr	r4, [sp, #16]
 8022180:	b236      	sxth	r6, r6
 8022182:	fb08 4606 	mla	r6, r8, r6, r4
 8022186:	f06f 0001 	mvn.w	r0, #1
 802218a:	f816 8007 	ldrb.w	r8, [r6, r7]
 802218e:	9c01      	ldr	r4, [sp, #4]
 8022190:	fb00 fa0e 	mul.w	sl, r0, lr
 8022194:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8022198:	9800      	ldr	r0, [sp, #0]
 802219a:	eb04 0b08 	add.w	fp, r4, r8
 802219e:	f830 400a 	ldrh.w	r4, [r0, sl]
 80221a2:	f89b 6002 	ldrb.w	r6, [fp, #2]
 80221a6:	9801      	ldr	r0, [sp, #4]
 80221a8:	f89b b001 	ldrb.w	fp, [fp, #1]
 80221ac:	f810 8008 	ldrb.w	r8, [r0, r8]
 80221b0:	9800      	ldr	r0, [sp, #0]
 80221b2:	1227      	asrs	r7, r4, #8
 80221b4:	fb16 f609 	smulbb	r6, r6, r9
 80221b8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80221bc:	fb07 6705 	mla	r7, r7, r5, r6
 80221c0:	10e6      	asrs	r6, r4, #3
 80221c2:	00e4      	lsls	r4, r4, #3
 80221c4:	b2e4      	uxtb	r4, r4
 80221c6:	fb1b fb09 	smulbb	fp, fp, r9
 80221ca:	fb14 f405 	smulbb	r4, r4, r5
 80221ce:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80221d2:	b2bf      	uxth	r7, r7
 80221d4:	fb06 b605 	mla	r6, r6, r5, fp
 80221d8:	fb08 4809 	mla	r8, r8, r9, r4
 80221dc:	b2b6      	uxth	r6, r6
 80221de:	fa1f f888 	uxth.w	r8, r8
 80221e2:	1c7c      	adds	r4, r7, #1
 80221e4:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 80221e8:	f106 0b01 	add.w	fp, r6, #1
 80221ec:	f108 0401 	add.w	r4, r8, #1
 80221f0:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 80221f4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80221f8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80221fc:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8022200:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8022204:	4327      	orrs	r7, r4
 8022206:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802220a:	ea47 070b 	orr.w	r7, r7, fp
 802220e:	f820 700a 	strh.w	r7, [r0, sl]
 8022212:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022214:	4401      	add	r1, r0
 8022216:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022218:	f10e 3eff 	add.w	lr, lr, #4294967295
 802221c:	4402      	add	r2, r0
 802221e:	e759      	b.n	80220d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8022220:	b007      	add	sp, #28
 8022222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08022228 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802222c:	b085      	sub	sp, #20
 802222e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022232:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8022234:	9203      	str	r2, [sp, #12]
 8022236:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 802223a:	6870      	ldr	r0, [r6, #4]
 802223c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802223e:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8022242:	686f      	ldr	r7, [r5, #4]
 8022244:	9101      	str	r1, [sp, #4]
 8022246:	fb00 2404 	mla	r4, r0, r4, r2
 802224a:	6832      	ldr	r2, [r6, #0]
 802224c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8022250:	682a      	ldr	r2, [r5, #0]
 8022252:	9202      	str	r2, [sp, #8]
 8022254:	3704      	adds	r7, #4
 8022256:	9a01      	ldr	r2, [sp, #4]
 8022258:	2a00      	cmp	r2, #0
 802225a:	dc03      	bgt.n	8022264 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802225c:	9a03      	ldr	r2, [sp, #12]
 802225e:	2a00      	cmp	r2, #0
 8022260:	f340 80cc 	ble.w	80223fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8022264:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022266:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 802226a:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 802226e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8022272:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022274:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022278:	2b00      	cmp	r3, #0
 802227a:	dd0d      	ble.n	8022298 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802227c:	1406      	asrs	r6, r0, #16
 802227e:	d405      	bmi.n	802228c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8022280:	454e      	cmp	r6, r9
 8022282:	da03      	bge.n	802228c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8022284:	1416      	asrs	r6, r2, #16
 8022286:	d401      	bmi.n	802228c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8022288:	4546      	cmp	r6, r8
 802228a:	db06      	blt.n	802229a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802228c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 802228e:	4460      	add	r0, ip
 8022290:	4432      	add	r2, r6
 8022292:	3b01      	subs	r3, #1
 8022294:	3402      	adds	r4, #2
 8022296:	e7ef      	b.n	8022278 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8022298:	d00f      	beq.n	80222ba <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802229a:	1e5e      	subs	r6, r3, #1
 802229c:	fb0c 0e06 	mla	lr, ip, r6, r0
 80222a0:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 80222a4:	d543      	bpl.n	802232e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 80222a6:	4698      	mov	r8, r3
 80222a8:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 80222ac:	f1b8 0f00 	cmp.w	r8, #0
 80222b0:	dc71      	bgt.n	8022396 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 80222b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80222b6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80222ba:	9b01      	ldr	r3, [sp, #4]
 80222bc:	2b00      	cmp	r3, #0
 80222be:	f340 809d 	ble.w	80223fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80222c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80222c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80222ca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80222ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80222d0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80222d4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80222d8:	eeb0 6a62 	vmov.f32	s12, s5
 80222dc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80222e0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80222e4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80222e8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80222ec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80222f0:	eeb0 6a43 	vmov.f32	s12, s6
 80222f4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80222f8:	ee12 2a90 	vmov	r2, s5
 80222fc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022300:	fb92 fcf3 	sdiv	ip, r2, r3
 8022304:	ee13 2a10 	vmov	r2, s6
 8022308:	fb92 f3f3 	sdiv	r3, r2, r3
 802230c:	9312      	str	r3, [sp, #72]	; 0x48
 802230e:	9b01      	ldr	r3, [sp, #4]
 8022310:	9a03      	ldr	r2, [sp, #12]
 8022312:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022316:	3b01      	subs	r3, #1
 8022318:	9301      	str	r3, [sp, #4]
 802231a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 802231e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022320:	eeb0 3a67 	vmov.f32	s6, s15
 8022324:	bf08      	it	eq
 8022326:	4613      	moveq	r3, r2
 8022328:	eef0 2a47 	vmov.f32	s5, s14
 802232c:	e793      	b.n	8022256 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802232e:	45ce      	cmp	lr, r9
 8022330:	dab9      	bge.n	80222a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8022332:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022334:	fb01 2606 	mla	r6, r1, r6, r2
 8022338:	1436      	asrs	r6, r6, #16
 802233a:	d4b4      	bmi.n	80222a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802233c:	4546      	cmp	r6, r8
 802233e:	dab2      	bge.n	80222a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8022340:	4698      	mov	r8, r3
 8022342:	46a2      	mov	sl, r4
 8022344:	f1b8 0f00 	cmp.w	r8, #0
 8022348:	ddb3      	ble.n	80222b2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802234a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 802234e:	9902      	ldr	r1, [sp, #8]
 8022350:	1416      	asrs	r6, r2, #16
 8022352:	fb09 1606 	mla	r6, r9, r6, r1
 8022356:	ea4f 4e20 	mov.w	lr, r0, asr #16
 802235a:	492a      	ldr	r1, [pc, #168]	; (8022404 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 802235c:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8022360:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022364:	eb07 0b0e 	add.w	fp, r7, lr
 8022368:	4460      	add	r0, ip
 802236a:	f89b 6001 	ldrb.w	r6, [fp, #1]
 802236e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8022372:	00f6      	lsls	r6, r6, #3
 8022374:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8022378:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802237c:	ea49 0606 	orr.w	r6, r9, r6
 8022380:	f817 900e 	ldrb.w	r9, [r7, lr]
 8022384:	9912      	ldr	r1, [sp, #72]	; 0x48
 8022386:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 802238a:	f82a 6b02 	strh.w	r6, [sl], #2
 802238e:	440a      	add	r2, r1
 8022390:	f108 38ff 	add.w	r8, r8, #4294967295
 8022394:	e7d6      	b.n	8022344 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8022396:	ea5f 4920 	movs.w	r9, r0, asr #16
 802239a:	d429      	bmi.n	80223f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802239c:	68ae      	ldr	r6, [r5, #8]
 802239e:	454e      	cmp	r6, r9
 80223a0:	dd26      	ble.n	80223f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80223a2:	ea5f 4b22 	movs.w	fp, r2, asr #16
 80223a6:	d423      	bmi.n	80223f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80223a8:	68e9      	ldr	r1, [r5, #12]
 80223aa:	4559      	cmp	r1, fp
 80223ac:	dd20      	ble.n	80223f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80223ae:	9902      	ldr	r1, [sp, #8]
 80223b0:	fa0f fe86 	sxth.w	lr, r6
 80223b4:	fb0b 1e0e 	mla	lr, fp, lr, r1
 80223b8:	f06f 0101 	mvn.w	r1, #1
 80223bc:	f81e e009 	ldrb.w	lr, [lr, r9]
 80223c0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80223c4:	eb07 060e 	add.w	r6, r7, lr
 80223c8:	fb01 f908 	mul.w	r9, r1, r8
 80223cc:	f896 b002 	ldrb.w	fp, [r6, #2]
 80223d0:	7876      	ldrb	r6, [r6, #1]
 80223d2:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 80223d6:	00f6      	lsls	r6, r6, #3
 80223d8:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 80223dc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80223e0:	ea4b 0606 	orr.w	r6, fp, r6
 80223e4:	f817 b00e 	ldrb.w	fp, [r7, lr]
 80223e8:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 80223ec:	f82a 6009 	strh.w	r6, [sl, r9]
 80223f0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80223f2:	4460      	add	r0, ip
 80223f4:	440a      	add	r2, r1
 80223f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80223fa:	e757      	b.n	80222ac <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80223fc:	b005      	add	sp, #20
 80223fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022402:	bf00      	nop
 8022404:	fffff800 	.word	0xfffff800

08022408 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802240c:	b087      	sub	sp, #28
 802240e:	468b      	mov	fp, r1
 8022410:	9815      	ldr	r0, [sp, #84]	; 0x54
 8022412:	9204      	str	r2, [sp, #16]
 8022414:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8022418:	9205      	str	r2, [sp, #20]
 802241a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 802241e:	6841      	ldr	r1, [r0, #4]
 8022420:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8022424:	fb01 2404 	mla	r4, r1, r4, r2
 8022428:	6802      	ldr	r2, [r0, #0]
 802242a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802242e:	f8dc 2000 	ldr.w	r2, [ip]
 8022432:	9201      	str	r2, [sp, #4]
 8022434:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8022438:	3204      	adds	r2, #4
 802243a:	9202      	str	r2, [sp, #8]
 802243c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022440:	f1bb 0f00 	cmp.w	fp, #0
 8022444:	dc03      	bgt.n	802244e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8022446:	9a04      	ldr	r2, [sp, #16]
 8022448:	2a00      	cmp	r2, #0
 802244a:	f340 8138 	ble.w	80226be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 802244e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022450:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8022454:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8022458:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802245c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802245e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8022462:	2b00      	cmp	r3, #0
 8022464:	dd0e      	ble.n	8022484 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022466:	1402      	asrs	r2, r0, #16
 8022468:	d405      	bmi.n	8022476 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802246a:	42ba      	cmp	r2, r7
 802246c:	da03      	bge.n	8022476 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802246e:	140a      	asrs	r2, r1, #16
 8022470:	d401      	bmi.n	8022476 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8022472:	42b2      	cmp	r2, r6
 8022474:	db07      	blt.n	8022486 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8022476:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022478:	4410      	add	r0, r2
 802247a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802247c:	3b01      	subs	r3, #1
 802247e:	4411      	add	r1, r2
 8022480:	3402      	adds	r4, #2
 8022482:	e7ee      	b.n	8022462 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8022484:	d019      	beq.n	80224ba <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8022486:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022488:	1e5a      	subs	r2, r3, #1
 802248a:	fb05 0502 	mla	r5, r5, r2, r0
 802248e:	142d      	asrs	r5, r5, #16
 8022490:	d409      	bmi.n	80224a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022492:	42bd      	cmp	r5, r7
 8022494:	da07      	bge.n	80224a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022496:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022498:	fb05 1202 	mla	r2, r5, r2, r1
 802249c:	1412      	asrs	r2, r2, #16
 802249e:	d402      	bmi.n	80224a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80224a0:	42b2      	cmp	r2, r6
 80224a2:	f2c0 80ac 	blt.w	80225fe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 80224a6:	f04f 0e00 	mov.w	lr, #0
 80224aa:	eb03 020e 	add.w	r2, r3, lr
 80224ae:	2a00      	cmp	r2, #0
 80224b0:	dc3e      	bgt.n	8022530 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80224b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80224b6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80224ba:	f1bb 0f00 	cmp.w	fp, #0
 80224be:	f340 80fe 	ble.w	80226be <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80224c2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80224c6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80224ca:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80224ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80224d0:	f1bb 0b01 	subs.w	fp, fp, #1
 80224d4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80224d8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80224dc:	eeb0 6a62 	vmov.f32	s12, s5
 80224e0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80224e4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80224e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80224ec:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80224f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80224f4:	eeb0 6a43 	vmov.f32	s12, s6
 80224f8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80224fc:	ee12 2a90 	vmov	r2, s5
 8022500:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022504:	fb92 f3f3 	sdiv	r3, r2, r3
 8022508:	ee13 2a10 	vmov	r2, s6
 802250c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022510:	9313      	str	r3, [sp, #76]	; 0x4c
 8022512:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022514:	fb92 f3f3 	sdiv	r3, r2, r3
 8022518:	9a04      	ldr	r2, [sp, #16]
 802251a:	9314      	str	r3, [sp, #80]	; 0x50
 802251c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8022520:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022522:	eeb0 3a67 	vmov.f32	s6, s15
 8022526:	bf08      	it	eq
 8022528:	4613      	moveq	r3, r2
 802252a:	eef0 2a47 	vmov.f32	s5, s14
 802252e:	e787      	b.n	8022440 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8022530:	1406      	asrs	r6, r0, #16
 8022532:	d45d      	bmi.n	80225f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8022534:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8022538:	42b5      	cmp	r5, r6
 802253a:	dd59      	ble.n	80225f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802253c:	140f      	asrs	r7, r1, #16
 802253e:	d457      	bmi.n	80225f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8022540:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8022544:	42ba      	cmp	r2, r7
 8022546:	dd53      	ble.n	80225f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8022548:	9a01      	ldr	r2, [sp, #4]
 802254a:	b22d      	sxth	r5, r5
 802254c:	fb07 2505 	mla	r5, r7, r5, r2
 8022550:	5daa      	ldrb	r2, [r5, r6]
 8022552:	9d02      	ldr	r5, [sp, #8]
 8022554:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8022558:	0e2e      	lsrs	r6, r5, #24
 802255a:	d049      	beq.n	80225f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802255c:	f06f 0201 	mvn.w	r2, #1
 8022560:	fb02 f20e 	mul.w	r2, r2, lr
 8022564:	9203      	str	r2, [sp, #12]
 8022566:	f834 8002 	ldrh.w	r8, [r4, r2]
 802256a:	9a05      	ldr	r2, [sp, #20]
 802256c:	4356      	muls	r6, r2
 802256e:	1c72      	adds	r2, r6, #1
 8022570:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8022574:	1212      	asrs	r2, r2, #8
 8022576:	fa1f f982 	uxth.w	r9, r2
 802257a:	ea4f 2728 	mov.w	r7, r8, asr #8
 802257e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8022582:	43d2      	mvns	r2, r2
 8022584:	b2d2      	uxtb	r2, r2
 8022586:	fb16 f609 	smulbb	r6, r6, r9
 802258a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802258e:	fb07 6702 	mla	r7, r7, r2, r6
 8022592:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8022596:	ea4f 06e8 	mov.w	r6, r8, asr #3
 802259a:	b2ed      	uxtb	r5, r5
 802259c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80225a0:	fa5f f888 	uxtb.w	r8, r8
 80225a4:	fb15 f509 	smulbb	r5, r5, r9
 80225a8:	fb08 5502 	mla	r5, r8, r2, r5
 80225ac:	b2bf      	uxth	r7, r7
 80225ae:	fb1a fa09 	smulbb	sl, sl, r9
 80225b2:	b2ad      	uxth	r5, r5
 80225b4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80225b8:	fb06 a602 	mla	r6, r6, r2, sl
 80225bc:	1c7a      	adds	r2, r7, #1
 80225be:	f105 0a01 	add.w	sl, r5, #1
 80225c2:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80225c6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80225ca:	b2b6      	uxth	r6, r6
 80225cc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80225d0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80225d4:	ea4a 0707 	orr.w	r7, sl, r7
 80225d8:	f106 0a01 	add.w	sl, r6, #1
 80225dc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80225e0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80225e4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80225e8:	9a03      	ldr	r2, [sp, #12]
 80225ea:	ea47 070a 	orr.w	r7, r7, sl
 80225ee:	52a7      	strh	r7, [r4, r2]
 80225f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80225f2:	4410      	add	r0, r2
 80225f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80225f6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80225fa:	4411      	add	r1, r2
 80225fc:	e755      	b.n	80224aa <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80225fe:	f04f 0800 	mov.w	r8, #0
 8022602:	eba3 0208 	sub.w	r2, r3, r8
 8022606:	2a00      	cmp	r2, #0
 8022608:	f77f af53 	ble.w	80224b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802260c:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8022610:	9f01      	ldr	r7, [sp, #4]
 8022612:	140a      	asrs	r2, r1, #16
 8022614:	1405      	asrs	r5, r0, #16
 8022616:	fb06 7202 	mla	r2, r6, r2, r7
 802261a:	5d52      	ldrb	r2, [r2, r5]
 802261c:	9d02      	ldr	r5, [sp, #8]
 802261e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8022622:	0e2e      	lsrs	r6, r5, #24
 8022624:	d044      	beq.n	80226b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8022626:	9a05      	ldr	r2, [sp, #20]
 8022628:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 802262c:	4356      	muls	r6, r2
 802262e:	1c72      	adds	r2, r6, #1
 8022630:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8022634:	1212      	asrs	r2, r2, #8
 8022636:	fa1f f982 	uxth.w	r9, r2
 802263a:	ea4f 272e 	mov.w	r7, lr, asr #8
 802263e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8022642:	43d2      	mvns	r2, r2
 8022644:	b2d2      	uxtb	r2, r2
 8022646:	fb16 f609 	smulbb	r6, r6, r9
 802264a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802264e:	fb07 6702 	mla	r7, r7, r2, r6
 8022652:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8022656:	ea4f 06ee 	mov.w	r6, lr, asr #3
 802265a:	b2ed      	uxtb	r5, r5
 802265c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022660:	fa5f fe8e 	uxtb.w	lr, lr
 8022664:	fb15 f509 	smulbb	r5, r5, r9
 8022668:	fb0e 5502 	mla	r5, lr, r2, r5
 802266c:	b2bf      	uxth	r7, r7
 802266e:	fb1a fa09 	smulbb	sl, sl, r9
 8022672:	b2ad      	uxth	r5, r5
 8022674:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022678:	fb06 a602 	mla	r6, r6, r2, sl
 802267c:	1c7a      	adds	r2, r7, #1
 802267e:	f105 0a01 	add.w	sl, r5, #1
 8022682:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8022686:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802268a:	b2b6      	uxth	r6, r6
 802268c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022690:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8022694:	ea4a 0707 	orr.w	r7, sl, r7
 8022698:	f106 0a01 	add.w	sl, r6, #1
 802269c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80226a0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80226a4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80226a8:	ea47 070a 	orr.w	r7, r7, sl
 80226ac:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 80226b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80226b2:	4410      	add	r0, r2
 80226b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80226b6:	f108 0801 	add.w	r8, r8, #1
 80226ba:	4411      	add	r1, r2
 80226bc:	e7a1      	b.n	8022602 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80226be:	b007      	add	sp, #28
 80226c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080226c4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80226c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226c8:	b085      	sub	sp, #20
 80226ca:	468b      	mov	fp, r1
 80226cc:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80226ce:	9203      	str	r2, [sp, #12]
 80226d0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80226d4:	6841      	ldr	r1, [r0, #4]
 80226d6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80226da:	fb01 2404 	mla	r4, r1, r4, r2
 80226de:	6802      	ldr	r2, [r0, #0]
 80226e0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80226e4:	f8de 2000 	ldr.w	r2, [lr]
 80226e8:	9200      	str	r2, [sp, #0]
 80226ea:	f8de 2004 	ldr.w	r2, [lr, #4]
 80226ee:	3204      	adds	r2, #4
 80226f0:	9201      	str	r2, [sp, #4]
 80226f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80226f6:	f1bb 0f00 	cmp.w	fp, #0
 80226fa:	dc03      	bgt.n	8022704 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80226fc:	9a03      	ldr	r2, [sp, #12]
 80226fe:	2a00      	cmp	r2, #0
 8022700:	f340 8153 	ble.w	80229aa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8022704:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022706:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 802270a:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 802270e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8022712:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022714:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022718:	2b00      	cmp	r3, #0
 802271a:	dd0e      	ble.n	802273a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802271c:	1408      	asrs	r0, r1, #16
 802271e:	d405      	bmi.n	802272c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8022720:	42b8      	cmp	r0, r7
 8022722:	da03      	bge.n	802272c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8022724:	1410      	asrs	r0, r2, #16
 8022726:	d401      	bmi.n	802272c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8022728:	42b0      	cmp	r0, r6
 802272a:	db07      	blt.n	802273c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802272c:	9811      	ldr	r0, [sp, #68]	; 0x44
 802272e:	4401      	add	r1, r0
 8022730:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022732:	3b01      	subs	r3, #1
 8022734:	4402      	add	r2, r0
 8022736:	3402      	adds	r4, #2
 8022738:	e7ee      	b.n	8022718 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802273a:	d017      	beq.n	802276c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 802273c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802273e:	1e58      	subs	r0, r3, #1
 8022740:	fb05 1500 	mla	r5, r5, r0, r1
 8022744:	142d      	asrs	r5, r5, #16
 8022746:	d409      	bmi.n	802275c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8022748:	42bd      	cmp	r5, r7
 802274a:	da07      	bge.n	802275c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802274c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802274e:	fb05 2000 	mla	r0, r5, r0, r2
 8022752:	1400      	asrs	r0, r0, #16
 8022754:	d402      	bmi.n	802275c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8022756:	42b0      	cmp	r0, r6
 8022758:	f2c0 80bc 	blt.w	80228d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 802275c:	2600      	movs	r6, #0
 802275e:	1998      	adds	r0, r3, r6
 8022760:	2800      	cmp	r0, #0
 8022762:	dc3e      	bgt.n	80227e2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8022764:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022768:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802276c:	f1bb 0f00 	cmp.w	fp, #0
 8022770:	f340 811b 	ble.w	80229aa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8022774:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022778:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802277c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022780:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022782:	f1bb 0b01 	subs.w	fp, fp, #1
 8022786:	ee31 1a05 	vadd.f32	s2, s2, s10
 802278a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802278e:	eeb0 6a62 	vmov.f32	s12, s5
 8022792:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022796:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802279a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802279e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80227a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80227a6:	eeb0 6a43 	vmov.f32	s12, s6
 80227aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80227ae:	ee12 2a90 	vmov	r2, s5
 80227b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80227b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80227ba:	ee13 2a10 	vmov	r2, s6
 80227be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80227c2:	9311      	str	r3, [sp, #68]	; 0x44
 80227c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80227c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80227ca:	9a03      	ldr	r2, [sp, #12]
 80227cc:	9312      	str	r3, [sp, #72]	; 0x48
 80227ce:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80227d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80227d4:	eeb0 3a67 	vmov.f32	s6, s15
 80227d8:	bf08      	it	eq
 80227da:	4613      	moveq	r3, r2
 80227dc:	eef0 2a47 	vmov.f32	s5, s14
 80227e0:	e789      	b.n	80226f6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80227e2:	140f      	asrs	r7, r1, #16
 80227e4:	d426      	bmi.n	8022834 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80227e6:	f8de 5008 	ldr.w	r5, [lr, #8]
 80227ea:	42bd      	cmp	r5, r7
 80227ec:	dd22      	ble.n	8022834 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80227ee:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80227f2:	d41f      	bmi.n	8022834 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80227f4:	f8de 000c 	ldr.w	r0, [lr, #12]
 80227f8:	4560      	cmp	r0, ip
 80227fa:	dd1b      	ble.n	8022834 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80227fc:	9800      	ldr	r0, [sp, #0]
 80227fe:	b22d      	sxth	r5, r5
 8022800:	fb0c 0505 	mla	r5, ip, r5, r0
 8022804:	5de8      	ldrb	r0, [r5, r7]
 8022806:	9d01      	ldr	r5, [sp, #4]
 8022808:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 802280c:	0e07      	lsrs	r7, r0, #24
 802280e:	2fff      	cmp	r7, #255	; 0xff
 8022810:	d116      	bne.n	8022840 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8022812:	f06f 0501 	mvn.w	r5, #1
 8022816:	fb05 f706 	mul.w	r7, r5, r6
 802281a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 802281e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 8022822:	0945      	lsrs	r5, r0, #5
 8022824:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8022828:	ea4c 0505 	orr.w	r5, ip, r5
 802282c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8022830:	4305      	orrs	r5, r0
 8022832:	53e5      	strh	r5, [r4, r7]
 8022834:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022836:	4401      	add	r1, r0
 8022838:	9812      	ldr	r0, [sp, #72]	; 0x48
 802283a:	3e01      	subs	r6, #1
 802283c:	4402      	add	r2, r0
 802283e:	e78e      	b.n	802275e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022840:	b2fd      	uxtb	r5, r7
 8022842:	2f00      	cmp	r7, #0
 8022844:	d0f6      	beq.n	8022834 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8022846:	f06f 0701 	mvn.w	r7, #1
 802284a:	4377      	muls	r7, r6
 802284c:	fa1f f985 	uxth.w	r9, r5
 8022850:	f834 8007 	ldrh.w	r8, [r4, r7]
 8022854:	9702      	str	r7, [sp, #8]
 8022856:	ea4f 2c28 	mov.w	ip, r8, asr #8
 802285a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 802285e:	43ed      	mvns	r5, r5
 8022860:	b2ed      	uxtb	r5, r5
 8022862:	fb17 f709 	smulbb	r7, r7, r9
 8022866:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802286a:	fb0c 7c05 	mla	ip, ip, r5, r7
 802286e:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8022872:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8022876:	b2c0      	uxtb	r0, r0
 8022878:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 802287c:	fa5f f888 	uxtb.w	r8, r8
 8022880:	fb10 f009 	smulbb	r0, r0, r9
 8022884:	fb08 0005 	mla	r0, r8, r5, r0
 8022888:	b280      	uxth	r0, r0
 802288a:	fa1f fc8c 	uxth.w	ip, ip
 802288e:	fb1a fa09 	smulbb	sl, sl, r9
 8022892:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022896:	fb07 a705 	mla	r7, r7, r5, sl
 802289a:	f100 0a01 	add.w	sl, r0, #1
 802289e:	f10c 0501 	add.w	r5, ip, #1
 80228a2:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80228a6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80228aa:	b2bf      	uxth	r7, r7
 80228ac:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80228b0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80228b4:	ea4a 0c0c 	orr.w	ip, sl, ip
 80228b8:	f107 0a01 	add.w	sl, r7, #1
 80228bc:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80228c0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80228c4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80228c8:	9802      	ldr	r0, [sp, #8]
 80228ca:	ea4c 0c0a 	orr.w	ip, ip, sl
 80228ce:	f824 c000 	strh.w	ip, [r4, r0]
 80228d2:	e7af      	b.n	8022834 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80228d4:	f04f 0800 	mov.w	r8, #0
 80228d8:	eba3 0008 	sub.w	r0, r3, r8
 80228dc:	2800      	cmp	r0, #0
 80228de:	f77f af41 	ble.w	8022764 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80228e2:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 80228e6:	9f00      	ldr	r7, [sp, #0]
 80228e8:	1410      	asrs	r0, r2, #16
 80228ea:	140d      	asrs	r5, r1, #16
 80228ec:	fb06 7000 	mla	r0, r6, r0, r7
 80228f0:	5d40      	ldrb	r0, [r0, r5]
 80228f2:	9d01      	ldr	r5, [sp, #4]
 80228f4:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 80228f8:	0e2e      	lsrs	r6, r5, #24
 80228fa:	2eff      	cmp	r6, #255	; 0xff
 80228fc:	d112      	bne.n	8022924 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 80228fe:	482c      	ldr	r0, [pc, #176]	; (80229b0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 8022900:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8022904:	0968      	lsrs	r0, r5, #5
 8022906:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802290a:	4330      	orrs	r0, r6
 802290c:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8022910:	4328      	orrs	r0, r5
 8022912:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 8022916:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022918:	4401      	add	r1, r0
 802291a:	9812      	ldr	r0, [sp, #72]	; 0x48
 802291c:	f108 0801 	add.w	r8, r8, #1
 8022920:	4402      	add	r2, r0
 8022922:	e7d9      	b.n	80228d8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022924:	b2f0      	uxtb	r0, r6
 8022926:	2e00      	cmp	r6, #0
 8022928:	d0f5      	beq.n	8022916 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 802292a:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 802292e:	fa1f f980 	uxth.w	r9, r0
 8022932:	ea4f 272c 	mov.w	r7, ip, asr #8
 8022936:	f3c5 4607 	ubfx	r6, r5, #16, #8
 802293a:	43c0      	mvns	r0, r0
 802293c:	b2c0      	uxtb	r0, r0
 802293e:	fb16 f609 	smulbb	r6, r6, r9
 8022942:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8022946:	fb07 6700 	mla	r7, r7, r0, r6
 802294a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 802294e:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8022952:	b2ed      	uxtb	r5, r5
 8022954:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022958:	fa5f fc8c 	uxtb.w	ip, ip
 802295c:	fb15 f509 	smulbb	r5, r5, r9
 8022960:	fb0c 5500 	mla	r5, ip, r0, r5
 8022964:	b2bf      	uxth	r7, r7
 8022966:	fb1a fa09 	smulbb	sl, sl, r9
 802296a:	b2ad      	uxth	r5, r5
 802296c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022970:	fb06 a600 	mla	r6, r6, r0, sl
 8022974:	1c78      	adds	r0, r7, #1
 8022976:	f105 0a01 	add.w	sl, r5, #1
 802297a:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 802297e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8022982:	b2b6      	uxth	r6, r6
 8022984:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022988:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 802298c:	ea4a 0707 	orr.w	r7, sl, r7
 8022990:	f106 0a01 	add.w	sl, r6, #1
 8022994:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8022998:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802299c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80229a0:	ea47 070a 	orr.w	r7, r7, sl
 80229a4:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 80229a8:	e7b5      	b.n	8022916 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80229aa:	b005      	add	sp, #20
 80229ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229b0:	fffff800 	.word	0xfffff800

080229b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80229b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229b8:	b087      	sub	sp, #28
 80229ba:	468b      	mov	fp, r1
 80229bc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80229be:	9204      	str	r2, [sp, #16]
 80229c0:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80229c4:	9205      	str	r2, [sp, #20]
 80229c6:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 80229ca:	6861      	ldr	r1, [r4, #4]
 80229cc:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 80229d0:	fb01 2000 	mla	r0, r1, r0, r2
 80229d4:	6822      	ldr	r2, [r4, #0]
 80229d6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80229da:	f8de 2000 	ldr.w	r2, [lr]
 80229de:	9201      	str	r2, [sp, #4]
 80229e0:	f8de 2004 	ldr.w	r2, [lr, #4]
 80229e4:	9202      	str	r2, [sp, #8]
 80229e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80229ea:	f1bb 0f00 	cmp.w	fp, #0
 80229ee:	dc03      	bgt.n	80229f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80229f0:	9a04      	ldr	r2, [sp, #16]
 80229f2:	2a00      	cmp	r2, #0
 80229f4:	f340 8142 	ble.w	8022c7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80229f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80229fa:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80229fe:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8022a02:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8022a06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022a08:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022a0c:	2b00      	cmp	r3, #0
 8022a0e:	dd0e      	ble.n	8022a2e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022a10:	140c      	asrs	r4, r1, #16
 8022a12:	d405      	bmi.n	8022a20 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022a14:	42bc      	cmp	r4, r7
 8022a16:	da03      	bge.n	8022a20 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022a18:	1414      	asrs	r4, r2, #16
 8022a1a:	d401      	bmi.n	8022a20 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8022a1c:	42b4      	cmp	r4, r6
 8022a1e:	db07      	blt.n	8022a30 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8022a20:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022a22:	4421      	add	r1, r4
 8022a24:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022a26:	3b01      	subs	r3, #1
 8022a28:	4422      	add	r2, r4
 8022a2a:	3002      	adds	r0, #2
 8022a2c:	e7ee      	b.n	8022a0c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022a2e:	d019      	beq.n	8022a64 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8022a30:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8022a32:	1e5c      	subs	r4, r3, #1
 8022a34:	fb05 1504 	mla	r5, r5, r4, r1
 8022a38:	142d      	asrs	r5, r5, #16
 8022a3a:	d409      	bmi.n	8022a50 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022a3c:	42bd      	cmp	r5, r7
 8022a3e:	da07      	bge.n	8022a50 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022a40:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022a42:	fb05 2404 	mla	r4, r5, r4, r2
 8022a46:	1424      	asrs	r4, r4, #16
 8022a48:	d402      	bmi.n	8022a50 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8022a4a:	42b4      	cmp	r4, r6
 8022a4c:	f2c0 80b1 	blt.w	8022bb2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8022a50:	f04f 0800 	mov.w	r8, #0
 8022a54:	eb03 0408 	add.w	r4, r3, r8
 8022a58:	2c00      	cmp	r4, #0
 8022a5a:	dc3e      	bgt.n	8022ada <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8022a5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022a60:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022a64:	f1bb 0f00 	cmp.w	fp, #0
 8022a68:	f340 8108 	ble.w	8022c7c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8022a6c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022a70:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022a74:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022a78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022a7a:	f1bb 0b01 	subs.w	fp, fp, #1
 8022a7e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022a82:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022a86:	eeb0 6a62 	vmov.f32	s12, s5
 8022a8a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022a8e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022a92:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022a96:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8022a9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022a9e:	eeb0 6a43 	vmov.f32	s12, s6
 8022aa2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022aa6:	ee12 2a90 	vmov	r2, s5
 8022aaa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022aae:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ab2:	ee13 2a10 	vmov	r2, s6
 8022ab6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022aba:	9313      	str	r3, [sp, #76]	; 0x4c
 8022abc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022abe:	fb92 f3f3 	sdiv	r3, r2, r3
 8022ac2:	9a04      	ldr	r2, [sp, #16]
 8022ac4:	9314      	str	r3, [sp, #80]	; 0x50
 8022ac6:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8022aca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022acc:	eeb0 3a67 	vmov.f32	s6, s15
 8022ad0:	bf08      	it	eq
 8022ad2:	4613      	moveq	r3, r2
 8022ad4:	eef0 2a47 	vmov.f32	s5, s14
 8022ad8:	e787      	b.n	80229ea <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8022ada:	140e      	asrs	r6, r1, #16
 8022adc:	d462      	bmi.n	8022ba4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8022ade:	f8de 5008 	ldr.w	r5, [lr, #8]
 8022ae2:	42b5      	cmp	r5, r6
 8022ae4:	dd5e      	ble.n	8022ba4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8022ae6:	1417      	asrs	r7, r2, #16
 8022ae8:	d45c      	bmi.n	8022ba4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8022aea:	f8de 400c 	ldr.w	r4, [lr, #12]
 8022aee:	42bc      	cmp	r4, r7
 8022af0:	dd58      	ble.n	8022ba4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8022af2:	b22d      	sxth	r5, r5
 8022af4:	fb07 6505 	mla	r5, r7, r5, r6
 8022af8:	9c02      	ldr	r4, [sp, #8]
 8022afa:	5d66      	ldrb	r6, [r4, r5]
 8022afc:	2e00      	cmp	r6, #0
 8022afe:	d051      	beq.n	8022ba4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8022b00:	9c01      	ldr	r4, [sp, #4]
 8022b02:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8022b06:	f06f 0401 	mvn.w	r4, #1
 8022b0a:	fb04 f408 	mul.w	r4, r4, r8
 8022b0e:	9403      	str	r4, [sp, #12]
 8022b10:	5b05      	ldrh	r5, [r0, r4]
 8022b12:	9c05      	ldr	r4, [sp, #20]
 8022b14:	4366      	muls	r6, r4
 8022b16:	1c74      	adds	r4, r6, #1
 8022b18:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8022b1c:	1224      	asrs	r4, r4, #8
 8022b1e:	b2a7      	uxth	r7, r4
 8022b20:	122e      	asrs	r6, r5, #8
 8022b22:	43e4      	mvns	r4, r4
 8022b24:	b2e4      	uxtb	r4, r4
 8022b26:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8022b2a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022b2e:	fb16 f604 	smulbb	r6, r6, r4
 8022b32:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8022b36:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022b3a:	00ed      	lsls	r5, r5, #3
 8022b3c:	fb0c 6c07 	mla	ip, ip, r7, r6
 8022b40:	b2ed      	uxtb	r5, r5
 8022b42:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8022b46:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8022b4a:	fb15 f504 	smulbb	r5, r5, r4
 8022b4e:	fa5f f989 	uxtb.w	r9, r9
 8022b52:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8022b56:	fb09 5507 	mla	r5, r9, r7, r5
 8022b5a:	fb1a fa04 	smulbb	sl, sl, r4
 8022b5e:	fa1f fc8c 	uxth.w	ip, ip
 8022b62:	b2ad      	uxth	r5, r5
 8022b64:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022b68:	fb06 a607 	mla	r6, r6, r7, sl
 8022b6c:	f10c 0401 	add.w	r4, ip, #1
 8022b70:	f105 0a01 	add.w	sl, r5, #1
 8022b74:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8022b78:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8022b7c:	b2b6      	uxth	r6, r6
 8022b7e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022b82:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022b86:	ea4a 0c0c 	orr.w	ip, sl, ip
 8022b8a:	f106 0a01 	add.w	sl, r6, #1
 8022b8e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8022b92:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022b96:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022b9a:	9c03      	ldr	r4, [sp, #12]
 8022b9c:	ea4c 0c0a 	orr.w	ip, ip, sl
 8022ba0:	f820 c004 	strh.w	ip, [r0, r4]
 8022ba4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022ba6:	4421      	add	r1, r4
 8022ba8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022baa:	f108 38ff 	add.w	r8, r8, #4294967295
 8022bae:	4422      	add	r2, r4
 8022bb0:	e750      	b.n	8022a54 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8022bb2:	f04f 0900 	mov.w	r9, #0
 8022bb6:	eba3 0409 	sub.w	r4, r3, r9
 8022bba:	2c00      	cmp	r4, #0
 8022bbc:	f77f af4e 	ble.w	8022a5c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8022bc0:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8022bc4:	140d      	asrs	r5, r1, #16
 8022bc6:	1414      	asrs	r4, r2, #16
 8022bc8:	fb06 5404 	mla	r4, r6, r4, r5
 8022bcc:	9d02      	ldr	r5, [sp, #8]
 8022bce:	5d2e      	ldrb	r6, [r5, r4]
 8022bd0:	2e00      	cmp	r6, #0
 8022bd2:	d04c      	beq.n	8022c6e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8022bd4:	9d01      	ldr	r5, [sp, #4]
 8022bd6:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8022bda:	9c05      	ldr	r4, [sp, #20]
 8022bdc:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8022be0:	4366      	muls	r6, r4
 8022be2:	1c74      	adds	r4, r6, #1
 8022be4:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8022be8:	1224      	asrs	r4, r4, #8
 8022bea:	b2a7      	uxth	r7, r4
 8022bec:	122e      	asrs	r6, r5, #8
 8022bee:	43e4      	mvns	r4, r4
 8022bf0:	b2e4      	uxtb	r4, r4
 8022bf2:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8022bf6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022bfa:	fb16 f604 	smulbb	r6, r6, r4
 8022bfe:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8022c02:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022c06:	00ed      	lsls	r5, r5, #3
 8022c08:	fb0c 6c07 	mla	ip, ip, r7, r6
 8022c0c:	b2ed      	uxtb	r5, r5
 8022c0e:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8022c12:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8022c16:	fb15 f504 	smulbb	r5, r5, r4
 8022c1a:	fa5f f888 	uxtb.w	r8, r8
 8022c1e:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8022c22:	fb08 5507 	mla	r5, r8, r7, r5
 8022c26:	fb1a fa04 	smulbb	sl, sl, r4
 8022c2a:	fa1f fc8c 	uxth.w	ip, ip
 8022c2e:	b2ad      	uxth	r5, r5
 8022c30:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022c34:	fb06 a607 	mla	r6, r6, r7, sl
 8022c38:	f10c 0401 	add.w	r4, ip, #1
 8022c3c:	f105 0a01 	add.w	sl, r5, #1
 8022c40:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8022c44:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8022c48:	b2b6      	uxth	r6, r6
 8022c4a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022c4e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022c52:	ea4a 0c0c 	orr.w	ip, sl, ip
 8022c56:	f106 0a01 	add.w	sl, r6, #1
 8022c5a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8022c5e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022c62:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022c66:	ea4c 0c0a 	orr.w	ip, ip, sl
 8022c6a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8022c6e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022c70:	4421      	add	r1, r4
 8022c72:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022c74:	f109 0901 	add.w	r9, r9, #1
 8022c78:	4422      	add	r2, r4
 8022c7a:	e79c      	b.n	8022bb6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8022c7c:	b007      	add	sp, #28
 8022c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022c82 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022c82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c86:	b085      	sub	sp, #20
 8022c88:	468b      	mov	fp, r1
 8022c8a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8022c8c:	9203      	str	r2, [sp, #12]
 8022c8e:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8022c92:	6861      	ldr	r1, [r4, #4]
 8022c94:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8022c98:	fb01 2000 	mla	r0, r1, r0, r2
 8022c9c:	6822      	ldr	r2, [r4, #0]
 8022c9e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8022ca2:	f8d8 2000 	ldr.w	r2, [r8]
 8022ca6:	9200      	str	r2, [sp, #0]
 8022ca8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8022cac:	9201      	str	r2, [sp, #4]
 8022cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022cb2:	f1bb 0f00 	cmp.w	fp, #0
 8022cb6:	dc03      	bgt.n	8022cc0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8022cb8:	9a03      	ldr	r2, [sp, #12]
 8022cba:	2a00      	cmp	r2, #0
 8022cbc:	f340 8146 	ble.w	8022f4c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8022cc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022cc2:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8022cc6:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8022cca:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8022cce:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022cd0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022cd4:	2b00      	cmp	r3, #0
 8022cd6:	dd0e      	ble.n	8022cf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8022cd8:	140c      	asrs	r4, r1, #16
 8022cda:	d405      	bmi.n	8022ce8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022cdc:	42bc      	cmp	r4, r7
 8022cde:	da03      	bge.n	8022ce8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022ce0:	1414      	asrs	r4, r2, #16
 8022ce2:	d401      	bmi.n	8022ce8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8022ce4:	42b4      	cmp	r4, r6
 8022ce6:	db07      	blt.n	8022cf8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022ce8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022cea:	4421      	add	r1, r4
 8022cec:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022cee:	3b01      	subs	r3, #1
 8022cf0:	4422      	add	r2, r4
 8022cf2:	3002      	adds	r0, #2
 8022cf4:	e7ee      	b.n	8022cd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8022cf6:	d017      	beq.n	8022d28 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8022cf8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022cfa:	1e5c      	subs	r4, r3, #1
 8022cfc:	fb05 1504 	mla	r5, r5, r4, r1
 8022d00:	142d      	asrs	r5, r5, #16
 8022d02:	d409      	bmi.n	8022d18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022d04:	42bd      	cmp	r5, r7
 8022d06:	da07      	bge.n	8022d18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022d08:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022d0a:	fb05 2404 	mla	r4, r5, r4, r2
 8022d0e:	1424      	asrs	r4, r4, #16
 8022d10:	d402      	bmi.n	8022d18 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022d12:	42b4      	cmp	r4, r6
 8022d14:	f2c0 80b3 	blt.w	8022e7e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8022d18:	2600      	movs	r6, #0
 8022d1a:	199c      	adds	r4, r3, r6
 8022d1c:	2c00      	cmp	r4, #0
 8022d1e:	dc3e      	bgt.n	8022d9e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8022d20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022d24:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022d28:	f1bb 0f00 	cmp.w	fp, #0
 8022d2c:	f340 810e 	ble.w	8022f4c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8022d30:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022d34:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022d38:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022d3e:	f1bb 0b01 	subs.w	fp, fp, #1
 8022d42:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022d46:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022d4a:	eeb0 6a62 	vmov.f32	s12, s5
 8022d4e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022d52:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022d56:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022d5a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8022d5e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022d62:	eeb0 6a43 	vmov.f32	s12, s6
 8022d66:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022d6a:	ee12 2a90 	vmov	r2, s5
 8022d6e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022d72:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d76:	ee13 2a10 	vmov	r2, s6
 8022d7a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022d7e:	9311      	str	r3, [sp, #68]	; 0x44
 8022d80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022d82:	fb92 f3f3 	sdiv	r3, r2, r3
 8022d86:	9a03      	ldr	r2, [sp, #12]
 8022d88:	9312      	str	r3, [sp, #72]	; 0x48
 8022d8a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8022d8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022d90:	eeb0 3a67 	vmov.f32	s6, s15
 8022d94:	bf08      	it	eq
 8022d96:	4613      	moveq	r3, r2
 8022d98:	eef0 2a47 	vmov.f32	s5, s14
 8022d9c:	e789      	b.n	8022cb2 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8022d9e:	140f      	asrs	r7, r1, #16
 8022da0:	d418      	bmi.n	8022dd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8022da2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8022da6:	42bd      	cmp	r5, r7
 8022da8:	dd14      	ble.n	8022dd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8022daa:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8022dae:	d411      	bmi.n	8022dd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8022db0:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8022db4:	4564      	cmp	r4, ip
 8022db6:	dd0d      	ble.n	8022dd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8022db8:	b22d      	sxth	r5, r5
 8022dba:	fb0c 7505 	mla	r5, ip, r5, r7
 8022dbe:	9c01      	ldr	r4, [sp, #4]
 8022dc0:	5d64      	ldrb	r4, [r4, r5]
 8022dc2:	2cff      	cmp	r4, #255	; 0xff
 8022dc4:	d10c      	bne.n	8022de0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8022dc6:	9c00      	ldr	r4, [sp, #0]
 8022dc8:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8022dcc:	f06f 0401 	mvn.w	r4, #1
 8022dd0:	4374      	muls	r4, r6
 8022dd2:	5305      	strh	r5, [r0, r4]
 8022dd4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022dd6:	4421      	add	r1, r4
 8022dd8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022dda:	3e01      	subs	r6, #1
 8022ddc:	4422      	add	r2, r4
 8022dde:	e79c      	b.n	8022d1a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8022de0:	2c00      	cmp	r4, #0
 8022de2:	d0f7      	beq.n	8022dd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8022de4:	9f00      	ldr	r7, [sp, #0]
 8022de6:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 8022dea:	f06f 0501 	mvn.w	r5, #1
 8022dee:	4375      	muls	r5, r6
 8022df0:	9502      	str	r5, [sp, #8]
 8022df2:	5b45      	ldrh	r5, [r0, r5]
 8022df4:	fa1f fc84 	uxth.w	ip, r4
 8022df8:	122f      	asrs	r7, r5, #8
 8022dfa:	43e4      	mvns	r4, r4
 8022dfc:	b2e4      	uxtb	r4, r4
 8022dfe:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8022e02:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8022e06:	fb17 f704 	smulbb	r7, r7, r4
 8022e0a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8022e0e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8022e12:	00ed      	lsls	r5, r5, #3
 8022e14:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8022e18:	b2ed      	uxtb	r5, r5
 8022e1a:	ea4f 07e9 	mov.w	r7, r9, asr #3
 8022e1e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8022e22:	fb15 f504 	smulbb	r5, r5, r4
 8022e26:	fa5f f989 	uxtb.w	r9, r9
 8022e2a:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8022e2e:	fb09 550c 	mla	r5, r9, ip, r5
 8022e32:	fb1a fa04 	smulbb	sl, sl, r4
 8022e36:	fa1f fe8e 	uxth.w	lr, lr
 8022e3a:	b2ad      	uxth	r5, r5
 8022e3c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022e40:	fb07 a70c 	mla	r7, r7, ip, sl
 8022e44:	f10e 0401 	add.w	r4, lr, #1
 8022e48:	f105 0a01 	add.w	sl, r5, #1
 8022e4c:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8022e50:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8022e54:	b2bf      	uxth	r7, r7
 8022e56:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022e5a:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8022e5e:	ea4a 0e0e 	orr.w	lr, sl, lr
 8022e62:	f107 0a01 	add.w	sl, r7, #1
 8022e66:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8022e6a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022e6e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022e72:	9c02      	ldr	r4, [sp, #8]
 8022e74:	ea4e 0e0a 	orr.w	lr, lr, sl
 8022e78:	f820 e004 	strh.w	lr, [r0, r4]
 8022e7c:	e7aa      	b.n	8022dd4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8022e7e:	f04f 0900 	mov.w	r9, #0
 8022e82:	eba3 0409 	sub.w	r4, r3, r9
 8022e86:	2c00      	cmp	r4, #0
 8022e88:	f77f af4a 	ble.w	8022d20 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8022e8c:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8022e90:	1414      	asrs	r4, r2, #16
 8022e92:	140d      	asrs	r5, r1, #16
 8022e94:	fb06 5504 	mla	r5, r6, r4, r5
 8022e98:	9c01      	ldr	r4, [sp, #4]
 8022e9a:	5d64      	ldrb	r4, [r4, r5]
 8022e9c:	2cff      	cmp	r4, #255	; 0xff
 8022e9e:	d10b      	bne.n	8022eb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8022ea0:	9c00      	ldr	r4, [sp, #0]
 8022ea2:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8022ea6:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 8022eaa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8022eac:	4421      	add	r1, r4
 8022eae:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022eb0:	f109 0901 	add.w	r9, r9, #1
 8022eb4:	4422      	add	r2, r4
 8022eb6:	e7e4      	b.n	8022e82 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8022eb8:	2c00      	cmp	r4, #0
 8022eba:	d0f6      	beq.n	8022eaa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8022ebc:	9e00      	ldr	r6, [sp, #0]
 8022ebe:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8022ec2:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8022ec6:	b2a7      	uxth	r7, r4
 8022ec8:	122e      	asrs	r6, r5, #8
 8022eca:	43e4      	mvns	r4, r4
 8022ecc:	b2e4      	uxtb	r4, r4
 8022ece:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8022ed2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8022ed6:	fb16 f604 	smulbb	r6, r6, r4
 8022eda:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8022ede:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022ee2:	00ed      	lsls	r5, r5, #3
 8022ee4:	fb0c 6c07 	mla	ip, ip, r7, r6
 8022ee8:	b2ed      	uxtb	r5, r5
 8022eea:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8022eee:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022ef2:	fb15 f504 	smulbb	r5, r5, r4
 8022ef6:	fa5f fe8e 	uxtb.w	lr, lr
 8022efa:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8022efe:	fb0e 5507 	mla	r5, lr, r7, r5
 8022f02:	fb1a fa04 	smulbb	sl, sl, r4
 8022f06:	fa1f fc8c 	uxth.w	ip, ip
 8022f0a:	b2ad      	uxth	r5, r5
 8022f0c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8022f10:	fb06 a607 	mla	r6, r6, r7, sl
 8022f14:	f10c 0401 	add.w	r4, ip, #1
 8022f18:	f105 0a01 	add.w	sl, r5, #1
 8022f1c:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8022f20:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8022f24:	b2b6      	uxth	r6, r6
 8022f26:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8022f2a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022f2e:	ea4a 0c0c 	orr.w	ip, sl, ip
 8022f32:	f106 0a01 	add.w	sl, r6, #1
 8022f36:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8022f3a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8022f3e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8022f42:	ea4c 0c0a 	orr.w	ip, ip, sl
 8022f46:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8022f4a:	e7ae      	b.n	8022eaa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8022f4c:	b005      	add	sp, #20
 8022f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022f52 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022f52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f56:	b085      	sub	sp, #20
 8022f58:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8022f5a:	9203      	str	r2, [sp, #12]
 8022f5c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8022f60:	9201      	str	r2, [sp, #4]
 8022f62:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8022f66:	9100      	str	r1, [sp, #0]
 8022f68:	6841      	ldr	r1, [r0, #4]
 8022f6a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8022f6e:	fb01 2404 	mla	r4, r1, r4, r2
 8022f72:	6802      	ldr	r2, [r0, #0]
 8022f74:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8022f78:	f8de 2000 	ldr.w	r2, [lr]
 8022f7c:	9202      	str	r2, [sp, #8]
 8022f7e:	9a01      	ldr	r2, [sp, #4]
 8022f80:	43d6      	mvns	r6, r2
 8022f82:	b2f6      	uxtb	r6, r6
 8022f84:	9a00      	ldr	r2, [sp, #0]
 8022f86:	2a00      	cmp	r2, #0
 8022f88:	dc03      	bgt.n	8022f92 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8022f8a:	9a03      	ldr	r2, [sp, #12]
 8022f8c:	2a00      	cmp	r2, #0
 8022f8e:	f340 8124 	ble.w	80231da <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8022f92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022f94:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8022f98:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8022f9c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8022fa0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022fa2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8022fa6:	2b00      	cmp	r3, #0
 8022fa8:	dd0e      	ble.n	8022fc8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8022faa:	1408      	asrs	r0, r1, #16
 8022fac:	d405      	bmi.n	8022fba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8022fae:	4560      	cmp	r0, ip
 8022fb0:	da03      	bge.n	8022fba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8022fb2:	1410      	asrs	r0, r2, #16
 8022fb4:	d401      	bmi.n	8022fba <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8022fb6:	42b8      	cmp	r0, r7
 8022fb8:	db07      	blt.n	8022fca <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022fba:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022fbc:	4401      	add	r1, r0
 8022fbe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8022fc0:	3b01      	subs	r3, #1
 8022fc2:	4402      	add	r2, r0
 8022fc4:	3402      	adds	r4, #2
 8022fc6:	e7ee      	b.n	8022fa6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8022fc8:	d06e      	beq.n	80230a8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8022fca:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022fcc:	1e58      	subs	r0, r3, #1
 8022fce:	fb05 1500 	mla	r5, r5, r0, r1
 8022fd2:	142d      	asrs	r5, r5, #16
 8022fd4:	d45c      	bmi.n	8023090 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8022fd6:	4565      	cmp	r5, ip
 8022fd8:	da5a      	bge.n	8023090 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8022fda:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022fdc:	fb05 2000 	mla	r0, r5, r0, r2
 8022fe0:	1400      	asrs	r0, r0, #16
 8022fe2:	d455      	bmi.n	8023090 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8022fe4:	42b8      	cmp	r0, r7
 8022fe6:	da53      	bge.n	8023090 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8022fe8:	f8bd b004 	ldrh.w	fp, [sp, #4]
 8022fec:	4699      	mov	r9, r3
 8022fee:	46a2      	mov	sl, r4
 8022ff0:	f1b9 0f00 	cmp.w	r9, #0
 8022ff4:	dd54      	ble.n	80230a0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8022ff6:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8022ffa:	140d      	asrs	r5, r1, #16
 8022ffc:	1410      	asrs	r0, r2, #16
 8022ffe:	fb07 5000 	mla	r0, r7, r0, r5
 8023002:	9d02      	ldr	r5, [sp, #8]
 8023004:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8023008:	f8ba 5000 	ldrh.w	r5, [sl]
 802300c:	122f      	asrs	r7, r5, #8
 802300e:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8023012:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8023016:	fb17 f706 	smulbb	r7, r7, r6
 802301a:	ea4f 08e5 	mov.w	r8, r5, asr #3
 802301e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023022:	00ed      	lsls	r5, r5, #3
 8023024:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8023028:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 802302c:	10c7      	asrs	r7, r0, #3
 802302e:	b2ed      	uxtb	r5, r5
 8023030:	00c0      	lsls	r0, r0, #3
 8023032:	fb18 f806 	smulbb	r8, r8, r6
 8023036:	fb15 f506 	smulbb	r5, r5, r6
 802303a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802303e:	b2c0      	uxtb	r0, r0
 8023040:	fa1f fc8c 	uxth.w	ip, ip
 8023044:	fb07 870b 	mla	r7, r7, fp, r8
 8023048:	fb00 500b 	mla	r0, r0, fp, r5
 802304c:	b280      	uxth	r0, r0
 802304e:	b2bf      	uxth	r7, r7
 8023050:	f10c 0501 	add.w	r5, ip, #1
 8023054:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8023058:	f107 0801 	add.w	r8, r7, #1
 802305c:	1c45      	adds	r5, r0, #1
 802305e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8023062:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8023066:	9811      	ldr	r0, [sp, #68]	; 0x44
 8023068:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802306c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8023070:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8023074:	ea45 0c0c 	orr.w	ip, r5, ip
 8023078:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802307c:	4401      	add	r1, r0
 802307e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8023080:	ea4c 0c08 	orr.w	ip, ip, r8
 8023084:	f82a cb02 	strh.w	ip, [sl], #2
 8023088:	4402      	add	r2, r0
 802308a:	f109 39ff 	add.w	r9, r9, #4294967295
 802308e:	e7af      	b.n	8022ff0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023090:	f8bd a004 	ldrh.w	sl, [sp, #4]
 8023094:	f04f 0800 	mov.w	r8, #0
 8023098:	eb03 0008 	add.w	r0, r3, r8
 802309c:	2800      	cmp	r0, #0
 802309e:	dc41      	bgt.n	8023124 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80230a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80230a4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80230a8:	9b00      	ldr	r3, [sp, #0]
 80230aa:	2b00      	cmp	r3, #0
 80230ac:	f340 8095 	ble.w	80231da <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80230b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80230b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80230b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80230bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80230be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80230c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80230c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80230ca:	eef0 6a62 	vmov.f32	s13, s5
 80230ce:	ee61 7a27 	vmul.f32	s15, s2, s15
 80230d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80230d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80230da:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80230de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80230e2:	eef0 6a43 	vmov.f32	s13, s6
 80230e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80230ea:	ee12 2a90 	vmov	r2, s5
 80230ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80230f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80230f6:	ee13 2a10 	vmov	r2, s6
 80230fa:	9311      	str	r3, [sp, #68]	; 0x44
 80230fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80230fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8023102:	9312      	str	r3, [sp, #72]	; 0x48
 8023104:	9b00      	ldr	r3, [sp, #0]
 8023106:	9a03      	ldr	r2, [sp, #12]
 8023108:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802310c:	3b01      	subs	r3, #1
 802310e:	9300      	str	r3, [sp, #0]
 8023110:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8023114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023116:	eeb0 3a67 	vmov.f32	s6, s15
 802311a:	bf08      	it	eq
 802311c:	4613      	moveq	r3, r2
 802311e:	eef0 2a47 	vmov.f32	s5, s14
 8023122:	e72f      	b.n	8022f84 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8023124:	140f      	asrs	r7, r1, #16
 8023126:	d451      	bmi.n	80231cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8023128:	f8de 5008 	ldr.w	r5, [lr, #8]
 802312c:	42bd      	cmp	r5, r7
 802312e:	dd4d      	ble.n	80231cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8023130:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8023134:	d44a      	bmi.n	80231cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8023136:	f8de 000c 	ldr.w	r0, [lr, #12]
 802313a:	4560      	cmp	r0, ip
 802313c:	dd46      	ble.n	80231cc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 802313e:	b22d      	sxth	r5, r5
 8023140:	fb0c 7505 	mla	r5, ip, r5, r7
 8023144:	9802      	ldr	r0, [sp, #8]
 8023146:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 802314a:	f06f 0501 	mvn.w	r5, #1
 802314e:	fb05 fb08 	mul.w	fp, r5, r8
 8023152:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8023156:	f834 500b 	ldrh.w	r5, [r4, fp]
 802315a:	122f      	asrs	r7, r5, #8
 802315c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8023160:	fb17 f706 	smulbb	r7, r7, r6
 8023164:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8023168:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802316c:	00ed      	lsls	r5, r5, #3
 802316e:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8023172:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8023176:	10c7      	asrs	r7, r0, #3
 8023178:	b2ed      	uxtb	r5, r5
 802317a:	00c0      	lsls	r0, r0, #3
 802317c:	fb19 f906 	smulbb	r9, r9, r6
 8023180:	fb15 f506 	smulbb	r5, r5, r6
 8023184:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023188:	b2c0      	uxtb	r0, r0
 802318a:	fa1f fc8c 	uxth.w	ip, ip
 802318e:	fb07 970a 	mla	r7, r7, sl, r9
 8023192:	fb00 500a 	mla	r0, r0, sl, r5
 8023196:	b2bf      	uxth	r7, r7
 8023198:	b280      	uxth	r0, r0
 802319a:	f10c 0501 	add.w	r5, ip, #1
 802319e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80231a2:	f107 0901 	add.w	r9, r7, #1
 80231a6:	1c45      	adds	r5, r0, #1
 80231a8:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 80231ac:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 80231b0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80231b4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80231b8:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80231bc:	ea45 0c0c 	orr.w	ip, r5, ip
 80231c0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80231c4:	ea4c 0c09 	orr.w	ip, ip, r9
 80231c8:	f824 c00b 	strh.w	ip, [r4, fp]
 80231cc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80231ce:	4401      	add	r1, r0
 80231d0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80231d2:	f108 38ff 	add.w	r8, r8, #4294967295
 80231d6:	4402      	add	r2, r0
 80231d8:	e75e      	b.n	8023098 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80231da:	b005      	add	sp, #20
 80231dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080231e0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80231e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231e4:	b085      	sub	sp, #20
 80231e6:	4693      	mov	fp, r2
 80231e8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80231ea:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80231ec:	6870      	ldr	r0, [r6, #4]
 80231ee:	9101      	str	r1, [sp, #4]
 80231f0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80231f4:	fb00 2404 	mla	r4, r0, r4, r2
 80231f8:	6832      	ldr	r2, [r6, #0]
 80231fa:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 80231fe:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8023202:	682a      	ldr	r2, [r5, #0]
 8023204:	9202      	str	r2, [sp, #8]
 8023206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802320a:	9a01      	ldr	r2, [sp, #4]
 802320c:	2a00      	cmp	r2, #0
 802320e:	dc03      	bgt.n	8023218 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8023210:	f1bb 0f00 	cmp.w	fp, #0
 8023214:	f340 809a 	ble.w	802334c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8023218:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802321a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 802321e:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8023222:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8023226:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023228:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 802322c:	2b00      	cmp	r3, #0
 802322e:	dd0c      	ble.n	802324a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8023230:	1406      	asrs	r6, r0, #16
 8023232:	d405      	bmi.n	8023240 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8023234:	454e      	cmp	r6, r9
 8023236:	da03      	bge.n	8023240 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8023238:	1416      	asrs	r6, r2, #16
 802323a:	d401      	bmi.n	8023240 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802323c:	4546      	cmp	r6, r8
 802323e:	db05      	blt.n	802324c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8023240:	4470      	add	r0, lr
 8023242:	4462      	add	r2, ip
 8023244:	3b01      	subs	r3, #1
 8023246:	3402      	adds	r4, #2
 8023248:	e7f0      	b.n	802322c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802324a:	d00f      	beq.n	802326c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802324c:	1e5e      	subs	r6, r3, #1
 802324e:	fb0e 0706 	mla	r7, lr, r6, r0
 8023252:	143f      	asrs	r7, r7, #16
 8023254:	d541      	bpl.n	80232da <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8023256:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 802325a:	4698      	mov	r8, r3
 802325c:	9603      	str	r6, [sp, #12]
 802325e:	f1b8 0f00 	cmp.w	r8, #0
 8023262:	dc56      	bgt.n	8023312 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8023264:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023268:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802326c:	9b01      	ldr	r3, [sp, #4]
 802326e:	2b00      	cmp	r3, #0
 8023270:	dd6c      	ble.n	802334c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8023272:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023276:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802327a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802327e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023280:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023284:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023288:	eeb0 6a62 	vmov.f32	s12, s5
 802328c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023290:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023294:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023298:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 802329c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80232a0:	eeb0 6a43 	vmov.f32	s12, s6
 80232a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80232a8:	ee12 2a90 	vmov	r2, s5
 80232ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80232b0:	fb92 fef3 	sdiv	lr, r2, r3
 80232b4:	ee13 2a10 	vmov	r2, s6
 80232b8:	fb92 fcf3 	sdiv	ip, r2, r3
 80232bc:	9b01      	ldr	r3, [sp, #4]
 80232be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80232c2:	3b01      	subs	r3, #1
 80232c4:	9301      	str	r3, [sp, #4]
 80232c6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80232ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80232cc:	eeb0 3a67 	vmov.f32	s6, s15
 80232d0:	bf08      	it	eq
 80232d2:	465b      	moveq	r3, fp
 80232d4:	eef0 2a47 	vmov.f32	s5, s14
 80232d8:	e797      	b.n	802320a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80232da:	454f      	cmp	r7, r9
 80232dc:	dabb      	bge.n	8023256 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80232de:	fb0c 2606 	mla	r6, ip, r6, r2
 80232e2:	1436      	asrs	r6, r6, #16
 80232e4:	d4b7      	bmi.n	8023256 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80232e6:	4546      	cmp	r6, r8
 80232e8:	dab5      	bge.n	8023256 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80232ea:	461e      	mov	r6, r3
 80232ec:	46a0      	mov	r8, r4
 80232ee:	2e00      	cmp	r6, #0
 80232f0:	ddb8      	ble.n	8023264 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80232f2:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80232f6:	9902      	ldr	r1, [sp, #8]
 80232f8:	1417      	asrs	r7, r2, #16
 80232fa:	ea4f 4920 	mov.w	r9, r0, asr #16
 80232fe:	fb0a 9707 	mla	r7, sl, r7, r9
 8023302:	4470      	add	r0, lr
 8023304:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8023308:	f828 7b02 	strh.w	r7, [r8], #2
 802330c:	4462      	add	r2, ip
 802330e:	3e01      	subs	r6, #1
 8023310:	e7ed      	b.n	80232ee <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8023312:	ea5f 4920 	movs.w	r9, r0, asr #16
 8023316:	d414      	bmi.n	8023342 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8023318:	68ae      	ldr	r6, [r5, #8]
 802331a:	454e      	cmp	r6, r9
 802331c:	dd11      	ble.n	8023342 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 802331e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8023322:	d40e      	bmi.n	8023342 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8023324:	68ef      	ldr	r7, [r5, #12]
 8023326:	4557      	cmp	r7, sl
 8023328:	dd0b      	ble.n	8023342 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 802332a:	b236      	sxth	r6, r6
 802332c:	fb0a 9606 	mla	r6, sl, r6, r9
 8023330:	9f02      	ldr	r7, [sp, #8]
 8023332:	f06f 0101 	mvn.w	r1, #1
 8023336:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 802333a:	fb01 f608 	mul.w	r6, r1, r8
 802333e:	9903      	ldr	r1, [sp, #12]
 8023340:	538f      	strh	r7, [r1, r6]
 8023342:	4470      	add	r0, lr
 8023344:	4462      	add	r2, ip
 8023346:	f108 38ff 	add.w	r8, r8, #4294967295
 802334a:	e788      	b.n	802325e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 802334c:	b005      	add	sp, #20
 802334e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023352 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023352:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023356:	b087      	sub	sp, #28
 8023358:	468b      	mov	fp, r1
 802335a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802335c:	9203      	str	r2, [sp, #12]
 802335e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8023362:	9204      	str	r2, [sp, #16]
 8023364:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8023368:	6841      	ldr	r1, [r0, #4]
 802336a:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 802336e:	fb01 2505 	mla	r5, r1, r5, r2
 8023372:	6802      	ldr	r2, [r0, #0]
 8023374:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8023378:	f8d9 2000 	ldr.w	r2, [r9]
 802337c:	9201      	str	r2, [sp, #4]
 802337e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023382:	f1bb 0f00 	cmp.w	fp, #0
 8023386:	dc03      	bgt.n	8023390 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8023388:	9a03      	ldr	r2, [sp, #12]
 802338a:	2a00      	cmp	r2, #0
 802338c:	f340 8159 	ble.w	8023642 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8023390:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023392:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8023396:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 802339a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802339e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80233a0:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80233a4:	2b00      	cmp	r3, #0
 80233a6:	dd0e      	ble.n	80233c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80233a8:	1402      	asrs	r2, r0, #16
 80233aa:	d405      	bmi.n	80233b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80233ac:	42ba      	cmp	r2, r7
 80233ae:	da03      	bge.n	80233b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80233b0:	140a      	asrs	r2, r1, #16
 80233b2:	d401      	bmi.n	80233b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80233b4:	42b2      	cmp	r2, r6
 80233b6:	db07      	blt.n	80233c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80233b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80233ba:	4410      	add	r0, r2
 80233bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80233be:	3b01      	subs	r3, #1
 80233c0:	4411      	add	r1, r2
 80233c2:	3502      	adds	r5, #2
 80233c4:	e7ee      	b.n	80233a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80233c6:	d017      	beq.n	80233f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80233c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80233ca:	1e5a      	subs	r2, r3, #1
 80233cc:	fb04 0402 	mla	r4, r4, r2, r0
 80233d0:	1424      	asrs	r4, r4, #16
 80233d2:	d409      	bmi.n	80233e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80233d4:	42bc      	cmp	r4, r7
 80233d6:	da07      	bge.n	80233e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80233d8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80233da:	fb04 1202 	mla	r2, r4, r2, r1
 80233de:	1412      	asrs	r2, r2, #16
 80233e0:	d402      	bmi.n	80233e8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80233e2:	42b2      	cmp	r2, r6
 80233e4:	f2c0 80bf 	blt.w	8023566 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80233e8:	2700      	movs	r7, #0
 80233ea:	19da      	adds	r2, r3, r7
 80233ec:	2a00      	cmp	r2, #0
 80233ee:	dc3e      	bgt.n	802346e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80233f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80233f4:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80233f8:	f1bb 0f00 	cmp.w	fp, #0
 80233fc:	f340 8121 	ble.w	8023642 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8023400:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023404:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023408:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802340c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802340e:	f1bb 0b01 	subs.w	fp, fp, #1
 8023412:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023416:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802341a:	eeb0 6a62 	vmov.f32	s12, s5
 802341e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023422:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023426:	ee77 2a62 	vsub.f32	s5, s14, s5
 802342a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802342e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023432:	eeb0 6a43 	vmov.f32	s12, s6
 8023436:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802343a:	ee12 2a90 	vmov	r2, s5
 802343e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023442:	fb92 f3f3 	sdiv	r3, r2, r3
 8023446:	ee13 2a10 	vmov	r2, s6
 802344a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802344e:	9313      	str	r3, [sp, #76]	; 0x4c
 8023450:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023452:	fb92 f3f3 	sdiv	r3, r2, r3
 8023456:	9a03      	ldr	r2, [sp, #12]
 8023458:	9314      	str	r3, [sp, #80]	; 0x50
 802345a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 802345e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023460:	eeb0 3a67 	vmov.f32	s6, s15
 8023464:	bf08      	it	eq
 8023466:	4613      	moveq	r3, r2
 8023468:	eef0 2a47 	vmov.f32	s5, s14
 802346c:	e789      	b.n	8023382 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 802346e:	1406      	asrs	r6, r0, #16
 8023470:	d42d      	bmi.n	80234ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8023472:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8023476:	42b4      	cmp	r4, r6
 8023478:	dd29      	ble.n	80234ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 802347a:	ea5f 4c21 	movs.w	ip, r1, asr #16
 802347e:	d426      	bmi.n	80234ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8023480:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8023484:	4562      	cmp	r2, ip
 8023486:	dd22      	ble.n	80234ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8023488:	b224      	sxth	r4, r4
 802348a:	9a01      	ldr	r2, [sp, #4]
 802348c:	fb0c 6404 	mla	r4, ip, r4, r6
 8023490:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8023494:	0e22      	lsrs	r2, r4, #24
 8023496:	d01a      	beq.n	80234ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8023498:	9e04      	ldr	r6, [sp, #16]
 802349a:	4372      	muls	r2, r6
 802349c:	1c56      	adds	r6, r2, #1
 802349e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80234a2:	1212      	asrs	r2, r2, #8
 80234a4:	0a26      	lsrs	r6, r4, #8
 80234a6:	2aff      	cmp	r2, #255	; 0xff
 80234a8:	9605      	str	r6, [sp, #20]
 80234aa:	d116      	bne.n	80234da <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 80234ac:	f06f 0201 	mvn.w	r2, #1
 80234b0:	fb02 fc07 	mul.w	ip, r2, r7
 80234b4:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80234b8:	0962      	lsrs	r2, r4, #5
 80234ba:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80234be:	f026 0607 	bic.w	r6, r6, #7
 80234c2:	4316      	orrs	r6, r2
 80234c4:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80234c8:	4326      	orrs	r6, r4
 80234ca:	f825 600c 	strh.w	r6, [r5, ip]
 80234ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80234d0:	4410      	add	r0, r2
 80234d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80234d4:	3f01      	subs	r7, #1
 80234d6:	4411      	add	r1, r2
 80234d8:	e787      	b.n	80233ea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80234da:	f06f 0601 	mvn.w	r6, #1
 80234de:	437e      	muls	r6, r7
 80234e0:	fa1f fa82 	uxth.w	sl, r2
 80234e4:	f835 8006 	ldrh.w	r8, [r5, r6]
 80234e8:	9602      	str	r6, [sp, #8]
 80234ea:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80234ee:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 80234f2:	43d2      	mvns	r2, r2
 80234f4:	b2d2      	uxtb	r2, r2
 80234f6:	fb1c fc0a 	smulbb	ip, ip, sl
 80234fa:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80234fe:	fb0e ce02 	mla	lr, lr, r2, ip
 8023502:	b2e4      	uxtb	r4, r4
 8023504:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8023508:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 802350c:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8023510:	fa5f f888 	uxtb.w	r8, r8
 8023514:	fb14 f40a 	smulbb	r4, r4, sl
 8023518:	fb08 4402 	mla	r4, r8, r2, r4
 802351c:	fa1f fe8e 	uxth.w	lr, lr
 8023520:	fb16 f60a 	smulbb	r6, r6, sl
 8023524:	b2a4      	uxth	r4, r4
 8023526:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802352a:	fb0c 6c02 	mla	ip, ip, r2, r6
 802352e:	f10e 0201 	add.w	r2, lr, #1
 8023532:	1c66      	adds	r6, r4, #1
 8023534:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8023538:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 802353c:	fa1f fc8c 	uxth.w	ip, ip
 8023540:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8023544:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8023548:	ea46 0e0e 	orr.w	lr, r6, lr
 802354c:	f10c 0601 	add.w	r6, ip, #1
 8023550:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8023554:	0976      	lsrs	r6, r6, #5
 8023556:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802355a:	9a02      	ldr	r2, [sp, #8]
 802355c:	ea4e 0e06 	orr.w	lr, lr, r6
 8023560:	f825 e002 	strh.w	lr, [r5, r2]
 8023564:	e7b3      	b.n	80234ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8023566:	f04f 0800 	mov.w	r8, #0
 802356a:	eba3 0208 	sub.w	r2, r3, r8
 802356e:	2a00      	cmp	r2, #0
 8023570:	f77f af3e 	ble.w	80233f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8023574:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8023578:	1404      	asrs	r4, r0, #16
 802357a:	140a      	asrs	r2, r1, #16
 802357c:	fb06 4202 	mla	r2, r6, r2, r4
 8023580:	9c01      	ldr	r4, [sp, #4]
 8023582:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8023586:	0e22      	lsrs	r2, r4, #24
 8023588:	d016      	beq.n	80235b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 802358a:	9e04      	ldr	r6, [sp, #16]
 802358c:	4372      	muls	r2, r6
 802358e:	1c56      	adds	r6, r2, #1
 8023590:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8023594:	1212      	asrs	r2, r2, #8
 8023596:	2aff      	cmp	r2, #255	; 0xff
 8023598:	ea4f 2614 	mov.w	r6, r4, lsr #8
 802359c:	d113      	bne.n	80235c6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 802359e:	0962      	lsrs	r2, r4, #5
 80235a0:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 80235a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80235a8:	f026 0607 	bic.w	r6, r6, #7
 80235ac:	4316      	orrs	r6, r2
 80235ae:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80235b2:	4326      	orrs	r6, r4
 80235b4:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 80235b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80235ba:	4410      	add	r0, r2
 80235bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80235be:	f108 0801 	add.w	r8, r8, #1
 80235c2:	4411      	add	r1, r2
 80235c4:	e7d1      	b.n	802356a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80235c6:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 80235ca:	fa1f fa82 	uxth.w	sl, r2
 80235ce:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80235d2:	f3c4 4707 	ubfx	r7, r4, #16, #8
 80235d6:	43d2      	mvns	r2, r2
 80235d8:	b2d2      	uxtb	r2, r2
 80235da:	fb17 f70a 	smulbb	r7, r7, sl
 80235de:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80235e2:	fb0c 7c02 	mla	ip, ip, r2, r7
 80235e6:	b2e4      	uxtb	r4, r4
 80235e8:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80235ec:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80235f0:	fa5f fe8e 	uxtb.w	lr, lr
 80235f4:	fb14 f40a 	smulbb	r4, r4, sl
 80235f8:	fb0e 4402 	mla	r4, lr, r2, r4
 80235fc:	b2f6      	uxtb	r6, r6
 80235fe:	fa1f fc8c 	uxth.w	ip, ip
 8023602:	fb16 f60a 	smulbb	r6, r6, sl
 8023606:	b2a4      	uxth	r4, r4
 8023608:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802360c:	fb07 6702 	mla	r7, r7, r2, r6
 8023610:	f10c 0201 	add.w	r2, ip, #1
 8023614:	1c66      	adds	r6, r4, #1
 8023616:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 802361a:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 802361e:	b2bf      	uxth	r7, r7
 8023620:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8023624:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023628:	ea46 0c0c 	orr.w	ip, r6, ip
 802362c:	1c7e      	adds	r6, r7, #1
 802362e:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8023632:	0976      	lsrs	r6, r6, #5
 8023634:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023638:	ea4c 0c06 	orr.w	ip, ip, r6
 802363c:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8023640:	e7ba      	b.n	80235b8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8023642:	b007      	add	sp, #28
 8023644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023648 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802364c:	b085      	sub	sp, #20
 802364e:	468b      	mov	fp, r1
 8023650:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023652:	9203      	str	r2, [sp, #12]
 8023654:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8023658:	6841      	ldr	r1, [r0, #4]
 802365a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 802365e:	fb01 2404 	mla	r4, r1, r4, r2
 8023662:	6802      	ldr	r2, [r0, #0]
 8023664:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8023668:	f8d8 2000 	ldr.w	r2, [r8]
 802366c:	9201      	str	r2, [sp, #4]
 802366e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023672:	f1bb 0f00 	cmp.w	fp, #0
 8023676:	dc03      	bgt.n	8023680 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8023678:	9a03      	ldr	r2, [sp, #12]
 802367a:	2a00      	cmp	r2, #0
 802367c:	f340 814f 	ble.w	802391e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8023680:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023682:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8023686:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 802368a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 802368e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023690:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8023694:	2b00      	cmp	r3, #0
 8023696:	dd0e      	ble.n	80236b6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023698:	1408      	asrs	r0, r1, #16
 802369a:	d405      	bmi.n	80236a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 802369c:	42b8      	cmp	r0, r7
 802369e:	da03      	bge.n	80236a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80236a0:	1410      	asrs	r0, r2, #16
 80236a2:	d401      	bmi.n	80236a8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 80236a4:	42b0      	cmp	r0, r6
 80236a6:	db07      	blt.n	80236b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80236a8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80236aa:	4401      	add	r1, r0
 80236ac:	9812      	ldr	r0, [sp, #72]	; 0x48
 80236ae:	3b01      	subs	r3, #1
 80236b0:	4402      	add	r2, r0
 80236b2:	3402      	adds	r4, #2
 80236b4:	e7ee      	b.n	8023694 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80236b6:	d017      	beq.n	80236e8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80236b8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80236ba:	1e58      	subs	r0, r3, #1
 80236bc:	fb05 1500 	mla	r5, r5, r0, r1
 80236c0:	142d      	asrs	r5, r5, #16
 80236c2:	d409      	bmi.n	80236d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80236c4:	42bd      	cmp	r5, r7
 80236c6:	da07      	bge.n	80236d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80236c8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80236ca:	fb05 2000 	mla	r0, r5, r0, r2
 80236ce:	1400      	asrs	r0, r0, #16
 80236d0:	d402      	bmi.n	80236d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80236d2:	42b0      	cmp	r0, r6
 80236d4:	f2c0 80ba 	blt.w	802384c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80236d8:	2600      	movs	r6, #0
 80236da:	1998      	adds	r0, r3, r6
 80236dc:	2800      	cmp	r0, #0
 80236de:	dc3e      	bgt.n	802375e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80236e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80236e4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80236e8:	f1bb 0f00 	cmp.w	fp, #0
 80236ec:	f340 8117 	ble.w	802391e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80236f0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80236f4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80236f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80236fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80236fe:	f1bb 0b01 	subs.w	fp, fp, #1
 8023702:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023706:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802370a:	eeb0 6a62 	vmov.f32	s12, s5
 802370e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023712:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023716:	ee77 2a62 	vsub.f32	s5, s14, s5
 802371a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 802371e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023722:	eeb0 6a43 	vmov.f32	s12, s6
 8023726:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802372a:	ee12 2a90 	vmov	r2, s5
 802372e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023732:	fb92 f3f3 	sdiv	r3, r2, r3
 8023736:	ee13 2a10 	vmov	r2, s6
 802373a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802373e:	9311      	str	r3, [sp, #68]	; 0x44
 8023740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023742:	fb92 f3f3 	sdiv	r3, r2, r3
 8023746:	9a03      	ldr	r2, [sp, #12]
 8023748:	9312      	str	r3, [sp, #72]	; 0x48
 802374a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 802374e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023750:	eeb0 3a67 	vmov.f32	s6, s15
 8023754:	bf08      	it	eq
 8023756:	4613      	moveq	r3, r2
 8023758:	eef0 2a47 	vmov.f32	s5, s14
 802375c:	e789      	b.n	8023672 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 802375e:	140f      	asrs	r7, r1, #16
 8023760:	d424      	bmi.n	80237ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8023762:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8023766:	42bd      	cmp	r5, r7
 8023768:	dd20      	ble.n	80237ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802376a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 802376e:	d41d      	bmi.n	80237ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8023770:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8023774:	4560      	cmp	r0, ip
 8023776:	dd19      	ble.n	80237ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8023778:	b22d      	sxth	r5, r5
 802377a:	fb0c 7505 	mla	r5, ip, r5, r7
 802377e:	9801      	ldr	r0, [sp, #4]
 8023780:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8023784:	0e07      	lsrs	r7, r0, #24
 8023786:	2fff      	cmp	r7, #255	; 0xff
 8023788:	d116      	bne.n	80237b8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 802378a:	f06f 0501 	mvn.w	r5, #1
 802378e:	fb05 f706 	mul.w	r7, r5, r6
 8023792:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 8023796:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 802379a:	0945      	lsrs	r5, r0, #5
 802379c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80237a0:	ea4c 0505 	orr.w	r5, ip, r5
 80237a4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80237a8:	4305      	orrs	r5, r0
 80237aa:	53e5      	strh	r5, [r4, r7]
 80237ac:	9811      	ldr	r0, [sp, #68]	; 0x44
 80237ae:	4401      	add	r1, r0
 80237b0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80237b2:	3e01      	subs	r6, #1
 80237b4:	4402      	add	r2, r0
 80237b6:	e790      	b.n	80236da <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80237b8:	b2fd      	uxtb	r5, r7
 80237ba:	2f00      	cmp	r7, #0
 80237bc:	d0f6      	beq.n	80237ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80237be:	f06f 0701 	mvn.w	r7, #1
 80237c2:	4377      	muls	r7, r6
 80237c4:	fa1f f985 	uxth.w	r9, r5
 80237c8:	f834 e007 	ldrh.w	lr, [r4, r7]
 80237cc:	9702      	str	r7, [sp, #8]
 80237ce:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80237d2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80237d6:	43ed      	mvns	r5, r5
 80237d8:	b2ed      	uxtb	r5, r5
 80237da:	fb17 f709 	smulbb	r7, r7, r9
 80237de:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80237e2:	fb0c 7c05 	mla	ip, ip, r5, r7
 80237e6:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80237ea:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80237ee:	b2c0      	uxtb	r0, r0
 80237f0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80237f4:	fa5f fe8e 	uxtb.w	lr, lr
 80237f8:	fb10 f009 	smulbb	r0, r0, r9
 80237fc:	fb0e 0005 	mla	r0, lr, r5, r0
 8023800:	b280      	uxth	r0, r0
 8023802:	fa1f fc8c 	uxth.w	ip, ip
 8023806:	fb1a fa09 	smulbb	sl, sl, r9
 802380a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802380e:	fb07 a705 	mla	r7, r7, r5, sl
 8023812:	f100 0a01 	add.w	sl, r0, #1
 8023816:	f10c 0501 	add.w	r5, ip, #1
 802381a:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 802381e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8023822:	b2bf      	uxth	r7, r7
 8023824:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8023828:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802382c:	ea4a 0c0c 	orr.w	ip, sl, ip
 8023830:	f107 0a01 	add.w	sl, r7, #1
 8023834:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8023838:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802383c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8023840:	9802      	ldr	r0, [sp, #8]
 8023842:	ea4c 0c0a 	orr.w	ip, ip, sl
 8023846:	f824 c000 	strh.w	ip, [r4, r0]
 802384a:	e7af      	b.n	80237ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802384c:	f04f 0e00 	mov.w	lr, #0
 8023850:	eba3 000e 	sub.w	r0, r3, lr
 8023854:	2800      	cmp	r0, #0
 8023856:	f77f af43 	ble.w	80236e0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 802385a:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 802385e:	140d      	asrs	r5, r1, #16
 8023860:	1410      	asrs	r0, r2, #16
 8023862:	fb06 5000 	mla	r0, r6, r0, r5
 8023866:	9d01      	ldr	r5, [sp, #4]
 8023868:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 802386c:	0e2e      	lsrs	r6, r5, #24
 802386e:	2eff      	cmp	r6, #255	; 0xff
 8023870:	d112      	bne.n	8023898 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8023872:	482c      	ldr	r0, [pc, #176]	; (8023924 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8023874:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 8023878:	0968      	lsrs	r0, r5, #5
 802387a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802387e:	4330      	orrs	r0, r6
 8023880:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8023884:	4328      	orrs	r0, r5
 8023886:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 802388a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802388c:	4401      	add	r1, r0
 802388e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8023890:	f10e 0e01 	add.w	lr, lr, #1
 8023894:	4402      	add	r2, r0
 8023896:	e7db      	b.n	8023850 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8023898:	b2f0      	uxtb	r0, r6
 802389a:	2e00      	cmp	r6, #0
 802389c:	d0f5      	beq.n	802388a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802389e:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80238a2:	fa1f f980 	uxth.w	r9, r0
 80238a6:	ea4f 272c 	mov.w	r7, ip, asr #8
 80238aa:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80238ae:	43c0      	mvns	r0, r0
 80238b0:	b2c0      	uxtb	r0, r0
 80238b2:	fb16 f609 	smulbb	r6, r6, r9
 80238b6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80238ba:	fb07 6700 	mla	r7, r7, r0, r6
 80238be:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80238c2:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80238c6:	b2ed      	uxtb	r5, r5
 80238c8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80238cc:	fa5f fc8c 	uxtb.w	ip, ip
 80238d0:	fb15 f509 	smulbb	r5, r5, r9
 80238d4:	fb0c 5500 	mla	r5, ip, r0, r5
 80238d8:	b2bf      	uxth	r7, r7
 80238da:	fb1a fa09 	smulbb	sl, sl, r9
 80238de:	b2ad      	uxth	r5, r5
 80238e0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80238e4:	fb06 a600 	mla	r6, r6, r0, sl
 80238e8:	1c78      	adds	r0, r7, #1
 80238ea:	f105 0a01 	add.w	sl, r5, #1
 80238ee:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 80238f2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80238f6:	b2b6      	uxth	r6, r6
 80238f8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80238fc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8023900:	ea4a 0707 	orr.w	r7, sl, r7
 8023904:	f106 0a01 	add.w	sl, r6, #1
 8023908:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 802390c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023910:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8023914:	ea47 070a 	orr.w	r7, r7, sl
 8023918:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 802391c:	e7b5      	b.n	802388a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 802391e:	b005      	add	sp, #20
 8023920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023924:	fffff800 	.word	0xfffff800

08023928 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802392c:	b087      	sub	sp, #28
 802392e:	468b      	mov	fp, r1
 8023930:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023932:	9203      	str	r2, [sp, #12]
 8023934:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8023938:	9204      	str	r2, [sp, #16]
 802393a:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 802393e:	6841      	ldr	r1, [r0, #4]
 8023940:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8023944:	fb01 2404 	mla	r4, r1, r4, r2
 8023948:	6802      	ldr	r2, [r0, #0]
 802394a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802394e:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8023952:	3201      	adds	r2, #1
 8023954:	f022 0201 	bic.w	r2, r2, #1
 8023958:	9200      	str	r2, [sp, #0]
 802395a:	f8d9 2000 	ldr.w	r2, [r9]
 802395e:	9201      	str	r2, [sp, #4]
 8023960:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023964:	f1bb 0f00 	cmp.w	fp, #0
 8023968:	dc03      	bgt.n	8023972 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802396a:	9a03      	ldr	r2, [sp, #12]
 802396c:	2a00      	cmp	r2, #0
 802396e:	f340 8169 	ble.w	8023c44 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8023972:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023974:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8023978:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 802397c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8023980:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023982:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8023986:	2b00      	cmp	r3, #0
 8023988:	dd0e      	ble.n	80239a8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802398a:	1402      	asrs	r2, r0, #16
 802398c:	d405      	bmi.n	802399a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802398e:	42ba      	cmp	r2, r7
 8023990:	da03      	bge.n	802399a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023992:	140a      	asrs	r2, r1, #16
 8023994:	d401      	bmi.n	802399a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023996:	42b2      	cmp	r2, r6
 8023998:	db07      	blt.n	80239aa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802399a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802399c:	4410      	add	r0, r2
 802399e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80239a0:	3b01      	subs	r3, #1
 80239a2:	4411      	add	r1, r2
 80239a4:	3402      	adds	r4, #2
 80239a6:	e7ee      	b.n	8023986 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80239a8:	d017      	beq.n	80239da <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 80239aa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80239ac:	1e5a      	subs	r2, r3, #1
 80239ae:	fb05 0502 	mla	r5, r5, r2, r0
 80239b2:	142d      	asrs	r5, r5, #16
 80239b4:	d409      	bmi.n	80239ca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80239b6:	42bd      	cmp	r5, r7
 80239b8:	da07      	bge.n	80239ca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80239ba:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80239bc:	fb05 1202 	mla	r2, r5, r2, r1
 80239c0:	1412      	asrs	r2, r2, #16
 80239c2:	d402      	bmi.n	80239ca <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80239c4:	42b2      	cmp	r2, r6
 80239c6:	f2c0 80c7 	blt.w	8023b58 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80239ca:	2700      	movs	r7, #0
 80239cc:	19da      	adds	r2, r3, r7
 80239ce:	2a00      	cmp	r2, #0
 80239d0:	dc3e      	bgt.n	8023a50 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80239d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80239d6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80239da:	f1bb 0f00 	cmp.w	fp, #0
 80239de:	f340 8131 	ble.w	8023c44 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80239e2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80239e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80239ea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80239ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80239f0:	f1bb 0b01 	subs.w	fp, fp, #1
 80239f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80239f8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80239fc:	eeb0 6a62 	vmov.f32	s12, s5
 8023a00:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023a04:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023a08:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023a0c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8023a10:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023a14:	eeb0 6a43 	vmov.f32	s12, s6
 8023a18:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023a1c:	ee12 2a90 	vmov	r2, s5
 8023a20:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023a24:	fb92 f3f3 	sdiv	r3, r2, r3
 8023a28:	ee13 2a10 	vmov	r2, s6
 8023a2c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023a30:	9313      	str	r3, [sp, #76]	; 0x4c
 8023a32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023a34:	fb92 f3f3 	sdiv	r3, r2, r3
 8023a38:	9a03      	ldr	r2, [sp, #12]
 8023a3a:	9314      	str	r3, [sp, #80]	; 0x50
 8023a3c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8023a40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023a42:	eeb0 3a67 	vmov.f32	s6, s15
 8023a46:	bf08      	it	eq
 8023a48:	4613      	moveq	r3, r2
 8023a4a:	eef0 2a47 	vmov.f32	s5, s14
 8023a4e:	e789      	b.n	8023964 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8023a50:	1405      	asrs	r5, r0, #16
 8023a52:	d435      	bmi.n	8023ac0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023a54:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8023a58:	42aa      	cmp	r2, r5
 8023a5a:	dd31      	ble.n	8023ac0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023a5c:	140e      	asrs	r6, r1, #16
 8023a5e:	d42f      	bmi.n	8023ac0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023a60:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8023a64:	42b2      	cmp	r2, r6
 8023a66:	dd2b      	ble.n	8023ac0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023a68:	9a00      	ldr	r2, [sp, #0]
 8023a6a:	fb06 5502 	mla	r5, r6, r2, r5
 8023a6e:	086a      	lsrs	r2, r5, #1
 8023a70:	9e01      	ldr	r6, [sp, #4]
 8023a72:	5cb2      	ldrb	r2, [r6, r2]
 8023a74:	07ee      	lsls	r6, r5, #31
 8023a76:	bf54      	ite	pl
 8023a78:	f002 020f 	andpl.w	r2, r2, #15
 8023a7c:	1112      	asrmi	r2, r2, #4
 8023a7e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023a82:	b2d2      	uxtb	r2, r2
 8023a84:	b1e2      	cbz	r2, 8023ac0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023a86:	9d04      	ldr	r5, [sp, #16]
 8023a88:	436a      	muls	r2, r5
 8023a8a:	1c55      	adds	r5, r2, #1
 8023a8c:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8023a90:	4d6e      	ldr	r5, [pc, #440]	; (8023c4c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8023a92:	682d      	ldr	r5, [r5, #0]
 8023a94:	1212      	asrs	r2, r2, #8
 8023a96:	0a2e      	lsrs	r6, r5, #8
 8023a98:	2aff      	cmp	r2, #255	; 0xff
 8023a9a:	9605      	str	r6, [sp, #20]
 8023a9c:	d116      	bne.n	8023acc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8023a9e:	f06f 0201 	mvn.w	r2, #1
 8023aa2:	fb02 fc07 	mul.w	ip, r2, r7
 8023aa6:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8023aaa:	096a      	lsrs	r2, r5, #5
 8023aac:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023ab0:	f026 0607 	bic.w	r6, r6, #7
 8023ab4:	4316      	orrs	r6, r2
 8023ab6:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8023aba:	432e      	orrs	r6, r5
 8023abc:	f824 600c 	strh.w	r6, [r4, ip]
 8023ac0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023ac2:	4410      	add	r0, r2
 8023ac4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023ac6:	3f01      	subs	r7, #1
 8023ac8:	4411      	add	r1, r2
 8023aca:	e77f      	b.n	80239cc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8023acc:	f06f 0601 	mvn.w	r6, #1
 8023ad0:	437e      	muls	r6, r7
 8023ad2:	fa1f fa82 	uxth.w	sl, r2
 8023ad6:	f834 8006 	ldrh.w	r8, [r4, r6]
 8023ada:	9602      	str	r6, [sp, #8]
 8023adc:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8023ae0:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8023ae4:	43d2      	mvns	r2, r2
 8023ae6:	b2d2      	uxtb	r2, r2
 8023ae8:	fb1c fc0a 	smulbb	ip, ip, sl
 8023aec:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8023af0:	fb0e ce02 	mla	lr, lr, r2, ip
 8023af4:	b2ed      	uxtb	r5, r5
 8023af6:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8023afa:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8023afe:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8023b02:	fa5f f888 	uxtb.w	r8, r8
 8023b06:	fb15 f50a 	smulbb	r5, r5, sl
 8023b0a:	fb08 5502 	mla	r5, r8, r2, r5
 8023b0e:	fa1f fe8e 	uxth.w	lr, lr
 8023b12:	fb16 f60a 	smulbb	r6, r6, sl
 8023b16:	b2ad      	uxth	r5, r5
 8023b18:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8023b1c:	fb0c 6c02 	mla	ip, ip, r2, r6
 8023b20:	f10e 0201 	add.w	r2, lr, #1
 8023b24:	1c6e      	adds	r6, r5, #1
 8023b26:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8023b2a:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8023b2e:	fa1f fc8c 	uxth.w	ip, ip
 8023b32:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8023b36:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8023b3a:	ea46 0e0e 	orr.w	lr, r6, lr
 8023b3e:	f10c 0601 	add.w	r6, ip, #1
 8023b42:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8023b46:	0976      	lsrs	r6, r6, #5
 8023b48:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023b4c:	9a02      	ldr	r2, [sp, #8]
 8023b4e:	ea4e 0e06 	orr.w	lr, lr, r6
 8023b52:	f824 e002 	strh.w	lr, [r4, r2]
 8023b56:	e7b3      	b.n	8023ac0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023b58:	f04f 0800 	mov.w	r8, #0
 8023b5c:	eba3 0208 	sub.w	r2, r3, r8
 8023b60:	2a00      	cmp	r2, #0
 8023b62:	f77f af36 	ble.w	80239d2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8023b66:	9e00      	ldr	r6, [sp, #0]
 8023b68:	1402      	asrs	r2, r0, #16
 8023b6a:	140d      	asrs	r5, r1, #16
 8023b6c:	fb06 2505 	mla	r5, r6, r5, r2
 8023b70:	086a      	lsrs	r2, r5, #1
 8023b72:	9e01      	ldr	r6, [sp, #4]
 8023b74:	5cb2      	ldrb	r2, [r6, r2]
 8023b76:	07ed      	lsls	r5, r5, #31
 8023b78:	bf54      	ite	pl
 8023b7a:	f002 020f 	andpl.w	r2, r2, #15
 8023b7e:	1112      	asrmi	r2, r2, #4
 8023b80:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023b84:	b2d2      	uxtb	r2, r2
 8023b86:	b1c2      	cbz	r2, 8023bba <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8023b88:	9d04      	ldr	r5, [sp, #16]
 8023b8a:	436a      	muls	r2, r5
 8023b8c:	1c55      	adds	r5, r2, #1
 8023b8e:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8023b92:	4d2e      	ldr	r5, [pc, #184]	; (8023c4c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8023b94:	1212      	asrs	r2, r2, #8
 8023b96:	682e      	ldr	r6, [r5, #0]
 8023b98:	2aff      	cmp	r2, #255	; 0xff
 8023b9a:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8023b9e:	d113      	bne.n	8023bc8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023ba0:	0972      	lsrs	r2, r6, #5
 8023ba2:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8023ba6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023baa:	f025 0507 	bic.w	r5, r5, #7
 8023bae:	4315      	orrs	r5, r2
 8023bb0:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8023bb4:	4335      	orrs	r5, r6
 8023bb6:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8023bba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023bbc:	4410      	add	r0, r2
 8023bbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023bc0:	f108 0801 	add.w	r8, r8, #1
 8023bc4:	4411      	add	r1, r2
 8023bc6:	e7c9      	b.n	8023b5c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8023bc8:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8023bcc:	fa1f fa82 	uxth.w	sl, r2
 8023bd0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8023bd4:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8023bd8:	43d2      	mvns	r2, r2
 8023bda:	b2d2      	uxtb	r2, r2
 8023bdc:	fb17 f70a 	smulbb	r7, r7, sl
 8023be0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8023be4:	fb0c 7c02 	mla	ip, ip, r2, r7
 8023be8:	b2f6      	uxtb	r6, r6
 8023bea:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8023bee:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023bf2:	fa5f fe8e 	uxtb.w	lr, lr
 8023bf6:	fb16 f60a 	smulbb	r6, r6, sl
 8023bfa:	fb0e 6602 	mla	r6, lr, r2, r6
 8023bfe:	b2ed      	uxtb	r5, r5
 8023c00:	fa1f fc8c 	uxth.w	ip, ip
 8023c04:	fb15 f50a 	smulbb	r5, r5, sl
 8023c08:	b2b6      	uxth	r6, r6
 8023c0a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023c0e:	fb07 5702 	mla	r7, r7, r2, r5
 8023c12:	f10c 0201 	add.w	r2, ip, #1
 8023c16:	1c75      	adds	r5, r6, #1
 8023c18:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8023c1c:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8023c20:	b2bf      	uxth	r7, r7
 8023c22:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8023c26:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8023c2a:	ea45 0c0c 	orr.w	ip, r5, ip
 8023c2e:	1c7d      	adds	r5, r7, #1
 8023c30:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8023c34:	096d      	lsrs	r5, r5, #5
 8023c36:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023c3a:	ea4c 0c05 	orr.w	ip, ip, r5
 8023c3e:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8023c42:	e7ba      	b.n	8023bba <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8023c44:	b007      	add	sp, #28
 8023c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c4a:	bf00      	nop
 8023c4c:	2000f174 	.word	0x2000f174

08023c50 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c54:	b087      	sub	sp, #28
 8023c56:	f8df 830c 	ldr.w	r8, [pc, #780]	; 8023f64 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8023c5a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8023c5c:	9205      	str	r2, [sp, #20]
 8023c5e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8023c62:	9101      	str	r1, [sp, #4]
 8023c64:	6841      	ldr	r1, [r0, #4]
 8023c66:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8023c6a:	fb01 2404 	mla	r4, r1, r4, r2
 8023c6e:	6802      	ldr	r2, [r0, #0]
 8023c70:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8023c74:	f8db 2008 	ldr.w	r2, [fp, #8]
 8023c78:	3201      	adds	r2, #1
 8023c7a:	f022 0201 	bic.w	r2, r2, #1
 8023c7e:	9202      	str	r2, [sp, #8]
 8023c80:	f8db 2000 	ldr.w	r2, [fp]
 8023c84:	9203      	str	r2, [sp, #12]
 8023c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023c8a:	9a01      	ldr	r2, [sp, #4]
 8023c8c:	2a00      	cmp	r2, #0
 8023c8e:	dc03      	bgt.n	8023c98 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8023c90:	9a05      	ldr	r2, [sp, #20]
 8023c92:	2a00      	cmp	r2, #0
 8023c94:	f340 8162 	ble.w	8023f5c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023c98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023c9a:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8023c9e:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8023ca2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8023ca6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023ca8:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8023cac:	2b00      	cmp	r3, #0
 8023cae:	dd0e      	ble.n	8023cce <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8023cb0:	1402      	asrs	r2, r0, #16
 8023cb2:	d405      	bmi.n	8023cc0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8023cb4:	42ba      	cmp	r2, r7
 8023cb6:	da03      	bge.n	8023cc0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8023cb8:	140a      	asrs	r2, r1, #16
 8023cba:	d401      	bmi.n	8023cc0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8023cbc:	42b2      	cmp	r2, r6
 8023cbe:	db07      	blt.n	8023cd0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8023cc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023cc2:	4410      	add	r0, r2
 8023cc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023cc6:	3b01      	subs	r3, #1
 8023cc8:	4411      	add	r1, r2
 8023cca:	3402      	adds	r4, #2
 8023ccc:	e7ee      	b.n	8023cac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8023cce:	d017      	beq.n	8023d00 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8023cd0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023cd2:	1e5a      	subs	r2, r3, #1
 8023cd4:	fb05 0502 	mla	r5, r5, r2, r0
 8023cd8:	142d      	asrs	r5, r5, #16
 8023cda:	d409      	bmi.n	8023cf0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023cdc:	42bd      	cmp	r5, r7
 8023cde:	da07      	bge.n	8023cf0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023ce0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023ce2:	fb05 1202 	mla	r2, r5, r2, r1
 8023ce6:	1412      	asrs	r2, r2, #16
 8023ce8:	d402      	bmi.n	8023cf0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8023cea:	42b2      	cmp	r2, r6
 8023cec:	f2c0 80c3 	blt.w	8023e76 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8023cf0:	2500      	movs	r5, #0
 8023cf2:	195a      	adds	r2, r3, r5
 8023cf4:	2a00      	cmp	r2, #0
 8023cf6:	dc3f      	bgt.n	8023d78 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8023cf8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023cfc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8023d00:	9b01      	ldr	r3, [sp, #4]
 8023d02:	2b00      	cmp	r3, #0
 8023d04:	f340 812a 	ble.w	8023f5c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023d08:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023d0c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023d10:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023d14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023d16:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023d1a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023d1e:	eeb0 6a62 	vmov.f32	s12, s5
 8023d22:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023d26:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023d2a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023d2e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8023d32:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023d36:	eeb0 6a43 	vmov.f32	s12, s6
 8023d3a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023d3e:	ee12 2a90 	vmov	r2, s5
 8023d42:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023d46:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d4a:	ee13 2a10 	vmov	r2, s6
 8023d4e:	9313      	str	r3, [sp, #76]	; 0x4c
 8023d50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023d52:	fb92 f3f3 	sdiv	r3, r2, r3
 8023d56:	9314      	str	r3, [sp, #80]	; 0x50
 8023d58:	9b01      	ldr	r3, [sp, #4]
 8023d5a:	9a05      	ldr	r2, [sp, #20]
 8023d5c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023d60:	3b01      	subs	r3, #1
 8023d62:	9301      	str	r3, [sp, #4]
 8023d64:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8023d68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023d6a:	eeb0 3a67 	vmov.f32	s6, s15
 8023d6e:	bf08      	it	eq
 8023d70:	4613      	moveq	r3, r2
 8023d72:	eef0 2a47 	vmov.f32	s5, s14
 8023d76:	e788      	b.n	8023c8a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8023d78:	1406      	asrs	r6, r0, #16
 8023d7a:	d42c      	bmi.n	8023dd6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023d7c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8023d80:	42b2      	cmp	r2, r6
 8023d82:	dd28      	ble.n	8023dd6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023d84:	140f      	asrs	r7, r1, #16
 8023d86:	d426      	bmi.n	8023dd6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023d88:	f8db 200c 	ldr.w	r2, [fp, #12]
 8023d8c:	42ba      	cmp	r2, r7
 8023d8e:	dd22      	ble.n	8023dd6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023d90:	9a02      	ldr	r2, [sp, #8]
 8023d92:	fb07 6602 	mla	r6, r7, r2, r6
 8023d96:	0872      	lsrs	r2, r6, #1
 8023d98:	9f03      	ldr	r7, [sp, #12]
 8023d9a:	5cba      	ldrb	r2, [r7, r2]
 8023d9c:	07f6      	lsls	r6, r6, #31
 8023d9e:	bf54      	ite	pl
 8023da0:	f002 020f 	andpl.w	r2, r2, #15
 8023da4:	1112      	asrmi	r2, r2, #4
 8023da6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023daa:	b2d2      	uxtb	r2, r2
 8023dac:	2aff      	cmp	r2, #255	; 0xff
 8023dae:	d118      	bne.n	8023de2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8023db0:	f8d8 2000 	ldr.w	r2, [r8]
 8023db4:	f06f 0601 	mvn.w	r6, #1
 8023db8:	fb06 f705 	mul.w	r7, r6, r5
 8023dbc:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8023dc0:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8023dc4:	0956      	lsrs	r6, r2, #5
 8023dc6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8023dca:	ea4c 0606 	orr.w	r6, ip, r6
 8023dce:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023dd2:	4316      	orrs	r6, r2
 8023dd4:	53e6      	strh	r6, [r4, r7]
 8023dd6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023dd8:	4410      	add	r0, r2
 8023dda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023ddc:	3d01      	subs	r5, #1
 8023dde:	4411      	add	r1, r2
 8023de0:	e787      	b.n	8023cf2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8023de2:	2a00      	cmp	r2, #0
 8023de4:	d0f7      	beq.n	8023dd6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023de6:	f06f 0601 	mvn.w	r6, #1
 8023dea:	436e      	muls	r6, r5
 8023dec:	f8d8 c000 	ldr.w	ip, [r8]
 8023df0:	f834 e006 	ldrh.w	lr, [r4, r6]
 8023df4:	9604      	str	r6, [sp, #16]
 8023df6:	fa1f f982 	uxth.w	r9, r2
 8023dfa:	ea4f 272e 	mov.w	r7, lr, asr #8
 8023dfe:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8023e02:	43d2      	mvns	r2, r2
 8023e04:	b2d2      	uxtb	r2, r2
 8023e06:	fb16 f609 	smulbb	r6, r6, r9
 8023e0a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8023e0e:	fb07 6702 	mla	r7, r7, r2, r6
 8023e12:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8023e16:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8023e1a:	fa5f fc8c 	uxtb.w	ip, ip
 8023e1e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023e22:	fa5f fe8e 	uxtb.w	lr, lr
 8023e26:	fb1c fc09 	smulbb	ip, ip, r9
 8023e2a:	fb0e cc02 	mla	ip, lr, r2, ip
 8023e2e:	b2bf      	uxth	r7, r7
 8023e30:	fb1a fa09 	smulbb	sl, sl, r9
 8023e34:	fa1f fc8c 	uxth.w	ip, ip
 8023e38:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8023e3c:	fb06 a602 	mla	r6, r6, r2, sl
 8023e40:	1c7a      	adds	r2, r7, #1
 8023e42:	f10c 0a01 	add.w	sl, ip, #1
 8023e46:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8023e4a:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8023e4e:	b2b6      	uxth	r6, r6
 8023e50:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8023e54:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8023e58:	ea4a 0707 	orr.w	r7, sl, r7
 8023e5c:	f106 0a01 	add.w	sl, r6, #1
 8023e60:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8023e64:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023e68:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8023e6c:	9a04      	ldr	r2, [sp, #16]
 8023e6e:	ea47 070a 	orr.w	r7, r7, sl
 8023e72:	52a7      	strh	r7, [r4, r2]
 8023e74:	e7af      	b.n	8023dd6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8023e76:	f04f 0e00 	mov.w	lr, #0
 8023e7a:	eba3 020e 	sub.w	r2, r3, lr
 8023e7e:	2a00      	cmp	r2, #0
 8023e80:	f77f af3a 	ble.w	8023cf8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8023e84:	9e02      	ldr	r6, [sp, #8]
 8023e86:	1402      	asrs	r2, r0, #16
 8023e88:	140d      	asrs	r5, r1, #16
 8023e8a:	fb06 2505 	mla	r5, r6, r5, r2
 8023e8e:	086a      	lsrs	r2, r5, #1
 8023e90:	9e03      	ldr	r6, [sp, #12]
 8023e92:	5cb2      	ldrb	r2, [r6, r2]
 8023e94:	07ed      	lsls	r5, r5, #31
 8023e96:	bf54      	ite	pl
 8023e98:	f002 020f 	andpl.w	r2, r2, #15
 8023e9c:	1112      	asrmi	r2, r2, #4
 8023e9e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023ea2:	b2d2      	uxtb	r2, r2
 8023ea4:	2aff      	cmp	r2, #255	; 0xff
 8023ea6:	d115      	bne.n	8023ed4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8023ea8:	f8d8 5000 	ldr.w	r5, [r8]
 8023eac:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8023eb0:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8023eb4:	096a      	lsrs	r2, r5, #5
 8023eb6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8023eba:	4332      	orrs	r2, r6
 8023ebc:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8023ec0:	432a      	orrs	r2, r5
 8023ec2:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 8023ec6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8023ec8:	4410      	add	r0, r2
 8023eca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023ecc:	f10e 0e01 	add.w	lr, lr, #1
 8023ed0:	4411      	add	r1, r2
 8023ed2:	e7d2      	b.n	8023e7a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8023ed4:	2a00      	cmp	r2, #0
 8023ed6:	d0f6      	beq.n	8023ec6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8023ed8:	f8d8 7000 	ldr.w	r7, [r8]
 8023edc:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8023ee0:	fa1f f982 	uxth.w	r9, r2
 8023ee4:	ea4f 262c 	mov.w	r6, ip, asr #8
 8023ee8:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8023eec:	43d2      	mvns	r2, r2
 8023eee:	b2d2      	uxtb	r2, r2
 8023ef0:	fb15 f509 	smulbb	r5, r5, r9
 8023ef4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8023ef8:	fb06 5602 	mla	r6, r6, r2, r5
 8023efc:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8023f00:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8023f04:	b2ff      	uxtb	r7, r7
 8023f06:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023f0a:	fa5f fc8c 	uxtb.w	ip, ip
 8023f0e:	fb17 f709 	smulbb	r7, r7, r9
 8023f12:	fb0c 7702 	mla	r7, ip, r2, r7
 8023f16:	b2b6      	uxth	r6, r6
 8023f18:	fb1a fa09 	smulbb	sl, sl, r9
 8023f1c:	b2bf      	uxth	r7, r7
 8023f1e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8023f22:	fb05 a502 	mla	r5, r5, r2, sl
 8023f26:	1c72      	adds	r2, r6, #1
 8023f28:	f107 0a01 	add.w	sl, r7, #1
 8023f2c:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8023f30:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8023f34:	b2ad      	uxth	r5, r5
 8023f36:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8023f3a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8023f3e:	ea4a 0606 	orr.w	r6, sl, r6
 8023f42:	f105 0a01 	add.w	sl, r5, #1
 8023f46:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8023f4a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023f4e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8023f52:	ea46 060a 	orr.w	r6, r6, sl
 8023f56:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 8023f5a:	e7b4      	b.n	8023ec6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8023f5c:	b007      	add	sp, #28
 8023f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f62:	bf00      	nop
 8023f64:	2000f174 	.word	0x2000f174

08023f68 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8023f68:	4770      	bx	lr

08023f6a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8023f6a:	4770      	bx	lr

08023f6c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8023f6c:	4770      	bx	lr

08023f6e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8023f6e:	4770      	bx	lr

08023f70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8023f70:	4770      	bx	lr

08023f72 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8023f72:	4770      	bx	lr

08023f74 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8023f74:	4770      	bx	lr

08023f76 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8023f76:	4770      	bx	lr

08023f78 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8023f78:	4770      	bx	lr

08023f7a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8023f7a:	4770      	bx	lr

08023f7c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8023f7c:	4770      	bx	lr

08023f7e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8023f7e:	4770      	bx	lr

08023f80 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8023f80:	4770      	bx	lr

08023f82 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8023f82:	4770      	bx	lr

08023f84 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8023f84:	4770      	bx	lr

08023f86 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8023f86:	4770      	bx	lr

08023f88 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8023f88:	4770      	bx	lr

08023f8a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8023f8a:	4770      	bx	lr

08023f8c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8023f8c:	4770      	bx	lr

08023f8e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8023f8e:	4770      	bx	lr

08023f90 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8023f90:	4770      	bx	lr

08023f92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8023f92:	4770      	bx	lr

08023f94 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8023f94:	4770      	bx	lr

08023f96 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8023f96:	4770      	bx	lr

08023f98 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8023f98:	4770      	bx	lr

08023f9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8023f9a:	4770      	bx	lr

08023f9c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8023f9c:	4770      	bx	lr

08023f9e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8023f9e:	4770      	bx	lr

08023fa0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8023fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023fa4:	b088      	sub	sp, #32
 8023fa6:	ac08      	add	r4, sp, #32
 8023fa8:	4606      	mov	r6, r0
 8023faa:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8023fae:	4620      	mov	r0, r4
 8023fb0:	4688      	mov	r8, r1
 8023fb2:	4691      	mov	r9, r2
 8023fb4:	f7fd fc66 	bl	8021884 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023fb8:	6833      	ldr	r3, [r6, #0]
 8023fba:	4605      	mov	r5, r0
 8023fbc:	4620      	mov	r0, r4
 8023fbe:	699f      	ldr	r7, [r3, #24]
 8023fc0:	f7fd fb74 	bl	80216ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023fc4:	4682      	mov	sl, r0
 8023fc6:	4620      	mov	r0, r4
 8023fc8:	f7fd fba4 	bl	8021714 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023fcc:	9500      	str	r5, [sp, #0]
 8023fce:	e9cd a001 	strd	sl, r0, [sp, #4]
 8023fd2:	464b      	mov	r3, r9
 8023fd4:	a806      	add	r0, sp, #24
 8023fd6:	4642      	mov	r2, r8
 8023fd8:	4631      	mov	r1, r6
 8023fda:	47b8      	blx	r7
 8023fdc:	4628      	mov	r0, r5
 8023fde:	b008      	add	sp, #32
 8023fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08023fe4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8023fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023fe8:	2300      	movs	r3, #0
 8023fea:	9300      	str	r3, [sp, #0]
 8023fec:	4b3d      	ldr	r3, [pc, #244]	; (80240e4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8023fee:	781b      	ldrb	r3, [r3, #0]
 8023ff0:	2b00      	cmp	r3, #0
 8023ff2:	d137      	bne.n	8024064 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8023ff4:	4a3c      	ldr	r2, [pc, #240]	; (80240e8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8023ff6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8023ffa:	f8ad 2004 	strh.w	r2, [sp, #4]
 8023ffe:	2b00      	cmp	r3, #0
 8024000:	d132      	bne.n	8024068 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 8024002:	4b3a      	ldr	r3, [pc, #232]	; (80240ec <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8024004:	f9b3 3000 	ldrsh.w	r3, [r3]
 8024008:	6808      	ldr	r0, [r1, #0]
 802400a:	6849      	ldr	r1, [r1, #4]
 802400c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8024010:	ac02      	add	r4, sp, #8
 8024012:	ab02      	add	r3, sp, #8
 8024014:	c303      	stmia	r3!, {r0, r1}
 8024016:	4669      	mov	r1, sp
 8024018:	4620      	mov	r0, r4
 802401a:	f7f9 ff7f 	bl	801df1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802401e:	4668      	mov	r0, sp
 8024020:	f7f9 ff54 	bl	801decc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024024:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8024028:	f8bd 2000 	ldrh.w	r2, [sp]
 802402c:	4d30      	ldr	r5, [pc, #192]	; (80240f0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 802402e:	4413      	add	r3, r2
 8024030:	f8ad 3008 	strh.w	r3, [sp, #8]
 8024034:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8024038:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 802403c:	6828      	ldr	r0, [r5, #0]
 802403e:	4413      	add	r3, r2
 8024040:	f8ad 300a 	strh.w	r3, [sp, #10]
 8024044:	6803      	ldr	r3, [r0, #0]
 8024046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024048:	4798      	blx	r3
 802404a:	f010 0f01 	tst.w	r0, #1
 802404e:	462f      	mov	r7, r5
 8024050:	d00c      	beq.n	802406c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 8024052:	6828      	ldr	r0, [r5, #0]
 8024054:	6803      	ldr	r3, [r0, #0]
 8024056:	e894 0006 	ldmia.w	r4, {r1, r2}
 802405a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802405c:	4798      	blx	r3
 802405e:	b004      	add	sp, #16
 8024060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024064:	4a21      	ldr	r2, [pc, #132]	; (80240ec <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8024066:	e7c6      	b.n	8023ff6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8024068:	4b1f      	ldr	r3, [pc, #124]	; (80240e8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 802406a:	e7cb      	b.n	8024004 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 802406c:	6838      	ldr	r0, [r7, #0]
 802406e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8024072:	6803      	ldr	r3, [r0, #0]
 8024074:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8024078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802407a:	4798      	blx	r3
 802407c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8024080:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8024084:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8024088:	fb16 3602 	smlabb	r6, r6, r2, r3
 802408c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8024090:	6838      	ldr	r0, [r7, #0]
 8024092:	6803      	ldr	r3, [r0, #0]
 8024094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024096:	4798      	blx	r3
 8024098:	4a13      	ldr	r2, [pc, #76]	; (80240e8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 802409a:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 802409e:	8813      	ldrh	r3, [r2, #0]
 80240a0:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80240a4:	fb03 1404 	mla	r4, r3, r4, r1
 80240a8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80240ac:	435d      	muls	r5, r3
 80240ae:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80240b2:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80240b6:	4691      	mov	r9, r2
 80240b8:	6838      	ldr	r0, [r7, #0]
 80240ba:	42ac      	cmp	r4, r5
 80240bc:	6803      	ldr	r3, [r0, #0]
 80240be:	d20e      	bcs.n	80240de <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 80240c0:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 80240c4:	4632      	mov	r2, r6
 80240c6:	4643      	mov	r3, r8
 80240c8:	4621      	mov	r1, r4
 80240ca:	47d0      	blx	sl
 80240cc:	f8b9 3000 	ldrh.w	r3, [r9]
 80240d0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80240d4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80240d8:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80240dc:	e7ec      	b.n	80240b8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 80240de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80240e0:	4798      	blx	r3
 80240e2:	e7bc      	b.n	802405e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80240e4:	2000f15a 	.word	0x2000f15a
 80240e8:	2000f15c 	.word	0x2000f15c
 80240ec:	2000f15e 	.word	0x2000f15e
 80240f0:	2000f164 	.word	0x2000f164

080240f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80240f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240f8:	b08b      	sub	sp, #44	; 0x2c
 80240fa:	460f      	mov	r7, r1
 80240fc:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8024100:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 8024104:	4616      	mov	r6, r2
 8024106:	f1bb 0f00 	cmp.w	fp, #0
 802410a:	d049      	beq.n	80241a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 802410c:	6810      	ldr	r0, [r2, #0]
 802410e:	6851      	ldr	r1, [r2, #4]
 8024110:	ad06      	add	r5, sp, #24
 8024112:	c503      	stmia	r5!, {r0, r1}
 8024114:	6818      	ldr	r0, [r3, #0]
 8024116:	6859      	ldr	r1, [r3, #4]
 8024118:	ad08      	add	r5, sp, #32
 802411a:	c503      	stmia	r5!, {r0, r1}
 802411c:	a806      	add	r0, sp, #24
 802411e:	f7f9 fed5 	bl	801decc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024122:	4631      	mov	r1, r6
 8024124:	a808      	add	r0, sp, #32
 8024126:	f7f9 fef9 	bl	801df1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802412a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802412e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8024132:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8024136:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 802413a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 802413e:	fb16 2103 	smlabb	r1, r6, r3, r2
 8024142:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8024146:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 802414a:	4f5f      	ldr	r7, [pc, #380]	; (80242c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 802414c:	440a      	add	r2, r1
 802414e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8024152:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8024156:	6838      	ldr	r0, [r7, #0]
 8024158:	4413      	add	r3, r2
 802415a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 802415e:	6803      	ldr	r3, [r0, #0]
 8024160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024162:	4798      	blx	r3
 8024164:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8024168:	46b9      	mov	r9, r7
 802416a:	d01c      	beq.n	80241a6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 802416c:	f010 0f04 	tst.w	r0, #4
 8024170:	d01d      	beq.n	80241ae <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8024172:	f8d9 0000 	ldr.w	r0, [r9]
 8024176:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 802417a:	6801      	ldr	r1, [r0, #0]
 802417c:	f8cd b00c 	str.w	fp, [sp, #12]
 8024180:	2700      	movs	r7, #0
 8024182:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8024186:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 802418a:	9402      	str	r4, [sp, #8]
 802418c:	b2ad      	uxth	r5, r5
 802418e:	fa1f f488 	uxth.w	r4, r8
 8024192:	9501      	str	r5, [sp, #4]
 8024194:	9400      	str	r4, [sp, #0]
 8024196:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8024198:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802419c:	4631      	mov	r1, r6
 802419e:	47a0      	blx	r4
 80241a0:	b00b      	add	sp, #44	; 0x2c
 80241a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80241a6:	b914      	cbnz	r4, 80241ae <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80241a8:	f010 0f01 	tst.w	r0, #1
 80241ac:	e7e0      	b.n	8024170 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 80241ae:	f8d9 0000 	ldr.w	r0, [r9]
 80241b2:	6803      	ldr	r3, [r0, #0]
 80241b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80241b6:	4798      	blx	r3
 80241b8:	4b44      	ldr	r3, [pc, #272]	; (80242cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 80241ba:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 80241be:	881a      	ldrh	r2, [r3, #0]
 80241c0:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80241c4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80241c8:	fb02 1404 	mla	r4, r2, r4, r1
 80241cc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80241d0:	469a      	mov	sl, r3
 80241d2:	fb05 f502 	mul.w	r5, r5, r2
 80241d6:	ea4f 0748 	mov.w	r7, r8, lsl #1
 80241da:	d059      	beq.n	8024290 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 80241dc:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 80241e0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80241e4:	fa1f f28b 	uxth.w	r2, fp
 80241e8:	fa1f f989 	uxth.w	r9, r9
 80241ec:	469e      	mov	lr, r3
 80241ee:	42ac      	cmp	r4, r5
 80241f0:	d264      	bcs.n	80242bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80241f2:	eb04 0a07 	add.w	sl, r4, r7
 80241f6:	4554      	cmp	r4, sl
 80241f8:	d23d      	bcs.n	8024276 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 80241fa:	8821      	ldrh	r1, [r4, #0]
 80241fc:	f836 3b02 	ldrh.w	r3, [r6], #2
 8024200:	1208      	asrs	r0, r1, #8
 8024202:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8024206:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802420a:	fb10 f009 	smulbb	r0, r0, r9
 802420e:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8024212:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8024216:	00c9      	lsls	r1, r1, #3
 8024218:	fb0c 0c02 	mla	ip, ip, r2, r0
 802421c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8024220:	10d8      	asrs	r0, r3, #3
 8024222:	b2c9      	uxtb	r1, r1
 8024224:	00db      	lsls	r3, r3, #3
 8024226:	fa1f fc8c 	uxth.w	ip, ip
 802422a:	fb1b fb09 	smulbb	fp, fp, r9
 802422e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024232:	b2db      	uxtb	r3, r3
 8024234:	fb11 f109 	smulbb	r1, r1, r9
 8024238:	fb00 b002 	mla	r0, r0, r2, fp
 802423c:	fb03 1302 	mla	r3, r3, r2, r1
 8024240:	f10c 0b01 	add.w	fp, ip, #1
 8024244:	b29b      	uxth	r3, r3
 8024246:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 802424a:	b280      	uxth	r0, r0
 802424c:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8024250:	f103 0c01 	add.w	ip, r3, #1
 8024254:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8024258:	1c43      	adds	r3, r0, #1
 802425a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802425e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8024262:	0940      	lsrs	r0, r0, #5
 8024264:	ea4c 0c0b 	orr.w	ip, ip, fp
 8024268:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802426c:	ea4c 0c00 	orr.w	ip, ip, r0
 8024270:	f824 cb02 	strh.w	ip, [r4], #2
 8024274:	e7bf      	b.n	80241f6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8024276:	f8be 3000 	ldrh.w	r3, [lr]
 802427a:	eba3 0308 	sub.w	r3, r3, r8
 802427e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8024282:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8024286:	eba3 0308 	sub.w	r3, r3, r8
 802428a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802428e:	e7ae      	b.n	80241ee <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8024290:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8024294:	f8d9 0000 	ldr.w	r0, [r9]
 8024298:	42ac      	cmp	r4, r5
 802429a:	6803      	ldr	r3, [r0, #0]
 802429c:	d20e      	bcs.n	80242bc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 802429e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 80242a2:	4632      	mov	r2, r6
 80242a4:	463b      	mov	r3, r7
 80242a6:	4621      	mov	r1, r4
 80242a8:	47c0      	blx	r8
 80242aa:	f8ba 3000 	ldrh.w	r3, [sl]
 80242ae:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80242b2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80242b6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80242ba:	e7eb      	b.n	8024294 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 80242bc:	4b02      	ldr	r3, [pc, #8]	; (80242c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80242be:	6818      	ldr	r0, [r3, #0]
 80242c0:	6803      	ldr	r3, [r0, #0]
 80242c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80242c4:	4798      	blx	r3
 80242c6:	e76b      	b.n	80241a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80242c8:	2000f164 	.word	0x2000f164
 80242cc:	2000f15c 	.word	0x2000f15c

080242d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80242d0:	b510      	push	{r4, lr}
 80242d2:	2104      	movs	r1, #4
 80242d4:	4604      	mov	r4, r0
 80242d6:	f009 facb 	bl	802d870 <_ZdlPvj>
 80242da:	4620      	mov	r0, r4
 80242dc:	bd10      	pop	{r4, pc}

080242de <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80242de:	b510      	push	{r4, lr}
 80242e0:	2104      	movs	r1, #4
 80242e2:	4604      	mov	r4, r0
 80242e4:	f009 fac4 	bl	802d870 <_ZdlPvj>
 80242e8:	4620      	mov	r0, r4
 80242ea:	bd10      	pop	{r4, pc}

080242ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80242ec:	b510      	push	{r4, lr}
 80242ee:	2104      	movs	r1, #4
 80242f0:	4604      	mov	r4, r0
 80242f2:	f009 fabd 	bl	802d870 <_ZdlPvj>
 80242f6:	4620      	mov	r0, r4
 80242f8:	bd10      	pop	{r4, pc}

080242fa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80242fa:	b510      	push	{r4, lr}
 80242fc:	2104      	movs	r1, #4
 80242fe:	4604      	mov	r4, r0
 8024300:	f009 fab6 	bl	802d870 <_ZdlPvj>
 8024304:	4620      	mov	r0, r4
 8024306:	bd10      	pop	{r4, pc}

08024308 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8024308:	b510      	push	{r4, lr}
 802430a:	2104      	movs	r1, #4
 802430c:	4604      	mov	r4, r0
 802430e:	f009 faaf 	bl	802d870 <_ZdlPvj>
 8024312:	4620      	mov	r0, r4
 8024314:	bd10      	pop	{r4, pc}

08024316 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8024316:	b510      	push	{r4, lr}
 8024318:	2104      	movs	r1, #4
 802431a:	4604      	mov	r4, r0
 802431c:	f009 faa8 	bl	802d870 <_ZdlPvj>
 8024320:	4620      	mov	r0, r4
 8024322:	bd10      	pop	{r4, pc}

08024324 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8024324:	b510      	push	{r4, lr}
 8024326:	2104      	movs	r1, #4
 8024328:	4604      	mov	r4, r0
 802432a:	f009 faa1 	bl	802d870 <_ZdlPvj>
 802432e:	4620      	mov	r0, r4
 8024330:	bd10      	pop	{r4, pc}

08024332 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8024332:	b510      	push	{r4, lr}
 8024334:	2104      	movs	r1, #4
 8024336:	4604      	mov	r4, r0
 8024338:	f009 fa9a 	bl	802d870 <_ZdlPvj>
 802433c:	4620      	mov	r0, r4
 802433e:	bd10      	pop	{r4, pc}

08024340 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8024340:	b510      	push	{r4, lr}
 8024342:	2104      	movs	r1, #4
 8024344:	4604      	mov	r4, r0
 8024346:	f009 fa93 	bl	802d870 <_ZdlPvj>
 802434a:	4620      	mov	r0, r4
 802434c:	bd10      	pop	{r4, pc}

0802434e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802434e:	b510      	push	{r4, lr}
 8024350:	2104      	movs	r1, #4
 8024352:	4604      	mov	r4, r0
 8024354:	f009 fa8c 	bl	802d870 <_ZdlPvj>
 8024358:	4620      	mov	r0, r4
 802435a:	bd10      	pop	{r4, pc}

0802435c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802435c:	b510      	push	{r4, lr}
 802435e:	2104      	movs	r1, #4
 8024360:	4604      	mov	r4, r0
 8024362:	f009 fa85 	bl	802d870 <_ZdlPvj>
 8024366:	4620      	mov	r0, r4
 8024368:	bd10      	pop	{r4, pc}

0802436a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802436a:	b510      	push	{r4, lr}
 802436c:	2104      	movs	r1, #4
 802436e:	4604      	mov	r4, r0
 8024370:	f009 fa7e 	bl	802d870 <_ZdlPvj>
 8024374:	4620      	mov	r0, r4
 8024376:	bd10      	pop	{r4, pc}

08024378 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8024378:	b510      	push	{r4, lr}
 802437a:	2104      	movs	r1, #4
 802437c:	4604      	mov	r4, r0
 802437e:	f009 fa77 	bl	802d870 <_ZdlPvj>
 8024382:	4620      	mov	r0, r4
 8024384:	bd10      	pop	{r4, pc}

08024386 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8024386:	b510      	push	{r4, lr}
 8024388:	2104      	movs	r1, #4
 802438a:	4604      	mov	r4, r0
 802438c:	f009 fa70 	bl	802d870 <_ZdlPvj>
 8024390:	4620      	mov	r0, r4
 8024392:	bd10      	pop	{r4, pc}

08024394 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8024394:	b510      	push	{r4, lr}
 8024396:	2104      	movs	r1, #4
 8024398:	4604      	mov	r4, r0
 802439a:	f009 fa69 	bl	802d870 <_ZdlPvj>
 802439e:	4620      	mov	r0, r4
 80243a0:	bd10      	pop	{r4, pc}

080243a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80243a2:	b510      	push	{r4, lr}
 80243a4:	2104      	movs	r1, #4
 80243a6:	4604      	mov	r4, r0
 80243a8:	f009 fa62 	bl	802d870 <_ZdlPvj>
 80243ac:	4620      	mov	r0, r4
 80243ae:	bd10      	pop	{r4, pc}

080243b0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80243b0:	b510      	push	{r4, lr}
 80243b2:	2104      	movs	r1, #4
 80243b4:	4604      	mov	r4, r0
 80243b6:	f009 fa5b 	bl	802d870 <_ZdlPvj>
 80243ba:	4620      	mov	r0, r4
 80243bc:	bd10      	pop	{r4, pc}

080243be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80243be:	b510      	push	{r4, lr}
 80243c0:	2104      	movs	r1, #4
 80243c2:	4604      	mov	r4, r0
 80243c4:	f009 fa54 	bl	802d870 <_ZdlPvj>
 80243c8:	4620      	mov	r0, r4
 80243ca:	bd10      	pop	{r4, pc}

080243cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80243cc:	b510      	push	{r4, lr}
 80243ce:	2104      	movs	r1, #4
 80243d0:	4604      	mov	r4, r0
 80243d2:	f009 fa4d 	bl	802d870 <_ZdlPvj>
 80243d6:	4620      	mov	r0, r4
 80243d8:	bd10      	pop	{r4, pc}

080243da <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 80243da:	b510      	push	{r4, lr}
 80243dc:	2104      	movs	r1, #4
 80243de:	4604      	mov	r4, r0
 80243e0:	f009 fa46 	bl	802d870 <_ZdlPvj>
 80243e4:	4620      	mov	r0, r4
 80243e6:	bd10      	pop	{r4, pc}

080243e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80243e8:	b510      	push	{r4, lr}
 80243ea:	2104      	movs	r1, #4
 80243ec:	4604      	mov	r4, r0
 80243ee:	f009 fa3f 	bl	802d870 <_ZdlPvj>
 80243f2:	4620      	mov	r0, r4
 80243f4:	bd10      	pop	{r4, pc}

080243f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80243f6:	b510      	push	{r4, lr}
 80243f8:	2104      	movs	r1, #4
 80243fa:	4604      	mov	r4, r0
 80243fc:	f009 fa38 	bl	802d870 <_ZdlPvj>
 8024400:	4620      	mov	r0, r4
 8024402:	bd10      	pop	{r4, pc}

08024404 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8024404:	b510      	push	{r4, lr}
 8024406:	2104      	movs	r1, #4
 8024408:	4604      	mov	r4, r0
 802440a:	f009 fa31 	bl	802d870 <_ZdlPvj>
 802440e:	4620      	mov	r0, r4
 8024410:	bd10      	pop	{r4, pc}

08024412 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8024412:	b510      	push	{r4, lr}
 8024414:	2104      	movs	r1, #4
 8024416:	4604      	mov	r4, r0
 8024418:	f009 fa2a 	bl	802d870 <_ZdlPvj>
 802441c:	4620      	mov	r0, r4
 802441e:	bd10      	pop	{r4, pc}

08024420 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8024420:	b510      	push	{r4, lr}
 8024422:	2104      	movs	r1, #4
 8024424:	4604      	mov	r4, r0
 8024426:	f009 fa23 	bl	802d870 <_ZdlPvj>
 802442a:	4620      	mov	r0, r4
 802442c:	bd10      	pop	{r4, pc}

0802442e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 802442e:	b510      	push	{r4, lr}
 8024430:	2104      	movs	r1, #4
 8024432:	4604      	mov	r4, r0
 8024434:	f009 fa1c 	bl	802d870 <_ZdlPvj>
 8024438:	4620      	mov	r0, r4
 802443a:	bd10      	pop	{r4, pc}

0802443c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 802443c:	b510      	push	{r4, lr}
 802443e:	2104      	movs	r1, #4
 8024440:	4604      	mov	r4, r0
 8024442:	f009 fa15 	bl	802d870 <_ZdlPvj>
 8024446:	4620      	mov	r0, r4
 8024448:	bd10      	pop	{r4, pc}

0802444a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 802444a:	b510      	push	{r4, lr}
 802444c:	2104      	movs	r1, #4
 802444e:	4604      	mov	r4, r0
 8024450:	f009 fa0e 	bl	802d870 <_ZdlPvj>
 8024454:	4620      	mov	r0, r4
 8024456:	bd10      	pop	{r4, pc}

08024458 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8024458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802445c:	b091      	sub	sp, #68	; 0x44
 802445e:	469b      	mov	fp, r3
 8024460:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8024464:	4616      	mov	r6, r2
 8024466:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 802446a:	f9b3 2000 	ldrsh.w	r2, [r3]
 802446e:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 8024472:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8024476:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 802447a:	4604      	mov	r4, r0
 802447c:	460d      	mov	r5, r1
 802447e:	4640      	mov	r0, r8
 8024480:	4659      	mov	r1, fp
 8024482:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8024486:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 802448a:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 802448e:	f7f5 f9ed 	bl	801986c <_ZN8touchgfx4RectaNERKS0_>
 8024492:	4631      	mov	r1, r6
 8024494:	4640      	mov	r0, r8
 8024496:	f7f5 f9e9 	bl	801986c <_ZN8touchgfx4RectaNERKS0_>
 802449a:	4b74      	ldr	r3, [pc, #464]	; (802466c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 802449c:	8818      	ldrh	r0, [r3, #0]
 802449e:	4b74      	ldr	r3, [pc, #464]	; (8024670 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 80244a0:	8819      	ldrh	r1, [r3, #0]
 80244a2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80244a6:	2b00      	cmp	r3, #0
 80244a8:	b202      	sxth	r2, r0
 80244aa:	b20e      	sxth	r6, r1
 80244ac:	da07      	bge.n	80244be <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 80244ae:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 80244b2:	4463      	add	r3, ip
 80244b4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 80244b8:	2300      	movs	r3, #0
 80244ba:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 80244be:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 80244c2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 80244c6:	1ad2      	subs	r2, r2, r3
 80244c8:	4594      	cmp	ip, r2
 80244ca:	bfc4      	itt	gt
 80244cc:	1ac2      	subgt	r2, r0, r3
 80244ce:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 80244d2:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 80244d6:	2a00      	cmp	r2, #0
 80244d8:	da07      	bge.n	80244ea <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 80244da:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 80244de:	4462      	add	r2, ip
 80244e0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 80244e4:	2200      	movs	r2, #0
 80244e6:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80244ea:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 80244ee:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 80244f2:	eba6 060a 	sub.w	r6, r6, sl
 80244f6:	42b2      	cmp	r2, r6
 80244f8:	bfc4      	itt	gt
 80244fa:	eba1 020a 	subgt.w	r2, r1, sl
 80244fe:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 8024502:	4a5c      	ldr	r2, [pc, #368]	; (8024674 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8024504:	7812      	ldrb	r2, [r2, #0]
 8024506:	b9a2      	cbnz	r2, 8024532 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8024508:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 802450c:	4286      	cmp	r6, r0
 802450e:	4640      	mov	r0, r8
 8024510:	9303      	str	r3, [sp, #12]
 8024512:	bf14      	ite	ne
 8024514:	2600      	movne	r6, #0
 8024516:	2601      	moveq	r6, #1
 8024518:	f7f5 f9eb 	bl	80198f2 <_ZNK8touchgfx4Rect7isEmptyEv>
 802451c:	9b03      	ldr	r3, [sp, #12]
 802451e:	b160      	cbz	r0, 802453a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8024520:	2300      	movs	r3, #0
 8024522:	8023      	strh	r3, [r4, #0]
 8024524:	8063      	strh	r3, [r4, #2]
 8024526:	80a3      	strh	r3, [r4, #4]
 8024528:	4620      	mov	r0, r4
 802452a:	80e3      	strh	r3, [r4, #6]
 802452c:	b011      	add	sp, #68	; 0x44
 802452e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024532:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8024536:	428e      	cmp	r6, r1
 8024538:	e7e9      	b.n	802450e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 802453a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 802453e:	9205      	str	r2, [sp, #20]
 8024540:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8024544:	9206      	str	r2, [sp, #24]
 8024546:	f8bb 2000 	ldrh.w	r2, [fp]
 802454a:	900e      	str	r0, [sp, #56]	; 0x38
 802454c:	1a9b      	subs	r3, r3, r2
 802454e:	b21b      	sxth	r3, r3
 8024550:	9303      	str	r3, [sp, #12]
 8024552:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8024556:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 802455a:	ebaa 0a03 	sub.w	sl, sl, r3
 802455e:	fa0f f38a 	sxth.w	r3, sl
 8024562:	9304      	str	r3, [sp, #16]
 8024564:	9b03      	ldr	r3, [sp, #12]
 8024566:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 802456a:	9b04      	ldr	r3, [sp, #16]
 802456c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8024570:	9b05      	ldr	r3, [sp, #20]
 8024572:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8024576:	a90e      	add	r1, sp, #56	; 0x38
 8024578:	9b06      	ldr	r3, [sp, #24]
 802457a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 802457e:	a80c      	add	r0, sp, #48	; 0x30
 8024580:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 8024584:	f7f9 fcca 	bl	801df1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024588:	4640      	mov	r0, r8
 802458a:	f7f9 fc9f 	bl	801decc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802458e:	a80e      	add	r0, sp, #56	; 0x38
 8024590:	f7f9 fc9c 	bl	801decc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024594:	4b38      	ldr	r3, [pc, #224]	; (8024678 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8024596:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 802459a:	881b      	ldrh	r3, [r3, #0]
 802459c:	9307      	str	r3, [sp, #28]
 802459e:	682b      	ldr	r3, [r5, #0]
 80245a0:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 802467c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 80245a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80245a6:	4628      	mov	r0, r5
 80245a8:	4798      	blx	r3
 80245aa:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 80245ae:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 80245b2:	4681      	mov	r9, r0
 80245b4:	fb1a 3305 	smlabb	r3, sl, r5, r3
 80245b8:	f8db 0000 	ldr.w	r0, [fp]
 80245bc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80245be:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80245c2:	6803      	ldr	r3, [r0, #0]
 80245c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80245c6:	4798      	blx	r3
 80245c8:	4607      	mov	r7, r0
 80245ca:	f8db 0000 	ldr.w	r0, [fp]
 80245ce:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 80245d2:	6803      	ldr	r3, [r0, #0]
 80245d4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 80245d8:	9109      	str	r1, [sp, #36]	; 0x24
 80245da:	9208      	str	r2, [sp, #32]
 80245dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80245de:	4798      	blx	r3
 80245e0:	f010 0f01 	tst.w	r0, #1
 80245e4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80245e8:	d012      	beq.n	8024610 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 80245ea:	f8db 0000 	ldr.w	r0, [fp]
 80245ee:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80245f2:	6803      	ldr	r3, [r0, #0]
 80245f4:	9200      	str	r2, [sp, #0]
 80245f6:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80245f8:	e898 0006 	ldmia.w	r8, {r1, r2}
 80245fc:	462b      	mov	r3, r5
 80245fe:	47b0      	blx	r6
 8024600:	9b03      	ldr	r3, [sp, #12]
 8024602:	8023      	strh	r3, [r4, #0]
 8024604:	9b04      	ldr	r3, [sp, #16]
 8024606:	8063      	strh	r3, [r4, #2]
 8024608:	9b05      	ldr	r3, [sp, #20]
 802460a:	80a3      	strh	r3, [r4, #4]
 802460c:	9b06      	ldr	r3, [sp, #24]
 802460e:	e78b      	b.n	8024528 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8024610:	fb09 f202 	mul.w	r2, r9, r2
 8024614:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8024618:	440f      	add	r7, r1
 802461a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 802461e:	b166      	cbz	r6, 802463a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8024620:	9a07      	ldr	r2, [sp, #28]
 8024622:	4592      	cmp	sl, r2
 8024624:	d109      	bne.n	802463a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8024626:	f8db 0000 	ldr.w	r0, [fp]
 802462a:	6802      	ldr	r2, [r0, #0]
 802462c:	fb09 f303 	mul.w	r3, r9, r3
 8024630:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8024632:	4629      	mov	r1, r5
 8024634:	463a      	mov	r2, r7
 8024636:	47b0      	blx	r6
 8024638:	e7e2      	b.n	8024600 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 802463a:	fb0a f303 	mul.w	r3, sl, r3
 802463e:	f8df b03c 	ldr.w	fp, [pc, #60]	; 802467c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8024642:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8024646:	ea4f 064a 	mov.w	r6, sl, lsl #1
 802464a:	4545      	cmp	r5, r8
 802464c:	d2d8      	bcs.n	8024600 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 802464e:	f8db 0000 	ldr.w	r0, [fp]
 8024652:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8024656:	6802      	ldr	r2, [r0, #0]
 8024658:	4629      	mov	r1, r5
 802465a:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 802465e:	005b      	lsls	r3, r3, #1
 8024660:	463a      	mov	r2, r7
 8024662:	47d0      	blx	sl
 8024664:	444f      	add	r7, r9
 8024666:	4435      	add	r5, r6
 8024668:	e7ef      	b.n	802464a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 802466a:	bf00      	nop
 802466c:	2000f156 	.word	0x2000f156
 8024670:	2000f158 	.word	0x2000f158
 8024674:	2000f15a 	.word	0x2000f15a
 8024678:	2000f15c 	.word	0x2000f15c
 802467c:	2000f164 	.word	0x2000f164

08024680 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8024680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024682:	4606      	mov	r6, r0
 8024684:	b087      	sub	sp, #28
 8024686:	460c      	mov	r4, r1
 8024688:	4617      	mov	r7, r2
 802468a:	461d      	mov	r5, r3
 802468c:	b333      	cbz	r3, 80246dc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 802468e:	4608      	mov	r0, r1
 8024690:	f7f5 f92f 	bl	80198f2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8024694:	bb10      	cbnz	r0, 80246dc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8024696:	6820      	ldr	r0, [r4, #0]
 8024698:	6861      	ldr	r1, [r4, #4]
 802469a:	4c1c      	ldr	r4, [pc, #112]	; (802470c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 802469c:	ab04      	add	r3, sp, #16
 802469e:	c303      	stmia	r3!, {r0, r1}
 80246a0:	a804      	add	r0, sp, #16
 80246a2:	f7f9 fc13 	bl	801decc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80246a6:	6820      	ldr	r0, [r4, #0]
 80246a8:	6803      	ldr	r3, [r0, #0]
 80246aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80246ac:	4798      	blx	r3
 80246ae:	2dff      	cmp	r5, #255	; 0xff
 80246b0:	d016      	beq.n	80246e0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 80246b2:	f010 0f08 	tst.w	r0, #8
 80246b6:	6820      	ldr	r0, [r4, #0]
 80246b8:	d015      	beq.n	80246e6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80246ba:	2400      	movs	r4, #0
 80246bc:	6801      	ldr	r1, [r0, #0]
 80246be:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80246c2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80246c6:	e9cd 5402 	strd	r5, r4, [sp, #8]
 80246ca:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80246ce:	9401      	str	r4, [sp, #4]
 80246d0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80246d4:	9400      	str	r4, [sp, #0]
 80246d6:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 80246d8:	4639      	mov	r1, r7
 80246da:	47a0      	blx	r4
 80246dc:	b007      	add	sp, #28
 80246de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80246e0:	f010 0f02 	tst.w	r0, #2
 80246e4:	e7e7      	b.n	80246b6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 80246e6:	6803      	ldr	r3, [r0, #0]
 80246e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80246ea:	4798      	blx	r3
 80246ec:	4b08      	ldr	r3, [pc, #32]	; (8024710 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 80246ee:	881a      	ldrh	r2, [r3, #0]
 80246f0:	6833      	ldr	r3, [r6, #0]
 80246f2:	e9cd 7500 	strd	r7, r5, [sp]
 80246f6:	4601      	mov	r1, r0
 80246f8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80246fa:	4630      	mov	r0, r6
 80246fc:	ab04      	add	r3, sp, #16
 80246fe:	47a8      	blx	r5
 8024700:	6820      	ldr	r0, [r4, #0]
 8024702:	6803      	ldr	r3, [r0, #0]
 8024704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024706:	4798      	blx	r3
 8024708:	e7e8      	b.n	80246dc <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 802470a:	bf00      	nop
 802470c:	2000f164 	.word	0x2000f164
 8024710:	2000f15c 	.word	0x2000f15c

08024714 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8024714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024718:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 802471c:	9e08      	ldr	r6, [sp, #32]
 802471e:	4688      	mov	r8, r1
 8024720:	4614      	mov	r4, r2
 8024722:	461d      	mov	r5, r3
 8024724:	2f00      	cmp	r7, #0
 8024726:	f000 80a9 	beq.w	802487c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 802472a:	4618      	mov	r0, r3
 802472c:	f7f5 f8e1 	bl	80198f2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8024730:	2800      	cmp	r0, #0
 8024732:	f040 80a3 	bne.w	802487c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8024736:	f9b5 1000 	ldrsh.w	r1, [r5]
 802473a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 802473e:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8024742:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8024746:	fb04 1303 	mla	r3, r4, r3, r1
 802474a:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 802474e:	4365      	muls	r5, r4
 8024750:	2fff      	cmp	r7, #255	; 0xff
 8024752:	eba4 0200 	sub.w	r2, r4, r0
 8024756:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 802475a:	ea4f 2816 	mov.w	r8, r6, lsr #8
 802475e:	d04a      	beq.n	80247f6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8024760:	b2bc      	uxth	r4, r7
 8024762:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8024766:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 802476a:	fa5f f788 	uxtb.w	r7, r8
 802476e:	b2f3      	uxtb	r3, r6
 8024770:	0040      	lsls	r0, r0, #1
 8024772:	fb0e fe04 	mul.w	lr, lr, r4
 8024776:	4367      	muls	r7, r4
 8024778:	4363      	muls	r3, r4
 802477a:	ea4f 0842 	mov.w	r8, r2, lsl #1
 802477e:	fa1f fc8c 	uxth.w	ip, ip
 8024782:	42a9      	cmp	r1, r5
 8024784:	d27a      	bcs.n	802487c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8024786:	eb01 0900 	add.w	r9, r1, r0
 802478a:	4549      	cmp	r1, r9
 802478c:	d231      	bcs.n	80247f2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 802478e:	880a      	ldrh	r2, [r1, #0]
 8024790:	1214      	asrs	r4, r2, #8
 8024792:	10d6      	asrs	r6, r2, #3
 8024794:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8024798:	00d2      	lsls	r2, r2, #3
 802479a:	b2d2      	uxtb	r2, r2
 802479c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80247a0:	fb14 f40c 	smulbb	r4, r4, ip
 80247a4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80247a8:	4474      	add	r4, lr
 80247aa:	fb12 f20c 	smulbb	r2, r2, ip
 80247ae:	b2a4      	uxth	r4, r4
 80247b0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80247b4:	441a      	add	r2, r3
 80247b6:	b292      	uxth	r2, r2
 80247b8:	f104 0a01 	add.w	sl, r4, #1
 80247bc:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80247c0:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80247c4:	fb16 f60c 	smulbb	r6, r6, ip
 80247c8:	f102 0a01 	add.w	sl, r2, #1
 80247cc:	443e      	add	r6, r7
 80247ce:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 80247d2:	b2b6      	uxth	r6, r6
 80247d4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80247d8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80247dc:	4322      	orrs	r2, r4
 80247de:	1c74      	adds	r4, r6, #1
 80247e0:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 80247e4:	0976      	lsrs	r6, r6, #5
 80247e6:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80247ea:	4332      	orrs	r2, r6
 80247ec:	f821 2b02 	strh.w	r2, [r1], #2
 80247f0:	e7cb      	b.n	802478a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 80247f2:	4441      	add	r1, r8
 80247f4:	e7c5      	b.n	8024782 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 80247f6:	4f22      	ldr	r7, [pc, #136]	; (8024880 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 80247f8:	0973      	lsrs	r3, r6, #5
 80247fa:	ea08 0707 	and.w	r7, r8, r7
 80247fe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024802:	433b      	orrs	r3, r7
 8024804:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8024808:	4333      	orrs	r3, r6
 802480a:	07e7      	lsls	r7, r4, #31
 802480c:	b29b      	uxth	r3, r3
 802480e:	d50b      	bpl.n	8024828 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8024810:	0040      	lsls	r0, r0, #1
 8024812:	0052      	lsls	r2, r2, #1
 8024814:	42a9      	cmp	r1, r5
 8024816:	d231      	bcs.n	802487c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8024818:	180c      	adds	r4, r1, r0
 802481a:	42a1      	cmp	r1, r4
 802481c:	d202      	bcs.n	8024824 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 802481e:	f821 3b02 	strh.w	r3, [r1], #2
 8024822:	e7fa      	b.n	802481a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 8024824:	4411      	add	r1, r2
 8024826:	e7f5      	b.n	8024814 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8024828:	078e      	lsls	r6, r1, #30
 802482a:	d008      	beq.n	802483e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 802482c:	0066      	lsls	r6, r4, #1
 802482e:	460a      	mov	r2, r1
 8024830:	42aa      	cmp	r2, r5
 8024832:	d202      	bcs.n	802483a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 8024834:	8013      	strh	r3, [r2, #0]
 8024836:	4432      	add	r2, r6
 8024838:	e7fa      	b.n	8024830 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 802483a:	3102      	adds	r1, #2
 802483c:	3801      	subs	r0, #1
 802483e:	07c2      	lsls	r2, r0, #31
 8024840:	d50b      	bpl.n	802485a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8024842:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8024846:	3a01      	subs	r2, #1
 8024848:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 802484c:	0066      	lsls	r6, r4, #1
 802484e:	42aa      	cmp	r2, r5
 8024850:	d202      	bcs.n	8024858 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 8024852:	8013      	strh	r3, [r2, #0]
 8024854:	4432      	add	r2, r6
 8024856:	e7fa      	b.n	802484e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8024858:	3801      	subs	r0, #1
 802485a:	b178      	cbz	r0, 802487c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 802485c:	1040      	asrs	r0, r0, #1
 802485e:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8024862:	0080      	lsls	r0, r0, #2
 8024864:	0064      	lsls	r4, r4, #1
 8024866:	42a9      	cmp	r1, r5
 8024868:	d208      	bcs.n	802487c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 802486a:	180e      	adds	r6, r1, r0
 802486c:	460a      	mov	r2, r1
 802486e:	42b2      	cmp	r2, r6
 8024870:	d202      	bcs.n	8024878 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 8024872:	f842 3b04 	str.w	r3, [r2], #4
 8024876:	e7fa      	b.n	802486e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 8024878:	4421      	add	r1, r4
 802487a:	e7f4      	b.n	8024866 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 802487c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024880:	00fff800 	.word	0x00fff800

08024884 <_ZN8touchgfx8LCD16bppC1Ev>:
 8024884:	2200      	movs	r2, #0
 8024886:	4910      	ldr	r1, [pc, #64]	; (80248c8 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8024888:	6042      	str	r2, [r0, #4]
 802488a:	6001      	str	r1, [r0, #0]
 802488c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8024890:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8024894:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8024898:	e9c0 2208 	strd	r2, r2, [r0, #32]
 802489c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 80248a0:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 80248a4:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 80248a8:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 80248ac:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 80248b0:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 80248b4:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 80248b8:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80248bc:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 80248c0:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 80248c4:	4770      	bx	lr
 80248c6:	bf00      	nop
 80248c8:	08030df4 	.word	0x08030df4

080248cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80248cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248d0:	460d      	mov	r5, r1
 80248d2:	b08d      	sub	sp, #52	; 0x34
 80248d4:	4604      	mov	r4, r0
 80248d6:	6808      	ldr	r0, [r1, #0]
 80248d8:	6849      	ldr	r1, [r1, #4]
 80248da:	4699      	mov	r9, r3
 80248dc:	ab08      	add	r3, sp, #32
 80248de:	c303      	stmia	r3!, {r0, r1}
 80248e0:	6810      	ldr	r0, [r2, #0]
 80248e2:	6851      	ldr	r1, [r2, #4]
 80248e4:	ab0a      	add	r3, sp, #40	; 0x28
 80248e6:	c303      	stmia	r3!, {r0, r1}
 80248e8:	a808      	add	r0, sp, #32
 80248ea:	f7f9 faef 	bl	801decc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80248ee:	4629      	mov	r1, r5
 80248f0:	a80a      	add	r0, sp, #40	; 0x28
 80248f2:	f7f9 fb13 	bl	801df1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80248f6:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80248fa:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 80248fe:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8024902:	4d63      	ldr	r5, [pc, #396]	; (8024a90 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8024904:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8024908:	6828      	ldr	r0, [r5, #0]
 802490a:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 802490e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8024912:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8024916:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 802491a:	440a      	add	r2, r1
 802491c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8024920:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8024924:	4413      	add	r3, r2
 8024926:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 802492a:	6803      	ldr	r3, [r0, #0]
 802492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802492e:	4798      	blx	r3
 8024930:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024934:	d119      	bne.n	802496a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8024936:	f010 0f20 	tst.w	r0, #32
 802493a:	6828      	ldr	r0, [r5, #0]
 802493c:	d018      	beq.n	8024970 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 802493e:	2500      	movs	r5, #0
 8024940:	6801      	ldr	r1, [r0, #0]
 8024942:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8024946:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 802494a:	e9cd 9503 	strd	r9, r5, [sp, #12]
 802494e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8024952:	9502      	str	r5, [sp, #8]
 8024954:	b2b6      	uxth	r6, r6
 8024956:	fa1f f588 	uxth.w	r5, r8
 802495a:	9601      	str	r6, [sp, #4]
 802495c:	9500      	str	r5, [sp, #0]
 802495e:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8024960:	4621      	mov	r1, r4
 8024962:	47a8      	blx	r5
 8024964:	b00d      	add	sp, #52	; 0x34
 8024966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802496a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802496e:	e7e4      	b.n	802493a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8024970:	6803      	ldr	r3, [r0, #0]
 8024972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024974:	4798      	blx	r3
 8024976:	4947      	ldr	r1, [pc, #284]	; (8024a94 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8024978:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 802497c:	880b      	ldrh	r3, [r1, #0]
 802497e:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8024982:	fb03 5202 	mla	r2, r3, r2, r5
 8024986:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802498a:	4373      	muls	r3, r6
 802498c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8024990:	9307      	str	r3, [sp, #28]
 8024992:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8024996:	9306      	str	r3, [sp, #24]
 8024998:	468a      	mov	sl, r1
 802499a:	9b07      	ldr	r3, [sp, #28]
 802499c:	4298      	cmp	r0, r3
 802499e:	d270      	bcs.n	8024a82 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 80249a0:	9b06      	ldr	r3, [sp, #24]
 80249a2:	4621      	mov	r1, r4
 80249a4:	eb00 0b03 	add.w	fp, r0, r3
 80249a8:	4558      	cmp	r0, fp
 80249aa:	d25d      	bcs.n	8024a68 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 80249ac:	f851 4b04 	ldr.w	r4, [r1], #4
 80249b0:	0e23      	lsrs	r3, r4, #24
 80249b2:	d014      	beq.n	80249de <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 80249b4:	2bff      	cmp	r3, #255	; 0xff
 80249b6:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 80249ba:	d112      	bne.n	80249e2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 80249bc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80249c0:	d10f      	bne.n	80249e2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 80249c2:	0963      	lsrs	r3, r4, #5
 80249c4:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 80249c8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80249cc:	f02c 0c07 	bic.w	ip, ip, #7
 80249d0:	ea43 0c0c 	orr.w	ip, r3, ip
 80249d4:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 80249d8:	ea4c 0404 	orr.w	r4, ip, r4
 80249dc:	8004      	strh	r4, [r0, #0]
 80249de:	3002      	adds	r0, #2
 80249e0:	e7e2      	b.n	80249a8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 80249e2:	fb09 f303 	mul.w	r3, r9, r3
 80249e6:	8807      	ldrh	r7, [r0, #0]
 80249e8:	1c5a      	adds	r2, r3, #1
 80249ea:	eb02 2223 	add.w	r2, r2, r3, asr #8
 80249ee:	1212      	asrs	r2, r2, #8
 80249f0:	123e      	asrs	r6, r7, #8
 80249f2:	b293      	uxth	r3, r2
 80249f4:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 80249f8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80249fc:	43d2      	mvns	r2, r2
 80249fe:	b2d2      	uxtb	r2, r2
 8024a00:	10fd      	asrs	r5, r7, #3
 8024a02:	fb1e fe03 	smulbb	lr, lr, r3
 8024a06:	00ff      	lsls	r7, r7, #3
 8024a08:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8024a0c:	fb06 e602 	mla	r6, r6, r2, lr
 8024a10:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8024a14:	b2ff      	uxtb	r7, r7
 8024a16:	fa5f fc8c 	uxtb.w	ip, ip
 8024a1a:	b2e4      	uxtb	r4, r4
 8024a1c:	b2b6      	uxth	r6, r6
 8024a1e:	fb1c fc03 	smulbb	ip, ip, r3
 8024a22:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8024a26:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8024a2a:	fb14 f403 	smulbb	r4, r4, r3
 8024a2e:	fb05 c502 	mla	r5, r5, r2, ip
 8024a32:	f106 0e01 	add.w	lr, r6, #1
 8024a36:	fb07 4702 	mla	r7, r7, r2, r4
 8024a3a:	b2ad      	uxth	r5, r5
 8024a3c:	b2bf      	uxth	r7, r7
 8024a3e:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8024a42:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8024a46:	f105 0c01 	add.w	ip, r5, #1
 8024a4a:	1c7e      	adds	r6, r7, #1
 8024a4c:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8024a50:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8024a54:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8024a58:	096d      	lsrs	r5, r5, #5
 8024a5a:	ea46 060e 	orr.w	r6, r6, lr
 8024a5e:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024a62:	432e      	orrs	r6, r5
 8024a64:	8006      	strh	r6, [r0, #0]
 8024a66:	e7ba      	b.n	80249de <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8024a68:	f8ba 3000 	ldrh.w	r3, [sl]
 8024a6c:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8024a70:	eba3 0308 	sub.w	r3, r3, r8
 8024a74:	eba4 0408 	sub.w	r4, r4, r8
 8024a78:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8024a7c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8024a80:	e78b      	b.n	802499a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8024a82:	4b03      	ldr	r3, [pc, #12]	; (8024a90 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8024a84:	6818      	ldr	r0, [r3, #0]
 8024a86:	6803      	ldr	r3, [r0, #0]
 8024a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024a8a:	4798      	blx	r3
 8024a8c:	e76a      	b.n	8024964 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8024a8e:	bf00      	nop
 8024a90:	2000f164 	.word	0x2000f164
 8024a94:	2000f15c 	.word	0x2000f15c

08024a98 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8024a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024a9c:	460c      	mov	r4, r1
 8024a9e:	b085      	sub	sp, #20
 8024aa0:	6810      	ldr	r0, [r2, #0]
 8024aa2:	6851      	ldr	r1, [r2, #4]
 8024aa4:	466d      	mov	r5, sp
 8024aa6:	c503      	stmia	r5!, {r0, r1}
 8024aa8:	6818      	ldr	r0, [r3, #0]
 8024aaa:	6859      	ldr	r1, [r3, #4]
 8024aac:	4616      	mov	r6, r2
 8024aae:	c503      	stmia	r5!, {r0, r1}
 8024ab0:	4668      	mov	r0, sp
 8024ab2:	f7f9 fa0b 	bl	801decc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024ab6:	4631      	mov	r1, r6
 8024ab8:	a802      	add	r0, sp, #8
 8024aba:	f7f9 fa2f 	bl	801df1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024abe:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8024ac2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8024ac6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8024aca:	4d28      	ldr	r5, [pc, #160]	; (8024b6c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8024acc:	4e28      	ldr	r6, [pc, #160]	; (8024b70 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8024ace:	6828      	ldr	r0, [r5, #0]
 8024ad0:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8024ad4:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8024ad8:	fb11 2103 	smlabb	r1, r1, r3, r2
 8024adc:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8024ae0:	f8bd 1000 	ldrh.w	r1, [sp]
 8024ae4:	440a      	add	r2, r1
 8024ae6:	f8ad 2008 	strh.w	r2, [sp, #8]
 8024aea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8024aee:	4413      	add	r3, r2
 8024af0:	f8ad 300a 	strh.w	r3, [sp, #10]
 8024af4:	6803      	ldr	r3, [r0, #0]
 8024af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024af8:	4798      	blx	r3
 8024afa:	8833      	ldrh	r3, [r6, #0]
 8024afc:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8024b00:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8024b04:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8024b74 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8024b08:	fb03 1202 	mla	r2, r3, r2, r1
 8024b0c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8024b10:	fb08 f303 	mul.w	r3, r8, r3
 8024b14:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8024b18:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8024b1c:	4298      	cmp	r0, r3
 8024b1e:	d21d      	bcs.n	8024b5c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8024b20:	eb00 080c 	add.w	r8, r0, ip
 8024b24:	4540      	cmp	r0, r8
 8024b26:	d20f      	bcs.n	8024b48 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8024b28:	f854 1b04 	ldr.w	r1, [r4], #4
 8024b2c:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8024b30:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8024b34:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8024b38:	ea42 0209 	orr.w	r2, r2, r9
 8024b3c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8024b40:	430a      	orrs	r2, r1
 8024b42:	f820 2b02 	strh.w	r2, [r0], #2
 8024b46:	e7ed      	b.n	8024b24 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8024b48:	8832      	ldrh	r2, [r6, #0]
 8024b4a:	1bd2      	subs	r2, r2, r7
 8024b4c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8024b50:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8024b54:	1bd2      	subs	r2, r2, r7
 8024b56:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8024b5a:	e7df      	b.n	8024b1c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8024b5c:	6828      	ldr	r0, [r5, #0]
 8024b5e:	6803      	ldr	r3, [r0, #0]
 8024b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024b62:	4798      	blx	r3
 8024b64:	b005      	add	sp, #20
 8024b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024b6a:	bf00      	nop
 8024b6c:	2000f164 	.word	0x2000f164
 8024b70:	2000f15c 	.word	0x2000f15c
 8024b74:	fffff800 	.word	0xfffff800

08024b78 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8024b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024b7c:	460e      	mov	r6, r1
 8024b7e:	b08e      	sub	sp, #56	; 0x38
 8024b80:	4604      	mov	r4, r0
 8024b82:	6808      	ldr	r0, [r1, #0]
 8024b84:	6849      	ldr	r1, [r1, #4]
 8024b86:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8024d60 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8024b8a:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8024d64 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8024b8e:	461d      	mov	r5, r3
 8024b90:	ab0a      	add	r3, sp, #40	; 0x28
 8024b92:	c303      	stmia	r3!, {r0, r1}
 8024b94:	6810      	ldr	r0, [r2, #0]
 8024b96:	6851      	ldr	r1, [r2, #4]
 8024b98:	ab0c      	add	r3, sp, #48	; 0x30
 8024b9a:	c303      	stmia	r3!, {r0, r1}
 8024b9c:	a80a      	add	r0, sp, #40	; 0x28
 8024b9e:	f7f9 f995 	bl	801decc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024ba2:	4631      	mov	r1, r6
 8024ba4:	a80c      	add	r0, sp, #48	; 0x30
 8024ba6:	f7f9 f9b9 	bl	801df1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024baa:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8024bae:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8024bb2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8024bb6:	f8d8 0000 	ldr.w	r0, [r8]
 8024bba:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8024bbe:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8024bc2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8024bc6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024bca:	440c      	add	r4, r1
 8024bcc:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8024bd0:	440a      	add	r2, r1
 8024bd2:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8024bd6:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8024bda:	4413      	add	r3, r2
 8024bdc:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8024be0:	6803      	ldr	r3, [r0, #0]
 8024be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024be4:	4798      	blx	r3
 8024be6:	2dff      	cmp	r5, #255	; 0xff
 8024be8:	d124      	bne.n	8024c34 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8024bea:	f010 0f01 	tst.w	r0, #1
 8024bee:	f8d8 0000 	ldr.w	r0, [r8]
 8024bf2:	d022      	beq.n	8024c3a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8024bf4:	2100      	movs	r1, #0
 8024bf6:	f8d0 c000 	ldr.w	ip, [r0]
 8024bfa:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8024bfe:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8024c02:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8024c06:	f04f 0e01 	mov.w	lr, #1
 8024c0a:	f8cd e018 	str.w	lr, [sp, #24]
 8024c0e:	f8b9 e000 	ldrh.w	lr, [r9]
 8024c12:	9503      	str	r5, [sp, #12]
 8024c14:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8024c18:	b2b6      	uxth	r6, r6
 8024c1a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8024c1e:	9102      	str	r1, [sp, #8]
 8024c20:	b2bf      	uxth	r7, r7
 8024c22:	9601      	str	r6, [sp, #4]
 8024c24:	9700      	str	r7, [sp, #0]
 8024c26:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8024c2a:	4621      	mov	r1, r4
 8024c2c:	47a8      	blx	r5
 8024c2e:	b00e      	add	sp, #56	; 0x38
 8024c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024c34:	f010 0f04 	tst.w	r0, #4
 8024c38:	e7d9      	b.n	8024bee <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8024c3a:	6803      	ldr	r3, [r0, #0]
 8024c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024c3e:	4798      	blx	r3
 8024c40:	f8b9 3000 	ldrh.w	r3, [r9]
 8024c44:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8024c48:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8024c4c:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8024c50:	fb03 1202 	mla	r2, r3, r2, r1
 8024c54:	ebac 0c07 	sub.w	ip, ip, r7
 8024c58:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8024c5c:	435e      	muls	r6, r3
 8024c5e:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8024c62:	2dff      	cmp	r5, #255	; 0xff
 8024c64:	eba3 0707 	sub.w	r7, r3, r7
 8024c68:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8024c6c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8024c70:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8024c74:	d049      	beq.n	8024d0a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8024c76:	43eb      	mvns	r3, r5
 8024c78:	fa1f f985 	uxth.w	r9, r5
 8024c7c:	b2db      	uxtb	r3, r3
 8024c7e:	42b0      	cmp	r0, r6
 8024c80:	d266      	bcs.n	8024d50 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8024c82:	eb00 0a0e 	add.w	sl, r0, lr
 8024c86:	4550      	cmp	r0, sl
 8024c88:	4621      	mov	r1, r4
 8024c8a:	f104 0403 	add.w	r4, r4, #3
 8024c8e:	d25b      	bcs.n	8024d48 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8024c90:	8802      	ldrh	r2, [r0, #0]
 8024c92:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8024c96:	ea4f 2822 	mov.w	r8, r2, asr #8
 8024c9a:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8024c9e:	fb11 f109 	smulbb	r1, r1, r9
 8024ca2:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8024ca6:	10d5      	asrs	r5, r2, #3
 8024ca8:	fb08 1803 	mla	r8, r8, r3, r1
 8024cac:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8024cb0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8024cb4:	fb11 f109 	smulbb	r1, r1, r9
 8024cb8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8024cbc:	fb05 1503 	mla	r5, r5, r3, r1
 8024cc0:	00d2      	lsls	r2, r2, #3
 8024cc2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8024cc6:	b2d2      	uxtb	r2, r2
 8024cc8:	fb11 f109 	smulbb	r1, r1, r9
 8024ccc:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8024cd0:	fa1f f888 	uxth.w	r8, r8
 8024cd4:	fb02 1203 	mla	r2, r2, r3, r1
 8024cd8:	b292      	uxth	r2, r2
 8024cda:	f108 0101 	add.w	r1, r8, #1
 8024cde:	b2ad      	uxth	r5, r5
 8024ce0:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8024ce4:	1c51      	adds	r1, r2, #1
 8024ce6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8024cea:	1c69      	adds	r1, r5, #1
 8024cec:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8024cf0:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 8024cf4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024cf8:	096d      	lsrs	r5, r5, #5
 8024cfa:	ea42 0208 	orr.w	r2, r2, r8
 8024cfe:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8024d02:	432a      	orrs	r2, r5
 8024d04:	f820 2b02 	strh.w	r2, [r0], #2
 8024d08:	e7bd      	b.n	8024c86 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8024d0a:	4a14      	ldr	r2, [pc, #80]	; (8024d5c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8024d0c:	42b0      	cmp	r0, r6
 8024d0e:	d21f      	bcs.n	8024d50 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8024d10:	eb00 050e 	add.w	r5, r0, lr
 8024d14:	42a8      	cmp	r0, r5
 8024d16:	4621      	mov	r1, r4
 8024d18:	f104 0403 	add.w	r4, r4, #3
 8024d1c:	d210      	bcs.n	8024d40 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8024d1e:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 8024d22:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8024d26:	00db      	lsls	r3, r3, #3
 8024d28:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8024d2c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024d30:	430b      	orrs	r3, r1
 8024d32:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8024d36:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8024d3a:	f820 3b02 	strh.w	r3, [r0], #2
 8024d3e:	e7e9      	b.n	8024d14 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8024d40:	4438      	add	r0, r7
 8024d42:	eb01 040c 	add.w	r4, r1, ip
 8024d46:	e7e1      	b.n	8024d0c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8024d48:	4438      	add	r0, r7
 8024d4a:	eb01 040c 	add.w	r4, r1, ip
 8024d4e:	e796      	b.n	8024c7e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8024d50:	4b03      	ldr	r3, [pc, #12]	; (8024d60 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8024d52:	6818      	ldr	r0, [r3, #0]
 8024d54:	6803      	ldr	r3, [r0, #0]
 8024d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024d58:	4798      	blx	r3
 8024d5a:	e768      	b.n	8024c2e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8024d5c:	fffff800 	.word	0xfffff800
 8024d60:	2000f164 	.word	0x2000f164
 8024d64:	2000f15c 	.word	0x2000f15c

08024d68 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8024d68:	b4f0      	push	{r4, r5, r6, r7}
 8024d6a:	4616      	mov	r6, r2
 8024d6c:	2e01      	cmp	r6, #1
 8024d6e:	461c      	mov	r4, r3
 8024d70:	460d      	mov	r5, r1
 8024d72:	9a04      	ldr	r2, [sp, #16]
 8024d74:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8024d78:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8024d7c:	d012      	beq.n	8024da4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8024d7e:	d303      	bcc.n	8024d88 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8024d80:	2e02      	cmp	r6, #2
 8024d82:	d00a      	beq.n	8024d9a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8024d84:	bcf0      	pop	{r4, r5, r6, r7}
 8024d86:	4770      	bx	lr
 8024d88:	6805      	ldr	r5, [r0, #0]
 8024d8a:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8024d8e:	68ed      	ldr	r5, [r5, #12]
 8024d90:	4613      	mov	r3, r2
 8024d92:	46ac      	mov	ip, r5
 8024d94:	4622      	mov	r2, r4
 8024d96:	bcf0      	pop	{r4, r5, r6, r7}
 8024d98:	4760      	bx	ip
 8024d9a:	4621      	mov	r1, r4
 8024d9c:	4628      	mov	r0, r5
 8024d9e:	bcf0      	pop	{r4, r5, r6, r7}
 8024da0:	f7ff bd94 	b.w	80248cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8024da4:	4621      	mov	r1, r4
 8024da6:	4628      	mov	r0, r5
 8024da8:	bcf0      	pop	{r4, r5, r6, r7}
 8024daa:	f7ff bee5 	b.w	8024b78 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08024db0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8024db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024db4:	4681      	mov	r9, r0
 8024db6:	b093      	sub	sp, #76	; 0x4c
 8024db8:	6810      	ldr	r0, [r2, #0]
 8024dba:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8024dbe:	4f6d      	ldr	r7, [pc, #436]	; (8024f74 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8024dc0:	4688      	mov	r8, r1
 8024dc2:	6851      	ldr	r1, [r2, #4]
 8024dc4:	ac0e      	add	r4, sp, #56	; 0x38
 8024dc6:	c403      	stmia	r4!, {r0, r1}
 8024dc8:	6818      	ldr	r0, [r3, #0]
 8024dca:	6859      	ldr	r1, [r3, #4]
 8024dcc:	ac10      	add	r4, sp, #64	; 0x40
 8024dce:	4616      	mov	r6, r2
 8024dd0:	c403      	stmia	r4!, {r0, r1}
 8024dd2:	a80e      	add	r0, sp, #56	; 0x38
 8024dd4:	f7f9 f87a 	bl	801decc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024dd8:	4631      	mov	r1, r6
 8024dda:	a810      	add	r0, sp, #64	; 0x40
 8024ddc:	f7f9 f89e 	bl	801df1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024de0:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8024de4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8024de8:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8024dec:	4e62      	ldr	r6, [pc, #392]	; (8024f78 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8024dee:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8024df2:	6830      	ldr	r0, [r6, #0]
 8024df4:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8024df8:	fb11 2103 	smlabb	r1, r1, r3, r2
 8024dfc:	4489      	add	r9, r1
 8024dfe:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8024e02:	440a      	add	r2, r1
 8024e04:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8024e08:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8024e0c:	4413      	add	r3, r2
 8024e0e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8024e12:	6803      	ldr	r3, [r0, #0]
 8024e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024e16:	4798      	blx	r3
 8024e18:	f010 0f80 	tst.w	r0, #128	; 0x80
 8024e1c:	6830      	ldr	r0, [r6, #0]
 8024e1e:	d01d      	beq.n	8024e5c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8024e20:	2200      	movs	r2, #0
 8024e22:	6801      	ldr	r1, [r0, #0]
 8024e24:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8024e28:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8024e2c:	220b      	movs	r2, #11
 8024e2e:	9207      	str	r2, [sp, #28]
 8024e30:	883a      	ldrh	r2, [r7, #0]
 8024e32:	9206      	str	r2, [sp, #24]
 8024e34:	2201      	movs	r2, #1
 8024e36:	e9cd a204 	strd	sl, r2, [sp, #16]
 8024e3a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8024e3e:	9203      	str	r2, [sp, #12]
 8024e40:	b2a4      	uxth	r4, r4
 8024e42:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8024e46:	9200      	str	r2, [sp, #0]
 8024e48:	b2ad      	uxth	r5, r5
 8024e4a:	9502      	str	r5, [sp, #8]
 8024e4c:	9401      	str	r4, [sp, #4]
 8024e4e:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8024e50:	4642      	mov	r2, r8
 8024e52:	4649      	mov	r1, r9
 8024e54:	47a0      	blx	r4
 8024e56:	b013      	add	sp, #76	; 0x4c
 8024e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024e5c:	6803      	ldr	r3, [r0, #0]
 8024e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024e60:	4798      	blx	r3
 8024e62:	883b      	ldrh	r3, [r7, #0]
 8024e64:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8024e68:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8024e6c:	fb03 1202 	mla	r2, r3, r2, r1
 8024e70:	435d      	muls	r5, r3
 8024e72:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8024e76:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8024e7a:	920c      	str	r2, [sp, #48]	; 0x30
 8024e7c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8024e80:	1b12      	subs	r2, r2, r4
 8024e82:	920d      	str	r2, [sp, #52]	; 0x34
 8024e84:	0062      	lsls	r2, r4, #1
 8024e86:	1b1c      	subs	r4, r3, r4
 8024e88:	0063      	lsls	r3, r4, #1
 8024e8a:	920a      	str	r2, [sp, #40]	; 0x28
 8024e8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8024e8e:	f04f 0e04 	mov.w	lr, #4
 8024e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024e94:	4298      	cmp	r0, r3
 8024e96:	d266      	bcs.n	8024f66 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8024e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024e9a:	eb00 0b03 	add.w	fp, r0, r3
 8024e9e:	4558      	cmp	r0, fp
 8024ea0:	d25c      	bcs.n	8024f5c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8024ea2:	f819 3b01 	ldrb.w	r3, [r9], #1
 8024ea6:	fb1e e303 	smlabb	r3, lr, r3, lr
 8024eaa:	f858 2003 	ldr.w	r2, [r8, r3]
 8024eae:	0e11      	lsrs	r1, r2, #24
 8024eb0:	d012      	beq.n	8024ed8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8024eb2:	29ff      	cmp	r1, #255	; 0xff
 8024eb4:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8024eb8:	d110      	bne.n	8024edc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8024eba:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8024ebe:	d10d      	bne.n	8024edc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8024ec0:	0953      	lsrs	r3, r2, #5
 8024ec2:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 8024ec6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024eca:	f027 0707 	bic.w	r7, r7, #7
 8024ece:	431f      	orrs	r7, r3
 8024ed0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8024ed4:	433a      	orrs	r2, r7
 8024ed6:	8002      	strh	r2, [r0, #0]
 8024ed8:	3002      	adds	r0, #2
 8024eda:	e7e0      	b.n	8024e9e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8024edc:	fb0a f101 	mul.w	r1, sl, r1
 8024ee0:	8806      	ldrh	r6, [r0, #0]
 8024ee2:	1c4b      	adds	r3, r1, #1
 8024ee4:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8024ee8:	1235      	asrs	r5, r6, #8
 8024eea:	10f4      	asrs	r4, r6, #3
 8024eec:	121b      	asrs	r3, r3, #8
 8024eee:	00f6      	lsls	r6, r6, #3
 8024ef0:	b299      	uxth	r1, r3
 8024ef2:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8024ef6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8024efa:	b2f6      	uxtb	r6, r6
 8024efc:	43db      	mvns	r3, r3
 8024efe:	b2d2      	uxtb	r2, r2
 8024f00:	b2db      	uxtb	r3, r3
 8024f02:	fb1c fc01 	smulbb	ip, ip, r1
 8024f06:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8024f0a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8024f0e:	fb12 f201 	smulbb	r2, r2, r1
 8024f12:	fb05 c503 	mla	r5, r5, r3, ip
 8024f16:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8024f1a:	b2ff      	uxtb	r7, r7
 8024f1c:	fb06 2203 	mla	r2, r6, r3, r2
 8024f20:	b2ad      	uxth	r5, r5
 8024f22:	fb17 f701 	smulbb	r7, r7, r1
 8024f26:	b292      	uxth	r2, r2
 8024f28:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8024f2c:	fb04 7403 	mla	r4, r4, r3, r7
 8024f30:	f105 0c01 	add.w	ip, r5, #1
 8024f34:	1c57      	adds	r7, r2, #1
 8024f36:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8024f3a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8024f3e:	b2a4      	uxth	r4, r4
 8024f40:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8024f44:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8024f48:	433d      	orrs	r5, r7
 8024f4a:	1c67      	adds	r7, r4, #1
 8024f4c:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8024f50:	0964      	lsrs	r4, r4, #5
 8024f52:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8024f56:	4325      	orrs	r5, r4
 8024f58:	8005      	strh	r5, [r0, #0]
 8024f5a:	e7bd      	b.n	8024ed8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8024f5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024f5e:	4418      	add	r0, r3
 8024f60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024f62:	4499      	add	r9, r3
 8024f64:	e795      	b.n	8024e92 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 8024f66:	4b04      	ldr	r3, [pc, #16]	; (8024f78 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8024f68:	6818      	ldr	r0, [r3, #0]
 8024f6a:	6803      	ldr	r3, [r0, #0]
 8024f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024f6e:	4798      	blx	r3
 8024f70:	e771      	b.n	8024e56 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 8024f72:	bf00      	nop
 8024f74:	2000f15c 	.word	0x2000f15c
 8024f78:	2000f164 	.word	0x2000f164

08024f7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8024f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f80:	b087      	sub	sp, #28
 8024f82:	4680      	mov	r8, r0
 8024f84:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8024f88:	460d      	mov	r5, r1
 8024f8a:	4614      	mov	r4, r2
 8024f8c:	2e00      	cmp	r6, #0
 8024f8e:	f000 80b9 	beq.w	8025104 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 8024f92:	6810      	ldr	r0, [r2, #0]
 8024f94:	6851      	ldr	r1, [r2, #4]
 8024f96:	af02      	add	r7, sp, #8
 8024f98:	c703      	stmia	r7!, {r0, r1}
 8024f9a:	6818      	ldr	r0, [r3, #0]
 8024f9c:	6859      	ldr	r1, [r3, #4]
 8024f9e:	af04      	add	r7, sp, #16
 8024fa0:	c703      	stmia	r7!, {r0, r1}
 8024fa2:	a802      	add	r0, sp, #8
 8024fa4:	f7f8 ff92 	bl	801decc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024fa8:	4621      	mov	r1, r4
 8024faa:	a804      	add	r0, sp, #16
 8024fac:	f7f8 ffb6 	bl	801df1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024fb0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8024fb4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8024fb8:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8024fbc:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8024fc0:	fb14 2103 	smlabb	r1, r4, r3, r2
 8024fc4:	eb08 0401 	add.w	r4, r8, r1
 8024fc8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8024fcc:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8024fd0:	440a      	add	r2, r1
 8024fd2:	f8ad 2010 	strh.w	r2, [sp, #16]
 8024fd6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8024fda:	4413      	add	r3, r2
 8024fdc:	f8ad 3012 	strh.w	r3, [sp, #18]
 8024fe0:	4b4a      	ldr	r3, [pc, #296]	; (802510c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8024fe2:	6818      	ldr	r0, [r3, #0]
 8024fe4:	6803      	ldr	r3, [r0, #0]
 8024fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024fe8:	4798      	blx	r3
 8024fea:	4b49      	ldr	r3, [pc, #292]	; (8025110 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8024fec:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8024ff0:	881a      	ldrh	r2, [r3, #0]
 8024ff2:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8024ff6:	2eff      	cmp	r6, #255	; 0xff
 8024ff8:	fb02 c101 	mla	r1, r2, r1, ip
 8024ffc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8025000:	fb02 f207 	mul.w	r2, r2, r7
 8025004:	f105 0104 	add.w	r1, r5, #4
 8025008:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 802500c:	461d      	mov	r5, r3
 802500e:	d05a      	beq.n	80250c6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8025010:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 8025014:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8025018:	b2b6      	uxth	r6, r6
 802501a:	fa1f fe8e 	uxth.w	lr, lr
 802501e:	9301      	str	r3, [sp, #4]
 8025020:	4282      	cmp	r2, r0
 8025022:	d96a      	bls.n	80250fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8025024:	eb00 0b0a 	add.w	fp, r0, sl
 8025028:	4583      	cmp	fp, r0
 802502a:	d940      	bls.n	80250ae <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 802502c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8025030:	8805      	ldrh	r5, [r0, #0]
 8025032:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8025036:	122f      	asrs	r7, r5, #8
 8025038:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802503c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8025040:	fb17 f70e 	smulbb	r7, r7, lr
 8025044:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8025048:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802504c:	00ed      	lsls	r5, r5, #3
 802504e:	fb0c 7c06 	mla	ip, ip, r6, r7
 8025052:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8025056:	10df      	asrs	r7, r3, #3
 8025058:	b2ed      	uxtb	r5, r5
 802505a:	00db      	lsls	r3, r3, #3
 802505c:	fa1f fc8c 	uxth.w	ip, ip
 8025060:	fb19 f90e 	smulbb	r9, r9, lr
 8025064:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8025068:	b2db      	uxtb	r3, r3
 802506a:	fb15 f50e 	smulbb	r5, r5, lr
 802506e:	fb07 9706 	mla	r7, r7, r6, r9
 8025072:	fb03 5306 	mla	r3, r3, r6, r5
 8025076:	f10c 0901 	add.w	r9, ip, #1
 802507a:	b29b      	uxth	r3, r3
 802507c:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8025080:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8025084:	f103 0c01 	add.w	ip, r3, #1
 8025088:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802508c:	b2bf      	uxth	r7, r7
 802508e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8025092:	ea4c 0c09 	orr.w	ip, ip, r9
 8025096:	f107 0901 	add.w	r9, r7, #1
 802509a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 802509e:	097f      	lsrs	r7, r7, #5
 80250a0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80250a4:	ea4c 0c07 	orr.w	ip, ip, r7
 80250a8:	f820 cb02 	strh.w	ip, [r0], #2
 80250ac:	e7bc      	b.n	8025028 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 80250ae:	9b01      	ldr	r3, [sp, #4]
 80250b0:	881b      	ldrh	r3, [r3, #0]
 80250b2:	eba3 0308 	sub.w	r3, r3, r8
 80250b6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80250ba:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80250be:	eba3 0308 	sub.w	r3, r3, r8
 80250c2:	441c      	add	r4, r3
 80250c4:	e7ac      	b.n	8025020 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 80250c6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80250ca:	4282      	cmp	r2, r0
 80250cc:	d915      	bls.n	80250fa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80250ce:	eb00 060a 	add.w	r6, r0, sl
 80250d2:	4286      	cmp	r6, r0
 80250d4:	d906      	bls.n	80250e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 80250d6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80250da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80250de:	f820 3b02 	strh.w	r3, [r0], #2
 80250e2:	e7f6      	b.n	80250d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 80250e4:	882b      	ldrh	r3, [r5, #0]
 80250e6:	eba3 0308 	sub.w	r3, r3, r8
 80250ea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80250ee:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80250f2:	eba3 0308 	sub.w	r3, r3, r8
 80250f6:	441c      	add	r4, r3
 80250f8:	e7e7      	b.n	80250ca <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 80250fa:	4b04      	ldr	r3, [pc, #16]	; (802510c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 80250fc:	6818      	ldr	r0, [r3, #0]
 80250fe:	6803      	ldr	r3, [r0, #0]
 8025100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025102:	4798      	blx	r3
 8025104:	b007      	add	sp, #28
 8025106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802510a:	bf00      	nop
 802510c:	2000f164 	.word	0x2000f164
 8025110:	2000f15c 	.word	0x2000f15c

08025114 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8025114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025118:	b091      	sub	sp, #68	; 0x44
 802511a:	4680      	mov	r8, r0
 802511c:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8025120:	460f      	mov	r7, r1
 8025122:	4614      	mov	r4, r2
 8025124:	2d00      	cmp	r5, #0
 8025126:	d051      	beq.n	80251cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8025128:	6810      	ldr	r0, [r2, #0]
 802512a:	6851      	ldr	r1, [r2, #4]
 802512c:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8025330 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8025130:	ae0c      	add	r6, sp, #48	; 0x30
 8025132:	c603      	stmia	r6!, {r0, r1}
 8025134:	6818      	ldr	r0, [r3, #0]
 8025136:	6859      	ldr	r1, [r3, #4]
 8025138:	ae0e      	add	r6, sp, #56	; 0x38
 802513a:	c603      	stmia	r6!, {r0, r1}
 802513c:	a80c      	add	r0, sp, #48	; 0x30
 802513e:	f7f8 fec5 	bl	801decc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025142:	4621      	mov	r1, r4
 8025144:	a80e      	add	r0, sp, #56	; 0x38
 8025146:	f7f8 fee9 	bl	801df1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802514a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 802514e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8025152:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8025156:	f8d9 0000 	ldr.w	r0, [r9]
 802515a:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 802515e:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8025162:	fb11 2103 	smlabb	r1, r1, r3, r2
 8025166:	eb08 0401 	add.w	r4, r8, r1
 802516a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 802516e:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8025334 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 8025172:	440a      	add	r2, r1
 8025174:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8025178:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 802517c:	4413      	add	r3, r2
 802517e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8025182:	6803      	ldr	r3, [r0, #0]
 8025184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025186:	4798      	blx	r3
 8025188:	f010 0f80 	tst.w	r0, #128	; 0x80
 802518c:	f8d9 0000 	ldr.w	r0, [r9]
 8025190:	d01f      	beq.n	80251d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 8025192:	2200      	movs	r2, #0
 8025194:	6801      	ldr	r1, [r0, #0]
 8025196:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 802519a:	e9cd 2208 	strd	r2, r2, [sp, #32]
 802519e:	220b      	movs	r2, #11
 80251a0:	9207      	str	r2, [sp, #28]
 80251a2:	f8b8 2000 	ldrh.w	r2, [r8]
 80251a6:	9206      	str	r2, [sp, #24]
 80251a8:	2201      	movs	r2, #1
 80251aa:	e9cd 5204 	strd	r5, r2, [sp, #16]
 80251ae:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80251b2:	9203      	str	r2, [sp, #12]
 80251b4:	fa1f f28a 	uxth.w	r2, sl
 80251b8:	9202      	str	r2, [sp, #8]
 80251ba:	b2b6      	uxth	r6, r6
 80251bc:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80251c0:	9200      	str	r2, [sp, #0]
 80251c2:	9601      	str	r6, [sp, #4]
 80251c4:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 80251c6:	463a      	mov	r2, r7
 80251c8:	4621      	mov	r1, r4
 80251ca:	47a8      	blx	r5
 80251cc:	b011      	add	sp, #68	; 0x44
 80251ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80251d2:	6803      	ldr	r3, [r0, #0]
 80251d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80251d6:	4798      	blx	r3
 80251d8:	f8b8 2000 	ldrh.w	r2, [r8]
 80251dc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80251e0:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 80251e4:	2dff      	cmp	r5, #255	; 0xff
 80251e6:	fb02 1303 	mla	r3, r2, r3, r1
 80251ea:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80251ee:	ea4f 0946 	mov.w	r9, r6, lsl #1
 80251f2:	fb0a fa02 	mul.w	sl, sl, r2
 80251f6:	d062      	beq.n	80252be <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 80251f8:	ea6f 0c05 	mvn.w	ip, r5
 80251fc:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8025200:	930a      	str	r3, [sp, #40]	; 0x28
 8025202:	b2ad      	uxth	r5, r5
 8025204:	fa5f fc8c 	uxtb.w	ip, ip
 8025208:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 802520c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802520e:	4298      	cmp	r0, r3
 8025210:	f080 8085 	bcs.w	802531e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8025214:	eb00 0b09 	add.w	fp, r0, r9
 8025218:	4558      	cmp	r0, fp
 802521a:	d246      	bcs.n	80252aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 802521c:	f814 eb01 	ldrb.w	lr, [r4], #1
 8025220:	2303      	movs	r3, #3
 8025222:	2204      	movs	r2, #4
 8025224:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8025228:	eb07 0a0e 	add.w	sl, r7, lr
 802522c:	8803      	ldrh	r3, [r0, #0]
 802522e:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8025232:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8025236:	1219      	asrs	r1, r3, #8
 8025238:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802523c:	fb18 f805 	smulbb	r8, r8, r5
 8025240:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8025244:	10da      	asrs	r2, r3, #3
 8025246:	fb01 810c 	mla	r1, r1, ip, r8
 802524a:	00db      	lsls	r3, r3, #3
 802524c:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025250:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025254:	b2db      	uxtb	r3, r3
 8025256:	fb18 f805 	smulbb	r8, r8, r5
 802525a:	fb1e fe05 	smulbb	lr, lr, r5
 802525e:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8025262:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8025266:	b289      	uxth	r1, r1
 8025268:	fb02 820c 	mla	r2, r2, ip, r8
 802526c:	fb03 e30c 	mla	r3, r3, ip, lr
 8025270:	b292      	uxth	r2, r2
 8025272:	b29b      	uxth	r3, r3
 8025274:	f101 0801 	add.w	r8, r1, #1
 8025278:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 802527c:	f103 0e01 	add.w	lr, r3, #1
 8025280:	f102 0801 	add.w	r8, r2, #1
 8025284:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8025288:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 802528c:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8025290:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8025294:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8025298:	ea4e 0101 	orr.w	r1, lr, r1
 802529c:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80252a0:	ea41 0108 	orr.w	r1, r1, r8
 80252a4:	f820 1b02 	strh.w	r1, [r0], #2
 80252a8:	e7b6      	b.n	8025218 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 80252aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80252ac:	881b      	ldrh	r3, [r3, #0]
 80252ae:	1b9b      	subs	r3, r3, r6
 80252b0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80252b4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80252b8:	1b9b      	subs	r3, r3, r6
 80252ba:	441c      	add	r4, r3
 80252bc:	e7a6      	b.n	802520c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 80252be:	491b      	ldr	r1, [pc, #108]	; (802532c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 80252c0:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 80252c4:	2203      	movs	r2, #3
 80252c6:	2504      	movs	r5, #4
 80252c8:	4550      	cmp	r0, sl
 80252ca:	d228      	bcs.n	802531e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 80252cc:	eb00 0c09 	add.w	ip, r0, r9
 80252d0:	4560      	cmp	r0, ip
 80252d2:	4623      	mov	r3, r4
 80252d4:	d219      	bcs.n	802530a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 80252d6:	f893 e000 	ldrb.w	lr, [r3]
 80252da:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 80252de:	eb07 0b0e 	add.w	fp, r7, lr
 80252e2:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80252e6:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80252ea:	f89b b001 	ldrb.w	fp, [fp, #1]
 80252ee:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80252f2:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 80252f6:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80252fa:	ea43 030b 	orr.w	r3, r3, fp
 80252fe:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8025302:	3401      	adds	r4, #1
 8025304:	f820 3b02 	strh.w	r3, [r0], #2
 8025308:	e7e2      	b.n	80252d0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 802530a:	f8b8 3000 	ldrh.w	r3, [r8]
 802530e:	1b9b      	subs	r3, r3, r6
 8025310:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8025314:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8025318:	1b9b      	subs	r3, r3, r6
 802531a:	441c      	add	r4, r3
 802531c:	e7d4      	b.n	80252c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 802531e:	4b04      	ldr	r3, [pc, #16]	; (8025330 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8025320:	6818      	ldr	r0, [r3, #0]
 8025322:	6803      	ldr	r3, [r0, #0]
 8025324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025326:	4798      	blx	r3
 8025328:	e750      	b.n	80251cc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 802532a:	bf00      	nop
 802532c:	fffff800 	.word	0xfffff800
 8025330:	2000f164 	.word	0x2000f164
 8025334:	2000f15c 	.word	0x2000f15c

08025338 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8025338:	b430      	push	{r4, r5}
 802533a:	780d      	ldrb	r5, [r1, #0]
 802533c:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8025340:	2d01      	cmp	r5, #1
 8025342:	d00a      	beq.n	802535a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8025344:	d305      	bcc.n	8025352 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8025346:	2d02      	cmp	r5, #2
 8025348:	d10b      	bne.n	8025362 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 802534a:	9402      	str	r4, [sp, #8]
 802534c:	bc30      	pop	{r4, r5}
 802534e:	f7ff be15 	b.w	8024f7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8025352:	9402      	str	r4, [sp, #8]
 8025354:	bc30      	pop	{r4, r5}
 8025356:	f7ff bd2b 	b.w	8024db0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 802535a:	9402      	str	r4, [sp, #8]
 802535c:	bc30      	pop	{r4, r5}
 802535e:	f7ff bed9 	b.w	8025114 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8025362:	bc30      	pop	{r4, r5}
 8025364:	4770      	bx	lr
	...

08025368 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8025368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802536c:	4604      	mov	r4, r0
 802536e:	b087      	sub	sp, #28
 8025370:	6810      	ldr	r0, [r2, #0]
 8025372:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8025376:	f8df 9238 	ldr.w	r9, [pc, #568]	; 80255b0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 802537a:	460e      	mov	r6, r1
 802537c:	6851      	ldr	r1, [r2, #4]
 802537e:	ad02      	add	r5, sp, #8
 8025380:	c503      	stmia	r5!, {r0, r1}
 8025382:	6818      	ldr	r0, [r3, #0]
 8025384:	6859      	ldr	r1, [r3, #4]
 8025386:	ad04      	add	r5, sp, #16
 8025388:	4617      	mov	r7, r2
 802538a:	c503      	stmia	r5!, {r0, r1}
 802538c:	a802      	add	r0, sp, #8
 802538e:	f7f8 fd9d 	bl	801decc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8025392:	4639      	mov	r1, r7
 8025394:	a804      	add	r0, sp, #16
 8025396:	f7f8 fdc1 	bl	801df1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802539a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802539e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80253a2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80253a6:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80253aa:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80253ae:	fb11 2103 	smlabb	r1, r1, r3, r2
 80253b2:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80253b6:	440e      	add	r6, r1
 80253b8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80253bc:	440a      	add	r2, r1
 80253be:	f8ad 2010 	strh.w	r2, [sp, #16]
 80253c2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80253c6:	4413      	add	r3, r2
 80253c8:	f8ad 3012 	strh.w	r3, [sp, #18]
 80253cc:	4b77      	ldr	r3, [pc, #476]	; (80255ac <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80253ce:	6818      	ldr	r0, [r3, #0]
 80253d0:	6803      	ldr	r3, [r0, #0]
 80253d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80253d4:	4798      	blx	r3
 80253d6:	f8b9 b000 	ldrh.w	fp, [r9]
 80253da:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80253de:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80253e2:	fb0b 2303 	mla	r3, fp, r3, r2
 80253e6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80253ea:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80253ee:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80253f2:	fb05 f50b 	mul.w	r5, r5, fp
 80253f6:	9300      	str	r3, [sp, #0]
 80253f8:	d069      	beq.n	80254ce <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 80253fa:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 80253fe:	4558      	cmp	r0, fp
 8025400:	f080 80cc 	bcs.w	802559c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8025404:	9b00      	ldr	r3, [sp, #0]
 8025406:	18c3      	adds	r3, r0, r3
 8025408:	9301      	str	r3, [sp, #4]
 802540a:	4631      	mov	r1, r6
 802540c:	9b01      	ldr	r3, [sp, #4]
 802540e:	4298      	cmp	r0, r3
 8025410:	d24f      	bcs.n	80254b2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8025412:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025416:	2a00      	cmp	r2, #0
 8025418:	d048      	beq.n	80254ac <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 802541a:	fb0a f202 	mul.w	r2, sl, r2
 802541e:	1c53      	adds	r3, r2, #1
 8025420:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025424:	121b      	asrs	r3, r3, #8
 8025426:	d041      	beq.n	80254ac <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8025428:	8802      	ldrh	r2, [r0, #0]
 802542a:	f8b4 c000 	ldrh.w	ip, [r4]
 802542e:	b29e      	uxth	r6, r3
 8025430:	1215      	asrs	r5, r2, #8
 8025432:	43db      	mvns	r3, r3
 8025434:	b2db      	uxtb	r3, r3
 8025436:	ea4f 272c 	mov.w	r7, ip, asr #8
 802543a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802543e:	fb15 f503 	smulbb	r5, r5, r3
 8025442:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8025446:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 802544a:	00d2      	lsls	r2, r2, #3
 802544c:	fb07 5706 	mla	r7, r7, r6, r5
 8025450:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8025454:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8025458:	b2d2      	uxtb	r2, r2
 802545a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802545e:	b2bf      	uxth	r7, r7
 8025460:	fb1e fe03 	smulbb	lr, lr, r3
 8025464:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8025468:	fa5f fc8c 	uxtb.w	ip, ip
 802546c:	fb12 f203 	smulbb	r2, r2, r3
 8025470:	fb05 e506 	mla	r5, r5, r6, lr
 8025474:	fb0c 2c06 	mla	ip, ip, r6, r2
 8025478:	f107 0e01 	add.w	lr, r7, #1
 802547c:	fa1f fc8c 	uxth.w	ip, ip
 8025480:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8025484:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8025488:	f10c 0701 	add.w	r7, ip, #1
 802548c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8025490:	b2ad      	uxth	r5, r5
 8025492:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025496:	ea47 070e 	orr.w	r7, r7, lr
 802549a:	f105 0e01 	add.w	lr, r5, #1
 802549e:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80254a2:	096d      	lsrs	r5, r5, #5
 80254a4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80254a8:	432f      	orrs	r7, r5
 80254aa:	8007      	strh	r7, [r0, #0]
 80254ac:	3002      	adds	r0, #2
 80254ae:	3402      	adds	r4, #2
 80254b0:	e7ac      	b.n	802540c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 80254b2:	f8b9 3000 	ldrh.w	r3, [r9]
 80254b6:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80254ba:	eba3 0308 	sub.w	r3, r3, r8
 80254be:	eba6 0608 	sub.w	r6, r6, r8
 80254c2:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80254c6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80254ca:	440e      	add	r6, r1
 80254cc:	e797      	b.n	80253fe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 80254ce:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80254d2:	42a8      	cmp	r0, r5
 80254d4:	d262      	bcs.n	802559c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80254d6:	9b00      	ldr	r3, [sp, #0]
 80254d8:	4631      	mov	r1, r6
 80254da:	eb00 0b03 	add.w	fp, r0, r3
 80254de:	4558      	cmp	r0, fp
 80254e0:	d24e      	bcs.n	8025580 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 80254e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80254e6:	b12b      	cbz	r3, 80254f4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 80254e8:	2bff      	cmp	r3, #255	; 0xff
 80254ea:	f8b4 e000 	ldrh.w	lr, [r4]
 80254ee:	d104      	bne.n	80254fa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 80254f0:	f8a0 e000 	strh.w	lr, [r0]
 80254f4:	3002      	adds	r0, #2
 80254f6:	3402      	adds	r4, #2
 80254f8:	e7f1      	b.n	80254de <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 80254fa:	8802      	ldrh	r2, [r0, #0]
 80254fc:	b29f      	uxth	r7, r3
 80254fe:	1216      	asrs	r6, r2, #8
 8025500:	43db      	mvns	r3, r3
 8025502:	b2db      	uxtb	r3, r3
 8025504:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8025508:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802550c:	fb16 f603 	smulbb	r6, r6, r3
 8025510:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8025514:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8025518:	00d2      	lsls	r2, r2, #3
 802551a:	fb0c 6c07 	mla	ip, ip, r7, r6
 802551e:	b2d2      	uxtb	r2, r2
 8025520:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8025524:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8025528:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802552c:	fb1a fa03 	smulbb	sl, sl, r3
 8025530:	fa1f fc8c 	uxth.w	ip, ip
 8025534:	fb12 f303 	smulbb	r3, r2, r3
 8025538:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802553c:	fa5f fe8e 	uxtb.w	lr, lr
 8025540:	fb06 a607 	mla	r6, r6, r7, sl
 8025544:	f10c 0201 	add.w	r2, ip, #1
 8025548:	fb0e 3307 	mla	r3, lr, r7, r3
 802554c:	b2b6      	uxth	r6, r6
 802554e:	b29b      	uxth	r3, r3
 8025550:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8025554:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8025558:	f106 0a01 	add.w	sl, r6, #1
 802555c:	f103 0c01 	add.w	ip, r3, #1
 8025560:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8025564:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8025568:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802556c:	0976      	lsrs	r6, r6, #5
 802556e:	ea4c 0c02 	orr.w	ip, ip, r2
 8025572:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8025576:	ea4c 0c06 	orr.w	ip, ip, r6
 802557a:	f8a0 c000 	strh.w	ip, [r0]
 802557e:	e7b9      	b.n	80254f4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8025580:	f8b9 3000 	ldrh.w	r3, [r9]
 8025584:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8025588:	eba3 0308 	sub.w	r3, r3, r8
 802558c:	eba6 0608 	sub.w	r6, r6, r8
 8025590:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8025594:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8025598:	440e      	add	r6, r1
 802559a:	e79a      	b.n	80254d2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 802559c:	4b03      	ldr	r3, [pc, #12]	; (80255ac <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 802559e:	6818      	ldr	r0, [r3, #0]
 80255a0:	6803      	ldr	r3, [r0, #0]
 80255a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80255a4:	4798      	blx	r3
 80255a6:	b007      	add	sp, #28
 80255a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80255ac:	2000f164 	.word	0x2000f164
 80255b0:	2000f15c 	.word	0x2000f15c

080255b4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80255b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255b8:	b089      	sub	sp, #36	; 0x24
 80255ba:	4682      	mov	sl, r0
 80255bc:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 80255c0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80255c2:	460f      	mov	r7, r1
 80255c4:	4691      	mov	r9, r2
 80255c6:	4698      	mov	r8, r3
 80255c8:	2e00      	cmp	r6, #0
 80255ca:	d036      	beq.n	802563a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 80255cc:	4608      	mov	r0, r1
 80255ce:	f7fc f86d 	bl	80216ac <_ZNK8touchgfx6Bitmap8getWidthEv>
 80255d2:	4605      	mov	r5, r0
 80255d4:	4638      	mov	r0, r7
 80255d6:	f7fc f89d 	bl	8021714 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80255da:	f8ad 000e 	strh.w	r0, [sp, #14]
 80255de:	4638      	mov	r0, r7
 80255e0:	f8ad 9008 	strh.w	r9, [sp, #8]
 80255e4:	f8ad 500c 	strh.w	r5, [sp, #12]
 80255e8:	f8ad 800a 	strh.w	r8, [sp, #10]
 80255ec:	f7fc f94a 	bl	8021884 <_ZNK8touchgfx6Bitmap7getDataEv>
 80255f0:	4605      	mov	r5, r0
 80255f2:	4638      	mov	r0, r7
 80255f4:	f7fc f976 	bl	80218e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80255f8:	4681      	mov	r9, r0
 80255fa:	4638      	mov	r0, r7
 80255fc:	f7fc f9c6 	bl	802198c <_ZNK8touchgfx6Bitmap9getFormatEv>
 8025600:	280b      	cmp	r0, #11
 8025602:	d81a      	bhi.n	802563a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8025604:	e8df f000 	tbb	[pc, r0]
 8025608:	1906aebd 	.word	0x1906aebd
 802560c:	19191919 	.word	0x19191919
 8025610:	b5191919 	.word	0xb5191919
 8025614:	4bb0      	ldr	r3, [pc, #704]	; (80258d8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 8025616:	6818      	ldr	r0, [r3, #0]
 8025618:	6803      	ldr	r3, [r0, #0]
 802561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802561c:	4798      	blx	r3
 802561e:	2eff      	cmp	r6, #255	; 0xff
 8025620:	d121      	bne.n	8025666 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8025622:	0683      	lsls	r3, r0, #26
 8025624:	d41f      	bmi.n	8025666 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8025626:	4638      	mov	r0, r7
 8025628:	f7fc f8f4 	bl	8021814 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 802562c:	b940      	cbnz	r0, 8025640 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 802562e:	4623      	mov	r3, r4
 8025630:	aa02      	add	r2, sp, #8
 8025632:	4629      	mov	r1, r5
 8025634:	4650      	mov	r0, sl
 8025636:	f7ff fa2f 	bl	8024a98 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 802563a:	b009      	add	sp, #36	; 0x24
 802563c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025640:	f10d 0818 	add.w	r8, sp, #24
 8025644:	4639      	mov	r1, r7
 8025646:	4640      	mov	r0, r8
 8025648:	f7fc f898 	bl	802177c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 802564c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8025650:	af04      	add	r7, sp, #16
 8025652:	e887 0003 	stmia.w	r7, {r0, r1}
 8025656:	4638      	mov	r0, r7
 8025658:	4621      	mov	r1, r4
 802565a:	f7f4 f907 	bl	801986c <_ZN8touchgfx4RectaNERKS0_>
 802565e:	4638      	mov	r0, r7
 8025660:	f7f4 f947 	bl	80198f2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8025664:	b130      	cbz	r0, 8025674 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8025666:	4633      	mov	r3, r6
 8025668:	4622      	mov	r2, r4
 802566a:	a902      	add	r1, sp, #8
 802566c:	4628      	mov	r0, r5
 802566e:	f7ff f92d 	bl	80248cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8025672:	e7e2      	b.n	802563a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8025674:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8025678:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 802567c:	4293      	cmp	r3, r2
 802567e:	dd12      	ble.n	80256a6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 8025680:	1a9b      	subs	r3, r3, r2
 8025682:	f9b4 0000 	ldrsh.w	r0, [r4]
 8025686:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802568a:	f8ad 0018 	strh.w	r0, [sp, #24]
 802568e:	f8ad 201a 	strh.w	r2, [sp, #26]
 8025692:	f8ad 101c 	strh.w	r1, [sp, #28]
 8025696:	f8ad 301e 	strh.w	r3, [sp, #30]
 802569a:	4642      	mov	r2, r8
 802569c:	4633      	mov	r3, r6
 802569e:	a902      	add	r1, sp, #8
 80256a0:	4628      	mov	r0, r5
 80256a2:	f7ff f913 	bl	80248cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80256a6:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80256aa:	f9b4 2000 	ldrsh.w	r2, [r4]
 80256ae:	4293      	cmp	r3, r2
 80256b0:	dd12      	ble.n	80256d8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 80256b2:	1a9b      	subs	r3, r3, r2
 80256b4:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80256b8:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80256bc:	f8ad 2018 	strh.w	r2, [sp, #24]
 80256c0:	f8ad 001a 	strh.w	r0, [sp, #26]
 80256c4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80256c8:	f8ad 101e 	strh.w	r1, [sp, #30]
 80256cc:	23ff      	movs	r3, #255	; 0xff
 80256ce:	4642      	mov	r2, r8
 80256d0:	a902      	add	r1, sp, #8
 80256d2:	4628      	mov	r0, r5
 80256d4:	f7ff f8fa 	bl	80248cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80256d8:	463b      	mov	r3, r7
 80256da:	aa02      	add	r2, sp, #8
 80256dc:	4629      	mov	r1, r5
 80256de:	4650      	mov	r0, sl
 80256e0:	f7ff f9da 	bl	8024a98 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80256e4:	88a2      	ldrh	r2, [r4, #4]
 80256e6:	8823      	ldrh	r3, [r4, #0]
 80256e8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80256ec:	4413      	add	r3, r2
 80256ee:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80256f2:	440a      	add	r2, r1
 80256f4:	b29b      	uxth	r3, r3
 80256f6:	b292      	uxth	r2, r2
 80256f8:	b211      	sxth	r1, r2
 80256fa:	b218      	sxth	r0, r3
 80256fc:	4288      	cmp	r0, r1
 80256fe:	dd12      	ble.n	8025726 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 8025700:	1a9b      	subs	r3, r3, r2
 8025702:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8025706:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 802570a:	f8ad 1018 	strh.w	r1, [sp, #24]
 802570e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8025712:	f8ad 001e 	strh.w	r0, [sp, #30]
 8025716:	23ff      	movs	r3, #255	; 0xff
 8025718:	4642      	mov	r2, r8
 802571a:	a902      	add	r1, sp, #8
 802571c:	4628      	mov	r0, r5
 802571e:	f8ad 601a 	strh.w	r6, [sp, #26]
 8025722:	f7ff f8d3 	bl	80248cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8025726:	88e2      	ldrh	r2, [r4, #6]
 8025728:	8863      	ldrh	r3, [r4, #2]
 802572a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 802572e:	4413      	add	r3, r2
 8025730:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8025734:	440a      	add	r2, r1
 8025736:	b29b      	uxth	r3, r3
 8025738:	b292      	uxth	r2, r2
 802573a:	b211      	sxth	r1, r2
 802573c:	b218      	sxth	r0, r3
 802573e:	4288      	cmp	r0, r1
 8025740:	f77f af7b 	ble.w	802563a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8025744:	1a9b      	subs	r3, r3, r2
 8025746:	f9b4 6000 	ldrsh.w	r6, [r4]
 802574a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802574e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8025752:	f8ad 6018 	strh.w	r6, [sp, #24]
 8025756:	f8ad 101a 	strh.w	r1, [sp, #26]
 802575a:	f8ad 001c 	strh.w	r0, [sp, #28]
 802575e:	23ff      	movs	r3, #255	; 0xff
 8025760:	4642      	mov	r2, r8
 8025762:	e782      	b.n	802566a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 8025764:	4633      	mov	r3, r6
 8025766:	4622      	mov	r2, r4
 8025768:	a902      	add	r1, sp, #8
 802576a:	4628      	mov	r0, r5
 802576c:	f7ff fa04 	bl	8024b78 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8025770:	e763      	b.n	802563a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8025772:	9600      	str	r6, [sp, #0]
 8025774:	4623      	mov	r3, r4
 8025776:	aa02      	add	r2, sp, #8
 8025778:	4649      	mov	r1, r9
 802577a:	4628      	mov	r0, r5
 802577c:	f7ff fddc 	bl	8025338 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8025780:	e75b      	b.n	802563a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8025782:	4638      	mov	r0, r7
 8025784:	f7fc f846 	bl	8021814 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8025788:	b950      	cbnz	r0, 80257a0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 802578a:	e9cd 6000 	strd	r6, r0, [sp]
 802578e:	f8da 3000 	ldr.w	r3, [sl]
 8025792:	aa02      	add	r2, sp, #8
 8025794:	68de      	ldr	r6, [r3, #12]
 8025796:	4629      	mov	r1, r5
 8025798:	4623      	mov	r3, r4
 802579a:	4650      	mov	r0, sl
 802579c:	47b0      	blx	r6
 802579e:	e74c      	b.n	802563a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 80257a0:	f10d 0818 	add.w	r8, sp, #24
 80257a4:	4639      	mov	r1, r7
 80257a6:	4640      	mov	r0, r8
 80257a8:	f7fb ffe8 	bl	802177c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80257ac:	e898 0003 	ldmia.w	r8, {r0, r1}
 80257b0:	af04      	add	r7, sp, #16
 80257b2:	e887 0003 	stmia.w	r7, {r0, r1}
 80257b6:	4638      	mov	r0, r7
 80257b8:	4621      	mov	r1, r4
 80257ba:	f7f4 f857 	bl	801986c <_ZN8touchgfx4RectaNERKS0_>
 80257be:	4638      	mov	r0, r7
 80257c0:	f7f4 f897 	bl	80198f2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80257c4:	b138      	cbz	r0, 80257d6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 80257c6:	9600      	str	r6, [sp, #0]
 80257c8:	4623      	mov	r3, r4
 80257ca:	aa02      	add	r2, sp, #8
 80257cc:	4649      	mov	r1, r9
 80257ce:	4628      	mov	r0, r5
 80257d0:	f7ff fdca 	bl	8025368 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80257d4:	e731      	b.n	802563a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 80257d6:	e9cd 6000 	strd	r6, r0, [sp]
 80257da:	f8da 3000 	ldr.w	r3, [sl]
 80257de:	aa02      	add	r2, sp, #8
 80257e0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80257e4:	4629      	mov	r1, r5
 80257e6:	463b      	mov	r3, r7
 80257e8:	4650      	mov	r0, sl
 80257ea:	47d8      	blx	fp
 80257ec:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80257f0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80257f4:	4293      	cmp	r3, r2
 80257f6:	dd13      	ble.n	8025820 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 80257f8:	f9b4 0000 	ldrsh.w	r0, [r4]
 80257fc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8025800:	f8ad 0018 	strh.w	r0, [sp, #24]
 8025804:	1a9b      	subs	r3, r3, r2
 8025806:	f8ad 201a 	strh.w	r2, [sp, #26]
 802580a:	f8ad 101c 	strh.w	r1, [sp, #28]
 802580e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8025812:	9600      	str	r6, [sp, #0]
 8025814:	4643      	mov	r3, r8
 8025816:	aa02      	add	r2, sp, #8
 8025818:	4649      	mov	r1, r9
 802581a:	4628      	mov	r0, r5
 802581c:	f7ff fda4 	bl	8025368 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8025820:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8025824:	f9b4 2000 	ldrsh.w	r2, [r4]
 8025828:	4293      	cmp	r3, r2
 802582a:	dd13      	ble.n	8025854 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 802582c:	1a9b      	subs	r3, r3, r2
 802582e:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8025832:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8025836:	f8ad 2018 	strh.w	r2, [sp, #24]
 802583a:	f8ad 001a 	strh.w	r0, [sp, #26]
 802583e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8025842:	f8ad 101e 	strh.w	r1, [sp, #30]
 8025846:	9600      	str	r6, [sp, #0]
 8025848:	4643      	mov	r3, r8
 802584a:	aa02      	add	r2, sp, #8
 802584c:	4649      	mov	r1, r9
 802584e:	4628      	mov	r0, r5
 8025850:	f7ff fd8a 	bl	8025368 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8025854:	88a2      	ldrh	r2, [r4, #4]
 8025856:	8823      	ldrh	r3, [r4, #0]
 8025858:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 802585c:	4413      	add	r3, r2
 802585e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8025862:	440a      	add	r2, r1
 8025864:	b29b      	uxth	r3, r3
 8025866:	b292      	uxth	r2, r2
 8025868:	b211      	sxth	r1, r2
 802586a:	b218      	sxth	r0, r3
 802586c:	4288      	cmp	r0, r1
 802586e:	dd13      	ble.n	8025898 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 8025870:	1a9b      	subs	r3, r3, r2
 8025872:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8025876:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 802587a:	f8ad 1018 	strh.w	r1, [sp, #24]
 802587e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8025882:	f8ad 001e 	strh.w	r0, [sp, #30]
 8025886:	9600      	str	r6, [sp, #0]
 8025888:	4643      	mov	r3, r8
 802588a:	aa02      	add	r2, sp, #8
 802588c:	4649      	mov	r1, r9
 802588e:	4628      	mov	r0, r5
 8025890:	f8ad 701a 	strh.w	r7, [sp, #26]
 8025894:	f7ff fd68 	bl	8025368 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8025898:	88e2      	ldrh	r2, [r4, #6]
 802589a:	8863      	ldrh	r3, [r4, #2]
 802589c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80258a0:	4413      	add	r3, r2
 80258a2:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80258a6:	440a      	add	r2, r1
 80258a8:	b29b      	uxth	r3, r3
 80258aa:	b292      	uxth	r2, r2
 80258ac:	b211      	sxth	r1, r2
 80258ae:	b218      	sxth	r0, r3
 80258b0:	4288      	cmp	r0, r1
 80258b2:	f77f aec2 	ble.w	802563a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 80258b6:	f9b4 7000 	ldrsh.w	r7, [r4]
 80258ba:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80258be:	f8ad 7018 	strh.w	r7, [sp, #24]
 80258c2:	1a9b      	subs	r3, r3, r2
 80258c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80258c8:	f8ad 101a 	strh.w	r1, [sp, #26]
 80258cc:	f8ad 001c 	strh.w	r0, [sp, #28]
 80258d0:	9600      	str	r6, [sp, #0]
 80258d2:	4643      	mov	r3, r8
 80258d4:	e779      	b.n	80257ca <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 80258d6:	bf00      	nop
 80258d8:	2000f164 	.word	0x2000f164

080258dc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 80258dc:	b180      	cbz	r0, 8025900 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 80258de:	2903      	cmp	r1, #3
 80258e0:	d81c      	bhi.n	802591c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 80258e2:	e8df f001 	tbb	[pc, r1]
 80258e6:	1d02      	.short	0x1d02
 80258e8:	1f08      	.short	0x1f08
 80258ea:	4b10      	ldr	r3, [pc, #64]	; (802592c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80258ec:	8818      	ldrh	r0, [r3, #0]
 80258ee:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80258f2:	4240      	negs	r0, r0
 80258f4:	4770      	bx	lr
 80258f6:	4b0d      	ldr	r3, [pc, #52]	; (802592c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80258f8:	8818      	ldrh	r0, [r3, #0]
 80258fa:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80258fe:	4770      	bx	lr
 8025900:	2903      	cmp	r1, #3
 8025902:	d80b      	bhi.n	802591c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8025904:	a301      	add	r3, pc, #4	; (adr r3, 802590c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8025906:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 802590a:	bf00      	nop
 802590c:	08025921 	.word	0x08025921
 8025910:	080258f7 	.word	0x080258f7
 8025914:	08025925 	.word	0x08025925
 8025918:	080258eb 	.word	0x080258eb
 802591c:	2000      	movs	r0, #0
 802591e:	4770      	bx	lr
 8025920:	2001      	movs	r0, #1
 8025922:	4770      	bx	lr
 8025924:	f04f 30ff 	mov.w	r0, #4294967295
 8025928:	4770      	bx	lr
 802592a:	bf00      	nop
 802592c:	2000f15c 	.word	0x2000f15c

08025930 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8025930:	b180      	cbz	r0, 8025954 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8025932:	2903      	cmp	r1, #3
 8025934:	d81c      	bhi.n	8025970 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8025936:	e8df f001 	tbb	[pc, r1]
 802593a:	021d      	.short	0x021d
 802593c:	071f      	.short	0x071f
 802593e:	4b10      	ldr	r3, [pc, #64]	; (8025980 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8025940:	8818      	ldrh	r0, [r3, #0]
 8025942:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8025946:	4770      	bx	lr
 8025948:	4b0d      	ldr	r3, [pc, #52]	; (8025980 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 802594a:	8818      	ldrh	r0, [r3, #0]
 802594c:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8025950:	4240      	negs	r0, r0
 8025952:	4770      	bx	lr
 8025954:	2903      	cmp	r1, #3
 8025956:	d80b      	bhi.n	8025970 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8025958:	a301      	add	r3, pc, #4	; (adr r3, 8025960 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 802595a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 802595e:	bf00      	nop
 8025960:	0802593f 	.word	0x0802593f
 8025964:	08025979 	.word	0x08025979
 8025968:	08025949 	.word	0x08025949
 802596c:	08025975 	.word	0x08025975
 8025970:	2000      	movs	r0, #0
 8025972:	4770      	bx	lr
 8025974:	2001      	movs	r0, #1
 8025976:	4770      	bx	lr
 8025978:	f04f 30ff 	mov.w	r0, #4294967295
 802597c:	4770      	bx	lr
 802597e:	bf00      	nop
 8025980:	2000f15c 	.word	0x2000f15c

08025984 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8025984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025988:	b099      	sub	sp, #100	; 0x64
 802598a:	910b      	str	r1, [sp, #44]	; 0x2c
 802598c:	a914      	add	r1, sp, #80	; 0x50
 802598e:	e881 000c 	stmia.w	r1, {r2, r3}
 8025992:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8025996:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 802599a:	f891 900d 	ldrb.w	r9, [r1, #13]
 802599e:	9309      	str	r3, [sp, #36]	; 0x24
 80259a0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80259a4:	9310      	str	r3, [sp, #64]	; 0x40
 80259a6:	ea4f 1749 	mov.w	r7, r9, lsl #5
 80259aa:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 80259ae:	930c      	str	r3, [sp, #48]	; 0x30
 80259b0:	f407 7380 	and.w	r3, r7, #256	; 0x100
 80259b4:	798f      	ldrb	r7, [r1, #6]
 80259b6:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 80259ba:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 80259be:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 80259c2:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 80259c6:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 80259ca:	431f      	orrs	r7, r3
 80259cc:	f000 8195 	beq.w	8025cfa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80259d0:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80259d4:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80259d8:	f891 9007 	ldrb.w	r9, [r1, #7]
 80259dc:	ea59 0903 	orrs.w	r9, r9, r3
 80259e0:	f000 818b 	beq.w	8025cfa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80259e4:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80259e8:	b29b      	uxth	r3, r3
 80259ea:	2d00      	cmp	r5, #0
 80259ec:	f000 812e 	beq.w	8025c4c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 80259f0:	1aed      	subs	r5, r5, r3
 80259f2:	b2ad      	uxth	r5, r5
 80259f4:	042b      	lsls	r3, r5, #16
 80259f6:	d502      	bpl.n	80259fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 80259f8:	1b64      	subs	r4, r4, r5
 80259fa:	b224      	sxth	r4, r4
 80259fc:	2500      	movs	r5, #0
 80259fe:	f9b2 1000 	ldrsh.w	r1, [r2]
 8025a02:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8025a06:	428c      	cmp	r4, r1
 8025a08:	b28b      	uxth	r3, r1
 8025a0a:	bfbf      	itttt	lt
 8025a0c:	18ed      	addlt	r5, r5, r3
 8025a0e:	1b2c      	sublt	r4, r5, r4
 8025a10:	b2a5      	uxthlt	r5, r4
 8025a12:	460c      	movlt	r4, r1
 8025a14:	8891      	ldrh	r1, [r2, #4]
 8025a16:	440b      	add	r3, r1
 8025a18:	b21b      	sxth	r3, r3
 8025a1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8025a1c:	88d3      	ldrh	r3, [r2, #6]
 8025a1e:	8852      	ldrh	r2, [r2, #2]
 8025a20:	4413      	add	r3, r2
 8025a22:	b21b      	sxth	r3, r3
 8025a24:	930d      	str	r3, [sp, #52]	; 0x34
 8025a26:	4bbe      	ldr	r3, [pc, #760]	; (8025d20 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 8025a28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025a2a:	f893 b000 	ldrb.w	fp, [r3]
 8025a2e:	f10b 3cff 	add.w	ip, fp, #4294967295
 8025a32:	f1dc 0300 	rsbs	r3, ip, #0
 8025a36:	eb43 030c 	adc.w	r3, r3, ip
 8025a3a:	930e      	str	r3, [sp, #56]	; 0x38
 8025a3c:	4621      	mov	r1, r4
 8025a3e:	4653      	mov	r3, sl
 8025a40:	a814      	add	r0, sp, #80	; 0x50
 8025a42:	f7f8 f8bd 	bl	801dbc0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8025a46:	4621      	mov	r1, r4
 8025a48:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8025a4c:	4653      	mov	r3, sl
 8025a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025a50:	a814      	add	r0, sp, #80	; 0x50
 8025a52:	f7f8 f8d2 	bl	801dbfa <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8025a56:	a918      	add	r1, sp, #96	; 0x60
 8025a58:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8025a5c:	a817      	add	r0, sp, #92	; 0x5c
 8025a5e:	f7f8 f9f3 	bl	801de48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8025a62:	f1ba 0f00 	cmp.w	sl, #0
 8025a66:	f040 80f4 	bne.w	8025c52 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8025a6a:	f1bb 0f01 	cmp.w	fp, #1
 8025a6e:	f040 80f8 	bne.w	8025c62 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8025a72:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025a74:	2b00      	cmp	r3, #0
 8025a76:	f040 8145 	bne.w	8025d04 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8025a7a:	b2ba      	uxth	r2, r7
 8025a7c:	b905      	cbnz	r5, 8025a80 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 8025a7e:	b16e      	cbz	r6, 8025a9c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 8025a80:	fb06 5302 	mla	r3, r6, r2, r5
 8025a84:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8025a86:	fb08 f303 	mul.w	r3, r8, r3
 8025a8a:	4631      	mov	r1, r6
 8025a8c:	f003 0607 	and.w	r6, r3, #7
 8025a90:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 8025a94:	9328      	str	r3, [sp, #160]	; 0xa0
 8025a96:	eba9 0301 	sub.w	r3, r9, r1
 8025a9a:	930a      	str	r3, [sp, #40]	; 0x28
 8025a9c:	4651      	mov	r1, sl
 8025a9e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8025aa0:	f7ff ff1c 	bl	80258dc <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8025aa4:	4681      	mov	r9, r0
 8025aa6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8025aa8:	f7ff ff42 	bl	8025930 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8025aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025aae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025ab0:	eba3 0a01 	sub.w	sl, r3, r1
 8025ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025ab6:	459a      	cmp	sl, r3
 8025ab8:	bfa8      	it	ge
 8025aba:	469a      	movge	sl, r3
 8025abc:	f1ba 0f00 	cmp.w	sl, #0
 8025ac0:	4683      	mov	fp, r0
 8025ac2:	f340 811a 	ble.w	8025cfa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8025ac6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025ac8:	1b64      	subs	r4, r4, r5
 8025aca:	1b1c      	subs	r4, r3, r4
 8025acc:	42bc      	cmp	r4, r7
 8025ace:	bfd4      	ite	le
 8025ad0:	ebc5 0504 	rsble	r5, r5, r4
 8025ad4:	ebc5 0507 	rsbgt	r5, r5, r7
 8025ad8:	2d00      	cmp	r5, #0
 8025ada:	f340 810e 	ble.w	8025cfa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8025ade:	1b52      	subs	r2, r2, r5
 8025ae0:	fb08 f302 	mul.w	r3, r8, r2
 8025ae4:	930f      	str	r3, [sp, #60]	; 0x3c
 8025ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025ae8:	2b00      	cmp	r3, #0
 8025aea:	f040 8116 	bne.w	8025d1a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8025aee:	4b8d      	ldr	r3, [pc, #564]	; (8025d24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8025af0:	6818      	ldr	r0, [r3, #0]
 8025af2:	6803      	ldr	r3, [r0, #0]
 8025af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025af6:	4798      	blx	r3
 8025af8:	2301      	movs	r3, #1
 8025afa:	fa03 f308 	lsl.w	r3, r3, r8
 8025afe:	4a8a      	ldr	r2, [pc, #552]	; (8025d28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8025b00:	3b01      	subs	r3, #1
 8025b02:	b2db      	uxtb	r3, r3
 8025b04:	8811      	ldrh	r1, [r2, #0]
 8025b06:	930e      	str	r3, [sp, #56]	; 0x38
 8025b08:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8025b0c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8025b10:	fb01 2303 	mla	r3, r1, r3, r2
 8025b14:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8025b18:	930a      	str	r3, [sp, #40]	; 0x28
 8025b1a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025b1c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8025b20:	9313      	str	r3, [sp, #76]	; 0x4c
 8025b22:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025b24:	0a19      	lsrs	r1, r3, #8
 8025b26:	b2cb      	uxtb	r3, r1
 8025b28:	9312      	str	r3, [sp, #72]	; 0x48
 8025b2a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025b2c:	b2db      	uxtb	r3, r3
 8025b2e:	9311      	str	r3, [sp, #68]	; 0x44
 8025b30:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8025b32:	095a      	lsrs	r2, r3, #5
 8025b34:	4b7d      	ldr	r3, [pc, #500]	; (8025d2c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8025b36:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025b3a:	400b      	ands	r3, r1
 8025b3c:	4313      	orrs	r3, r2
 8025b3e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8025b40:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8025b44:	4313      	orrs	r3, r2
 8025b46:	b29b      	uxth	r3, r3
 8025b48:	9310      	str	r3, [sp, #64]	; 0x40
 8025b4a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025b4c:	781a      	ldrb	r2, [r3, #0]
 8025b4e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8025b52:	4132      	asrs	r2, r6
 8025b54:	fb05 b919 	mls	r9, r5, r9, fp
 8025b58:	fb03 fb05 	mul.w	fp, r3, r5
 8025b5c:	b2d2      	uxtb	r2, r2
 8025b5e:	930d      	str	r3, [sp, #52]	; 0x34
 8025b60:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 8025b64:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8025b68:	f0c0 80f5 	bcc.w	8025d56 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 8025b6c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8025b70:	46ae      	mov	lr, r5
 8025b72:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8025b76:	f0c0 80dd 	bcc.w	8025d34 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8025b7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025b7c:	4013      	ands	r3, r2
 8025b7e:	d055      	beq.n	8025c2c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8025b80:	20ff      	movs	r0, #255	; 0xff
 8025b82:	990e      	ldr	r1, [sp, #56]	; 0x38
 8025b84:	fb90 f1f1 	sdiv	r1, r0, r1
 8025b88:	434b      	muls	r3, r1
 8025b8a:	2bfe      	cmp	r3, #254	; 0xfe
 8025b8c:	dd03      	ble.n	8025b96 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 8025b8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025b90:	4281      	cmp	r1, r0
 8025b92:	f000 80cd 	beq.w	8025d30 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 8025b96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025b98:	f8bc 4000 	ldrh.w	r4, [ip]
 8025b9c:	fb11 f303 	smulbb	r3, r1, r3
 8025ba0:	b29b      	uxth	r3, r3
 8025ba2:	1c59      	adds	r1, r3, #1
 8025ba4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8025ba8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025bac:	b29f      	uxth	r7, r3
 8025bae:	43db      	mvns	r3, r3
 8025bb0:	b2db      	uxtb	r3, r3
 8025bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8025bb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025bb6:	1220      	asrs	r0, r4, #8
 8025bb8:	fb13 f907 	smulbb	r9, r3, r7
 8025bbc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025bc2:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8025bc6:	fb00 9003 	mla	r0, r0, r3, r9
 8025bca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025bcc:	10e1      	asrs	r1, r4, #3
 8025bce:	fb13 f907 	smulbb	r9, r3, r7
 8025bd2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025bd8:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8025bdc:	fb01 9103 	mla	r1, r1, r3, r9
 8025be0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025be2:	00e4      	lsls	r4, r4, #3
 8025be4:	fb13 f707 	smulbb	r7, r3, r7
 8025be8:	b2e4      	uxtb	r4, r4
 8025bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025bec:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8025bf0:	fb04 7403 	mla	r4, r4, r3, r7
 8025bf4:	b280      	uxth	r0, r0
 8025bf6:	b2a4      	uxth	r4, r4
 8025bf8:	1c43      	adds	r3, r0, #1
 8025bfa:	f104 0901 	add.w	r9, r4, #1
 8025bfe:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025c02:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8025c06:	b289      	uxth	r1, r1
 8025c08:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8025c0c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8025c10:	ea49 0000 	orr.w	r0, r9, r0
 8025c14:	f101 0901 	add.w	r9, r1, #1
 8025c18:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8025c1c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025c20:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025c24:	ea40 0009 	orr.w	r0, r0, r9
 8025c28:	f8ac 0000 	strh.w	r0, [ip]
 8025c2c:	4446      	add	r6, r8
 8025c2e:	b2b6      	uxth	r6, r6
 8025c30:	2e07      	cmp	r6, #7
 8025c32:	bf81      	itttt	hi
 8025c34:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 8025c36:	785a      	ldrbhi	r2, [r3, #1]
 8025c38:	3301      	addhi	r3, #1
 8025c3a:	9328      	strhi	r3, [sp, #160]	; 0xa0
 8025c3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025c3e:	bf9a      	itte	ls
 8025c40:	fa42 f208 	asrls.w	r2, r2, r8
 8025c44:	b2d2      	uxtbls	r2, r2
 8025c46:	2600      	movhi	r6, #0
 8025c48:	449c      	add	ip, r3
 8025c4a:	e792      	b.n	8025b72 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8025c4c:	441c      	add	r4, r3
 8025c4e:	b224      	sxth	r4, r4
 8025c50:	e6d5      	b.n	80259fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8025c52:	f1ba 0f01 	cmp.w	sl, #1
 8025c56:	f47f af0c 	bne.w	8025a72 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8025c5a:	f1bb 0f01 	cmp.w	fp, #1
 8025c5e:	f47f af08 	bne.w	8025a72 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8025c62:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8025d24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 8025c66:	f8db 0000 	ldr.w	r0, [fp]
 8025c6a:	6803      	ldr	r3, [r0, #0]
 8025c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8025c6e:	4798      	blx	r3
 8025c70:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8025c74:	465a      	mov	r2, fp
 8025c76:	d006      	beq.n	8025c86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8025c78:	f1b8 0f04 	cmp.w	r8, #4
 8025c7c:	d140      	bne.n	8025d00 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8025c7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025c80:	3300      	adds	r3, #0
 8025c82:	bf18      	it	ne
 8025c84:	2301      	movne	r3, #1
 8025c86:	0580      	lsls	r0, r0, #22
 8025c88:	d56e      	bpl.n	8025d68 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8025c8a:	f1b8 0f08 	cmp.w	r8, #8
 8025c8e:	d16b      	bne.n	8025d68 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8025c90:	2b00      	cmp	r3, #0
 8025c92:	bf0c      	ite	eq
 8025c94:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8025c98:	f44f 7180 	movne.w	r1, #256	; 0x100
 8025c9c:	2d00      	cmp	r5, #0
 8025c9e:	f47f aee8 	bne.w	8025a72 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8025ca2:	2e00      	cmp	r6, #0
 8025ca4:	f47f aee5 	bne.w	8025a72 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8025ca8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025caa:	19e3      	adds	r3, r4, r7
 8025cac:	4283      	cmp	r3, r0
 8025cae:	f73f aee0 	bgt.w	8025a72 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8025cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025cb4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8025cb6:	444b      	add	r3, r9
 8025cb8:	4283      	cmp	r3, r0
 8025cba:	f73f aeda 	bgt.w	8025a72 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8025cbe:	6810      	ldr	r0, [r2, #0]
 8025cc0:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 8025cc4:	6804      	ldr	r4, [r0, #0]
 8025cc6:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8025cca:	b2bf      	uxth	r7, r7
 8025ccc:	f1b8 0f08 	cmp.w	r8, #8
 8025cd0:	f04f 0500 	mov.w	r5, #0
 8025cd4:	bf18      	it	ne
 8025cd6:	3701      	addne	r7, #1
 8025cd8:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8025cdc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8025cde:	9104      	str	r1, [sp, #16]
 8025ce0:	bf18      	it	ne
 8025ce2:	f027 0701 	bicne.w	r7, r7, #1
 8025ce6:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8025ce8:	bf18      	it	ne
 8025cea:	b2bf      	uxthne	r7, r7
 8025cec:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8025cf0:	e9cd 7900 	strd	r7, r9, [sp]
 8025cf4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8025cf6:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8025cf8:	47a0      	blx	r4
 8025cfa:	b019      	add	sp, #100	; 0x64
 8025cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025d00:	2300      	movs	r3, #0
 8025d02:	e7c0      	b.n	8025c86 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8025d04:	2208      	movs	r2, #8
 8025d06:	fb92 f3f8 	sdiv	r3, r2, r8
 8025d0a:	1e5a      	subs	r2, r3, #1
 8025d0c:	443a      	add	r2, r7
 8025d0e:	fb92 f2f3 	sdiv	r2, r2, r3
 8025d12:	fb12 f203 	smulbb	r2, r2, r3
 8025d16:	b292      	uxth	r2, r2
 8025d18:	e6b0      	b.n	8025a7c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8025d1a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8025d1c:	e6ec      	b.n	8025af8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 8025d1e:	bf00      	nop
 8025d20:	2000f15a 	.word	0x2000f15a
 8025d24:	2000f164 	.word	0x2000f164
 8025d28:	2000f15c 	.word	0x2000f15c
 8025d2c:	00fff800 	.word	0x00fff800
 8025d30:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025d32:	e779      	b.n	8025c28 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 8025d34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025d36:	b153      	cbz	r3, 8025d4e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8025d38:	441e      	add	r6, r3
 8025d3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025d3c:	b2b6      	uxth	r6, r6
 8025d3e:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 8025d42:	f006 0607 	and.w	r6, r6, #7
 8025d46:	781a      	ldrb	r2, [r3, #0]
 8025d48:	9328      	str	r3, [sp, #160]	; 0xa0
 8025d4a:	4132      	asrs	r2, r6
 8025d4c:	b2d2      	uxtb	r2, r2
 8025d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025d50:	445b      	add	r3, fp
 8025d52:	930a      	str	r3, [sp, #40]	; 0x28
 8025d54:	e706      	b.n	8025b64 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 8025d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025d58:	2b00      	cmp	r3, #0
 8025d5a:	d1ce      	bne.n	8025cfa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8025d5c:	4b05      	ldr	r3, [pc, #20]	; (8025d74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 8025d5e:	6818      	ldr	r0, [r3, #0]
 8025d60:	6803      	ldr	r3, [r0, #0]
 8025d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8025d64:	4798      	blx	r3
 8025d66:	e7c8      	b.n	8025cfa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8025d68:	2b00      	cmp	r3, #0
 8025d6a:	f43f ae82 	beq.w	8025a72 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8025d6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8025d72:	e793      	b.n	8025c9c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 8025d74:	2000f164 	.word	0x2000f164

08025d78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8025d78:	b538      	push	{r3, r4, r5, lr}
 8025d7a:	4c15      	ldr	r4, [pc, #84]	; (8025dd0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8025d7c:	7823      	ldrb	r3, [r4, #0]
 8025d7e:	f3bf 8f5b 	dmb	ish
 8025d82:	07da      	lsls	r2, r3, #31
 8025d84:	4605      	mov	r5, r0
 8025d86:	d40b      	bmi.n	8025da0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8025d88:	4620      	mov	r0, r4
 8025d8a:	f007 fd73 	bl	802d874 <__cxa_guard_acquire>
 8025d8e:	b138      	cbz	r0, 8025da0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8025d90:	4620      	mov	r0, r4
 8025d92:	f007 fd7b 	bl	802d88c <__cxa_guard_release>
 8025d96:	4a0f      	ldr	r2, [pc, #60]	; (8025dd4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8025d98:	490f      	ldr	r1, [pc, #60]	; (8025dd8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8025d9a:	4810      	ldr	r0, [pc, #64]	; (8025ddc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8025d9c:	f007 fd63 	bl	802d866 <__aeabi_atexit>
 8025da0:	4c0f      	ldr	r4, [pc, #60]	; (8025de0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8025da2:	7823      	ldrb	r3, [r4, #0]
 8025da4:	f3bf 8f5b 	dmb	ish
 8025da8:	07db      	lsls	r3, r3, #31
 8025daa:	d40b      	bmi.n	8025dc4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8025dac:	4620      	mov	r0, r4
 8025dae:	f007 fd61 	bl	802d874 <__cxa_guard_acquire>
 8025db2:	b138      	cbz	r0, 8025dc4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8025db4:	4620      	mov	r0, r4
 8025db6:	f007 fd69 	bl	802d88c <__cxa_guard_release>
 8025dba:	4a06      	ldr	r2, [pc, #24]	; (8025dd4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8025dbc:	4909      	ldr	r1, [pc, #36]	; (8025de4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8025dbe:	480a      	ldr	r0, [pc, #40]	; (8025de8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8025dc0:	f007 fd51 	bl	802d866 <__aeabi_atexit>
 8025dc4:	4b05      	ldr	r3, [pc, #20]	; (8025ddc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8025dc6:	612b      	str	r3, [r5, #16]
 8025dc8:	4b07      	ldr	r3, [pc, #28]	; (8025de8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8025dca:	616b      	str	r3, [r5, #20]
 8025dcc:	bd38      	pop	{r3, r4, r5, pc}
 8025dce:	bf00      	nop
 8025dd0:	2000f238 	.word	0x2000f238
 8025dd4:	20000000 	.word	0x20000000
 8025dd8:	08023f9b 	.word	0x08023f9b
 8025ddc:	20000064 	.word	0x20000064
 8025de0:	2000f23c 	.word	0x2000f23c
 8025de4:	08023f99 	.word	0x08023f99
 8025de8:	20000068 	.word	0x20000068

08025dec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8025dec:	b538      	push	{r3, r4, r5, lr}
 8025dee:	4c15      	ldr	r4, [pc, #84]	; (8025e44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8025df0:	7823      	ldrb	r3, [r4, #0]
 8025df2:	f3bf 8f5b 	dmb	ish
 8025df6:	07da      	lsls	r2, r3, #31
 8025df8:	4605      	mov	r5, r0
 8025dfa:	d40b      	bmi.n	8025e14 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8025dfc:	4620      	mov	r0, r4
 8025dfe:	f007 fd39 	bl	802d874 <__cxa_guard_acquire>
 8025e02:	b138      	cbz	r0, 8025e14 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8025e04:	4620      	mov	r0, r4
 8025e06:	f007 fd41 	bl	802d88c <__cxa_guard_release>
 8025e0a:	4a0f      	ldr	r2, [pc, #60]	; (8025e48 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8025e0c:	490f      	ldr	r1, [pc, #60]	; (8025e4c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8025e0e:	4810      	ldr	r0, [pc, #64]	; (8025e50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8025e10:	f007 fd29 	bl	802d866 <__aeabi_atexit>
 8025e14:	4c0f      	ldr	r4, [pc, #60]	; (8025e54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8025e16:	7823      	ldrb	r3, [r4, #0]
 8025e18:	f3bf 8f5b 	dmb	ish
 8025e1c:	07db      	lsls	r3, r3, #31
 8025e1e:	d40b      	bmi.n	8025e38 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8025e20:	4620      	mov	r0, r4
 8025e22:	f007 fd27 	bl	802d874 <__cxa_guard_acquire>
 8025e26:	b138      	cbz	r0, 8025e38 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8025e28:	4620      	mov	r0, r4
 8025e2a:	f007 fd2f 	bl	802d88c <__cxa_guard_release>
 8025e2e:	4a06      	ldr	r2, [pc, #24]	; (8025e48 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8025e30:	4909      	ldr	r1, [pc, #36]	; (8025e58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8025e32:	480a      	ldr	r0, [pc, #40]	; (8025e5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8025e34:	f007 fd17 	bl	802d866 <__aeabi_atexit>
 8025e38:	4b05      	ldr	r3, [pc, #20]	; (8025e50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8025e3a:	60ab      	str	r3, [r5, #8]
 8025e3c:	4b07      	ldr	r3, [pc, #28]	; (8025e5c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8025e3e:	60eb      	str	r3, [r5, #12]
 8025e40:	bd38      	pop	{r3, r4, r5, pc}
 8025e42:	bf00      	nop
 8025e44:	2000f210 	.word	0x2000f210
 8025e48:	20000000 	.word	0x20000000
 8025e4c:	08023f9f 	.word	0x08023f9f
 8025e50:	2000003c 	.word	0x2000003c
 8025e54:	2000f214 	.word	0x2000f214
 8025e58:	08023f9d 	.word	0x08023f9d
 8025e5c:	20000040 	.word	0x20000040

08025e60 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 8025e60:	b510      	push	{r4, lr}
 8025e62:	4604      	mov	r4, r0
 8025e64:	f7ff ff88 	bl	8025d78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8025e68:	4620      	mov	r0, r4
 8025e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025e6e:	f7ff bfbd 	b.w	8025dec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

08025e74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8025e74:	b538      	push	{r3, r4, r5, lr}
 8025e76:	4c15      	ldr	r4, [pc, #84]	; (8025ecc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8025e78:	7823      	ldrb	r3, [r4, #0]
 8025e7a:	f3bf 8f5b 	dmb	ish
 8025e7e:	07da      	lsls	r2, r3, #31
 8025e80:	4605      	mov	r5, r0
 8025e82:	d40b      	bmi.n	8025e9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8025e84:	4620      	mov	r0, r4
 8025e86:	f007 fcf5 	bl	802d874 <__cxa_guard_acquire>
 8025e8a:	b138      	cbz	r0, 8025e9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8025e8c:	4620      	mov	r0, r4
 8025e8e:	f007 fcfd 	bl	802d88c <__cxa_guard_release>
 8025e92:	4a0f      	ldr	r2, [pc, #60]	; (8025ed0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8025e94:	490f      	ldr	r1, [pc, #60]	; (8025ed4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8025e96:	4810      	ldr	r0, [pc, #64]	; (8025ed8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8025e98:	f007 fce5 	bl	802d866 <__aeabi_atexit>
 8025e9c:	4c0f      	ldr	r4, [pc, #60]	; (8025edc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8025e9e:	7823      	ldrb	r3, [r4, #0]
 8025ea0:	f3bf 8f5b 	dmb	ish
 8025ea4:	07db      	lsls	r3, r3, #31
 8025ea6:	d40b      	bmi.n	8025ec0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8025ea8:	4620      	mov	r0, r4
 8025eaa:	f007 fce3 	bl	802d874 <__cxa_guard_acquire>
 8025eae:	b138      	cbz	r0, 8025ec0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8025eb0:	4620      	mov	r0, r4
 8025eb2:	f007 fceb 	bl	802d88c <__cxa_guard_release>
 8025eb6:	4a06      	ldr	r2, [pc, #24]	; (8025ed0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8025eb8:	4909      	ldr	r1, [pc, #36]	; (8025ee0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8025eba:	480a      	ldr	r0, [pc, #40]	; (8025ee4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8025ebc:	f007 fcd3 	bl	802d866 <__aeabi_atexit>
 8025ec0:	4b05      	ldr	r3, [pc, #20]	; (8025ed8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8025ec2:	622b      	str	r3, [r5, #32]
 8025ec4:	4b07      	ldr	r3, [pc, #28]	; (8025ee4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8025ec6:	626b      	str	r3, [r5, #36]	; 0x24
 8025ec8:	bd38      	pop	{r3, r4, r5, pc}
 8025eca:	bf00      	nop
 8025ecc:	2000f240 	.word	0x2000f240
 8025ed0:	20000000 	.word	0x20000000
 8025ed4:	08023f93 	.word	0x08023f93
 8025ed8:	2000006c 	.word	0x2000006c
 8025edc:	2000f244 	.word	0x2000f244
 8025ee0:	08023f91 	.word	0x08023f91
 8025ee4:	20000070 	.word	0x20000070

08025ee8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8025ee8:	b538      	push	{r3, r4, r5, lr}
 8025eea:	4c15      	ldr	r4, [pc, #84]	; (8025f40 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8025eec:	7823      	ldrb	r3, [r4, #0]
 8025eee:	f3bf 8f5b 	dmb	ish
 8025ef2:	07da      	lsls	r2, r3, #31
 8025ef4:	4605      	mov	r5, r0
 8025ef6:	d40b      	bmi.n	8025f10 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8025ef8:	4620      	mov	r0, r4
 8025efa:	f007 fcbb 	bl	802d874 <__cxa_guard_acquire>
 8025efe:	b138      	cbz	r0, 8025f10 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8025f00:	4620      	mov	r0, r4
 8025f02:	f007 fcc3 	bl	802d88c <__cxa_guard_release>
 8025f06:	4a0f      	ldr	r2, [pc, #60]	; (8025f44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8025f08:	490f      	ldr	r1, [pc, #60]	; (8025f48 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8025f0a:	4810      	ldr	r0, [pc, #64]	; (8025f4c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8025f0c:	f007 fcab 	bl	802d866 <__aeabi_atexit>
 8025f10:	4c0f      	ldr	r4, [pc, #60]	; (8025f50 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8025f12:	7823      	ldrb	r3, [r4, #0]
 8025f14:	f3bf 8f5b 	dmb	ish
 8025f18:	07db      	lsls	r3, r3, #31
 8025f1a:	d40b      	bmi.n	8025f34 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8025f1c:	4620      	mov	r0, r4
 8025f1e:	f007 fca9 	bl	802d874 <__cxa_guard_acquire>
 8025f22:	b138      	cbz	r0, 8025f34 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8025f24:	4620      	mov	r0, r4
 8025f26:	f007 fcb1 	bl	802d88c <__cxa_guard_release>
 8025f2a:	4a06      	ldr	r2, [pc, #24]	; (8025f44 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8025f2c:	4909      	ldr	r1, [pc, #36]	; (8025f54 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8025f2e:	480a      	ldr	r0, [pc, #40]	; (8025f58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8025f30:	f007 fc99 	bl	802d866 <__aeabi_atexit>
 8025f34:	4b05      	ldr	r3, [pc, #20]	; (8025f4c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8025f36:	61ab      	str	r3, [r5, #24]
 8025f38:	4b07      	ldr	r3, [pc, #28]	; (8025f58 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8025f3a:	61eb      	str	r3, [r5, #28]
 8025f3c:	bd38      	pop	{r3, r4, r5, pc}
 8025f3e:	bf00      	nop
 8025f40:	2000f218 	.word	0x2000f218
 8025f44:	20000000 	.word	0x20000000
 8025f48:	08023f97 	.word	0x08023f97
 8025f4c:	20000044 	.word	0x20000044
 8025f50:	2000f21c 	.word	0x2000f21c
 8025f54:	08023f95 	.word	0x08023f95
 8025f58:	20000048 	.word	0x20000048

08025f5c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 8025f5c:	b510      	push	{r4, lr}
 8025f5e:	4604      	mov	r4, r0
 8025f60:	f7ff ff88 	bl	8025e74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8025f64:	4620      	mov	r0, r4
 8025f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025f6a:	f7ff bfbd 	b.w	8025ee8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08025f70 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8025f70:	b538      	push	{r3, r4, r5, lr}
 8025f72:	4c15      	ldr	r4, [pc, #84]	; (8025fc8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8025f74:	7823      	ldrb	r3, [r4, #0]
 8025f76:	f3bf 8f5b 	dmb	ish
 8025f7a:	07da      	lsls	r2, r3, #31
 8025f7c:	4605      	mov	r5, r0
 8025f7e:	d40b      	bmi.n	8025f98 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8025f80:	4620      	mov	r0, r4
 8025f82:	f007 fc77 	bl	802d874 <__cxa_guard_acquire>
 8025f86:	b138      	cbz	r0, 8025f98 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8025f88:	4620      	mov	r0, r4
 8025f8a:	f007 fc7f 	bl	802d88c <__cxa_guard_release>
 8025f8e:	4a0f      	ldr	r2, [pc, #60]	; (8025fcc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8025f90:	490f      	ldr	r1, [pc, #60]	; (8025fd0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8025f92:	4810      	ldr	r0, [pc, #64]	; (8025fd4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8025f94:	f007 fc67 	bl	802d866 <__aeabi_atexit>
 8025f98:	4c0f      	ldr	r4, [pc, #60]	; (8025fd8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8025f9a:	7823      	ldrb	r3, [r4, #0]
 8025f9c:	f3bf 8f5b 	dmb	ish
 8025fa0:	07db      	lsls	r3, r3, #31
 8025fa2:	d40b      	bmi.n	8025fbc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8025fa4:	4620      	mov	r0, r4
 8025fa6:	f007 fc65 	bl	802d874 <__cxa_guard_acquire>
 8025faa:	b138      	cbz	r0, 8025fbc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8025fac:	4620      	mov	r0, r4
 8025fae:	f007 fc6d 	bl	802d88c <__cxa_guard_release>
 8025fb2:	4a06      	ldr	r2, [pc, #24]	; (8025fcc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8025fb4:	4909      	ldr	r1, [pc, #36]	; (8025fdc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8025fb6:	480a      	ldr	r0, [pc, #40]	; (8025fe0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8025fb8:	f007 fc55 	bl	802d866 <__aeabi_atexit>
 8025fbc:	4b05      	ldr	r3, [pc, #20]	; (8025fd4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8025fbe:	632b      	str	r3, [r5, #48]	; 0x30
 8025fc0:	4b07      	ldr	r3, [pc, #28]	; (8025fe0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8025fc2:	636b      	str	r3, [r5, #52]	; 0x34
 8025fc4:	bd38      	pop	{r3, r4, r5, pc}
 8025fc6:	bf00      	nop
 8025fc8:	2000f250 	.word	0x2000f250
 8025fcc:	20000000 	.word	0x20000000
 8025fd0:	08023f8b 	.word	0x08023f8b
 8025fd4:	2000007c 	.word	0x2000007c
 8025fd8:	2000f254 	.word	0x2000f254
 8025fdc:	08023f89 	.word	0x08023f89
 8025fe0:	20000080 	.word	0x20000080

08025fe4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8025fe4:	b538      	push	{r3, r4, r5, lr}
 8025fe6:	4c15      	ldr	r4, [pc, #84]	; (802603c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8025fe8:	7823      	ldrb	r3, [r4, #0]
 8025fea:	f3bf 8f5b 	dmb	ish
 8025fee:	07da      	lsls	r2, r3, #31
 8025ff0:	4605      	mov	r5, r0
 8025ff2:	d40b      	bmi.n	802600c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8025ff4:	4620      	mov	r0, r4
 8025ff6:	f007 fc3d 	bl	802d874 <__cxa_guard_acquire>
 8025ffa:	b138      	cbz	r0, 802600c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8025ffc:	4620      	mov	r0, r4
 8025ffe:	f007 fc45 	bl	802d88c <__cxa_guard_release>
 8026002:	4a0f      	ldr	r2, [pc, #60]	; (8026040 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8026004:	490f      	ldr	r1, [pc, #60]	; (8026044 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8026006:	4810      	ldr	r0, [pc, #64]	; (8026048 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8026008:	f007 fc2d 	bl	802d866 <__aeabi_atexit>
 802600c:	4c0f      	ldr	r4, [pc, #60]	; (802604c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802600e:	7823      	ldrb	r3, [r4, #0]
 8026010:	f3bf 8f5b 	dmb	ish
 8026014:	07db      	lsls	r3, r3, #31
 8026016:	d40b      	bmi.n	8026030 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8026018:	4620      	mov	r0, r4
 802601a:	f007 fc2b 	bl	802d874 <__cxa_guard_acquire>
 802601e:	b138      	cbz	r0, 8026030 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8026020:	4620      	mov	r0, r4
 8026022:	f007 fc33 	bl	802d88c <__cxa_guard_release>
 8026026:	4a06      	ldr	r2, [pc, #24]	; (8026040 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8026028:	4909      	ldr	r1, [pc, #36]	; (8026050 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 802602a:	480a      	ldr	r0, [pc, #40]	; (8026054 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 802602c:	f007 fc1b 	bl	802d866 <__aeabi_atexit>
 8026030:	4b05      	ldr	r3, [pc, #20]	; (8026048 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8026032:	62ab      	str	r3, [r5, #40]	; 0x28
 8026034:	4b07      	ldr	r3, [pc, #28]	; (8026054 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8026036:	62eb      	str	r3, [r5, #44]	; 0x2c
 8026038:	bd38      	pop	{r3, r4, r5, pc}
 802603a:	bf00      	nop
 802603c:	2000f220 	.word	0x2000f220
 8026040:	20000000 	.word	0x20000000
 8026044:	08023f8f 	.word	0x08023f8f
 8026048:	2000004c 	.word	0x2000004c
 802604c:	2000f224 	.word	0x2000f224
 8026050:	08023f8d 	.word	0x08023f8d
 8026054:	20000050 	.word	0x20000050

08026058 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 8026058:	b510      	push	{r4, lr}
 802605a:	4604      	mov	r4, r0
 802605c:	f7ff ff88 	bl	8025f70 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8026060:	4620      	mov	r0, r4
 8026062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026066:	f7ff bfbd 	b.w	8025fe4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0802606c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 802606c:	b538      	push	{r3, r4, r5, lr}
 802606e:	4c15      	ldr	r4, [pc, #84]	; (80260c4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8026070:	7823      	ldrb	r3, [r4, #0]
 8026072:	f3bf 8f5b 	dmb	ish
 8026076:	07da      	lsls	r2, r3, #31
 8026078:	4605      	mov	r5, r0
 802607a:	d40b      	bmi.n	8026094 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 802607c:	4620      	mov	r0, r4
 802607e:	f007 fbf9 	bl	802d874 <__cxa_guard_acquire>
 8026082:	b138      	cbz	r0, 8026094 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 8026084:	4620      	mov	r0, r4
 8026086:	f007 fc01 	bl	802d88c <__cxa_guard_release>
 802608a:	4a0f      	ldr	r2, [pc, #60]	; (80260c8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 802608c:	490f      	ldr	r1, [pc, #60]	; (80260cc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 802608e:	4810      	ldr	r0, [pc, #64]	; (80260d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8026090:	f007 fbe9 	bl	802d866 <__aeabi_atexit>
 8026094:	4c0f      	ldr	r4, [pc, #60]	; (80260d4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8026096:	7823      	ldrb	r3, [r4, #0]
 8026098:	f3bf 8f5b 	dmb	ish
 802609c:	07db      	lsls	r3, r3, #31
 802609e:	d40b      	bmi.n	80260b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80260a0:	4620      	mov	r0, r4
 80260a2:	f007 fbe7 	bl	802d874 <__cxa_guard_acquire>
 80260a6:	b138      	cbz	r0, 80260b8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80260a8:	4620      	mov	r0, r4
 80260aa:	f007 fbef 	bl	802d88c <__cxa_guard_release>
 80260ae:	4a06      	ldr	r2, [pc, #24]	; (80260c8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80260b0:	4909      	ldr	r1, [pc, #36]	; (80260d8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80260b2:	480a      	ldr	r0, [pc, #40]	; (80260dc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80260b4:	f007 fbd7 	bl	802d866 <__aeabi_atexit>
 80260b8:	4b05      	ldr	r3, [pc, #20]	; (80260d0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80260ba:	652b      	str	r3, [r5, #80]	; 0x50
 80260bc:	4b07      	ldr	r3, [pc, #28]	; (80260dc <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80260be:	656b      	str	r3, [r5, #84]	; 0x54
 80260c0:	bd38      	pop	{r3, r4, r5, pc}
 80260c2:	bf00      	nop
 80260c4:	2000f258 	.word	0x2000f258
 80260c8:	20000000 	.word	0x20000000
 80260cc:	08023f7b 	.word	0x08023f7b
 80260d0:	20000084 	.word	0x20000084
 80260d4:	2000f25c 	.word	0x2000f25c
 80260d8:	08023f79 	.word	0x08023f79
 80260dc:	20000088 	.word	0x20000088

080260e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 80260e0:	b538      	push	{r3, r4, r5, lr}
 80260e2:	4c15      	ldr	r4, [pc, #84]	; (8026138 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 80260e4:	7823      	ldrb	r3, [r4, #0]
 80260e6:	f3bf 8f5b 	dmb	ish
 80260ea:	07da      	lsls	r2, r3, #31
 80260ec:	4605      	mov	r5, r0
 80260ee:	d40b      	bmi.n	8026108 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80260f0:	4620      	mov	r0, r4
 80260f2:	f007 fbbf 	bl	802d874 <__cxa_guard_acquire>
 80260f6:	b138      	cbz	r0, 8026108 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 80260f8:	4620      	mov	r0, r4
 80260fa:	f007 fbc7 	bl	802d88c <__cxa_guard_release>
 80260fe:	4a0f      	ldr	r2, [pc, #60]	; (802613c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8026100:	490f      	ldr	r1, [pc, #60]	; (8026140 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8026102:	4810      	ldr	r0, [pc, #64]	; (8026144 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8026104:	f007 fbaf 	bl	802d866 <__aeabi_atexit>
 8026108:	4c0f      	ldr	r4, [pc, #60]	; (8026148 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 802610a:	7823      	ldrb	r3, [r4, #0]
 802610c:	f3bf 8f5b 	dmb	ish
 8026110:	07db      	lsls	r3, r3, #31
 8026112:	d40b      	bmi.n	802612c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8026114:	4620      	mov	r0, r4
 8026116:	f007 fbad 	bl	802d874 <__cxa_guard_acquire>
 802611a:	b138      	cbz	r0, 802612c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 802611c:	4620      	mov	r0, r4
 802611e:	f007 fbb5 	bl	802d88c <__cxa_guard_release>
 8026122:	4a06      	ldr	r2, [pc, #24]	; (802613c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8026124:	4909      	ldr	r1, [pc, #36]	; (802614c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8026126:	480a      	ldr	r0, [pc, #40]	; (8026150 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8026128:	f007 fb9d 	bl	802d866 <__aeabi_atexit>
 802612c:	4b05      	ldr	r3, [pc, #20]	; (8026144 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 802612e:	64ab      	str	r3, [r5, #72]	; 0x48
 8026130:	4b07      	ldr	r3, [pc, #28]	; (8026150 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8026132:	64eb      	str	r3, [r5, #76]	; 0x4c
 8026134:	bd38      	pop	{r3, r4, r5, pc}
 8026136:	bf00      	nop
 8026138:	2000f260 	.word	0x2000f260
 802613c:	20000000 	.word	0x20000000
 8026140:	08023f7f 	.word	0x08023f7f
 8026144:	2000008c 	.word	0x2000008c
 8026148:	2000f264 	.word	0x2000f264
 802614c:	08023f7d 	.word	0x08023f7d
 8026150:	20000090 	.word	0x20000090

08026154 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8026154:	b538      	push	{r3, r4, r5, lr}
 8026156:	4c15      	ldr	r4, [pc, #84]	; (80261ac <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8026158:	7823      	ldrb	r3, [r4, #0]
 802615a:	f3bf 8f5b 	dmb	ish
 802615e:	07da      	lsls	r2, r3, #31
 8026160:	4605      	mov	r5, r0
 8026162:	d40b      	bmi.n	802617c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8026164:	4620      	mov	r0, r4
 8026166:	f007 fb85 	bl	802d874 <__cxa_guard_acquire>
 802616a:	b138      	cbz	r0, 802617c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 802616c:	4620      	mov	r0, r4
 802616e:	f007 fb8d 	bl	802d88c <__cxa_guard_release>
 8026172:	4a0f      	ldr	r2, [pc, #60]	; (80261b0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8026174:	490f      	ldr	r1, [pc, #60]	; (80261b4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8026176:	4810      	ldr	r0, [pc, #64]	; (80261b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8026178:	f007 fb75 	bl	802d866 <__aeabi_atexit>
 802617c:	4c0f      	ldr	r4, [pc, #60]	; (80261bc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 802617e:	7823      	ldrb	r3, [r4, #0]
 8026180:	f3bf 8f5b 	dmb	ish
 8026184:	07db      	lsls	r3, r3, #31
 8026186:	d40b      	bmi.n	80261a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8026188:	4620      	mov	r0, r4
 802618a:	f007 fb73 	bl	802d874 <__cxa_guard_acquire>
 802618e:	b138      	cbz	r0, 80261a0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8026190:	4620      	mov	r0, r4
 8026192:	f007 fb7b 	bl	802d88c <__cxa_guard_release>
 8026196:	4a06      	ldr	r2, [pc, #24]	; (80261b0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8026198:	4909      	ldr	r1, [pc, #36]	; (80261c0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 802619a:	480a      	ldr	r0, [pc, #40]	; (80261c4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 802619c:	f007 fb63 	bl	802d866 <__aeabi_atexit>
 80261a0:	4b05      	ldr	r3, [pc, #20]	; (80261b8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80261a2:	642b      	str	r3, [r5, #64]	; 0x40
 80261a4:	4b07      	ldr	r3, [pc, #28]	; (80261c4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80261a6:	646b      	str	r3, [r5, #68]	; 0x44
 80261a8:	bd38      	pop	{r3, r4, r5, pc}
 80261aa:	bf00      	nop
 80261ac:	2000f228 	.word	0x2000f228
 80261b0:	20000000 	.word	0x20000000
 80261b4:	08023f83 	.word	0x08023f83
 80261b8:	20000054 	.word	0x20000054
 80261bc:	2000f22c 	.word	0x2000f22c
 80261c0:	08023f81 	.word	0x08023f81
 80261c4:	20000058 	.word	0x20000058

080261c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80261c8:	b538      	push	{r3, r4, r5, lr}
 80261ca:	4c15      	ldr	r4, [pc, #84]	; (8026220 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80261cc:	7823      	ldrb	r3, [r4, #0]
 80261ce:	f3bf 8f5b 	dmb	ish
 80261d2:	07da      	lsls	r2, r3, #31
 80261d4:	4605      	mov	r5, r0
 80261d6:	d40b      	bmi.n	80261f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80261d8:	4620      	mov	r0, r4
 80261da:	f007 fb4b 	bl	802d874 <__cxa_guard_acquire>
 80261de:	b138      	cbz	r0, 80261f0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80261e0:	4620      	mov	r0, r4
 80261e2:	f007 fb53 	bl	802d88c <__cxa_guard_release>
 80261e6:	4a0f      	ldr	r2, [pc, #60]	; (8026224 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 80261e8:	490f      	ldr	r1, [pc, #60]	; (8026228 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 80261ea:	4810      	ldr	r0, [pc, #64]	; (802622c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 80261ec:	f007 fb3b 	bl	802d866 <__aeabi_atexit>
 80261f0:	4c0f      	ldr	r4, [pc, #60]	; (8026230 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 80261f2:	7823      	ldrb	r3, [r4, #0]
 80261f4:	f3bf 8f5b 	dmb	ish
 80261f8:	07db      	lsls	r3, r3, #31
 80261fa:	d40b      	bmi.n	8026214 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 80261fc:	4620      	mov	r0, r4
 80261fe:	f007 fb39 	bl	802d874 <__cxa_guard_acquire>
 8026202:	b138      	cbz	r0, 8026214 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8026204:	4620      	mov	r0, r4
 8026206:	f007 fb41 	bl	802d88c <__cxa_guard_release>
 802620a:	4a06      	ldr	r2, [pc, #24]	; (8026224 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 802620c:	4909      	ldr	r1, [pc, #36]	; (8026234 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 802620e:	480a      	ldr	r0, [pc, #40]	; (8026238 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8026210:	f007 fb29 	bl	802d866 <__aeabi_atexit>
 8026214:	4b05      	ldr	r3, [pc, #20]	; (802622c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8026216:	63ab      	str	r3, [r5, #56]	; 0x38
 8026218:	4b07      	ldr	r3, [pc, #28]	; (8026238 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 802621a:	63eb      	str	r3, [r5, #60]	; 0x3c
 802621c:	bd38      	pop	{r3, r4, r5, pc}
 802621e:	bf00      	nop
 8026220:	2000f248 	.word	0x2000f248
 8026224:	20000000 	.word	0x20000000
 8026228:	08023f87 	.word	0x08023f87
 802622c:	20000074 	.word	0x20000074
 8026230:	2000f24c 	.word	0x2000f24c
 8026234:	08023f85 	.word	0x08023f85
 8026238:	20000078 	.word	0x20000078

0802623c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 802623c:	b510      	push	{r4, lr}
 802623e:	4604      	mov	r4, r0
 8026240:	f7ff ff14 	bl	802606c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8026244:	4620      	mov	r0, r4
 8026246:	f7ff ff85 	bl	8026154 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 802624a:	4620      	mov	r0, r4
 802624c:	f7ff ff48 	bl	80260e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8026250:	4620      	mov	r0, r4
 8026252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026256:	f7ff bfb7 	b.w	80261c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0802625c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 802625c:	b538      	push	{r3, r4, r5, lr}
 802625e:	4c15      	ldr	r4, [pc, #84]	; (80262b4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8026260:	7823      	ldrb	r3, [r4, #0]
 8026262:	f3bf 8f5b 	dmb	ish
 8026266:	07da      	lsls	r2, r3, #31
 8026268:	4605      	mov	r5, r0
 802626a:	d40b      	bmi.n	8026284 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 802626c:	4620      	mov	r0, r4
 802626e:	f007 fb01 	bl	802d874 <__cxa_guard_acquire>
 8026272:	b138      	cbz	r0, 8026284 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8026274:	4620      	mov	r0, r4
 8026276:	f007 fb09 	bl	802d88c <__cxa_guard_release>
 802627a:	4a0f      	ldr	r2, [pc, #60]	; (80262b8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 802627c:	490f      	ldr	r1, [pc, #60]	; (80262bc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 802627e:	4810      	ldr	r0, [pc, #64]	; (80262c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8026280:	f007 faf1 	bl	802d866 <__aeabi_atexit>
 8026284:	4c0f      	ldr	r4, [pc, #60]	; (80262c4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8026286:	7823      	ldrb	r3, [r4, #0]
 8026288:	f3bf 8f5b 	dmb	ish
 802628c:	07db      	lsls	r3, r3, #31
 802628e:	d40b      	bmi.n	80262a8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8026290:	4620      	mov	r0, r4
 8026292:	f007 faef 	bl	802d874 <__cxa_guard_acquire>
 8026296:	b138      	cbz	r0, 80262a8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8026298:	4620      	mov	r0, r4
 802629a:	f007 faf7 	bl	802d88c <__cxa_guard_release>
 802629e:	4a06      	ldr	r2, [pc, #24]	; (80262b8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80262a0:	4909      	ldr	r1, [pc, #36]	; (80262c8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80262a2:	480a      	ldr	r0, [pc, #40]	; (80262cc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80262a4:	f007 fadf 	bl	802d866 <__aeabi_atexit>
 80262a8:	4b05      	ldr	r3, [pc, #20]	; (80262c0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80262aa:	662b      	str	r3, [r5, #96]	; 0x60
 80262ac:	4b07      	ldr	r3, [pc, #28]	; (80262cc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80262ae:	666b      	str	r3, [r5, #100]	; 0x64
 80262b0:	bd38      	pop	{r3, r4, r5, pc}
 80262b2:	bf00      	nop
 80262b4:	2000f230 	.word	0x2000f230
 80262b8:	20000000 	.word	0x20000000
 80262bc:	08023f73 	.word	0x08023f73
 80262c0:	2000005c 	.word	0x2000005c
 80262c4:	2000f234 	.word	0x2000f234
 80262c8:	08023f71 	.word	0x08023f71
 80262cc:	20000060 	.word	0x20000060

080262d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80262d0:	b538      	push	{r3, r4, r5, lr}
 80262d2:	4c15      	ldr	r4, [pc, #84]	; (8026328 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80262d4:	7823      	ldrb	r3, [r4, #0]
 80262d6:	f3bf 8f5b 	dmb	ish
 80262da:	07da      	lsls	r2, r3, #31
 80262dc:	4605      	mov	r5, r0
 80262de:	d40b      	bmi.n	80262f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80262e0:	4620      	mov	r0, r4
 80262e2:	f007 fac7 	bl	802d874 <__cxa_guard_acquire>
 80262e6:	b138      	cbz	r0, 80262f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80262e8:	4620      	mov	r0, r4
 80262ea:	f007 facf 	bl	802d88c <__cxa_guard_release>
 80262ee:	4a0f      	ldr	r2, [pc, #60]	; (802632c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80262f0:	490f      	ldr	r1, [pc, #60]	; (8026330 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80262f2:	4810      	ldr	r0, [pc, #64]	; (8026334 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80262f4:	f007 fab7 	bl	802d866 <__aeabi_atexit>
 80262f8:	4c0f      	ldr	r4, [pc, #60]	; (8026338 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80262fa:	7823      	ldrb	r3, [r4, #0]
 80262fc:	f3bf 8f5b 	dmb	ish
 8026300:	07db      	lsls	r3, r3, #31
 8026302:	d40b      	bmi.n	802631c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8026304:	4620      	mov	r0, r4
 8026306:	f007 fab5 	bl	802d874 <__cxa_guard_acquire>
 802630a:	b138      	cbz	r0, 802631c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 802630c:	4620      	mov	r0, r4
 802630e:	f007 fabd 	bl	802d88c <__cxa_guard_release>
 8026312:	4a06      	ldr	r2, [pc, #24]	; (802632c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8026314:	4909      	ldr	r1, [pc, #36]	; (802633c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8026316:	480a      	ldr	r0, [pc, #40]	; (8026340 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8026318:	f007 faa5 	bl	802d866 <__aeabi_atexit>
 802631c:	4b05      	ldr	r3, [pc, #20]	; (8026334 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802631e:	65ab      	str	r3, [r5, #88]	; 0x58
 8026320:	4b07      	ldr	r3, [pc, #28]	; (8026340 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8026322:	65eb      	str	r3, [r5, #92]	; 0x5c
 8026324:	bd38      	pop	{r3, r4, r5, pc}
 8026326:	bf00      	nop
 8026328:	2000f208 	.word	0x2000f208
 802632c:	20000000 	.word	0x20000000
 8026330:	08023f77 	.word	0x08023f77
 8026334:	20000034 	.word	0x20000034
 8026338:	2000f20c 	.word	0x2000f20c
 802633c:	08023f75 	.word	0x08023f75
 8026340:	20000038 	.word	0x20000038

08026344 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8026344:	b510      	push	{r4, lr}
 8026346:	4604      	mov	r4, r0
 8026348:	f7ff ff88 	bl	802625c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 802634c:	4620      	mov	r0, r4
 802634e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026352:	f7ff bfbd 	b.w	80262d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08026358 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8026358:	b538      	push	{r3, r4, r5, lr}
 802635a:	4c15      	ldr	r4, [pc, #84]	; (80263b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 802635c:	7823      	ldrb	r3, [r4, #0]
 802635e:	f3bf 8f5b 	dmb	ish
 8026362:	07da      	lsls	r2, r3, #31
 8026364:	4605      	mov	r5, r0
 8026366:	d40b      	bmi.n	8026380 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8026368:	4620      	mov	r0, r4
 802636a:	f007 fa83 	bl	802d874 <__cxa_guard_acquire>
 802636e:	b138      	cbz	r0, 8026380 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8026370:	4620      	mov	r0, r4
 8026372:	f007 fa8b 	bl	802d88c <__cxa_guard_release>
 8026376:	4a0f      	ldr	r2, [pc, #60]	; (80263b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8026378:	490f      	ldr	r1, [pc, #60]	; (80263b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 802637a:	4810      	ldr	r0, [pc, #64]	; (80263bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802637c:	f007 fa73 	bl	802d866 <__aeabi_atexit>
 8026380:	4c0f      	ldr	r4, [pc, #60]	; (80263c0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8026382:	7823      	ldrb	r3, [r4, #0]
 8026384:	f3bf 8f5b 	dmb	ish
 8026388:	07db      	lsls	r3, r3, #31
 802638a:	d40b      	bmi.n	80263a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 802638c:	4620      	mov	r0, r4
 802638e:	f007 fa71 	bl	802d874 <__cxa_guard_acquire>
 8026392:	b138      	cbz	r0, 80263a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8026394:	4620      	mov	r0, r4
 8026396:	f007 fa79 	bl	802d88c <__cxa_guard_release>
 802639a:	4a06      	ldr	r2, [pc, #24]	; (80263b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 802639c:	4909      	ldr	r1, [pc, #36]	; (80263c4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 802639e:	480a      	ldr	r0, [pc, #40]	; (80263c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80263a0:	f007 fa61 	bl	802d866 <__aeabi_atexit>
 80263a4:	4b05      	ldr	r3, [pc, #20]	; (80263bc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80263a6:	672b      	str	r3, [r5, #112]	; 0x70
 80263a8:	4b07      	ldr	r3, [pc, #28]	; (80263c8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80263aa:	676b      	str	r3, [r5, #116]	; 0x74
 80263ac:	bd38      	pop	{r3, r4, r5, pc}
 80263ae:	bf00      	nop
 80263b0:	2000f200 	.word	0x2000f200
 80263b4:	20000000 	.word	0x20000000
 80263b8:	08023f6b 	.word	0x08023f6b
 80263bc:	2000002c 	.word	0x2000002c
 80263c0:	2000f204 	.word	0x2000f204
 80263c4:	08023f69 	.word	0x08023f69
 80263c8:	20000030 	.word	0x20000030

080263cc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 80263cc:	b538      	push	{r3, r4, r5, lr}
 80263ce:	4c15      	ldr	r4, [pc, #84]	; (8026424 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80263d0:	7823      	ldrb	r3, [r4, #0]
 80263d2:	f3bf 8f5b 	dmb	ish
 80263d6:	07da      	lsls	r2, r3, #31
 80263d8:	4605      	mov	r5, r0
 80263da:	d40b      	bmi.n	80263f4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80263dc:	4620      	mov	r0, r4
 80263de:	f007 fa49 	bl	802d874 <__cxa_guard_acquire>
 80263e2:	b138      	cbz	r0, 80263f4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80263e4:	4620      	mov	r0, r4
 80263e6:	f007 fa51 	bl	802d88c <__cxa_guard_release>
 80263ea:	4a0f      	ldr	r2, [pc, #60]	; (8026428 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80263ec:	490f      	ldr	r1, [pc, #60]	; (802642c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80263ee:	4810      	ldr	r0, [pc, #64]	; (8026430 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80263f0:	f007 fa39 	bl	802d866 <__aeabi_atexit>
 80263f4:	4c0f      	ldr	r4, [pc, #60]	; (8026434 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80263f6:	7823      	ldrb	r3, [r4, #0]
 80263f8:	f3bf 8f5b 	dmb	ish
 80263fc:	07db      	lsls	r3, r3, #31
 80263fe:	d40b      	bmi.n	8026418 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8026400:	4620      	mov	r0, r4
 8026402:	f007 fa37 	bl	802d874 <__cxa_guard_acquire>
 8026406:	b138      	cbz	r0, 8026418 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8026408:	4620      	mov	r0, r4
 802640a:	f007 fa3f 	bl	802d88c <__cxa_guard_release>
 802640e:	4a06      	ldr	r2, [pc, #24]	; (8026428 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8026410:	4909      	ldr	r1, [pc, #36]	; (8026438 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8026412:	480a      	ldr	r0, [pc, #40]	; (802643c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8026414:	f007 fa27 	bl	802d866 <__aeabi_atexit>
 8026418:	4b05      	ldr	r3, [pc, #20]	; (8026430 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802641a:	66ab      	str	r3, [r5, #104]	; 0x68
 802641c:	4b07      	ldr	r3, [pc, #28]	; (802643c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802641e:	66eb      	str	r3, [r5, #108]	; 0x6c
 8026420:	bd38      	pop	{r3, r4, r5, pc}
 8026422:	bf00      	nop
 8026424:	2000f1f8 	.word	0x2000f1f8
 8026428:	20000000 	.word	0x20000000
 802642c:	08023f6f 	.word	0x08023f6f
 8026430:	20000024 	.word	0x20000024
 8026434:	2000f1fc 	.word	0x2000f1fc
 8026438:	08023f6d 	.word	0x08023f6d
 802643c:	20000028 	.word	0x20000028

08026440 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8026440:	b510      	push	{r4, lr}
 8026442:	4604      	mov	r4, r0
 8026444:	f7ff ff88 	bl	8026358 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8026448:	4620      	mov	r0, r4
 802644a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802644e:	f7ff bfbd 	b.w	80263cc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08026452 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8026452:	b510      	push	{r4, lr}
 8026454:	4604      	mov	r4, r0
 8026456:	f7ff fff3 	bl	8026440 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 802645a:	4620      	mov	r0, r4
 802645c:	f7ff ff72 	bl	8026344 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8026460:	4620      	mov	r0, r4
 8026462:	f7ff fdf9 	bl	8026058 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 8026466:	4620      	mov	r0, r4
 8026468:	f7ff fcfa 	bl	8025e60 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 802646c:	4620      	mov	r0, r4
 802646e:	f7ff fd75 	bl	8025f5c <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8026472:	4620      	mov	r0, r4
 8026474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026478:	f7ff bee0 	b.w	802623c <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0802647c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 802647c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026480:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 8026484:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8026488:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 802648c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8026490:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8026494:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8026498:	8808      	ldrh	r0, [r1, #0]
 802649a:	fb05 4c0e 	mla	ip, r5, lr, r4
 802649e:	2d00      	cmp	r5, #0
 80264a0:	eb02 0a0c 	add.w	sl, r2, ip
 80264a4:	f2c0 80b0 	blt.w	8026608 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 80264a8:	45ab      	cmp	fp, r5
 80264aa:	f340 80ad 	ble.w	8026608 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 80264ae:	2c00      	cmp	r4, #0
 80264b0:	f2c0 80a8 	blt.w	8026604 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 80264b4:	45a6      	cmp	lr, r4
 80264b6:	f340 80a5 	ble.w	8026604 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 80264ba:	f812 200c 	ldrb.w	r2, [r2, ip]
 80264be:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 80264c2:	1c62      	adds	r2, r4, #1
 80264c4:	f100 80a3 	bmi.w	802660e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80264c8:	4596      	cmp	lr, r2
 80264ca:	f340 80a0 	ble.w	802660e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80264ce:	f1b9 0f00 	cmp.w	r9, #0
 80264d2:	f000 809c 	beq.w	802660e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 80264d6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80264da:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80264de:	3501      	adds	r5, #1
 80264e0:	f100 8099 	bmi.w	8026616 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 80264e4:	45ab      	cmp	fp, r5
 80264e6:	f340 8096 	ble.w	8026616 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 80264ea:	2f00      	cmp	r7, #0
 80264ec:	f000 8093 	beq.w	8026616 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 80264f0:	2c00      	cmp	r4, #0
 80264f2:	f2c0 808e 	blt.w	8026612 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 80264f6:	45a6      	cmp	lr, r4
 80264f8:	f340 808b 	ble.w	8026612 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 80264fc:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8026500:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8026504:	3401      	adds	r4, #1
 8026506:	f100 8089 	bmi.w	802661c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 802650a:	45a6      	cmp	lr, r4
 802650c:	f340 8086 	ble.w	802661c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8026510:	f1b9 0f00 	cmp.w	r9, #0
 8026514:	f000 8082 	beq.w	802661c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8026518:	44d6      	add	lr, sl
 802651a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802651e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8026522:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8026526:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802652a:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 802652e:	fb19 fe07 	smulbb	lr, r9, r7
 8026532:	ea44 0808 	orr.w	r8, r4, r8
 8026536:	ea4f 440c 	mov.w	r4, ip, lsl #16
 802653a:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 802653e:	f1c7 0210 	rsb	r2, r7, #16
 8026542:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026546:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802654a:	ea44 0c0c 	orr.w	ip, r4, ip
 802654e:	eba2 0209 	sub.w	r2, r2, r9
 8026552:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8026556:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 802655a:	fb04 f40c 	mul.w	r4, r4, ip
 802655e:	fb02 4808 	mla	r8, r2, r8, r4
 8026562:	041a      	lsls	r2, r3, #16
 8026564:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026568:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802656c:	4313      	orrs	r3, r2
 802656e:	042a      	lsls	r2, r5, #16
 8026570:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026574:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026578:	fb0e 8303 	mla	r3, lr, r3, r8
 802657c:	432a      	orrs	r2, r5
 802657e:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8026582:	fb07 3202 	mla	r2, r7, r2, r3
 8026586:	0d53      	lsrs	r3, r2, #21
 8026588:	0952      	lsrs	r2, r2, #5
 802658a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802658e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026592:	431a      	orrs	r2, r3
 8026594:	b293      	uxth	r3, r2
 8026596:	b2b4      	uxth	r4, r6
 8026598:	1202      	asrs	r2, r0, #8
 802659a:	43f6      	mvns	r6, r6
 802659c:	b2f6      	uxtb	r6, r6
 802659e:	121d      	asrs	r5, r3, #8
 80265a0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80265a4:	fb12 f206 	smulbb	r2, r2, r6
 80265a8:	10c7      	asrs	r7, r0, #3
 80265aa:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80265ae:	00c0      	lsls	r0, r0, #3
 80265b0:	fb05 2504 	mla	r5, r5, r4, r2
 80265b4:	b2c0      	uxtb	r0, r0
 80265b6:	10da      	asrs	r2, r3, #3
 80265b8:	00db      	lsls	r3, r3, #3
 80265ba:	b2db      	uxtb	r3, r3
 80265bc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80265c0:	fb10 f006 	smulbb	r0, r0, r6
 80265c4:	b2ad      	uxth	r5, r5
 80265c6:	fb03 0004 	mla	r0, r3, r4, r0
 80265ca:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80265ce:	fb17 f706 	smulbb	r7, r7, r6
 80265d2:	b280      	uxth	r0, r0
 80265d4:	1c6b      	adds	r3, r5, #1
 80265d6:	fb02 7204 	mla	r2, r2, r4, r7
 80265da:	b292      	uxth	r2, r2
 80265dc:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80265e0:	1c43      	adds	r3, r0, #1
 80265e2:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80265e6:	1c50      	adds	r0, r2, #1
 80265e8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80265ec:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80265f0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80265f4:	0952      	lsrs	r2, r2, #5
 80265f6:	432b      	orrs	r3, r5
 80265f8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80265fc:	4313      	orrs	r3, r2
 80265fe:	800b      	strh	r3, [r1, #0]
 8026600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026604:	4680      	mov	r8, r0
 8026606:	e75c      	b.n	80264c2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8026608:	4684      	mov	ip, r0
 802660a:	4680      	mov	r8, r0
 802660c:	e767      	b.n	80264de <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 802660e:	4684      	mov	ip, r0
 8026610:	e765      	b.n	80264de <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8026612:	4605      	mov	r5, r0
 8026614:	e776      	b.n	8026504 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8026616:	4603      	mov	r3, r0
 8026618:	4605      	mov	r5, r0
 802661a:	e782      	b.n	8026522 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 802661c:	4603      	mov	r3, r0
 802661e:	e780      	b.n	8026522 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08026620 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026624:	b099      	sub	sp, #100	; 0x64
 8026626:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 802662a:	9215      	str	r2, [sp, #84]	; 0x54
 802662c:	9309      	str	r3, [sp, #36]	; 0x24
 802662e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8026630:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 8026634:	930d      	str	r3, [sp, #52]	; 0x34
 8026636:	910c      	str	r1, [sp, #48]	; 0x30
 8026638:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 802663c:	9016      	str	r0, [sp, #88]	; 0x58
 802663e:	6850      	ldr	r0, [r2, #4]
 8026640:	6812      	ldr	r2, [r2, #0]
 8026642:	fb00 1303 	mla	r3, r0, r3, r1
 8026646:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 802664a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802664c:	681b      	ldr	r3, [r3, #0]
 802664e:	930b      	str	r3, [sp, #44]	; 0x2c
 8026650:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026652:	685e      	ldr	r6, [r3, #4]
 8026654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026656:	43db      	mvns	r3, r3
 8026658:	b2db      	uxtb	r3, r3
 802665a:	3604      	adds	r6, #4
 802665c:	930a      	str	r3, [sp, #40]	; 0x28
 802665e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026660:	2b00      	cmp	r3, #0
 8026662:	dc03      	bgt.n	802666c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8026664:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026666:	2b00      	cmp	r3, #0
 8026668:	f340 8225 	ble.w	8026ab6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 802666c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802666e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026672:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026676:	1e48      	subs	r0, r1, #1
 8026678:	1e57      	subs	r7, r2, #1
 802667a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802667c:	2b00      	cmp	r3, #0
 802667e:	f340 80e3 	ble.w	8026848 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8026682:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8026686:	ea4f 4325 	mov.w	r3, r5, asr #16
 802668a:	d406      	bmi.n	802669a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802668c:	4584      	cmp	ip, r0
 802668e:	da04      	bge.n	802669a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8026690:	2b00      	cmp	r3, #0
 8026692:	db02      	blt.n	802669a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8026694:	42bb      	cmp	r3, r7
 8026696:	f2c0 80d8 	blt.w	802684a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802669a:	f11c 0c01 	adds.w	ip, ip, #1
 802669e:	f100 80c9 	bmi.w	8026834 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80266a2:	4561      	cmp	r1, ip
 80266a4:	f2c0 80c6 	blt.w	8026834 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80266a8:	3301      	adds	r3, #1
 80266aa:	f100 80c3 	bmi.w	8026834 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80266ae:	429a      	cmp	r2, r3
 80266b0:	f2c0 80c0 	blt.w	8026834 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80266b4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80266b8:	4647      	mov	r7, r8
 80266ba:	f1bb 0f00 	cmp.w	fp, #0
 80266be:	f340 80e3 	ble.w	8026888 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 80266c2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80266c4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80266c6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80266ca:	689b      	ldr	r3, [r3, #8]
 80266cc:	ea5f 422a 	movs.w	r2, sl, asr #16
 80266d0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80266d4:	f3ca 3003 	ubfx	r0, sl, #12, #4
 80266d8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80266dc:	f100 8121 	bmi.w	8026922 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80266e0:	f103 39ff 	add.w	r9, r3, #4294967295
 80266e4:	454a      	cmp	r2, r9
 80266e6:	f280 811c 	bge.w	8026922 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80266ea:	f1bc 0f00 	cmp.w	ip, #0
 80266ee:	f2c0 8118 	blt.w	8026922 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80266f2:	f10e 39ff 	add.w	r9, lr, #4294967295
 80266f6:	45cc      	cmp	ip, r9
 80266f8:	f280 8113 	bge.w	8026922 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 80266fc:	b21b      	sxth	r3, r3
 80266fe:	fb0c 2203 	mla	r2, ip, r3, r2
 8026702:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026704:	eb04 0902 	add.w	r9, r4, r2
 8026708:	5ca2      	ldrb	r2, [r4, r2]
 802670a:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 802670e:	2800      	cmp	r0, #0
 8026710:	f000 80fe 	beq.w	8026910 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8026714:	f899 2001 	ldrb.w	r2, [r9, #1]
 8026718:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 802671c:	9211      	str	r2, [sp, #68]	; 0x44
 802671e:	b151      	cbz	r1, 8026736 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8026720:	eb09 0203 	add.w	r2, r9, r3
 8026724:	f819 3003 	ldrb.w	r3, [r9, r3]
 8026728:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802672c:	930f      	str	r3, [sp, #60]	; 0x3c
 802672e:	7853      	ldrb	r3, [r2, #1]
 8026730:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8026734:	9312      	str	r3, [sp, #72]	; 0x48
 8026736:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026738:	9c12      	ldr	r4, [sp, #72]	; 0x48
 802673a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802673e:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026742:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026746:	ea4c 0c03 	orr.w	ip, ip, r3
 802674a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802674c:	041b      	lsls	r3, r3, #16
 802674e:	fb10 f201 	smulbb	r2, r0, r1
 8026752:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8026756:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802675a:	10d2      	asrs	r2, r2, #3
 802675c:	4323      	orrs	r3, r4
 802675e:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8026762:	4353      	muls	r3, r2
 8026764:	fb09 330c 	mla	r3, r9, ip, r3
 8026768:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 802676c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026770:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026774:	ea4c 0e0e 	orr.w	lr, ip, lr
 8026778:	f1c1 0c10 	rsb	ip, r1, #16
 802677c:	ebac 0c00 	sub.w	ip, ip, r0
 8026780:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8026784:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8026788:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802678a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802678c:	0418      	lsls	r0, r3, #16
 802678e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026792:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026796:	4318      	orrs	r0, r3
 8026798:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 802679c:	fb02 c200 	mla	r2, r2, r0, ip
 80267a0:	0d53      	lsrs	r3, r2, #21
 80267a2:	0952      	lsrs	r2, r2, #5
 80267a4:	8838      	ldrh	r0, [r7, #0]
 80267a6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80267aa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80267ae:	431a      	orrs	r2, r3
 80267b0:	b292      	uxth	r2, r2
 80267b2:	1201      	asrs	r1, r0, #8
 80267b4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80267b8:	ea4f 2c22 	mov.w	ip, r2, asr #8
 80267bc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80267c0:	fb11 f104 	smulbb	r1, r1, r4
 80267c4:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80267c8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80267cc:	00c0      	lsls	r0, r0, #3
 80267ce:	fb0c 1c03 	mla	ip, ip, r3, r1
 80267d2:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80267d6:	10d1      	asrs	r1, r2, #3
 80267d8:	b2c0      	uxtb	r0, r0
 80267da:	00d2      	lsls	r2, r2, #3
 80267dc:	b2d2      	uxtb	r2, r2
 80267de:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80267e2:	fb1e fe04 	smulbb	lr, lr, r4
 80267e6:	fb10 f004 	smulbb	r0, r0, r4
 80267ea:	fa1f fc8c 	uxth.w	ip, ip
 80267ee:	fb01 e103 	mla	r1, r1, r3, lr
 80267f2:	fb02 0303 	mla	r3, r2, r3, r0
 80267f6:	b29a      	uxth	r2, r3
 80267f8:	f10c 0301 	add.w	r3, ip, #1
 80267fc:	b289      	uxth	r1, r1
 80267fe:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8026802:	1c53      	adds	r3, r2, #1
 8026804:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026808:	1c4a      	adds	r2, r1, #1
 802680a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802680e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8026812:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026816:	0949      	lsrs	r1, r1, #5
 8026818:	ea43 030c 	orr.w	r3, r3, ip
 802681c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026820:	430b      	orrs	r3, r1
 8026822:	803b      	strh	r3, [r7, #0]
 8026824:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026826:	449a      	add	sl, r3
 8026828:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802682a:	3702      	adds	r7, #2
 802682c:	441d      	add	r5, r3
 802682e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026832:	e742      	b.n	80266ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8026834:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026836:	449a      	add	sl, r3
 8026838:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802683a:	441d      	add	r5, r3
 802683c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802683e:	3b01      	subs	r3, #1
 8026840:	9309      	str	r3, [sp, #36]	; 0x24
 8026842:	f108 0802 	add.w	r8, r8, #2
 8026846:	e718      	b.n	802667a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8026848:	d023      	beq.n	8026892 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 802684a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802684c:	9825      	ldr	r0, [sp, #148]	; 0x94
 802684e:	3b01      	subs	r3, #1
 8026850:	fb00 a003 	mla	r0, r0, r3, sl
 8026854:	1400      	asrs	r0, r0, #16
 8026856:	f53f af2d 	bmi.w	80266b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802685a:	3901      	subs	r1, #1
 802685c:	4288      	cmp	r0, r1
 802685e:	f6bf af29 	bge.w	80266b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026862:	9926      	ldr	r1, [sp, #152]	; 0x98
 8026864:	fb01 5303 	mla	r3, r1, r3, r5
 8026868:	141b      	asrs	r3, r3, #16
 802686a:	f53f af23 	bmi.w	80266b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802686e:	3a01      	subs	r2, #1
 8026870:	4293      	cmp	r3, r2
 8026872:	f6bf af1f 	bge.w	80266b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8026876:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 802687a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 802687e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8026882:	f1be 0f00 	cmp.w	lr, #0
 8026886:	dc6c      	bgt.n	8026962 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802688a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802688e:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8026892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026894:	2b00      	cmp	r3, #0
 8026896:	f340 810e 	ble.w	8026ab6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 802689a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802689e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80268a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80268a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80268a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80268ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 80268b0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80268b4:	eef0 6a62 	vmov.f32	s13, s5
 80268b8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80268bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80268c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80268c4:	ee16 aa90 	vmov	sl, s13
 80268c8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80268cc:	eef0 6a43 	vmov.f32	s13, s6
 80268d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80268d4:	ee12 2a90 	vmov	r2, s5
 80268d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80268dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80268e0:	ee13 2a10 	vmov	r2, s6
 80268e4:	9325      	str	r3, [sp, #148]	; 0x94
 80268e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80268e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80268ec:	9326      	str	r3, [sp, #152]	; 0x98
 80268ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80268f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80268f2:	3b01      	subs	r3, #1
 80268f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80268f8:	930c      	str	r3, [sp, #48]	; 0x30
 80268fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80268fc:	bf08      	it	eq
 80268fe:	4613      	moveq	r3, r2
 8026900:	ee16 5a90 	vmov	r5, s13
 8026904:	9309      	str	r3, [sp, #36]	; 0x24
 8026906:	eeb0 3a67 	vmov.f32	s6, s15
 802690a:	eef0 2a47 	vmov.f32	s5, s14
 802690e:	e6a6      	b.n	802665e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8026910:	2900      	cmp	r1, #0
 8026912:	f43f af10 	beq.w	8026736 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8026916:	f819 3003 	ldrb.w	r3, [r9, r3]
 802691a:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802691e:	930f      	str	r3, [sp, #60]	; 0x3c
 8026920:	e709      	b.n	8026736 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8026922:	f112 0901 	adds.w	r9, r2, #1
 8026926:	f53f af7d 	bmi.w	8026824 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802692a:	454b      	cmp	r3, r9
 802692c:	f6ff af7a 	blt.w	8026824 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8026930:	f11c 0901 	adds.w	r9, ip, #1
 8026934:	f53f af76 	bmi.w	8026824 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8026938:	45ce      	cmp	lr, r9
 802693a:	f6ff af73 	blt.w	8026824 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802693e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026940:	9202      	str	r2, [sp, #8]
 8026942:	b21b      	sxth	r3, r3
 8026944:	fa0f f28e 	sxth.w	r2, lr
 8026948:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802694c:	e9cd c003 	strd	ip, r0, [sp, #12]
 8026950:	9201      	str	r2, [sp, #4]
 8026952:	9300      	str	r3, [sp, #0]
 8026954:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026956:	9816      	ldr	r0, [sp, #88]	; 0x58
 8026958:	4633      	mov	r3, r6
 802695a:	4639      	mov	r1, r7
 802695c:	f7ff fd8e 	bl	802647c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8026960:	e760      	b.n	8026824 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8026962:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8026964:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8026966:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802696a:	ea4f 422a 	mov.w	r2, sl, asr #16
 802696e:	1429      	asrs	r1, r5, #16
 8026970:	fb03 2101 	mla	r1, r3, r1, r2
 8026974:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026976:	440a      	add	r2, r1
 8026978:	5c61      	ldrb	r1, [r4, r1]
 802697a:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 802697e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026982:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8026986:	f1bc 0f00 	cmp.w	ip, #0
 802698a:	f000 808c 	beq.w	8026aa6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 802698e:	7857      	ldrb	r7, [r2, #1]
 8026990:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8026994:	9413      	str	r4, [sp, #76]	; 0x4c
 8026996:	b140      	cbz	r0, 80269aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8026998:	18d7      	adds	r7, r2, r3
 802699a:	5cd3      	ldrb	r3, [r2, r3]
 802699c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80269a0:	9310      	str	r3, [sp, #64]	; 0x40
 80269a2:	787b      	ldrb	r3, [r7, #1]
 80269a4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80269a8:	9314      	str	r3, [sp, #80]	; 0x50
 80269aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80269ac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80269ae:	fb1c f200 	smulbb	r2, ip, r0
 80269b2:	041f      	lsls	r7, r3, #16
 80269b4:	10d2      	asrs	r2, r2, #3
 80269b6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80269ba:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 80269be:	431f      	orrs	r7, r3
 80269c0:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 80269c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80269c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80269c8:	041b      	lsls	r3, r3, #16
 80269ca:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 80269ce:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80269d2:	ea43 030b 	orr.w	r3, r3, fp
 80269d6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80269d8:	4353      	muls	r3, r2
 80269da:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80269de:	fb04 3707 	mla	r7, r4, r7, r3
 80269e2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80269e6:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80269ea:	ea43 0b01 	orr.w	fp, r3, r1
 80269ee:	f1c0 0110 	rsb	r1, r0, #16
 80269f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80269f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80269f6:	eba1 0c0c 	sub.w	ip, r1, ip
 80269fa:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80269fe:	fb0c 770b 	mla	r7, ip, fp, r7
 8026a02:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8026a06:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8026a0a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026a0e:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8026a12:	ea4c 0c0b 	orr.w	ip, ip, fp
 8026a16:	fb02 770c 	mla	r7, r2, ip, r7
 8026a1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026a1c:	0d79      	lsrs	r1, r7, #21
 8026a1e:	097f      	lsrs	r7, r7, #5
 8026a20:	8812      	ldrh	r2, [r2, #0]
 8026a22:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026a26:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8026a2a:	430f      	orrs	r7, r1
 8026a2c:	b2bb      	uxth	r3, r7
 8026a2e:	1211      	asrs	r1, r2, #8
 8026a30:	1218      	asrs	r0, r3, #8
 8026a32:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026a36:	fb11 f104 	smulbb	r1, r1, r4
 8026a3a:	10d7      	asrs	r7, r2, #3
 8026a3c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026a40:	00d2      	lsls	r2, r2, #3
 8026a42:	fb00 1009 	mla	r0, r0, r9, r1
 8026a46:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8026a4a:	10d9      	asrs	r1, r3, #3
 8026a4c:	b2d2      	uxtb	r2, r2
 8026a4e:	00db      	lsls	r3, r3, #3
 8026a50:	fb17 f704 	smulbb	r7, r7, r4
 8026a54:	fb12 f204 	smulbb	r2, r2, r4
 8026a58:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026a5c:	b2db      	uxtb	r3, r3
 8026a5e:	b280      	uxth	r0, r0
 8026a60:	fb01 7109 	mla	r1, r1, r9, r7
 8026a64:	fb03 2309 	mla	r3, r3, r9, r2
 8026a68:	b29b      	uxth	r3, r3
 8026a6a:	b289      	uxth	r1, r1
 8026a6c:	1c42      	adds	r2, r0, #1
 8026a6e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026a72:	1c4f      	adds	r7, r1, #1
 8026a74:	1c5a      	adds	r2, r3, #1
 8026a76:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026a7a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8026a7e:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8026a82:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8026a86:	0949      	lsrs	r1, r1, #5
 8026a88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026a8a:	4310      	orrs	r0, r2
 8026a8c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026a90:	4308      	orrs	r0, r1
 8026a92:	f823 0b02 	strh.w	r0, [r3], #2
 8026a96:	930e      	str	r3, [sp, #56]	; 0x38
 8026a98:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026a9a:	449a      	add	sl, r3
 8026a9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026a9e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8026aa2:	441d      	add	r5, r3
 8026aa4:	e6ed      	b.n	8026882 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 8026aa6:	2800      	cmp	r0, #0
 8026aa8:	f43f af7f 	beq.w	80269aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8026aac:	5cd3      	ldrb	r3, [r2, r3]
 8026aae:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8026ab2:	9310      	str	r3, [sp, #64]	; 0x40
 8026ab4:	e779      	b.n	80269aa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8026ab6:	b019      	add	sp, #100	; 0x64
 8026ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026abc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8026abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026ac0:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 8026ac4:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8026ac8:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8026acc:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8026ad0:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8026ad4:	8808      	ldrh	r0, [r1, #0]
 8026ad6:	fb08 470e 	mla	r7, r8, lr, r4
 8026ada:	f1b8 0f00 	cmp.w	r8, #0
 8026ade:	eb02 0907 	add.w	r9, r2, r7
 8026ae2:	db67      	blt.n	8026bb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8026ae4:	45c2      	cmp	sl, r8
 8026ae6:	dd65      	ble.n	8026bb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8026ae8:	2c00      	cmp	r4, #0
 8026aea:	db61      	blt.n	8026bb0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8026aec:	45a6      	cmp	lr, r4
 8026aee:	dd5f      	ble.n	8026bb0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8026af0:	5dd2      	ldrb	r2, [r2, r7]
 8026af2:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8026af6:	1c62      	adds	r2, r4, #1
 8026af8:	d45f      	bmi.n	8026bba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8026afa:	4596      	cmp	lr, r2
 8026afc:	dd5d      	ble.n	8026bba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8026afe:	2d00      	cmp	r5, #0
 8026b00:	d05b      	beq.n	8026bba <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8026b02:	f899 2001 	ldrb.w	r2, [r9, #1]
 8026b06:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8026b0a:	f118 0801 	adds.w	r8, r8, #1
 8026b0e:	d458      	bmi.n	8026bc2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8026b10:	45c2      	cmp	sl, r8
 8026b12:	dd56      	ble.n	8026bc2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8026b14:	2e00      	cmp	r6, #0
 8026b16:	d054      	beq.n	8026bc2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8026b18:	2c00      	cmp	r4, #0
 8026b1a:	db50      	blt.n	8026bbe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8026b1c:	45a6      	cmp	lr, r4
 8026b1e:	dd4e      	ble.n	8026bbe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8026b20:	f819 200e 	ldrb.w	r2, [r9, lr]
 8026b24:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8026b28:	3401      	adds	r4, #1
 8026b2a:	d407      	bmi.n	8026b3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8026b2c:	45a6      	cmp	lr, r4
 8026b2e:	dd05      	ble.n	8026b3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8026b30:	b125      	cbz	r5, 8026b3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8026b32:	44ce      	add	lr, r9
 8026b34:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8026b38:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8026b3c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8026b40:	fb15 f406 	smulbb	r4, r5, r6
 8026b44:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8026b48:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8026b4c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026b50:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8026b54:	ea43 0c0c 	orr.w	ip, r3, ip
 8026b58:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8026b5c:	f1c6 0310 	rsb	r3, r6, #16
 8026b60:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8026b64:	1b5b      	subs	r3, r3, r5
 8026b66:	ea4e 0707 	orr.w	r7, lr, r7
 8026b6a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8026b6e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8026b72:	437d      	muls	r5, r7
 8026b74:	fb03 5c0c 	mla	ip, r3, ip, r5
 8026b78:	0403      	lsls	r3, r0, #16
 8026b7a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8026b7e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026b82:	4318      	orrs	r0, r3
 8026b84:	0413      	lsls	r3, r2, #16
 8026b86:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8026b8a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026b8e:	4313      	orrs	r3, r2
 8026b90:	fb04 c000 	mla	r0, r4, r0, ip
 8026b94:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8026b98:	fb06 0003 	mla	r0, r6, r3, r0
 8026b9c:	0d43      	lsrs	r3, r0, #21
 8026b9e:	0940      	lsrs	r0, r0, #5
 8026ba0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026ba4:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026ba8:	4318      	orrs	r0, r3
 8026baa:	8008      	strh	r0, [r1, #0]
 8026bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026bb0:	4684      	mov	ip, r0
 8026bb2:	e7a0      	b.n	8026af6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 8026bb4:	4607      	mov	r7, r0
 8026bb6:	4684      	mov	ip, r0
 8026bb8:	e7a7      	b.n	8026b0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8026bba:	4607      	mov	r7, r0
 8026bbc:	e7a5      	b.n	8026b0a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8026bbe:	4602      	mov	r2, r0
 8026bc0:	e7b2      	b.n	8026b28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 8026bc2:	4602      	mov	r2, r0
 8026bc4:	e7ba      	b.n	8026b3c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

08026bc6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026bc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026bca:	b093      	sub	sp, #76	; 0x4c
 8026bcc:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8026bd0:	920f      	str	r2, [sp, #60]	; 0x3c
 8026bd2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8026bd4:	9108      	str	r1, [sp, #32]
 8026bd6:	9306      	str	r3, [sp, #24]
 8026bd8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8026bdc:	9010      	str	r0, [sp, #64]	; 0x40
 8026bde:	6850      	ldr	r0, [r2, #4]
 8026be0:	6812      	ldr	r2, [r2, #0]
 8026be2:	fb00 1303 	mla	r3, r0, r3, r1
 8026be6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8026bea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026bec:	681b      	ldr	r3, [r3, #0]
 8026bee:	9307      	str	r3, [sp, #28]
 8026bf0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026bf2:	685f      	ldr	r7, [r3, #4]
 8026bf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8026bf8:	3704      	adds	r7, #4
 8026bfa:	9b08      	ldr	r3, [sp, #32]
 8026bfc:	2b00      	cmp	r3, #0
 8026bfe:	dc03      	bgt.n	8026c08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8026c00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026c02:	2b00      	cmp	r3, #0
 8026c04:	f340 81b2 	ble.w	8026f6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8026c08:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026c0a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026c0e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026c12:	1e48      	subs	r0, r1, #1
 8026c14:	f102 3cff 	add.w	ip, r2, #4294967295
 8026c18:	9b06      	ldr	r3, [sp, #24]
 8026c1a:	2b00      	cmp	r3, #0
 8026c1c:	f340 80a9 	ble.w	8026d72 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8026c20:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026c24:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026c28:	d406      	bmi.n	8026c38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8026c2a:	4586      	cmp	lr, r0
 8026c2c:	da04      	bge.n	8026c38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8026c2e:	2b00      	cmp	r3, #0
 8026c30:	db02      	blt.n	8026c38 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8026c32:	4563      	cmp	r3, ip
 8026c34:	f2c0 809e 	blt.w	8026d74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8026c38:	f11e 0e01 	adds.w	lr, lr, #1
 8026c3c:	f100 808f 	bmi.w	8026d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8026c40:	4571      	cmp	r1, lr
 8026c42:	f2c0 808c 	blt.w	8026d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8026c46:	3301      	adds	r3, #1
 8026c48:	f100 8089 	bmi.w	8026d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8026c4c:	429a      	cmp	r2, r3
 8026c4e:	f2c0 8086 	blt.w	8026d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8026c52:	f8dd b018 	ldr.w	fp, [sp, #24]
 8026c56:	46c8      	mov	r8, r9
 8026c58:	f1bb 0f00 	cmp.w	fp, #0
 8026c5c:	f340 80a6 	ble.w	8026dac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8026c60:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8026c62:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026c64:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8026c68:	689b      	ldr	r3, [r3, #8]
 8026c6a:	1422      	asrs	r2, r4, #16
 8026c6c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8026c70:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8026c74:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8026c78:	f100 80e3 	bmi.w	8026e42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8026c7c:	f103 3aff 	add.w	sl, r3, #4294967295
 8026c80:	4552      	cmp	r2, sl
 8026c82:	f280 80de 	bge.w	8026e42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8026c86:	f1bc 0f00 	cmp.w	ip, #0
 8026c8a:	f2c0 80da 	blt.w	8026e42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8026c8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8026c92:	45d4      	cmp	ip, sl
 8026c94:	f280 80d5 	bge.w	8026e42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8026c98:	b21b      	sxth	r3, r3
 8026c9a:	fb0c 2203 	mla	r2, ip, r3, r2
 8026c9e:	9d07      	ldr	r5, [sp, #28]
 8026ca0:	eb05 0a02 	add.w	sl, r5, r2
 8026ca4:	5caa      	ldrb	r2, [r5, r2]
 8026ca6:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8026caa:	2800      	cmp	r0, #0
 8026cac:	f000 80c0 	beq.w	8026e30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8026cb0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8026cb4:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8026cb8:	920b      	str	r2, [sp, #44]	; 0x2c
 8026cba:	b151      	cbz	r1, 8026cd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8026cbc:	eb0a 0203 	add.w	r2, sl, r3
 8026cc0:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8026cc4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8026cca:	7853      	ldrb	r3, [r2, #1]
 8026ccc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026cd0:	930c      	str	r3, [sp, #48]	; 0x30
 8026cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026cd4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026cd6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8026cda:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026cde:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026ce2:	ea4c 0c03 	orr.w	ip, ip, r3
 8026ce6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026ce8:	041b      	lsls	r3, r3, #16
 8026cea:	fb10 f201 	smulbb	r2, r0, r1
 8026cee:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8026cf2:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026cf6:	10d2      	asrs	r2, r2, #3
 8026cf8:	432b      	orrs	r3, r5
 8026cfa:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8026cfe:	4353      	muls	r3, r2
 8026d00:	fb0a 330c 	mla	r3, sl, ip, r3
 8026d04:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8026d08:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026d0c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026d10:	ea4c 0e0e 	orr.w	lr, ip, lr
 8026d14:	f1c1 0c10 	rsb	ip, r1, #16
 8026d18:	ebac 0c00 	sub.w	ip, ip, r0
 8026d1c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8026d20:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8026d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026d26:	0418      	lsls	r0, r3, #16
 8026d28:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026d2c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026d30:	4318      	orrs	r0, r3
 8026d32:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8026d36:	fb02 c200 	mla	r2, r2, r0, ip
 8026d3a:	0d53      	lsrs	r3, r2, #21
 8026d3c:	0952      	lsrs	r2, r2, #5
 8026d3e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026d42:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026d46:	431a      	orrs	r2, r3
 8026d48:	f8a8 2000 	strh.w	r2, [r8]
 8026d4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026d4e:	441c      	add	r4, r3
 8026d50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026d52:	f108 0802 	add.w	r8, r8, #2
 8026d56:	441e      	add	r6, r3
 8026d58:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026d5c:	e77c      	b.n	8026c58 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026d5e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026d60:	441c      	add	r4, r3
 8026d62:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026d64:	441e      	add	r6, r3
 8026d66:	9b06      	ldr	r3, [sp, #24]
 8026d68:	3b01      	subs	r3, #1
 8026d6a:	9306      	str	r3, [sp, #24]
 8026d6c:	f109 0902 	add.w	r9, r9, #2
 8026d70:	e752      	b.n	8026c18 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8026d72:	d020      	beq.n	8026db6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8026d74:	9b06      	ldr	r3, [sp, #24]
 8026d76:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8026d78:	3b01      	subs	r3, #1
 8026d7a:	fb00 4003 	mla	r0, r0, r3, r4
 8026d7e:	1400      	asrs	r0, r0, #16
 8026d80:	f53f af67 	bmi.w	8026c52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026d84:	3901      	subs	r1, #1
 8026d86:	4288      	cmp	r0, r1
 8026d88:	f6bf af63 	bge.w	8026c52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026d8c:	9920      	ldr	r1, [sp, #128]	; 0x80
 8026d8e:	fb01 6303 	mla	r3, r1, r3, r6
 8026d92:	141b      	asrs	r3, r3, #16
 8026d94:	f53f af5d 	bmi.w	8026c52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026d98:	3a01      	subs	r2, #1
 8026d9a:	4293      	cmp	r3, r2
 8026d9c:	f6bf af59 	bge.w	8026c52 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8026da0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8026da4:	46ca      	mov	sl, r9
 8026da6:	f1b8 0f00 	cmp.w	r8, #0
 8026daa:	dc67      	bgt.n	8026e7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8026dac:	9b06      	ldr	r3, [sp, #24]
 8026dae:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8026db2:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8026db6:	9b08      	ldr	r3, [sp, #32]
 8026db8:	2b00      	cmp	r3, #0
 8026dba:	f340 80d7 	ble.w	8026f6c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8026dbe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026dc2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026dc6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8026dca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026dcc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026dd0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026dd4:	eeb0 6a62 	vmov.f32	s12, s5
 8026dd8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026ddc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8026de0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026de4:	ee16 4a10 	vmov	r4, s12
 8026de8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026dec:	eeb0 6a43 	vmov.f32	s12, s6
 8026df0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026df4:	ee12 2a90 	vmov	r2, s5
 8026df8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026dfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8026e00:	ee13 2a10 	vmov	r2, s6
 8026e04:	931f      	str	r3, [sp, #124]	; 0x7c
 8026e06:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026e08:	fb92 f3f3 	sdiv	r3, r2, r3
 8026e0c:	9320      	str	r3, [sp, #128]	; 0x80
 8026e0e:	9b08      	ldr	r3, [sp, #32]
 8026e10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026e12:	3b01      	subs	r3, #1
 8026e14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8026e18:	9308      	str	r3, [sp, #32]
 8026e1a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026e1c:	bf08      	it	eq
 8026e1e:	4613      	moveq	r3, r2
 8026e20:	ee16 6a10 	vmov	r6, s12
 8026e24:	9306      	str	r3, [sp, #24]
 8026e26:	eeb0 3a67 	vmov.f32	s6, s15
 8026e2a:	eef0 2a47 	vmov.f32	s5, s14
 8026e2e:	e6e4      	b.n	8026bfa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8026e30:	2900      	cmp	r1, #0
 8026e32:	f43f af4e 	beq.w	8026cd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8026e36:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8026e3a:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8026e40:	e747      	b.n	8026cd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8026e42:	f112 0a01 	adds.w	sl, r2, #1
 8026e46:	d481      	bmi.n	8026d4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8026e48:	4553      	cmp	r3, sl
 8026e4a:	f6ff af7f 	blt.w	8026d4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8026e4e:	f11c 0a01 	adds.w	sl, ip, #1
 8026e52:	f53f af7b 	bmi.w	8026d4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8026e56:	45d6      	cmp	lr, sl
 8026e58:	f6ff af78 	blt.w	8026d4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8026e5c:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8026e60:	b21b      	sxth	r3, r3
 8026e62:	fa0f f28e 	sxth.w	r2, lr
 8026e66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8026e6a:	9201      	str	r2, [sp, #4]
 8026e6c:	9300      	str	r3, [sp, #0]
 8026e6e:	9a07      	ldr	r2, [sp, #28]
 8026e70:	9810      	ldr	r0, [sp, #64]	; 0x40
 8026e72:	463b      	mov	r3, r7
 8026e74:	4641      	mov	r1, r8
 8026e76:	f7ff fe21 	bl	8026abc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 8026e7a:	e767      	b.n	8026d4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8026e7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026e7e:	9d07      	ldr	r5, [sp, #28]
 8026e80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8026e84:	1422      	asrs	r2, r4, #16
 8026e86:	1431      	asrs	r1, r6, #16
 8026e88:	fb03 2101 	mla	r1, r3, r1, r2
 8026e8c:	9a07      	ldr	r2, [sp, #28]
 8026e8e:	440a      	add	r2, r1
 8026e90:	5c69      	ldrb	r1, [r5, r1]
 8026e92:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 8026e96:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8026e9a:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8026e9e:	f1be 0f00 	cmp.w	lr, #0
 8026ea2:	d05c      	beq.n	8026f5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8026ea4:	f892 c001 	ldrb.w	ip, [r2, #1]
 8026ea8:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8026eac:	950d      	str	r5, [sp, #52]	; 0x34
 8026eae:	b150      	cbz	r0, 8026ec6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8026eb0:	eb02 0c03 	add.w	ip, r2, r3
 8026eb4:	5cd3      	ldrb	r3, [r2, r3]
 8026eb6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026eba:	930a      	str	r3, [sp, #40]	; 0x28
 8026ebc:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8026ec0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026ec4:	930e      	str	r3, [sp, #56]	; 0x38
 8026ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026ec8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8026eca:	fb1e f200 	smulbb	r2, lr, r0
 8026ece:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8026ed2:	10d2      	asrs	r2, r2, #3
 8026ed4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026ed8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026edc:	ea4c 0c03 	orr.w	ip, ip, r3
 8026ee0:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 8026ee4:	9311      	str	r3, [sp, #68]	; 0x44
 8026ee6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026ee8:	041b      	lsls	r3, r3, #16
 8026eea:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8026eee:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8026ef2:	ea43 030b 	orr.w	r3, r3, fp
 8026ef6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8026ef8:	4353      	muls	r3, r2
 8026efa:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026efe:	fb05 3c0c 	mla	ip, r5, ip, r3
 8026f02:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026f06:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8026f0a:	ea43 0b01 	orr.w	fp, r3, r1
 8026f0e:	f1c0 0110 	rsb	r1, r0, #16
 8026f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026f14:	eba1 0e0e 	sub.w	lr, r1, lr
 8026f18:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8026f1c:	fb0e cc0b 	mla	ip, lr, fp, ip
 8026f20:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 8026f24:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8026f28:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026f2c:	ea4b 0e0e 	orr.w	lr, fp, lr
 8026f30:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8026f34:	fb02 cc0e 	mla	ip, r2, lr, ip
 8026f38:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8026f3c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8026f40:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026f44:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026f48:	ea43 0c0c 	orr.w	ip, r3, ip
 8026f4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026f4e:	f82a cb02 	strh.w	ip, [sl], #2
 8026f52:	441c      	add	r4, r3
 8026f54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026f56:	f108 38ff 	add.w	r8, r8, #4294967295
 8026f5a:	441e      	add	r6, r3
 8026f5c:	e723      	b.n	8026da6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8026f5e:	2800      	cmp	r0, #0
 8026f60:	d0b1      	beq.n	8026ec6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8026f62:	5cd3      	ldrb	r3, [r2, r3]
 8026f64:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8026f68:	930a      	str	r3, [sp, #40]	; 0x28
 8026f6a:	e7ac      	b.n	8026ec6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8026f6c:	b013      	add	sp, #76	; 0x4c
 8026f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026f72 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 8026f72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f76:	880d      	ldrh	r5, [r1, #0]
 8026f78:	b087      	sub	sp, #28
 8026f7a:	10ef      	asrs	r7, r5, #3
 8026f7c:	ea4f 2a25 	mov.w	sl, r5, asr #8
 8026f80:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8026f84:	00ed      	lsls	r5, r5, #3
 8026f86:	9701      	str	r7, [sp, #4]
 8026f88:	b2ed      	uxtb	r5, r5
 8026f8a:	9502      	str	r5, [sp, #8]
 8026f8c:	9d01      	ldr	r5, [sp, #4]
 8026f8e:	9103      	str	r1, [sp, #12]
 8026f90:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8026f94:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 8026f98:	9902      	ldr	r1, [sp, #8]
 8026f9a:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8026f9e:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8026fa2:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8026fa6:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 8026faa:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 8026fae:	022d      	lsls	r5, r5, #8
 8026fb0:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8026fb4:	fb06 0709 	mla	r7, r6, r9, r0
 8026fb8:	430d      	orrs	r5, r1
 8026fba:	2e00      	cmp	r6, #0
 8026fbc:	eb02 0c07 	add.w	ip, r2, r7
 8026fc0:	9505      	str	r5, [sp, #20]
 8026fc2:	f2c0 80b6 	blt.w	8027132 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8026fc6:	45b3      	cmp	fp, r6
 8026fc8:	f340 80b3 	ble.w	8027132 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8026fcc:	2800      	cmp	r0, #0
 8026fce:	f2c0 80ae 	blt.w	802712e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8026fd2:	4581      	cmp	r9, r0
 8026fd4:	f340 80ab 	ble.w	802712e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8026fd8:	5dd7      	ldrb	r7, [r2, r7]
 8026fda:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8026fde:	441f      	add	r7, r3
 8026fe0:	1c42      	adds	r2, r0, #1
 8026fe2:	f100 80a9 	bmi.w	8027138 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8026fe6:	4591      	cmp	r9, r2
 8026fe8:	f340 80a6 	ble.w	8027138 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8026fec:	2c00      	cmp	r4, #0
 8026fee:	f000 80a3 	beq.w	8027138 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8026ff2:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8026ff6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026ffa:	441d      	add	r5, r3
 8026ffc:	3601      	adds	r6, #1
 8026ffe:	f100 809f 	bmi.w	8027140 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8027002:	45b3      	cmp	fp, r6
 8027004:	f340 809c 	ble.w	8027140 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8027008:	f1be 0f00 	cmp.w	lr, #0
 802700c:	f000 8098 	beq.w	8027140 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8027010:	2800      	cmp	r0, #0
 8027012:	f2c0 8093 	blt.w	802713c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8027016:	4581      	cmp	r9, r0
 8027018:	f340 8090 	ble.w	802713c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 802701c:	f81c 6009 	ldrb.w	r6, [ip, r9]
 8027020:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8027024:	441e      	add	r6, r3
 8027026:	3001      	adds	r0, #1
 8027028:	f100 808d 	bmi.w	8027146 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 802702c:	4581      	cmp	r9, r0
 802702e:	f340 808a 	ble.w	8027146 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8027032:	2c00      	cmp	r4, #0
 8027034:	f000 8087 	beq.w	8027146 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8027038:	44e1      	add	r9, ip
 802703a:	f899 2001 	ldrb.w	r2, [r9, #1]
 802703e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027042:	4413      	add	r3, r2
 8027044:	b2a4      	uxth	r4, r4
 8027046:	fa1f fe8e 	uxth.w	lr, lr
 802704a:	fb04 fb0e 	mul.w	fp, r4, lr
 802704e:	0124      	lsls	r4, r4, #4
 8027050:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 8027054:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 8027058:	eba4 040b 	sub.w	r4, r4, fp
 802705c:	fa1f f08e 	uxth.w	r0, lr
 8027060:	b2a2      	uxth	r2, r4
 8027062:	78ac      	ldrb	r4, [r5, #2]
 8027064:	f897 c002 	ldrb.w	ip, [r7, #2]
 8027068:	9901      	ldr	r1, [sp, #4]
 802706a:	eba9 0900 	sub.w	r9, r9, r0
 802706e:	fa1f f989 	uxth.w	r9, r9
 8027072:	4354      	muls	r4, r2
 8027074:	fb09 440c 	mla	r4, r9, ip, r4
 8027078:	f896 c002 	ldrb.w	ip, [r6, #2]
 802707c:	fb00 440c 	mla	r4, r0, ip, r4
 8027080:	f893 c002 	ldrb.w	ip, [r3, #2]
 8027084:	fa1f fe88 	uxth.w	lr, r8
 8027088:	ea6f 0808 	mvn.w	r8, r8
 802708c:	fa5f f888 	uxtb.w	r8, r8
 8027090:	fb0b 4c0c 	mla	ip, fp, ip, r4
 8027094:	fb1a fa08 	smulbb	sl, sl, r8
 8027098:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802709c:	fb0c ac0e 	mla	ip, ip, lr, sl
 80270a0:	f895 a001 	ldrb.w	sl, [r5, #1]
 80270a4:	787c      	ldrb	r4, [r7, #1]
 80270a6:	782d      	ldrb	r5, [r5, #0]
 80270a8:	783f      	ldrb	r7, [r7, #0]
 80270aa:	fb02 fa0a 	mul.w	sl, r2, sl
 80270ae:	fb09 aa04 	mla	sl, r9, r4, sl
 80270b2:	7874      	ldrb	r4, [r6, #1]
 80270b4:	436a      	muls	r2, r5
 80270b6:	7835      	ldrb	r5, [r6, #0]
 80270b8:	fb00 aa04 	mla	sl, r0, r4, sl
 80270bc:	fb09 2207 	mla	r2, r9, r7, r2
 80270c0:	785c      	ldrb	r4, [r3, #1]
 80270c2:	781b      	ldrb	r3, [r3, #0]
 80270c4:	fb00 2005 	mla	r0, r0, r5, r2
 80270c8:	fb0b a404 	mla	r4, fp, r4, sl
 80270cc:	fb0b 0b03 	mla	fp, fp, r3, r0
 80270d0:	9b02      	ldr	r3, [sp, #8]
 80270d2:	fb11 fa08 	smulbb	sl, r1, r8
 80270d6:	fa1f fc8c 	uxth.w	ip, ip
 80270da:	fb13 f808 	smulbb	r8, r3, r8
 80270de:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80270e2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80270e6:	fb04 a40e 	mla	r4, r4, lr, sl
 80270ea:	f10c 0301 	add.w	r3, ip, #1
 80270ee:	fb0b 8e0e 	mla	lr, fp, lr, r8
 80270f2:	fa1f fe8e 	uxth.w	lr, lr
 80270f6:	b2a4      	uxth	r4, r4
 80270f8:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80270fc:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 8027100:	f104 0a01 	add.w	sl, r4, #1
 8027104:	f10e 0c01 	add.w	ip, lr, #1
 8027108:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802710c:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8027110:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8027114:	0964      	lsrs	r4, r4, #5
 8027116:	ea4c 0c03 	orr.w	ip, ip, r3
 802711a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802711e:	9b03      	ldr	r3, [sp, #12]
 8027120:	ea4c 0c04 	orr.w	ip, ip, r4
 8027124:	f8a3 c000 	strh.w	ip, [r3]
 8027128:	b007      	add	sp, #28
 802712a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802712e:	af05      	add	r7, sp, #20
 8027130:	e756      	b.n	8026fe0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 8027132:	ad05      	add	r5, sp, #20
 8027134:	462f      	mov	r7, r5
 8027136:	e761      	b.n	8026ffc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8027138:	ad05      	add	r5, sp, #20
 802713a:	e75f      	b.n	8026ffc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 802713c:	ae05      	add	r6, sp, #20
 802713e:	e772      	b.n	8027026 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8027140:	ab05      	add	r3, sp, #20
 8027142:	461e      	mov	r6, r3
 8027144:	e77e      	b.n	8027044 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 8027146:	ab05      	add	r3, sp, #20
 8027148:	e77c      	b.n	8027044 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0802714a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802714a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802714e:	b095      	sub	sp, #84	; 0x54
 8027150:	9212      	str	r2, [sp, #72]	; 0x48
 8027152:	9309      	str	r3, [sp, #36]	; 0x24
 8027154:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8027156:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 802715a:	930f      	str	r3, [sp, #60]	; 0x3c
 802715c:	910e      	str	r1, [sp, #56]	; 0x38
 802715e:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 8027162:	9013      	str	r0, [sp, #76]	; 0x4c
 8027164:	6850      	ldr	r0, [r2, #4]
 8027166:	6812      	ldr	r2, [r2, #0]
 8027168:	fb00 1303 	mla	r3, r0, r3, r1
 802716c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027170:	930a      	str	r3, [sp, #40]	; 0x28
 8027172:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027174:	681b      	ldr	r3, [r3, #0]
 8027176:	930d      	str	r3, [sp, #52]	; 0x34
 8027178:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802717a:	685c      	ldr	r4, [r3, #4]
 802717c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802717e:	43db      	mvns	r3, r3
 8027180:	b2db      	uxtb	r3, r3
 8027182:	3404      	adds	r4, #4
 8027184:	930b      	str	r3, [sp, #44]	; 0x2c
 8027186:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8027188:	2b00      	cmp	r3, #0
 802718a:	dc03      	bgt.n	8027194 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802718c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802718e:	2b00      	cmp	r3, #0
 8027190:	f340 8255 	ble.w	802763e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8027194:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027196:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802719a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802719e:	1e48      	subs	r0, r1, #1
 80271a0:	1e55      	subs	r5, r2, #1
 80271a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80271a4:	2b00      	cmp	r3, #0
 80271a6:	f340 80f9 	ble.w	802739c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80271aa:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80271ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80271ae:	1436      	asrs	r6, r6, #16
 80271b0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80271b4:	d406      	bmi.n	80271c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80271b6:	4286      	cmp	r6, r0
 80271b8:	da04      	bge.n	80271c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80271ba:	2b00      	cmp	r3, #0
 80271bc:	db02      	blt.n	80271c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80271be:	42ab      	cmp	r3, r5
 80271c0:	f2c0 80ed 	blt.w	802739e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80271c4:	3601      	adds	r6, #1
 80271c6:	f100 80da 	bmi.w	802737e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80271ca:	42b1      	cmp	r1, r6
 80271cc:	f2c0 80d7 	blt.w	802737e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80271d0:	3301      	adds	r3, #1
 80271d2:	f100 80d4 	bmi.w	802737e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80271d6:	429a      	cmp	r2, r3
 80271d8:	f2c0 80d1 	blt.w	802737e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 80271dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80271de:	9311      	str	r3, [sp, #68]	; 0x44
 80271e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80271e2:	930c      	str	r3, [sp, #48]	; 0x30
 80271e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80271e6:	2b00      	cmp	r3, #0
 80271e8:	f340 80fa 	ble.w	80273e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80271ec:	9826      	ldr	r0, [sp, #152]	; 0x98
 80271ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80271f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80271f2:	68c6      	ldr	r6, [r0, #12]
 80271f4:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80271f6:	141d      	asrs	r5, r3, #16
 80271f8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80271fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80271fe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8027200:	1400      	asrs	r0, r0, #16
 8027202:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8027206:	6892      	ldr	r2, [r2, #8]
 8027208:	f100 813e 	bmi.w	8027488 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802720c:	1e57      	subs	r7, r2, #1
 802720e:	42b8      	cmp	r0, r7
 8027210:	f280 813a 	bge.w	8027488 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8027214:	2d00      	cmp	r5, #0
 8027216:	f2c0 8137 	blt.w	8027488 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802721a:	1e77      	subs	r7, r6, #1
 802721c:	42bd      	cmp	r5, r7
 802721e:	f280 8133 	bge.w	8027488 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8027222:	b212      	sxth	r2, r2
 8027224:	fb05 0002 	mla	r0, r5, r2, r0
 8027228:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802722a:	f815 a000 	ldrb.w	sl, [r5, r0]
 802722e:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 8027232:	182e      	adds	r6, r5, r0
 8027234:	eb04 050a 	add.w	r5, r4, sl
 8027238:	2b00      	cmp	r3, #0
 802723a:	f000 8117 	beq.w	802746c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802723e:	f896 c001 	ldrb.w	ip, [r6, #1]
 8027242:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8027246:	44a4      	add	ip, r4
 8027248:	2900      	cmp	r1, #0
 802724a:	f000 8117 	beq.w	802747c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 802724e:	18b0      	adds	r0, r6, r2
 8027250:	5cb2      	ldrb	r2, [r6, r2]
 8027252:	7840      	ldrb	r0, [r0, #1]
 8027254:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027258:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802725c:	4422      	add	r2, r4
 802725e:	4420      	add	r0, r4
 8027260:	b29b      	uxth	r3, r3
 8027262:	b289      	uxth	r1, r1
 8027264:	fb03 f901 	mul.w	r9, r3, r1
 8027268:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802726c:	011b      	lsls	r3, r3, #4
 802726e:	b289      	uxth	r1, r1
 8027270:	f89c 7002 	ldrb.w	r7, [ip, #2]
 8027274:	f895 b002 	ldrb.w	fp, [r5, #2]
 8027278:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802727a:	f814 a00a 	ldrb.w	sl, [r4, sl]
 802727e:	f8b6 e000 	ldrh.w	lr, [r6]
 8027282:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 8027286:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 802728a:	eba3 0309 	sub.w	r3, r3, r9
 802728e:	b29b      	uxth	r3, r3
 8027290:	eba8 0801 	sub.w	r8, r8, r1
 8027294:	fa1f f888 	uxth.w	r8, r8
 8027298:	435f      	muls	r7, r3
 802729a:	fb08 770b 	mla	r7, r8, fp, r7
 802729e:	f892 b002 	ldrb.w	fp, [r2, #2]
 80272a2:	9310      	str	r3, [sp, #64]	; 0x40
 80272a4:	fb01 770b 	mla	r7, r1, fp, r7
 80272a8:	f890 b002 	ldrb.w	fp, [r0, #2]
 80272ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80272ae:	fb09 770b 	mla	r7, r9, fp, r7
 80272b2:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 80272b6:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 80272ba:	fb1b fb03 	smulbb	fp, fp, r3
 80272be:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80272c2:	fb07 b706 	mla	r7, r7, r6, fp
 80272c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80272c8:	f895 b001 	ldrb.w	fp, [r5, #1]
 80272cc:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80272d0:	f89c c000 	ldrb.w	ip, [ip]
 80272d4:	435d      	muls	r5, r3
 80272d6:	fb08 550b 	mla	r5, r8, fp, r5
 80272da:	f892 b001 	ldrb.w	fp, [r2, #1]
 80272de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80272e0:	fb01 550b 	mla	r5, r1, fp, r5
 80272e4:	f890 b001 	ldrb.w	fp, [r0, #1]
 80272e8:	fb09 550b 	mla	r5, r9, fp, r5
 80272ec:	ea4f 0bee 	mov.w	fp, lr, asr #3
 80272f0:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80272f4:	fb1b fb03 	smulbb	fp, fp, r3
 80272f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80272fa:	fb03 f30c 	mul.w	r3, r3, ip
 80272fe:	f892 c000 	ldrb.w	ip, [r2]
 8027302:	fb08 330a 	mla	r3, r8, sl, r3
 8027306:	fb01 330c 	mla	r3, r1, ip, r3
 802730a:	f890 c000 	ldrb.w	ip, [r0]
 802730e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8027312:	fb09 3c0c 	mla	ip, r9, ip, r3
 8027316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027318:	fa5f fe8e 	uxtb.w	lr, lr
 802731c:	b2bf      	uxth	r7, r7
 802731e:	fb1e fe03 	smulbb	lr, lr, r3
 8027322:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8027326:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802732a:	fb05 b506 	mla	r5, r5, r6, fp
 802732e:	1c7b      	adds	r3, r7, #1
 8027330:	fb0c e606 	mla	r6, ip, r6, lr
 8027334:	b2ad      	uxth	r5, r5
 8027336:	b2b6      	uxth	r6, r6
 8027338:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802733c:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 8027340:	f105 0b01 	add.w	fp, r5, #1
 8027344:	1c77      	adds	r7, r6, #1
 8027346:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 802734a:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 802734e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8027352:	096d      	lsrs	r5, r5, #5
 8027354:	431f      	orrs	r7, r3
 8027356:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802735a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802735c:	433d      	orrs	r5, r7
 802735e:	801d      	strh	r5, [r3, #0]
 8027360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027362:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8027364:	3302      	adds	r3, #2
 8027366:	930c      	str	r3, [sp, #48]	; 0x30
 8027368:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802736a:	4413      	add	r3, r2
 802736c:	931f      	str	r3, [sp, #124]	; 0x7c
 802736e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8027370:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027372:	4413      	add	r3, r2
 8027374:	9320      	str	r3, [sp, #128]	; 0x80
 8027376:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8027378:	3b01      	subs	r3, #1
 802737a:	9311      	str	r3, [sp, #68]	; 0x44
 802737c:	e732      	b.n	80271e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802737e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8027380:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8027382:	4433      	add	r3, r6
 8027384:	931f      	str	r3, [sp, #124]	; 0x7c
 8027386:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8027388:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802738a:	4433      	add	r3, r6
 802738c:	9320      	str	r3, [sp, #128]	; 0x80
 802738e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027390:	3b01      	subs	r3, #1
 8027392:	9309      	str	r3, [sp, #36]	; 0x24
 8027394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027396:	3302      	adds	r3, #2
 8027398:	930a      	str	r3, [sp, #40]	; 0x28
 802739a:	e702      	b.n	80271a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802739c:	d027      	beq.n	80273ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 802739e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80273a0:	9821      	ldr	r0, [sp, #132]	; 0x84
 80273a2:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80273a4:	3b01      	subs	r3, #1
 80273a6:	fb00 5003 	mla	r0, r0, r3, r5
 80273aa:	1400      	asrs	r0, r0, #16
 80273ac:	f53f af16 	bmi.w	80271dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80273b0:	3901      	subs	r1, #1
 80273b2:	4288      	cmp	r0, r1
 80273b4:	f6bf af12 	bge.w	80271dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80273b8:	9922      	ldr	r1, [sp, #136]	; 0x88
 80273ba:	9820      	ldr	r0, [sp, #128]	; 0x80
 80273bc:	fb01 0303 	mla	r3, r1, r3, r0
 80273c0:	141b      	asrs	r3, r3, #16
 80273c2:	f53f af0b 	bmi.w	80271dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80273c6:	3a01      	subs	r2, #1
 80273c8:	4293      	cmp	r3, r2
 80273ca:	f6bf af07 	bge.w	80271dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80273ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80273d0:	9311      	str	r3, [sp, #68]	; 0x44
 80273d2:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80273d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80273d8:	930c      	str	r3, [sp, #48]	; 0x30
 80273da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80273dc:	2b00      	cmp	r3, #0
 80273de:	dc70      	bgt.n	80274c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80273e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80273e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80273e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80273e8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80273ec:	930a      	str	r3, [sp, #40]	; 0x28
 80273ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80273f0:	2b00      	cmp	r3, #0
 80273f2:	f340 8124 	ble.w	802763e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 80273f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80273fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80273fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027402:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8027404:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027408:	ee31 1a05 	vadd.f32	s2, s2, s10
 802740c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027410:	eef0 6a62 	vmov.f32	s13, s5
 8027414:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027418:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802741c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027420:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8027424:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027428:	eef0 6a43 	vmov.f32	s13, s6
 802742c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027430:	ee12 2a90 	vmov	r2, s5
 8027434:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027438:	fb92 f3f3 	sdiv	r3, r2, r3
 802743c:	ee13 2a10 	vmov	r2, s6
 8027440:	9321      	str	r3, [sp, #132]	; 0x84
 8027442:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8027444:	fb92 f3f3 	sdiv	r3, r2, r3
 8027448:	9322      	str	r3, [sp, #136]	; 0x88
 802744a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802744c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802744e:	3b01      	subs	r3, #1
 8027450:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027454:	930e      	str	r3, [sp, #56]	; 0x38
 8027456:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8027458:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 802745c:	bf08      	it	eq
 802745e:	4613      	moveq	r3, r2
 8027460:	9309      	str	r3, [sp, #36]	; 0x24
 8027462:	eeb0 3a67 	vmov.f32	s6, s15
 8027466:	eef0 2a47 	vmov.f32	s5, s14
 802746a:	e68c      	b.n	8027186 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 802746c:	b149      	cbz	r1, 8027482 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 802746e:	5cb2      	ldrb	r2, [r6, r2]
 8027470:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027474:	4422      	add	r2, r4
 8027476:	4628      	mov	r0, r5
 8027478:	46ac      	mov	ip, r5
 802747a:	e6f1      	b.n	8027260 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802747c:	4628      	mov	r0, r5
 802747e:	462a      	mov	r2, r5
 8027480:	e6ee      	b.n	8027260 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8027482:	4628      	mov	r0, r5
 8027484:	462a      	mov	r2, r5
 8027486:	e7f7      	b.n	8027478 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8027488:	1c47      	adds	r7, r0, #1
 802748a:	f53f af69 	bmi.w	8027360 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802748e:	42ba      	cmp	r2, r7
 8027490:	f6ff af66 	blt.w	8027360 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8027494:	1c6f      	adds	r7, r5, #1
 8027496:	f53f af63 	bmi.w	8027360 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 802749a:	42be      	cmp	r6, r7
 802749c:	f6ff af60 	blt.w	8027360 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80274a0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80274a2:	9002      	str	r0, [sp, #8]
 80274a4:	b236      	sxth	r6, r6
 80274a6:	b212      	sxth	r2, r2
 80274a8:	e9cd 1705 	strd	r1, r7, [sp, #20]
 80274ac:	e9cd 5303 	strd	r5, r3, [sp, #12]
 80274b0:	9200      	str	r2, [sp, #0]
 80274b2:	9601      	str	r6, [sp, #4]
 80274b4:	4623      	mov	r3, r4
 80274b6:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80274ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80274bc:	f7ff fd59 	bl	8026f72 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 80274c0:	e74e      	b.n	8027360 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 80274c2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80274c4:	9820      	ldr	r0, [sp, #128]	; 0x80
 80274c6:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80274c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80274ca:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80274ce:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80274d0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80274d4:	142d      	asrs	r5, r5, #16
 80274d6:	1400      	asrs	r0, r0, #16
 80274d8:	fb02 5000 	mla	r0, r2, r0, r5
 80274dc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80274de:	f815 9000 	ldrb.w	r9, [r5, r0]
 80274e2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80274e6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80274ea:	182e      	adds	r6, r5, r0
 80274ec:	eb04 0509 	add.w	r5, r4, r9
 80274f0:	2b00      	cmp	r3, #0
 80274f2:	f000 8096 	beq.w	8027622 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80274f6:	7877      	ldrb	r7, [r6, #1]
 80274f8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80274fc:	4427      	add	r7, r4
 80274fe:	2900      	cmp	r1, #0
 8027500:	f000 8097 	beq.w	8027632 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8027504:	18b0      	adds	r0, r6, r2
 8027506:	5cb2      	ldrb	r2, [r6, r2]
 8027508:	7840      	ldrb	r0, [r0, #1]
 802750a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802750e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027512:	4422      	add	r2, r4
 8027514:	4420      	add	r0, r4
 8027516:	b29b      	uxth	r3, r3
 8027518:	b289      	uxth	r1, r1
 802751a:	fb03 f801 	mul.w	r8, r3, r1
 802751e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8027520:	f895 b002 	ldrb.w	fp, [r5, #2]
 8027524:	f8b6 c000 	ldrh.w	ip, [r6]
 8027528:	78be      	ldrb	r6, [r7, #2]
 802752a:	f814 9009 	ldrb.w	r9, [r4, r9]
 802752e:	011b      	lsls	r3, r3, #4
 8027530:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8027534:	b289      	uxth	r1, r1
 8027536:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802753a:	eba3 0308 	sub.w	r3, r3, r8
 802753e:	b29b      	uxth	r3, r3
 8027540:	ebae 0e01 	sub.w	lr, lr, r1
 8027544:	fa1f fe8e 	uxth.w	lr, lr
 8027548:	435e      	muls	r6, r3
 802754a:	fb0e 660b 	mla	r6, lr, fp, r6
 802754e:	f892 b002 	ldrb.w	fp, [r2, #2]
 8027552:	9310      	str	r3, [sp, #64]	; 0x40
 8027554:	fb01 660b 	mla	r6, r1, fp, r6
 8027558:	f890 b002 	ldrb.w	fp, [r0, #2]
 802755c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802755e:	fb08 660b 	mla	r6, r8, fp, r6
 8027562:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8027566:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 802756a:	fb1b fb03 	smulbb	fp, fp, r3
 802756e:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8027572:	fb06 b60a 	mla	r6, r6, sl, fp
 8027576:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8027578:	f895 b001 	ldrb.w	fp, [r5, #1]
 802757c:	787d      	ldrb	r5, [r7, #1]
 802757e:	783f      	ldrb	r7, [r7, #0]
 8027580:	435d      	muls	r5, r3
 8027582:	fb0e 550b 	mla	r5, lr, fp, r5
 8027586:	f892 b001 	ldrb.w	fp, [r2, #1]
 802758a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802758c:	fb01 550b 	mla	r5, r1, fp, r5
 8027590:	f890 b001 	ldrb.w	fp, [r0, #1]
 8027594:	fb08 550b 	mla	r5, r8, fp, r5
 8027598:	ea4f 0bec 	mov.w	fp, ip, asr #3
 802759c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 80275a0:	fb1b fb03 	smulbb	fp, fp, r3
 80275a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80275a6:	437b      	muls	r3, r7
 80275a8:	7817      	ldrb	r7, [r2, #0]
 80275aa:	fb0e 3309 	mla	r3, lr, r9, r3
 80275ae:	fb01 3307 	mla	r3, r1, r7, r3
 80275b2:	7807      	ldrb	r7, [r0, #0]
 80275b4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80275b8:	fb08 3707 	mla	r7, r8, r7, r3
 80275bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80275be:	fa5f fc8c 	uxtb.w	ip, ip
 80275c2:	fb1c fc03 	smulbb	ip, ip, r3
 80275c6:	f3c5 2507 	ubfx	r5, r5, #8, #8
 80275ca:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80275ce:	fb05 b50a 	mla	r5, r5, sl, fp
 80275d2:	fb07 c70a 	mla	r7, r7, sl, ip
 80275d6:	b2b6      	uxth	r6, r6
 80275d8:	b2ad      	uxth	r5, r5
 80275da:	b2bf      	uxth	r7, r7
 80275dc:	1c73      	adds	r3, r6, #1
 80275de:	1c7a      	adds	r2, r7, #1
 80275e0:	f105 0b01 	add.w	fp, r5, #1
 80275e4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80275e8:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80275ec:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80275f0:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80275f4:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80275f8:	096d      	lsrs	r5, r5, #5
 80275fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80275fc:	4316      	orrs	r6, r2
 80275fe:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8027602:	432e      	orrs	r6, r5
 8027604:	f823 6b02 	strh.w	r6, [r3], #2
 8027608:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802760a:	930c      	str	r3, [sp, #48]	; 0x30
 802760c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802760e:	4413      	add	r3, r2
 8027610:	931f      	str	r3, [sp, #124]	; 0x7c
 8027612:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8027614:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027616:	4413      	add	r3, r2
 8027618:	9320      	str	r3, [sp, #128]	; 0x80
 802761a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802761c:	3b01      	subs	r3, #1
 802761e:	9311      	str	r3, [sp, #68]	; 0x44
 8027620:	e6db      	b.n	80273da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8027622:	b149      	cbz	r1, 8027638 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8027624:	5cb2      	ldrb	r2, [r6, r2]
 8027626:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802762a:	4422      	add	r2, r4
 802762c:	4628      	mov	r0, r5
 802762e:	462f      	mov	r7, r5
 8027630:	e771      	b.n	8027516 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8027632:	4628      	mov	r0, r5
 8027634:	462a      	mov	r2, r5
 8027636:	e76e      	b.n	8027516 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8027638:	4628      	mov	r0, r5
 802763a:	462a      	mov	r2, r5
 802763c:	e7f7      	b.n	802762e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802763e:	b015      	add	sp, #84	; 0x54
 8027640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027644 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8027644:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027648:	880f      	ldrh	r7, [r1, #0]
 802764a:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 802764e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8027652:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8027656:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802765a:	023c      	lsls	r4, r7, #8
 802765c:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 8027660:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 8027664:	017c      	lsls	r4, r7, #5
 8027666:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 802766a:	00ff      	lsls	r7, r7, #3
 802766c:	ea4b 0404 	orr.w	r4, fp, r4
 8027670:	b2ff      	uxtb	r7, r7
 8027672:	fb05 ca0e 	mla	sl, r5, lr, ip
 8027676:	4327      	orrs	r7, r4
 8027678:	2d00      	cmp	r5, #0
 802767a:	eb02 080a 	add.w	r8, r2, sl
 802767e:	9701      	str	r7, [sp, #4]
 8027680:	db7e      	blt.n	8027780 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8027682:	45a9      	cmp	r9, r5
 8027684:	dd7c      	ble.n	8027780 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8027686:	f1bc 0f00 	cmp.w	ip, #0
 802768a:	db77      	blt.n	802777c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 802768c:	45e6      	cmp	lr, ip
 802768e:	dd75      	ble.n	802777c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8027690:	f812 700a 	ldrb.w	r7, [r2, sl]
 8027694:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8027698:	441f      	add	r7, r3
 802769a:	f11c 0201 	adds.w	r2, ip, #1
 802769e:	d472      	bmi.n	8027786 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80276a0:	4596      	cmp	lr, r2
 80276a2:	dd70      	ble.n	8027786 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80276a4:	2800      	cmp	r0, #0
 80276a6:	d06e      	beq.n	8027786 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 80276a8:	f898 4001 	ldrb.w	r4, [r8, #1]
 80276ac:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80276b0:	441c      	add	r4, r3
 80276b2:	3501      	adds	r5, #1
 80276b4:	d46b      	bmi.n	802778e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80276b6:	45a9      	cmp	r9, r5
 80276b8:	dd69      	ble.n	802778e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80276ba:	2e00      	cmp	r6, #0
 80276bc:	d067      	beq.n	802778e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 80276be:	f1bc 0f00 	cmp.w	ip, #0
 80276c2:	db62      	blt.n	802778a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 80276c4:	45e6      	cmp	lr, ip
 80276c6:	dd60      	ble.n	802778a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 80276c8:	f818 500e 	ldrb.w	r5, [r8, lr]
 80276cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80276d0:	441d      	add	r5, r3
 80276d2:	f11c 0201 	adds.w	r2, ip, #1
 80276d6:	d45d      	bmi.n	8027794 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80276d8:	4596      	cmp	lr, r2
 80276da:	dd5b      	ble.n	8027794 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80276dc:	2800      	cmp	r0, #0
 80276de:	d059      	beq.n	8027794 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 80276e0:	44c6      	add	lr, r8
 80276e2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80276e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80276ea:	4413      	add	r3, r2
 80276ec:	b280      	uxth	r0, r0
 80276ee:	b2b2      	uxth	r2, r6
 80276f0:	fb00 f602 	mul.w	r6, r0, r2
 80276f4:	0100      	lsls	r0, r0, #4
 80276f6:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80276fa:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 80276fe:	1b80      	subs	r0, r0, r6
 8027700:	fa1f fc82 	uxth.w	ip, r2
 8027704:	b282      	uxth	r2, r0
 8027706:	78a0      	ldrb	r0, [r4, #2]
 8027708:	f897 e002 	ldrb.w	lr, [r7, #2]
 802770c:	f897 9000 	ldrb.w	r9, [r7]
 8027710:	787f      	ldrb	r7, [r7, #1]
 8027712:	eba8 080c 	sub.w	r8, r8, ip
 8027716:	fa1f f888 	uxth.w	r8, r8
 802771a:	4350      	muls	r0, r2
 802771c:	fb08 0e0e 	mla	lr, r8, lr, r0
 8027720:	78a8      	ldrb	r0, [r5, #2]
 8027722:	fb0c e000 	mla	r0, ip, r0, lr
 8027726:	f893 e002 	ldrb.w	lr, [r3, #2]
 802772a:	fb06 0e0e 	mla	lr, r6, lr, r0
 802772e:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 8027732:	f894 e000 	ldrb.w	lr, [r4]
 8027736:	fb02 fe0e 	mul.w	lr, r2, lr
 802773a:	fb08 e909 	mla	r9, r8, r9, lr
 802773e:	f895 e000 	ldrb.w	lr, [r5]
 8027742:	fb0c 990e 	mla	r9, ip, lr, r9
 8027746:	f893 e000 	ldrb.w	lr, [r3]
 802774a:	785b      	ldrb	r3, [r3, #1]
 802774c:	fb06 9e0e 	mla	lr, r6, lr, r9
 8027750:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8027754:	ea4e 0e00 	orr.w	lr, lr, r0
 8027758:	7860      	ldrb	r0, [r4, #1]
 802775a:	4350      	muls	r0, r2
 802775c:	786a      	ldrb	r2, [r5, #1]
 802775e:	fb08 0007 	mla	r0, r8, r7, r0
 8027762:	fb0c 0202 	mla	r2, ip, r2, r0
 8027766:	fb06 2303 	mla	r3, r6, r3, r2
 802776a:	095b      	lsrs	r3, r3, #5
 802776c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027770:	ea4e 0303 	orr.w	r3, lr, r3
 8027774:	800b      	strh	r3, [r1, #0]
 8027776:	b003      	add	sp, #12
 8027778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802777c:	af01      	add	r7, sp, #4
 802777e:	e78c      	b.n	802769a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8027780:	ac01      	add	r4, sp, #4
 8027782:	4627      	mov	r7, r4
 8027784:	e795      	b.n	80276b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8027786:	ac01      	add	r4, sp, #4
 8027788:	e793      	b.n	80276b2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 802778a:	ad01      	add	r5, sp, #4
 802778c:	e7a1      	b.n	80276d2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 802778e:	ab01      	add	r3, sp, #4
 8027790:	461d      	mov	r5, r3
 8027792:	e7ab      	b.n	80276ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8027794:	ab01      	add	r3, sp, #4
 8027796:	e7a9      	b.n	80276ec <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08027798 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802779c:	b08f      	sub	sp, #60	; 0x3c
 802779e:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 80277a2:	920c      	str	r2, [sp, #48]	; 0x30
 80277a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80277a6:	910a      	str	r1, [sp, #40]	; 0x28
 80277a8:	9306      	str	r3, [sp, #24]
 80277aa:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 80277ae:	900d      	str	r0, [sp, #52]	; 0x34
 80277b0:	6850      	ldr	r0, [r2, #4]
 80277b2:	6812      	ldr	r2, [r2, #0]
 80277b4:	fb00 1303 	mla	r3, r0, r3, r1
 80277b8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80277bc:	9307      	str	r3, [sp, #28]
 80277be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80277c0:	681b      	ldr	r3, [r3, #0]
 80277c2:	9308      	str	r3, [sp, #32]
 80277c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80277c6:	685c      	ldr	r4, [r3, #4]
 80277c8:	3404      	adds	r4, #4
 80277ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80277cc:	2b00      	cmp	r3, #0
 80277ce:	dc03      	bgt.n	80277d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80277d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80277d2:	2b00      	cmp	r3, #0
 80277d4:	f340 81d6 	ble.w	8027b84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 80277d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80277da:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80277de:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80277e2:	1e48      	subs	r0, r1, #1
 80277e4:	1e56      	subs	r6, r2, #1
 80277e6:	9b06      	ldr	r3, [sp, #24]
 80277e8:	2b00      	cmp	r3, #0
 80277ea:	f340 80b7 	ble.w	802795c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 80277ee:	ea5f 472b 	movs.w	r7, fp, asr #16
 80277f2:	ea4f 4325 	mov.w	r3, r5, asr #16
 80277f6:	d406      	bmi.n	8027806 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80277f8:	4287      	cmp	r7, r0
 80277fa:	da04      	bge.n	8027806 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80277fc:	2b00      	cmp	r3, #0
 80277fe:	db02      	blt.n	8027806 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8027800:	42b3      	cmp	r3, r6
 8027802:	f2c0 80ac 	blt.w	802795e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8027806:	3701      	adds	r7, #1
 8027808:	f100 809d 	bmi.w	8027946 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 802780c:	42b9      	cmp	r1, r7
 802780e:	f2c0 809a 	blt.w	8027946 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8027812:	3301      	adds	r3, #1
 8027814:	f100 8097 	bmi.w	8027946 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8027818:	429a      	cmp	r2, r3
 802781a:	f2c0 8094 	blt.w	8027946 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 802781e:	9b06      	ldr	r3, [sp, #24]
 8027820:	930b      	str	r3, [sp, #44]	; 0x2c
 8027822:	9b07      	ldr	r3, [sp, #28]
 8027824:	9309      	str	r3, [sp, #36]	; 0x24
 8027826:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027828:	2b00      	cmp	r3, #0
 802782a:	f340 80b5 	ble.w	8027998 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802782e:	9820      	ldr	r0, [sp, #128]	; 0x80
 8027830:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8027832:	68c7      	ldr	r7, [r0, #12]
 8027834:	6892      	ldr	r2, [r2, #8]
 8027836:	ea5f 402b 	movs.w	r0, fp, asr #16
 802783a:	ea4f 4625 	mov.w	r6, r5, asr #16
 802783e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8027842:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8027846:	f100 80fb 	bmi.w	8027a40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 802784a:	f102 3cff 	add.w	ip, r2, #4294967295
 802784e:	4560      	cmp	r0, ip
 8027850:	f280 80f6 	bge.w	8027a40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8027854:	2e00      	cmp	r6, #0
 8027856:	f2c0 80f3 	blt.w	8027a40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 802785a:	f107 3cff 	add.w	ip, r7, #4294967295
 802785e:	4566      	cmp	r6, ip
 8027860:	f280 80ee 	bge.w	8027a40 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8027864:	b212      	sxth	r2, r2
 8027866:	fb06 0002 	mla	r0, r6, r2, r0
 802786a:	9e08      	ldr	r6, [sp, #32]
 802786c:	1837      	adds	r7, r6, r0
 802786e:	5c30      	ldrb	r0, [r6, r0]
 8027870:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8027874:	eb04 0c08 	add.w	ip, r4, r8
 8027878:	2b00      	cmp	r3, #0
 802787a:	f000 80d3 	beq.w	8027a24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802787e:	787e      	ldrb	r6, [r7, #1]
 8027880:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8027884:	4426      	add	r6, r4
 8027886:	2900      	cmp	r1, #0
 8027888:	f000 80d4 	beq.w	8027a34 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 802788c:	18b8      	adds	r0, r7, r2
 802788e:	5cba      	ldrb	r2, [r7, r2]
 8027890:	7840      	ldrb	r0, [r0, #1]
 8027892:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027896:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802789a:	4422      	add	r2, r4
 802789c:	4420      	add	r0, r4
 802789e:	b29b      	uxth	r3, r3
 80278a0:	b289      	uxth	r1, r1
 80278a2:	fb03 f901 	mul.w	r9, r3, r1
 80278a6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80278aa:	011b      	lsls	r3, r3, #4
 80278ac:	b289      	uxth	r1, r1
 80278ae:	78b7      	ldrb	r7, [r6, #2]
 80278b0:	f89c a002 	ldrb.w	sl, [ip, #2]
 80278b4:	f89c c001 	ldrb.w	ip, [ip, #1]
 80278b8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80278bc:	eba3 0309 	sub.w	r3, r3, r9
 80278c0:	b29b      	uxth	r3, r3
 80278c2:	ebae 0e01 	sub.w	lr, lr, r1
 80278c6:	fa1f fe8e 	uxth.w	lr, lr
 80278ca:	435f      	muls	r7, r3
 80278cc:	fb0e 770a 	mla	r7, lr, sl, r7
 80278d0:	f892 a002 	ldrb.w	sl, [r2, #2]
 80278d4:	fb01 770a 	mla	r7, r1, sl, r7
 80278d8:	f890 a002 	ldrb.w	sl, [r0, #2]
 80278dc:	fb09 7a0a 	mla	sl, r9, sl, r7
 80278e0:	f814 7008 	ldrb.w	r7, [r4, r8]
 80278e4:	f896 8000 	ldrb.w	r8, [r6]
 80278e8:	7876      	ldrb	r6, [r6, #1]
 80278ea:	fb03 f808 	mul.w	r8, r3, r8
 80278ee:	fb0e 8807 	mla	r8, lr, r7, r8
 80278f2:	7817      	ldrb	r7, [r2, #0]
 80278f4:	fb01 8807 	mla	r8, r1, r7, r8
 80278f8:	7807      	ldrb	r7, [r0, #0]
 80278fa:	fb09 8707 	mla	r7, r9, r7, r8
 80278fe:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8027902:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8027906:	ea47 070a 	orr.w	r7, r7, sl
 802790a:	4373      	muls	r3, r6
 802790c:	f892 a001 	ldrb.w	sl, [r2, #1]
 8027910:	fb0e 330c 	mla	r3, lr, ip, r3
 8027914:	fb01 310a 	mla	r1, r1, sl, r3
 8027918:	f890 a001 	ldrb.w	sl, [r0, #1]
 802791c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802791e:	fb09 1a0a 	mla	sl, r9, sl, r1
 8027922:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8027926:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 802792a:	ea47 070a 	orr.w	r7, r7, sl
 802792e:	801f      	strh	r7, [r3, #0]
 8027930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027932:	3302      	adds	r3, #2
 8027934:	9309      	str	r3, [sp, #36]	; 0x24
 8027936:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027938:	449b      	add	fp, r3
 802793a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802793c:	441d      	add	r5, r3
 802793e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027940:	3b01      	subs	r3, #1
 8027942:	930b      	str	r3, [sp, #44]	; 0x2c
 8027944:	e76f      	b.n	8027826 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027946:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027948:	449b      	add	fp, r3
 802794a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802794c:	441d      	add	r5, r3
 802794e:	9b06      	ldr	r3, [sp, #24]
 8027950:	3b01      	subs	r3, #1
 8027952:	9306      	str	r3, [sp, #24]
 8027954:	9b07      	ldr	r3, [sp, #28]
 8027956:	3302      	adds	r3, #2
 8027958:	9307      	str	r3, [sp, #28]
 802795a:	e744      	b.n	80277e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 802795c:	d023      	beq.n	80279a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802795e:	9b06      	ldr	r3, [sp, #24]
 8027960:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8027962:	3b01      	subs	r3, #1
 8027964:	fb00 b003 	mla	r0, r0, r3, fp
 8027968:	1400      	asrs	r0, r0, #16
 802796a:	f53f af58 	bmi.w	802781e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802796e:	3901      	subs	r1, #1
 8027970:	4288      	cmp	r0, r1
 8027972:	f6bf af54 	bge.w	802781e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8027976:	991c      	ldr	r1, [sp, #112]	; 0x70
 8027978:	fb01 5303 	mla	r3, r1, r3, r5
 802797c:	141b      	asrs	r3, r3, #16
 802797e:	f53f af4e 	bmi.w	802781e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8027982:	3a01      	subs	r2, #1
 8027984:	4293      	cmp	r3, r2
 8027986:	f6bf af4a 	bge.w	802781e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802798a:	9b06      	ldr	r3, [sp, #24]
 802798c:	9309      	str	r3, [sp, #36]	; 0x24
 802798e:	9b07      	ldr	r3, [sp, #28]
 8027990:	930b      	str	r3, [sp, #44]	; 0x2c
 8027992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027994:	2b00      	cmp	r3, #0
 8027996:	dc70      	bgt.n	8027a7a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8027998:	9b06      	ldr	r3, [sp, #24]
 802799a:	9a07      	ldr	r2, [sp, #28]
 802799c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80279a0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80279a4:	9307      	str	r3, [sp, #28]
 80279a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80279a8:	2b00      	cmp	r3, #0
 80279aa:	f340 80eb 	ble.w	8027b84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 80279ae:	ee30 0a04 	vadd.f32	s0, s0, s8
 80279b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80279b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80279ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80279bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80279c0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80279c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80279c8:	eef0 6a62 	vmov.f32	s13, s5
 80279cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80279d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80279d4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80279d8:	ee16 ba90 	vmov	fp, s13
 80279dc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80279e0:	eef0 6a43 	vmov.f32	s13, s6
 80279e4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80279e8:	ee12 2a90 	vmov	r2, s5
 80279ec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80279f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80279f4:	ee13 2a10 	vmov	r2, s6
 80279f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80279fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80279fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8027a00:	931c      	str	r3, [sp, #112]	; 0x70
 8027a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027a04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027a06:	3b01      	subs	r3, #1
 8027a08:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027a0c:	930a      	str	r3, [sp, #40]	; 0x28
 8027a0e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027a10:	bf08      	it	eq
 8027a12:	4613      	moveq	r3, r2
 8027a14:	ee16 5a90 	vmov	r5, s13
 8027a18:	9306      	str	r3, [sp, #24]
 8027a1a:	eeb0 3a67 	vmov.f32	s6, s15
 8027a1e:	eef0 2a47 	vmov.f32	s5, s14
 8027a22:	e6d2      	b.n	80277ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8027a24:	b149      	cbz	r1, 8027a3a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8027a26:	5cba      	ldrb	r2, [r7, r2]
 8027a28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027a2c:	4422      	add	r2, r4
 8027a2e:	4660      	mov	r0, ip
 8027a30:	4666      	mov	r6, ip
 8027a32:	e734      	b.n	802789e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8027a34:	4660      	mov	r0, ip
 8027a36:	4662      	mov	r2, ip
 8027a38:	e731      	b.n	802789e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8027a3a:	4660      	mov	r0, ip
 8027a3c:	4662      	mov	r2, ip
 8027a3e:	e7f7      	b.n	8027a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8027a40:	f110 0c01 	adds.w	ip, r0, #1
 8027a44:	f53f af74 	bmi.w	8027930 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8027a48:	4562      	cmp	r2, ip
 8027a4a:	f6ff af71 	blt.w	8027930 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8027a4e:	f116 0c01 	adds.w	ip, r6, #1
 8027a52:	f53f af6d 	bmi.w	8027930 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8027a56:	4567      	cmp	r7, ip
 8027a58:	f6ff af6a 	blt.w	8027930 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8027a5c:	b23f      	sxth	r7, r7
 8027a5e:	b212      	sxth	r2, r2
 8027a60:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8027a64:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8027a68:	9200      	str	r2, [sp, #0]
 8027a6a:	9701      	str	r7, [sp, #4]
 8027a6c:	4623      	mov	r3, r4
 8027a6e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8027a72:	980d      	ldr	r0, [sp, #52]	; 0x34
 8027a74:	f7ff fde6 	bl	8027644 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8027a78:	e75a      	b.n	8027930 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8027a7a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8027a7c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8027a80:	ea4f 462b 	mov.w	r6, fp, asr #16
 8027a84:	1428      	asrs	r0, r5, #16
 8027a86:	fb02 6000 	mla	r0, r2, r0, r6
 8027a8a:	9e08      	ldr	r6, [sp, #32]
 8027a8c:	f816 8000 	ldrb.w	r8, [r6, r0]
 8027a90:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8027a94:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8027a98:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8027a9c:	1837      	adds	r7, r6, r0
 8027a9e:	eb04 0c08 	add.w	ip, r4, r8
 8027aa2:	2b00      	cmp	r3, #0
 8027aa4:	d060      	beq.n	8027b68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 8027aa6:	787e      	ldrb	r6, [r7, #1]
 8027aa8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8027aac:	4426      	add	r6, r4
 8027aae:	2900      	cmp	r1, #0
 8027ab0:	d062      	beq.n	8027b78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 8027ab2:	18b8      	adds	r0, r7, r2
 8027ab4:	5cba      	ldrb	r2, [r7, r2]
 8027ab6:	7840      	ldrb	r0, [r0, #1]
 8027ab8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027abc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8027ac0:	4422      	add	r2, r4
 8027ac2:	4420      	add	r0, r4
 8027ac4:	b29b      	uxth	r3, r3
 8027ac6:	b289      	uxth	r1, r1
 8027ac8:	fb03 f901 	mul.w	r9, r3, r1
 8027acc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8027ad0:	011b      	lsls	r3, r3, #4
 8027ad2:	b289      	uxth	r1, r1
 8027ad4:	78b7      	ldrb	r7, [r6, #2]
 8027ad6:	f89c a002 	ldrb.w	sl, [ip, #2]
 8027ada:	f89c c001 	ldrb.w	ip, [ip, #1]
 8027ade:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8027ae2:	eba3 0309 	sub.w	r3, r3, r9
 8027ae6:	b29b      	uxth	r3, r3
 8027ae8:	ebae 0e01 	sub.w	lr, lr, r1
 8027aec:	fa1f fe8e 	uxth.w	lr, lr
 8027af0:	435f      	muls	r7, r3
 8027af2:	fb0e 770a 	mla	r7, lr, sl, r7
 8027af6:	f892 a002 	ldrb.w	sl, [r2, #2]
 8027afa:	fb01 770a 	mla	r7, r1, sl, r7
 8027afe:	f890 a002 	ldrb.w	sl, [r0, #2]
 8027b02:	fb09 7a0a 	mla	sl, r9, sl, r7
 8027b06:	f814 7008 	ldrb.w	r7, [r4, r8]
 8027b0a:	f896 8000 	ldrb.w	r8, [r6]
 8027b0e:	7876      	ldrb	r6, [r6, #1]
 8027b10:	fb03 f808 	mul.w	r8, r3, r8
 8027b14:	fb0e 8807 	mla	r8, lr, r7, r8
 8027b18:	7817      	ldrb	r7, [r2, #0]
 8027b1a:	fb01 8807 	mla	r8, r1, r7, r8
 8027b1e:	7807      	ldrb	r7, [r0, #0]
 8027b20:	fb09 8707 	mla	r7, r9, r7, r8
 8027b24:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8027b28:	4373      	muls	r3, r6
 8027b2a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8027b2e:	7856      	ldrb	r6, [r2, #1]
 8027b30:	ea47 070a 	orr.w	r7, r7, sl
 8027b34:	fb0e 330c 	mla	r3, lr, ip, r3
 8027b38:	f890 a001 	ldrb.w	sl, [r0, #1]
 8027b3c:	fb01 3306 	mla	r3, r1, r6, r3
 8027b40:	fb09 3a0a 	mla	sl, r9, sl, r3
 8027b44:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8027b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027b4a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8027b4e:	ea47 070a 	orr.w	r7, r7, sl
 8027b52:	f823 7b02 	strh.w	r7, [r3], #2
 8027b56:	930b      	str	r3, [sp, #44]	; 0x2c
 8027b58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027b5a:	449b      	add	fp, r3
 8027b5c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027b5e:	441d      	add	r5, r3
 8027b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b62:	3b01      	subs	r3, #1
 8027b64:	9309      	str	r3, [sp, #36]	; 0x24
 8027b66:	e714      	b.n	8027992 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8027b68:	b149      	cbz	r1, 8027b7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8027b6a:	5cba      	ldrb	r2, [r7, r2]
 8027b6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8027b70:	4422      	add	r2, r4
 8027b72:	4660      	mov	r0, ip
 8027b74:	4666      	mov	r6, ip
 8027b76:	e7a5      	b.n	8027ac4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8027b78:	4660      	mov	r0, ip
 8027b7a:	4662      	mov	r2, ip
 8027b7c:	e7a2      	b.n	8027ac4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8027b7e:	4660      	mov	r0, ip
 8027b80:	4662      	mov	r2, ip
 8027b82:	e7f7      	b.n	8027b74 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 8027b84:	b00f      	add	sp, #60	; 0x3c
 8027b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027b8a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8027b8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b8e:	b085      	sub	sp, #20
 8027b90:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 8027b94:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8027b98:	9102      	str	r1, [sp, #8]
 8027b9a:	2c00      	cmp	r4, #0
 8027b9c:	fb04 710c 	mla	r1, r4, ip, r7
 8027ba0:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8027ba4:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8027ba8:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8027bac:	eb02 0e01 	add.w	lr, r2, r1
 8027bb0:	f2c0 8122 	blt.w	8027df8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8027bb4:	45a0      	cmp	r8, r4
 8027bb6:	f340 811f 	ble.w	8027df8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8027bba:	2f00      	cmp	r7, #0
 8027bbc:	f2c0 811a 	blt.w	8027df4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8027bc0:	45bc      	cmp	ip, r7
 8027bc2:	f340 8117 	ble.w	8027df4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8027bc6:	5c52      	ldrb	r2, [r2, r1]
 8027bc8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8027bcc:	1c7a      	adds	r2, r7, #1
 8027bce:	f100 8116 	bmi.w	8027dfe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8027bd2:	4594      	cmp	ip, r2
 8027bd4:	f340 8113 	ble.w	8027dfe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8027bd8:	2e00      	cmp	r6, #0
 8027bda:	f000 8112 	beq.w	8027e02 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8027bde:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8027be2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8027be6:	3401      	adds	r4, #1
 8027be8:	f100 810f 	bmi.w	8027e0a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8027bec:	45a0      	cmp	r8, r4
 8027bee:	f340 810c 	ble.w	8027e0a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8027bf2:	2800      	cmp	r0, #0
 8027bf4:	f000 810c 	beq.w	8027e10 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8027bf8:	2f00      	cmp	r7, #0
 8027bfa:	f2c0 8104 	blt.w	8027e06 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8027bfe:	45bc      	cmp	ip, r7
 8027c00:	f340 8101 	ble.w	8027e06 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8027c04:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8027c08:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8027c0c:	3701      	adds	r7, #1
 8027c0e:	f100 8102 	bmi.w	8027e16 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8027c12:	45bc      	cmp	ip, r7
 8027c14:	f340 80ff 	ble.w	8027e16 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8027c18:	2e00      	cmp	r6, #0
 8027c1a:	f000 80fe 	beq.w	8027e1a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8027c1e:	44f4      	add	ip, lr
 8027c20:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8027c24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8027c28:	b2b6      	uxth	r6, r6
 8027c2a:	b280      	uxth	r0, r0
 8027c2c:	fb00 fe06 	mul.w	lr, r0, r6
 8027c30:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8027c34:	0136      	lsls	r6, r6, #4
 8027c36:	eba6 070e 	sub.w	r7, r6, lr
 8027c3a:	b280      	uxth	r0, r0
 8027c3c:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8027c40:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8027c44:	b2bf      	uxth	r7, r7
 8027c46:	1a1b      	subs	r3, r3, r0
 8027c48:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8027c4c:	b29b      	uxth	r3, r3
 8027c4e:	fb0a f607 	mul.w	r6, sl, r7
 8027c52:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8027c56:	fb0b 6603 	mla	r6, fp, r3, r6
 8027c5a:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8027c5e:	fb00 6609 	mla	r6, r0, r9, r6
 8027c62:	fb0e 6608 	mla	r6, lr, r8, r6
 8027c66:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8027c6a:	9600      	str	r6, [sp, #0]
 8027c6c:	2e00      	cmp	r6, #0
 8027c6e:	f000 80be 	beq.w	8027dee <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 8027c72:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027c76:	fb0b fc0c 	mul.w	ip, fp, ip
 8027c7a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027c7e:	fb0b f505 	mul.w	r5, fp, r5
 8027c82:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8027c86:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8027c8a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027c8e:	44dc      	add	ip, fp
 8027c90:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027c94:	9501      	str	r5, [sp, #4]
 8027c96:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8027c9a:	9503      	str	r5, [sp, #12]
 8027c9c:	9d01      	ldr	r5, [sp, #4]
 8027c9e:	9e02      	ldr	r6, [sp, #8]
 8027ca0:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8027ca4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8027ca8:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8027cac:	fb0a fc0c 	mul.w	ip, sl, ip
 8027cb0:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8027cb4:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8027cb8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027cbc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027cc0:	4465      	add	r5, ip
 8027cc2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027cc6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027cca:	fb09 fc0c 	mul.w	ip, r9, ip
 8027cce:	fb09 f904 	mul.w	r9, r9, r4
 8027cd2:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8027cd6:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8027cda:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8027cde:	fb08 f404 	mul.w	r4, r8, r4
 8027ce2:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027ce6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027cea:	fb08 f802 	mul.w	r8, r8, r2
 8027cee:	fb0a fa01 	mul.w	sl, sl, r1
 8027cf2:	0a22      	lsrs	r2, r4, #8
 8027cf4:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8027cf8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027cfc:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8027d00:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8027d04:	4414      	add	r4, r2
 8027d06:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8027d0a:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8027d0e:	0a2d      	lsrs	r5, r5, #8
 8027d10:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8027d14:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027d18:	9a03      	ldr	r2, [sp, #12]
 8027d1a:	8836      	ldrh	r6, [r6, #0]
 8027d1c:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027d20:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027d24:	437d      	muls	r5, r7
 8027d26:	4461      	add	r1, ip
 8027d28:	0a24      	lsrs	r4, r4, #8
 8027d2a:	fb02 5503 	mla	r5, r2, r3, r5
 8027d2e:	0a09      	lsrs	r1, r1, #8
 8027d30:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027d34:	fb04 540e 	mla	r4, r4, lr, r5
 8027d38:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027d3c:	fb01 4100 	mla	r1, r1, r0, r4
 8027d40:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027d44:	0a09      	lsrs	r1, r1, #8
 8027d46:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027d4a:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8027d4e:	fb07 f70a 	mul.w	r7, r7, sl
 8027d52:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027d56:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8027d5a:	fb03 7101 	mla	r1, r3, r1, r7
 8027d5e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027d62:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027d66:	fb0e 1e08 	mla	lr, lr, r8, r1
 8027d6a:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8027d6e:	fb00 e101 	mla	r1, r0, r1, lr
 8027d72:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8027d76:	9a00      	ldr	r2, [sp, #0]
 8027d78:	b287      	uxth	r7, r0
 8027d7a:	437a      	muls	r2, r7
 8027d7c:	0a09      	lsrs	r1, r1, #8
 8027d7e:	1c53      	adds	r3, r2, #1
 8027d80:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027d84:	4321      	orrs	r1, r4
 8027d86:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027d8a:	1235      	asrs	r5, r6, #8
 8027d8c:	0c0a      	lsrs	r2, r1, #16
 8027d8e:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8027d92:	b2db      	uxtb	r3, r3
 8027d94:	fb12 f207 	smulbb	r2, r2, r7
 8027d98:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8027d9c:	fb05 2503 	mla	r5, r5, r3, r2
 8027da0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8027da4:	10f2      	asrs	r2, r6, #3
 8027da6:	b2c8      	uxtb	r0, r1
 8027da8:	00f6      	lsls	r6, r6, #3
 8027daa:	fb14 f407 	smulbb	r4, r4, r7
 8027dae:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8027db2:	b2f6      	uxtb	r6, r6
 8027db4:	fb10 f007 	smulbb	r0, r0, r7
 8027db8:	fb02 4203 	mla	r2, r2, r3, r4
 8027dbc:	b2ad      	uxth	r5, r5
 8027dbe:	fb06 0303 	mla	r3, r6, r3, r0
 8027dc2:	b299      	uxth	r1, r3
 8027dc4:	b294      	uxth	r4, r2
 8027dc6:	1c6b      	adds	r3, r5, #1
 8027dc8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027dcc:	1c62      	adds	r2, r4, #1
 8027dce:	1c4b      	adds	r3, r1, #1
 8027dd0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8027dd4:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8027dd8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8027ddc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027de0:	0952      	lsrs	r2, r2, #5
 8027de2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027de6:	432b      	orrs	r3, r5
 8027de8:	4313      	orrs	r3, r2
 8027dea:	9a02      	ldr	r2, [sp, #8]
 8027dec:	8013      	strh	r3, [r2, #0]
 8027dee:	b005      	add	sp, #20
 8027df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027df4:	2500      	movs	r5, #0
 8027df6:	e6e9      	b.n	8027bcc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8027df8:	2100      	movs	r1, #0
 8027dfa:	460d      	mov	r5, r1
 8027dfc:	e6f3      	b.n	8027be6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8027dfe:	2100      	movs	r1, #0
 8027e00:	e6f1      	b.n	8027be6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8027e02:	4631      	mov	r1, r6
 8027e04:	e6ef      	b.n	8027be6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8027e06:	2400      	movs	r4, #0
 8027e08:	e700      	b.n	8027c0c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8027e0a:	2200      	movs	r2, #0
 8027e0c:	4614      	mov	r4, r2
 8027e0e:	e70b      	b.n	8027c28 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8027e10:	4602      	mov	r2, r0
 8027e12:	4604      	mov	r4, r0
 8027e14:	e708      	b.n	8027c28 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8027e16:	2200      	movs	r2, #0
 8027e18:	e706      	b.n	8027c28 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8027e1a:	4632      	mov	r2, r6
 8027e1c:	e704      	b.n	8027c28 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08027e1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027e1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e22:	b09f      	sub	sp, #124	; 0x7c
 8027e24:	921b      	str	r2, [sp, #108]	; 0x6c
 8027e26:	9309      	str	r3, [sp, #36]	; 0x24
 8027e28:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8027e2a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8027e2e:	931c      	str	r3, [sp, #112]	; 0x70
 8027e30:	9119      	str	r1, [sp, #100]	; 0x64
 8027e32:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8027e36:	901d      	str	r0, [sp, #116]	; 0x74
 8027e38:	6850      	ldr	r0, [r2, #4]
 8027e3a:	6812      	ldr	r2, [r2, #0]
 8027e3c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8027e3e:	fb00 1303 	mla	r3, r0, r3, r1
 8027e42:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8027e46:	930c      	str	r3, [sp, #48]	; 0x30
 8027e48:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027e4a:	681b      	ldr	r3, [r3, #0]
 8027e4c:	9312      	str	r3, [sp, #72]	; 0x48
 8027e4e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027e50:	685e      	ldr	r6, [r3, #4]
 8027e52:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8027e56:	930d      	str	r3, [sp, #52]	; 0x34
 8027e58:	3604      	adds	r6, #4
 8027e5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027e5c:	2b00      	cmp	r3, #0
 8027e5e:	dc03      	bgt.n	8027e68 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8027e60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027e62:	2b00      	cmp	r3, #0
 8027e64:	f340 8388 	ble.w	8028578 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 8027e68:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027e6a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027e6e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027e72:	1e48      	subs	r0, r1, #1
 8027e74:	1e57      	subs	r7, r2, #1
 8027e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027e78:	2b00      	cmp	r3, #0
 8027e7a:	f340 8195 	ble.w	80281a8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8027e7e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8027e80:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8027e84:	ea4f 4325 	mov.w	r3, r5, asr #16
 8027e88:	d406      	bmi.n	8027e98 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8027e8a:	4584      	cmp	ip, r0
 8027e8c:	da04      	bge.n	8027e98 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8027e8e:	2b00      	cmp	r3, #0
 8027e90:	db02      	blt.n	8027e98 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8027e92:	42bb      	cmp	r3, r7
 8027e94:	f2c0 8189 	blt.w	80281aa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8027e98:	f11c 0c01 	adds.w	ip, ip, #1
 8027e9c:	f100 8177 	bmi.w	802818e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8027ea0:	4561      	cmp	r1, ip
 8027ea2:	f2c0 8174 	blt.w	802818e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8027ea6:	3301      	adds	r3, #1
 8027ea8:	f100 8171 	bmi.w	802818e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8027eac:	429a      	cmp	r2, r3
 8027eae:	f2c0 816e 	blt.w	802818e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8027eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027eb4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8027eb6:	931a      	str	r3, [sp, #104]	; 0x68
 8027eb8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8027eba:	2b00      	cmp	r3, #0
 8027ebc:	f340 8193 	ble.w	80281e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8027ec0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027ec2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027ec6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8027ec8:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8027ecc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027ece:	141b      	asrs	r3, r3, #16
 8027ed0:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8027ed4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8027ed8:	f100 81d6 	bmi.w	8028288 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8027edc:	f100 38ff 	add.w	r8, r0, #4294967295
 8027ee0:	4543      	cmp	r3, r8
 8027ee2:	f280 81d1 	bge.w	8028288 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8027ee6:	f1bc 0f00 	cmp.w	ip, #0
 8027eea:	f2c0 81cd 	blt.w	8028288 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8027eee:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027ef2:	45c4      	cmp	ip, r8
 8027ef4:	f280 81c8 	bge.w	8028288 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8027ef8:	b200      	sxth	r0, r0
 8027efa:	fb0c 3300 	mla	r3, ip, r0, r3
 8027efe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027f00:	eb04 0803 	add.w	r8, r4, r3
 8027f04:	5ce3      	ldrb	r3, [r4, r3]
 8027f06:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8027f0a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8027f0e:	2a00      	cmp	r2, #0
 8027f10:	f000 81af 	beq.w	8028272 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8027f14:	f898 c001 	ldrb.w	ip, [r8, #1]
 8027f18:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8027f1c:	940e      	str	r4, [sp, #56]	; 0x38
 8027f1e:	0e24      	lsrs	r4, r4, #24
 8027f20:	9415      	str	r4, [sp, #84]	; 0x54
 8027f22:	b179      	cbz	r1, 8027f44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8027f24:	eb08 0c00 	add.w	ip, r8, r0
 8027f28:	f818 0000 	ldrb.w	r0, [r8, r0]
 8027f2c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8027f30:	900a      	str	r0, [sp, #40]	; 0x28
 8027f32:	0e00      	lsrs	r0, r0, #24
 8027f34:	9013      	str	r0, [sp, #76]	; 0x4c
 8027f36:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8027f3a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8027f3e:	900f      	str	r0, [sp, #60]	; 0x3c
 8027f40:	0e00      	lsrs	r0, r0, #24
 8027f42:	9016      	str	r0, [sp, #88]	; 0x58
 8027f44:	b292      	uxth	r2, r2
 8027f46:	b289      	uxth	r1, r1
 8027f48:	fb02 f901 	mul.w	r9, r2, r1
 8027f4c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8027f50:	0112      	lsls	r2, r2, #4
 8027f52:	eba2 0809 	sub.w	r8, r2, r9
 8027f56:	b289      	uxth	r1, r1
 8027f58:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8027f5c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8027f5e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8027f60:	fa1f f888 	uxth.w	r8, r8
 8027f64:	1a52      	subs	r2, r2, r1
 8027f66:	b292      	uxth	r2, r2
 8027f68:	fb08 f000 	mul.w	r0, r8, r0
 8027f6c:	fb02 000e 	mla	r0, r2, lr, r0
 8027f70:	fb01 0004 	mla	r0, r1, r4, r0
 8027f74:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8027f76:	fb09 0004 	mla	r0, r9, r4, r0
 8027f7a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027f7e:	2800      	cmp	r0, #0
 8027f80:	f000 80fa 	beq.w	8028178 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8027f84:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027f88:	d01b      	beq.n	8027fc2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8027f8a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8027f8e:	fb0e fa0a 	mul.w	sl, lr, sl
 8027f92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027f96:	fb0e fe03 	mul.w	lr, lr, r3
 8027f9a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027f9e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027fa2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027fa6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8027faa:	4453      	add	r3, sl
 8027fac:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027fb0:	0a1b      	lsrs	r3, r3, #8
 8027fb2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027fb6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027fba:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027fbe:	ea43 030c 	orr.w	r3, r3, ip
 8027fc2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027fc4:	2cff      	cmp	r4, #255	; 0xff
 8027fc6:	d021      	beq.n	802800c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8027fc8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027fca:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8027fce:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027fd0:	fb04 fb0b 	mul.w	fp, r4, fp
 8027fd4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027fd6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8027fda:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8027fdc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027fe0:	fb04 fa0a 	mul.w	sl, r4, sl
 8027fe4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027fe8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027fec:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027ff0:	44de      	add	lr, fp
 8027ff2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027ff6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027ffa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027ffe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028002:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028006:	ea4e 040a 	orr.w	r4, lr, sl
 802800a:	940e      	str	r4, [sp, #56]	; 0x38
 802800c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802800e:	2cff      	cmp	r4, #255	; 0xff
 8028010:	d021      	beq.n	8028056 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8028012:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028014:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8028018:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802801a:	fb04 fb0b 	mul.w	fp, r4, fp
 802801e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8028020:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8028024:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8028026:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802802a:	fb04 fa0a 	mul.w	sl, r4, sl
 802802e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028032:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028036:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802803a:	44de      	add	lr, fp
 802803c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028040:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028044:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028048:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802804c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028050:	ea4e 040a 	orr.w	r4, lr, sl
 8028054:	940a      	str	r4, [sp, #40]	; 0x28
 8028056:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8028058:	2cff      	cmp	r4, #255	; 0xff
 802805a:	d021      	beq.n	80280a0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 802805c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802805e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8028062:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8028064:	fb04 fb0b 	mul.w	fp, r4, fp
 8028068:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802806a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802806e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8028070:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028074:	fb04 fa0a 	mul.w	sl, r4, sl
 8028078:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802807c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028080:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028084:	44de      	add	lr, fp
 8028086:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802808a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802808e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028092:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028096:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802809a:	ea4e 040a 	orr.w	r4, lr, sl
 802809e:	940f      	str	r4, [sp, #60]	; 0x3c
 80280a0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80280a2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80280a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80280a8:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80280ac:	fb08 fc0c 	mul.w	ip, r8, ip
 80280b0:	fb02 cc0e 	mla	ip, r2, lr, ip
 80280b4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80280b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80280ba:	fb01 cc0e 	mla	ip, r1, lr, ip
 80280be:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80280c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80280c4:	fb09 cc0e 	mla	ip, r9, lr, ip
 80280c8:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80280cc:	fb08 f80e 	mul.w	r8, r8, lr
 80280d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80280d4:	fb02 8303 	mla	r3, r2, r3, r8
 80280d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80280da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80280dc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80280e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80280e2:	fb01 330a 	mla	r3, r1, sl, r3
 80280e6:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80280ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80280ec:	fb09 3901 	mla	r9, r9, r1, r3
 80280f0:	4342      	muls	r2, r0
 80280f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80280f6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80280fa:	883b      	ldrh	r3, [r7, #0]
 80280fc:	1c50      	adds	r0, r2, #1
 80280fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028102:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028106:	ea4c 0c09 	orr.w	ip, ip, r9
 802810a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802810e:	1219      	asrs	r1, r3, #8
 8028110:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8028114:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8028118:	b2c0      	uxtb	r0, r0
 802811a:	fb12 f204 	smulbb	r2, r2, r4
 802811e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8028122:	fb01 2100 	mla	r1, r1, r0, r2
 8028126:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802812a:	10da      	asrs	r2, r3, #3
 802812c:	fa5f fc8c 	uxtb.w	ip, ip
 8028130:	00db      	lsls	r3, r3, #3
 8028132:	fb1c fc04 	smulbb	ip, ip, r4
 8028136:	b2db      	uxtb	r3, r3
 8028138:	b289      	uxth	r1, r1
 802813a:	fb03 c300 	mla	r3, r3, r0, ip
 802813e:	fa1f fc83 	uxth.w	ip, r3
 8028142:	1c4b      	adds	r3, r1, #1
 8028144:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8028148:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802814c:	fb1e fe04 	smulbb	lr, lr, r4
 8028150:	f10c 0301 	add.w	r3, ip, #1
 8028154:	fb02 e200 	mla	r2, r2, r0, lr
 8028158:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802815c:	b292      	uxth	r2, r2
 802815e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8028162:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028166:	430b      	orrs	r3, r1
 8028168:	1c51      	adds	r1, r2, #1
 802816a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802816e:	0952      	lsrs	r2, r2, #5
 8028170:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028174:	4313      	orrs	r3, r2
 8028176:	803b      	strh	r3, [r7, #0]
 8028178:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 802817a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802817c:	441a      	add	r2, r3
 802817e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028180:	9229      	str	r2, [sp, #164]	; 0xa4
 8028182:	441d      	add	r5, r3
 8028184:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8028186:	3b01      	subs	r3, #1
 8028188:	3702      	adds	r7, #2
 802818a:	931a      	str	r3, [sp, #104]	; 0x68
 802818c:	e694      	b.n	8027eb8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802818e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8028190:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8028192:	441c      	add	r4, r3
 8028194:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028196:	9429      	str	r4, [sp, #164]	; 0xa4
 8028198:	441d      	add	r5, r3
 802819a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802819c:	3b01      	subs	r3, #1
 802819e:	9309      	str	r3, [sp, #36]	; 0x24
 80281a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80281a2:	3302      	adds	r3, #2
 80281a4:	930c      	str	r3, [sp, #48]	; 0x30
 80281a6:	e666      	b.n	8027e76 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80281a8:	d024      	beq.n	80281f4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 80281aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80281ac:	982b      	ldr	r0, [sp, #172]	; 0xac
 80281ae:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80281b0:	3b01      	subs	r3, #1
 80281b2:	fb00 4003 	mla	r0, r0, r3, r4
 80281b6:	1400      	asrs	r0, r0, #16
 80281b8:	f53f ae7b 	bmi.w	8027eb2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80281bc:	3901      	subs	r1, #1
 80281be:	4288      	cmp	r0, r1
 80281c0:	f6bf ae77 	bge.w	8027eb2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80281c4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80281c6:	fb01 5303 	mla	r3, r1, r3, r5
 80281ca:	141b      	asrs	r3, r3, #16
 80281cc:	f53f ae71 	bmi.w	8027eb2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80281d0:	3a01      	subs	r2, #1
 80281d2:	4293      	cmp	r3, r2
 80281d4:	f6bf ae6d 	bge.w	8027eb2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80281d8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80281dc:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80281e0:	f1bb 0f00 	cmp.w	fp, #0
 80281e4:	dc70      	bgt.n	80282c8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 80281e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80281e8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80281ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80281ee:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80281f2:	930c      	str	r3, [sp, #48]	; 0x30
 80281f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80281f6:	2b00      	cmp	r3, #0
 80281f8:	f340 81be 	ble.w	8028578 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 80281fc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028200:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028204:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028208:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802820a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802820e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028212:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028216:	eef0 6a62 	vmov.f32	s13, s5
 802821a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802821e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028222:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028226:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 802822a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802822e:	eef0 6a43 	vmov.f32	s13, s6
 8028232:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028236:	ee12 2a90 	vmov	r2, s5
 802823a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802823e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028242:	ee13 2a10 	vmov	r2, s6
 8028246:	932b      	str	r3, [sp, #172]	; 0xac
 8028248:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802824a:	fb92 f3f3 	sdiv	r3, r2, r3
 802824e:	932c      	str	r3, [sp, #176]	; 0xb0
 8028250:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8028252:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8028254:	3b01      	subs	r3, #1
 8028256:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802825a:	9319      	str	r3, [sp, #100]	; 0x64
 802825c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802825e:	bf08      	it	eq
 8028260:	4613      	moveq	r3, r2
 8028262:	ee16 5a90 	vmov	r5, s13
 8028266:	9309      	str	r3, [sp, #36]	; 0x24
 8028268:	eeb0 3a67 	vmov.f32	s6, s15
 802826c:	eef0 2a47 	vmov.f32	s5, s14
 8028270:	e5f3      	b.n	8027e5a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8028272:	2900      	cmp	r1, #0
 8028274:	f43f ae66 	beq.w	8027f44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8028278:	f818 0000 	ldrb.w	r0, [r8, r0]
 802827c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8028280:	900a      	str	r0, [sp, #40]	; 0x28
 8028282:	0e00      	lsrs	r0, r0, #24
 8028284:	9013      	str	r0, [sp, #76]	; 0x4c
 8028286:	e65d      	b.n	8027f44 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8028288:	f113 0801 	adds.w	r8, r3, #1
 802828c:	f53f af74 	bmi.w	8028178 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8028290:	4540      	cmp	r0, r8
 8028292:	f6ff af71 	blt.w	8028178 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8028296:	f11c 0801 	adds.w	r8, ip, #1
 802829a:	f53f af6d 	bmi.w	8028178 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802829e:	45c6      	cmp	lr, r8
 80282a0:	f6ff af6a 	blt.w	8028178 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80282a4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80282a6:	9302      	str	r3, [sp, #8]
 80282a8:	b200      	sxth	r0, r0
 80282aa:	fa0f f38e 	sxth.w	r3, lr
 80282ae:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80282b2:	e9cd c203 	strd	ip, r2, [sp, #12]
 80282b6:	9301      	str	r3, [sp, #4]
 80282b8:	9000      	str	r0, [sp, #0]
 80282ba:	4633      	mov	r3, r6
 80282bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80282be:	981d      	ldr	r0, [sp, #116]	; 0x74
 80282c0:	4639      	mov	r1, r7
 80282c2:	f7ff fc62 	bl	8027b8a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 80282c6:	e757      	b.n	8028178 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80282c8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80282ca:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80282cc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80282d0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80282d2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80282d6:	1427      	asrs	r7, r4, #16
 80282d8:	142b      	asrs	r3, r5, #16
 80282da:	fb01 7303 	mla	r3, r1, r3, r7
 80282de:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80282e0:	18e7      	adds	r7, r4, r3
 80282e2:	5ce3      	ldrb	r3, [r4, r3]
 80282e4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80282e8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80282ec:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80282f0:	2a00      	cmp	r2, #0
 80282f2:	f000 8137 	beq.w	8028564 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 80282f6:	f897 e001 	ldrb.w	lr, [r7, #1]
 80282fa:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 80282fe:	9410      	str	r4, [sp, #64]	; 0x40
 8028300:	0e24      	lsrs	r4, r4, #24
 8028302:	9417      	str	r4, [sp, #92]	; 0x5c
 8028304:	b170      	cbz	r0, 8028324 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8028306:	eb07 0e01 	add.w	lr, r7, r1
 802830a:	5c79      	ldrb	r1, [r7, r1]
 802830c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8028310:	910b      	str	r1, [sp, #44]	; 0x2c
 8028312:	0e09      	lsrs	r1, r1, #24
 8028314:	9114      	str	r1, [sp, #80]	; 0x50
 8028316:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802831a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802831e:	9111      	str	r1, [sp, #68]	; 0x44
 8028320:	0e09      	lsrs	r1, r1, #24
 8028322:	9118      	str	r1, [sp, #96]	; 0x60
 8028324:	b292      	uxth	r2, r2
 8028326:	b280      	uxth	r0, r0
 8028328:	fb02 f800 	mul.w	r8, r2, r0
 802832c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8028330:	0112      	lsls	r2, r2, #4
 8028332:	eba2 0e08 	sub.w	lr, r2, r8
 8028336:	b280      	uxth	r0, r0
 8028338:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802833c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802833e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8028340:	fa1f fe8e 	uxth.w	lr, lr
 8028344:	1a12      	subs	r2, r2, r0
 8028346:	b292      	uxth	r2, r2
 8028348:	fb0e f101 	mul.w	r1, lr, r1
 802834c:	fb02 110c 	mla	r1, r2, ip, r1
 8028350:	fb00 1104 	mla	r1, r0, r4, r1
 8028354:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8028356:	fb08 1104 	mla	r1, r8, r4, r1
 802835a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802835e:	2900      	cmp	r1, #0
 8028360:	f000 80f5 	beq.w	802854e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8028364:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028368:	d019      	beq.n	802839e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 802836a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802836e:	fb0c fa0a 	mul.w	sl, ip, sl
 8028372:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028376:	fb0c fc03 	mul.w	ip, ip, r3
 802837a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802837e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028382:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028386:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802838a:	4453      	add	r3, sl
 802838c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8028390:	0a1b      	lsrs	r3, r3, #8
 8028392:	0a3f      	lsrs	r7, r7, #8
 8028394:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028398:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802839c:	433b      	orrs	r3, r7
 802839e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80283a0:	2cff      	cmp	r4, #255	; 0xff
 80283a2:	d020      	beq.n	80283e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 80283a4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80283a6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80283aa:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80283ac:	4367      	muls	r7, r4
 80283ae:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80283b0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80283b4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80283b6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80283ba:	fb04 fa0a 	mul.w	sl, r4, sl
 80283be:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80283c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80283c6:	44bc      	add	ip, r7
 80283c8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80283cc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80283d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80283d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80283d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80283dc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80283e0:	ea4c 040a 	orr.w	r4, ip, sl
 80283e4:	9410      	str	r4, [sp, #64]	; 0x40
 80283e6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80283e8:	2cff      	cmp	r4, #255	; 0xff
 80283ea:	d020      	beq.n	802842e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 80283ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80283ee:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80283f2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80283f4:	4367      	muls	r7, r4
 80283f6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80283f8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80283fc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80283fe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028402:	fb04 fa0a 	mul.w	sl, r4, sl
 8028406:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802840a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802840e:	44bc      	add	ip, r7
 8028410:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028414:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028418:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802841c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028420:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028424:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028428:	ea4c 040a 	orr.w	r4, ip, sl
 802842c:	940b      	str	r4, [sp, #44]	; 0x2c
 802842e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8028430:	2cff      	cmp	r4, #255	; 0xff
 8028432:	d020      	beq.n	8028476 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 8028434:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8028436:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802843a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 802843c:	4367      	muls	r7, r4
 802843e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8028440:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8028444:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8028446:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802844a:	fb04 fa0a 	mul.w	sl, r4, sl
 802844e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028452:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028456:	44bc      	add	ip, r7
 8028458:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802845c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028460:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028464:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028468:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802846c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028470:	ea4c 040a 	orr.w	r4, ip, sl
 8028474:	9411      	str	r4, [sp, #68]	; 0x44
 8028476:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8028478:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802847c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802847e:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8028482:	fb0e f707 	mul.w	r7, lr, r7
 8028486:	fb02 770c 	mla	r7, r2, ip, r7
 802848a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802848e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8028490:	fb00 770c 	mla	r7, r0, ip, r7
 8028494:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028498:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802849a:	fb08 770c 	mla	r7, r8, ip, r7
 802849e:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80284a2:	fb0e fe0c 	mul.w	lr, lr, ip
 80284a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80284aa:	fb02 e303 	mla	r3, r2, r3, lr
 80284ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80284b0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80284b2:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80284b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80284b8:	fb00 330a 	mla	r3, r0, sl, r3
 80284bc:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80284c0:	fb08 3c0c 	mla	ip, r8, ip, r3
 80284c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80284c6:	f8b9 0000 	ldrh.w	r0, [r9]
 80284ca:	434b      	muls	r3, r1
 80284cc:	0a3f      	lsrs	r7, r7, #8
 80284ce:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80284d2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80284d6:	1c59      	adds	r1, r3, #1
 80284d8:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80284dc:	ea47 070c 	orr.w	r7, r7, ip
 80284e0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80284e4:	1202      	asrs	r2, r0, #8
 80284e6:	0c3b      	lsrs	r3, r7, #16
 80284e8:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80284ec:	b2c9      	uxtb	r1, r1
 80284ee:	fb13 f304 	smulbb	r3, r3, r4
 80284f2:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80284f6:	fb02 3201 	mla	r2, r2, r1, r3
 80284fa:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80284fe:	10c3      	asrs	r3, r0, #3
 8028500:	b2ff      	uxtb	r7, r7
 8028502:	00c0      	lsls	r0, r0, #3
 8028504:	b292      	uxth	r2, r2
 8028506:	fb1c fc04 	smulbb	ip, ip, r4
 802850a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802850e:	b2c0      	uxtb	r0, r0
 8028510:	fb17 f704 	smulbb	r7, r7, r4
 8028514:	fb03 c301 	mla	r3, r3, r1, ip
 8028518:	fb00 7001 	mla	r0, r0, r1, r7
 802851c:	f102 0c01 	add.w	ip, r2, #1
 8028520:	b280      	uxth	r0, r0
 8028522:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8028526:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 802852a:	1c42      	adds	r2, r0, #1
 802852c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8028530:	b29b      	uxth	r3, r3
 8028532:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8028536:	ea42 020c 	orr.w	r2, r2, ip
 802853a:	f103 0c01 	add.w	ip, r3, #1
 802853e:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8028542:	095b      	lsrs	r3, r3, #5
 8028544:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028548:	431a      	orrs	r2, r3
 802854a:	f8a9 2000 	strh.w	r2, [r9]
 802854e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8028550:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8028552:	441a      	add	r2, r3
 8028554:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028556:	9229      	str	r2, [sp, #164]	; 0xa4
 8028558:	f109 0902 	add.w	r9, r9, #2
 802855c:	441d      	add	r5, r3
 802855e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028562:	e63d      	b.n	80281e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8028564:	2800      	cmp	r0, #0
 8028566:	f43f aedd 	beq.w	8028324 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 802856a:	5c79      	ldrb	r1, [r7, r1]
 802856c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8028570:	910b      	str	r1, [sp, #44]	; 0x2c
 8028572:	0e09      	lsrs	r1, r1, #24
 8028574:	9114      	str	r1, [sp, #80]	; 0x50
 8028576:	e6d5      	b.n	8028324 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8028578:	b01f      	add	sp, #124	; 0x7c
 802857a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802857e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 802857e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028582:	b089      	sub	sp, #36	; 0x24
 8028584:	9101      	str	r1, [sp, #4]
 8028586:	9801      	ldr	r0, [sp, #4]
 8028588:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 802858c:	8800      	ldrh	r0, [r0, #0]
 802858e:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8028592:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8028596:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 802859a:	1206      	asrs	r6, r0, #8
 802859c:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 80285a0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80285a4:	9602      	str	r6, [sp, #8]
 80285a6:	10c6      	asrs	r6, r0, #3
 80285a8:	00c0      	lsls	r0, r0, #3
 80285aa:	b2c0      	uxtb	r0, r0
 80285ac:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80285b0:	9004      	str	r0, [sp, #16]
 80285b2:	2f00      	cmp	r7, #0
 80285b4:	fb07 100c 	mla	r0, r7, ip, r1
 80285b8:	9603      	str	r6, [sp, #12]
 80285ba:	eb02 0e00 	add.w	lr, r2, r0
 80285be:	f2c0 810a 	blt.w	80287d6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 80285c2:	45b8      	cmp	r8, r7
 80285c4:	f340 8107 	ble.w	80287d6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 80285c8:	2900      	cmp	r1, #0
 80285ca:	f2c0 8102 	blt.w	80287d2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 80285ce:	458c      	cmp	ip, r1
 80285d0:	f340 80ff 	ble.w	80287d2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 80285d4:	5c12      	ldrb	r2, [r2, r0]
 80285d6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80285da:	1c4a      	adds	r2, r1, #1
 80285dc:	f100 80fe 	bmi.w	80287dc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 80285e0:	4594      	cmp	ip, r2
 80285e2:	f340 80fb 	ble.w	80287dc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 80285e6:	2d00      	cmp	r5, #0
 80285e8:	f000 80fa 	beq.w	80287e0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 80285ec:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80285f0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80285f4:	3701      	adds	r7, #1
 80285f6:	f100 80f7 	bmi.w	80287e8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 80285fa:	45b8      	cmp	r8, r7
 80285fc:	f340 80f4 	ble.w	80287e8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8028600:	2c00      	cmp	r4, #0
 8028602:	f000 80f4 	beq.w	80287ee <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8028606:	2900      	cmp	r1, #0
 8028608:	eb0e 020c 	add.w	r2, lr, ip
 802860c:	f2c0 80ea 	blt.w	80287e4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8028610:	458c      	cmp	ip, r1
 8028612:	f340 80e7 	ble.w	80287e4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8028616:	f81e 700c 	ldrb.w	r7, [lr, ip]
 802861a:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 802861e:	3101      	adds	r1, #1
 8028620:	f100 80e8 	bmi.w	80287f4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8028624:	458c      	cmp	ip, r1
 8028626:	f340 80e5 	ble.w	80287f4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 802862a:	2d00      	cmp	r5, #0
 802862c:	f000 80e4 	beq.w	80287f8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8028630:	7852      	ldrb	r2, [r2, #1]
 8028632:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8028636:	0e0b      	lsrs	r3, r1, #24
 8028638:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 802863c:	9300      	str	r3, [sp, #0]
 802863e:	b2a4      	uxth	r4, r4
 8028640:	b2ab      	uxth	r3, r5
 8028642:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8028646:	fb03 f904 	mul.w	r9, r3, r4
 802864a:	fb0a f505 	mul.w	r5, sl, r5
 802864e:	011b      	lsls	r3, r3, #4
 8028650:	eba3 0e09 	sub.w	lr, r3, r9
 8028654:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8028658:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 802865c:	0a28      	lsrs	r0, r5, #8
 802865e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8028662:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8028666:	4405      	add	r5, r0
 8028668:	0a2d      	lsrs	r5, r5, #8
 802866a:	fb0a f303 	mul.w	r3, sl, r3
 802866e:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8028672:	9005      	str	r0, [sp, #20]
 8028674:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8028678:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802867c:	0a1b      	lsrs	r3, r3, #8
 802867e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8028682:	9306      	str	r3, [sp, #24]
 8028684:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8028688:	fb0b f303 	mul.w	r3, fp, r3
 802868c:	0a1d      	lsrs	r5, r3, #8
 802868e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028692:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8028696:	fb0b f606 	mul.w	r6, fp, r6
 802869a:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 802869e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 80286a2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80286a6:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80286aa:	fb08 f707 	mul.w	r7, r8, r7
 80286ae:	441d      	add	r5, r3
 80286b0:	f506 7380 	add.w	r3, r6, #256	; 0x100
 80286b4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80286b8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80286bc:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 80286c0:	fb08 fc0c 	mul.w	ip, r8, ip
 80286c4:	0a1b      	lsrs	r3, r3, #8
 80286c6:	9307      	str	r3, [sp, #28]
 80286c8:	ea4f 201c 	mov.w	r0, ip, lsr #8
 80286cc:	0e0b      	lsrs	r3, r1, #24
 80286ce:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 80286d2:	435f      	muls	r7, r3
 80286d4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80286d8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80286dc:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 80286e0:	4460      	add	r0, ip
 80286e2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80286e6:	b2a4      	uxth	r4, r4
 80286e8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80286ec:	0a2d      	lsrs	r5, r5, #8
 80286ee:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80286f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80286f6:	fa1f fe8e 	uxth.w	lr, lr
 80286fa:	4359      	muls	r1, r3
 80286fc:	1b12      	subs	r2, r2, r4
 80286fe:	9b05      	ldr	r3, [sp, #20]
 8028700:	44bc      	add	ip, r7
 8028702:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8028706:	b292      	uxth	r2, r2
 8028708:	fb05 f50e 	mul.w	r5, r5, lr
 802870c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028710:	fb03 5502 	mla	r5, r3, r2, r5
 8028714:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028718:	9b06      	ldr	r3, [sp, #24]
 802871a:	f501 7780 	add.w	r7, r1, #256	; 0x100
 802871e:	0a36      	lsrs	r6, r6, #8
 8028720:	0a00      	lsrs	r0, r0, #8
 8028722:	fb0c 5509 	mla	r5, ip, r9, r5
 8028726:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 802872a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 802872e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8028732:	fb00 5504 	mla	r5, r0, r4, r5
 8028736:	fb0e f606 	mul.w	r6, lr, r6
 802873a:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 802873e:	0a09      	lsrs	r1, r1, #8
 8028740:	9b07      	ldr	r3, [sp, #28]
 8028742:	fb02 6000 	mla	r0, r2, r0, r6
 8028746:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802874a:	fb09 0001 	mla	r0, r9, r1, r0
 802874e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028752:	fb0e fe0b 	mul.w	lr, lr, fp
 8028756:	fb04 0003 	mla	r0, r4, r3, r0
 802875a:	fb02 e20a 	mla	r2, r2, sl, lr
 802875e:	9b00      	ldr	r3, [sp, #0]
 8028760:	fb04 2408 	mla	r4, r4, r8, r2
 8028764:	fb09 4903 	mla	r9, r9, r3, r4
 8028768:	ea6f 2929 	mvn.w	r9, r9, asr #8
 802876c:	9b02      	ldr	r3, [sp, #8]
 802876e:	9a04      	ldr	r2, [sp, #16]
 8028770:	fa5f f989 	uxtb.w	r9, r9
 8028774:	fb03 f109 	mul.w	r1, r3, r9
 8028778:	9b03      	ldr	r3, [sp, #12]
 802877a:	0a2d      	lsrs	r5, r5, #8
 802877c:	0a00      	lsrs	r0, r0, #8
 802877e:	fb03 f309 	mul.w	r3, r3, r9
 8028782:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8028786:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802878a:	4305      	orrs	r5, r0
 802878c:	fb02 f909 	mul.w	r9, r2, r9
 8028790:	1c58      	adds	r0, r3, #1
 8028792:	1c4a      	adds	r2, r1, #1
 8028794:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8028798:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802879c:	0a2b      	lsrs	r3, r5, #8
 802879e:	0c2a      	lsrs	r2, r5, #16
 80287a0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80287a4:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 80287a8:	00db      	lsls	r3, r3, #3
 80287aa:	0212      	lsls	r2, r2, #8
 80287ac:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80287b0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80287b4:	4313      	orrs	r3, r2
 80287b6:	f109 0201 	add.w	r2, r9, #1
 80287ba:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80287be:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 80287c2:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80287c6:	431d      	orrs	r5, r3
 80287c8:	9b01      	ldr	r3, [sp, #4]
 80287ca:	801d      	strh	r5, [r3, #0]
 80287cc:	b009      	add	sp, #36	; 0x24
 80287ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80287d2:	2000      	movs	r0, #0
 80287d4:	e701      	b.n	80285da <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 80287d6:	2600      	movs	r6, #0
 80287d8:	4630      	mov	r0, r6
 80287da:	e70b      	b.n	80285f4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80287dc:	2600      	movs	r6, #0
 80287de:	e709      	b.n	80285f4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80287e0:	462e      	mov	r6, r5
 80287e2:	e707      	b.n	80285f4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 80287e4:	2700      	movs	r7, #0
 80287e6:	e71a      	b.n	802861e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 80287e8:	2100      	movs	r1, #0
 80287ea:	460f      	mov	r7, r1
 80287ec:	e723      	b.n	8028636 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80287ee:	4621      	mov	r1, r4
 80287f0:	4627      	mov	r7, r4
 80287f2:	e720      	b.n	8028636 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80287f4:	2100      	movs	r1, #0
 80287f6:	e71e      	b.n	8028636 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 80287f8:	4629      	mov	r1, r5
 80287fa:	e71c      	b.n	8028636 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

080287fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80287fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028800:	b09b      	sub	sp, #108	; 0x6c
 8028802:	9218      	str	r2, [sp, #96]	; 0x60
 8028804:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8028806:	9116      	str	r1, [sp, #88]	; 0x58
 8028808:	9307      	str	r3, [sp, #28]
 802880a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802880e:	9019      	str	r0, [sp, #100]	; 0x64
 8028810:	6850      	ldr	r0, [r2, #4]
 8028812:	6812      	ldr	r2, [r2, #0]
 8028814:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8028816:	fb00 1303 	mla	r3, r0, r3, r1
 802881a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802881e:	930a      	str	r3, [sp, #40]	; 0x28
 8028820:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028822:	681b      	ldr	r3, [r3, #0]
 8028824:	930f      	str	r3, [sp, #60]	; 0x3c
 8028826:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028828:	685e      	ldr	r6, [r3, #4]
 802882a:	3604      	adds	r6, #4
 802882c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802882e:	2b00      	cmp	r3, #0
 8028830:	dc03      	bgt.n	802883a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8028832:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8028834:	2b00      	cmp	r3, #0
 8028836:	f340 8373 	ble.w	8028f20 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 802883a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802883c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028840:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028844:	1e48      	subs	r0, r1, #1
 8028846:	1e57      	subs	r7, r2, #1
 8028848:	9b07      	ldr	r3, [sp, #28]
 802884a:	2b00      	cmp	r3, #0
 802884c:	f340 8190 	ble.w	8028b70 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8028850:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8028852:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8028856:	ea4f 4325 	mov.w	r3, r5, asr #16
 802885a:	d406      	bmi.n	802886a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 802885c:	4584      	cmp	ip, r0
 802885e:	da04      	bge.n	802886a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8028860:	2b00      	cmp	r3, #0
 8028862:	db02      	blt.n	802886a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8028864:	42bb      	cmp	r3, r7
 8028866:	f2c0 8184 	blt.w	8028b72 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 802886a:	f11c 0c01 	adds.w	ip, ip, #1
 802886e:	f100 8172 	bmi.w	8028b56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8028872:	4561      	cmp	r1, ip
 8028874:	f2c0 816f 	blt.w	8028b56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8028878:	3301      	adds	r3, #1
 802887a:	f100 816c 	bmi.w	8028b56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802887e:	429a      	cmp	r2, r3
 8028880:	f2c0 8169 	blt.w	8028b56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8028884:	9b07      	ldr	r3, [sp, #28]
 8028886:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8028888:	9317      	str	r3, [sp, #92]	; 0x5c
 802888a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802888c:	2b00      	cmp	r3, #0
 802888e:	f340 818e 	ble.w	8028bae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b2>
 8028892:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8028894:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8028898:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802889a:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 802889e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80288a0:	141b      	asrs	r3, r3, #16
 80288a2:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80288a6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80288aa:	f100 81d1 	bmi.w	8028c50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 80288ae:	f101 38ff 	add.w	r8, r1, #4294967295
 80288b2:	4543      	cmp	r3, r8
 80288b4:	f280 81cc 	bge.w	8028c50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 80288b8:	f1bc 0f00 	cmp.w	ip, #0
 80288bc:	f2c0 81c8 	blt.w	8028c50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 80288c0:	f10e 38ff 	add.w	r8, lr, #4294967295
 80288c4:	45c4      	cmp	ip, r8
 80288c6:	f280 81c3 	bge.w	8028c50 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 80288ca:	b209      	sxth	r1, r1
 80288cc:	fb0c 3301 	mla	r3, ip, r1, r3
 80288d0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80288d2:	eb04 0803 	add.w	r8, r4, r3
 80288d6:	5ce3      	ldrb	r3, [r4, r3]
 80288d8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80288dc:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80288e0:	2a00      	cmp	r2, #0
 80288e2:	f000 81aa 	beq.w	8028c3a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43e>
 80288e6:	f898 c001 	ldrb.w	ip, [r8, #1]
 80288ea:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80288ee:	940b      	str	r4, [sp, #44]	; 0x2c
 80288f0:	0e24      	lsrs	r4, r4, #24
 80288f2:	9412      	str	r4, [sp, #72]	; 0x48
 80288f4:	b178      	cbz	r0, 8028916 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 80288f6:	eb08 0c01 	add.w	ip, r8, r1
 80288fa:	f818 1001 	ldrb.w	r1, [r8, r1]
 80288fe:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8028902:	9108      	str	r1, [sp, #32]
 8028904:	0e09      	lsrs	r1, r1, #24
 8028906:	9110      	str	r1, [sp, #64]	; 0x40
 8028908:	f89c 1001 	ldrb.w	r1, [ip, #1]
 802890c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8028910:	910c      	str	r1, [sp, #48]	; 0x30
 8028912:	0e09      	lsrs	r1, r1, #24
 8028914:	9113      	str	r1, [sp, #76]	; 0x4c
 8028916:	b292      	uxth	r2, r2
 8028918:	b280      	uxth	r0, r0
 802891a:	fb02 f900 	mul.w	r9, r2, r0
 802891e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8028922:	0112      	lsls	r2, r2, #4
 8028924:	eba2 0809 	sub.w	r8, r2, r9
 8028928:	b280      	uxth	r0, r0
 802892a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802892e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8028930:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8028932:	fa1f f888 	uxth.w	r8, r8
 8028936:	1a12      	subs	r2, r2, r0
 8028938:	b292      	uxth	r2, r2
 802893a:	fb08 f101 	mul.w	r1, r8, r1
 802893e:	fb02 110e 	mla	r1, r2, lr, r1
 8028942:	fb00 1104 	mla	r1, r0, r4, r1
 8028946:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8028948:	fb09 1104 	mla	r1, r9, r4, r1
 802894c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8028950:	2900      	cmp	r1, #0
 8028952:	f000 80f5 	beq.w	8028b40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8028956:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802895a:	d01b      	beq.n	8028994 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802895c:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8028960:	fb0e fa0a 	mul.w	sl, lr, sl
 8028964:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028968:	fb0e fe03 	mul.w	lr, lr, r3
 802896c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8028970:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028974:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028978:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802897c:	4453      	add	r3, sl
 802897e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028982:	0a1b      	lsrs	r3, r3, #8
 8028984:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028988:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802898c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028990:	ea43 030c 	orr.w	r3, r3, ip
 8028994:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8028996:	2cff      	cmp	r4, #255	; 0xff
 8028998:	d021      	beq.n	80289de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802899a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802899c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80289a0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80289a2:	fb04 fb0b 	mul.w	fp, r4, fp
 80289a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80289a8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80289ac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80289ae:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80289b2:	fb04 fa0a 	mul.w	sl, r4, sl
 80289b6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80289ba:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80289be:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80289c2:	44de      	add	lr, fp
 80289c4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80289c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80289cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80289d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80289d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80289d8:	ea4e 040a 	orr.w	r4, lr, sl
 80289dc:	940b      	str	r4, [sp, #44]	; 0x2c
 80289de:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80289e0:	2cff      	cmp	r4, #255	; 0xff
 80289e2:	d021      	beq.n	8028a28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 80289e4:	9c08      	ldr	r4, [sp, #32]
 80289e6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80289ea:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80289ec:	fb04 fb0b 	mul.w	fp, r4, fp
 80289f0:	9c08      	ldr	r4, [sp, #32]
 80289f2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80289f6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80289f8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80289fc:	fb04 fa0a 	mul.w	sl, r4, sl
 8028a00:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028a04:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028a08:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028a0c:	44de      	add	lr, fp
 8028a0e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028a12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028a16:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028a1a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028a1e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028a22:	ea4e 040a 	orr.w	r4, lr, sl
 8028a26:	9408      	str	r4, [sp, #32]
 8028a28:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8028a2a:	2cff      	cmp	r4, #255	; 0xff
 8028a2c:	d021      	beq.n	8028a72 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8028a2e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028a30:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8028a34:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8028a36:	fb04 fb0b 	mul.w	fp, r4, fp
 8028a3a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028a3c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8028a40:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8028a42:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028a46:	fb04 fa0a 	mul.w	sl, r4, sl
 8028a4a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028a4e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028a52:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028a56:	44de      	add	lr, fp
 8028a58:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028a5c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028a60:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028a64:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028a68:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028a6c:	ea4e 040a 	orr.w	r4, lr, sl
 8028a70:	940c      	str	r4, [sp, #48]	; 0x30
 8028a72:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028a74:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028a78:	9c08      	ldr	r4, [sp, #32]
 8028a7a:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8028a7e:	fb08 fc0c 	mul.w	ip, r8, ip
 8028a82:	fb02 cc0e 	mla	ip, r2, lr, ip
 8028a86:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8028a8a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8028a8c:	fb00 cc0e 	mla	ip, r0, lr, ip
 8028a90:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8028a94:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8028a96:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028a9a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8028a9e:	fb08 f80e 	mul.w	r8, r8, lr
 8028aa2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028aa6:	fb02 8303 	mla	r3, r2, r3, r8
 8028aaa:	9a08      	ldr	r2, [sp, #32]
 8028aac:	f8b7 8000 	ldrh.w	r8, [r7]
 8028ab0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8028ab4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8028ab6:	fb00 330a 	mla	r3, r0, sl, r3
 8028aba:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8028abe:	fb09 3900 	mla	r9, r9, r0, r3
 8028ac2:	43c9      	mvns	r1, r1
 8028ac4:	ea4f 2228 	mov.w	r2, r8, asr #8
 8028ac8:	fa5f fe81 	uxtb.w	lr, r1
 8028acc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028ad0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8028ad4:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8028ad8:	fb02 f20e 	mul.w	r2, r2, lr
 8028adc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028ae0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028ae4:	ea4c 0c09 	orr.w	ip, ip, r9
 8028ae8:	1c53      	adds	r3, r2, #1
 8028aea:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8028aee:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8028af2:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8028af6:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028afa:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028afe:	4a63      	ldr	r2, [pc, #396]	; (8028c8c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8028b00:	fb00 f00e 	mul.w	r0, r0, lr
 8028b04:	b2db      	uxtb	r3, r3
 8028b06:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8028b0a:	1c43      	adds	r3, r0, #1
 8028b0c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028b10:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8028b14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8028b18:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8028b1c:	b2c9      	uxtb	r1, r1
 8028b1e:	00db      	lsls	r3, r3, #3
 8028b20:	fb01 f10e 	mul.w	r1, r1, lr
 8028b24:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028b28:	4313      	orrs	r3, r2
 8028b2a:	1c4a      	adds	r2, r1, #1
 8028b2c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8028b30:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8028b34:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8028b38:	ea4c 0c03 	orr.w	ip, ip, r3
 8028b3c:	f8a7 c000 	strh.w	ip, [r7]
 8028b40:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028b42:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8028b44:	441a      	add	r2, r3
 8028b46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028b48:	9225      	str	r2, [sp, #148]	; 0x94
 8028b4a:	441d      	add	r5, r3
 8028b4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8028b4e:	3b01      	subs	r3, #1
 8028b50:	3702      	adds	r7, #2
 8028b52:	9317      	str	r3, [sp, #92]	; 0x5c
 8028b54:	e699      	b.n	802888a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028b56:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028b58:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8028b5a:	441c      	add	r4, r3
 8028b5c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028b5e:	9425      	str	r4, [sp, #148]	; 0x94
 8028b60:	441d      	add	r5, r3
 8028b62:	9b07      	ldr	r3, [sp, #28]
 8028b64:	3b01      	subs	r3, #1
 8028b66:	9307      	str	r3, [sp, #28]
 8028b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028b6a:	3302      	adds	r3, #2
 8028b6c:	930a      	str	r3, [sp, #40]	; 0x28
 8028b6e:	e66b      	b.n	8028848 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8028b70:	d024      	beq.n	8028bbc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8028b72:	9b07      	ldr	r3, [sp, #28]
 8028b74:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8028b76:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8028b78:	3b01      	subs	r3, #1
 8028b7a:	fb00 4003 	mla	r0, r0, r3, r4
 8028b7e:	1400      	asrs	r0, r0, #16
 8028b80:	f53f ae80 	bmi.w	8028884 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8028b84:	3901      	subs	r1, #1
 8028b86:	4288      	cmp	r0, r1
 8028b88:	f6bf ae7c 	bge.w	8028884 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8028b8c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8028b8e:	fb01 5303 	mla	r3, r1, r3, r5
 8028b92:	141b      	asrs	r3, r3, #16
 8028b94:	f53f ae76 	bmi.w	8028884 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8028b98:	3a01      	subs	r2, #1
 8028b9a:	4293      	cmp	r3, r2
 8028b9c:	f6bf ae72 	bge.w	8028884 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8028ba0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8028ba4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8028ba8:	f1bb 0f00 	cmp.w	fp, #0
 8028bac:	dc70      	bgt.n	8028c90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8028bae:	9b07      	ldr	r3, [sp, #28]
 8028bb0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8028bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028bb6:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8028bba:	930a      	str	r3, [sp, #40]	; 0x28
 8028bbc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028bbe:	2b00      	cmp	r3, #0
 8028bc0:	f340 81ae 	ble.w	8028f20 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8028bc4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028bc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028bcc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028bd0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028bd2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028bd6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028bda:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028bde:	eef0 6a62 	vmov.f32	s13, s5
 8028be2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028be6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028bea:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028bee:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8028bf2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028bf6:	eef0 6a43 	vmov.f32	s13, s6
 8028bfa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028bfe:	ee12 2a90 	vmov	r2, s5
 8028c02:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028c06:	fb92 f3f3 	sdiv	r3, r2, r3
 8028c0a:	ee13 2a10 	vmov	r2, s6
 8028c0e:	9327      	str	r3, [sp, #156]	; 0x9c
 8028c10:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028c12:	fb92 f3f3 	sdiv	r3, r2, r3
 8028c16:	9328      	str	r3, [sp, #160]	; 0xa0
 8028c18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028c1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8028c1c:	3b01      	subs	r3, #1
 8028c1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028c22:	9316      	str	r3, [sp, #88]	; 0x58
 8028c24:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028c26:	bf08      	it	eq
 8028c28:	4613      	moveq	r3, r2
 8028c2a:	ee16 5a90 	vmov	r5, s13
 8028c2e:	9307      	str	r3, [sp, #28]
 8028c30:	eeb0 3a67 	vmov.f32	s6, s15
 8028c34:	eef0 2a47 	vmov.f32	s5, s14
 8028c38:	e5f8      	b.n	802882c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8028c3a:	2800      	cmp	r0, #0
 8028c3c:	f43f ae6b 	beq.w	8028916 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8028c40:	f818 1001 	ldrb.w	r1, [r8, r1]
 8028c44:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8028c48:	9108      	str	r1, [sp, #32]
 8028c4a:	0e09      	lsrs	r1, r1, #24
 8028c4c:	9110      	str	r1, [sp, #64]	; 0x40
 8028c4e:	e662      	b.n	8028916 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8028c50:	f113 0801 	adds.w	r8, r3, #1
 8028c54:	f53f af74 	bmi.w	8028b40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8028c58:	4541      	cmp	r1, r8
 8028c5a:	f6ff af71 	blt.w	8028b40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8028c5e:	f11c 0801 	adds.w	r8, ip, #1
 8028c62:	f53f af6d 	bmi.w	8028b40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8028c66:	45c6      	cmp	lr, r8
 8028c68:	f6ff af6a 	blt.w	8028b40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8028c6c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8028c70:	b209      	sxth	r1, r1
 8028c72:	fa0f f38e 	sxth.w	r3, lr
 8028c76:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8028c7a:	9301      	str	r3, [sp, #4]
 8028c7c:	9100      	str	r1, [sp, #0]
 8028c7e:	4633      	mov	r3, r6
 8028c80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028c82:	9819      	ldr	r0, [sp, #100]	; 0x64
 8028c84:	4639      	mov	r1, r7
 8028c86:	f7ff fc7a 	bl	802857e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8028c8a:	e759      	b.n	8028b40 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8028c8c:	fffff800 	.word	0xfffff800
 8028c90:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8028c92:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8028c94:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8028c98:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028c9a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028c9e:	1427      	asrs	r7, r4, #16
 8028ca0:	142b      	asrs	r3, r5, #16
 8028ca2:	fb01 7303 	mla	r3, r1, r3, r7
 8028ca6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8028ca8:	18e7      	adds	r7, r4, r3
 8028caa:	5ce3      	ldrb	r3, [r4, r3]
 8028cac:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8028cb0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8028cb4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028cb8:	2a00      	cmp	r2, #0
 8028cba:	f000 8127 	beq.w	8028f0c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8028cbe:	f897 e001 	ldrb.w	lr, [r7, #1]
 8028cc2:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8028cc6:	940d      	str	r4, [sp, #52]	; 0x34
 8028cc8:	0e24      	lsrs	r4, r4, #24
 8028cca:	9414      	str	r4, [sp, #80]	; 0x50
 8028ccc:	b170      	cbz	r0, 8028cec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8028cce:	eb07 0e01 	add.w	lr, r7, r1
 8028cd2:	5c79      	ldrb	r1, [r7, r1]
 8028cd4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8028cd8:	9109      	str	r1, [sp, #36]	; 0x24
 8028cda:	0e09      	lsrs	r1, r1, #24
 8028cdc:	9111      	str	r1, [sp, #68]	; 0x44
 8028cde:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8028ce2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8028ce6:	910e      	str	r1, [sp, #56]	; 0x38
 8028ce8:	0e09      	lsrs	r1, r1, #24
 8028cea:	9115      	str	r1, [sp, #84]	; 0x54
 8028cec:	b292      	uxth	r2, r2
 8028cee:	b280      	uxth	r0, r0
 8028cf0:	fb02 f800 	mul.w	r8, r2, r0
 8028cf4:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8028cf8:	0112      	lsls	r2, r2, #4
 8028cfa:	eba2 0e08 	sub.w	lr, r2, r8
 8028cfe:	b280      	uxth	r0, r0
 8028d00:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8028d04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028d06:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8028d08:	fa1f fe8e 	uxth.w	lr, lr
 8028d0c:	1a09      	subs	r1, r1, r0
 8028d0e:	b289      	uxth	r1, r1
 8028d10:	fb0e f202 	mul.w	r2, lr, r2
 8028d14:	fb01 220c 	mla	r2, r1, ip, r2
 8028d18:	fb00 2204 	mla	r2, r0, r4, r2
 8028d1c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8028d1e:	fb08 2204 	mla	r2, r8, r4, r2
 8028d22:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8028d26:	2a00      	cmp	r2, #0
 8028d28:	f000 80e5 	beq.w	8028ef6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8028d2c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028d30:	d019      	beq.n	8028d66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 8028d32:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8028d36:	fb0c fa0a 	mul.w	sl, ip, sl
 8028d3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028d3e:	fb0c fc03 	mul.w	ip, ip, r3
 8028d42:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8028d46:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028d4a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8028d4e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8028d52:	4453      	add	r3, sl
 8028d54:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8028d58:	0a1b      	lsrs	r3, r3, #8
 8028d5a:	0a3f      	lsrs	r7, r7, #8
 8028d5c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028d60:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8028d64:	433b      	orrs	r3, r7
 8028d66:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8028d68:	2cff      	cmp	r4, #255	; 0xff
 8028d6a:	d020      	beq.n	8028dae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 8028d6c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028d6e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8028d72:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8028d74:	4367      	muls	r7, r4
 8028d76:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028d78:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8028d7c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8028d7e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028d82:	fb04 fa0a 	mul.w	sl, r4, sl
 8028d86:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028d8a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028d8e:	44bc      	add	ip, r7
 8028d90:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028d94:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028d98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028d9c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028da0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028da4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028da8:	ea4c 040a 	orr.w	r4, ip, sl
 8028dac:	940d      	str	r4, [sp, #52]	; 0x34
 8028dae:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8028db0:	2cff      	cmp	r4, #255	; 0xff
 8028db2:	d020      	beq.n	8028df6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 8028db4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8028db6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8028dba:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8028dbc:	4367      	muls	r7, r4
 8028dbe:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8028dc0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8028dc4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8028dc6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028dca:	fb04 fa0a 	mul.w	sl, r4, sl
 8028dce:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028dd2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028dd6:	44bc      	add	ip, r7
 8028dd8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028ddc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028de0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028de4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028de8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028dec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028df0:	ea4c 040a 	orr.w	r4, ip, sl
 8028df4:	9409      	str	r4, [sp, #36]	; 0x24
 8028df6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8028df8:	2cff      	cmp	r4, #255	; 0xff
 8028dfa:	d020      	beq.n	8028e3e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8028dfc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8028dfe:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8028e02:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8028e04:	4367      	muls	r7, r4
 8028e06:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8028e08:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8028e0c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8028e0e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028e12:	fb04 fa0a 	mul.w	sl, r4, sl
 8028e16:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8028e1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028e1e:	44bc      	add	ip, r7
 8028e20:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028e24:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028e28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028e2c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028e30:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028e34:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028e38:	ea4c 040a 	orr.w	r4, ip, sl
 8028e3c:	940e      	str	r4, [sp, #56]	; 0x38
 8028e3e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028e40:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8028e44:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8028e46:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8028e4a:	fb0e f707 	mul.w	r7, lr, r7
 8028e4e:	fb01 770c 	mla	r7, r1, ip, r7
 8028e52:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028e56:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8028e58:	fb00 770c 	mla	r7, r0, ip, r7
 8028e5c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8028e60:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8028e62:	fb08 770c 	mla	r7, r8, ip, r7
 8028e66:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8028e6a:	fb0e fe0c 	mul.w	lr, lr, ip
 8028e6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028e72:	fb01 e303 	mla	r3, r1, r3, lr
 8028e76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028e78:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8028e7c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8028e7e:	fb00 330a 	mla	r3, r0, sl, r3
 8028e82:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8028e86:	fb08 3c0c 	mla	ip, r8, ip, r3
 8028e8a:	f8b9 3000 	ldrh.w	r3, [r9]
 8028e8e:	43d2      	mvns	r2, r2
 8028e90:	1218      	asrs	r0, r3, #8
 8028e92:	b2d2      	uxtb	r2, r2
 8028e94:	10d9      	asrs	r1, r3, #3
 8028e96:	0a3f      	lsrs	r7, r7, #8
 8028e98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028e9c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028ea0:	00db      	lsls	r3, r3, #3
 8028ea2:	4350      	muls	r0, r2
 8028ea4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8028ea8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028eac:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028eb0:	b2db      	uxtb	r3, r3
 8028eb2:	ea47 070c 	orr.w	r7, r7, ip
 8028eb6:	4351      	muls	r1, r2
 8028eb8:	4353      	muls	r3, r2
 8028eba:	1c42      	adds	r2, r0, #1
 8028ebc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028ec0:	0c3a      	lsrs	r2, r7, #16
 8028ec2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028ec6:	4a18      	ldr	r2, [pc, #96]	; (8028f28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8028ec8:	b2c0      	uxtb	r0, r0
 8028eca:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8028ece:	1c4a      	adds	r2, r1, #1
 8028ed0:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8028ed4:	0a3a      	lsrs	r2, r7, #8
 8028ed6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8028eda:	00c9      	lsls	r1, r1, #3
 8028edc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8028ee0:	4301      	orrs	r1, r0
 8028ee2:	1c58      	adds	r0, r3, #1
 8028ee4:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8028ee8:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8028eec:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8028ef0:	4308      	orrs	r0, r1
 8028ef2:	f8a9 0000 	strh.w	r0, [r9]
 8028ef6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028ef8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8028efa:	441a      	add	r2, r3
 8028efc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028efe:	9225      	str	r2, [sp, #148]	; 0x94
 8028f00:	f109 0902 	add.w	r9, r9, #2
 8028f04:	441d      	add	r5, r3
 8028f06:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028f0a:	e64d      	b.n	8028ba8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8028f0c:	2800      	cmp	r0, #0
 8028f0e:	f43f aeed 	beq.w	8028cec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8028f12:	5c79      	ldrb	r1, [r7, r1]
 8028f14:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8028f18:	9109      	str	r1, [sp, #36]	; 0x24
 8028f1a:	0e09      	lsrs	r1, r1, #24
 8028f1c:	9111      	str	r1, [sp, #68]	; 0x44
 8028f1e:	e6e5      	b.n	8028cec <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8028f20:	b01b      	add	sp, #108	; 0x6c
 8028f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028f26:	bf00      	nop
 8028f28:	fffff800 	.word	0xfffff800

08028f2c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8028f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028f30:	b085      	sub	sp, #20
 8028f32:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8028f36:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8028f3a:	9103      	str	r1, [sp, #12]
 8028f3c:	fb00 7406 	mla	r4, r0, r6, r7
 8028f40:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8028f44:	2800      	cmp	r0, #0
 8028f46:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8028f4a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8028f4e:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8028f52:	9501      	str	r5, [sp, #4]
 8028f54:	eb03 0904 	add.w	r9, r3, r4
 8028f58:	f2c0 8150 	blt.w	80291fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8028f5c:	4583      	cmp	fp, r0
 8028f5e:	f340 814d 	ble.w	80291fc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 8028f62:	2f00      	cmp	r7, #0
 8028f64:	f2c0 8146 	blt.w	80291f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8028f68:	42be      	cmp	r6, r7
 8028f6a:	f340 8143 	ble.w	80291f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 8028f6e:	f813 c004 	ldrb.w	ip, [r3, r4]
 8028f72:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8028f76:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8028f7a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8028f7e:	4355      	muls	r5, r2
 8028f80:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028f84:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8028f88:	fb0c f203 	mul.w	r2, ip, r3
 8028f8c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8028f90:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8028f94:	441d      	add	r5, r3
 8028f96:	f102 0320 	add.w	r3, r2, #32
 8028f9a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028f9e:	0a1b      	lsrs	r3, r3, #8
 8028fa0:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8028fa4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028fa8:	431c      	orrs	r4, r3
 8028faa:	1c7b      	adds	r3, r7, #1
 8028fac:	f100 812b 	bmi.w	8029206 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8028fb0:	429e      	cmp	r6, r3
 8028fb2:	f340 8128 	ble.w	8029206 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8028fb6:	2900      	cmp	r1, #0
 8028fb8:	f000 8128 	beq.w	802920c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8028fbc:	9a01      	ldr	r2, [sp, #4]
 8028fbe:	f899 3001 	ldrb.w	r3, [r9, #1]
 8028fc2:	8855      	ldrh	r5, [r2, #2]
 8028fc4:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8028fc8:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8028fcc:	fb08 f802 	mul.w	r8, r8, r2
 8028fd0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8028fd4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8028fd8:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8028fdc:	435d      	muls	r5, r3
 8028fde:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8028fe2:	44d0      	add	r8, sl
 8028fe4:	f105 0a20 	add.w	sl, r5, #32
 8028fe8:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8028fec:	0a2d      	lsrs	r5, r5, #8
 8028fee:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8028ff2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8028ff6:	432a      	orrs	r2, r5
 8028ff8:	3001      	adds	r0, #1
 8028ffa:	f100 810d 	bmi.w	8029218 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8028ffe:	4583      	cmp	fp, r0
 8029000:	f340 810a 	ble.w	8029218 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8029004:	f1be 0f00 	cmp.w	lr, #0
 8029008:	f000 810b 	beq.w	8029222 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 802900c:	2f00      	cmp	r7, #0
 802900e:	f2c0 8100 	blt.w	8029212 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8029012:	42be      	cmp	r6, r7
 8029014:	f340 80fd 	ble.w	8029212 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8029018:	9801      	ldr	r0, [sp, #4]
 802901a:	f819 5006 	ldrb.w	r5, [r9, r6]
 802901e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8029022:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8029026:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 802902a:	fb0a fa00 	mul.w	sl, sl, r0
 802902e:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8029032:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8029036:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 802903a:	fb05 f808 	mul.w	r8, r5, r8
 802903e:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8029042:	4482      	add	sl, r0
 8029044:	f108 0020 	add.w	r0, r8, #32
 8029048:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802904c:	0a00      	lsrs	r0, r0, #8
 802904e:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8029052:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029056:	ea4b 0b00 	orr.w	fp, fp, r0
 802905a:	3701      	adds	r7, #1
 802905c:	f100 80e6 	bmi.w	802922c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8029060:	42be      	cmp	r6, r7
 8029062:	f340 80e3 	ble.w	802922c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 8029066:	2900      	cmp	r1, #0
 8029068:	f000 80e3 	beq.w	8029232 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 802906c:	3601      	adds	r6, #1
 802906e:	9801      	ldr	r0, [sp, #4]
 8029070:	f819 7006 	ldrb.w	r7, [r9, r6]
 8029074:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8029078:	ea4f 09e7 	mov.w	r9, r7, asr #3
 802907c:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8029080:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029084:	fb09 f906 	mul.w	r9, r9, r6
 8029088:	fb07 f800 	mul.w	r8, r7, r0
 802908c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8029090:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8029094:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8029098:	44d1      	add	r9, sl
 802909a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 802909e:	f108 0020 	add.w	r0, r8, #32
 80290a2:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80290a6:	0a00      	lsrs	r0, r0, #8
 80290a8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80290ac:	4330      	orrs	r0, r6
 80290ae:	b28e      	uxth	r6, r1
 80290b0:	fa1f f98e 	uxth.w	r9, lr
 80290b4:	fb06 f809 	mul.w	r8, r6, r9
 80290b8:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80290bc:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80290c0:	0136      	lsls	r6, r6, #4
 80290c2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80290c6:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 80290ca:	9601      	str	r6, [sp, #4]
 80290cc:	ea4a 0404 	orr.w	r4, sl, r4
 80290d0:	fa1f f689 	uxth.w	r6, r9
 80290d4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80290d8:	fb11 f90e 	smulbb	r9, r1, lr
 80290dc:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 80290e0:	9602      	str	r6, [sp, #8]
 80290e2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80290e6:	4626      	mov	r6, r4
 80290e8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80290ec:	f1ce 0410 	rsb	r4, lr, #16
 80290f0:	1a64      	subs	r4, r4, r1
 80290f2:	ea4a 0202 	orr.w	r2, sl, r2
 80290f6:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 80290fa:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80290fe:	434a      	muls	r2, r1
 8029100:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8029104:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8029108:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802910c:	fb04 2406 	mla	r4, r4, r6, r2
 8029110:	ea4a 0000 	orr.w	r0, sl, r0
 8029114:	fb09 4200 	mla	r2, r9, r0, r4
 8029118:	ea4f 440b 	mov.w	r4, fp, lsl #16
 802911c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8029120:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8029124:	ea44 0b0b 	orr.w	fp, r4, fp
 8029128:	9c01      	ldr	r4, [sp, #4]
 802912a:	9e02      	ldr	r6, [sp, #8]
 802912c:	9903      	ldr	r1, [sp, #12]
 802912e:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8029132:	1ba4      	subs	r4, r4, r6
 8029134:	9e01      	ldr	r6, [sp, #4]
 8029136:	8808      	ldrh	r0, [r1, #0]
 8029138:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 802913c:	eba6 0608 	sub.w	r6, r6, r8
 8029140:	b2b6      	uxth	r6, r6
 8029142:	b2a4      	uxth	r4, r4
 8029144:	4373      	muls	r3, r6
 8029146:	fb0c 3304 	mla	r3, ip, r4, r3
 802914a:	9c02      	ldr	r4, [sp, #8]
 802914c:	fb04 3505 	mla	r5, r4, r5, r3
 8029150:	fb08 5707 	mla	r7, r8, r7, r5
 8029154:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8029158:	b289      	uxth	r1, r1
 802915a:	fb0e 2e0b 	mla	lr, lr, fp, r2
 802915e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8029162:	434f      	muls	r7, r1
 8029164:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8029168:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802916c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029170:	1c7b      	adds	r3, r7, #1
 8029172:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8029176:	ea42 0e0e 	orr.w	lr, r2, lr
 802917a:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 802917e:	fa1f f28e 	uxth.w	r2, lr
 8029182:	1203      	asrs	r3, r0, #8
 8029184:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8029188:	b2ff      	uxtb	r7, r7
 802918a:	1215      	asrs	r5, r2, #8
 802918c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8029190:	fb13 f307 	smulbb	r3, r3, r7
 8029194:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8029198:	fb05 3501 	mla	r5, r5, r1, r3
 802919c:	10c3      	asrs	r3, r0, #3
 802919e:	10d4      	asrs	r4, r2, #3
 80291a0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80291a4:	fb13 f307 	smulbb	r3, r3, r7
 80291a8:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80291ac:	fb04 3401 	mla	r4, r4, r1, r3
 80291b0:	00c3      	lsls	r3, r0, #3
 80291b2:	00d2      	lsls	r2, r2, #3
 80291b4:	b2db      	uxtb	r3, r3
 80291b6:	fb13 f307 	smulbb	r3, r3, r7
 80291ba:	b2d2      	uxtb	r2, r2
 80291bc:	fb02 3101 	mla	r1, r2, r1, r3
 80291c0:	b2ad      	uxth	r5, r5
 80291c2:	b289      	uxth	r1, r1
 80291c4:	b2a4      	uxth	r4, r4
 80291c6:	1c6b      	adds	r3, r5, #1
 80291c8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80291cc:	1c62      	adds	r2, r4, #1
 80291ce:	1c4b      	adds	r3, r1, #1
 80291d0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80291d4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 80291d8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80291dc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80291e0:	0964      	lsrs	r4, r4, #5
 80291e2:	432b      	orrs	r3, r5
 80291e4:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80291e8:	9a03      	ldr	r2, [sp, #12]
 80291ea:	4323      	orrs	r3, r4
 80291ec:	8013      	strh	r3, [r2, #0]
 80291ee:	b005      	add	sp, #20
 80291f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80291f4:	f04f 0c00 	mov.w	ip, #0
 80291f8:	4664      	mov	r4, ip
 80291fa:	e6d6      	b.n	8028faa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 80291fc:	2300      	movs	r3, #0
 80291fe:	469c      	mov	ip, r3
 8029200:	461a      	mov	r2, r3
 8029202:	461c      	mov	r4, r3
 8029204:	e6f8      	b.n	8028ff8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8029206:	2300      	movs	r3, #0
 8029208:	461a      	mov	r2, r3
 802920a:	e6f5      	b.n	8028ff8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802920c:	460b      	mov	r3, r1
 802920e:	460a      	mov	r2, r1
 8029210:	e6f2      	b.n	8028ff8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8029212:	2500      	movs	r5, #0
 8029214:	46ab      	mov	fp, r5
 8029216:	e720      	b.n	802905a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8029218:	2700      	movs	r7, #0
 802921a:	463d      	mov	r5, r7
 802921c:	4638      	mov	r0, r7
 802921e:	46bb      	mov	fp, r7
 8029220:	e745      	b.n	80290ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8029222:	4677      	mov	r7, lr
 8029224:	4675      	mov	r5, lr
 8029226:	4670      	mov	r0, lr
 8029228:	46f3      	mov	fp, lr
 802922a:	e740      	b.n	80290ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802922c:	2700      	movs	r7, #0
 802922e:	4638      	mov	r0, r7
 8029230:	e73d      	b.n	80290ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8029232:	460f      	mov	r7, r1
 8029234:	4608      	mov	r0, r1
 8029236:	e73a      	b.n	80290ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08029238 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802923c:	b097      	sub	sp, #92	; 0x5c
 802923e:	9214      	str	r2, [sp, #80]	; 0x50
 8029240:	9308      	str	r3, [sp, #32]
 8029242:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8029244:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8029248:	9312      	str	r3, [sp, #72]	; 0x48
 802924a:	9111      	str	r1, [sp, #68]	; 0x44
 802924c:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8029250:	9015      	str	r0, [sp, #84]	; 0x54
 8029252:	6850      	ldr	r0, [r2, #4]
 8029254:	6812      	ldr	r2, [r2, #0]
 8029256:	fb00 1303 	mla	r3, r0, r3, r1
 802925a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802925e:	9309      	str	r3, [sp, #36]	; 0x24
 8029260:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029262:	681b      	ldr	r3, [r3, #0]
 8029264:	930b      	str	r3, [sp, #44]	; 0x2c
 8029266:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029268:	685b      	ldr	r3, [r3, #4]
 802926a:	930c      	str	r3, [sp, #48]	; 0x30
 802926c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8029270:	930a      	str	r3, [sp, #40]	; 0x28
 8029272:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8029274:	2b00      	cmp	r3, #0
 8029276:	dc03      	bgt.n	8029280 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029278:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802927a:	2b00      	cmp	r3, #0
 802927c:	f340 83cb 	ble.w	8029a16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8029280:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029282:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029286:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802928a:	1e48      	subs	r0, r1, #1
 802928c:	1e55      	subs	r5, r2, #1
 802928e:	9b08      	ldr	r3, [sp, #32]
 8029290:	2b00      	cmp	r3, #0
 8029292:	f340 81a3 	ble.w	80295dc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8029296:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8029298:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802929a:	1436      	asrs	r6, r6, #16
 802929c:	ea4f 4323 	mov.w	r3, r3, asr #16
 80292a0:	d406      	bmi.n	80292b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80292a2:	4286      	cmp	r6, r0
 80292a4:	da04      	bge.n	80292b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80292a6:	2b00      	cmp	r3, #0
 80292a8:	db02      	blt.n	80292b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80292aa:	42ab      	cmp	r3, r5
 80292ac:	f2c0 8197 	blt.w	80295de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80292b0:	3601      	adds	r6, #1
 80292b2:	f100 8184 	bmi.w	80295be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80292b6:	42b1      	cmp	r1, r6
 80292b8:	f2c0 8181 	blt.w	80295be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80292bc:	3301      	adds	r3, #1
 80292be:	f100 817e 	bmi.w	80295be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80292c2:	429a      	cmp	r2, r3
 80292c4:	f2c0 817b 	blt.w	80295be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80292c8:	9b08      	ldr	r3, [sp, #32]
 80292ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80292cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80292ce:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80292d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80292d4:	2b00      	cmp	r3, #0
 80292d6:	f340 81a4 	ble.w	8029622 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 80292da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80292dc:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80292de:	1418      	asrs	r0, r3, #16
 80292e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80292e2:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80292e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80292e8:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80292ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80292ee:	142d      	asrs	r5, r5, #16
 80292f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80292f4:	f100 81f8 	bmi.w	80296e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 80292f8:	f102 3eff 	add.w	lr, r2, #4294967295
 80292fc:	4575      	cmp	r5, lr
 80292fe:	f280 81f3 	bge.w	80296e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8029302:	2800      	cmp	r0, #0
 8029304:	f2c0 81f0 	blt.w	80296e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8029308:	f103 3eff 	add.w	lr, r3, #4294967295
 802930c:	4570      	cmp	r0, lr
 802930e:	f280 81eb 	bge.w	80296e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8029312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029314:	b212      	sxth	r2, r2
 8029316:	fb00 5002 	mla	r0, r0, r2, r5
 802931a:	fa1f fe81 	uxth.w	lr, r1
 802931e:	eb03 0a00 	add.w	sl, r3, r0
 8029322:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8029326:	f813 9000 	ldrb.w	r9, [r3, r0]
 802932a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802932e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8029332:	b29b      	uxth	r3, r3
 8029334:	f1bc 0f00 	cmp.w	ip, #0
 8029338:	f000 81b9 	beq.w	80296ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 802933c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8029340:	940d      	str	r4, [sp, #52]	; 0x34
 8029342:	eb0a 0b02 	add.w	fp, sl, r2
 8029346:	fa1f fa8c 	uxth.w	sl, ip
 802934a:	fb0a fe0e 	mul.w	lr, sl, lr
 802934e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8029352:	fa1f fa8a 	uxth.w	sl, sl
 8029356:	eba5 050e 	sub.w	r5, r5, lr
 802935a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802935e:	940e      	str	r4, [sp, #56]	; 0x38
 8029360:	eba3 030a 	sub.w	r3, r3, sl
 8029364:	b2ad      	uxth	r5, r5
 8029366:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8029368:	b29b      	uxth	r3, r3
 802936a:	fb08 f505 	mul.w	r5, r8, r5
 802936e:	fb09 5303 	mla	r3, r9, r3, r5
 8029372:	fb0a 3304 	mla	r3, sl, r4, r3
 8029376:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8029378:	fb0e 3304 	mla	r3, lr, r4, r3
 802937c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029380:	2b00      	cmp	r3, #0
 8029382:	f000 810f 	beq.w	80295a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8029386:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8029388:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802938c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8029390:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8029394:	f000 8190 	beq.w	80296b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8029398:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802939c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80293a0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80293a4:	fb09 f000 	mul.w	r0, r9, r0
 80293a8:	fb0a fe0e 	mul.w	lr, sl, lr
 80293ac:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80293b0:	f100 0b20 	add.w	fp, r0, #32
 80293b4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80293b8:	44ce      	add	lr, r9
 80293ba:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80293be:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80293c2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80293c6:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80293ca:	ea4e 0909 	orr.w	r9, lr, r9
 80293ce:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80293d2:	8868      	ldrh	r0, [r5, #2]
 80293d4:	d019      	beq.n	802940a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80293d6:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80293da:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80293de:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80293e2:	fb08 f800 	mul.w	r8, r8, r0
 80293e6:	fb0a fe0e 	mul.w	lr, sl, lr
 80293ea:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 80293ee:	f108 0b20 	add.w	fp, r8, #32
 80293f2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80293f6:	4486      	add	lr, r0
 80293f8:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80293fc:	0a00      	lsrs	r0, r0, #8
 80293fe:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8029402:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029406:	ea4e 0000 	orr.w	r0, lr, r0
 802940a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802940e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8029412:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8029416:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802941a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802941e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029422:	ea4e 0909 	orr.w	r9, lr, r9
 8029426:	ea4a 0000 	orr.w	r0, sl, r0
 802942a:	f1bc 0f00 	cmp.w	ip, #0
 802942e:	f000 8145 	beq.w	80296bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8029432:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8029436:	3a01      	subs	r2, #1
 8029438:	0052      	lsls	r2, r2, #1
 802943a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802943c:	3202      	adds	r2, #2
 802943e:	2cff      	cmp	r4, #255	; 0xff
 8029440:	eb05 0e02 	add.w	lr, r5, r2
 8029444:	5aaa      	ldrh	r2, [r5, r2]
 8029446:	d018      	beq.n	802947a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8029448:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 802944c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029450:	fb04 fa02 	mul.w	sl, r4, r2
 8029454:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8029458:	fb08 f805 	mul.w	r8, r8, r5
 802945c:	f10a 0520 	add.w	r5, sl, #32
 8029460:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8029464:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8029468:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802946c:	4442      	add	r2, r8
 802946e:	0a2d      	lsrs	r5, r5, #8
 8029470:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8029474:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8029478:	432a      	orrs	r2, r5
 802947a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802947c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8029480:	2cff      	cmp	r4, #255	; 0xff
 8029482:	d01a      	beq.n	80294ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8029484:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8029488:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802948c:	fb04 fa05 	mul.w	sl, r4, r5
 8029490:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8029494:	fb08 f80e 	mul.w	r8, r8, lr
 8029498:	f10a 0e20 	add.w	lr, sl, #32
 802949c:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80294a0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80294a4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80294a8:	4445      	add	r5, r8
 80294aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80294ae:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80294b2:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80294b6:	ea45 050e 	orr.w	r5, r5, lr
 80294ba:	fb1c fe01 	smulbb	lr, ip, r1
 80294be:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80294c2:	f1cc 0810 	rsb	r8, ip, #16
 80294c6:	eba8 0801 	sub.w	r8, r8, r1
 80294ca:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80294ce:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80294d2:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80294d6:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80294da:	4341      	muls	r1, r0
 80294dc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80294e0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80294e4:	ea4a 0202 	orr.w	r2, sl, r2
 80294e8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80294ec:	fb09 1108 	mla	r1, r9, r8, r1
 80294f0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80294f4:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80294f8:	fb0c 1102 	mla	r1, ip, r2, r1
 80294fc:	ea4b 0505 	orr.w	r5, fp, r5
 8029500:	fb0e 1e05 	mla	lr, lr, r5, r1
 8029504:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8029508:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802950c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029510:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8029514:	ea42 0e0e 	orr.w	lr, r2, lr
 8029518:	fa1f f28e 	uxth.w	r2, lr
 802951c:	2bff      	cmp	r3, #255	; 0xff
 802951e:	d103      	bne.n	8029528 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8029520:	9912      	ldr	r1, [sp, #72]	; 0x48
 8029522:	29ff      	cmp	r1, #255	; 0xff
 8029524:	f000 80de 	beq.w	80296e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8029528:	990a      	ldr	r1, [sp, #40]	; 0x28
 802952a:	8838      	ldrh	r0, [r7, #0]
 802952c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802952e:	434b      	muls	r3, r1
 8029530:	f103 0c01 	add.w	ip, r3, #1
 8029534:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8029538:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802953c:	fa5f fc83 	uxtb.w	ip, r3
 8029540:	1203      	asrs	r3, r0, #8
 8029542:	1215      	asrs	r5, r2, #8
 8029544:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8029548:	fb13 f30c 	smulbb	r3, r3, ip
 802954c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8029550:	fb05 3501 	mla	r5, r5, r1, r3
 8029554:	10c3      	asrs	r3, r0, #3
 8029556:	10d1      	asrs	r1, r2, #3
 8029558:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802955c:	fb13 f30c 	smulbb	r3, r3, ip
 8029560:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8029564:	fb01 3104 	mla	r1, r1, r4, r3
 8029568:	00c3      	lsls	r3, r0, #3
 802956a:	00d2      	lsls	r2, r2, #3
 802956c:	b2db      	uxtb	r3, r3
 802956e:	b2d2      	uxtb	r2, r2
 8029570:	fb13 f30c 	smulbb	r3, r3, ip
 8029574:	b2ad      	uxth	r5, r5
 8029576:	fb02 3304 	mla	r3, r2, r4, r3
 802957a:	b29a      	uxth	r2, r3
 802957c:	1c6b      	adds	r3, r5, #1
 802957e:	b289      	uxth	r1, r1
 8029580:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8029584:	1c53      	adds	r3, r2, #1
 8029586:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802958a:	1c4a      	adds	r2, r1, #1
 802958c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8029590:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8029594:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029598:	0949      	lsrs	r1, r1, #5
 802959a:	432b      	orrs	r3, r5
 802959c:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80295a0:	430b      	orrs	r3, r1
 80295a2:	803b      	strh	r3, [r7, #0]
 80295a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80295a6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80295a8:	4413      	add	r3, r2
 80295aa:	9321      	str	r3, [sp, #132]	; 0x84
 80295ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80295ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80295b0:	441a      	add	r2, r3
 80295b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80295b4:	9222      	str	r2, [sp, #136]	; 0x88
 80295b6:	3b01      	subs	r3, #1
 80295b8:	3702      	adds	r7, #2
 80295ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80295bc:	e689      	b.n	80292d2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80295be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80295c0:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80295c2:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80295c4:	4433      	add	r3, r6
 80295c6:	9321      	str	r3, [sp, #132]	; 0x84
 80295c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80295ca:	441c      	add	r4, r3
 80295cc:	9b08      	ldr	r3, [sp, #32]
 80295ce:	9422      	str	r4, [sp, #136]	; 0x88
 80295d0:	3b01      	subs	r3, #1
 80295d2:	9308      	str	r3, [sp, #32]
 80295d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80295d6:	3302      	adds	r3, #2
 80295d8:	9309      	str	r3, [sp, #36]	; 0x24
 80295da:	e658      	b.n	802928e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80295dc:	d028      	beq.n	8029630 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 80295de:	9b08      	ldr	r3, [sp, #32]
 80295e0:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80295e2:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80295e4:	3b01      	subs	r3, #1
 80295e6:	fb00 5003 	mla	r0, r0, r3, r5
 80295ea:	1400      	asrs	r0, r0, #16
 80295ec:	f53f ae6c 	bmi.w	80292c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80295f0:	3901      	subs	r1, #1
 80295f2:	4288      	cmp	r0, r1
 80295f4:	f6bf ae68 	bge.w	80292c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80295f8:	9924      	ldr	r1, [sp, #144]	; 0x90
 80295fa:	9822      	ldr	r0, [sp, #136]	; 0x88
 80295fc:	fb01 0303 	mla	r3, r1, r3, r0
 8029600:	141b      	asrs	r3, r3, #16
 8029602:	f53f ae61 	bmi.w	80292c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8029606:	3a01      	subs	r2, #1
 8029608:	4293      	cmp	r3, r2
 802960a:	f6bf ae5d 	bge.w	80292c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802960e:	9b08      	ldr	r3, [sp, #32]
 8029610:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8029614:	9313      	str	r3, [sp, #76]	; 0x4c
 8029616:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802961a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802961c:	2b00      	cmp	r3, #0
 802961e:	f300 8082 	bgt.w	8029726 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8029622:	9b08      	ldr	r3, [sp, #32]
 8029624:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8029628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802962a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802962e:	9309      	str	r3, [sp, #36]	; 0x24
 8029630:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8029632:	2b00      	cmp	r3, #0
 8029634:	f340 81ef 	ble.w	8029a16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8029638:	ee30 0a04 	vadd.f32	s0, s0, s8
 802963c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8029640:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029644:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029646:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802964a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802964e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029652:	eef0 6a62 	vmov.f32	s13, s5
 8029656:	ee61 7a27 	vmul.f32	s15, s2, s15
 802965a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802965e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029662:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8029666:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802966a:	eef0 6a43 	vmov.f32	s13, s6
 802966e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029672:	ee12 2a90 	vmov	r2, s5
 8029676:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802967a:	fb92 f3f3 	sdiv	r3, r2, r3
 802967e:	ee13 2a10 	vmov	r2, s6
 8029682:	9323      	str	r3, [sp, #140]	; 0x8c
 8029684:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029686:	fb92 f3f3 	sdiv	r3, r2, r3
 802968a:	9324      	str	r3, [sp, #144]	; 0x90
 802968c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802968e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8029690:	3b01      	subs	r3, #1
 8029692:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029696:	9311      	str	r3, [sp, #68]	; 0x44
 8029698:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802969a:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 802969e:	bf08      	it	eq
 80296a0:	4613      	moveq	r3, r2
 80296a2:	9308      	str	r3, [sp, #32]
 80296a4:	eeb0 3a67 	vmov.f32	s6, s15
 80296a8:	eef0 2a47 	vmov.f32	s5, s14
 80296ac:	e5e1      	b.n	8029272 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80296ae:	fb08 f505 	mul.w	r5, r8, r5
 80296b2:	fb09 5303 	mla	r3, r9, r3, r5
 80296b6:	e661      	b.n	802937c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 80296b8:	4681      	mov	r9, r0
 80296ba:	e688      	b.n	80293ce <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 80296bc:	f1c1 0210 	rsb	r2, r1, #16
 80296c0:	4341      	muls	r1, r0
 80296c2:	fb09 1902 	mla	r9, r9, r2, r1
 80296c6:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80296ca:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80296ce:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80296d2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80296d6:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80296da:	ea42 0909 	orr.w	r9, r2, r9
 80296de:	fa1f f289 	uxth.w	r2, r9
 80296e2:	e71b      	b.n	802951c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80296e4:	803a      	strh	r2, [r7, #0]
 80296e6:	e75d      	b.n	80295a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80296e8:	f115 0e01 	adds.w	lr, r5, #1
 80296ec:	f53f af5a 	bmi.w	80295a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80296f0:	4572      	cmp	r2, lr
 80296f2:	f6ff af57 	blt.w	80295a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80296f6:	f110 0e01 	adds.w	lr, r0, #1
 80296fa:	f53f af53 	bmi.w	80295a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80296fe:	4573      	cmp	r3, lr
 8029700:	f6ff af50 	blt.w	80295a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8029704:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8029706:	9502      	str	r5, [sp, #8]
 8029708:	b21b      	sxth	r3, r3
 802970a:	b212      	sxth	r2, r2
 802970c:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8029710:	9301      	str	r3, [sp, #4]
 8029712:	9200      	str	r2, [sp, #0]
 8029714:	e9cd c405 	strd	ip, r4, [sp, #20]
 8029718:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 802971c:	4639      	mov	r1, r7
 802971e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8029720:	f7ff fc04 	bl	8028f2c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8029724:	e73e      	b.n	80295a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8029726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8029728:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802972c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802972e:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8029732:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8029734:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029738:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802973a:	141f      	asrs	r7, r3, #16
 802973c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802973e:	141b      	asrs	r3, r3, #16
 8029740:	fb01 3707 	mla	r7, r1, r7, r3
 8029744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029746:	fa1f fc82 	uxth.w	ip, r2
 802974a:	eb03 0a07 	add.w	sl, r3, r7
 802974e:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8029752:	f813 9007 	ldrb.w	r9, [r3, r7]
 8029756:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802975a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802975e:	b29b      	uxth	r3, r3
 8029760:	2d00      	cmp	r5, #0
 8029762:	f000 813d 	beq.w	80299e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8029766:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802976a:	940f      	str	r4, [sp, #60]	; 0x3c
 802976c:	eb0a 0b01 	add.w	fp, sl, r1
 8029770:	fa1f fa85 	uxth.w	sl, r5
 8029774:	fb0a fc0c 	mul.w	ip, sl, ip
 8029778:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802977c:	fa1f fa8a 	uxth.w	sl, sl
 8029780:	eba0 000c 	sub.w	r0, r0, ip
 8029784:	eba3 030a 	sub.w	r3, r3, sl
 8029788:	b280      	uxth	r0, r0
 802978a:	fb08 f000 	mul.w	r0, r8, r0
 802978e:	b29b      	uxth	r3, r3
 8029790:	fb09 0303 	mla	r3, r9, r3, r0
 8029794:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8029796:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802979a:	9410      	str	r4, [sp, #64]	; 0x40
 802979c:	fb0a 3300 	mla	r3, sl, r0, r3
 80297a0:	fb0c 3304 	mla	r3, ip, r4, r3
 80297a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80297a8:	2b00      	cmp	r3, #0
 80297aa:	f000 810b 	beq.w	80299c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 80297ae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80297b0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80297b2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80297b6:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80297ba:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80297be:	f000 8114 	beq.w	80299ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 80297c2:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80297c6:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80297ca:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80297ce:	fb09 f707 	mul.w	r7, r9, r7
 80297d2:	fb0a fc0c 	mul.w	ip, sl, ip
 80297d6:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80297da:	f107 0b20 	add.w	fp, r7, #32
 80297de:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80297e2:	44cc      	add	ip, r9
 80297e4:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80297e8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80297ec:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80297f0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80297f4:	ea4c 0909 	orr.w	r9, ip, r9
 80297f8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80297fc:	8847      	ldrh	r7, [r0, #2]
 80297fe:	d019      	beq.n	8029834 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 8029800:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8029804:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8029808:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802980c:	fb08 f807 	mul.w	r8, r8, r7
 8029810:	fb0a fc0c 	mul.w	ip, sl, ip
 8029814:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8029818:	f108 0b20 	add.w	fp, r8, #32
 802981c:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8029820:	44bc      	add	ip, r7
 8029822:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8029826:	0a3f      	lsrs	r7, r7, #8
 8029828:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802982c:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8029830:	ea4c 0707 	orr.w	r7, ip, r7
 8029834:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8029838:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802983c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8029840:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8029844:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8029848:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802984c:	ea4c 0909 	orr.w	r9, ip, r9
 8029850:	ea4a 0707 	orr.w	r7, sl, r7
 8029854:	2d00      	cmp	r5, #0
 8029856:	f000 80ca 	beq.w	80299ee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 802985a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802985e:	3901      	subs	r1, #1
 8029860:	0049      	lsls	r1, r1, #1
 8029862:	3102      	adds	r1, #2
 8029864:	eb00 0c01 	add.w	ip, r0, r1
 8029868:	5a41      	ldrh	r1, [r0, r1]
 802986a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802986c:	28ff      	cmp	r0, #255	; 0xff
 802986e:	d019      	beq.n	80298a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8029870:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8029872:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8029876:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802987a:	fb04 fa01 	mul.w	sl, r4, r1
 802987e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8029882:	fb08 f800 	mul.w	r8, r8, r0
 8029886:	f10a 0020 	add.w	r0, sl, #32
 802988a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802988e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8029892:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8029896:	4441      	add	r1, r8
 8029898:	0a00      	lsrs	r0, r0, #8
 802989a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802989e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80298a2:	4301      	orrs	r1, r0
 80298a4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80298a6:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80298aa:	2cff      	cmp	r4, #255	; 0xff
 80298ac:	d01a      	beq.n	80298e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 80298ae:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80298b2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80298b6:	fb04 fa00 	mul.w	sl, r4, r0
 80298ba:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80298be:	fb08 f80c 	mul.w	r8, r8, ip
 80298c2:	f10a 0c20 	add.w	ip, sl, #32
 80298c6:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80298ca:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80298ce:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80298d2:	4440      	add	r0, r8
 80298d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80298d8:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80298dc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80298e0:	ea40 000c 	orr.w	r0, r0, ip
 80298e4:	fb15 fc02 	smulbb	ip, r5, r2
 80298e8:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80298ec:	f1c5 0810 	rsb	r8, r5, #16
 80298f0:	eba8 0802 	sub.w	r8, r8, r2
 80298f4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80298f8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80298fc:	437a      	muls	r2, r7
 80298fe:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8029902:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8029906:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802990a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802990e:	fb09 2208 	mla	r2, r9, r8, r2
 8029912:	ea4a 0101 	orr.w	r1, sl, r1
 8029916:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802991a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802991e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029922:	fb05 2201 	mla	r2, r5, r1, r2
 8029926:	ea4b 0000 	orr.w	r0, fp, r0
 802992a:	fb0c 2200 	mla	r2, ip, r0, r2
 802992e:	0d57      	lsrs	r7, r2, #21
 8029930:	0952      	lsrs	r2, r2, #5
 8029932:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8029936:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802993a:	433a      	orrs	r2, r7
 802993c:	2bff      	cmp	r3, #255	; 0xff
 802993e:	b292      	uxth	r2, r2
 8029940:	d102      	bne.n	8029948 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8029942:	9912      	ldr	r1, [sp, #72]	; 0x48
 8029944:	29ff      	cmp	r1, #255	; 0xff
 8029946:	d063      	beq.n	8029a10 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 8029948:	980a      	ldr	r0, [sp, #40]	; 0x28
 802994a:	f8be 1000 	ldrh.w	r1, [lr]
 802994e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8029950:	4343      	muls	r3, r0
 8029952:	1c58      	adds	r0, r3, #1
 8029954:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8029958:	ea6f 2323 	mvn.w	r3, r3, asr #8
 802995c:	1208      	asrs	r0, r1, #8
 802995e:	b2db      	uxtb	r3, r3
 8029960:	1215      	asrs	r5, r2, #8
 8029962:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8029966:	fb10 f003 	smulbb	r0, r0, r3
 802996a:	10cf      	asrs	r7, r1, #3
 802996c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8029970:	00c9      	lsls	r1, r1, #3
 8029972:	fb05 0504 	mla	r5, r5, r4, r0
 8029976:	b2c9      	uxtb	r1, r1
 8029978:	10d0      	asrs	r0, r2, #3
 802997a:	00d2      	lsls	r2, r2, #3
 802997c:	fb11 f103 	smulbb	r1, r1, r3
 8029980:	b2d2      	uxtb	r2, r2
 8029982:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8029986:	fb02 1204 	mla	r2, r2, r4, r1
 802998a:	fb17 f703 	smulbb	r7, r7, r3
 802998e:	b2ad      	uxth	r5, r5
 8029990:	b292      	uxth	r2, r2
 8029992:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029996:	fb00 7004 	mla	r0, r0, r4, r7
 802999a:	1c6b      	adds	r3, r5, #1
 802999c:	1c57      	adds	r7, r2, #1
 802999e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80299a2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80299a6:	b280      	uxth	r0, r0
 80299a8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80299ac:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80299b0:	433d      	orrs	r5, r7
 80299b2:	1c47      	adds	r7, r0, #1
 80299b4:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 80299b8:	097f      	lsrs	r7, r7, #5
 80299ba:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80299be:	433d      	orrs	r5, r7
 80299c0:	f8ae 5000 	strh.w	r5, [lr]
 80299c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80299c6:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80299c8:	4413      	add	r3, r2
 80299ca:	9321      	str	r3, [sp, #132]	; 0x84
 80299cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80299ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80299d0:	441a      	add	r2, r3
 80299d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80299d4:	9222      	str	r2, [sp, #136]	; 0x88
 80299d6:	3b01      	subs	r3, #1
 80299d8:	f10e 0e02 	add.w	lr, lr, #2
 80299dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80299de:	e61c      	b.n	802961a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 80299e0:	fb08 f000 	mul.w	r0, r8, r0
 80299e4:	fb09 0303 	mla	r3, r9, r3, r0
 80299e8:	e6dc      	b.n	80297a4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 80299ea:	46b9      	mov	r9, r7
 80299ec:	e704      	b.n	80297f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 80299ee:	f1c2 0110 	rsb	r1, r2, #16
 80299f2:	437a      	muls	r2, r7
 80299f4:	fb09 2901 	mla	r9, r9, r1, r2
 80299f8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80299fc:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8029a00:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8029a04:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029a08:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8029a0c:	4302      	orrs	r2, r0
 8029a0e:	e795      	b.n	802993c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8029a10:	f8ae 2000 	strh.w	r2, [lr]
 8029a14:	e7d6      	b.n	80299c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8029a16:	b017      	add	sp, #92	; 0x5c
 8029a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029a1c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8029a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029a20:	b085      	sub	sp, #20
 8029a22:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8029a26:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8029a2a:	9103      	str	r1, [sp, #12]
 8029a2c:	fb00 7406 	mla	r4, r0, r6, r7
 8029a30:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8029a34:	2800      	cmp	r0, #0
 8029a36:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8029a3a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8029a3e:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8029a42:	9501      	str	r5, [sp, #4]
 8029a44:	eb02 0904 	add.w	r9, r2, r4
 8029a48:	f2c0 8141 	blt.w	8029cce <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8029a4c:	4583      	cmp	fp, r0
 8029a4e:	f340 813e 	ble.w	8029cce <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8029a52:	2f00      	cmp	r7, #0
 8029a54:	f2c0 8137 	blt.w	8029cc6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8029a58:	42be      	cmp	r6, r7
 8029a5a:	f340 8134 	ble.w	8029cc6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8029a5e:	f812 c004 	ldrb.w	ip, [r2, r4]
 8029a62:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8029a66:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8029a6a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8029a6e:	4355      	muls	r5, r2
 8029a70:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029a74:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8029a78:	fb0c f203 	mul.w	r2, ip, r3
 8029a7c:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8029a80:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8029a84:	441d      	add	r5, r3
 8029a86:	f102 0320 	add.w	r3, r2, #32
 8029a8a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029a8e:	0a1b      	lsrs	r3, r3, #8
 8029a90:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 8029a94:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8029a98:	431c      	orrs	r4, r3
 8029a9a:	1c7b      	adds	r3, r7, #1
 8029a9c:	f100 811c 	bmi.w	8029cd8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8029aa0:	429e      	cmp	r6, r3
 8029aa2:	f340 8119 	ble.w	8029cd8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8029aa6:	2900      	cmp	r1, #0
 8029aa8:	f000 8119 	beq.w	8029cde <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8029aac:	9a01      	ldr	r2, [sp, #4]
 8029aae:	f899 3001 	ldrb.w	r3, [r9, #1]
 8029ab2:	8855      	ldrh	r5, [r2, #2]
 8029ab4:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8029ab8:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8029abc:	fb08 f802 	mul.w	r8, r8, r2
 8029ac0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8029ac4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8029ac8:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8029acc:	435d      	muls	r5, r3
 8029ace:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8029ad2:	44d0      	add	r8, sl
 8029ad4:	f105 0a20 	add.w	sl, r5, #32
 8029ad8:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8029adc:	0a2d      	lsrs	r5, r5, #8
 8029ade:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 8029ae2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8029ae6:	432a      	orrs	r2, r5
 8029ae8:	3001      	adds	r0, #1
 8029aea:	f100 80fe 	bmi.w	8029cea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8029aee:	4583      	cmp	fp, r0
 8029af0:	f340 80fb 	ble.w	8029cea <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8029af4:	f1be 0f00 	cmp.w	lr, #0
 8029af8:	f000 80fc 	beq.w	8029cf4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8029afc:	2f00      	cmp	r7, #0
 8029afe:	f2c0 80f1 	blt.w	8029ce4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8029b02:	42be      	cmp	r6, r7
 8029b04:	f340 80ee 	ble.w	8029ce4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8029b08:	9801      	ldr	r0, [sp, #4]
 8029b0a:	f819 5006 	ldrb.w	r5, [r9, r6]
 8029b0e:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 8029b12:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8029b16:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8029b1a:	fb0a fa00 	mul.w	sl, sl, r0
 8029b1e:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8029b22:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8029b26:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8029b2a:	fb05 f808 	mul.w	r8, r5, r8
 8029b2e:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8029b32:	4482      	add	sl, r0
 8029b34:	f108 0020 	add.w	r0, r8, #32
 8029b38:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8029b3c:	0a00      	lsrs	r0, r0, #8
 8029b3e:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 8029b42:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029b46:	ea4b 0b00 	orr.w	fp, fp, r0
 8029b4a:	3701      	adds	r7, #1
 8029b4c:	f100 80d7 	bmi.w	8029cfe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8029b50:	42be      	cmp	r6, r7
 8029b52:	f340 80d4 	ble.w	8029cfe <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8029b56:	2900      	cmp	r1, #0
 8029b58:	f000 80d4 	beq.w	8029d04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 8029b5c:	3601      	adds	r6, #1
 8029b5e:	9801      	ldr	r0, [sp, #4]
 8029b60:	f819 7006 	ldrb.w	r7, [r9, r6]
 8029b64:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 8029b68:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8029b6c:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 8029b70:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029b74:	fb09 f906 	mul.w	r9, r9, r6
 8029b78:	fb07 f800 	mul.w	r8, r7, r0
 8029b7c:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8029b80:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 8029b84:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8029b88:	44d1      	add	r9, sl
 8029b8a:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8029b8e:	f108 0020 	add.w	r0, r8, #32
 8029b92:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8029b96:	0a00      	lsrs	r0, r0, #8
 8029b98:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029b9c:	4330      	orrs	r0, r6
 8029b9e:	b28e      	uxth	r6, r1
 8029ba0:	fa1f f98e 	uxth.w	r9, lr
 8029ba4:	fb06 f809 	mul.w	r8, r6, r9
 8029ba8:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8029bac:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8029bb0:	0136      	lsls	r6, r6, #4
 8029bb2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8029bb6:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8029bba:	9601      	str	r6, [sp, #4]
 8029bbc:	ea4a 0404 	orr.w	r4, sl, r4
 8029bc0:	fa1f f689 	uxth.w	r6, r9
 8029bc4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8029bc8:	fb11 f90e 	smulbb	r9, r1, lr
 8029bcc:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8029bd0:	9602      	str	r6, [sp, #8]
 8029bd2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8029bd6:	4626      	mov	r6, r4
 8029bd8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8029bdc:	f1ce 0410 	rsb	r4, lr, #16
 8029be0:	1a64      	subs	r4, r4, r1
 8029be2:	ea4a 0202 	orr.w	r2, sl, r2
 8029be6:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8029bea:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8029bee:	434a      	muls	r2, r1
 8029bf0:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8029bf4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8029bf8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029bfc:	fb04 2406 	mla	r4, r4, r6, r2
 8029c00:	ea4a 0000 	orr.w	r0, sl, r0
 8029c04:	fb09 4200 	mla	r2, r9, r0, r4
 8029c08:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8029c0c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8029c10:	9801      	ldr	r0, [sp, #4]
 8029c12:	9903      	ldr	r1, [sp, #12]
 8029c14:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8029c18:	ea44 0b0b 	orr.w	fp, r4, fp
 8029c1c:	9c02      	ldr	r4, [sp, #8]
 8029c1e:	8809      	ldrh	r1, [r1, #0]
 8029c20:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8029c24:	1b00      	subs	r0, r0, r4
 8029c26:	9c01      	ldr	r4, [sp, #4]
 8029c28:	eba4 0608 	sub.w	r6, r4, r8
 8029c2c:	b2b6      	uxth	r6, r6
 8029c2e:	b280      	uxth	r0, r0
 8029c30:	4373      	muls	r3, r6
 8029c32:	fb0c 3300 	mla	r3, ip, r0, r3
 8029c36:	9802      	ldr	r0, [sp, #8]
 8029c38:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8029c3c:	fb00 3505 	mla	r5, r0, r5, r3
 8029c40:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8029c44:	fb08 5707 	mla	r7, r8, r7, r5
 8029c48:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8029c4c:	120b      	asrs	r3, r1, #8
 8029c4e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8029c52:	ea6f 2727 	mvn.w	r7, r7, asr #8
 8029c56:	b2ff      	uxtb	r7, r7
 8029c58:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029c5c:	10c8      	asrs	r0, r1, #3
 8029c5e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8029c62:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8029c66:	00c9      	lsls	r1, r1, #3
 8029c68:	437b      	muls	r3, r7
 8029c6a:	ea42 0e0e 	orr.w	lr, r2, lr
 8029c6e:	b2c9      	uxtb	r1, r1
 8029c70:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029c74:	fa1f f28e 	uxth.w	r2, lr
 8029c78:	4378      	muls	r0, r7
 8029c7a:	434f      	muls	r7, r1
 8029c7c:	1c59      	adds	r1, r3, #1
 8029c7e:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8029c82:	1213      	asrs	r3, r2, #8
 8029c84:	f023 0307 	bic.w	r3, r3, #7
 8029c88:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8029c8c:	1c41      	adds	r1, r0, #1
 8029c8e:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8029c92:	10d1      	asrs	r1, r2, #3
 8029c94:	f021 0103 	bic.w	r1, r1, #3
 8029c98:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8029c9c:	021b      	lsls	r3, r3, #8
 8029c9e:	00c9      	lsls	r1, r1, #3
 8029ca0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8029ca4:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8029ca8:	430b      	orrs	r3, r1
 8029caa:	1c79      	adds	r1, r7, #1
 8029cac:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8029cb0:	00d2      	lsls	r2, r2, #3
 8029cb2:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8029cb6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029cba:	431a      	orrs	r2, r3
 8029cbc:	9b03      	ldr	r3, [sp, #12]
 8029cbe:	801a      	strh	r2, [r3, #0]
 8029cc0:	b005      	add	sp, #20
 8029cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029cc6:	f04f 0c00 	mov.w	ip, #0
 8029cca:	4664      	mov	r4, ip
 8029ccc:	e6e5      	b.n	8029a9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8029cce:	2300      	movs	r3, #0
 8029cd0:	469c      	mov	ip, r3
 8029cd2:	461a      	mov	r2, r3
 8029cd4:	461c      	mov	r4, r3
 8029cd6:	e707      	b.n	8029ae8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8029cd8:	2300      	movs	r3, #0
 8029cda:	461a      	mov	r2, r3
 8029cdc:	e704      	b.n	8029ae8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8029cde:	460b      	mov	r3, r1
 8029ce0:	460a      	mov	r2, r1
 8029ce2:	e701      	b.n	8029ae8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8029ce4:	2500      	movs	r5, #0
 8029ce6:	46ab      	mov	fp, r5
 8029ce8:	e72f      	b.n	8029b4a <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8029cea:	2700      	movs	r7, #0
 8029cec:	463d      	mov	r5, r7
 8029cee:	4638      	mov	r0, r7
 8029cf0:	46bb      	mov	fp, r7
 8029cf2:	e754      	b.n	8029b9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8029cf4:	4677      	mov	r7, lr
 8029cf6:	4675      	mov	r5, lr
 8029cf8:	4670      	mov	r0, lr
 8029cfa:	46f3      	mov	fp, lr
 8029cfc:	e74f      	b.n	8029b9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8029cfe:	2700      	movs	r7, #0
 8029d00:	4638      	mov	r0, r7
 8029d02:	e74c      	b.n	8029b9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8029d04:	460f      	mov	r7, r1
 8029d06:	4608      	mov	r0, r1
 8029d08:	e749      	b.n	8029b9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08029d0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029d10:	b093      	sub	sp, #76	; 0x4c
 8029d12:	9210      	str	r2, [sp, #64]	; 0x40
 8029d14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8029d16:	910e      	str	r1, [sp, #56]	; 0x38
 8029d18:	9306      	str	r3, [sp, #24]
 8029d1a:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8029d1e:	9011      	str	r0, [sp, #68]	; 0x44
 8029d20:	6850      	ldr	r0, [r2, #4]
 8029d22:	6812      	ldr	r2, [r2, #0]
 8029d24:	fb00 1303 	mla	r3, r0, r3, r1
 8029d28:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8029d2c:	9307      	str	r3, [sp, #28]
 8029d2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029d30:	681b      	ldr	r3, [r3, #0]
 8029d32:	9308      	str	r3, [sp, #32]
 8029d34:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029d36:	685b      	ldr	r3, [r3, #4]
 8029d38:	9309      	str	r3, [sp, #36]	; 0x24
 8029d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8029d3c:	2b00      	cmp	r3, #0
 8029d3e:	dc03      	bgt.n	8029d48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8029d40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8029d42:	2b00      	cmp	r3, #0
 8029d44:	f340 83b4 	ble.w	802a4b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8029d48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029d4a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029d4e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029d52:	1e48      	subs	r0, r1, #1
 8029d54:	1e55      	subs	r5, r2, #1
 8029d56:	9b06      	ldr	r3, [sp, #24]
 8029d58:	2b00      	cmp	r3, #0
 8029d5a:	f340 8163 	ble.w	802a024 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 8029d5e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8029d60:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8029d62:	1436      	asrs	r6, r6, #16
 8029d64:	ea4f 4323 	mov.w	r3, r3, asr #16
 8029d68:	d406      	bmi.n	8029d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8029d6a:	4286      	cmp	r6, r0
 8029d6c:	da04      	bge.n	8029d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8029d6e:	2b00      	cmp	r3, #0
 8029d70:	db02      	blt.n	8029d78 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8029d72:	42ab      	cmp	r3, r5
 8029d74:	f2c0 8157 	blt.w	802a026 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8029d78:	3601      	adds	r6, #1
 8029d7a:	f100 8144 	bmi.w	802a006 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8029d7e:	42b1      	cmp	r1, r6
 8029d80:	f2c0 8141 	blt.w	802a006 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8029d84:	3301      	adds	r3, #1
 8029d86:	f100 813e 	bmi.w	802a006 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8029d8a:	429a      	cmp	r2, r3
 8029d8c:	f2c0 813b 	blt.w	802a006 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8029d90:	9b06      	ldr	r3, [sp, #24]
 8029d92:	9f07      	ldr	r7, [sp, #28]
 8029d94:	930f      	str	r3, [sp, #60]	; 0x3c
 8029d96:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8029d9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8029d9c:	2b00      	cmp	r3, #0
 8029d9e:	f340 8164 	ble.w	802a06a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8029da2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8029da4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8029da6:	1418      	asrs	r0, r3, #16
 8029da8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8029daa:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8029dae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8029db0:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8029db4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029db6:	142d      	asrs	r5, r5, #16
 8029db8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8029dbc:	f100 81ee 	bmi.w	802a19c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8029dc0:	f102 3eff 	add.w	lr, r2, #4294967295
 8029dc4:	4575      	cmp	r5, lr
 8029dc6:	f280 81e9 	bge.w	802a19c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8029dca:	2800      	cmp	r0, #0
 8029dcc:	f2c0 81e6 	blt.w	802a19c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8029dd0:	f103 3eff 	add.w	lr, r3, #4294967295
 8029dd4:	4570      	cmp	r0, lr
 8029dd6:	f280 81e1 	bge.w	802a19c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8029dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029ddc:	b212      	sxth	r2, r2
 8029dde:	fb00 5002 	mla	r0, r0, r2, r5
 8029de2:	fa1f fe81 	uxth.w	lr, r1
 8029de6:	eb03 0a00 	add.w	sl, r3, r0
 8029dea:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8029dee:	f813 9000 	ldrb.w	r9, [r3, r0]
 8029df2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8029df6:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8029dfa:	b29b      	uxth	r3, r3
 8029dfc:	f1bc 0f00 	cmp.w	ip, #0
 8029e00:	f000 8179 	beq.w	802a0f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8029e04:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8029e08:	940a      	str	r4, [sp, #40]	; 0x28
 8029e0a:	eb0a 0b02 	add.w	fp, sl, r2
 8029e0e:	fa1f fa8c 	uxth.w	sl, ip
 8029e12:	fb0a fe0e 	mul.w	lr, sl, lr
 8029e16:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8029e1a:	fa1f fa8a 	uxth.w	sl, sl
 8029e1e:	eba5 050e 	sub.w	r5, r5, lr
 8029e22:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8029e26:	940b      	str	r4, [sp, #44]	; 0x2c
 8029e28:	eba3 030a 	sub.w	r3, r3, sl
 8029e2c:	b2ad      	uxth	r5, r5
 8029e2e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8029e30:	b29b      	uxth	r3, r3
 8029e32:	fb08 f505 	mul.w	r5, r8, r5
 8029e36:	fb09 5303 	mla	r3, r9, r3, r5
 8029e3a:	fb0a 3304 	mla	r3, sl, r4, r3
 8029e3e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8029e40:	fb0e 3304 	mla	r3, lr, r4, r3
 8029e44:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029e48:	2b00      	cmp	r3, #0
 8029e4a:	f000 80cf 	beq.w	8029fec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8029e4e:	9c08      	ldr	r4, [sp, #32]
 8029e50:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8029e54:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8029e58:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8029e5c:	f000 8150 	beq.w	802a100 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8029e60:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8029e64:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8029e68:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029e6c:	fb09 f000 	mul.w	r0, r9, r0
 8029e70:	fb0a fe0e 	mul.w	lr, sl, lr
 8029e74:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8029e78:	f100 0b20 	add.w	fp, r0, #32
 8029e7c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8029e80:	44ce      	add	lr, r9
 8029e82:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8029e86:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029e8a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8029e8e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8029e92:	ea4e 0909 	orr.w	r9, lr, r9
 8029e96:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8029e9a:	8868      	ldrh	r0, [r5, #2]
 8029e9c:	d019      	beq.n	8029ed2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8029e9e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8029ea2:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8029ea6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029eaa:	fb08 f800 	mul.w	r8, r8, r0
 8029eae:	fb0a fe0e 	mul.w	lr, sl, lr
 8029eb2:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8029eb6:	f108 0b20 	add.w	fp, r8, #32
 8029eba:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8029ebe:	4486      	add	lr, r0
 8029ec0:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8029ec4:	0a00      	lsrs	r0, r0, #8
 8029ec6:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8029eca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8029ece:	ea4e 0000 	orr.w	r0, lr, r0
 8029ed2:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8029ed6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8029eda:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8029ede:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8029ee2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8029ee6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8029eea:	ea4e 0909 	orr.w	r9, lr, r9
 8029eee:	ea4a 0000 	orr.w	r0, sl, r0
 8029ef2:	f1bc 0f00 	cmp.w	ip, #0
 8029ef6:	f000 8105 	beq.w	802a104 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8029efa:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8029efe:	3a01      	subs	r2, #1
 8029f00:	0052      	lsls	r2, r2, #1
 8029f02:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8029f04:	3202      	adds	r2, #2
 8029f06:	2cff      	cmp	r4, #255	; 0xff
 8029f08:	eb05 0e02 	add.w	lr, r5, r2
 8029f0c:	5aaa      	ldrh	r2, [r5, r2]
 8029f0e:	d018      	beq.n	8029f42 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8029f10:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8029f14:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029f18:	fb04 fa02 	mul.w	sl, r4, r2
 8029f1c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8029f20:	fb08 f805 	mul.w	r8, r8, r5
 8029f24:	f10a 0520 	add.w	r5, sl, #32
 8029f28:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8029f2c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8029f30:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8029f34:	4442      	add	r2, r8
 8029f36:	0a2d      	lsrs	r5, r5, #8
 8029f38:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8029f3c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8029f40:	432a      	orrs	r2, r5
 8029f42:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8029f44:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8029f48:	2cff      	cmp	r4, #255	; 0xff
 8029f4a:	d01a      	beq.n	8029f82 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8029f4c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8029f50:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8029f54:	fb04 fa05 	mul.w	sl, r4, r5
 8029f58:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8029f5c:	fb08 f80e 	mul.w	r8, r8, lr
 8029f60:	f10a 0e20 	add.w	lr, sl, #32
 8029f64:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8029f68:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8029f6c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8029f70:	4445      	add	r5, r8
 8029f72:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029f76:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8029f7a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8029f7e:	ea45 050e 	orr.w	r5, r5, lr
 8029f82:	fb1c fe01 	smulbb	lr, ip, r1
 8029f86:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8029f8a:	f1cc 0810 	rsb	r8, ip, #16
 8029f8e:	eba8 0801 	sub.w	r8, r8, r1
 8029f92:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8029f96:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8029f9a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8029f9e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8029fa2:	4341      	muls	r1, r0
 8029fa4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8029fa8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8029fac:	ea4a 0202 	orr.w	r2, sl, r2
 8029fb0:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8029fb4:	fb09 1108 	mla	r1, r9, r8, r1
 8029fb8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8029fbc:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8029fc0:	fb0c 1102 	mla	r1, ip, r2, r1
 8029fc4:	ea4b 0505 	orr.w	r5, fp, r5
 8029fc8:	fb0e 1e05 	mla	lr, lr, r5, r1
 8029fcc:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8029fd0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8029fd4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8029fd8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8029fdc:	ea42 0e0e 	orr.w	lr, r2, lr
 8029fe0:	fa1f f28e 	uxth.w	r2, lr
 8029fe4:	2bff      	cmp	r3, #255	; 0xff
 8029fe6:	f040 80a1 	bne.w	802a12c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8029fea:	803a      	strh	r2, [r7, #0]
 8029fec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8029fee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8029ff0:	4413      	add	r3, r2
 8029ff2:	931d      	str	r3, [sp, #116]	; 0x74
 8029ff4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8029ff6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029ff8:	441a      	add	r2, r3
 8029ffa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8029ffc:	921e      	str	r2, [sp, #120]	; 0x78
 8029ffe:	3b01      	subs	r3, #1
 802a000:	3702      	adds	r7, #2
 802a002:	930f      	str	r3, [sp, #60]	; 0x3c
 802a004:	e6c9      	b.n	8029d9a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802a006:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802a008:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 802a00a:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 802a00c:	4433      	add	r3, r6
 802a00e:	931d      	str	r3, [sp, #116]	; 0x74
 802a010:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a012:	441c      	add	r4, r3
 802a014:	9b06      	ldr	r3, [sp, #24]
 802a016:	941e      	str	r4, [sp, #120]	; 0x78
 802a018:	3b01      	subs	r3, #1
 802a01a:	9306      	str	r3, [sp, #24]
 802a01c:	9b07      	ldr	r3, [sp, #28]
 802a01e:	3302      	adds	r3, #2
 802a020:	9307      	str	r3, [sp, #28]
 802a022:	e698      	b.n	8029d56 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802a024:	d028      	beq.n	802a078 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802a026:	9b06      	ldr	r3, [sp, #24]
 802a028:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802a02a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802a02c:	3b01      	subs	r3, #1
 802a02e:	fb00 5003 	mla	r0, r0, r3, r5
 802a032:	1400      	asrs	r0, r0, #16
 802a034:	f53f aeac 	bmi.w	8029d90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802a038:	3901      	subs	r1, #1
 802a03a:	4288      	cmp	r0, r1
 802a03c:	f6bf aea8 	bge.w	8029d90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802a040:	9920      	ldr	r1, [sp, #128]	; 0x80
 802a042:	981e      	ldr	r0, [sp, #120]	; 0x78
 802a044:	fb01 0303 	mla	r3, r1, r3, r0
 802a048:	141b      	asrs	r3, r3, #16
 802a04a:	f53f aea1 	bmi.w	8029d90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802a04e:	3a01      	subs	r2, #1
 802a050:	4293      	cmp	r3, r2
 802a052:	f6bf ae9d 	bge.w	8029d90 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802a056:	9b06      	ldr	r3, [sp, #24]
 802a058:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802a05c:	930f      	str	r3, [sp, #60]	; 0x3c
 802a05e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802a062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802a064:	2b00      	cmp	r3, #0
 802a066:	f300 80b6 	bgt.w	802a1d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 802a06a:	9b06      	ldr	r3, [sp, #24]
 802a06c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802a070:	9b07      	ldr	r3, [sp, #28]
 802a072:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802a076:	9307      	str	r3, [sp, #28]
 802a078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802a07a:	2b00      	cmp	r3, #0
 802a07c:	f340 8218 	ble.w	802a4b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 802a080:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a084:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a088:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a08c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802a08e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a092:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a096:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a09a:	eef0 6a62 	vmov.f32	s13, s5
 802a09e:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a0a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a0a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a0aa:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 802a0ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a0b2:	eef0 6a43 	vmov.f32	s13, s6
 802a0b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a0ba:	ee12 2a90 	vmov	r2, s5
 802a0be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a0c2:	fb92 f3f3 	sdiv	r3, r2, r3
 802a0c6:	ee13 2a10 	vmov	r2, s6
 802a0ca:	931f      	str	r3, [sp, #124]	; 0x7c
 802a0cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802a0ce:	fb92 f3f3 	sdiv	r3, r2, r3
 802a0d2:	9320      	str	r3, [sp, #128]	; 0x80
 802a0d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802a0d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802a0d8:	3b01      	subs	r3, #1
 802a0da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a0de:	930e      	str	r3, [sp, #56]	; 0x38
 802a0e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802a0e2:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 802a0e6:	bf08      	it	eq
 802a0e8:	4613      	moveq	r3, r2
 802a0ea:	9306      	str	r3, [sp, #24]
 802a0ec:	eeb0 3a67 	vmov.f32	s6, s15
 802a0f0:	eef0 2a47 	vmov.f32	s5, s14
 802a0f4:	e621      	b.n	8029d3a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802a0f6:	fb08 f505 	mul.w	r5, r8, r5
 802a0fa:	fb09 5303 	mla	r3, r9, r3, r5
 802a0fe:	e6a1      	b.n	8029e44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 802a100:	4681      	mov	r9, r0
 802a102:	e6c8      	b.n	8029e96 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802a104:	f1c1 0210 	rsb	r2, r1, #16
 802a108:	4341      	muls	r1, r0
 802a10a:	fb09 1902 	mla	r9, r9, r2, r1
 802a10e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802a112:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802a116:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802a11a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a11e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802a122:	ea42 0909 	orr.w	r9, r2, r9
 802a126:	fa1f f289 	uxth.w	r2, r9
 802a12a:	e75b      	b.n	8029fe4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802a12c:	f8b7 c000 	ldrh.w	ip, [r7]
 802a130:	43db      	mvns	r3, r3
 802a132:	ea4f 202c 	mov.w	r0, ip, asr #8
 802a136:	fa5f fe83 	uxtb.w	lr, r3
 802a13a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802a13e:	fb00 f00e 	mul.w	r0, r0, lr
 802a142:	1c41      	adds	r1, r0, #1
 802a144:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802a148:	1211      	asrs	r1, r2, #8
 802a14a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802a14e:	f021 0107 	bic.w	r1, r1, #7
 802a152:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802a156:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802a15a:	48d7      	ldr	r0, [pc, #860]	; (802a4b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 802a15c:	fb05 f50e 	mul.w	r5, r5, lr
 802a160:	b2c9      	uxtb	r1, r1
 802a162:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 802a166:	1c69      	adds	r1, r5, #1
 802a168:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 802a16c:	10d1      	asrs	r1, r2, #3
 802a16e:	f021 0103 	bic.w	r1, r1, #3
 802a172:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 802a176:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802a17a:	b2db      	uxtb	r3, r3
 802a17c:	00c9      	lsls	r1, r1, #3
 802a17e:	fb03 f30e 	mul.w	r3, r3, lr
 802a182:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a186:	4301      	orrs	r1, r0
 802a188:	1c58      	adds	r0, r3, #1
 802a18a:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802a18e:	00d2      	lsls	r2, r2, #3
 802a190:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802a194:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a198:	430a      	orrs	r2, r1
 802a19a:	e726      	b.n	8029fea <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 802a19c:	f115 0e01 	adds.w	lr, r5, #1
 802a1a0:	f53f af24 	bmi.w	8029fec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802a1a4:	4572      	cmp	r2, lr
 802a1a6:	f6ff af21 	blt.w	8029fec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802a1aa:	f110 0e01 	adds.w	lr, r0, #1
 802a1ae:	f53f af1d 	bmi.w	8029fec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802a1b2:	4573      	cmp	r3, lr
 802a1b4:	f6ff af1a 	blt.w	8029fec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802a1b8:	b21b      	sxth	r3, r3
 802a1ba:	b212      	sxth	r2, r2
 802a1bc:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 802a1c0:	e9cd 5002 	strd	r5, r0, [sp, #8]
 802a1c4:	9301      	str	r3, [sp, #4]
 802a1c6:	9200      	str	r2, [sp, #0]
 802a1c8:	4639      	mov	r1, r7
 802a1ca:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 802a1ce:	9811      	ldr	r0, [sp, #68]	; 0x44
 802a1d0:	f7ff fc24 	bl	8029a1c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 802a1d4:	e70a      	b.n	8029fec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802a1d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802a1d8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802a1dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802a1de:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802a1e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a1e4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a1e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802a1ea:	141f      	asrs	r7, r3, #16
 802a1ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802a1ee:	141b      	asrs	r3, r3, #16
 802a1f0:	fb01 3707 	mla	r7, r1, r7, r3
 802a1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a1f6:	fa1f fc82 	uxth.w	ip, r2
 802a1fa:	eb03 0a07 	add.w	sl, r3, r7
 802a1fe:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802a202:	f813 9007 	ldrb.w	r9, [r3, r7]
 802a206:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802a20a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802a20e:	b29b      	uxth	r3, r3
 802a210:	2d00      	cmp	r5, #0
 802a212:	f000 80fe 	beq.w	802a412 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 802a216:	f81a 4001 	ldrb.w	r4, [sl, r1]
 802a21a:	940c      	str	r4, [sp, #48]	; 0x30
 802a21c:	eb0a 0b01 	add.w	fp, sl, r1
 802a220:	fa1f fa85 	uxth.w	sl, r5
 802a224:	fb0a fc0c 	mul.w	ip, sl, ip
 802a228:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802a22c:	fa1f fa8a 	uxth.w	sl, sl
 802a230:	eba0 000c 	sub.w	r0, r0, ip
 802a234:	eba3 030a 	sub.w	r3, r3, sl
 802a238:	b280      	uxth	r0, r0
 802a23a:	fb08 f000 	mul.w	r0, r8, r0
 802a23e:	b29b      	uxth	r3, r3
 802a240:	fb09 0303 	mla	r3, r9, r3, r0
 802a244:	980c      	ldr	r0, [sp, #48]	; 0x30
 802a246:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802a24a:	940d      	str	r4, [sp, #52]	; 0x34
 802a24c:	fb0a 3300 	mla	r3, sl, r0, r3
 802a250:	fb0c 3304 	mla	r3, ip, r4, r3
 802a254:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a258:	2b00      	cmp	r3, #0
 802a25a:	f000 80cc 	beq.w	802a3f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 802a25e:	9808      	ldr	r0, [sp, #32]
 802a260:	9c08      	ldr	r4, [sp, #32]
 802a262:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802a266:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 802a26a:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802a26e:	f000 80d5 	beq.w	802a41c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 802a272:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802a276:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802a27a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802a27e:	fb09 f707 	mul.w	r7, r9, r7
 802a282:	fb0a fc0c 	mul.w	ip, sl, ip
 802a286:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 802a28a:	f107 0b20 	add.w	fp, r7, #32
 802a28e:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802a292:	44cc      	add	ip, r9
 802a294:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 802a298:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a29c:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802a2a0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802a2a4:	ea4c 0909 	orr.w	r9, ip, r9
 802a2a8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802a2ac:	8847      	ldrh	r7, [r0, #2]
 802a2ae:	d019      	beq.n	802a2e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 802a2b0:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802a2b4:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802a2b8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802a2bc:	fb08 f807 	mul.w	r8, r8, r7
 802a2c0:	fb0a fc0c 	mul.w	ip, sl, ip
 802a2c4:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 802a2c8:	f108 0b20 	add.w	fp, r8, #32
 802a2cc:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802a2d0:	44bc      	add	ip, r7
 802a2d2:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802a2d6:	0a3f      	lsrs	r7, r7, #8
 802a2d8:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 802a2dc:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802a2e0:	ea4c 0707 	orr.w	r7, ip, r7
 802a2e4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 802a2e8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 802a2ec:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 802a2f0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802a2f4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802a2f8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802a2fc:	ea4c 0909 	orr.w	r9, ip, r9
 802a300:	ea4a 0707 	orr.w	r7, sl, r7
 802a304:	2d00      	cmp	r5, #0
 802a306:	f000 808b 	beq.w	802a420 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 802a30a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802a30e:	3901      	subs	r1, #1
 802a310:	0049      	lsls	r1, r1, #1
 802a312:	3102      	adds	r1, #2
 802a314:	eb00 0c01 	add.w	ip, r0, r1
 802a318:	5a41      	ldrh	r1, [r0, r1]
 802a31a:	980c      	ldr	r0, [sp, #48]	; 0x30
 802a31c:	28ff      	cmp	r0, #255	; 0xff
 802a31e:	d019      	beq.n	802a354 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 802a320:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802a322:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 802a326:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a32a:	fb04 fa01 	mul.w	sl, r4, r1
 802a32e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802a332:	fb08 f800 	mul.w	r8, r8, r0
 802a336:	f10a 0020 	add.w	r0, sl, #32
 802a33a:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802a33e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802a342:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802a346:	4441      	add	r1, r8
 802a348:	0a00      	lsrs	r0, r0, #8
 802a34a:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802a34e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a352:	4301      	orrs	r1, r0
 802a354:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802a356:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 802a35a:	2cff      	cmp	r4, #255	; 0xff
 802a35c:	d01a      	beq.n	802a394 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 802a35e:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802a362:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a366:	fb04 fa00 	mul.w	sl, r4, r0
 802a36a:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802a36e:	fb08 f80c 	mul.w	r8, r8, ip
 802a372:	f10a 0c20 	add.w	ip, sl, #32
 802a376:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 802a37a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802a37e:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802a382:	4440      	add	r0, r8
 802a384:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a388:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 802a38c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802a390:	ea40 000c 	orr.w	r0, r0, ip
 802a394:	fb15 fc02 	smulbb	ip, r5, r2
 802a398:	ea4f 0cec 	mov.w	ip, ip, asr #3
 802a39c:	f1c5 0810 	rsb	r8, r5, #16
 802a3a0:	eba8 0802 	sub.w	r8, r8, r2
 802a3a4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802a3a8:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 802a3ac:	437a      	muls	r2, r7
 802a3ae:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802a3b2:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802a3b6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802a3ba:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802a3be:	fb09 2208 	mla	r2, r9, r8, r2
 802a3c2:	ea4a 0101 	orr.w	r1, sl, r1
 802a3c6:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 802a3ca:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802a3ce:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802a3d2:	fb05 2201 	mla	r2, r5, r1, r2
 802a3d6:	ea4b 0000 	orr.w	r0, fp, r0
 802a3da:	fb0c 2200 	mla	r2, ip, r0, r2
 802a3de:	0d57      	lsrs	r7, r2, #21
 802a3e0:	0952      	lsrs	r2, r2, #5
 802a3e2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802a3e6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802a3ea:	433a      	orrs	r2, r7
 802a3ec:	2bff      	cmp	r3, #255	; 0xff
 802a3ee:	b292      	uxth	r2, r2
 802a3f0:	d127      	bne.n	802a442 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 802a3f2:	f8ae 2000 	strh.w	r2, [lr]
 802a3f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802a3f8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802a3fa:	4413      	add	r3, r2
 802a3fc:	931d      	str	r3, [sp, #116]	; 0x74
 802a3fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802a400:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a402:	441a      	add	r2, r3
 802a404:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802a406:	921e      	str	r2, [sp, #120]	; 0x78
 802a408:	3b01      	subs	r3, #1
 802a40a:	f10e 0e02 	add.w	lr, lr, #2
 802a40e:	930f      	str	r3, [sp, #60]	; 0x3c
 802a410:	e627      	b.n	802a062 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802a412:	fb08 f000 	mul.w	r0, r8, r0
 802a416:	fb09 0303 	mla	r3, r9, r3, r0
 802a41a:	e71b      	b.n	802a254 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 802a41c:	46b9      	mov	r9, r7
 802a41e:	e743      	b.n	802a2a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 802a420:	f1c2 0110 	rsb	r1, r2, #16
 802a424:	437a      	muls	r2, r7
 802a426:	fb09 2901 	mla	r9, r9, r1, r2
 802a42a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802a42e:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802a432:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802a436:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802a43a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802a43e:	4302      	orrs	r2, r0
 802a440:	e7d4      	b.n	802a3ec <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 802a442:	f8be 7000 	ldrh.w	r7, [lr]
 802a446:	4c1c      	ldr	r4, [pc, #112]	; (802a4b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 802a448:	43db      	mvns	r3, r3
 802a44a:	1238      	asrs	r0, r7, #8
 802a44c:	fa5f fc83 	uxtb.w	ip, r3
 802a450:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802a454:	10fd      	asrs	r5, r7, #3
 802a456:	fb00 f00c 	mul.w	r0, r0, ip
 802a45a:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802a45e:	fb05 f10c 	mul.w	r1, r5, ip
 802a462:	1c45      	adds	r5, r0, #1
 802a464:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802a468:	1215      	asrs	r5, r2, #8
 802a46a:	f025 0507 	bic.w	r5, r5, #7
 802a46e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802a472:	1c4d      	adds	r5, r1, #1
 802a474:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802a478:	10d1      	asrs	r1, r2, #3
 802a47a:	f021 0103 	bic.w	r1, r1, #3
 802a47e:	00fb      	lsls	r3, r7, #3
 802a480:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802a484:	b2db      	uxtb	r3, r3
 802a486:	b2c0      	uxtb	r0, r0
 802a488:	00c9      	lsls	r1, r1, #3
 802a48a:	fb03 f30c 	mul.w	r3, r3, ip
 802a48e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a492:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802a496:	4308      	orrs	r0, r1
 802a498:	1c59      	adds	r1, r3, #1
 802a49a:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802a49e:	00d2      	lsls	r2, r2, #3
 802a4a0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802a4a4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 802a4a8:	4318      	orrs	r0, r3
 802a4aa:	f8ae 0000 	strh.w	r0, [lr]
 802a4ae:	e7a2      	b.n	802a3f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 802a4b0:	b013      	add	sp, #76	; 0x4c
 802a4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a4b6:	bf00      	nop
 802a4b8:	fffff800 	.word	0xfffff800

0802a4bc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 802a4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a4c0:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 802a4c4:	fb05 4c03 	mla	ip, r5, r3, r4
 802a4c8:	2d00      	cmp	r5, #0
 802a4ca:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 802a4ce:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 802a4d2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802a4d6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 802a4da:	8808      	ldrh	r0, [r1, #0]
 802a4dc:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 802a4e0:	f2c0 80a7 	blt.w	802a632 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 802a4e4:	45aa      	cmp	sl, r5
 802a4e6:	f340 80a4 	ble.w	802a632 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 802a4ea:	2c00      	cmp	r4, #0
 802a4ec:	f2c0 809f 	blt.w	802a62e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 802a4f0:	42a3      	cmp	r3, r4
 802a4f2:	f340 809c 	ble.w	802a62e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 802a4f6:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 802a4fa:	1c62      	adds	r2, r4, #1
 802a4fc:	f100 809c 	bmi.w	802a638 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802a500:	4293      	cmp	r3, r2
 802a502:	f340 8099 	ble.w	802a638 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802a506:	f1b9 0f00 	cmp.w	r9, #0
 802a50a:	f000 8095 	beq.w	802a638 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 802a50e:	f8be c002 	ldrh.w	ip, [lr, #2]
 802a512:	3501      	adds	r5, #1
 802a514:	f100 8094 	bmi.w	802a640 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802a518:	45aa      	cmp	sl, r5
 802a51a:	f340 8091 	ble.w	802a640 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802a51e:	2f00      	cmp	r7, #0
 802a520:	f000 808e 	beq.w	802a640 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 802a524:	2c00      	cmp	r4, #0
 802a526:	f2c0 8089 	blt.w	802a63c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 802a52a:	42a3      	cmp	r3, r4
 802a52c:	f340 8086 	ble.w	802a63c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 802a530:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 802a534:	3401      	adds	r4, #1
 802a536:	f100 8086 	bmi.w	802a646 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802a53a:	42a3      	cmp	r3, r4
 802a53c:	f340 8083 	ble.w	802a646 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802a540:	f1b9 0f00 	cmp.w	r9, #0
 802a544:	d07f      	beq.n	802a646 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802a546:	3301      	adds	r3, #1
 802a548:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 802a54c:	ea4f 4408 	mov.w	r4, r8, lsl #16
 802a550:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802a554:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 802a558:	fb19 fe07 	smulbb	lr, r9, r7
 802a55c:	ea44 0808 	orr.w	r8, r4, r8
 802a560:	ea4f 440c 	mov.w	r4, ip, lsl #16
 802a564:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 802a568:	f1c7 0210 	rsb	r2, r7, #16
 802a56c:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802a570:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802a574:	ea44 0c0c 	orr.w	ip, r4, ip
 802a578:	eba2 0209 	sub.w	r2, r2, r9
 802a57c:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 802a580:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 802a584:	fb04 f40c 	mul.w	r4, r4, ip
 802a588:	fb02 4808 	mla	r8, r2, r8, r4
 802a58c:	041a      	lsls	r2, r3, #16
 802a58e:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802a592:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802a596:	4313      	orrs	r3, r2
 802a598:	042a      	lsls	r2, r5, #16
 802a59a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802a59e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802a5a2:	fb0e 8303 	mla	r3, lr, r3, r8
 802a5a6:	432a      	orrs	r2, r5
 802a5a8:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 802a5ac:	fb07 3202 	mla	r2, r7, r2, r3
 802a5b0:	0d53      	lsrs	r3, r2, #21
 802a5b2:	0952      	lsrs	r2, r2, #5
 802a5b4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802a5b8:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802a5bc:	431a      	orrs	r2, r3
 802a5be:	b293      	uxth	r3, r2
 802a5c0:	b2b4      	uxth	r4, r6
 802a5c2:	1202      	asrs	r2, r0, #8
 802a5c4:	43f6      	mvns	r6, r6
 802a5c6:	b2f6      	uxtb	r6, r6
 802a5c8:	121d      	asrs	r5, r3, #8
 802a5ca:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802a5ce:	fb12 f206 	smulbb	r2, r2, r6
 802a5d2:	10c7      	asrs	r7, r0, #3
 802a5d4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802a5d8:	00c0      	lsls	r0, r0, #3
 802a5da:	fb05 2504 	mla	r5, r5, r4, r2
 802a5de:	b2c0      	uxtb	r0, r0
 802a5e0:	10da      	asrs	r2, r3, #3
 802a5e2:	00db      	lsls	r3, r3, #3
 802a5e4:	b2db      	uxtb	r3, r3
 802a5e6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802a5ea:	fb10 f006 	smulbb	r0, r0, r6
 802a5ee:	b2ad      	uxth	r5, r5
 802a5f0:	fb03 0004 	mla	r0, r3, r4, r0
 802a5f4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802a5f8:	fb17 f706 	smulbb	r7, r7, r6
 802a5fc:	b280      	uxth	r0, r0
 802a5fe:	1c6b      	adds	r3, r5, #1
 802a600:	fb02 7204 	mla	r2, r2, r4, r7
 802a604:	b292      	uxth	r2, r2
 802a606:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802a60a:	1c43      	adds	r3, r0, #1
 802a60c:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 802a610:	1c50      	adds	r0, r2, #1
 802a612:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 802a616:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802a61a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802a61e:	0952      	lsrs	r2, r2, #5
 802a620:	432b      	orrs	r3, r5
 802a622:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a626:	4313      	orrs	r3, r2
 802a628:	800b      	strh	r3, [r1, #0]
 802a62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a62e:	4680      	mov	r8, r0
 802a630:	e763      	b.n	802a4fa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 802a632:	4684      	mov	ip, r0
 802a634:	4680      	mov	r8, r0
 802a636:	e76c      	b.n	802a512 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 802a638:	4684      	mov	ip, r0
 802a63a:	e76a      	b.n	802a512 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 802a63c:	4605      	mov	r5, r0
 802a63e:	e779      	b.n	802a534 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 802a640:	4603      	mov	r3, r0
 802a642:	4605      	mov	r5, r0
 802a644:	e782      	b.n	802a54c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 802a646:	4603      	mov	r3, r0
 802a648:	e780      	b.n	802a54c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

0802a64a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a64a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a64e:	b093      	sub	sp, #76	; 0x4c
 802a650:	461d      	mov	r5, r3
 802a652:	9210      	str	r2, [sp, #64]	; 0x40
 802a654:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802a656:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 802a65a:	920b      	str	r2, [sp, #44]	; 0x2c
 802a65c:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 802a660:	910a      	str	r1, [sp, #40]	; 0x28
 802a662:	6859      	ldr	r1, [r3, #4]
 802a664:	681b      	ldr	r3, [r3, #0]
 802a666:	9011      	str	r0, [sp, #68]	; 0x44
 802a668:	fb01 2707 	mla	r7, r1, r7, r2
 802a66c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 802a670:	9307      	str	r3, [sp, #28]
 802a672:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a674:	681b      	ldr	r3, [r3, #0]
 802a676:	9309      	str	r3, [sp, #36]	; 0x24
 802a678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a67a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802a67e:	43db      	mvns	r3, r3
 802a680:	b2db      	uxtb	r3, r3
 802a682:	9308      	str	r3, [sp, #32]
 802a684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a686:	2b00      	cmp	r3, #0
 802a688:	dc03      	bgt.n	802a692 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802a68a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802a68c:	2b00      	cmp	r3, #0
 802a68e:	f340 8203 	ble.w	802aa98 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802a692:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a694:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a698:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a69c:	1e48      	subs	r0, r1, #1
 802a69e:	f102 3cff 	add.w	ip, r2, #4294967295
 802a6a2:	2d00      	cmp	r5, #0
 802a6a4:	f340 80da 	ble.w	802a85c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 802a6a8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802a6ac:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a6b0:	d406      	bmi.n	802a6c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802a6b2:	4586      	cmp	lr, r0
 802a6b4:	da04      	bge.n	802a6c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802a6b6:	2b00      	cmp	r3, #0
 802a6b8:	db02      	blt.n	802a6c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802a6ba:	4563      	cmp	r3, ip
 802a6bc:	f2c0 80cf 	blt.w	802a85e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802a6c0:	f11e 0e01 	adds.w	lr, lr, #1
 802a6c4:	f100 80c1 	bmi.w	802a84a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802a6c8:	4571      	cmp	r1, lr
 802a6ca:	f2c0 80be 	blt.w	802a84a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802a6ce:	3301      	adds	r3, #1
 802a6d0:	f100 80bb 	bmi.w	802a84a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802a6d4:	429a      	cmp	r2, r3
 802a6d6:	f2c0 80b8 	blt.w	802a84a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 802a6da:	f8dd 801c 	ldr.w	r8, [sp, #28]
 802a6de:	46a9      	mov	r9, r5
 802a6e0:	f1b9 0f00 	cmp.w	r9, #0
 802a6e4:	f340 80d8 	ble.w	802a898 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 802a6e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a6ea:	1421      	asrs	r1, r4, #16
 802a6ec:	ea4f 4026 	mov.w	r0, r6, asr #16
 802a6f0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802a6f4:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802a6f8:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802a6fc:	f100 8111 	bmi.w	802a922 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802a700:	f10e 3aff 	add.w	sl, lr, #4294967295
 802a704:	4551      	cmp	r1, sl
 802a706:	f280 810c 	bge.w	802a922 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802a70a:	2800      	cmp	r0, #0
 802a70c:	f2c0 8109 	blt.w	802a922 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802a710:	f103 3aff 	add.w	sl, r3, #4294967295
 802a714:	4550      	cmp	r0, sl
 802a716:	f280 8104 	bge.w	802a922 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802a71a:	fa0f f38e 	sxth.w	r3, lr
 802a71e:	fb00 1103 	mla	r1, r0, r3, r1
 802a722:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a724:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 802a728:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 802a72c:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 802a730:	f1bc 0f00 	cmp.w	ip, #0
 802a734:	d007      	beq.n	802a746 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 802a736:	005b      	lsls	r3, r3, #1
 802a738:	eb0a 0003 	add.w	r0, sl, r3
 802a73c:	f83a 3003 	ldrh.w	r3, [sl, r3]
 802a740:	930c      	str	r3, [sp, #48]	; 0x30
 802a742:	8843      	ldrh	r3, [r0, #2]
 802a744:	930d      	str	r3, [sp, #52]	; 0x34
 802a746:	ea4f 400e 	mov.w	r0, lr, lsl #16
 802a74a:	fb12 f30c 	smulbb	r3, r2, ip
 802a74e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802a752:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802a756:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802a75a:	10db      	asrs	r3, r3, #3
 802a75c:	ea40 000e 	orr.w	r0, r0, lr
 802a760:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802a764:	f1cc 0e10 	rsb	lr, ip, #16
 802a768:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802a76c:	ebae 0e02 	sub.w	lr, lr, r2
 802a770:	ea4a 0101 	orr.w	r1, sl, r1
 802a774:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802a778:	4351      	muls	r1, r2
 802a77a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802a77c:	9f08      	ldr	r7, [sp, #32]
 802a77e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802a782:	fb0e 1e00 	mla	lr, lr, r0, r1
 802a786:	0410      	lsls	r0, r2, #16
 802a788:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802a78c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802a790:	4310      	orrs	r0, r2
 802a792:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802a794:	990c      	ldr	r1, [sp, #48]	; 0x30
 802a796:	0412      	lsls	r2, r2, #16
 802a798:	fb03 e000 	mla	r0, r3, r0, lr
 802a79c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802a7a0:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802a7a4:	ea42 020e 	orr.w	r2, r2, lr
 802a7a8:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802a7ac:	fb03 0302 	mla	r3, r3, r2, r0
 802a7b0:	0d5a      	lsrs	r2, r3, #21
 802a7b2:	095b      	lsrs	r3, r3, #5
 802a7b4:	f8b8 0000 	ldrh.w	r0, [r8]
 802a7b8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802a7bc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802a7c0:	4313      	orrs	r3, r2
 802a7c2:	b29b      	uxth	r3, r3
 802a7c4:	1201      	asrs	r1, r0, #8
 802a7c6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 802a7ca:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802a7ce:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802a7d2:	fb11 f107 	smulbb	r1, r1, r7
 802a7d6:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 802a7da:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802a7de:	00c0      	lsls	r0, r0, #3
 802a7e0:	fb0c 1c02 	mla	ip, ip, r2, r1
 802a7e4:	b2c0      	uxtb	r0, r0
 802a7e6:	10d9      	asrs	r1, r3, #3
 802a7e8:	00db      	lsls	r3, r3, #3
 802a7ea:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 802a7ee:	b2db      	uxtb	r3, r3
 802a7f0:	fb10 f007 	smulbb	r0, r0, r7
 802a7f4:	fa1f fc8c 	uxth.w	ip, ip
 802a7f8:	fb03 0302 	mla	r3, r3, r2, r0
 802a7fc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802a800:	fb1e fe07 	smulbb	lr, lr, r7
 802a804:	fb01 e102 	mla	r1, r1, r2, lr
 802a808:	b29a      	uxth	r2, r3
 802a80a:	f10c 0301 	add.w	r3, ip, #1
 802a80e:	b289      	uxth	r1, r1
 802a810:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802a814:	1c53      	adds	r3, r2, #1
 802a816:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a81a:	1c4a      	adds	r2, r1, #1
 802a81c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802a820:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 802a824:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802a828:	0949      	lsrs	r1, r1, #5
 802a82a:	ea43 030c 	orr.w	r3, r3, ip
 802a82e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802a832:	430b      	orrs	r3, r1
 802a834:	f8a8 3000 	strh.w	r3, [r8]
 802a838:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802a83a:	441c      	add	r4, r3
 802a83c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a83e:	f108 0802 	add.w	r8, r8, #2
 802a842:	441e      	add	r6, r3
 802a844:	f109 39ff 	add.w	r9, r9, #4294967295
 802a848:	e74a      	b.n	802a6e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 802a84a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802a84c:	441c      	add	r4, r3
 802a84e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802a850:	441e      	add	r6, r3
 802a852:	9b07      	ldr	r3, [sp, #28]
 802a854:	3302      	adds	r3, #2
 802a856:	3d01      	subs	r5, #1
 802a858:	9307      	str	r3, [sp, #28]
 802a85a:	e722      	b.n	802a6a2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802a85c:	d022      	beq.n	802a8a4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802a85e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802a860:	1e6b      	subs	r3, r5, #1
 802a862:	fb00 4003 	mla	r0, r0, r3, r4
 802a866:	1400      	asrs	r0, r0, #16
 802a868:	f53f af37 	bmi.w	802a6da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802a86c:	3901      	subs	r1, #1
 802a86e:	4288      	cmp	r0, r1
 802a870:	f6bf af33 	bge.w	802a6da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802a874:	9920      	ldr	r1, [sp, #128]	; 0x80
 802a876:	fb01 6303 	mla	r3, r1, r3, r6
 802a87a:	141b      	asrs	r3, r3, #16
 802a87c:	f53f af2d 	bmi.w	802a6da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802a880:	3a01      	subs	r2, #1
 802a882:	4293      	cmp	r3, r2
 802a884:	f6bf af29 	bge.w	802a6da <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802a888:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802a88c:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 802a890:	46a8      	mov	r8, r5
 802a892:	f1b8 0f00 	cmp.w	r8, #0
 802a896:	dc5e      	bgt.n	802a956 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802a898:	9b07      	ldr	r3, [sp, #28]
 802a89a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802a89e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802a8a2:	9307      	str	r3, [sp, #28]
 802a8a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a8a6:	2b00      	cmp	r3, #0
 802a8a8:	f340 80f6 	ble.w	802aa98 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802a8ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a8b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802a8b4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a8b8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802a8ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a8be:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a8c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a8c6:	eef0 6a62 	vmov.f32	s13, s5
 802a8ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a8ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a8d2:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a8d6:	ee16 4a90 	vmov	r4, s13
 802a8da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a8de:	eef0 6a43 	vmov.f32	s13, s6
 802a8e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a8e6:	ee12 2a90 	vmov	r2, s5
 802a8ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a8ee:	fb92 f3f3 	sdiv	r3, r2, r3
 802a8f2:	ee13 2a10 	vmov	r2, s6
 802a8f6:	931f      	str	r3, [sp, #124]	; 0x7c
 802a8f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802a8fa:	fb92 f3f3 	sdiv	r3, r2, r3
 802a8fe:	9320      	str	r3, [sp, #128]	; 0x80
 802a900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a902:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802a904:	3b01      	subs	r3, #1
 802a906:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a90a:	930a      	str	r3, [sp, #40]	; 0x28
 802a90c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802a90e:	ee16 6a90 	vmov	r6, s13
 802a912:	bf14      	ite	ne
 802a914:	461d      	movne	r5, r3
 802a916:	4615      	moveq	r5, r2
 802a918:	eeb0 3a67 	vmov.f32	s6, s15
 802a91c:	eef0 2a47 	vmov.f32	s5, s14
 802a920:	e6b0      	b.n	802a684 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802a922:	f111 0a01 	adds.w	sl, r1, #1
 802a926:	d487      	bmi.n	802a838 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802a928:	45d6      	cmp	lr, sl
 802a92a:	db85      	blt.n	802a838 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802a92c:	f110 0a01 	adds.w	sl, r0, #1
 802a930:	d482      	bmi.n	802a838 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802a932:	4553      	cmp	r3, sl
 802a934:	db80      	blt.n	802a838 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802a936:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 802a938:	9101      	str	r1, [sp, #4]
 802a93a:	b21b      	sxth	r3, r3
 802a93c:	e9cd 0202 	strd	r0, r2, [sp, #8]
 802a940:	9300      	str	r3, [sp, #0]
 802a942:	e9cd c704 	strd	ip, r7, [sp, #16]
 802a946:	fa0f f38e 	sxth.w	r3, lr
 802a94a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a94c:	9811      	ldr	r0, [sp, #68]	; 0x44
 802a94e:	4641      	mov	r1, r8
 802a950:	f7ff fdb4 	bl	802a4bc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 802a954:	e770      	b.n	802a838 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 802a956:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802a958:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802a95a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a95e:	1430      	asrs	r0, r6, #16
 802a960:	1423      	asrs	r3, r4, #16
 802a962:	fb01 3000 	mla	r0, r1, r0, r3
 802a966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a968:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 802a96c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 802a970:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802a974:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802a978:	8858      	ldrh	r0, [r3, #2]
 802a97a:	f1be 0f00 	cmp.w	lr, #0
 802a97e:	d00b      	beq.n	802a998 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 802a980:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 802a984:	3901      	subs	r1, #1
 802a986:	0049      	lsls	r1, r1, #1
 802a988:	3102      	adds	r1, #2
 802a98a:	eb03 0b01 	add.w	fp, r3, r1
 802a98e:	5a5b      	ldrh	r3, [r3, r1]
 802a990:	930e      	str	r3, [sp, #56]	; 0x38
 802a992:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802a996:	930f      	str	r3, [sp, #60]	; 0x3c
 802a998:	ea4f 410c 	mov.w	r1, ip, lsl #16
 802a99c:	fb12 f30e 	smulbb	r3, r2, lr
 802a9a0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802a9a4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802a9a8:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 802a9ac:	10db      	asrs	r3, r3, #3
 802a9ae:	ea41 010c 	orr.w	r1, r1, ip
 802a9b2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802a9b6:	f1ce 0c10 	rsb	ip, lr, #16
 802a9ba:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802a9be:	ebac 0c02 	sub.w	ip, ip, r2
 802a9c2:	ea4b 0000 	orr.w	r0, fp, r0
 802a9c6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802a9ca:	4350      	muls	r0, r2
 802a9cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802a9ce:	9f08      	ldr	r7, [sp, #32]
 802a9d0:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802a9d4:	fb0c 0c01 	mla	ip, ip, r1, r0
 802a9d8:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802a9dc:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 802a9e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802a9e2:	980e      	ldr	r0, [sp, #56]	; 0x38
 802a9e4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802a9e8:	0412      	lsls	r2, r2, #16
 802a9ea:	ea4b 0101 	orr.w	r1, fp, r1
 802a9ee:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802a9f2:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802a9f6:	fb03 c101 	mla	r1, r3, r1, ip
 802a9fa:	4302      	orrs	r2, r0
 802a9fc:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802aa00:	fb03 1202 	mla	r2, r3, r2, r1
 802aa04:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 802aa08:	0952      	lsrs	r2, r2, #5
 802aa0a:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 802aa0e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 802aa12:	f8b9 2000 	ldrh.w	r2, [r9]
 802aa16:	ea4b 0303 	orr.w	r3, fp, r3
 802aa1a:	b29b      	uxth	r3, r3
 802aa1c:	1211      	asrs	r1, r2, #8
 802aa1e:	1218      	asrs	r0, r3, #8
 802aa20:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802aa24:	fb11 f107 	smulbb	r1, r1, r7
 802aa28:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 802aa2c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802aa30:	00d2      	lsls	r2, r2, #3
 802aa32:	fb00 100a 	mla	r0, r0, sl, r1
 802aa36:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 802aa3a:	10d9      	asrs	r1, r3, #3
 802aa3c:	b2d2      	uxtb	r2, r2
 802aa3e:	00db      	lsls	r3, r3, #3
 802aa40:	fb1c fc07 	smulbb	ip, ip, r7
 802aa44:	fb12 f207 	smulbb	r2, r2, r7
 802aa48:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802aa4c:	b2db      	uxtb	r3, r3
 802aa4e:	b280      	uxth	r0, r0
 802aa50:	fb01 c10a 	mla	r1, r1, sl, ip
 802aa54:	fb03 230a 	mla	r3, r3, sl, r2
 802aa58:	b29b      	uxth	r3, r3
 802aa5a:	b289      	uxth	r1, r1
 802aa5c:	1c42      	adds	r2, r0, #1
 802aa5e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802aa62:	f101 0c01 	add.w	ip, r1, #1
 802aa66:	1c5a      	adds	r2, r3, #1
 802aa68:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802aa6c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802aa70:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802aa72:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802aa76:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802aa7a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802aa7e:	4310      	orrs	r0, r2
 802aa80:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802aa84:	441c      	add	r4, r3
 802aa86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802aa88:	ea40 000c 	orr.w	r0, r0, ip
 802aa8c:	f829 0b02 	strh.w	r0, [r9], #2
 802aa90:	441e      	add	r6, r3
 802aa92:	f108 38ff 	add.w	r8, r8, #4294967295
 802aa96:	e6fc      	b.n	802a892 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 802aa98:	b013      	add	sp, #76	; 0x4c
 802aa9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802aa9e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 802aa9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802aaa2:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 802aaa6:	fb0e 4703 	mla	r7, lr, r3, r4
 802aaaa:	f1be 0f00 	cmp.w	lr, #0
 802aaae:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 802aab2:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 802aab6:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 802aaba:	8808      	ldrh	r0, [r1, #0]
 802aabc:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 802aac0:	db60      	blt.n	802ab84 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802aac2:	45f1      	cmp	r9, lr
 802aac4:	dd5e      	ble.n	802ab84 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802aac6:	2c00      	cmp	r4, #0
 802aac8:	db5a      	blt.n	802ab80 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802aaca:	42a3      	cmp	r3, r4
 802aacc:	dd58      	ble.n	802ab80 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 802aace:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 802aad2:	1c62      	adds	r2, r4, #1
 802aad4:	d459      	bmi.n	802ab8a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802aad6:	4293      	cmp	r3, r2
 802aad8:	dd57      	ble.n	802ab8a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802aada:	2d00      	cmp	r5, #0
 802aadc:	d055      	beq.n	802ab8a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802aade:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 802aae2:	f11e 0e01 	adds.w	lr, lr, #1
 802aae6:	d454      	bmi.n	802ab92 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802aae8:	45f1      	cmp	r9, lr
 802aaea:	dd52      	ble.n	802ab92 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802aaec:	2e00      	cmp	r6, #0
 802aaee:	d050      	beq.n	802ab92 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 802aaf0:	2c00      	cmp	r4, #0
 802aaf2:	db4c      	blt.n	802ab8e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 802aaf4:	42a3      	cmp	r3, r4
 802aaf6:	dd4a      	ble.n	802ab8e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 802aaf8:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 802aafc:	3401      	adds	r4, #1
 802aafe:	d405      	bmi.n	802ab0c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802ab00:	42a3      	cmp	r3, r4
 802ab02:	dd03      	ble.n	802ab0c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802ab04:	b115      	cbz	r5, 802ab0c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802ab06:	3301      	adds	r3, #1
 802ab08:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 802ab0c:	ea4f 430c 	mov.w	r3, ip, lsl #16
 802ab10:	fb15 f406 	smulbb	r4, r5, r6
 802ab14:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802ab18:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 802ab1c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802ab20:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 802ab24:	ea43 0c0c 	orr.w	ip, r3, ip
 802ab28:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802ab2c:	f1c6 0310 	rsb	r3, r6, #16
 802ab30:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 802ab34:	1b5b      	subs	r3, r3, r5
 802ab36:	ea4e 0707 	orr.w	r7, lr, r7
 802ab3a:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 802ab3e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802ab42:	437d      	muls	r5, r7
 802ab44:	fb03 5c0c 	mla	ip, r3, ip, r5
 802ab48:	0403      	lsls	r3, r0, #16
 802ab4a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802ab4e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802ab52:	4318      	orrs	r0, r3
 802ab54:	0413      	lsls	r3, r2, #16
 802ab56:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802ab5a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802ab5e:	4313      	orrs	r3, r2
 802ab60:	fb04 c000 	mla	r0, r4, r0, ip
 802ab64:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 802ab68:	fb06 0003 	mla	r0, r6, r3, r0
 802ab6c:	0d43      	lsrs	r3, r0, #21
 802ab6e:	0940      	lsrs	r0, r0, #5
 802ab70:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802ab74:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802ab78:	4318      	orrs	r0, r3
 802ab7a:	8008      	strh	r0, [r1, #0]
 802ab7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802ab80:	4684      	mov	ip, r0
 802ab82:	e7a6      	b.n	802aad2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 802ab84:	4607      	mov	r7, r0
 802ab86:	4684      	mov	ip, r0
 802ab88:	e7ab      	b.n	802aae2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802ab8a:	4607      	mov	r7, r0
 802ab8c:	e7a9      	b.n	802aae2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 802ab8e:	4602      	mov	r2, r0
 802ab90:	e7b4      	b.n	802aafc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 802ab92:	4602      	mov	r2, r0
 802ab94:	e7ba      	b.n	802ab0c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0802ab96 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802ab96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ab9a:	b08f      	sub	sp, #60	; 0x3c
 802ab9c:	461d      	mov	r5, r3
 802ab9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802aba0:	920c      	str	r2, [sp, #48]	; 0x30
 802aba2:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 802aba6:	9107      	str	r1, [sp, #28]
 802aba8:	6859      	ldr	r1, [r3, #4]
 802abaa:	681b      	ldr	r3, [r3, #0]
 802abac:	900d      	str	r0, [sp, #52]	; 0x34
 802abae:	fb01 2707 	mla	r7, r1, r7, r2
 802abb2:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802abb6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802abb8:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 802abbc:	f8d3 8000 	ldr.w	r8, [r3]
 802abc0:	9b07      	ldr	r3, [sp, #28]
 802abc2:	2b00      	cmp	r3, #0
 802abc4:	dc03      	bgt.n	802abce <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802abc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802abc8:	2b00      	cmp	r3, #0
 802abca:	f340 8181 	ble.w	802aed0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802abce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802abd0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802abd4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802abd8:	1e48      	subs	r0, r1, #1
 802abda:	f102 3cff 	add.w	ip, r2, #4294967295
 802abde:	2d00      	cmp	r5, #0
 802abe0:	f340 809b 	ble.w	802ad1a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 802abe4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802abe8:	ea4f 4326 	mov.w	r3, r6, asr #16
 802abec:	d406      	bmi.n	802abfc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802abee:	4586      	cmp	lr, r0
 802abf0:	da04      	bge.n	802abfc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802abf2:	2b00      	cmp	r3, #0
 802abf4:	db02      	blt.n	802abfc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802abf6:	4563      	cmp	r3, ip
 802abf8:	f2c0 8090 	blt.w	802ad1c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802abfc:	f11e 0e01 	adds.w	lr, lr, #1
 802ac00:	f100 8084 	bmi.w	802ad0c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802ac04:	4571      	cmp	r1, lr
 802ac06:	f2c0 8081 	blt.w	802ad0c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802ac0a:	3301      	adds	r3, #1
 802ac0c:	d47e      	bmi.n	802ad0c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802ac0e:	429a      	cmp	r2, r3
 802ac10:	db7c      	blt.n	802ad0c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802ac12:	46aa      	mov	sl, r5
 802ac14:	46b9      	mov	r9, r7
 802ac16:	f1ba 0f00 	cmp.w	sl, #0
 802ac1a:	f340 8099 	ble.w	802ad50 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802ac1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802ac20:	1421      	asrs	r1, r4, #16
 802ac22:	ea4f 4026 	mov.w	r0, r6, asr #16
 802ac26:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802ac2a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802ac2e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802ac32:	f100 80d0 	bmi.w	802add6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802ac36:	f10e 3bff 	add.w	fp, lr, #4294967295
 802ac3a:	4559      	cmp	r1, fp
 802ac3c:	f280 80cb 	bge.w	802add6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802ac40:	2800      	cmp	r0, #0
 802ac42:	f2c0 80c8 	blt.w	802add6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802ac46:	f103 3bff 	add.w	fp, r3, #4294967295
 802ac4a:	4558      	cmp	r0, fp
 802ac4c:	f280 80c3 	bge.w	802add6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802ac50:	fa0f fe8e 	sxth.w	lr, lr
 802ac54:	fb00 110e 	mla	r1, r0, lr, r1
 802ac58:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802ac5c:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 802ac60:	8841      	ldrh	r1, [r0, #2]
 802ac62:	f1bc 0f00 	cmp.w	ip, #0
 802ac66:	d00b      	beq.n	802ac80 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 802ac68:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 802ac6c:	3b01      	subs	r3, #1
 802ac6e:	005b      	lsls	r3, r3, #1
 802ac70:	3302      	adds	r3, #2
 802ac72:	eb00 0e03 	add.w	lr, r0, r3
 802ac76:	5ac3      	ldrh	r3, [r0, r3]
 802ac78:	9308      	str	r3, [sp, #32]
 802ac7a:	f8be 3002 	ldrh.w	r3, [lr, #2]
 802ac7e:	9309      	str	r3, [sp, #36]	; 0x24
 802ac80:	ea4f 400b 	mov.w	r0, fp, lsl #16
 802ac84:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802ac88:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802ac8c:	ea40 000b 	orr.w	r0, r0, fp
 802ac90:	fb12 f30c 	smulbb	r3, r2, ip
 802ac94:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802ac98:	10db      	asrs	r3, r3, #3
 802ac9a:	f1cc 0e10 	rsb	lr, ip, #16
 802ac9e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802aca2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802aca6:	ebae 0e02 	sub.w	lr, lr, r2
 802acaa:	ea4b 0101 	orr.w	r1, fp, r1
 802acae:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802acb2:	4351      	muls	r1, r2
 802acb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802acb6:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802acba:	fb0e 1e00 	mla	lr, lr, r0, r1
 802acbe:	0410      	lsls	r0, r2, #16
 802acc0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802acc4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802acc8:	4310      	orrs	r0, r2
 802acca:	9a08      	ldr	r2, [sp, #32]
 802accc:	9908      	ldr	r1, [sp, #32]
 802acce:	0412      	lsls	r2, r2, #16
 802acd0:	fb03 e000 	mla	r0, r3, r0, lr
 802acd4:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802acd8:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802acdc:	ea42 020e 	orr.w	r2, r2, lr
 802ace0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802ace4:	fb03 0302 	mla	r3, r3, r2, r0
 802ace8:	0d5a      	lsrs	r2, r3, #21
 802acea:	095b      	lsrs	r3, r3, #5
 802acec:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802acf0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802acf4:	4313      	orrs	r3, r2
 802acf6:	f8a9 3000 	strh.w	r3, [r9]
 802acfa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802acfc:	441c      	add	r4, r3
 802acfe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802ad00:	f109 0902 	add.w	r9, r9, #2
 802ad04:	441e      	add	r6, r3
 802ad06:	f10a 3aff 	add.w	sl, sl, #4294967295
 802ad0a:	e784      	b.n	802ac16 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 802ad0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802ad0e:	441c      	add	r4, r3
 802ad10:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802ad12:	3d01      	subs	r5, #1
 802ad14:	441e      	add	r6, r3
 802ad16:	3702      	adds	r7, #2
 802ad18:	e761      	b.n	802abde <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802ad1a:	d01d      	beq.n	802ad58 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802ad1c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802ad1e:	1e6b      	subs	r3, r5, #1
 802ad20:	fb00 4003 	mla	r0, r0, r3, r4
 802ad24:	1400      	asrs	r0, r0, #16
 802ad26:	f53f af74 	bmi.w	802ac12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802ad2a:	3901      	subs	r1, #1
 802ad2c:	4288      	cmp	r0, r1
 802ad2e:	f6bf af70 	bge.w	802ac12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802ad32:	991c      	ldr	r1, [sp, #112]	; 0x70
 802ad34:	fb01 6303 	mla	r3, r1, r3, r6
 802ad38:	141b      	asrs	r3, r3, #16
 802ad3a:	f53f af6a 	bmi.w	802ac12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802ad3e:	3a01      	subs	r2, #1
 802ad40:	4293      	cmp	r3, r2
 802ad42:	f6bf af66 	bge.w	802ac12 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802ad46:	46a9      	mov	r9, r5
 802ad48:	46ba      	mov	sl, r7
 802ad4a:	f1b9 0f00 	cmp.w	r9, #0
 802ad4e:	dc5a      	bgt.n	802ae06 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 802ad50:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802ad54:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802ad58:	9b07      	ldr	r3, [sp, #28]
 802ad5a:	2b00      	cmp	r3, #0
 802ad5c:	f340 80b8 	ble.w	802aed0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802ad60:	ee30 0a04 	vadd.f32	s0, s0, s8
 802ad64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802ad68:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802ad6c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802ad6e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802ad72:	ee31 1a05 	vadd.f32	s2, s2, s10
 802ad76:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802ad7a:	eef0 6a62 	vmov.f32	s13, s5
 802ad7e:	ee61 7a27 	vmul.f32	s15, s2, s15
 802ad82:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802ad86:	ee77 2a62 	vsub.f32	s5, s14, s5
 802ad8a:	ee16 4a90 	vmov	r4, s13
 802ad8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802ad92:	eef0 6a43 	vmov.f32	s13, s6
 802ad96:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802ad9a:	ee12 2a90 	vmov	r2, s5
 802ad9e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802ada2:	fb92 f3f3 	sdiv	r3, r2, r3
 802ada6:	ee13 2a10 	vmov	r2, s6
 802adaa:	931b      	str	r3, [sp, #108]	; 0x6c
 802adac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802adae:	fb92 f3f3 	sdiv	r3, r2, r3
 802adb2:	931c      	str	r3, [sp, #112]	; 0x70
 802adb4:	9b07      	ldr	r3, [sp, #28]
 802adb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802adb8:	3b01      	subs	r3, #1
 802adba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802adbe:	9307      	str	r3, [sp, #28]
 802adc0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802adc2:	ee16 6a90 	vmov	r6, s13
 802adc6:	bf14      	ite	ne
 802adc8:	461d      	movne	r5, r3
 802adca:	4615      	moveq	r5, r2
 802adcc:	eeb0 3a67 	vmov.f32	s6, s15
 802add0:	eef0 2a47 	vmov.f32	s5, s14
 802add4:	e6f4      	b.n	802abc0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 802add6:	f111 0b01 	adds.w	fp, r1, #1
 802adda:	d48e      	bmi.n	802acfa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802addc:	45de      	cmp	lr, fp
 802adde:	db8c      	blt.n	802acfa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802ade0:	f110 0b01 	adds.w	fp, r0, #1
 802ade4:	d489      	bmi.n	802acfa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802ade6:	455b      	cmp	r3, fp
 802ade8:	db87      	blt.n	802acfa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802adea:	b21b      	sxth	r3, r3
 802adec:	e9cd 1001 	strd	r1, r0, [sp, #4]
 802adf0:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 802adf4:	9300      	str	r3, [sp, #0]
 802adf6:	4642      	mov	r2, r8
 802adf8:	fa0f f38e 	sxth.w	r3, lr
 802adfc:	4649      	mov	r1, r9
 802adfe:	980d      	ldr	r0, [sp, #52]	; 0x34
 802ae00:	f7ff fe4d 	bl	802aa9e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 802ae04:	e779      	b.n	802acfa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802ae06:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802ae08:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802ae0c:	1420      	asrs	r0, r4, #16
 802ae0e:	1431      	asrs	r1, r6, #16
 802ae10:	fb03 0101 	mla	r1, r3, r1, r0
 802ae14:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802ae18:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802ae1c:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 802ae20:	8841      	ldrh	r1, [r0, #2]
 802ae22:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802ae26:	f1be 0f00 	cmp.w	lr, #0
 802ae2a:	d00b      	beq.n	802ae44 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 802ae2c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802ae30:	3b01      	subs	r3, #1
 802ae32:	005b      	lsls	r3, r3, #1
 802ae34:	3302      	adds	r3, #2
 802ae36:	eb00 0b03 	add.w	fp, r0, r3
 802ae3a:	5ac3      	ldrh	r3, [r0, r3]
 802ae3c:	930a      	str	r3, [sp, #40]	; 0x28
 802ae3e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802ae42:	930b      	str	r3, [sp, #44]	; 0x2c
 802ae44:	ea4f 400c 	mov.w	r0, ip, lsl #16
 802ae48:	fb12 f30e 	smulbb	r3, r2, lr
 802ae4c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802ae50:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 802ae54:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802ae58:	10db      	asrs	r3, r3, #3
 802ae5a:	ea40 000c 	orr.w	r0, r0, ip
 802ae5e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802ae62:	f1ce 0c10 	rsb	ip, lr, #16
 802ae66:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802ae6a:	ebac 0c02 	sub.w	ip, ip, r2
 802ae6e:	ea4b 0101 	orr.w	r1, fp, r1
 802ae72:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802ae76:	4351      	muls	r1, r2
 802ae78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802ae7a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802ae7e:	fb0c 1c00 	mla	ip, ip, r0, r1
 802ae82:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 802ae86:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 802ae8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802ae8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802ae8e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802ae92:	0412      	lsls	r2, r2, #16
 802ae94:	ea4b 0000 	orr.w	r0, fp, r0
 802ae98:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802ae9c:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 802aea0:	fb03 c000 	mla	r0, r3, r0, ip
 802aea4:	ea42 0b0b 	orr.w	fp, r2, fp
 802aea8:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 802aeac:	fb03 000b 	mla	r0, r3, fp, r0
 802aeb0:	0d43      	lsrs	r3, r0, #21
 802aeb2:	0940      	lsrs	r0, r0, #5
 802aeb4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802aeb8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802aebc:	4318      	orrs	r0, r3
 802aebe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802aec0:	f82a 0b02 	strh.w	r0, [sl], #2
 802aec4:	441c      	add	r4, r3
 802aec6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802aec8:	f109 39ff 	add.w	r9, r9, #4294967295
 802aecc:	441e      	add	r6, r3
 802aece:	e73c      	b.n	802ad4a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 802aed0:	b00f      	add	sp, #60	; 0x3c
 802aed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802aed6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 802aed6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aeda:	b085      	sub	sp, #20
 802aedc:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 802aee0:	9102      	str	r1, [sp, #8]
 802aee2:	2c00      	cmp	r4, #0
 802aee4:	fb04 7103 	mla	r1, r4, r3, r7
 802aee8:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 802aeec:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802aef0:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802aef4:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802aef8:	f2c0 811b 	blt.w	802b132 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 802aefc:	45a6      	cmp	lr, r4
 802aefe:	f340 8118 	ble.w	802b132 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 802af02:	2f00      	cmp	r7, #0
 802af04:	f2c0 8113 	blt.w	802b12e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802af08:	42bb      	cmp	r3, r7
 802af0a:	f340 8110 	ble.w	802b12e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 802af0e:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802af12:	1c7a      	adds	r2, r7, #1
 802af14:	f100 8110 	bmi.w	802b138 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 802af18:	4293      	cmp	r3, r2
 802af1a:	f340 810d 	ble.w	802b138 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 802af1e:	2e00      	cmp	r6, #0
 802af20:	f000 810c 	beq.w	802b13c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 802af24:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802af28:	3401      	adds	r4, #1
 802af2a:	f100 810b 	bmi.w	802b144 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 802af2e:	45a6      	cmp	lr, r4
 802af30:	f340 8108 	ble.w	802b144 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 802af34:	2800      	cmp	r0, #0
 802af36:	f000 8108 	beq.w	802b14a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 802af3a:	2f00      	cmp	r7, #0
 802af3c:	f2c0 8100 	blt.w	802b140 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802af40:	42bb      	cmp	r3, r7
 802af42:	f340 80fd 	ble.w	802b140 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802af46:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802af4a:	3701      	adds	r7, #1
 802af4c:	f100 8100 	bmi.w	802b150 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802af50:	42bb      	cmp	r3, r7
 802af52:	f340 80fd 	ble.w	802b150 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802af56:	2e00      	cmp	r6, #0
 802af58:	f000 80fc 	beq.w	802b154 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 802af5c:	3301      	adds	r3, #1
 802af5e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802af62:	b2b6      	uxth	r6, r6
 802af64:	b280      	uxth	r0, r0
 802af66:	fb00 fe06 	mul.w	lr, r0, r6
 802af6a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802af6e:	0136      	lsls	r6, r6, #4
 802af70:	eba6 070e 	sub.w	r7, r6, lr
 802af74:	b280      	uxth	r0, r0
 802af76:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802af7a:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802af7e:	b2bf      	uxth	r7, r7
 802af80:	1a1b      	subs	r3, r3, r0
 802af82:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802af86:	b29b      	uxth	r3, r3
 802af88:	fb0a f607 	mul.w	r6, sl, r7
 802af8c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802af90:	fb0b 6603 	mla	r6, fp, r3, r6
 802af94:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802af98:	fb00 6609 	mla	r6, r0, r9, r6
 802af9c:	fb0e 6608 	mla	r6, lr, r8, r6
 802afa0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802afa4:	9600      	str	r6, [sp, #0]
 802afa6:	2e00      	cmp	r6, #0
 802afa8:	f000 80be 	beq.w	802b128 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 802afac:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802afb0:	fb0b fc0c 	mul.w	ip, fp, ip
 802afb4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802afb8:	fb0b f505 	mul.w	r5, fp, r5
 802afbc:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802afc0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802afc4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802afc8:	44dc      	add	ip, fp
 802afca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802afce:	9501      	str	r5, [sp, #4]
 802afd0:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802afd4:	9503      	str	r5, [sp, #12]
 802afd6:	9d01      	ldr	r5, [sp, #4]
 802afd8:	9e02      	ldr	r6, [sp, #8]
 802afda:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802afde:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802afe2:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802afe6:	fb0a fc0c 	mul.w	ip, sl, ip
 802afea:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802afee:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802aff2:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802aff6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802affa:	4465      	add	r5, ip
 802affc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802b000:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802b004:	fb09 fc0c 	mul.w	ip, r9, ip
 802b008:	fb09 f904 	mul.w	r9, r9, r4
 802b00c:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802b010:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802b014:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 802b018:	fb08 f404 	mul.w	r4, r8, r4
 802b01c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802b020:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802b024:	fb08 f802 	mul.w	r8, r8, r2
 802b028:	fb0a fa01 	mul.w	sl, sl, r1
 802b02c:	0a22      	lsrs	r2, r4, #8
 802b02e:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802b032:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802b036:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802b03a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802b03e:	4414      	add	r4, r2
 802b040:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802b044:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802b048:	0a2d      	lsrs	r5, r5, #8
 802b04a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802b04e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802b052:	9a03      	ldr	r2, [sp, #12]
 802b054:	8836      	ldrh	r6, [r6, #0]
 802b056:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802b05a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802b05e:	437d      	muls	r5, r7
 802b060:	4461      	add	r1, ip
 802b062:	0a24      	lsrs	r4, r4, #8
 802b064:	fb02 5503 	mla	r5, r2, r3, r5
 802b068:	0a09      	lsrs	r1, r1, #8
 802b06a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802b06e:	fb04 540e 	mla	r4, r4, lr, r5
 802b072:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802b076:	fb01 4100 	mla	r1, r1, r0, r4
 802b07a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802b07e:	0a09      	lsrs	r1, r1, #8
 802b080:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802b084:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 802b088:	fb07 f70a 	mul.w	r7, r7, sl
 802b08c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802b090:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802b094:	fb03 7101 	mla	r1, r3, r1, r7
 802b098:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802b09c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802b0a0:	fb0e 1e08 	mla	lr, lr, r8, r1
 802b0a4:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 802b0a8:	fb00 e101 	mla	r1, r0, r1, lr
 802b0ac:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 802b0b0:	9a00      	ldr	r2, [sp, #0]
 802b0b2:	b287      	uxth	r7, r0
 802b0b4:	437a      	muls	r2, r7
 802b0b6:	0a09      	lsrs	r1, r1, #8
 802b0b8:	1c53      	adds	r3, r2, #1
 802b0ba:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802b0be:	4321      	orrs	r1, r4
 802b0c0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802b0c4:	1235      	asrs	r5, r6, #8
 802b0c6:	0c0a      	lsrs	r2, r1, #16
 802b0c8:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802b0cc:	b2db      	uxtb	r3, r3
 802b0ce:	fb12 f207 	smulbb	r2, r2, r7
 802b0d2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802b0d6:	fb05 2503 	mla	r5, r5, r3, r2
 802b0da:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802b0de:	10f2      	asrs	r2, r6, #3
 802b0e0:	b2c8      	uxtb	r0, r1
 802b0e2:	00f6      	lsls	r6, r6, #3
 802b0e4:	fb14 f407 	smulbb	r4, r4, r7
 802b0e8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802b0ec:	b2f6      	uxtb	r6, r6
 802b0ee:	fb10 f007 	smulbb	r0, r0, r7
 802b0f2:	fb02 4203 	mla	r2, r2, r3, r4
 802b0f6:	b2ad      	uxth	r5, r5
 802b0f8:	fb06 0303 	mla	r3, r6, r3, r0
 802b0fc:	b299      	uxth	r1, r3
 802b0fe:	b294      	uxth	r4, r2
 802b100:	1c6b      	adds	r3, r5, #1
 802b102:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802b106:	1c62      	adds	r2, r4, #1
 802b108:	1c4b      	adds	r3, r1, #1
 802b10a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802b10e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802b112:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802b116:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802b11a:	0952      	lsrs	r2, r2, #5
 802b11c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802b120:	432b      	orrs	r3, r5
 802b122:	4313      	orrs	r3, r2
 802b124:	9a02      	ldr	r2, [sp, #8]
 802b126:	8013      	strh	r3, [r2, #0]
 802b128:	b005      	add	sp, #20
 802b12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b12e:	2500      	movs	r5, #0
 802b130:	e6ef      	b.n	802af12 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 802b132:	2100      	movs	r1, #0
 802b134:	460d      	mov	r5, r1
 802b136:	e6f7      	b.n	802af28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802b138:	2100      	movs	r1, #0
 802b13a:	e6f5      	b.n	802af28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802b13c:	4631      	mov	r1, r6
 802b13e:	e6f3      	b.n	802af28 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802b140:	2400      	movs	r4, #0
 802b142:	e702      	b.n	802af4a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 802b144:	2200      	movs	r2, #0
 802b146:	4614      	mov	r4, r2
 802b148:	e70b      	b.n	802af62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802b14a:	4602      	mov	r2, r0
 802b14c:	4604      	mov	r4, r0
 802b14e:	e708      	b.n	802af62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802b150:	2200      	movs	r2, #0
 802b152:	e706      	b.n	802af62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802b154:	4632      	mov	r2, r6
 802b156:	e704      	b.n	802af62 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

0802b158 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802b158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b15c:	b09d      	sub	sp, #116	; 0x74
 802b15e:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 802b162:	9219      	str	r2, [sp, #100]	; 0x64
 802b164:	9307      	str	r3, [sp, #28]
 802b166:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802b168:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 802b16c:	931a      	str	r3, [sp, #104]	; 0x68
 802b16e:	9117      	str	r1, [sp, #92]	; 0x5c
 802b170:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 802b174:	901b      	str	r0, [sp, #108]	; 0x6c
 802b176:	6850      	ldr	r0, [r2, #4]
 802b178:	6812      	ldr	r2, [r2, #0]
 802b17a:	fb00 1303 	mla	r3, r0, r3, r1
 802b17e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802b182:	930a      	str	r3, [sp, #40]	; 0x28
 802b184:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802b186:	681b      	ldr	r3, [r3, #0]
 802b188:	9310      	str	r3, [sp, #64]	; 0x40
 802b18a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 802b18e:	930b      	str	r3, [sp, #44]	; 0x2c
 802b190:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802b192:	2b00      	cmp	r3, #0
 802b194:	dc03      	bgt.n	802b19e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 802b196:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802b198:	2b00      	cmp	r3, #0
 802b19a:	f340 8375 	ble.w	802b888 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802b19e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802b1a0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802b1a4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802b1a8:	1e48      	subs	r0, r1, #1
 802b1aa:	1e57      	subs	r7, r2, #1
 802b1ac:	9b07      	ldr	r3, [sp, #28]
 802b1ae:	2b00      	cmp	r3, #0
 802b1b0:	f340 818e 	ble.w	802b4d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 802b1b4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802b1b8:	ea4f 4326 	mov.w	r3, r6, asr #16
 802b1bc:	d406      	bmi.n	802b1cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802b1be:	4584      	cmp	ip, r0
 802b1c0:	da04      	bge.n	802b1cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802b1c2:	2b00      	cmp	r3, #0
 802b1c4:	db02      	blt.n	802b1cc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802b1c6:	42bb      	cmp	r3, r7
 802b1c8:	f2c0 8183 	blt.w	802b4d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802b1cc:	f11c 0c01 	adds.w	ip, ip, #1
 802b1d0:	f100 8173 	bmi.w	802b4ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802b1d4:	4561      	cmp	r1, ip
 802b1d6:	f2c0 8170 	blt.w	802b4ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802b1da:	3301      	adds	r3, #1
 802b1dc:	f100 816d 	bmi.w	802b4ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802b1e0:	429a      	cmp	r2, r3
 802b1e2:	f2c0 816a 	blt.w	802b4ba <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802b1e6:	9b07      	ldr	r3, [sp, #28]
 802b1e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802b1ea:	9318      	str	r3, [sp, #96]	; 0x60
 802b1ec:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802b1ee:	2b00      	cmp	r3, #0
 802b1f0:	f340 818c 	ble.w	802b50c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802b1f4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802b1f6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802b1f8:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802b1fc:	689b      	ldr	r3, [r3, #8]
 802b1fe:	1422      	asrs	r2, r4, #16
 802b200:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802b204:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802b208:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802b20c:	f100 81cd 	bmi.w	802b5aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802b210:	f103 38ff 	add.w	r8, r3, #4294967295
 802b214:	4542      	cmp	r2, r8
 802b216:	f280 81c8 	bge.w	802b5aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802b21a:	f1bc 0f00 	cmp.w	ip, #0
 802b21e:	f2c0 81c4 	blt.w	802b5aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802b222:	f10e 38ff 	add.w	r8, lr, #4294967295
 802b226:	45c4      	cmp	ip, r8
 802b228:	f280 81bf 	bge.w	802b5aa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802b22c:	b21b      	sxth	r3, r3
 802b22e:	fb0c 2203 	mla	r2, ip, r3, r2
 802b232:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802b234:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802b238:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802b23c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802b240:	2800      	cmp	r0, #0
 802b242:	f000 81a9 	beq.w	802b598 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 802b246:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802b24a:	950c      	str	r5, [sp, #48]	; 0x30
 802b24c:	0e2d      	lsrs	r5, r5, #24
 802b24e:	9513      	str	r5, [sp, #76]	; 0x4c
 802b250:	b181      	cbz	r1, 802b274 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802b252:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802b256:	3b01      	subs	r3, #1
 802b258:	009b      	lsls	r3, r3, #2
 802b25a:	3304      	adds	r3, #4
 802b25c:	eb08 0c03 	add.w	ip, r8, r3
 802b260:	f858 3003 	ldr.w	r3, [r8, r3]
 802b264:	9308      	str	r3, [sp, #32]
 802b266:	0e1b      	lsrs	r3, r3, #24
 802b268:	9311      	str	r3, [sp, #68]	; 0x44
 802b26a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802b26e:	930d      	str	r3, [sp, #52]	; 0x34
 802b270:	0e1b      	lsrs	r3, r3, #24
 802b272:	9314      	str	r3, [sp, #80]	; 0x50
 802b274:	b280      	uxth	r0, r0
 802b276:	b289      	uxth	r1, r1
 802b278:	fb00 f901 	mul.w	r9, r0, r1
 802b27c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802b280:	0100      	lsls	r0, r0, #4
 802b282:	eba0 0809 	sub.w	r8, r0, r9
 802b286:	b289      	uxth	r1, r1
 802b288:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802b28c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802b28e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802b290:	fa1f f888 	uxth.w	r8, r8
 802b294:	1a5b      	subs	r3, r3, r1
 802b296:	b29b      	uxth	r3, r3
 802b298:	fb08 f000 	mul.w	r0, r8, r0
 802b29c:	fb03 000e 	mla	r0, r3, lr, r0
 802b2a0:	fb01 0005 	mla	r0, r1, r5, r0
 802b2a4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802b2a6:	fb09 0005 	mla	r0, r9, r5, r0
 802b2aa:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802b2ae:	2800      	cmp	r0, #0
 802b2b0:	f000 80fa 	beq.w	802b4a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802b2b4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802b2b8:	d01b      	beq.n	802b2f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802b2ba:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802b2be:	fb0e fa0a 	mul.w	sl, lr, sl
 802b2c2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802b2c6:	fb0e fe02 	mul.w	lr, lr, r2
 802b2ca:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802b2ce:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802b2d2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802b2d6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802b2da:	4452      	add	r2, sl
 802b2dc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802b2e0:	0a12      	lsrs	r2, r2, #8
 802b2e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802b2e6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802b2ea:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802b2ee:	ea42 020c 	orr.w	r2, r2, ip
 802b2f2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802b2f4:	2dff      	cmp	r5, #255	; 0xff
 802b2f6:	d021      	beq.n	802b33c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 802b2f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802b2fa:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802b2fe:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802b300:	fb05 fb0b 	mul.w	fp, r5, fp
 802b304:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802b306:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802b30a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802b30c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802b310:	fb05 fa0a 	mul.w	sl, r5, sl
 802b314:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b318:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802b31c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802b320:	44de      	add	lr, fp
 802b322:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802b326:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b32a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802b32e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b332:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802b336:	ea4e 050a 	orr.w	r5, lr, sl
 802b33a:	950c      	str	r5, [sp, #48]	; 0x30
 802b33c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802b33e:	2dff      	cmp	r5, #255	; 0xff
 802b340:	d021      	beq.n	802b386 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 802b342:	9d08      	ldr	r5, [sp, #32]
 802b344:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802b348:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802b34a:	fb05 fb0b 	mul.w	fp, r5, fp
 802b34e:	9d08      	ldr	r5, [sp, #32]
 802b350:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802b354:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802b356:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802b35a:	fb05 fa0a 	mul.w	sl, r5, sl
 802b35e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b362:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802b366:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802b36a:	44de      	add	lr, fp
 802b36c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802b370:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b374:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802b378:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b37c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802b380:	ea4e 050a 	orr.w	r5, lr, sl
 802b384:	9508      	str	r5, [sp, #32]
 802b386:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802b388:	2dff      	cmp	r5, #255	; 0xff
 802b38a:	d021      	beq.n	802b3d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 802b38c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802b38e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802b392:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802b394:	fb05 fb0b 	mul.w	fp, r5, fp
 802b398:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802b39a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802b39e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802b3a0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802b3a4:	fb05 fa0a 	mul.w	sl, r5, sl
 802b3a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b3ac:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802b3b0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802b3b4:	44de      	add	lr, fp
 802b3b6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802b3ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802b3be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802b3c2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802b3c6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802b3ca:	ea4e 050a 	orr.w	r5, lr, sl
 802b3ce:	950d      	str	r5, [sp, #52]	; 0x34
 802b3d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802b3d2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802b3d6:	9d08      	ldr	r5, [sp, #32]
 802b3d8:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802b3dc:	fb08 fc0c 	mul.w	ip, r8, ip
 802b3e0:	fb03 cc0e 	mla	ip, r3, lr, ip
 802b3e4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802b3e8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802b3ea:	fb01 cc0e 	mla	ip, r1, lr, ip
 802b3ee:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802b3f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802b3f4:	fb09 cc0e 	mla	ip, r9, lr, ip
 802b3f8:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802b3fc:	fb08 f80e 	mul.w	r8, r8, lr
 802b400:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802b404:	fb03 8202 	mla	r2, r3, r2, r8
 802b408:	9b08      	ldr	r3, [sp, #32]
 802b40a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802b40c:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 802b410:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802b412:	fb01 220a 	mla	r2, r1, sl, r2
 802b416:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 802b41a:	fb09 2901 	mla	r9, r9, r1, r2
 802b41e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802b420:	883b      	ldrh	r3, [r7, #0]
 802b422:	4342      	muls	r2, r0
 802b424:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802b428:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802b42c:	1c50      	adds	r0, r2, #1
 802b42e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802b432:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802b436:	ea4c 0c09 	orr.w	ip, ip, r9
 802b43a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802b43e:	1219      	asrs	r1, r3, #8
 802b440:	ea4f 421c 	mov.w	r2, ip, lsr #16
 802b444:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802b448:	b2c0      	uxtb	r0, r0
 802b44a:	fb12 f205 	smulbb	r2, r2, r5
 802b44e:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802b452:	fb01 2100 	mla	r1, r1, r0, r2
 802b456:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 802b45a:	10da      	asrs	r2, r3, #3
 802b45c:	fa5f fc8c 	uxtb.w	ip, ip
 802b460:	00db      	lsls	r3, r3, #3
 802b462:	fb1c fc05 	smulbb	ip, ip, r5
 802b466:	b2db      	uxtb	r3, r3
 802b468:	b289      	uxth	r1, r1
 802b46a:	fb03 c300 	mla	r3, r3, r0, ip
 802b46e:	fa1f fc83 	uxth.w	ip, r3
 802b472:	1c4b      	adds	r3, r1, #1
 802b474:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802b478:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802b47c:	fb1e fe05 	smulbb	lr, lr, r5
 802b480:	f10c 0301 	add.w	r3, ip, #1
 802b484:	fb02 e200 	mla	r2, r2, r0, lr
 802b488:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 802b48c:	b292      	uxth	r2, r2
 802b48e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802b492:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802b496:	430b      	orrs	r3, r1
 802b498:	1c51      	adds	r1, r2, #1
 802b49a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802b49e:	0952      	lsrs	r2, r2, #5
 802b4a0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802b4a4:	4313      	orrs	r3, r2
 802b4a6:	803b      	strh	r3, [r7, #0]
 802b4a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802b4aa:	441c      	add	r4, r3
 802b4ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802b4ae:	441e      	add	r6, r3
 802b4b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802b4b2:	3b01      	subs	r3, #1
 802b4b4:	3702      	adds	r7, #2
 802b4b6:	9318      	str	r3, [sp, #96]	; 0x60
 802b4b8:	e698      	b.n	802b1ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802b4ba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802b4bc:	441c      	add	r4, r3
 802b4be:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802b4c0:	441e      	add	r6, r3
 802b4c2:	9b07      	ldr	r3, [sp, #28]
 802b4c4:	3b01      	subs	r3, #1
 802b4c6:	9307      	str	r3, [sp, #28]
 802b4c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b4ca:	3302      	adds	r3, #2
 802b4cc:	930a      	str	r3, [sp, #40]	; 0x28
 802b4ce:	e66d      	b.n	802b1ac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 802b4d0:	d023      	beq.n	802b51a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 802b4d2:	9b07      	ldr	r3, [sp, #28]
 802b4d4:	9829      	ldr	r0, [sp, #164]	; 0xa4
 802b4d6:	3b01      	subs	r3, #1
 802b4d8:	fb00 4003 	mla	r0, r0, r3, r4
 802b4dc:	1400      	asrs	r0, r0, #16
 802b4de:	f53f ae82 	bmi.w	802b1e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802b4e2:	3901      	subs	r1, #1
 802b4e4:	4288      	cmp	r0, r1
 802b4e6:	f6bf ae7e 	bge.w	802b1e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802b4ea:	992a      	ldr	r1, [sp, #168]	; 0xa8
 802b4ec:	fb01 6303 	mla	r3, r1, r3, r6
 802b4f0:	141b      	asrs	r3, r3, #16
 802b4f2:	f53f ae78 	bmi.w	802b1e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802b4f6:	3a01      	subs	r2, #1
 802b4f8:	4293      	cmp	r3, r2
 802b4fa:	f6bf ae74 	bge.w	802b1e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802b4fe:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802b502:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 802b506:	f1bb 0f00 	cmp.w	fp, #0
 802b50a:	dc6c      	bgt.n	802b5e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802b50c:	9b07      	ldr	r3, [sp, #28]
 802b50e:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802b512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b514:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802b518:	930a      	str	r3, [sp, #40]	; 0x28
 802b51a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802b51c:	2b00      	cmp	r3, #0
 802b51e:	f340 81b3 	ble.w	802b888 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 802b522:	ee30 0a04 	vadd.f32	s0, s0, s8
 802b526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802b52a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802b52e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802b530:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802b534:	ee31 1a05 	vadd.f32	s2, s2, s10
 802b538:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802b53c:	eef0 6a62 	vmov.f32	s13, s5
 802b540:	ee61 7a27 	vmul.f32	s15, s2, s15
 802b544:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b548:	ee77 2a62 	vsub.f32	s5, s14, s5
 802b54c:	ee16 4a90 	vmov	r4, s13
 802b550:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802b554:	eef0 6a43 	vmov.f32	s13, s6
 802b558:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802b55c:	ee12 2a90 	vmov	r2, s5
 802b560:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802b564:	fb92 f3f3 	sdiv	r3, r2, r3
 802b568:	ee13 2a10 	vmov	r2, s6
 802b56c:	9329      	str	r3, [sp, #164]	; 0xa4
 802b56e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802b570:	fb92 f3f3 	sdiv	r3, r2, r3
 802b574:	932a      	str	r3, [sp, #168]	; 0xa8
 802b576:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802b578:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802b57a:	3b01      	subs	r3, #1
 802b57c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b580:	9317      	str	r3, [sp, #92]	; 0x5c
 802b582:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802b584:	bf08      	it	eq
 802b586:	4613      	moveq	r3, r2
 802b588:	ee16 6a90 	vmov	r6, s13
 802b58c:	9307      	str	r3, [sp, #28]
 802b58e:	eeb0 3a67 	vmov.f32	s6, s15
 802b592:	eef0 2a47 	vmov.f32	s5, s14
 802b596:	e5fb      	b.n	802b190 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802b598:	2900      	cmp	r1, #0
 802b59a:	f43f ae6b 	beq.w	802b274 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802b59e:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802b5a2:	9308      	str	r3, [sp, #32]
 802b5a4:	0e1b      	lsrs	r3, r3, #24
 802b5a6:	9311      	str	r3, [sp, #68]	; 0x44
 802b5a8:	e664      	b.n	802b274 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802b5aa:	f112 0801 	adds.w	r8, r2, #1
 802b5ae:	f53f af7b 	bmi.w	802b4a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802b5b2:	4543      	cmp	r3, r8
 802b5b4:	f6ff af78 	blt.w	802b4a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802b5b8:	f11c 0801 	adds.w	r8, ip, #1
 802b5bc:	f53f af74 	bmi.w	802b4a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802b5c0:	45c6      	cmp	lr, r8
 802b5c2:	f6ff af71 	blt.w	802b4a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802b5c6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 802b5c8:	9201      	str	r2, [sp, #4]
 802b5ca:	fa0f f28e 	sxth.w	r2, lr
 802b5ce:	e9cd 1504 	strd	r1, r5, [sp, #16]
 802b5d2:	e9cd c002 	strd	ip, r0, [sp, #8]
 802b5d6:	9200      	str	r2, [sp, #0]
 802b5d8:	b21b      	sxth	r3, r3
 802b5da:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802b5dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802b5de:	4639      	mov	r1, r7
 802b5e0:	f7ff fc79 	bl	802aed6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 802b5e4:	e760      	b.n	802b4a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802b5e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802b5e8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802b5ea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802b5ee:	1427      	asrs	r7, r4, #16
 802b5f0:	1433      	asrs	r3, r6, #16
 802b5f2:	fb01 7303 	mla	r3, r1, r3, r7
 802b5f6:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 802b5fa:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802b5fe:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802b602:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802b606:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802b60a:	2a00      	cmp	r2, #0
 802b60c:	f000 8133 	beq.w	802b876 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 802b610:	687d      	ldr	r5, [r7, #4]
 802b612:	950e      	str	r5, [sp, #56]	; 0x38
 802b614:	0e2d      	lsrs	r5, r5, #24
 802b616:	9515      	str	r5, [sp, #84]	; 0x54
 802b618:	b178      	cbz	r0, 802b63a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802b61a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 802b61e:	3901      	subs	r1, #1
 802b620:	0089      	lsls	r1, r1, #2
 802b622:	3104      	adds	r1, #4
 802b624:	eb07 0e01 	add.w	lr, r7, r1
 802b628:	5879      	ldr	r1, [r7, r1]
 802b62a:	9109      	str	r1, [sp, #36]	; 0x24
 802b62c:	0e09      	lsrs	r1, r1, #24
 802b62e:	9112      	str	r1, [sp, #72]	; 0x48
 802b630:	f8de 1004 	ldr.w	r1, [lr, #4]
 802b634:	910f      	str	r1, [sp, #60]	; 0x3c
 802b636:	0e09      	lsrs	r1, r1, #24
 802b638:	9116      	str	r1, [sp, #88]	; 0x58
 802b63a:	b292      	uxth	r2, r2
 802b63c:	b280      	uxth	r0, r0
 802b63e:	fb02 f800 	mul.w	r8, r2, r0
 802b642:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802b646:	0112      	lsls	r2, r2, #4
 802b648:	eba2 0e08 	sub.w	lr, r2, r8
 802b64c:	b280      	uxth	r0, r0
 802b64e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802b652:	9915      	ldr	r1, [sp, #84]	; 0x54
 802b654:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802b656:	fa1f fe8e 	uxth.w	lr, lr
 802b65a:	1a12      	subs	r2, r2, r0
 802b65c:	b292      	uxth	r2, r2
 802b65e:	fb0e f101 	mul.w	r1, lr, r1
 802b662:	fb02 110c 	mla	r1, r2, ip, r1
 802b666:	fb00 1105 	mla	r1, r0, r5, r1
 802b66a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802b66c:	fb08 1105 	mla	r1, r8, r5, r1
 802b670:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802b674:	2900      	cmp	r1, #0
 802b676:	f000 80f5 	beq.w	802b864 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 802b67a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802b67e:	d019      	beq.n	802b6b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 802b680:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802b684:	fb0c fa0a 	mul.w	sl, ip, sl
 802b688:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b68c:	fb0c fc03 	mul.w	ip, ip, r3
 802b690:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802b694:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802b698:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802b69c:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802b6a0:	4453      	add	r3, sl
 802b6a2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802b6a6:	0a1b      	lsrs	r3, r3, #8
 802b6a8:	0a3f      	lsrs	r7, r7, #8
 802b6aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802b6ae:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802b6b2:	433b      	orrs	r3, r7
 802b6b4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802b6b6:	2dff      	cmp	r5, #255	; 0xff
 802b6b8:	d020      	beq.n	802b6fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 802b6ba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802b6bc:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802b6c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802b6c2:	436f      	muls	r7, r5
 802b6c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802b6c6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802b6ca:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802b6cc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802b6d0:	fb05 fa0a 	mul.w	sl, r5, sl
 802b6d4:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802b6d8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802b6dc:	44bc      	add	ip, r7
 802b6de:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802b6e2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802b6e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802b6ea:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802b6ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802b6f2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802b6f6:	ea4c 050a 	orr.w	r5, ip, sl
 802b6fa:	950e      	str	r5, [sp, #56]	; 0x38
 802b6fc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802b6fe:	2dff      	cmp	r5, #255	; 0xff
 802b700:	d020      	beq.n	802b744 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 802b702:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802b704:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802b708:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802b70a:	436f      	muls	r7, r5
 802b70c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802b70e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802b712:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802b714:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802b718:	fb05 fa0a 	mul.w	sl, r5, sl
 802b71c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802b720:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802b724:	44bc      	add	ip, r7
 802b726:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802b72a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802b72e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802b732:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802b736:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802b73a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802b73e:	ea4c 050a 	orr.w	r5, ip, sl
 802b742:	9509      	str	r5, [sp, #36]	; 0x24
 802b744:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802b746:	2dff      	cmp	r5, #255	; 0xff
 802b748:	d020      	beq.n	802b78c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 802b74a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802b74c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802b750:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802b752:	436f      	muls	r7, r5
 802b754:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802b756:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802b75a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802b75c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802b760:	fb05 fa0a 	mul.w	sl, r5, sl
 802b764:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802b768:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802b76c:	44bc      	add	ip, r7
 802b76e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802b772:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802b776:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802b77a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802b77e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802b782:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802b786:	ea4c 050a 	orr.w	r5, ip, sl
 802b78a:	950f      	str	r5, [sp, #60]	; 0x3c
 802b78c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802b78e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802b792:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802b794:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802b798:	fb0e f707 	mul.w	r7, lr, r7
 802b79c:	fb02 770c 	mla	r7, r2, ip, r7
 802b7a0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802b7a4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802b7a6:	fb00 770c 	mla	r7, r0, ip, r7
 802b7aa:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802b7ae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802b7b0:	fb08 770c 	mla	r7, r8, ip, r7
 802b7b4:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802b7b8:	fb0e fe0c 	mul.w	lr, lr, ip
 802b7bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802b7c0:	fb02 e303 	mla	r3, r2, r3, lr
 802b7c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b7c6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802b7c8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802b7cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802b7ce:	fb00 330a 	mla	r3, r0, sl, r3
 802b7d2:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 802b7d6:	fb08 3c0c 	mla	ip, r8, ip, r3
 802b7da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802b7dc:	f8b9 0000 	ldrh.w	r0, [r9]
 802b7e0:	4359      	muls	r1, r3
 802b7e2:	0a3f      	lsrs	r7, r7, #8
 802b7e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802b7e8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802b7ec:	1c4b      	adds	r3, r1, #1
 802b7ee:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802b7f2:	ea47 070c 	orr.w	r7, r7, ip
 802b7f6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802b7fa:	1202      	asrs	r2, r0, #8
 802b7fc:	0c3b      	lsrs	r3, r7, #16
 802b7fe:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802b802:	b2c9      	uxtb	r1, r1
 802b804:	fb13 f305 	smulbb	r3, r3, r5
 802b808:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802b80c:	fb02 3201 	mla	r2, r2, r1, r3
 802b810:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 802b814:	10c3      	asrs	r3, r0, #3
 802b816:	b2ff      	uxtb	r7, r7
 802b818:	00c0      	lsls	r0, r0, #3
 802b81a:	b2c0      	uxtb	r0, r0
 802b81c:	fb17 f705 	smulbb	r7, r7, r5
 802b820:	fb00 7001 	mla	r0, r0, r1, r7
 802b824:	b292      	uxth	r2, r2
 802b826:	fb1c fc05 	smulbb	ip, ip, r5
 802b82a:	b280      	uxth	r0, r0
 802b82c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802b830:	fb03 c301 	mla	r3, r3, r1, ip
 802b834:	1c51      	adds	r1, r2, #1
 802b836:	f100 0c01 	add.w	ip, r0, #1
 802b83a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802b83e:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802b842:	b29b      	uxth	r3, r3
 802b844:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802b848:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 802b84c:	ea4c 0202 	orr.w	r2, ip, r2
 802b850:	f103 0c01 	add.w	ip, r3, #1
 802b854:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802b858:	095b      	lsrs	r3, r3, #5
 802b85a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802b85e:	431a      	orrs	r2, r3
 802b860:	f8a9 2000 	strh.w	r2, [r9]
 802b864:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802b866:	441c      	add	r4, r3
 802b868:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802b86a:	f109 0902 	add.w	r9, r9, #2
 802b86e:	441e      	add	r6, r3
 802b870:	f10b 3bff 	add.w	fp, fp, #4294967295
 802b874:	e647      	b.n	802b506 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 802b876:	2800      	cmp	r0, #0
 802b878:	f43f aedf 	beq.w	802b63a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802b87c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 802b880:	9109      	str	r1, [sp, #36]	; 0x24
 802b882:	0e09      	lsrs	r1, r1, #24
 802b884:	9112      	str	r1, [sp, #72]	; 0x48
 802b886:	e6d8      	b.n	802b63a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802b888:	b01d      	add	sp, #116	; 0x74
 802b88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802b88e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 802b88e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b892:	b085      	sub	sp, #20
 802b894:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 802b898:	9102      	str	r1, [sp, #8]
 802b89a:	2c00      	cmp	r4, #0
 802b89c:	fb04 7103 	mla	r1, r4, r3, r7
 802b8a0:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 802b8a4:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802b8a8:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802b8ac:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802b8b0:	f2c0 810c 	blt.w	802bacc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802b8b4:	45a6      	cmp	lr, r4
 802b8b6:	f340 8109 	ble.w	802bacc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802b8ba:	2f00      	cmp	r7, #0
 802b8bc:	f2c0 8104 	blt.w	802bac8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802b8c0:	42bb      	cmp	r3, r7
 802b8c2:	f340 8101 	ble.w	802bac8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802b8c6:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802b8ca:	1c7a      	adds	r2, r7, #1
 802b8cc:	f100 8101 	bmi.w	802bad2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802b8d0:	4293      	cmp	r3, r2
 802b8d2:	f340 80fe 	ble.w	802bad2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802b8d6:	2e00      	cmp	r6, #0
 802b8d8:	f000 80fd 	beq.w	802bad6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 802b8dc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802b8e0:	3401      	adds	r4, #1
 802b8e2:	f100 80fc 	bmi.w	802bade <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802b8e6:	45a6      	cmp	lr, r4
 802b8e8:	f340 80f9 	ble.w	802bade <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802b8ec:	2800      	cmp	r0, #0
 802b8ee:	f000 80f9 	beq.w	802bae4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 802b8f2:	2f00      	cmp	r7, #0
 802b8f4:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 802b8f8:	f2c0 80ef 	blt.w	802bada <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 802b8fc:	42bb      	cmp	r3, r7
 802b8fe:	f340 80ec 	ble.w	802bada <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 802b902:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802b906:	3701      	adds	r7, #1
 802b908:	f100 80ef 	bmi.w	802baea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 802b90c:	42bb      	cmp	r3, r7
 802b90e:	f340 80ec 	ble.w	802baea <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 802b912:	2e00      	cmp	r6, #0
 802b914:	f000 80eb 	beq.w	802baee <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 802b918:	6852      	ldr	r2, [r2, #4]
 802b91a:	b2b6      	uxth	r6, r6
 802b91c:	b280      	uxth	r0, r0
 802b91e:	fb00 fe06 	mul.w	lr, r0, r6
 802b922:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802b926:	0136      	lsls	r6, r6, #4
 802b928:	eba6 070e 	sub.w	r7, r6, lr
 802b92c:	b280      	uxth	r0, r0
 802b92e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 802b932:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802b936:	b2bf      	uxth	r7, r7
 802b938:	1a1b      	subs	r3, r3, r0
 802b93a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 802b93e:	b29b      	uxth	r3, r3
 802b940:	fb07 f60a 	mul.w	r6, r7, sl
 802b944:	ea4f 6914 	mov.w	r9, r4, lsr #24
 802b948:	fb0b 6603 	mla	r6, fp, r3, r6
 802b94c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802b950:	fb00 6609 	mla	r6, r0, r9, r6
 802b954:	fb0e 6608 	mla	r6, lr, r8, r6
 802b958:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802b95c:	9600      	str	r6, [sp, #0]
 802b95e:	2e00      	cmp	r6, #0
 802b960:	f000 80af 	beq.w	802bac2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 802b964:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802b968:	fb0b fc0c 	mul.w	ip, fp, ip
 802b96c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802b970:	fb0b f505 	mul.w	r5, fp, r5
 802b974:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802b978:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802b97c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802b980:	44dc      	add	ip, fp
 802b982:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802b986:	9501      	str	r5, [sp, #4]
 802b988:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802b98c:	9503      	str	r5, [sp, #12]
 802b98e:	9d01      	ldr	r5, [sp, #4]
 802b990:	9e02      	ldr	r6, [sp, #8]
 802b992:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802b996:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802b99a:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802b99e:	fb0a fc0c 	mul.w	ip, sl, ip
 802b9a2:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802b9a6:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802b9aa:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802b9ae:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802b9b2:	4465      	add	r5, ip
 802b9b4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802b9b8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802b9bc:	fb09 fc0c 	mul.w	ip, r9, ip
 802b9c0:	fb09 f904 	mul.w	r9, r9, r4
 802b9c4:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802b9c8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802b9cc:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 802b9d0:	fb08 f404 	mul.w	r4, r8, r4
 802b9d4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802b9d8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802b9dc:	fb08 f802 	mul.w	r8, r8, r2
 802b9e0:	fb0a fa01 	mul.w	sl, sl, r1
 802b9e4:	0a22      	lsrs	r2, r4, #8
 802b9e6:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802b9ea:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802b9ee:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 802b9f2:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802b9f6:	4414      	add	r4, r2
 802b9f8:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802b9fc:	f508 7280 	add.w	r2, r8, #256	; 0x100
 802ba00:	0a2d      	lsrs	r5, r5, #8
 802ba02:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802ba06:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802ba0a:	9a03      	ldr	r2, [sp, #12]
 802ba0c:	8836      	ldrh	r6, [r6, #0]
 802ba0e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802ba12:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802ba16:	437d      	muls	r5, r7
 802ba18:	4461      	add	r1, ip
 802ba1a:	0a24      	lsrs	r4, r4, #8
 802ba1c:	fb02 5503 	mla	r5, r2, r3, r5
 802ba20:	0a09      	lsrs	r1, r1, #8
 802ba22:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802ba26:	fb04 540e 	mla	r4, r4, lr, r5
 802ba2a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802ba2e:	fb01 4100 	mla	r1, r1, r0, r4
 802ba32:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802ba36:	0a09      	lsrs	r1, r1, #8
 802ba38:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802ba3c:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 802ba40:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802ba44:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802ba48:	fb07 f70a 	mul.w	r7, r7, sl
 802ba4c:	fb03 7101 	mla	r1, r3, r1, r7
 802ba50:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802ba54:	9b00      	ldr	r3, [sp, #0]
 802ba56:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802ba5a:	fb0e 1e08 	mla	lr, lr, r8, r1
 802ba5e:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 802ba62:	fb00 e101 	mla	r1, r0, r1, lr
 802ba66:	43da      	mvns	r2, r3
 802ba68:	1233      	asrs	r3, r6, #8
 802ba6a:	b2d2      	uxtb	r2, r2
 802ba6c:	10f0      	asrs	r0, r6, #3
 802ba6e:	0a09      	lsrs	r1, r1, #8
 802ba70:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 802ba74:	00f6      	lsls	r6, r6, #3
 802ba76:	4353      	muls	r3, r2
 802ba78:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802ba7c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802ba80:	b2f6      	uxtb	r6, r6
 802ba82:	4321      	orrs	r1, r4
 802ba84:	4350      	muls	r0, r2
 802ba86:	4356      	muls	r6, r2
 802ba88:	1c5a      	adds	r2, r3, #1
 802ba8a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802ba8e:	0c0b      	lsrs	r3, r1, #16
 802ba90:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802ba94:	1c42      	adds	r2, r0, #1
 802ba96:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802ba9a:	0a0a      	lsrs	r2, r1, #8
 802ba9c:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802baa0:	021b      	lsls	r3, r3, #8
 802baa2:	00d2      	lsls	r2, r2, #3
 802baa4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802baa8:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 802baac:	4313      	orrs	r3, r2
 802baae:	1c72      	adds	r2, r6, #1
 802bab0:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 802bab4:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 802bab8:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802babc:	4319      	orrs	r1, r3
 802babe:	9b02      	ldr	r3, [sp, #8]
 802bac0:	8019      	strh	r1, [r3, #0]
 802bac2:	b005      	add	sp, #20
 802bac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bac8:	2500      	movs	r5, #0
 802baca:	e6fe      	b.n	802b8ca <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 802bacc:	2100      	movs	r1, #0
 802bace:	460d      	mov	r5, r1
 802bad0:	e706      	b.n	802b8e0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802bad2:	2100      	movs	r1, #0
 802bad4:	e704      	b.n	802b8e0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802bad6:	4631      	mov	r1, r6
 802bad8:	e702      	b.n	802b8e0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802bada:	2400      	movs	r4, #0
 802badc:	e713      	b.n	802b906 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 802bade:	2200      	movs	r2, #0
 802bae0:	4614      	mov	r4, r2
 802bae2:	e71a      	b.n	802b91a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802bae4:	4602      	mov	r2, r0
 802bae6:	4604      	mov	r4, r0
 802bae8:	e717      	b.n	802b91a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802baea:	2200      	movs	r2, #0
 802baec:	e715      	b.n	802b91a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802baee:	4632      	mov	r2, r6
 802baf0:	e713      	b.n	802b91a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

0802baf4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802baf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802baf8:	b09b      	sub	sp, #108	; 0x6c
 802bafa:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802bafe:	9218      	str	r2, [sp, #96]	; 0x60
 802bb00:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802bb02:	9116      	str	r1, [sp, #88]	; 0x58
 802bb04:	9307      	str	r3, [sp, #28]
 802bb06:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802bb0a:	9019      	str	r0, [sp, #100]	; 0x64
 802bb0c:	6850      	ldr	r0, [r2, #4]
 802bb0e:	6812      	ldr	r2, [r2, #0]
 802bb10:	fb00 1303 	mla	r3, r0, r3, r1
 802bb14:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802bb18:	930a      	str	r3, [sp, #40]	; 0x28
 802bb1a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802bb1c:	681b      	ldr	r3, [r3, #0]
 802bb1e:	930f      	str	r3, [sp, #60]	; 0x3c
 802bb20:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802bb22:	2b00      	cmp	r3, #0
 802bb24:	dc03      	bgt.n	802bb2e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802bb26:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802bb28:	2b00      	cmp	r3, #0
 802bb2a:	f340 8386 	ble.w	802c23a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 802bb2e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802bb30:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802bb34:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802bb38:	1e48      	subs	r0, r1, #1
 802bb3a:	1e57      	subs	r7, r2, #1
 802bb3c:	9b07      	ldr	r3, [sp, #28]
 802bb3e:	2b00      	cmp	r3, #0
 802bb40:	f340 8166 	ble.w	802be10 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802bb44:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802bb48:	ea4f 4326 	mov.w	r3, r6, asr #16
 802bb4c:	d406      	bmi.n	802bb5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802bb4e:	4584      	cmp	ip, r0
 802bb50:	da04      	bge.n	802bb5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802bb52:	2b00      	cmp	r3, #0
 802bb54:	db02      	blt.n	802bb5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802bb56:	42bb      	cmp	r3, r7
 802bb58:	f2c0 815b 	blt.w	802be12 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802bb5c:	f11c 0c01 	adds.w	ip, ip, #1
 802bb60:	f100 814b 	bmi.w	802bdfa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802bb64:	4561      	cmp	r1, ip
 802bb66:	f2c0 8148 	blt.w	802bdfa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802bb6a:	3301      	adds	r3, #1
 802bb6c:	f100 8145 	bmi.w	802bdfa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802bb70:	429a      	cmp	r2, r3
 802bb72:	f2c0 8142 	blt.w	802bdfa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802bb76:	9b07      	ldr	r3, [sp, #28]
 802bb78:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802bb7a:	9317      	str	r3, [sp, #92]	; 0x5c
 802bb7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802bb7e:	2b00      	cmp	r3, #0
 802bb80:	f340 8165 	ble.w	802be4e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802bb84:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 802bb86:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802bb88:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802bb8c:	689b      	ldr	r3, [r3, #8]
 802bb8e:	1422      	asrs	r2, r4, #16
 802bb90:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802bb94:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802bb98:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802bb9c:	f100 81d5 	bmi.w	802bf4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802bba0:	f103 38ff 	add.w	r8, r3, #4294967295
 802bba4:	4542      	cmp	r2, r8
 802bba6:	f280 81d0 	bge.w	802bf4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802bbaa:	f1bc 0f00 	cmp.w	ip, #0
 802bbae:	f2c0 81cc 	blt.w	802bf4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802bbb2:	f10e 38ff 	add.w	r8, lr, #4294967295
 802bbb6:	45c4      	cmp	ip, r8
 802bbb8:	f280 81c7 	bge.w	802bf4a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802bbbc:	b21b      	sxth	r3, r3
 802bbbe:	fb0c 2203 	mla	r2, ip, r3, r2
 802bbc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802bbc4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802bbc8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802bbcc:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802bbd0:	2900      	cmp	r1, #0
 802bbd2:	f000 8182 	beq.w	802beda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802bbd6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802bbda:	950b      	str	r5, [sp, #44]	; 0x2c
 802bbdc:	0e2d      	lsrs	r5, r5, #24
 802bbde:	9512      	str	r5, [sp, #72]	; 0x48
 802bbe0:	b180      	cbz	r0, 802bc04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802bbe2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802bbe6:	3b01      	subs	r3, #1
 802bbe8:	009b      	lsls	r3, r3, #2
 802bbea:	3304      	adds	r3, #4
 802bbec:	eb08 0c03 	add.w	ip, r8, r3
 802bbf0:	f858 3003 	ldr.w	r3, [r8, r3]
 802bbf4:	9308      	str	r3, [sp, #32]
 802bbf6:	0e1b      	lsrs	r3, r3, #24
 802bbf8:	9310      	str	r3, [sp, #64]	; 0x40
 802bbfa:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802bbfe:	930c      	str	r3, [sp, #48]	; 0x30
 802bc00:	0e1b      	lsrs	r3, r3, #24
 802bc02:	9313      	str	r3, [sp, #76]	; 0x4c
 802bc04:	b289      	uxth	r1, r1
 802bc06:	b280      	uxth	r0, r0
 802bc08:	fb01 f900 	mul.w	r9, r1, r0
 802bc0c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802bc10:	0109      	lsls	r1, r1, #4
 802bc12:	eba1 0809 	sub.w	r8, r1, r9
 802bc16:	b280      	uxth	r0, r0
 802bc18:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802bc1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802bc1e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802bc20:	fa1f f888 	uxth.w	r8, r8
 802bc24:	1a09      	subs	r1, r1, r0
 802bc26:	b289      	uxth	r1, r1
 802bc28:	fb08 f303 	mul.w	r3, r8, r3
 802bc2c:	fb01 330e 	mla	r3, r1, lr, r3
 802bc30:	fb00 3305 	mla	r3, r0, r5, r3
 802bc34:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802bc36:	fb09 3305 	mla	r3, r9, r5, r3
 802bc3a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802bc3e:	2b00      	cmp	r3, #0
 802bc40:	f000 80d2 	beq.w	802bde8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802bc44:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802bc48:	d01b      	beq.n	802bc82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802bc4a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 802bc4e:	fb0e fa0a 	mul.w	sl, lr, sl
 802bc52:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802bc56:	fb0e fe02 	mul.w	lr, lr, r2
 802bc5a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802bc5e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802bc62:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802bc66:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 802bc6a:	4452      	add	r2, sl
 802bc6c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802bc70:	0a12      	lsrs	r2, r2, #8
 802bc72:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802bc76:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802bc7a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802bc7e:	ea42 020c 	orr.w	r2, r2, ip
 802bc82:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802bc84:	2dff      	cmp	r5, #255	; 0xff
 802bc86:	d021      	beq.n	802bccc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802bc88:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802bc8a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802bc8e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802bc90:	fb05 fb0b 	mul.w	fp, r5, fp
 802bc94:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802bc96:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802bc9a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802bc9c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802bca0:	fb05 fa0a 	mul.w	sl, r5, sl
 802bca4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802bca8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802bcac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802bcb0:	44de      	add	lr, fp
 802bcb2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802bcb6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802bcba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802bcbe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802bcc2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802bcc6:	ea4e 050a 	orr.w	r5, lr, sl
 802bcca:	950b      	str	r5, [sp, #44]	; 0x2c
 802bccc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802bcce:	2dff      	cmp	r5, #255	; 0xff
 802bcd0:	d021      	beq.n	802bd16 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802bcd2:	9d08      	ldr	r5, [sp, #32]
 802bcd4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802bcd8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802bcda:	fb05 fb0b 	mul.w	fp, r5, fp
 802bcde:	9d08      	ldr	r5, [sp, #32]
 802bce0:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802bce4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802bce6:	fb05 fa0e 	mul.w	sl, r5, lr
 802bcea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802bcee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802bcf2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802bcf6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802bcfa:	44de      	add	lr, fp
 802bcfc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802bd00:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802bd04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802bd08:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802bd0c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802bd10:	ea4e 050a 	orr.w	r5, lr, sl
 802bd14:	9508      	str	r5, [sp, #32]
 802bd16:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802bd18:	2dff      	cmp	r5, #255	; 0xff
 802bd1a:	d021      	beq.n	802bd60 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802bd1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802bd1e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802bd22:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802bd24:	fb05 fb0b 	mul.w	fp, r5, fp
 802bd28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802bd2a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802bd2e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802bd30:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802bd34:	fb05 fa0a 	mul.w	sl, r5, sl
 802bd38:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802bd3c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802bd40:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802bd44:	44de      	add	lr, fp
 802bd46:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802bd4a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802bd4e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802bd52:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802bd56:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802bd5a:	ea4e 050a 	orr.w	r5, lr, sl
 802bd5e:	950c      	str	r5, [sp, #48]	; 0x30
 802bd60:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802bd62:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802bd66:	9d08      	ldr	r5, [sp, #32]
 802bd68:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 802bd6c:	fb08 fc0c 	mul.w	ip, r8, ip
 802bd70:	fb01 cc0e 	mla	ip, r1, lr, ip
 802bd74:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802bd78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802bd7a:	fb00 cc0e 	mla	ip, r0, lr, ip
 802bd7e:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802bd82:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802bd84:	fb09 cc0e 	mla	ip, r9, lr, ip
 802bd88:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802bd8c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802bd90:	fb08 f80e 	mul.w	r8, r8, lr
 802bd94:	fb01 8202 	mla	r2, r1, r2, r8
 802bd98:	9908      	ldr	r1, [sp, #32]
 802bd9a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802bd9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 802bda0:	fb00 220a 	mla	r2, r0, sl, r2
 802bda4:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802bda8:	fb09 2900 	mla	r9, r9, r0, r2
 802bdac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802bdb0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802bdb4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802bdb8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802bdbc:	ea4c 0c09 	orr.w	ip, ip, r9
 802bdc0:	2bff      	cmp	r3, #255	; 0xff
 802bdc2:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802bdc6:	f040 8091 	bne.w	802beec <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802bdca:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802bdce:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 802bdd2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802bdd6:	f022 0207 	bic.w	r2, r2, #7
 802bdda:	431a      	orrs	r2, r3
 802bddc:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802bde0:	ea4c 0c02 	orr.w	ip, ip, r2
 802bde4:	f8a7 c000 	strh.w	ip, [r7]
 802bde8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802bdea:	441c      	add	r4, r3
 802bdec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802bdee:	441e      	add	r6, r3
 802bdf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802bdf2:	3b01      	subs	r3, #1
 802bdf4:	3702      	adds	r7, #2
 802bdf6:	9317      	str	r3, [sp, #92]	; 0x5c
 802bdf8:	e6c0      	b.n	802bb7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802bdfa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802bdfc:	441c      	add	r4, r3
 802bdfe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802be00:	441e      	add	r6, r3
 802be02:	9b07      	ldr	r3, [sp, #28]
 802be04:	3b01      	subs	r3, #1
 802be06:	9307      	str	r3, [sp, #28]
 802be08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802be0a:	3302      	adds	r3, #2
 802be0c:	930a      	str	r3, [sp, #40]	; 0x28
 802be0e:	e695      	b.n	802bb3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802be10:	d024      	beq.n	802be5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802be12:	9b07      	ldr	r3, [sp, #28]
 802be14:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802be16:	3b01      	subs	r3, #1
 802be18:	fb00 4003 	mla	r0, r0, r3, r4
 802be1c:	1400      	asrs	r0, r0, #16
 802be1e:	f53f aeaa 	bmi.w	802bb76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802be22:	3901      	subs	r1, #1
 802be24:	4288      	cmp	r0, r1
 802be26:	f6bf aea6 	bge.w	802bb76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802be2a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802be2c:	fb01 6303 	mla	r3, r1, r3, r6
 802be30:	141b      	asrs	r3, r3, #16
 802be32:	f53f aea0 	bmi.w	802bb76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802be36:	3a01      	subs	r2, #1
 802be38:	4293      	cmp	r3, r2
 802be3a:	f6bf ae9c 	bge.w	802bb76 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802be3e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802be42:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 802be46:	f1bb 0f00 	cmp.w	fp, #0
 802be4a:	f300 809a 	bgt.w	802bf82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802be4e:	9b07      	ldr	r3, [sp, #28]
 802be50:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802be54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802be56:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802be5a:	930a      	str	r3, [sp, #40]	; 0x28
 802be5c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802be5e:	2b00      	cmp	r3, #0
 802be60:	f340 81eb 	ble.w	802c23a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 802be64:	ee30 0a04 	vadd.f32	s0, s0, s8
 802be68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802be6c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802be70:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802be72:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802be76:	ee31 1a05 	vadd.f32	s2, s2, s10
 802be7a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802be7e:	eef0 6a62 	vmov.f32	s13, s5
 802be82:	ee61 7a27 	vmul.f32	s15, s2, s15
 802be86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802be8a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802be8e:	ee16 4a90 	vmov	r4, s13
 802be92:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802be96:	eef0 6a43 	vmov.f32	s13, s6
 802be9a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802be9e:	ee12 2a90 	vmov	r2, s5
 802bea2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802bea6:	fb92 f3f3 	sdiv	r3, r2, r3
 802beaa:	ee13 2a10 	vmov	r2, s6
 802beae:	9327      	str	r3, [sp, #156]	; 0x9c
 802beb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802beb2:	fb92 f3f3 	sdiv	r3, r2, r3
 802beb6:	9328      	str	r3, [sp, #160]	; 0xa0
 802beb8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802beba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802bebc:	3b01      	subs	r3, #1
 802bebe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802bec2:	9316      	str	r3, [sp, #88]	; 0x58
 802bec4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802bec6:	bf08      	it	eq
 802bec8:	4613      	moveq	r3, r2
 802beca:	ee16 6a90 	vmov	r6, s13
 802bece:	9307      	str	r3, [sp, #28]
 802bed0:	eeb0 3a67 	vmov.f32	s6, s15
 802bed4:	eef0 2a47 	vmov.f32	s5, s14
 802bed8:	e622      	b.n	802bb20 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802beda:	2800      	cmp	r0, #0
 802bedc:	f43f ae92 	beq.w	802bc04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802bee0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802bee4:	9308      	str	r3, [sp, #32]
 802bee6:	0e1b      	lsrs	r3, r3, #24
 802bee8:	9310      	str	r3, [sp, #64]	; 0x40
 802beea:	e68b      	b.n	802bc04 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802beec:	8839      	ldrh	r1, [r7, #0]
 802beee:	4dd4      	ldr	r5, [pc, #848]	; (802c240 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 802bef0:	43db      	mvns	r3, r3
 802bef2:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802bef6:	fa5f f883 	uxtb.w	r8, r3
 802befa:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 802befe:	fb0e fe08 	mul.w	lr, lr, r8
 802bf02:	10c8      	asrs	r0, r1, #3
 802bf04:	00cb      	lsls	r3, r1, #3
 802bf06:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802bf0a:	f10e 0101 	add.w	r1, lr, #1
 802bf0e:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 802bf12:	fb00 f008 	mul.w	r0, r0, r8
 802bf16:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802bf1a:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 802bf1e:	f100 0e01 	add.w	lr, r0, #1
 802bf22:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802bf26:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802bf2a:	b2db      	uxtb	r3, r3
 802bf2c:	b2c9      	uxtb	r1, r1
 802bf2e:	00d2      	lsls	r2, r2, #3
 802bf30:	fb03 f308 	mul.w	r3, r3, r8
 802bf34:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802bf38:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802bf3c:	430a      	orrs	r2, r1
 802bf3e:	1c59      	adds	r1, r3, #1
 802bf40:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802bf44:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802bf48:	e748      	b.n	802bddc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802bf4a:	f112 0801 	adds.w	r8, r2, #1
 802bf4e:	f53f af4b 	bmi.w	802bde8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802bf52:	4543      	cmp	r3, r8
 802bf54:	f6ff af48 	blt.w	802bde8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802bf58:	f11c 0801 	adds.w	r8, ip, #1
 802bf5c:	f53f af44 	bmi.w	802bde8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802bf60:	45c6      	cmp	lr, r8
 802bf62:	f6ff af41 	blt.w	802bde8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802bf66:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802bf6a:	fa0f f28e 	sxth.w	r2, lr
 802bf6e:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802bf72:	9200      	str	r2, [sp, #0]
 802bf74:	b21b      	sxth	r3, r3
 802bf76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802bf78:	9819      	ldr	r0, [sp, #100]	; 0x64
 802bf7a:	4639      	mov	r1, r7
 802bf7c:	f7ff fc87 	bl	802b88e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 802bf80:	e732      	b.n	802bde8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802bf82:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802bf84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802bf86:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802bf8a:	1421      	asrs	r1, r4, #16
 802bf8c:	1433      	asrs	r3, r6, #16
 802bf8e:	fb07 1303 	mla	r3, r7, r3, r1
 802bf92:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802bf94:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802bf98:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802bf9c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802bfa0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802bfa4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802bfa8:	2a00      	cmp	r2, #0
 802bfaa:	f000 8107 	beq.w	802c1bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c8>
 802bfae:	684d      	ldr	r5, [r1, #4]
 802bfb0:	950d      	str	r5, [sp, #52]	; 0x34
 802bfb2:	0e2d      	lsrs	r5, r5, #24
 802bfb4:	9514      	str	r5, [sp, #80]	; 0x50
 802bfb6:	b178      	cbz	r0, 802bfd8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802bfb8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 802bfbc:	3f01      	subs	r7, #1
 802bfbe:	00bf      	lsls	r7, r7, #2
 802bfc0:	3704      	adds	r7, #4
 802bfc2:	eb01 0e07 	add.w	lr, r1, r7
 802bfc6:	59c9      	ldr	r1, [r1, r7]
 802bfc8:	9109      	str	r1, [sp, #36]	; 0x24
 802bfca:	0e09      	lsrs	r1, r1, #24
 802bfcc:	9111      	str	r1, [sp, #68]	; 0x44
 802bfce:	f8de 1004 	ldr.w	r1, [lr, #4]
 802bfd2:	910e      	str	r1, [sp, #56]	; 0x38
 802bfd4:	0e09      	lsrs	r1, r1, #24
 802bfd6:	9115      	str	r1, [sp, #84]	; 0x54
 802bfd8:	b292      	uxth	r2, r2
 802bfda:	b280      	uxth	r0, r0
 802bfdc:	fb02 f900 	mul.w	r9, r2, r0
 802bfe0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802bfe4:	0112      	lsls	r2, r2, #4
 802bfe6:	eba2 0e09 	sub.w	lr, r2, r9
 802bfea:	b280      	uxth	r0, r0
 802bfec:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802bff0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802bff2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802bff4:	fa1f fe8e 	uxth.w	lr, lr
 802bff8:	1a09      	subs	r1, r1, r0
 802bffa:	b289      	uxth	r1, r1
 802bffc:	fb0e f202 	mul.w	r2, lr, r2
 802c000:	fb01 220c 	mla	r2, r1, ip, r2
 802c004:	fb00 2205 	mla	r2, r0, r5, r2
 802c008:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802c00a:	fb09 2205 	mla	r2, r9, r5, r2
 802c00e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802c012:	2a00      	cmp	r2, #0
 802c014:	f000 80c9 	beq.w	802c1aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 802c018:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802c01c:	d019      	beq.n	802c052 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 802c01e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802c022:	fb0c fa0a 	mul.w	sl, ip, sl
 802c026:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802c02a:	fb0c fc03 	mul.w	ip, ip, r3
 802c02e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802c032:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802c036:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802c03a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802c03e:	4453      	add	r3, sl
 802c040:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802c044:	0a1b      	lsrs	r3, r3, #8
 802c046:	0a3f      	lsrs	r7, r7, #8
 802c048:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802c04c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802c050:	433b      	orrs	r3, r7
 802c052:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802c054:	2dff      	cmp	r5, #255	; 0xff
 802c056:	d020      	beq.n	802c09a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 802c058:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802c05a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802c05e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802c060:	436f      	muls	r7, r5
 802c062:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802c064:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802c068:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802c06a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802c06e:	fb05 fa0a 	mul.w	sl, r5, sl
 802c072:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802c076:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802c07a:	44bc      	add	ip, r7
 802c07c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802c080:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802c084:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802c088:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802c08c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802c090:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802c094:	ea4c 050a 	orr.w	r5, ip, sl
 802c098:	950d      	str	r5, [sp, #52]	; 0x34
 802c09a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802c09c:	2dff      	cmp	r5, #255	; 0xff
 802c09e:	d020      	beq.n	802c0e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 802c0a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802c0a2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802c0a6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802c0a8:	436f      	muls	r7, r5
 802c0aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802c0ac:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802c0b0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802c0b2:	fb05 fa0c 	mul.w	sl, r5, ip
 802c0b6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802c0ba:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802c0be:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802c0c2:	44bc      	add	ip, r7
 802c0c4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802c0c8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802c0cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802c0d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802c0d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802c0d8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802c0dc:	ea4c 050a 	orr.w	r5, ip, sl
 802c0e0:	9509      	str	r5, [sp, #36]	; 0x24
 802c0e2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802c0e4:	2dff      	cmp	r5, #255	; 0xff
 802c0e6:	d020      	beq.n	802c12a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 802c0e8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802c0ea:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802c0ee:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802c0f0:	436f      	muls	r7, r5
 802c0f2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802c0f4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802c0f8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802c0fa:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802c0fe:	fb05 fa0a 	mul.w	sl, r5, sl
 802c102:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802c106:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802c10a:	44bc      	add	ip, r7
 802c10c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802c110:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802c114:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802c118:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802c11c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802c120:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802c124:	ea4c 050a 	orr.w	r5, ip, sl
 802c128:	950e      	str	r5, [sp, #56]	; 0x38
 802c12a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802c12c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802c130:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802c132:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802c136:	fb0e f707 	mul.w	r7, lr, r7
 802c13a:	fb01 770c 	mla	r7, r1, ip, r7
 802c13e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802c142:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802c144:	fb00 770c 	mla	r7, r0, ip, r7
 802c148:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802c14c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802c14e:	fb09 770c 	mla	r7, r9, ip, r7
 802c152:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802c156:	fb0e fe0c 	mul.w	lr, lr, ip
 802c15a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802c15e:	fb01 e303 	mla	r3, r1, r3, lr
 802c162:	9909      	ldr	r1, [sp, #36]	; 0x24
 802c164:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802c168:	990e      	ldr	r1, [sp, #56]	; 0x38
 802c16a:	fb00 330a 	mla	r3, r0, sl, r3
 802c16e:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802c172:	fb09 3c0c 	mla	ip, r9, ip, r3
 802c176:	0a3f      	lsrs	r7, r7, #8
 802c178:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802c17c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802c180:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802c184:	ea47 070c 	orr.w	r7, r7, ip
 802c188:	2aff      	cmp	r2, #255	; 0xff
 802c18a:	ea4f 2317 	mov.w	r3, r7, lsr #8
 802c18e:	d11e      	bne.n	802c1ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6da>
 802c190:	097a      	lsrs	r2, r7, #5
 802c192:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802c196:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802c19a:	f023 0307 	bic.w	r3, r3, #7
 802c19e:	4313      	orrs	r3, r2
 802c1a0:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802c1a4:	431f      	orrs	r7, r3
 802c1a6:	f8a8 7000 	strh.w	r7, [r8]
 802c1aa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802c1ac:	441c      	add	r4, r3
 802c1ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802c1b0:	f108 0802 	add.w	r8, r8, #2
 802c1b4:	441e      	add	r6, r3
 802c1b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 802c1ba:	e644      	b.n	802be46 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 802c1bc:	2800      	cmp	r0, #0
 802c1be:	f43f af0b 	beq.w	802bfd8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802c1c2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802c1c6:	9109      	str	r1, [sp, #36]	; 0x24
 802c1c8:	0e09      	lsrs	r1, r1, #24
 802c1ca:	9111      	str	r1, [sp, #68]	; 0x44
 802c1cc:	e704      	b.n	802bfd8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802c1ce:	f8b8 1000 	ldrh.w	r1, [r8]
 802c1d2:	43d2      	mvns	r2, r2
 802c1d4:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802c1d8:	fa5f fe82 	uxtb.w	lr, r2
 802c1dc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802c1e0:	fb0c fc0e 	mul.w	ip, ip, lr
 802c1e4:	10c8      	asrs	r0, r1, #3
 802c1e6:	00ca      	lsls	r2, r1, #3
 802c1e8:	f10c 0101 	add.w	r1, ip, #1
 802c1ec:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802c1f0:	0c39      	lsrs	r1, r7, #16
 802c1f2:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802c1f6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802c1fa:	4911      	ldr	r1, [pc, #68]	; (802c240 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 802c1fc:	fb00 f00e 	mul.w	r0, r0, lr
 802c200:	fa5f fc8c 	uxtb.w	ip, ip
 802c204:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802c208:	b2d2      	uxtb	r2, r2
 802c20a:	1c41      	adds	r1, r0, #1
 802c20c:	fb02 f20e 	mul.w	r2, r2, lr
 802c210:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802c214:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802c218:	1c51      	adds	r1, r2, #1
 802c21a:	00c0      	lsls	r0, r0, #3
 802c21c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802c220:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802c224:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802c228:	ea4c 0c00 	orr.w	ip, ip, r0
 802c22c:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802c230:	ea47 0c0c 	orr.w	ip, r7, ip
 802c234:	f8a8 c000 	strh.w	ip, [r8]
 802c238:	e7b7      	b.n	802c1aa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 802c23a:	b01b      	add	sp, #108	; 0x6c
 802c23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c240:	fffff800 	.word	0xfffff800

0802c244 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802c244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c248:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 802c24c:	2d00      	cmp	r5, #0
 802c24e:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802c252:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802c256:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802c25a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802c25e:	fb05 0e03 	mla	lr, r5, r3, r0
 802c262:	f2c0 808c 	blt.w	802c37e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802c266:	45a9      	cmp	r9, r5
 802c268:	f340 8089 	ble.w	802c37e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802c26c:	2800      	cmp	r0, #0
 802c26e:	f2c0 8084 	blt.w	802c37a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802c272:	4580      	cmp	r8, r0
 802c274:	f340 8081 	ble.w	802c37a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802c278:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802c27c:	f01e 0f01 	tst.w	lr, #1
 802c280:	5d16      	ldrb	r6, [r2, r4]
 802c282:	bf0c      	ite	eq
 802c284:	f006 060f 	andeq.w	r6, r6, #15
 802c288:	1136      	asrne	r6, r6, #4
 802c28a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802c28e:	b2f6      	uxtb	r6, r6
 802c290:	1c44      	adds	r4, r0, #1
 802c292:	d477      	bmi.n	802c384 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802c294:	45a0      	cmp	r8, r4
 802c296:	dd75      	ble.n	802c384 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802c298:	2f00      	cmp	r7, #0
 802c29a:	d075      	beq.n	802c388 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 802c29c:	f10e 0a01 	add.w	sl, lr, #1
 802c2a0:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802c2a4:	f01a 0f01 	tst.w	sl, #1
 802c2a8:	5d14      	ldrb	r4, [r2, r4]
 802c2aa:	bf0c      	ite	eq
 802c2ac:	f004 040f 	andeq.w	r4, r4, #15
 802c2b0:	1124      	asrne	r4, r4, #4
 802c2b2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802c2b6:	b2e4      	uxtb	r4, r4
 802c2b8:	3501      	adds	r5, #1
 802c2ba:	d469      	bmi.n	802c390 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802c2bc:	45a9      	cmp	r9, r5
 802c2be:	dd67      	ble.n	802c390 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802c2c0:	f1bc 0f00 	cmp.w	ip, #0
 802c2c4:	d067      	beq.n	802c396 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 802c2c6:	2800      	cmp	r0, #0
 802c2c8:	db60      	blt.n	802c38c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802c2ca:	4580      	cmp	r8, r0
 802c2cc:	dd5e      	ble.n	802c38c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802c2ce:	eb03 090e 	add.w	r9, r3, lr
 802c2d2:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802c2d6:	f019 0f01 	tst.w	r9, #1
 802c2da:	5d55      	ldrb	r5, [r2, r5]
 802c2dc:	bf0c      	ite	eq
 802c2de:	f005 050f 	andeq.w	r5, r5, #15
 802c2e2:	112d      	asrne	r5, r5, #4
 802c2e4:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802c2e8:	b2ed      	uxtb	r5, r5
 802c2ea:	3001      	adds	r0, #1
 802c2ec:	d456      	bmi.n	802c39c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802c2ee:	4580      	cmp	r8, r0
 802c2f0:	dd54      	ble.n	802c39c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802c2f2:	2f00      	cmp	r7, #0
 802c2f4:	d054      	beq.n	802c3a0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802c2f6:	3301      	adds	r3, #1
 802c2f8:	449e      	add	lr, r3
 802c2fa:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802c2fe:	f01e 0f01 	tst.w	lr, #1
 802c302:	5cd0      	ldrb	r0, [r2, r3]
 802c304:	bf0c      	ite	eq
 802c306:	f000 000f 	andeq.w	r0, r0, #15
 802c30a:	1100      	asrne	r0, r0, #4
 802c30c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802c310:	b2c3      	uxtb	r3, r0
 802c312:	b2ba      	uxth	r2, r7
 802c314:	fa1f fc8c 	uxth.w	ip, ip
 802c318:	fb02 f00c 	mul.w	r0, r2, ip
 802c31c:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802c320:	0112      	lsls	r2, r2, #4
 802c322:	fa1f fc8c 	uxth.w	ip, ip
 802c326:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802c32a:	1a12      	subs	r2, r2, r0
 802c32c:	eba7 070c 	sub.w	r7, r7, ip
 802c330:	b292      	uxth	r2, r2
 802c332:	b2bf      	uxth	r7, r7
 802c334:	4362      	muls	r2, r4
 802c336:	fb06 2207 	mla	r2, r6, r7, r2
 802c33a:	fb0c 2505 	mla	r5, ip, r5, r2
 802c33e:	fb00 5303 	mla	r3, r0, r3, r5
 802c342:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802c346:	b1b3      	cbz	r3, 802c376 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802c348:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 802c34c:	435a      	muls	r2, r3
 802c34e:	1c53      	adds	r3, r2, #1
 802c350:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802c354:	4a2d      	ldr	r2, [pc, #180]	; (802c40c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802c356:	121b      	asrs	r3, r3, #8
 802c358:	6812      	ldr	r2, [r2, #0]
 802c35a:	2bff      	cmp	r3, #255	; 0xff
 802c35c:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802c360:	d120      	bne.n	802c3a4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 802c362:	4b2b      	ldr	r3, [pc, #172]	; (802c410 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802c364:	0950      	lsrs	r0, r2, #5
 802c366:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802c36a:	4033      	ands	r3, r6
 802c36c:	4318      	orrs	r0, r3
 802c36e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802c372:	4302      	orrs	r2, r0
 802c374:	800a      	strh	r2, [r1, #0]
 802c376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c37a:	2600      	movs	r6, #0
 802c37c:	e788      	b.n	802c290 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 802c37e:	2400      	movs	r4, #0
 802c380:	4626      	mov	r6, r4
 802c382:	e799      	b.n	802c2b8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802c384:	2400      	movs	r4, #0
 802c386:	e797      	b.n	802c2b8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802c388:	463c      	mov	r4, r7
 802c38a:	e795      	b.n	802c2b8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802c38c:	2500      	movs	r5, #0
 802c38e:	e7ac      	b.n	802c2ea <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 802c390:	2300      	movs	r3, #0
 802c392:	461d      	mov	r5, r3
 802c394:	e7bd      	b.n	802c312 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802c396:	4663      	mov	r3, ip
 802c398:	4665      	mov	r5, ip
 802c39a:	e7ba      	b.n	802c312 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802c39c:	2300      	movs	r3, #0
 802c39e:	e7b8      	b.n	802c312 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802c3a0:	463b      	mov	r3, r7
 802c3a2:	e7b6      	b.n	802c312 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802c3a4:	880d      	ldrh	r5, [r1, #0]
 802c3a6:	b29f      	uxth	r7, r3
 802c3a8:	122c      	asrs	r4, r5, #8
 802c3aa:	f3c2 4007 	ubfx	r0, r2, #16, #8
 802c3ae:	43db      	mvns	r3, r3
 802c3b0:	b2db      	uxtb	r3, r3
 802c3b2:	fb10 f007 	smulbb	r0, r0, r7
 802c3b6:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802c3ba:	fb04 0403 	mla	r4, r4, r3, r0
 802c3be:	b2f6      	uxtb	r6, r6
 802c3c0:	10e8      	asrs	r0, r5, #3
 802c3c2:	b2d2      	uxtb	r2, r2
 802c3c4:	00ed      	lsls	r5, r5, #3
 802c3c6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802c3ca:	fb12 f207 	smulbb	r2, r2, r7
 802c3ce:	fb16 f607 	smulbb	r6, r6, r7
 802c3d2:	b2ed      	uxtb	r5, r5
 802c3d4:	b2a4      	uxth	r4, r4
 802c3d6:	fb00 6603 	mla	r6, r0, r3, r6
 802c3da:	fb05 2303 	mla	r3, r5, r3, r2
 802c3de:	b29a      	uxth	r2, r3
 802c3e0:	1c63      	adds	r3, r4, #1
 802c3e2:	b2b0      	uxth	r0, r6
 802c3e4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802c3e8:	1c53      	adds	r3, r2, #1
 802c3ea:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802c3ee:	1c42      	adds	r2, r0, #1
 802c3f0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802c3f4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802c3f8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802c3fc:	0940      	lsrs	r0, r0, #5
 802c3fe:	4323      	orrs	r3, r4
 802c400:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802c404:	4303      	orrs	r3, r0
 802c406:	800b      	strh	r3, [r1, #0]
 802c408:	e7b5      	b.n	802c376 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802c40a:	bf00      	nop
 802c40c:	2000f174 	.word	0x2000f174
 802c410:	00fff800 	.word	0x00fff800

0802c414 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802c414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c418:	b097      	sub	sp, #92	; 0x5c
 802c41a:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 802c41e:	9214      	str	r2, [sp, #80]	; 0x50
 802c420:	9309      	str	r3, [sp, #36]	; 0x24
 802c422:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802c424:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 802c428:	910d      	str	r1, [sp, #52]	; 0x34
 802c42a:	930f      	str	r3, [sp, #60]	; 0x3c
 802c42c:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802c430:	9015      	str	r0, [sp, #84]	; 0x54
 802c432:	6850      	ldr	r0, [r2, #4]
 802c434:	6812      	ldr	r2, [r2, #0]
 802c436:	fb00 1303 	mla	r3, r0, r3, r1
 802c43a:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802c43e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802c440:	689b      	ldr	r3, [r3, #8]
 802c442:	3301      	adds	r3, #1
 802c444:	f023 0301 	bic.w	r3, r3, #1
 802c448:	930a      	str	r3, [sp, #40]	; 0x28
 802c44a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802c44c:	681f      	ldr	r7, [r3, #0]
 802c44e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802c450:	2b00      	cmp	r3, #0
 802c452:	dc03      	bgt.n	802c45c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802c454:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802c456:	2b00      	cmp	r3, #0
 802c458:	f340 8287 	ble.w	802c96a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 802c45c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802c45e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802c462:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802c466:	1e48      	subs	r0, r1, #1
 802c468:	f102 3cff 	add.w	ip, r2, #4294967295
 802c46c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c46e:	2b00      	cmp	r3, #0
 802c470:	f340 80c4 	ble.w	802c5fc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802c474:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802c478:	ea4f 4326 	mov.w	r3, r6, asr #16
 802c47c:	d406      	bmi.n	802c48c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802c47e:	4586      	cmp	lr, r0
 802c480:	da04      	bge.n	802c48c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802c482:	2b00      	cmp	r3, #0
 802c484:	db02      	blt.n	802c48c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802c486:	4563      	cmp	r3, ip
 802c488:	f2c0 80b9 	blt.w	802c5fe <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 802c48c:	f11e 0e01 	adds.w	lr, lr, #1
 802c490:	f100 80aa 	bmi.w	802c5e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802c494:	4571      	cmp	r1, lr
 802c496:	f2c0 80a7 	blt.w	802c5e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802c49a:	3301      	adds	r3, #1
 802c49c:	f100 80a4 	bmi.w	802c5e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802c4a0:	429a      	cmp	r2, r3
 802c4a2:	f2c0 80a1 	blt.w	802c5e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 802c4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c4a8:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 802c4ac:	930e      	str	r3, [sp, #56]	; 0x38
 802c4ae:	46c8      	mov	r8, r9
 802c4b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802c4b2:	2b00      	cmp	r3, #0
 802c4b4:	f340 80c3 	ble.w	802c63e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802c4b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802c4ba:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802c4be:	1423      	asrs	r3, r4, #16
 802c4c0:	ea4f 4026 	mov.w	r0, r6, asr #16
 802c4c4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802c4c8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802c4cc:	f100 814d 	bmi.w	802c76a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802c4d0:	f10c 3bff 	add.w	fp, ip, #4294967295
 802c4d4:	455b      	cmp	r3, fp
 802c4d6:	f280 8148 	bge.w	802c76a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802c4da:	2800      	cmp	r0, #0
 802c4dc:	f2c0 8145 	blt.w	802c76a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802c4e0:	f10e 3bff 	add.w	fp, lr, #4294967295
 802c4e4:	4558      	cmp	r0, fp
 802c4e6:	f280 8140 	bge.w	802c76a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802c4ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802c4ec:	fb00 3305 	mla	r3, r0, r5, r3
 802c4f0:	0858      	lsrs	r0, r3, #1
 802c4f2:	07dd      	lsls	r5, r3, #31
 802c4f4:	f817 c000 	ldrb.w	ip, [r7, r0]
 802c4f8:	bf54      	ite	pl
 802c4fa:	f00c 0c0f 	andpl.w	ip, ip, #15
 802c4fe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802c502:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802c506:	fa5f fc8c 	uxtb.w	ip, ip
 802c50a:	2a00      	cmp	r2, #0
 802c50c:	f000 80db 	beq.w	802c6c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 802c510:	1c58      	adds	r0, r3, #1
 802c512:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802c516:	07c0      	lsls	r0, r0, #31
 802c518:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802c51c:	bf54      	ite	pl
 802c51e:	f00e 0e0f 	andpl.w	lr, lr, #15
 802c522:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802c526:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802c52a:	fa5f f08e 	uxtb.w	r0, lr
 802c52e:	9010      	str	r0, [sp, #64]	; 0x40
 802c530:	b1c9      	cbz	r1, 802c566 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802c532:	4453      	add	r3, sl
 802c534:	0858      	lsrs	r0, r3, #1
 802c536:	07dd      	lsls	r5, r3, #31
 802c538:	5c38      	ldrb	r0, [r7, r0]
 802c53a:	bf54      	ite	pl
 802c53c:	f000 000f 	andpl.w	r0, r0, #15
 802c540:	1100      	asrmi	r0, r0, #4
 802c542:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802c546:	3301      	adds	r3, #1
 802c548:	b2c0      	uxtb	r0, r0
 802c54a:	900b      	str	r0, [sp, #44]	; 0x2c
 802c54c:	0858      	lsrs	r0, r3, #1
 802c54e:	07dd      	lsls	r5, r3, #31
 802c550:	f817 e000 	ldrb.w	lr, [r7, r0]
 802c554:	bf54      	ite	pl
 802c556:	f00e 030f 	andpl.w	r3, lr, #15
 802c55a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802c55e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802c562:	b2db      	uxtb	r3, r3
 802c564:	9311      	str	r3, [sp, #68]	; 0x44
 802c566:	b292      	uxth	r2, r2
 802c568:	b289      	uxth	r1, r1
 802c56a:	fb02 f301 	mul.w	r3, r2, r1
 802c56e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802c572:	0112      	lsls	r2, r2, #4
 802c574:	b289      	uxth	r1, r1
 802c576:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802c57a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802c57c:	1ad2      	subs	r2, r2, r3
 802c57e:	1a40      	subs	r0, r0, r1
 802c580:	b292      	uxth	r2, r2
 802c582:	436a      	muls	r2, r5
 802c584:	b280      	uxth	r0, r0
 802c586:	fb0c 2c00 	mla	ip, ip, r0, r2
 802c58a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802c58c:	fb01 c102 	mla	r1, r1, r2, ip
 802c590:	9a11      	ldr	r2, [sp, #68]	; 0x44
 802c592:	fb03 1302 	mla	r3, r3, r2, r1
 802c596:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802c59a:	b1db      	cbz	r3, 802c5d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802c59c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802c59e:	4353      	muls	r3, r2
 802c5a0:	1c5a      	adds	r2, r3, #1
 802c5a2:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802c5a6:	4ac6      	ldr	r2, [pc, #792]	; (802c8c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802c5a8:	121b      	asrs	r3, r3, #8
 802c5aa:	6812      	ldr	r2, [r2, #0]
 802c5ac:	2bff      	cmp	r3, #255	; 0xff
 802c5ae:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802c5b2:	f040 8099 	bne.w	802c6e8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 802c5b6:	0953      	lsrs	r3, r2, #5
 802c5b8:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802c5bc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802c5c0:	f02c 0c07 	bic.w	ip, ip, #7
 802c5c4:	ea43 0c0c 	orr.w	ip, r3, ip
 802c5c8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802c5cc:	ea4c 0202 	orr.w	r2, ip, r2
 802c5d0:	f8a8 2000 	strh.w	r2, [r8]
 802c5d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802c5d6:	441c      	add	r4, r3
 802c5d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802c5da:	441e      	add	r6, r3
 802c5dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802c5de:	3b01      	subs	r3, #1
 802c5e0:	f108 0802 	add.w	r8, r8, #2
 802c5e4:	930e      	str	r3, [sp, #56]	; 0x38
 802c5e6:	e763      	b.n	802c4b0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802c5e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802c5ea:	441c      	add	r4, r3
 802c5ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802c5ee:	441e      	add	r6, r3
 802c5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c5f2:	3b01      	subs	r3, #1
 802c5f4:	9309      	str	r3, [sp, #36]	; 0x24
 802c5f6:	f109 0902 	add.w	r9, r9, #2
 802c5fa:	e737      	b.n	802c46c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802c5fc:	d024      	beq.n	802c648 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802c5fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c600:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802c602:	3b01      	subs	r3, #1
 802c604:	fb00 4003 	mla	r0, r0, r3, r4
 802c608:	1400      	asrs	r0, r0, #16
 802c60a:	f53f af4c 	bmi.w	802c4a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802c60e:	3901      	subs	r1, #1
 802c610:	4288      	cmp	r0, r1
 802c612:	f6bf af48 	bge.w	802c4a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802c616:	9924      	ldr	r1, [sp, #144]	; 0x90
 802c618:	fb01 6303 	mla	r3, r1, r3, r6
 802c61c:	141b      	asrs	r3, r3, #16
 802c61e:	f53f af42 	bmi.w	802c4a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802c622:	3a01      	subs	r2, #1
 802c624:	4293      	cmp	r3, r2
 802c626:	f6bf af3e 	bge.w	802c4a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802c62a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 802c62e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802c632:	930e      	str	r3, [sp, #56]	; 0x38
 802c634:	46c8      	mov	r8, r9
 802c636:	f1bb 0f00 	cmp.w	fp, #0
 802c63a:	f300 80b7 	bgt.w	802c7ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 802c63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c640:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802c644:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802c648:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802c64a:	2b00      	cmp	r3, #0
 802c64c:	f340 818d 	ble.w	802c96a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 802c650:	ee30 0a04 	vadd.f32	s0, s0, s8
 802c654:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802c658:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802c65c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802c65e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802c662:	ee31 1a05 	vadd.f32	s2, s2, s10
 802c666:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802c66a:	eef0 6a62 	vmov.f32	s13, s5
 802c66e:	ee61 7a27 	vmul.f32	s15, s2, s15
 802c672:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802c676:	ee77 2a62 	vsub.f32	s5, s14, s5
 802c67a:	ee16 4a90 	vmov	r4, s13
 802c67e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802c682:	eef0 6a43 	vmov.f32	s13, s6
 802c686:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802c68a:	ee12 2a90 	vmov	r2, s5
 802c68e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802c692:	fb92 f3f3 	sdiv	r3, r2, r3
 802c696:	ee13 2a10 	vmov	r2, s6
 802c69a:	9323      	str	r3, [sp, #140]	; 0x8c
 802c69c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802c69e:	fb92 f3f3 	sdiv	r3, r2, r3
 802c6a2:	9324      	str	r3, [sp, #144]	; 0x90
 802c6a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802c6a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802c6a8:	3b01      	subs	r3, #1
 802c6aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802c6ae:	930d      	str	r3, [sp, #52]	; 0x34
 802c6b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802c6b2:	bf08      	it	eq
 802c6b4:	4613      	moveq	r3, r2
 802c6b6:	ee16 6a90 	vmov	r6, s13
 802c6ba:	9309      	str	r3, [sp, #36]	; 0x24
 802c6bc:	eeb0 3a67 	vmov.f32	s6, s15
 802c6c0:	eef0 2a47 	vmov.f32	s5, s14
 802c6c4:	e6c3      	b.n	802c44e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802c6c6:	2900      	cmp	r1, #0
 802c6c8:	f43f af4d 	beq.w	802c566 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802c6cc:	eb0a 0003 	add.w	r0, sl, r3
 802c6d0:	0843      	lsrs	r3, r0, #1
 802c6d2:	07c0      	lsls	r0, r0, #31
 802c6d4:	5cfb      	ldrb	r3, [r7, r3]
 802c6d6:	bf54      	ite	pl
 802c6d8:	f003 030f 	andpl.w	r3, r3, #15
 802c6dc:	111b      	asrmi	r3, r3, #4
 802c6de:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802c6e2:	b2db      	uxtb	r3, r3
 802c6e4:	930b      	str	r3, [sp, #44]	; 0x2c
 802c6e6:	e73e      	b.n	802c566 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802c6e8:	f8b8 e000 	ldrh.w	lr, [r8]
 802c6ec:	fa1f fb83 	uxth.w	fp, r3
 802c6f0:	ea4f 202e 	mov.w	r0, lr, asr #8
 802c6f4:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802c6f8:	43db      	mvns	r3, r3
 802c6fa:	b2db      	uxtb	r3, r3
 802c6fc:	fb11 f10b 	smulbb	r1, r1, fp
 802c700:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802c704:	fb00 1003 	mla	r0, r0, r3, r1
 802c708:	fa5f fc8c 	uxtb.w	ip, ip
 802c70c:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802c710:	b2d2      	uxtb	r2, r2
 802c712:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802c716:	b280      	uxth	r0, r0
 802c718:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802c71c:	fb1c fc0b 	smulbb	ip, ip, fp
 802c720:	fa5f fe8e 	uxtb.w	lr, lr
 802c724:	fb12 fb0b 	smulbb	fp, r2, fp
 802c728:	fb01 cc03 	mla	ip, r1, r3, ip
 802c72c:	fb0e bb03 	mla	fp, lr, r3, fp
 802c730:	1c43      	adds	r3, r0, #1
 802c732:	fa1f fc8c 	uxth.w	ip, ip
 802c736:	fa1f fb8b 	uxth.w	fp, fp
 802c73a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802c73e:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 802c742:	f10c 0101 	add.w	r1, ip, #1
 802c746:	f10b 0001 	add.w	r0, fp, #1
 802c74a:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802c74e:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802c752:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802c756:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802c75a:	4318      	orrs	r0, r3
 802c75c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802c760:	ea40 000c 	orr.w	r0, r0, ip
 802c764:	f8a8 0000 	strh.w	r0, [r8]
 802c768:	e734      	b.n	802c5d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802c76a:	f113 0b01 	adds.w	fp, r3, #1
 802c76e:	f53f af31 	bmi.w	802c5d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802c772:	45dc      	cmp	ip, fp
 802c774:	f6ff af2e 	blt.w	802c5d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802c778:	f110 0b01 	adds.w	fp, r0, #1
 802c77c:	f53f af2a 	bmi.w	802c5d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802c780:	45de      	cmp	lr, fp
 802c782:	f6ff af27 	blt.w	802c5d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802c786:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802c788:	9302      	str	r3, [sp, #8]
 802c78a:	fa0f f38e 	sxth.w	r3, lr
 802c78e:	9301      	str	r3, [sp, #4]
 802c790:	fa0f f38c 	sxth.w	r3, ip
 802c794:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802c798:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802c79c:	9300      	str	r3, [sp, #0]
 802c79e:	463a      	mov	r2, r7
 802c7a0:	4653      	mov	r3, sl
 802c7a2:	4641      	mov	r1, r8
 802c7a4:	9815      	ldr	r0, [sp, #84]	; 0x54
 802c7a6:	f7ff fd4d 	bl	802c244 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802c7aa:	e713      	b.n	802c5d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802c7ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802c7ae:	1422      	asrs	r2, r4, #16
 802c7b0:	1433      	asrs	r3, r6, #16
 802c7b2:	fb05 2303 	mla	r3, r5, r3, r2
 802c7b6:	085a      	lsrs	r2, r3, #1
 802c7b8:	07dd      	lsls	r5, r3, #31
 802c7ba:	5cba      	ldrb	r2, [r7, r2]
 802c7bc:	bf54      	ite	pl
 802c7be:	f002 020f 	andpl.w	r2, r2, #15
 802c7c2:	1112      	asrmi	r2, r2, #4
 802c7c4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802c7c8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802c7cc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802c7d0:	b2d2      	uxtb	r2, r2
 802c7d2:	2900      	cmp	r1, #0
 802c7d4:	d076      	beq.n	802c8c4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802c7d6:	f103 0e01 	add.w	lr, r3, #1
 802c7da:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802c7de:	f01e 0f01 	tst.w	lr, #1
 802c7e2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802c7e6:	bf0c      	ite	eq
 802c7e8:	f00c 0c0f 	andeq.w	ip, ip, #15
 802c7ec:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802c7f0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802c7f4:	fa5f f58c 	uxtb.w	r5, ip
 802c7f8:	9512      	str	r5, [sp, #72]	; 0x48
 802c7fa:	b300      	cbz	r0, 802c83e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802c7fc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802c7fe:	442b      	add	r3, r5
 802c800:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802c804:	07dd      	lsls	r5, r3, #31
 802c806:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802c80a:	bf54      	ite	pl
 802c80c:	f00c 0c0f 	andpl.w	ip, ip, #15
 802c810:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802c814:	3301      	adds	r3, #1
 802c816:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802c81a:	fa5f f58c 	uxtb.w	r5, ip
 802c81e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802c822:	950c      	str	r5, [sp, #48]	; 0x30
 802c824:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802c828:	07dd      	lsls	r5, r3, #31
 802c82a:	bf54      	ite	pl
 802c82c:	f00c 0c0f 	andpl.w	ip, ip, #15
 802c830:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802c834:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802c838:	fa5f f38c 	uxtb.w	r3, ip
 802c83c:	9313      	str	r3, [sp, #76]	; 0x4c
 802c83e:	b289      	uxth	r1, r1
 802c840:	b280      	uxth	r0, r0
 802c842:	fb01 f300 	mul.w	r3, r1, r0
 802c846:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802c84a:	0109      	lsls	r1, r1, #4
 802c84c:	b280      	uxth	r0, r0
 802c84e:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802c852:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802c854:	1ac9      	subs	r1, r1, r3
 802c856:	ebac 0c00 	sub.w	ip, ip, r0
 802c85a:	b289      	uxth	r1, r1
 802c85c:	4369      	muls	r1, r5
 802c85e:	fa1f fc8c 	uxth.w	ip, ip
 802c862:	fb02 120c 	mla	r2, r2, ip, r1
 802c866:	990c      	ldr	r1, [sp, #48]	; 0x30
 802c868:	fb00 2001 	mla	r0, r0, r1, r2
 802c86c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802c86e:	fb03 0302 	mla	r3, r3, r2, r0
 802c872:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802c876:	b1d3      	cbz	r3, 802c8ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 802c878:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802c87a:	4353      	muls	r3, r2
 802c87c:	1c5a      	adds	r2, r3, #1
 802c87e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802c882:	4a0f      	ldr	r2, [pc, #60]	; (802c8c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802c884:	121b      	asrs	r3, r3, #8
 802c886:	6812      	ldr	r2, [r2, #0]
 802c888:	2bff      	cmp	r3, #255	; 0xff
 802c88a:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802c88e:	d12d      	bne.n	802c8ec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802c890:	0953      	lsrs	r3, r2, #5
 802c892:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802c896:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802c89a:	f02c 0c07 	bic.w	ip, ip, #7
 802c89e:	ea43 0c0c 	orr.w	ip, r3, ip
 802c8a2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802c8a6:	ea4c 0202 	orr.w	r2, ip, r2
 802c8aa:	f8a8 2000 	strh.w	r2, [r8]
 802c8ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802c8b0:	441c      	add	r4, r3
 802c8b2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802c8b4:	f108 0802 	add.w	r8, r8, #2
 802c8b8:	441e      	add	r6, r3
 802c8ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 802c8be:	e6ba      	b.n	802c636 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802c8c0:	2000f174 	.word	0x2000f174
 802c8c4:	2800      	cmp	r0, #0
 802c8c6:	d0ba      	beq.n	802c83e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802c8c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802c8ca:	442b      	add	r3, r5
 802c8cc:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802c8d0:	07db      	lsls	r3, r3, #31
 802c8d2:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802c8d6:	bf54      	ite	pl
 802c8d8:	f00c 0c0f 	andpl.w	ip, ip, #15
 802c8dc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802c8e0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802c8e4:	fa5f f38c 	uxtb.w	r3, ip
 802c8e8:	930c      	str	r3, [sp, #48]	; 0x30
 802c8ea:	e7a8      	b.n	802c83e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 802c8ec:	f8b8 e000 	ldrh.w	lr, [r8]
 802c8f0:	fa1f fa83 	uxth.w	sl, r3
 802c8f4:	ea4f 202e 	mov.w	r0, lr, asr #8
 802c8f8:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802c8fc:	43db      	mvns	r3, r3
 802c8fe:	b2db      	uxtb	r3, r3
 802c900:	fb11 f10a 	smulbb	r1, r1, sl
 802c904:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802c908:	fb00 1003 	mla	r0, r0, r3, r1
 802c90c:	b2d2      	uxtb	r2, r2
 802c90e:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802c912:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802c916:	fa5f fe8e 	uxtb.w	lr, lr
 802c91a:	fb12 f20a 	smulbb	r2, r2, sl
 802c91e:	fb0e 2203 	mla	r2, lr, r3, r2
 802c922:	fa5f fc8c 	uxtb.w	ip, ip
 802c926:	b280      	uxth	r0, r0
 802c928:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802c92c:	b292      	uxth	r2, r2
 802c92e:	fb1c fc0a 	smulbb	ip, ip, sl
 802c932:	fb01 cc03 	mla	ip, r1, r3, ip
 802c936:	1c43      	adds	r3, r0, #1
 802c938:	1c51      	adds	r1, r2, #1
 802c93a:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802c93e:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802c942:	fa1f fc8c 	uxth.w	ip, ip
 802c946:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802c94a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 802c94e:	4308      	orrs	r0, r1
 802c950:	f10c 0101 	add.w	r1, ip, #1
 802c954:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802c958:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802c95c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802c960:	ea40 000c 	orr.w	r0, r0, ip
 802c964:	f8a8 0000 	strh.w	r0, [r8]
 802c968:	e7a1      	b.n	802c8ae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 802c96a:	b017      	add	sp, #92	; 0x5c
 802c96c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802c970 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802c970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c974:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 802c978:	2d00      	cmp	r5, #0
 802c97a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802c97e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802c982:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802c986:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 802c98a:	fb05 0e03 	mla	lr, r5, r3, r0
 802c98e:	f2c0 80b0 	blt.w	802caf2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802c992:	45a9      	cmp	r9, r5
 802c994:	f340 80ad 	ble.w	802caf2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802c998:	2800      	cmp	r0, #0
 802c99a:	f2c0 80a8 	blt.w	802caee <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802c99e:	4580      	cmp	r8, r0
 802c9a0:	f340 80a5 	ble.w	802caee <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802c9a4:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802c9a8:	f01e 0f01 	tst.w	lr, #1
 802c9ac:	5d16      	ldrb	r6, [r2, r4]
 802c9ae:	bf0c      	ite	eq
 802c9b0:	f006 060f 	andeq.w	r6, r6, #15
 802c9b4:	1136      	asrne	r6, r6, #4
 802c9b6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802c9ba:	b2f6      	uxtb	r6, r6
 802c9bc:	1c44      	adds	r4, r0, #1
 802c9be:	f100 809b 	bmi.w	802caf8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802c9c2:	45a0      	cmp	r8, r4
 802c9c4:	f340 8098 	ble.w	802caf8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802c9c8:	2f00      	cmp	r7, #0
 802c9ca:	f000 8097 	beq.w	802cafc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802c9ce:	f10e 0a01 	add.w	sl, lr, #1
 802c9d2:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802c9d6:	f01a 0f01 	tst.w	sl, #1
 802c9da:	5d14      	ldrb	r4, [r2, r4]
 802c9dc:	bf0c      	ite	eq
 802c9de:	f004 040f 	andeq.w	r4, r4, #15
 802c9e2:	1124      	asrne	r4, r4, #4
 802c9e4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802c9e8:	b2e4      	uxtb	r4, r4
 802c9ea:	3501      	adds	r5, #1
 802c9ec:	f100 808a 	bmi.w	802cb04 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802c9f0:	45a9      	cmp	r9, r5
 802c9f2:	f340 8087 	ble.w	802cb04 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802c9f6:	f1bc 0f00 	cmp.w	ip, #0
 802c9fa:	f000 8086 	beq.w	802cb0a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802c9fe:	2800      	cmp	r0, #0
 802ca00:	db7e      	blt.n	802cb00 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802ca02:	4580      	cmp	r8, r0
 802ca04:	dd7c      	ble.n	802cb00 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802ca06:	eb03 090e 	add.w	r9, r3, lr
 802ca0a:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802ca0e:	f019 0f01 	tst.w	r9, #1
 802ca12:	5d55      	ldrb	r5, [r2, r5]
 802ca14:	bf0c      	ite	eq
 802ca16:	f005 050f 	andeq.w	r5, r5, #15
 802ca1a:	112d      	asrne	r5, r5, #4
 802ca1c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802ca20:	b2ed      	uxtb	r5, r5
 802ca22:	3001      	adds	r0, #1
 802ca24:	d474      	bmi.n	802cb10 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802ca26:	4580      	cmp	r8, r0
 802ca28:	dd72      	ble.n	802cb10 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802ca2a:	2f00      	cmp	r7, #0
 802ca2c:	d072      	beq.n	802cb14 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802ca2e:	3301      	adds	r3, #1
 802ca30:	449e      	add	lr, r3
 802ca32:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802ca36:	f01e 0f01 	tst.w	lr, #1
 802ca3a:	5cd0      	ldrb	r0, [r2, r3]
 802ca3c:	bf0c      	ite	eq
 802ca3e:	f000 000f 	andeq.w	r0, r0, #15
 802ca42:	1100      	asrne	r0, r0, #4
 802ca44:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802ca48:	b2c3      	uxtb	r3, r0
 802ca4a:	b2ba      	uxth	r2, r7
 802ca4c:	fa1f fc8c 	uxth.w	ip, ip
 802ca50:	fb02 f00c 	mul.w	r0, r2, ip
 802ca54:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802ca58:	0112      	lsls	r2, r2, #4
 802ca5a:	fa1f fc8c 	uxth.w	ip, ip
 802ca5e:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802ca62:	1a12      	subs	r2, r2, r0
 802ca64:	eba7 070c 	sub.w	r7, r7, ip
 802ca68:	b292      	uxth	r2, r2
 802ca6a:	b2bf      	uxth	r7, r7
 802ca6c:	4362      	muls	r2, r4
 802ca6e:	fb06 2207 	mla	r2, r6, r7, r2
 802ca72:	fb0c 2505 	mla	r5, ip, r5, r2
 802ca76:	fb00 5303 	mla	r3, r0, r3, r5
 802ca7a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802ca7e:	b3a3      	cbz	r3, 802caea <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 802ca80:	4a25      	ldr	r2, [pc, #148]	; (802cb18 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 802ca82:	880e      	ldrh	r6, [r1, #0]
 802ca84:	6815      	ldr	r5, [r2, #0]
 802ca86:	1234      	asrs	r4, r6, #8
 802ca88:	b29a      	uxth	r2, r3
 802ca8a:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802ca8e:	43db      	mvns	r3, r3
 802ca90:	b2db      	uxtb	r3, r3
 802ca92:	fb10 f002 	smulbb	r0, r0, r2
 802ca96:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802ca9a:	fb04 0403 	mla	r4, r4, r3, r0
 802ca9e:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802caa2:	10f0      	asrs	r0, r6, #3
 802caa4:	b2ed      	uxtb	r5, r5
 802caa6:	00f6      	lsls	r6, r6, #3
 802caa8:	fb17 f702 	smulbb	r7, r7, r2
 802caac:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802cab0:	fb15 f202 	smulbb	r2, r5, r2
 802cab4:	b2f6      	uxtb	r6, r6
 802cab6:	b2a4      	uxth	r4, r4
 802cab8:	fb00 7003 	mla	r0, r0, r3, r7
 802cabc:	fb06 2303 	mla	r3, r6, r3, r2
 802cac0:	b29a      	uxth	r2, r3
 802cac2:	1c63      	adds	r3, r4, #1
 802cac4:	b280      	uxth	r0, r0
 802cac6:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802caca:	1c53      	adds	r3, r2, #1
 802cacc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802cad0:	1c42      	adds	r2, r0, #1
 802cad2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802cad6:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 802cada:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802cade:	0940      	lsrs	r0, r0, #5
 802cae0:	4323      	orrs	r3, r4
 802cae2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802cae6:	4303      	orrs	r3, r0
 802cae8:	800b      	strh	r3, [r1, #0]
 802caea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802caee:	2600      	movs	r6, #0
 802caf0:	e764      	b.n	802c9bc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802caf2:	2400      	movs	r4, #0
 802caf4:	4626      	mov	r6, r4
 802caf6:	e778      	b.n	802c9ea <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802caf8:	2400      	movs	r4, #0
 802cafa:	e776      	b.n	802c9ea <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802cafc:	463c      	mov	r4, r7
 802cafe:	e774      	b.n	802c9ea <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802cb00:	2500      	movs	r5, #0
 802cb02:	e78e      	b.n	802ca22 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 802cb04:	2300      	movs	r3, #0
 802cb06:	461d      	mov	r5, r3
 802cb08:	e79f      	b.n	802ca4a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802cb0a:	4663      	mov	r3, ip
 802cb0c:	4665      	mov	r5, ip
 802cb0e:	e79c      	b.n	802ca4a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802cb10:	2300      	movs	r3, #0
 802cb12:	e79a      	b.n	802ca4a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802cb14:	463b      	mov	r3, r7
 802cb16:	e798      	b.n	802ca4a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802cb18:	2000f174 	.word	0x2000f174

0802cb1c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802cb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cb20:	b093      	sub	sp, #76	; 0x4c
 802cb22:	461d      	mov	r5, r3
 802cb24:	920c      	str	r2, [sp, #48]	; 0x30
 802cb26:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802cb28:	9107      	str	r1, [sp, #28]
 802cb2a:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802cb2e:	9011      	str	r0, [sp, #68]	; 0x44
 802cb30:	6850      	ldr	r0, [r2, #4]
 802cb32:	6812      	ldr	r2, [r2, #0]
 802cb34:	fb00 1303 	mla	r3, r0, r3, r1
 802cb38:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802cb3c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802cb3e:	689b      	ldr	r3, [r3, #8]
 802cb40:	3301      	adds	r3, #1
 802cb42:	f023 0301 	bic.w	r3, r3, #1
 802cb46:	9306      	str	r3, [sp, #24]
 802cb48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802cb4a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 802cb4e:	681f      	ldr	r7, [r3, #0]
 802cb50:	9b07      	ldr	r3, [sp, #28]
 802cb52:	2b00      	cmp	r3, #0
 802cb54:	dc03      	bgt.n	802cb5e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802cb56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802cb58:	2b00      	cmp	r3, #0
 802cb5a:	f340 8267 	ble.w	802d02c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802cb5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802cb60:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802cb64:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802cb68:	1e48      	subs	r0, r1, #1
 802cb6a:	f102 3cff 	add.w	ip, r2, #4294967295
 802cb6e:	2d00      	cmp	r5, #0
 802cb70:	f340 80b8 	ble.w	802cce4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802cb74:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802cb78:	ea4f 4326 	mov.w	r3, r6, asr #16
 802cb7c:	d406      	bmi.n	802cb8c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802cb7e:	4586      	cmp	lr, r0
 802cb80:	da04      	bge.n	802cb8c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802cb82:	2b00      	cmp	r3, #0
 802cb84:	db02      	blt.n	802cb8c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802cb86:	4563      	cmp	r3, ip
 802cb88:	f2c0 80ad 	blt.w	802cce6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 802cb8c:	f11e 0e01 	adds.w	lr, lr, #1
 802cb90:	f100 80a0 	bmi.w	802ccd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802cb94:	4571      	cmp	r1, lr
 802cb96:	f2c0 809d 	blt.w	802ccd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802cb9a:	3301      	adds	r3, #1
 802cb9c:	f100 809a 	bmi.w	802ccd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802cba0:	429a      	cmp	r2, r3
 802cba2:	f2c0 8097 	blt.w	802ccd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802cba6:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802cbaa:	9509      	str	r5, [sp, #36]	; 0x24
 802cbac:	46c8      	mov	r8, r9
 802cbae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cbb0:	2b00      	cmp	r3, #0
 802cbb2:	f340 80b6 	ble.w	802cd22 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802cbb6:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802cbba:	9308      	str	r3, [sp, #32]
 802cbbc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802cbbe:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802cbc2:	1423      	asrs	r3, r4, #16
 802cbc4:	ea4f 4026 	mov.w	r0, r6, asr #16
 802cbc8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802cbcc:	f100 813e 	bmi.w	802ce4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802cbd0:	f10c 3bff 	add.w	fp, ip, #4294967295
 802cbd4:	455b      	cmp	r3, fp
 802cbd6:	f280 8139 	bge.w	802ce4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802cbda:	2800      	cmp	r0, #0
 802cbdc:	f2c0 8136 	blt.w	802ce4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802cbe0:	f10e 3bff 	add.w	fp, lr, #4294967295
 802cbe4:	4558      	cmp	r0, fp
 802cbe6:	f280 8131 	bge.w	802ce4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 802cbea:	9a06      	ldr	r2, [sp, #24]
 802cbec:	fb00 3302 	mla	r3, r0, r2, r3
 802cbf0:	0858      	lsrs	r0, r3, #1
 802cbf2:	07da      	lsls	r2, r3, #31
 802cbf4:	f817 c000 	ldrb.w	ip, [r7, r0]
 802cbf8:	9a08      	ldr	r2, [sp, #32]
 802cbfa:	bf54      	ite	pl
 802cbfc:	f00c 0c0f 	andpl.w	ip, ip, #15
 802cc00:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802cc04:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802cc08:	fa5f fc8c 	uxtb.w	ip, ip
 802cc0c:	2a00      	cmp	r2, #0
 802cc0e:	f000 80cb 	beq.w	802cda8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802cc12:	1c58      	adds	r0, r3, #1
 802cc14:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802cc18:	07c0      	lsls	r0, r0, #31
 802cc1a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802cc1e:	bf54      	ite	pl
 802cc20:	f00e 0e0f 	andpl.w	lr, lr, #15
 802cc24:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802cc28:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802cc2c:	fa5f fe8e 	uxtb.w	lr, lr
 802cc30:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 802cc34:	b1b9      	cbz	r1, 802cc66 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802cc36:	4453      	add	r3, sl
 802cc38:	0858      	lsrs	r0, r3, #1
 802cc3a:	07da      	lsls	r2, r3, #31
 802cc3c:	5c38      	ldrb	r0, [r7, r0]
 802cc3e:	bf54      	ite	pl
 802cc40:	f000 000f 	andpl.w	r0, r0, #15
 802cc44:	1100      	asrmi	r0, r0, #4
 802cc46:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802cc4a:	b2c0      	uxtb	r0, r0
 802cc4c:	900a      	str	r0, [sp, #40]	; 0x28
 802cc4e:	1c58      	adds	r0, r3, #1
 802cc50:	0843      	lsrs	r3, r0, #1
 802cc52:	07c2      	lsls	r2, r0, #31
 802cc54:	5cfb      	ldrb	r3, [r7, r3]
 802cc56:	bf54      	ite	pl
 802cc58:	f003 030f 	andpl.w	r3, r3, #15
 802cc5c:	111b      	asrmi	r3, r3, #4
 802cc5e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802cc62:	b2db      	uxtb	r3, r3
 802cc64:	930e      	str	r3, [sp, #56]	; 0x38
 802cc66:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802cc6a:	b289      	uxth	r1, r1
 802cc6c:	fb02 f301 	mul.w	r3, r2, r1
 802cc70:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802cc74:	0112      	lsls	r2, r2, #4
 802cc76:	b289      	uxth	r1, r1
 802cc78:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 802cc7c:	1a40      	subs	r0, r0, r1
 802cc7e:	fa1f fe80 	uxth.w	lr, r0
 802cc82:	1ad2      	subs	r2, r2, r3
 802cc84:	980d      	ldr	r0, [sp, #52]	; 0x34
 802cc86:	b292      	uxth	r2, r2
 802cc88:	4342      	muls	r2, r0
 802cc8a:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802cc8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802cc90:	fb01 c102 	mla	r1, r1, r2, ip
 802cc94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802cc96:	fb03 1302 	mla	r3, r3, r2, r1
 802cc9a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802cc9e:	2bff      	cmp	r3, #255	; 0xff
 802cca0:	f040 8093 	bne.w	802cdca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 802cca4:	4bbe      	ldr	r3, [pc, #760]	; (802cfa0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802cca6:	681a      	ldr	r2, [r3, #0]
 802cca8:	4bbe      	ldr	r3, [pc, #760]	; (802cfa4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802ccaa:	0951      	lsrs	r1, r2, #5
 802ccac:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802ccb0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802ccb4:	430b      	orrs	r3, r1
 802ccb6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802ccba:	4313      	orrs	r3, r2
 802ccbc:	f8a8 3000 	strh.w	r3, [r8]
 802ccc0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802ccc2:	441c      	add	r4, r3
 802ccc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802ccc6:	441e      	add	r6, r3
 802ccc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802ccca:	3b01      	subs	r3, #1
 802cccc:	f108 0802 	add.w	r8, r8, #2
 802ccd0:	9309      	str	r3, [sp, #36]	; 0x24
 802ccd2:	e76c      	b.n	802cbae <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802ccd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802ccd6:	441c      	add	r4, r3
 802ccd8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802ccda:	3d01      	subs	r5, #1
 802ccdc:	441e      	add	r6, r3
 802ccde:	f109 0902 	add.w	r9, r9, #2
 802cce2:	e744      	b.n	802cb6e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802cce4:	d021      	beq.n	802cd2a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802cce6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802cce8:	1e6b      	subs	r3, r5, #1
 802ccea:	fb00 4003 	mla	r0, r0, r3, r4
 802ccee:	1400      	asrs	r0, r0, #16
 802ccf0:	f53f af59 	bmi.w	802cba6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802ccf4:	3901      	subs	r1, #1
 802ccf6:	4288      	cmp	r0, r1
 802ccf8:	f6bf af55 	bge.w	802cba6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802ccfc:	9920      	ldr	r1, [sp, #128]	; 0x80
 802ccfe:	fb01 6303 	mla	r3, r1, r3, r6
 802cd02:	141b      	asrs	r3, r3, #16
 802cd04:	f53f af4f 	bmi.w	802cba6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802cd08:	3a01      	subs	r2, #1
 802cd0a:	4293      	cmp	r3, r2
 802cd0c:	f6bf af4b 	bge.w	802cba6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802cd10:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802cd14:	9308      	str	r3, [sp, #32]
 802cd16:	46a8      	mov	r8, r5
 802cd18:	46ce      	mov	lr, r9
 802cd1a:	f1b8 0f00 	cmp.w	r8, #0
 802cd1e:	f300 80b5 	bgt.w	802ce8c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802cd22:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802cd26:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802cd2a:	9b07      	ldr	r3, [sp, #28]
 802cd2c:	2b00      	cmp	r3, #0
 802cd2e:	f340 817d 	ble.w	802d02c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 802cd32:	ee30 0a04 	vadd.f32	s0, s0, s8
 802cd36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802cd3a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802cd3e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802cd40:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802cd44:	ee31 1a05 	vadd.f32	s2, s2, s10
 802cd48:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802cd4c:	eef0 6a62 	vmov.f32	s13, s5
 802cd50:	ee61 7a27 	vmul.f32	s15, s2, s15
 802cd54:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802cd58:	ee77 2a62 	vsub.f32	s5, s14, s5
 802cd5c:	ee16 4a90 	vmov	r4, s13
 802cd60:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802cd64:	eef0 6a43 	vmov.f32	s13, s6
 802cd68:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802cd6c:	ee12 2a90 	vmov	r2, s5
 802cd70:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802cd74:	fb92 f3f3 	sdiv	r3, r2, r3
 802cd78:	ee13 2a10 	vmov	r2, s6
 802cd7c:	931f      	str	r3, [sp, #124]	; 0x7c
 802cd7e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802cd80:	fb92 f3f3 	sdiv	r3, r2, r3
 802cd84:	9320      	str	r3, [sp, #128]	; 0x80
 802cd86:	9b07      	ldr	r3, [sp, #28]
 802cd88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802cd8a:	3b01      	subs	r3, #1
 802cd8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802cd90:	9307      	str	r3, [sp, #28]
 802cd92:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802cd94:	ee16 6a90 	vmov	r6, s13
 802cd98:	bf14      	ite	ne
 802cd9a:	461d      	movne	r5, r3
 802cd9c:	4615      	moveq	r5, r2
 802cd9e:	eeb0 3a67 	vmov.f32	s6, s15
 802cda2:	eef0 2a47 	vmov.f32	s5, s14
 802cda6:	e6d3      	b.n	802cb50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802cda8:	2900      	cmp	r1, #0
 802cdaa:	f43f af5c 	beq.w	802cc66 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802cdae:	eb0a 0003 	add.w	r0, sl, r3
 802cdb2:	0843      	lsrs	r3, r0, #1
 802cdb4:	07c0      	lsls	r0, r0, #31
 802cdb6:	5cfb      	ldrb	r3, [r7, r3]
 802cdb8:	bf54      	ite	pl
 802cdba:	f003 030f 	andpl.w	r3, r3, #15
 802cdbe:	111b      	asrmi	r3, r3, #4
 802cdc0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802cdc4:	b2db      	uxtb	r3, r3
 802cdc6:	930a      	str	r3, [sp, #40]	; 0x28
 802cdc8:	e74d      	b.n	802cc66 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 802cdca:	2b00      	cmp	r3, #0
 802cdcc:	f43f af78 	beq.w	802ccc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802cdd0:	4a73      	ldr	r2, [pc, #460]	; (802cfa0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802cdd2:	f8b8 c000 	ldrh.w	ip, [r8]
 802cdd6:	6810      	ldr	r0, [r2, #0]
 802cdd8:	fa1f fe83 	uxth.w	lr, r3
 802cddc:	ea4f 212c 	mov.w	r1, ip, asr #8
 802cde0:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802cde4:	43db      	mvns	r3, r3
 802cde6:	b2db      	uxtb	r3, r3
 802cde8:	fb12 f20e 	smulbb	r2, r2, lr
 802cdec:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802cdf0:	fb01 2103 	mla	r1, r1, r3, r2
 802cdf4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802cdf8:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802cdfc:	b2c0      	uxtb	r0, r0
 802cdfe:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802ce02:	fb1b fb0e 	smulbb	fp, fp, lr
 802ce06:	b289      	uxth	r1, r1
 802ce08:	fb10 fe0e 	smulbb	lr, r0, lr
 802ce0c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802ce10:	fa5f fc8c 	uxtb.w	ip, ip
 802ce14:	fb02 b203 	mla	r2, r2, r3, fp
 802ce18:	1c48      	adds	r0, r1, #1
 802ce1a:	fb0c e303 	mla	r3, ip, r3, lr
 802ce1e:	b292      	uxth	r2, r2
 802ce20:	b29b      	uxth	r3, r3
 802ce22:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802ce26:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 802ce2a:	f102 0b01 	add.w	fp, r2, #1
 802ce2e:	1c59      	adds	r1, r3, #1
 802ce30:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802ce34:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802ce38:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802ce3c:	0952      	lsrs	r2, r2, #5
 802ce3e:	4301      	orrs	r1, r0
 802ce40:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802ce44:	4311      	orrs	r1, r2
 802ce46:	f8a8 1000 	strh.w	r1, [r8]
 802ce4a:	e739      	b.n	802ccc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802ce4c:	f113 0b01 	adds.w	fp, r3, #1
 802ce50:	f53f af36 	bmi.w	802ccc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802ce54:	45dc      	cmp	ip, fp
 802ce56:	f6ff af33 	blt.w	802ccc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802ce5a:	f110 0b01 	adds.w	fp, r0, #1
 802ce5e:	f53f af2f 	bmi.w	802ccc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802ce62:	45de      	cmp	lr, fp
 802ce64:	f6ff af2c 	blt.w	802ccc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802ce68:	9a08      	ldr	r2, [sp, #32]
 802ce6a:	9302      	str	r3, [sp, #8]
 802ce6c:	fa0f f38e 	sxth.w	r3, lr
 802ce70:	9301      	str	r3, [sp, #4]
 802ce72:	fa0f f38c 	sxth.w	r3, ip
 802ce76:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802ce7a:	9105      	str	r1, [sp, #20]
 802ce7c:	9300      	str	r3, [sp, #0]
 802ce7e:	463a      	mov	r2, r7
 802ce80:	4653      	mov	r3, sl
 802ce82:	4641      	mov	r1, r8
 802ce84:	9811      	ldr	r0, [sp, #68]	; 0x44
 802ce86:	f7ff fd73 	bl	802c970 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802ce8a:	e719      	b.n	802ccc0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 802ce8c:	9906      	ldr	r1, [sp, #24]
 802ce8e:	1422      	asrs	r2, r4, #16
 802ce90:	1433      	asrs	r3, r6, #16
 802ce92:	fb01 2303 	mla	r3, r1, r3, r2
 802ce96:	085a      	lsrs	r2, r3, #1
 802ce98:	07d9      	lsls	r1, r3, #31
 802ce9a:	5cba      	ldrb	r2, [r7, r2]
 802ce9c:	bf54      	ite	pl
 802ce9e:	f002 020f 	andpl.w	r2, r2, #15
 802cea2:	1112      	asrmi	r2, r2, #4
 802cea4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802cea8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802ceac:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802ceb0:	b2d2      	uxtb	r2, r2
 802ceb2:	2800      	cmp	r0, #0
 802ceb4:	d062      	beq.n	802cf7c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 802ceb6:	f103 0a01 	add.w	sl, r3, #1
 802ceba:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802cebe:	f01a 0f01 	tst.w	sl, #1
 802cec2:	5c79      	ldrb	r1, [r7, r1]
 802cec4:	bf0c      	ite	eq
 802cec6:	f001 010f 	andeq.w	r1, r1, #15
 802ceca:	1109      	asrne	r1, r1, #4
 802cecc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802ced0:	b2c9      	uxtb	r1, r1
 802ced2:	910f      	str	r1, [sp, #60]	; 0x3c
 802ced4:	f1bc 0f00 	cmp.w	ip, #0
 802ced8:	d019      	beq.n	802cf0e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802ceda:	9908      	ldr	r1, [sp, #32]
 802cedc:	440b      	add	r3, r1
 802cede:	0859      	lsrs	r1, r3, #1
 802cee0:	f013 0f01 	tst.w	r3, #1
 802cee4:	5c79      	ldrb	r1, [r7, r1]
 802cee6:	bf0c      	ite	eq
 802cee8:	f001 010f 	andeq.w	r1, r1, #15
 802ceec:	1109      	asrne	r1, r1, #4
 802ceee:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802cef2:	b2c9      	uxtb	r1, r1
 802cef4:	3301      	adds	r3, #1
 802cef6:	910b      	str	r1, [sp, #44]	; 0x2c
 802cef8:	0859      	lsrs	r1, r3, #1
 802cefa:	07db      	lsls	r3, r3, #31
 802cefc:	5c79      	ldrb	r1, [r7, r1]
 802cefe:	bf54      	ite	pl
 802cf00:	f001 010f 	andpl.w	r1, r1, #15
 802cf04:	1109      	asrmi	r1, r1, #4
 802cf06:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802cf0a:	b2c9      	uxtb	r1, r1
 802cf0c:	9110      	str	r1, [sp, #64]	; 0x40
 802cf0e:	b280      	uxth	r0, r0
 802cf10:	fa1f fc8c 	uxth.w	ip, ip
 802cf14:	fb00 f30c 	mul.w	r3, r0, ip
 802cf18:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802cf1c:	0100      	lsls	r0, r0, #4
 802cf1e:	fa1f fc8c 	uxth.w	ip, ip
 802cf22:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802cf26:	eba1 010c 	sub.w	r1, r1, ip
 802cf2a:	fa1f fa81 	uxth.w	sl, r1
 802cf2e:	1ac0      	subs	r0, r0, r3
 802cf30:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802cf32:	b280      	uxth	r0, r0
 802cf34:	4348      	muls	r0, r1
 802cf36:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802cf38:	fb02 020a 	mla	r2, r2, sl, r0
 802cf3c:	fb0c 2c01 	mla	ip, ip, r1, r2
 802cf40:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802cf42:	fb03 c302 	mla	r3, r3, r2, ip
 802cf46:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802cf4a:	2bff      	cmp	r3, #255	; 0xff
 802cf4c:	d12c      	bne.n	802cfa8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 802cf4e:	4b14      	ldr	r3, [pc, #80]	; (802cfa0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802cf50:	681a      	ldr	r2, [r3, #0]
 802cf52:	4b14      	ldr	r3, [pc, #80]	; (802cfa4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802cf54:	0951      	lsrs	r1, r2, #5
 802cf56:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802cf5a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802cf5e:	430b      	orrs	r3, r1
 802cf60:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802cf64:	4313      	orrs	r3, r2
 802cf66:	f8ae 3000 	strh.w	r3, [lr]
 802cf6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802cf6c:	441c      	add	r4, r3
 802cf6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802cf70:	f10e 0e02 	add.w	lr, lr, #2
 802cf74:	441e      	add	r6, r3
 802cf76:	f108 38ff 	add.w	r8, r8, #4294967295
 802cf7a:	e6ce      	b.n	802cd1a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 802cf7c:	f1bc 0f00 	cmp.w	ip, #0
 802cf80:	d0c5      	beq.n	802cf0e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802cf82:	9908      	ldr	r1, [sp, #32]
 802cf84:	440b      	add	r3, r1
 802cf86:	0859      	lsrs	r1, r3, #1
 802cf88:	07db      	lsls	r3, r3, #31
 802cf8a:	5c79      	ldrb	r1, [r7, r1]
 802cf8c:	bf54      	ite	pl
 802cf8e:	f001 010f 	andpl.w	r1, r1, #15
 802cf92:	1109      	asrmi	r1, r1, #4
 802cf94:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802cf98:	b2c9      	uxtb	r1, r1
 802cf9a:	910b      	str	r1, [sp, #44]	; 0x2c
 802cf9c:	e7b7      	b.n	802cf0e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 802cf9e:	bf00      	nop
 802cfa0:	2000f174 	.word	0x2000f174
 802cfa4:	fffff800 	.word	0xfffff800
 802cfa8:	2b00      	cmp	r3, #0
 802cfaa:	d0de      	beq.n	802cf6a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802cfac:	4a21      	ldr	r2, [pc, #132]	; (802d034 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 802cfae:	f8be c000 	ldrh.w	ip, [lr]
 802cfb2:	6810      	ldr	r0, [r2, #0]
 802cfb4:	fa1f fa83 	uxth.w	sl, r3
 802cfb8:	ea4f 212c 	mov.w	r1, ip, asr #8
 802cfbc:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802cfc0:	43db      	mvns	r3, r3
 802cfc2:	b2db      	uxtb	r3, r3
 802cfc4:	fb12 f20a 	smulbb	r2, r2, sl
 802cfc8:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802cfcc:	fb01 2103 	mla	r1, r1, r3, r2
 802cfd0:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802cfd4:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802cfd8:	b2c0      	uxtb	r0, r0
 802cfda:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802cfde:	fa5f fc8c 	uxtb.w	ip, ip
 802cfe2:	fb10 f00a 	smulbb	r0, r0, sl
 802cfe6:	fb0c 0003 	mla	r0, ip, r3, r0
 802cfea:	b289      	uxth	r1, r1
 802cfec:	fb1b fb0a 	smulbb	fp, fp, sl
 802cff0:	b280      	uxth	r0, r0
 802cff2:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802cff6:	fb02 b203 	mla	r2, r2, r3, fp
 802cffa:	1c4b      	adds	r3, r1, #1
 802cffc:	f100 0b01 	add.w	fp, r0, #1
 802d000:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802d004:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802d008:	b292      	uxth	r2, r2
 802d00a:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802d00e:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802d012:	ea4b 0101 	orr.w	r1, fp, r1
 802d016:	f102 0b01 	add.w	fp, r2, #1
 802d01a:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802d01e:	0952      	lsrs	r2, r2, #5
 802d020:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802d024:	4311      	orrs	r1, r2
 802d026:	f8ae 1000 	strh.w	r1, [lr]
 802d02a:	e79e      	b.n	802cf6a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 802d02c:	b013      	add	sp, #76	; 0x4c
 802d02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d032:	bf00      	nop
 802d034:	2000f174 	.word	0x2000f174

0802d038 <CRC_Lock>:
 802d038:	b530      	push	{r4, r5, lr}
 802d03a:	4a20      	ldr	r2, [pc, #128]	; (802d0bc <CRC_Lock+0x84>)
 802d03c:	6813      	ldr	r3, [r2, #0]
 802d03e:	f023 0301 	bic.w	r3, r3, #1
 802d042:	6013      	str	r3, [r2, #0]
 802d044:	4b1e      	ldr	r3, [pc, #120]	; (802d0c0 <CRC_Lock+0x88>)
 802d046:	681a      	ldr	r2, [r3, #0]
 802d048:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802d04c:	4022      	ands	r2, r4
 802d04e:	f24c 2540 	movw	r5, #49728	; 0xc240
 802d052:	42aa      	cmp	r2, r5
 802d054:	d005      	beq.n	802d062 <CRC_Lock+0x2a>
 802d056:	681b      	ldr	r3, [r3, #0]
 802d058:	f24c 2270 	movw	r2, #49776	; 0xc270
 802d05c:	4023      	ands	r3, r4
 802d05e:	4293      	cmp	r3, r2
 802d060:	d124      	bne.n	802d0ac <CRC_Lock+0x74>
 802d062:	4b18      	ldr	r3, [pc, #96]	; (802d0c4 <CRC_Lock+0x8c>)
 802d064:	681b      	ldr	r3, [r3, #0]
 802d066:	bb0b      	cbnz	r3, 802d0ac <CRC_Lock+0x74>
 802d068:	4b17      	ldr	r3, [pc, #92]	; (802d0c8 <CRC_Lock+0x90>)
 802d06a:	681a      	ldr	r2, [r3, #0]
 802d06c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802d070:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802d074:	d00d      	beq.n	802d092 <CRC_Lock+0x5a>
 802d076:	681a      	ldr	r2, [r3, #0]
 802d078:	f240 4483 	movw	r4, #1155	; 0x483
 802d07c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802d080:	42a2      	cmp	r2, r4
 802d082:	d006      	beq.n	802d092 <CRC_Lock+0x5a>
 802d084:	681b      	ldr	r3, [r3, #0]
 802d086:	f240 4285 	movw	r2, #1157	; 0x485
 802d08a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802d08e:	4293      	cmp	r3, r2
 802d090:	d10c      	bne.n	802d0ac <CRC_Lock+0x74>
 802d092:	4b0e      	ldr	r3, [pc, #56]	; (802d0cc <CRC_Lock+0x94>)
 802d094:	2201      	movs	r2, #1
 802d096:	601a      	str	r2, [r3, #0]
 802d098:	681a      	ldr	r2, [r3, #0]
 802d09a:	2a00      	cmp	r2, #0
 802d09c:	d1fc      	bne.n	802d098 <CRC_Lock+0x60>
 802d09e:	4b0c      	ldr	r3, [pc, #48]	; (802d0d0 <CRC_Lock+0x98>)
 802d0a0:	6018      	str	r0, [r3, #0]
 802d0a2:	6818      	ldr	r0, [r3, #0]
 802d0a4:	1a43      	subs	r3, r0, r1
 802d0a6:	4258      	negs	r0, r3
 802d0a8:	4158      	adcs	r0, r3
 802d0aa:	bd30      	pop	{r4, r5, pc}
 802d0ac:	4b09      	ldr	r3, [pc, #36]	; (802d0d4 <CRC_Lock+0x9c>)
 802d0ae:	2201      	movs	r2, #1
 802d0b0:	601a      	str	r2, [r3, #0]
 802d0b2:	681a      	ldr	r2, [r3, #0]
 802d0b4:	2a00      	cmp	r2, #0
 802d0b6:	d1fc      	bne.n	802d0b2 <CRC_Lock+0x7a>
 802d0b8:	4b07      	ldr	r3, [pc, #28]	; (802d0d8 <CRC_Lock+0xa0>)
 802d0ba:	e7f1      	b.n	802d0a0 <CRC_Lock+0x68>
 802d0bc:	e0002000 	.word	0xe0002000
 802d0c0:	e000ed00 	.word	0xe000ed00
 802d0c4:	e0042000 	.word	0xe0042000
 802d0c8:	5c001000 	.word	0x5c001000
 802d0cc:	58024c08 	.word	0x58024c08
 802d0d0:	58024c00 	.word	0x58024c00
 802d0d4:	40023008 	.word	0x40023008
 802d0d8:	40023000 	.word	0x40023000

0802d0dc <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802d0dc:	6101      	str	r1, [r0, #16]
 802d0de:	4770      	bx	lr

0802d0e0 <_ZN8touchgfx8Gestures4tickEv>:
 802d0e0:	7b83      	ldrb	r3, [r0, #14]
 802d0e2:	b14b      	cbz	r3, 802d0f8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802d0e4:	8903      	ldrh	r3, [r0, #8]
 802d0e6:	3301      	adds	r3, #1
 802d0e8:	b29b      	uxth	r3, r3
 802d0ea:	2b07      	cmp	r3, #7
 802d0ec:	8103      	strh	r3, [r0, #8]
 802d0ee:	bf81      	itttt	hi
 802d0f0:	2300      	movhi	r3, #0
 802d0f2:	8143      	strhhi	r3, [r0, #10]
 802d0f4:	8183      	strhhi	r3, [r0, #12]
 802d0f6:	7383      	strbhi	r3, [r0, #14]
 802d0f8:	4770      	bx	lr
	...

0802d0fc <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802d0fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802d100:	4698      	mov	r8, r3
 802d102:	8883      	ldrh	r3, [r0, #4]
 802d104:	f8ad 3006 	strh.w	r3, [sp, #6]
 802d108:	eba8 0303 	sub.w	r3, r8, r3
 802d10c:	b21b      	sxth	r3, r3
 802d10e:	4604      	mov	r4, r0
 802d110:	2b00      	cmp	r3, #0
 802d112:	4617      	mov	r7, r2
 802d114:	4a18      	ldr	r2, [pc, #96]	; (802d178 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802d116:	9200      	str	r2, [sp, #0]
 802d118:	bfb8      	it	lt
 802d11a:	425b      	neglt	r3, r3
 802d11c:	8aa2      	ldrh	r2, [r4, #20]
 802d11e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802d122:	f8ad 800a 	strh.w	r8, [sp, #10]
 802d126:	b21b      	sxth	r3, r3
 802d128:	460e      	mov	r6, r1
 802d12a:	4293      	cmp	r3, r2
 802d12c:	88c1      	ldrh	r1, [r0, #6]
 802d12e:	f8ad 1008 	strh.w	r1, [sp, #8]
 802d132:	f04f 0000 	mov.w	r0, #0
 802d136:	f88d 0004 	strb.w	r0, [sp, #4]
 802d13a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802d13e:	dc07      	bgt.n	802d150 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 802d140:	1a69      	subs	r1, r5, r1
 802d142:	b209      	sxth	r1, r1
 802d144:	2900      	cmp	r1, #0
 802d146:	bfb8      	it	lt
 802d148:	4249      	neglt	r1, r1
 802d14a:	b209      	sxth	r1, r1
 802d14c:	428a      	cmp	r2, r1
 802d14e:	da10      	bge.n	802d172 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 802d150:	6920      	ldr	r0, [r4, #16]
 802d152:	6803      	ldr	r3, [r0, #0]
 802d154:	4669      	mov	r1, sp
 802d156:	685b      	ldr	r3, [r3, #4]
 802d158:	4798      	blx	r3
 802d15a:	eba8 0606 	sub.w	r6, r8, r6
 802d15e:	2300      	movs	r3, #0
 802d160:	1bef      	subs	r7, r5, r7
 802d162:	2001      	movs	r0, #1
 802d164:	8123      	strh	r3, [r4, #8]
 802d166:	8166      	strh	r6, [r4, #10]
 802d168:	81a7      	strh	r7, [r4, #12]
 802d16a:	f8a4 8004 	strh.w	r8, [r4, #4]
 802d16e:	80e5      	strh	r5, [r4, #6]
 802d170:	73a0      	strb	r0, [r4, #14]
 802d172:	b004      	add	sp, #16
 802d174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d178:	08030b68 	.word	0x08030b68

0802d17c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802d17c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d17e:	461e      	mov	r6, r3
 802d180:	1e4b      	subs	r3, r1, #1
 802d182:	2b01      	cmp	r3, #1
 802d184:	b085      	sub	sp, #20
 802d186:	4604      	mov	r4, r0
 802d188:	460d      	mov	r5, r1
 802d18a:	4617      	mov	r7, r2
 802d18c:	d84b      	bhi.n	802d226 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802d18e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802d192:	1cd3      	adds	r3, r2, #3
 802d194:	b29b      	uxth	r3, r3
 802d196:	2b06      	cmp	r3, #6
 802d198:	d916      	bls.n	802d1c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802d19a:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 802d23c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802d19e:	f8cd c004 	str.w	ip, [sp, #4]
 802d1a2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802d1a6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802d1aa:	6900      	ldr	r0, [r0, #16]
 802d1ac:	f8ad 100c 	strh.w	r1, [sp, #12]
 802d1b0:	f04f 0c00 	mov.w	ip, #0
 802d1b4:	f88d c008 	strb.w	ip, [sp, #8]
 802d1b8:	f8ad 200a 	strh.w	r2, [sp, #10]
 802d1bc:	f8ad 300e 	strh.w	r3, [sp, #14]
 802d1c0:	6803      	ldr	r3, [r0, #0]
 802d1c2:	a901      	add	r1, sp, #4
 802d1c4:	689b      	ldr	r3, [r3, #8]
 802d1c6:	4798      	blx	r3
 802d1c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d1cc:	1cd3      	adds	r3, r2, #3
 802d1ce:	b29b      	uxth	r3, r3
 802d1d0:	2b06      	cmp	r3, #6
 802d1d2:	d916      	bls.n	802d202 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802d1d4:	f8df c064 	ldr.w	ip, [pc, #100]	; 802d23c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802d1d8:	f8cd c004 	str.w	ip, [sp, #4]
 802d1dc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802d1e0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802d1e4:	6920      	ldr	r0, [r4, #16]
 802d1e6:	f8ad 100c 	strh.w	r1, [sp, #12]
 802d1ea:	f04f 0c01 	mov.w	ip, #1
 802d1ee:	f88d c008 	strb.w	ip, [sp, #8]
 802d1f2:	f8ad 200a 	strh.w	r2, [sp, #10]
 802d1f6:	f8ad 300e 	strh.w	r3, [sp, #14]
 802d1fa:	6803      	ldr	r3, [r0, #0]
 802d1fc:	a901      	add	r1, sp, #4
 802d1fe:	689b      	ldr	r3, [r3, #8]
 802d200:	4798      	blx	r3
 802d202:	4b0d      	ldr	r3, [pc, #52]	; (802d238 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802d204:	9301      	str	r3, [sp, #4]
 802d206:	6920      	ldr	r0, [r4, #16]
 802d208:	f88d 5008 	strb.w	r5, [sp, #8]
 802d20c:	2300      	movs	r3, #0
 802d20e:	f8ad 700a 	strh.w	r7, [sp, #10]
 802d212:	f8ad 600c 	strh.w	r6, [sp, #12]
 802d216:	f8ad 300e 	strh.w	r3, [sp, #14]
 802d21a:	6803      	ldr	r3, [r0, #0]
 802d21c:	a901      	add	r1, sp, #4
 802d21e:	681b      	ldr	r3, [r3, #0]
 802d220:	4798      	blx	r3
 802d222:	b005      	add	sp, #20
 802d224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d226:	2900      	cmp	r1, #0
 802d228:	d1eb      	bne.n	802d202 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802d22a:	80a2      	strh	r2, [r4, #4]
 802d22c:	80c6      	strh	r6, [r0, #6]
 802d22e:	60a1      	str	r1, [r4, #8]
 802d230:	81a1      	strh	r1, [r4, #12]
 802d232:	73a1      	strb	r1, [r4, #14]
 802d234:	e7e5      	b.n	802d202 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802d236:	bf00      	nop
 802d238:	08030b54 	.word	0x08030b54
 802d23c:	08030b7c 	.word	0x08030b7c

0802d240 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 802d240:	10c9      	asrs	r1, r1, #3
 802d242:	2900      	cmp	r1, #0
 802d244:	bfb8      	it	lt
 802d246:	4249      	neglt	r1, r1
 802d248:	2801      	cmp	r0, #1
 802d24a:	d108      	bne.n	802d25e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 802d24c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802d250:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 802d254:	4601      	mov	r1, r0
 802d256:	dd02      	ble.n	802d25e <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 802d258:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 802d25c:	4770      	bx	lr
 802d25e:	29ff      	cmp	r1, #255	; 0xff
 802d260:	bfa8      	it	ge
 802d262:	21ff      	movge	r1, #255	; 0xff
 802d264:	4608      	mov	r0, r1
 802d266:	4770      	bx	lr

0802d268 <_ZN8touchgfx10Rasterizer6lineToEii>:
 802d268:	b410      	push	{r4}
 802d26a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802d26e:	429c      	cmp	r4, r3
 802d270:	d803      	bhi.n	802d27a <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802d272:	f85d 4b04 	ldr.w	r4, [sp], #4
 802d276:	f7ef b983 	b.w	801c580 <_ZN8touchgfx7Outline6lineToEii>
 802d27a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802d27e:	4770      	bx	lr

0802d280 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 802d280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d284:	b08b      	sub	sp, #44	; 0x2c
 802d286:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802d28a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 802d28e:	9308      	str	r3, [sp, #32]
 802d290:	4606      	mov	r6, r0
 802d292:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 802d296:	9309      	str	r3, [sp, #36]	; 0x24
 802d298:	468a      	mov	sl, r1
 802d29a:	f7ef fade 	bl	801c85a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802d29e:	68b5      	ldr	r5, [r6, #8]
 802d2a0:	4604      	mov	r4, r0
 802d2a2:	2d00      	cmp	r5, #0
 802d2a4:	d044      	beq.n	802d330 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802d2a6:	6873      	ldr	r3, [r6, #4]
 802d2a8:	42ab      	cmp	r3, r5
 802d2aa:	d33d      	bcc.n	802d328 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802d2ac:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802d2b0:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 802d2b4:	eb02 0b03 	add.w	fp, r2, r3
 802d2b8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802d2bc:	fb02 1203 	mla	r2, r2, r3, r1
 802d2c0:	9205      	str	r2, [sp, #20]
 802d2c2:	1e6a      	subs	r2, r5, #1
 802d2c4:	9204      	str	r2, [sp, #16]
 802d2c6:	f04f 0800 	mov.w	r8, #0
 802d2ca:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802d2ce:	f9b4 7000 	ldrsh.w	r7, [r4]
 802d2d2:	454b      	cmp	r3, r9
 802d2d4:	463a      	mov	r2, r7
 802d2d6:	d008      	beq.n	802d2ea <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802d2d8:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 802d2dc:	eb03 0b09 	add.w	fp, r3, r9
 802d2e0:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 802d2e4:	fb03 1309 	mla	r3, r3, r9, r1
 802d2e8:	9305      	str	r3, [sp, #20]
 802d2ea:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802d2ee:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802d2f2:	4498      	add	r8, r3
 802d2f4:	9b04      	ldr	r3, [sp, #16]
 802d2f6:	3b01      	subs	r3, #1
 802d2f8:	9304      	str	r3, [sp, #16]
 802d2fa:	9b04      	ldr	r3, [sp, #16]
 802d2fc:	3301      	adds	r3, #1
 802d2fe:	d015      	beq.n	802d32c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802d300:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 802d304:	42bb      	cmp	r3, r7
 802d306:	d117      	bne.n	802d338 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802d308:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802d30c:	9b04      	ldr	r3, [sp, #16]
 802d30e:	4548      	cmp	r0, r9
 802d310:	f103 33ff 	add.w	r3, r3, #4294967295
 802d314:	d17f      	bne.n	802d416 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x196>
 802d316:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802d31a:	4401      	add	r1, r0
 802d31c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802d320:	4480      	add	r8, r0
 802d322:	e7e9      	b.n	802d2f8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 802d324:	461f      	mov	r7, r3
 802d326:	e044      	b.n	802d3b2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x132>
 802d328:	2000      	movs	r0, #0
 802d32a:	e002      	b.n	802d332 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 802d32c:	2900      	cmp	r1, #0
 802d32e:	d16f      	bne.n	802d410 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x190>
 802d330:	2001      	movs	r0, #1
 802d332:	b00b      	add	sp, #44	; 0x2c
 802d334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d338:	2900      	cmp	r1, #0
 802d33a:	d030      	beq.n	802d39e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11e>
 802d33c:	2f00      	cmp	r7, #0
 802d33e:	db29      	blt.n	802d394 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x114>
 802d340:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 802d344:	42bb      	cmp	r3, r7
 802d346:	dd25      	ble.n	802d394 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x114>
 802d348:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802d34c:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 802d350:	f7ff ff76 	bl	802d240 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802d354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d356:	fb10 f003 	smulbb	r0, r0, r3
 802d35a:	b280      	uxth	r0, r0
 802d35c:	1c41      	adds	r1, r0, #1
 802d35e:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802d362:	1209      	asrs	r1, r1, #8
 802d364:	f011 0fff 	tst.w	r1, #255	; 0xff
 802d368:	d014      	beq.n	802d394 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x114>
 802d36a:	9808      	ldr	r0, [sp, #32]
 802d36c:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 802d36e:	b2c9      	uxtb	r1, r1
 802d370:	b2ba      	uxth	r2, r7
 802d372:	9102      	str	r1, [sp, #8]
 802d374:	2101      	movs	r1, #1
 802d376:	4413      	add	r3, r2
 802d378:	9101      	str	r1, [sp, #4]
 802d37a:	4402      	add	r2, r0
 802d37c:	fa0f f18b 	sxth.w	r1, fp
 802d380:	f8da 0000 	ldr.w	r0, [sl]
 802d384:	9100      	str	r1, [sp, #0]
 802d386:	6941      	ldr	r1, [r0, #20]
 802d388:	b21b      	sxth	r3, r3
 802d38a:	460d      	mov	r5, r1
 802d38c:	b212      	sxth	r2, r2
 802d38e:	9905      	ldr	r1, [sp, #20]
 802d390:	4650      	mov	r0, sl
 802d392:	47a8      	blx	r5
 802d394:	9b04      	ldr	r3, [sp, #16]
 802d396:	3301      	adds	r3, #1
 802d398:	f107 0201 	add.w	r2, r7, #1
 802d39c:	d0c8      	beq.n	802d330 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802d39e:	f9b4 7000 	ldrsh.w	r7, [r4]
 802d3a2:	1abb      	subs	r3, r7, r2
 802d3a4:	2b00      	cmp	r3, #0
 802d3a6:	dd31      	ble.n	802d40c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802d3a8:	2a00      	cmp	r2, #0
 802d3aa:	dabb      	bge.n	802d324 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802d3ac:	2f00      	cmp	r7, #0
 802d3ae:	dd2d      	ble.n	802d40c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802d3b0:	2200      	movs	r2, #0
 802d3b2:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 802d3b6:	19d1      	adds	r1, r2, r7
 802d3b8:	4299      	cmp	r1, r3
 802d3ba:	db02      	blt.n	802d3c2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x142>
 802d3bc:	1a9f      	subs	r7, r3, r2
 802d3be:	2f00      	cmp	r7, #0
 802d3c0:	dd24      	ble.n	802d40c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802d3c2:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802d3c6:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 802d3ca:	f7ff ff39 	bl	802d240 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802d3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d3d0:	fb10 f003 	smulbb	r0, r0, r3
 802d3d4:	b280      	uxth	r0, r0
 802d3d6:	1c41      	adds	r1, r0, #1
 802d3d8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802d3dc:	1209      	asrs	r1, r1, #8
 802d3de:	f011 0fff 	tst.w	r1, #255	; 0xff
 802d3e2:	d013      	beq.n	802d40c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802d3e4:	9808      	ldr	r0, [sp, #32]
 802d3e6:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 802d3e8:	b292      	uxth	r2, r2
 802d3ea:	b2c9      	uxtb	r1, r1
 802d3ec:	4413      	add	r3, r2
 802d3ee:	9102      	str	r1, [sp, #8]
 802d3f0:	4402      	add	r2, r0
 802d3f2:	b23f      	sxth	r7, r7
 802d3f4:	f8da 0000 	ldr.w	r0, [sl]
 802d3f8:	9701      	str	r7, [sp, #4]
 802d3fa:	fa0f f18b 	sxth.w	r1, fp
 802d3fe:	9100      	str	r1, [sp, #0]
 802d400:	6947      	ldr	r7, [r0, #20]
 802d402:	9905      	ldr	r1, [sp, #20]
 802d404:	b21b      	sxth	r3, r3
 802d406:	b212      	sxth	r2, r2
 802d408:	4650      	mov	r0, sl
 802d40a:	47b8      	blx	r7
 802d40c:	464b      	mov	r3, r9
 802d40e:	e75c      	b.n	802d2ca <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802d410:	2f00      	cmp	r7, #0
 802d412:	da95      	bge.n	802d340 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xc0>
 802d414:	e78c      	b.n	802d330 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802d416:	2900      	cmp	r1, #0
 802d418:	d0f8      	beq.n	802d40c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802d41a:	e78f      	b.n	802d33c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbc>

0802d41c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 802d41c:	4b4c      	ldr	r3, [pc, #304]	; (802d550 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x134>)
 802d41e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 802d422:	2500      	movs	r5, #0
 802d424:	f100 0620 	add.w	r6, r0, #32
 802d428:	4604      	mov	r4, r0
 802d42a:	e9c0 3100 	strd	r3, r1, [r0]
 802d42e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 802d432:	e9c0 5504 	strd	r5, r5, [r0, #16]
 802d436:	e9c0 5506 	strd	r5, r5, [r0, #24]
 802d43a:	f100 0718 	add.w	r7, r0, #24
 802d43e:	4630      	mov	r0, r6
 802d440:	4690      	mov	r8, r2
 802d442:	f7ee fbd5 	bl	801bbf0 <_ZN8touchgfx7OutlineC1Ev>
 802d446:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 802d44a:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 802d44e:	2301      	movs	r3, #1
 802d450:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 802d454:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 802d458:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 802d45c:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 802d460:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802d464:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 802d468:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 802d46c:	f9b8 2000 	ldrsh.w	r2, [r8]
 802d470:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802d474:	f8d4 c004 	ldr.w	ip, [r4, #4]
 802d478:	9500      	str	r5, [sp, #0]
 802d47a:	4410      	add	r0, r2
 802d47c:	b280      	uxth	r0, r0
 802d47e:	fa0f fa80 	sxth.w	sl, r0
 802d482:	45aa      	cmp	sl, r5
 802d484:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802d488:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 802d48c:	dd5c      	ble.n	802d548 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 802d48e:	4591      	cmp	r9, r2
 802d490:	dd5a      	ble.n	802d548 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 802d492:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 802d496:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802d49a:	440b      	add	r3, r1
 802d49c:	b29b      	uxth	r3, r3
 802d49e:	b21d      	sxth	r5, r3
 802d4a0:	2d00      	cmp	r5, #0
 802d4a2:	dd51      	ble.n	802d548 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 802d4a4:	458e      	cmp	lr, r1
 802d4a6:	dd4f      	ble.n	802d548 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 802d4a8:	45d1      	cmp	r9, sl
 802d4aa:	bfb8      	it	lt
 802d4ac:	fa1f f089 	uxthlt.w	r0, r9
 802d4b0:	45ae      	cmp	lr, r5
 802d4b2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802d4b6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 802d4ba:	bfb8      	it	lt
 802d4bc:	fa1f f38e 	uxthlt.w	r3, lr
 802d4c0:	1a80      	subs	r0, r0, r2
 802d4c2:	1a5b      	subs	r3, r3, r1
 802d4c4:	f8ad 0004 	strh.w	r0, [sp, #4]
 802d4c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 802d4cc:	f8ad 2000 	strh.w	r2, [sp]
 802d4d0:	f8ad 1002 	strh.w	r1, [sp, #2]
 802d4d4:	466d      	mov	r5, sp
 802d4d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 802d4da:	e887 0003 	stmia.w	r7, {r0, r1}
 802d4de:	f8dc 3000 	ldr.w	r3, [ip]
 802d4e2:	4660      	mov	r0, ip
 802d4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d4e6:	4639      	mov	r1, r7
 802d4e8:	4798      	blx	r3
 802d4ea:	6861      	ldr	r1, [r4, #4]
 802d4ec:	4628      	mov	r0, r5
 802d4ee:	3104      	adds	r1, #4
 802d4f0:	f7f0 fd14 	bl	801df1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802d4f4:	4638      	mov	r0, r7
 802d4f6:	f7f0 fce9 	bl	801decc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802d4fa:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802d4fe:	f8bd 2000 	ldrh.w	r2, [sp]
 802d502:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 802d506:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 802d50a:	4630      	mov	r0, r6
 802d50c:	f7ee fb54 	bl	801bbb8 <_ZN8touchgfx7Outline5resetEv>
 802d510:	f9bd 3000 	ldrsh.w	r3, [sp]
 802d514:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 802d518:	015b      	lsls	r3, r3, #5
 802d51a:	60a3      	str	r3, [r4, #8]
 802d51c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802d520:	015b      	lsls	r3, r3, #5
 802d522:	60e3      	str	r3, [r4, #12]
 802d524:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802d528:	015b      	lsls	r3, r3, #5
 802d52a:	6123      	str	r3, [r4, #16]
 802d52c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802d530:	015b      	lsls	r3, r3, #5
 802d532:	6163      	str	r3, [r4, #20]
 802d534:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 802d538:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 802d53c:	4620      	mov	r0, r4
 802d53e:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 802d542:	b002      	add	sp, #8
 802d544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d548:	2300      	movs	r3, #0
 802d54a:	9301      	str	r3, [sp, #4]
 802d54c:	e7c2      	b.n	802d4d4 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb8>
 802d54e:	bf00      	nop
 802d550:	080306bc 	.word	0x080306bc

0802d554 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802d554:	b510      	push	{r4, lr}
 802d556:	4b07      	ldr	r3, [pc, #28]	; (802d574 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 802d558:	781b      	ldrb	r3, [r3, #0]
 802d55a:	2b01      	cmp	r3, #1
 802d55c:	d108      	bne.n	802d570 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802d55e:	6843      	ldr	r3, [r0, #4]
 802d560:	6814      	ldr	r4, [r2, #0]
 802d562:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802d566:	680b      	ldr	r3, [r1, #0]
 802d568:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802d56c:	6013      	str	r3, [r2, #0]
 802d56e:	600c      	str	r4, [r1, #0]
 802d570:	bd10      	pop	{r4, pc}
 802d572:	bf00      	nop
 802d574:	2000f15a 	.word	0x2000f15a

0802d578 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802d578:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802d57a:	ab02      	add	r3, sp, #8
 802d57c:	4604      	mov	r4, r0
 802d57e:	f843 2d08 	str.w	r2, [r3, #-8]!
 802d582:	9101      	str	r1, [sp, #4]
 802d584:	461a      	mov	r2, r3
 802d586:	a901      	add	r1, sp, #4
 802d588:	f7ff ffe4 	bl	802d554 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802d58c:	68a3      	ldr	r3, [r4, #8]
 802d58e:	9901      	ldr	r1, [sp, #4]
 802d590:	9a00      	ldr	r2, [sp, #0]
 802d592:	1ac9      	subs	r1, r1, r3
 802d594:	68e3      	ldr	r3, [r4, #12]
 802d596:	9101      	str	r1, [sp, #4]
 802d598:	1ad2      	subs	r2, r2, r3
 802d59a:	2a00      	cmp	r2, #0
 802d59c:	9200      	str	r2, [sp, #0]
 802d59e:	db1c      	blt.n	802d5da <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802d5a0:	6963      	ldr	r3, [r4, #20]
 802d5a2:	429a      	cmp	r2, r3
 802d5a4:	bfac      	ite	ge
 802d5a6:	2002      	movge	r0, #2
 802d5a8:	2000      	movlt	r0, #0
 802d5aa:	2900      	cmp	r1, #0
 802d5ac:	db17      	blt.n	802d5de <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802d5ae:	6923      	ldr	r3, [r4, #16]
 802d5b0:	4299      	cmp	r1, r3
 802d5b2:	bfac      	ite	ge
 802d5b4:	2308      	movge	r3, #8
 802d5b6:	2300      	movlt	r3, #0
 802d5b8:	4303      	orrs	r3, r0
 802d5ba:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 802d5be:	b2dd      	uxtb	r5, r3
 802d5c0:	b978      	cbnz	r0, 802d5e2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802d5c2:	f104 0020 	add.w	r0, r4, #32
 802d5c6:	f7ff fe4f 	bl	802d268 <_ZN8touchgfx10Rasterizer6lineToEii>
 802d5ca:	9b01      	ldr	r3, [sp, #4]
 802d5cc:	65e3      	str	r3, [r4, #92]	; 0x5c
 802d5ce:	9b00      	ldr	r3, [sp, #0]
 802d5d0:	6623      	str	r3, [r4, #96]	; 0x60
 802d5d2:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 802d5d6:	b002      	add	sp, #8
 802d5d8:	bd70      	pop	{r4, r5, r6, pc}
 802d5da:	2001      	movs	r0, #1
 802d5dc:	e7e5      	b.n	802d5aa <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802d5de:	2304      	movs	r3, #4
 802d5e0:	e7ea      	b.n	802d5b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802d5e2:	b113      	cbz	r3, 802d5ea <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802d5e4:	ea10 0305 	ands.w	r3, r0, r5
 802d5e8:	d11d      	bne.n	802d626 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xae>
 802d5ea:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 802d5ee:	f104 0620 	add.w	r6, r4, #32
 802d5f2:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 802d5f6:	b193      	cbz	r3, 802d61e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 802d5f8:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 802d5fc:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 802d600:	4298      	cmp	r0, r3
 802d602:	d802      	bhi.n	802d60a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802d604:	4630      	mov	r0, r6
 802d606:	f7ee ffd5 	bl	801c5b4 <_ZN8touchgfx7Outline6moveToEii>
 802d60a:	2300      	movs	r3, #0
 802d60c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802d610:	2301      	movs	r3, #1
 802d612:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 802d616:	e9dd 2100 	ldrd	r2, r1, [sp]
 802d61a:	4630      	mov	r0, r6
 802d61c:	e7d3      	b.n	802d5c6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802d61e:	4630      	mov	r0, r6
 802d620:	f7ff fe22 	bl	802d268 <_ZN8touchgfx10Rasterizer6lineToEii>
 802d624:	e7f7      	b.n	802d616 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 802d626:	461d      	mov	r5, r3
 802d628:	e7cf      	b.n	802d5ca <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>

0802d62a <_ZN8touchgfx6Canvas5closeEv>:
 802d62a:	b538      	push	{r3, r4, r5, lr}
 802d62c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 802d630:	4604      	mov	r4, r0
 802d632:	b993      	cbnz	r3, 802d65a <_ZN8touchgfx6Canvas5closeEv+0x30>
 802d634:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 802d638:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 802d63c:	4213      	tst	r3, r2
 802d63e:	d10c      	bne.n	802d65a <_ZN8touchgfx6Canvas5closeEv+0x30>
 802d640:	f100 0520 	add.w	r5, r0, #32
 802d644:	b123      	cbz	r3, 802d650 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802d646:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 802d64a:	4628      	mov	r0, r5
 802d64c:	f7ff fe0c 	bl	802d268 <_ZN8touchgfx10Rasterizer6lineToEii>
 802d650:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 802d654:	4628      	mov	r0, r5
 802d656:	f7ff fe07 	bl	802d268 <_ZN8touchgfx10Rasterizer6lineToEii>
 802d65a:	2300      	movs	r3, #0
 802d65c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802d660:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 802d664:	4298      	cmp	r0, r3
 802d666:	bf34      	ite	cc
 802d668:	2000      	movcc	r0, #0
 802d66a:	2001      	movcs	r0, #1
 802d66c:	bd38      	pop	{r3, r4, r5, pc}
	...

0802d670 <_ZN8touchgfx6Canvas6renderEh>:
 802d670:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802d674:	4604      	mov	r4, r0
 802d676:	6840      	ldr	r0, [r0, #4]
 802d678:	6803      	ldr	r3, [r0, #0]
 802d67a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802d67c:	460d      	mov	r5, r1
 802d67e:	4798      	blx	r3
 802d680:	fb10 f105 	smulbb	r1, r0, r5
 802d684:	b289      	uxth	r1, r1
 802d686:	1c4d      	adds	r5, r1, #1
 802d688:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802d68c:	122d      	asrs	r5, r5, #8
 802d68e:	f000 8098 	beq.w	802d7c2 <_ZN8touchgfx6Canvas6renderEh+0x152>
 802d692:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 802d696:	2b00      	cmp	r3, #0
 802d698:	f000 8093 	beq.w	802d7c2 <_ZN8touchgfx6Canvas6renderEh+0x152>
 802d69c:	4620      	mov	r0, r4
 802d69e:	f7ff ffc4 	bl	802d62a <_ZN8touchgfx6Canvas5closeEv>
 802d6a2:	4607      	mov	r7, r0
 802d6a4:	2800      	cmp	r0, #0
 802d6a6:	d043      	beq.n	802d730 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 802d6a8:	6863      	ldr	r3, [r4, #4]
 802d6aa:	4e47      	ldr	r6, [pc, #284]	; (802d7c8 <_ZN8touchgfx6Canvas6renderEh+0x158>)
 802d6ac:	6a98      	ldr	r0, [r3, #40]	; 0x28
 802d6ae:	6837      	ldr	r7, [r6, #0]
 802d6b0:	6803      	ldr	r3, [r0, #0]
 802d6b2:	689b      	ldr	r3, [r3, #8]
 802d6b4:	4798      	blx	r3
 802d6b6:	4601      	mov	r1, r0
 802d6b8:	4638      	mov	r0, r7
 802d6ba:	f7ec ffcb 	bl	801a654 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802d6be:	4607      	mov	r7, r0
 802d6c0:	f7e2 fcf0 	bl	80100a4 <_ZN8touchgfx3HAL3lcdEv>
 802d6c4:	6803      	ldr	r3, [r0, #0]
 802d6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802d6c8:	4798      	blx	r3
 802d6ca:	4680      	mov	r8, r0
 802d6cc:	f7e2 fcea 	bl	80100a4 <_ZN8touchgfx3HAL3lcdEv>
 802d6d0:	6803      	ldr	r3, [r0, #0]
 802d6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d6d4:	4798      	blx	r3
 802d6d6:	280b      	cmp	r0, #11
 802d6d8:	d858      	bhi.n	802d78c <_ZN8touchgfx6Canvas6renderEh+0x11c>
 802d6da:	e8df f000 	tbb	[pc, r0]
 802d6de:	594e      	.short	0x594e
 802d6e0:	2d570669 	.word	0x2d570669
 802d6e4:	6262623d 	.word	0x6262623d
 802d6e8:	6262      	.short	0x6262
 802d6ea:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802d6ee:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802d6f2:	2208      	movs	r2, #8
 802d6f4:	fb91 f2f2 	sdiv	r2, r1, r2
 802d6f8:	fb08 2303 	mla	r3, r8, r3, r2
 802d6fc:	441f      	add	r7, r3
 802d6fe:	424b      	negs	r3, r1
 802d700:	f003 0307 	and.w	r3, r3, #7
 802d704:	f001 0107 	and.w	r1, r1, #7
 802d708:	bf58      	it	pl
 802d70a:	4259      	negpl	r1, r3
 802d70c:	b2c9      	uxtb	r1, r1
 802d70e:	b2ed      	uxtb	r5, r5
 802d710:	e9cd 1500 	strd	r1, r5, [sp]
 802d714:	6860      	ldr	r0, [r4, #4]
 802d716:	fa0f f388 	sxth.w	r3, r8
 802d71a:	463a      	mov	r2, r7
 802d71c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 802d71e:	f104 0020 	add.w	r0, r4, #32
 802d722:	f7ff fdad 	bl	802d280 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802d726:	4607      	mov	r7, r0
 802d728:	6830      	ldr	r0, [r6, #0]
 802d72a:	6803      	ldr	r3, [r0, #0]
 802d72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d72e:	4798      	blx	r3
 802d730:	4638      	mov	r0, r7
 802d732:	b002      	add	sp, #8
 802d734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d738:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802d73c:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802d740:	2204      	movs	r2, #4
 802d742:	fb91 f2f2 	sdiv	r2, r1, r2
 802d746:	fb08 2303 	mla	r3, r8, r3, r2
 802d74a:	441f      	add	r7, r3
 802d74c:	424b      	negs	r3, r1
 802d74e:	f003 0303 	and.w	r3, r3, #3
 802d752:	f001 0103 	and.w	r1, r1, #3
 802d756:	e7d7      	b.n	802d708 <_ZN8touchgfx6Canvas6renderEh+0x98>
 802d758:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 802d75c:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802d760:	2900      	cmp	r1, #0
 802d762:	f04f 0202 	mov.w	r2, #2
 802d766:	fb91 f2f2 	sdiv	r2, r1, r2
 802d76a:	f001 0101 	and.w	r1, r1, #1
 802d76e:	fb08 2303 	mla	r3, r8, r3, r2
 802d772:	441f      	add	r7, r3
 802d774:	bfb8      	it	lt
 802d776:	4249      	neglt	r1, r1
 802d778:	e7c8      	b.n	802d70c <_ZN8touchgfx6Canvas6renderEh+0x9c>
 802d77a:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802d77e:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802d782:	fb08 f303 	mul.w	r3, r8, r3
 802d786:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802d78a:	441f      	add	r7, r3
 802d78c:	2100      	movs	r1, #0
 802d78e:	e7be      	b.n	802d70e <_ZN8touchgfx6Canvas6renderEh+0x9e>
 802d790:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802d794:	fb08 f203 	mul.w	r2, r8, r3
 802d798:	8b23      	ldrh	r3, [r4, #24]
 802d79a:	2103      	movs	r1, #3
 802d79c:	fb13 2301 	smlabb	r3, r3, r1, r2
 802d7a0:	e7f3      	b.n	802d78a <_ZN8touchgfx6Canvas6renderEh+0x11a>
 802d7a2:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802d7a6:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802d7aa:	fb08 2303 	mla	r3, r8, r3, r2
 802d7ae:	e7ec      	b.n	802d78a <_ZN8touchgfx6Canvas6renderEh+0x11a>
 802d7b0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 802d7b4:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 802d7b8:	fb08 f303 	mul.w	r3, r8, r3
 802d7bc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802d7c0:	e7e3      	b.n	802d78a <_ZN8touchgfx6Canvas6renderEh+0x11a>
 802d7c2:	2701      	movs	r7, #1
 802d7c4:	e7b4      	b.n	802d730 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 802d7c6:	bf00      	nop
 802d7c8:	2000f164 	.word	0x2000f164

0802d7cc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802d7cc:	b513      	push	{r0, r1, r4, lr}
 802d7ce:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 802d7d2:	4604      	mov	r4, r0
 802d7d4:	e9cd 2100 	strd	r2, r1, [sp]
 802d7d8:	b1a3      	cbz	r3, 802d804 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802d7da:	466a      	mov	r2, sp
 802d7dc:	a901      	add	r1, sp, #4
 802d7de:	4620      	mov	r0, r4
 802d7e0:	f7ff feb8 	bl	802d554 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802d7e4:	68a3      	ldr	r3, [r4, #8]
 802d7e6:	9901      	ldr	r1, [sp, #4]
 802d7e8:	9a00      	ldr	r2, [sp, #0]
 802d7ea:	1ac9      	subs	r1, r1, r3
 802d7ec:	68e3      	ldr	r3, [r4, #12]
 802d7ee:	9101      	str	r1, [sp, #4]
 802d7f0:	1ad2      	subs	r2, r2, r3
 802d7f2:	2a00      	cmp	r2, #0
 802d7f4:	9200      	str	r2, [sp, #0]
 802d7f6:	da0b      	bge.n	802d810 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802d7f8:	2301      	movs	r3, #1
 802d7fa:	2900      	cmp	r1, #0
 802d7fc:	da0e      	bge.n	802d81c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802d7fe:	f043 0304 	orr.w	r3, r3, #4
 802d802:	e013      	b.n	802d82c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 802d804:	f7ff ff11 	bl	802d62a <_ZN8touchgfx6Canvas5closeEv>
 802d808:	2800      	cmp	r0, #0
 802d80a:	d1e6      	bne.n	802d7da <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 802d80c:	b002      	add	sp, #8
 802d80e:	bd10      	pop	{r4, pc}
 802d810:	6963      	ldr	r3, [r4, #20]
 802d812:	429a      	cmp	r2, r3
 802d814:	bfac      	ite	ge
 802d816:	2302      	movge	r3, #2
 802d818:	2300      	movlt	r3, #0
 802d81a:	e7ee      	b.n	802d7fa <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802d81c:	6920      	ldr	r0, [r4, #16]
 802d81e:	4281      	cmp	r1, r0
 802d820:	bfac      	ite	ge
 802d822:	2008      	movge	r0, #8
 802d824:	2000      	movlt	r0, #0
 802d826:	4318      	orrs	r0, r3
 802d828:	b2c3      	uxtb	r3, r0
 802d82a:	b158      	cbz	r0, 802d844 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802d82c:	2201      	movs	r2, #1
 802d82e:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 802d832:	9901      	ldr	r1, [sp, #4]
 802d834:	9a00      	ldr	r2, [sp, #0]
 802d836:	66a1      	str	r1, [r4, #104]	; 0x68
 802d838:	66e2      	str	r2, [r4, #108]	; 0x6c
 802d83a:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 802d83e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 802d842:	e7e3      	b.n	802d80c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802d844:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 802d848:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 802d84c:	4298      	cmp	r0, r3
 802d84e:	d803      	bhi.n	802d858 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802d850:	f104 0020 	add.w	r0, r4, #32
 802d854:	f7ee feae 	bl	801c5b4 <_ZN8touchgfx7Outline6moveToEii>
 802d858:	2300      	movs	r3, #0
 802d85a:	2201      	movs	r2, #1
 802d85c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802d860:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 802d864:	e7e5      	b.n	802d832 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802d866 <__aeabi_atexit>:
 802d866:	460b      	mov	r3, r1
 802d868:	4601      	mov	r1, r0
 802d86a:	4618      	mov	r0, r3
 802d86c:	f000 b852 	b.w	802d914 <__cxa_atexit>

0802d870 <_ZdlPvj>:
 802d870:	f000 b812 	b.w	802d898 <_ZdlPv>

0802d874 <__cxa_guard_acquire>:
 802d874:	6803      	ldr	r3, [r0, #0]
 802d876:	07db      	lsls	r3, r3, #31
 802d878:	d406      	bmi.n	802d888 <__cxa_guard_acquire+0x14>
 802d87a:	7843      	ldrb	r3, [r0, #1]
 802d87c:	b103      	cbz	r3, 802d880 <__cxa_guard_acquire+0xc>
 802d87e:	deff      	udf	#255	; 0xff
 802d880:	2301      	movs	r3, #1
 802d882:	7043      	strb	r3, [r0, #1]
 802d884:	4618      	mov	r0, r3
 802d886:	4770      	bx	lr
 802d888:	2000      	movs	r0, #0
 802d88a:	4770      	bx	lr

0802d88c <__cxa_guard_release>:
 802d88c:	2301      	movs	r3, #1
 802d88e:	6003      	str	r3, [r0, #0]
 802d890:	4770      	bx	lr

0802d892 <__cxa_pure_virtual>:
 802d892:	b508      	push	{r3, lr}
 802d894:	f000 f80e 	bl	802d8b4 <_ZSt9terminatev>

0802d898 <_ZdlPv>:
 802d898:	f000 b988 	b.w	802dbac <free>

0802d89c <_ZN10__cxxabiv111__terminateEPFvvE>:
 802d89c:	b508      	push	{r3, lr}
 802d89e:	4780      	blx	r0
 802d8a0:	f000 f80d 	bl	802d8be <abort>

0802d8a4 <_ZSt13get_terminatev>:
 802d8a4:	4b02      	ldr	r3, [pc, #8]	; (802d8b0 <_ZSt13get_terminatev+0xc>)
 802d8a6:	6818      	ldr	r0, [r3, #0]
 802d8a8:	f3bf 8f5b 	dmb	ish
 802d8ac:	4770      	bx	lr
 802d8ae:	bf00      	nop
 802d8b0:	20000094 	.word	0x20000094

0802d8b4 <_ZSt9terminatev>:
 802d8b4:	b508      	push	{r3, lr}
 802d8b6:	f7ff fff5 	bl	802d8a4 <_ZSt13get_terminatev>
 802d8ba:	f7ff ffef 	bl	802d89c <_ZN10__cxxabiv111__terminateEPFvvE>

0802d8be <abort>:
 802d8be:	b508      	push	{r3, lr}
 802d8c0:	2006      	movs	r0, #6
 802d8c2:	f000 fe01 	bl	802e4c8 <raise>
 802d8c6:	2001      	movs	r0, #1
 802d8c8:	f7d6 fd5e 	bl	8004388 <_exit>

0802d8cc <__assert_func>:
 802d8cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802d8ce:	4614      	mov	r4, r2
 802d8d0:	461a      	mov	r2, r3
 802d8d2:	4b09      	ldr	r3, [pc, #36]	; (802d8f8 <__assert_func+0x2c>)
 802d8d4:	681b      	ldr	r3, [r3, #0]
 802d8d6:	4605      	mov	r5, r0
 802d8d8:	68d8      	ldr	r0, [r3, #12]
 802d8da:	b14c      	cbz	r4, 802d8f0 <__assert_func+0x24>
 802d8dc:	4b07      	ldr	r3, [pc, #28]	; (802d8fc <__assert_func+0x30>)
 802d8de:	9100      	str	r1, [sp, #0]
 802d8e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802d8e4:	4906      	ldr	r1, [pc, #24]	; (802d900 <__assert_func+0x34>)
 802d8e6:	462b      	mov	r3, r5
 802d8e8:	f000 f8fe 	bl	802dae8 <fiprintf>
 802d8ec:	f7ff ffe7 	bl	802d8be <abort>
 802d8f0:	4b04      	ldr	r3, [pc, #16]	; (802d904 <__assert_func+0x38>)
 802d8f2:	461c      	mov	r4, r3
 802d8f4:	e7f3      	b.n	802d8de <__assert_func+0x12>
 802d8f6:	bf00      	nop
 802d8f8:	20000098 	.word	0x20000098
 802d8fc:	08030e44 	.word	0x08030e44
 802d900:	08030e51 	.word	0x08030e51
 802d904:	08030e7f 	.word	0x08030e7f

0802d908 <atexit>:
 802d908:	2300      	movs	r3, #0
 802d90a:	4601      	mov	r1, r0
 802d90c:	461a      	mov	r2, r3
 802d90e:	4618      	mov	r0, r3
 802d910:	f000 bf0c 	b.w	802e72c <__register_exitproc>

0802d914 <__cxa_atexit>:
 802d914:	b510      	push	{r4, lr}
 802d916:	4c05      	ldr	r4, [pc, #20]	; (802d92c <__cxa_atexit+0x18>)
 802d918:	4613      	mov	r3, r2
 802d91a:	b12c      	cbz	r4, 802d928 <__cxa_atexit+0x14>
 802d91c:	460a      	mov	r2, r1
 802d91e:	4601      	mov	r1, r0
 802d920:	2002      	movs	r0, #2
 802d922:	f000 ff03 	bl	802e72c <__register_exitproc>
 802d926:	bd10      	pop	{r4, pc}
 802d928:	4620      	mov	r0, r4
 802d92a:	e7fc      	b.n	802d926 <__cxa_atexit+0x12>
 802d92c:	0802e72d 	.word	0x0802e72d

0802d930 <__errno>:
 802d930:	4b01      	ldr	r3, [pc, #4]	; (802d938 <__errno+0x8>)
 802d932:	6818      	ldr	r0, [r3, #0]
 802d934:	4770      	bx	lr
 802d936:	bf00      	nop
 802d938:	20000098 	.word	0x20000098

0802d93c <std>:
 802d93c:	2300      	movs	r3, #0
 802d93e:	b510      	push	{r4, lr}
 802d940:	4604      	mov	r4, r0
 802d942:	e9c0 3300 	strd	r3, r3, [r0]
 802d946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802d94a:	6083      	str	r3, [r0, #8]
 802d94c:	8181      	strh	r1, [r0, #12]
 802d94e:	6643      	str	r3, [r0, #100]	; 0x64
 802d950:	81c2      	strh	r2, [r0, #14]
 802d952:	6183      	str	r3, [r0, #24]
 802d954:	4619      	mov	r1, r3
 802d956:	2208      	movs	r2, #8
 802d958:	305c      	adds	r0, #92	; 0x5c
 802d95a:	f000 f93d 	bl	802dbd8 <memset>
 802d95e:	4b05      	ldr	r3, [pc, #20]	; (802d974 <std+0x38>)
 802d960:	6263      	str	r3, [r4, #36]	; 0x24
 802d962:	4b05      	ldr	r3, [pc, #20]	; (802d978 <std+0x3c>)
 802d964:	62a3      	str	r3, [r4, #40]	; 0x28
 802d966:	4b05      	ldr	r3, [pc, #20]	; (802d97c <std+0x40>)
 802d968:	62e3      	str	r3, [r4, #44]	; 0x2c
 802d96a:	4b05      	ldr	r3, [pc, #20]	; (802d980 <std+0x44>)
 802d96c:	6224      	str	r4, [r4, #32]
 802d96e:	6323      	str	r3, [r4, #48]	; 0x30
 802d970:	bd10      	pop	{r4, pc}
 802d972:	bf00      	nop
 802d974:	0802e501 	.word	0x0802e501
 802d978:	0802e523 	.word	0x0802e523
 802d97c:	0802e55b 	.word	0x0802e55b
 802d980:	0802e57f 	.word	0x0802e57f

0802d984 <_cleanup_r>:
 802d984:	4901      	ldr	r1, [pc, #4]	; (802d98c <_cleanup_r+0x8>)
 802d986:	f000 b8c1 	b.w	802db0c <_fwalk_reent>
 802d98a:	bf00      	nop
 802d98c:	0802e91d 	.word	0x0802e91d

0802d990 <__sfmoreglue>:
 802d990:	b570      	push	{r4, r5, r6, lr}
 802d992:	2268      	movs	r2, #104	; 0x68
 802d994:	1e4d      	subs	r5, r1, #1
 802d996:	4355      	muls	r5, r2
 802d998:	460e      	mov	r6, r1
 802d99a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802d99e:	f000 f98f 	bl	802dcc0 <_malloc_r>
 802d9a2:	4604      	mov	r4, r0
 802d9a4:	b140      	cbz	r0, 802d9b8 <__sfmoreglue+0x28>
 802d9a6:	2100      	movs	r1, #0
 802d9a8:	e9c0 1600 	strd	r1, r6, [r0]
 802d9ac:	300c      	adds	r0, #12
 802d9ae:	60a0      	str	r0, [r4, #8]
 802d9b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802d9b4:	f000 f910 	bl	802dbd8 <memset>
 802d9b8:	4620      	mov	r0, r4
 802d9ba:	bd70      	pop	{r4, r5, r6, pc}

0802d9bc <__sfp_lock_acquire>:
 802d9bc:	4801      	ldr	r0, [pc, #4]	; (802d9c4 <__sfp_lock_acquire+0x8>)
 802d9be:	f000 b8ea 	b.w	802db96 <__retarget_lock_acquire_recursive>
 802d9c2:	bf00      	nop
 802d9c4:	2000f26a 	.word	0x2000f26a

0802d9c8 <__sfp_lock_release>:
 802d9c8:	4801      	ldr	r0, [pc, #4]	; (802d9d0 <__sfp_lock_release+0x8>)
 802d9ca:	f000 b8e6 	b.w	802db9a <__retarget_lock_release_recursive>
 802d9ce:	bf00      	nop
 802d9d0:	2000f26a 	.word	0x2000f26a

0802d9d4 <__sinit_lock_acquire>:
 802d9d4:	4801      	ldr	r0, [pc, #4]	; (802d9dc <__sinit_lock_acquire+0x8>)
 802d9d6:	f000 b8de 	b.w	802db96 <__retarget_lock_acquire_recursive>
 802d9da:	bf00      	nop
 802d9dc:	2000f26b 	.word	0x2000f26b

0802d9e0 <__sinit_lock_release>:
 802d9e0:	4801      	ldr	r0, [pc, #4]	; (802d9e8 <__sinit_lock_release+0x8>)
 802d9e2:	f000 b8da 	b.w	802db9a <__retarget_lock_release_recursive>
 802d9e6:	bf00      	nop
 802d9e8:	2000f26b 	.word	0x2000f26b

0802d9ec <__sinit>:
 802d9ec:	b510      	push	{r4, lr}
 802d9ee:	4604      	mov	r4, r0
 802d9f0:	f7ff fff0 	bl	802d9d4 <__sinit_lock_acquire>
 802d9f4:	69a3      	ldr	r3, [r4, #24]
 802d9f6:	b11b      	cbz	r3, 802da00 <__sinit+0x14>
 802d9f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d9fc:	f7ff bff0 	b.w	802d9e0 <__sinit_lock_release>
 802da00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802da04:	6523      	str	r3, [r4, #80]	; 0x50
 802da06:	4b13      	ldr	r3, [pc, #76]	; (802da54 <__sinit+0x68>)
 802da08:	4a13      	ldr	r2, [pc, #76]	; (802da58 <__sinit+0x6c>)
 802da0a:	681b      	ldr	r3, [r3, #0]
 802da0c:	62a2      	str	r2, [r4, #40]	; 0x28
 802da0e:	42a3      	cmp	r3, r4
 802da10:	bf04      	itt	eq
 802da12:	2301      	moveq	r3, #1
 802da14:	61a3      	streq	r3, [r4, #24]
 802da16:	4620      	mov	r0, r4
 802da18:	f000 f820 	bl	802da5c <__sfp>
 802da1c:	6060      	str	r0, [r4, #4]
 802da1e:	4620      	mov	r0, r4
 802da20:	f000 f81c 	bl	802da5c <__sfp>
 802da24:	60a0      	str	r0, [r4, #8]
 802da26:	4620      	mov	r0, r4
 802da28:	f000 f818 	bl	802da5c <__sfp>
 802da2c:	2200      	movs	r2, #0
 802da2e:	60e0      	str	r0, [r4, #12]
 802da30:	2104      	movs	r1, #4
 802da32:	6860      	ldr	r0, [r4, #4]
 802da34:	f7ff ff82 	bl	802d93c <std>
 802da38:	68a0      	ldr	r0, [r4, #8]
 802da3a:	2201      	movs	r2, #1
 802da3c:	2109      	movs	r1, #9
 802da3e:	f7ff ff7d 	bl	802d93c <std>
 802da42:	68e0      	ldr	r0, [r4, #12]
 802da44:	2202      	movs	r2, #2
 802da46:	2112      	movs	r1, #18
 802da48:	f7ff ff78 	bl	802d93c <std>
 802da4c:	2301      	movs	r3, #1
 802da4e:	61a3      	str	r3, [r4, #24]
 802da50:	e7d2      	b.n	802d9f8 <__sinit+0xc>
 802da52:	bf00      	nop
 802da54:	08030ee0 	.word	0x08030ee0
 802da58:	0802d985 	.word	0x0802d985

0802da5c <__sfp>:
 802da5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802da5e:	4607      	mov	r7, r0
 802da60:	f7ff ffac 	bl	802d9bc <__sfp_lock_acquire>
 802da64:	4b1e      	ldr	r3, [pc, #120]	; (802dae0 <__sfp+0x84>)
 802da66:	681e      	ldr	r6, [r3, #0]
 802da68:	69b3      	ldr	r3, [r6, #24]
 802da6a:	b913      	cbnz	r3, 802da72 <__sfp+0x16>
 802da6c:	4630      	mov	r0, r6
 802da6e:	f7ff ffbd 	bl	802d9ec <__sinit>
 802da72:	3648      	adds	r6, #72	; 0x48
 802da74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802da78:	3b01      	subs	r3, #1
 802da7a:	d503      	bpl.n	802da84 <__sfp+0x28>
 802da7c:	6833      	ldr	r3, [r6, #0]
 802da7e:	b30b      	cbz	r3, 802dac4 <__sfp+0x68>
 802da80:	6836      	ldr	r6, [r6, #0]
 802da82:	e7f7      	b.n	802da74 <__sfp+0x18>
 802da84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802da88:	b9d5      	cbnz	r5, 802dac0 <__sfp+0x64>
 802da8a:	4b16      	ldr	r3, [pc, #88]	; (802dae4 <__sfp+0x88>)
 802da8c:	60e3      	str	r3, [r4, #12]
 802da8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802da92:	6665      	str	r5, [r4, #100]	; 0x64
 802da94:	f000 f87e 	bl	802db94 <__retarget_lock_init_recursive>
 802da98:	f7ff ff96 	bl	802d9c8 <__sfp_lock_release>
 802da9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802daa0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802daa4:	6025      	str	r5, [r4, #0]
 802daa6:	61a5      	str	r5, [r4, #24]
 802daa8:	2208      	movs	r2, #8
 802daaa:	4629      	mov	r1, r5
 802daac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802dab0:	f000 f892 	bl	802dbd8 <memset>
 802dab4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802dab8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802dabc:	4620      	mov	r0, r4
 802dabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802dac0:	3468      	adds	r4, #104	; 0x68
 802dac2:	e7d9      	b.n	802da78 <__sfp+0x1c>
 802dac4:	2104      	movs	r1, #4
 802dac6:	4638      	mov	r0, r7
 802dac8:	f7ff ff62 	bl	802d990 <__sfmoreglue>
 802dacc:	4604      	mov	r4, r0
 802dace:	6030      	str	r0, [r6, #0]
 802dad0:	2800      	cmp	r0, #0
 802dad2:	d1d5      	bne.n	802da80 <__sfp+0x24>
 802dad4:	f7ff ff78 	bl	802d9c8 <__sfp_lock_release>
 802dad8:	230c      	movs	r3, #12
 802dada:	603b      	str	r3, [r7, #0]
 802dadc:	e7ee      	b.n	802dabc <__sfp+0x60>
 802dade:	bf00      	nop
 802dae0:	08030ee0 	.word	0x08030ee0
 802dae4:	ffff0001 	.word	0xffff0001

0802dae8 <fiprintf>:
 802dae8:	b40e      	push	{r1, r2, r3}
 802daea:	b503      	push	{r0, r1, lr}
 802daec:	4601      	mov	r1, r0
 802daee:	ab03      	add	r3, sp, #12
 802daf0:	4805      	ldr	r0, [pc, #20]	; (802db08 <fiprintf+0x20>)
 802daf2:	f853 2b04 	ldr.w	r2, [r3], #4
 802daf6:	6800      	ldr	r0, [r0, #0]
 802daf8:	9301      	str	r3, [sp, #4]
 802dafa:	f000 f97f 	bl	802ddfc <_vfiprintf_r>
 802dafe:	b002      	add	sp, #8
 802db00:	f85d eb04 	ldr.w	lr, [sp], #4
 802db04:	b003      	add	sp, #12
 802db06:	4770      	bx	lr
 802db08:	20000098 	.word	0x20000098

0802db0c <_fwalk_reent>:
 802db0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802db10:	4606      	mov	r6, r0
 802db12:	4688      	mov	r8, r1
 802db14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802db18:	2700      	movs	r7, #0
 802db1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802db1e:	f1b9 0901 	subs.w	r9, r9, #1
 802db22:	d505      	bpl.n	802db30 <_fwalk_reent+0x24>
 802db24:	6824      	ldr	r4, [r4, #0]
 802db26:	2c00      	cmp	r4, #0
 802db28:	d1f7      	bne.n	802db1a <_fwalk_reent+0xe>
 802db2a:	4638      	mov	r0, r7
 802db2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802db30:	89ab      	ldrh	r3, [r5, #12]
 802db32:	2b01      	cmp	r3, #1
 802db34:	d907      	bls.n	802db46 <_fwalk_reent+0x3a>
 802db36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802db3a:	3301      	adds	r3, #1
 802db3c:	d003      	beq.n	802db46 <_fwalk_reent+0x3a>
 802db3e:	4629      	mov	r1, r5
 802db40:	4630      	mov	r0, r6
 802db42:	47c0      	blx	r8
 802db44:	4307      	orrs	r7, r0
 802db46:	3568      	adds	r5, #104	; 0x68
 802db48:	e7e9      	b.n	802db1e <_fwalk_reent+0x12>
	...

0802db4c <__libc_init_array>:
 802db4c:	b570      	push	{r4, r5, r6, lr}
 802db4e:	4d0d      	ldr	r5, [pc, #52]	; (802db84 <__libc_init_array+0x38>)
 802db50:	4c0d      	ldr	r4, [pc, #52]	; (802db88 <__libc_init_array+0x3c>)
 802db52:	1b64      	subs	r4, r4, r5
 802db54:	10a4      	asrs	r4, r4, #2
 802db56:	2600      	movs	r6, #0
 802db58:	42a6      	cmp	r6, r4
 802db5a:	d109      	bne.n	802db70 <__libc_init_array+0x24>
 802db5c:	4d0b      	ldr	r5, [pc, #44]	; (802db8c <__libc_init_array+0x40>)
 802db5e:	4c0c      	ldr	r4, [pc, #48]	; (802db90 <__libc_init_array+0x44>)
 802db60:	f000 ffd0 	bl	802eb04 <_init>
 802db64:	1b64      	subs	r4, r4, r5
 802db66:	10a4      	asrs	r4, r4, #2
 802db68:	2600      	movs	r6, #0
 802db6a:	42a6      	cmp	r6, r4
 802db6c:	d105      	bne.n	802db7a <__libc_init_array+0x2e>
 802db6e:	bd70      	pop	{r4, r5, r6, pc}
 802db70:	f855 3b04 	ldr.w	r3, [r5], #4
 802db74:	4798      	blx	r3
 802db76:	3601      	adds	r6, #1
 802db78:	e7ee      	b.n	802db58 <__libc_init_array+0xc>
 802db7a:	f855 3b04 	ldr.w	r3, [r5], #4
 802db7e:	4798      	blx	r3
 802db80:	3601      	adds	r6, #1
 802db82:	e7f2      	b.n	802db6a <__libc_init_array+0x1e>
 802db84:	0803d958 	.word	0x0803d958
 802db88:	0803d958 	.word	0x0803d958
 802db8c:	0803d958 	.word	0x0803d958
 802db90:	0803d96c 	.word	0x0803d96c

0802db94 <__retarget_lock_init_recursive>:
 802db94:	4770      	bx	lr

0802db96 <__retarget_lock_acquire_recursive>:
 802db96:	4770      	bx	lr

0802db98 <__retarget_lock_release>:
 802db98:	4770      	bx	lr

0802db9a <__retarget_lock_release_recursive>:
 802db9a:	4770      	bx	lr

0802db9c <malloc>:
 802db9c:	4b02      	ldr	r3, [pc, #8]	; (802dba8 <malloc+0xc>)
 802db9e:	4601      	mov	r1, r0
 802dba0:	6818      	ldr	r0, [r3, #0]
 802dba2:	f000 b88d 	b.w	802dcc0 <_malloc_r>
 802dba6:	bf00      	nop
 802dba8:	20000098 	.word	0x20000098

0802dbac <free>:
 802dbac:	4b02      	ldr	r3, [pc, #8]	; (802dbb8 <free+0xc>)
 802dbae:	4601      	mov	r1, r0
 802dbb0:	6818      	ldr	r0, [r3, #0]
 802dbb2:	f000 b819 	b.w	802dbe8 <_free_r>
 802dbb6:	bf00      	nop
 802dbb8:	20000098 	.word	0x20000098

0802dbbc <memcpy>:
 802dbbc:	440a      	add	r2, r1
 802dbbe:	4291      	cmp	r1, r2
 802dbc0:	f100 33ff 	add.w	r3, r0, #4294967295
 802dbc4:	d100      	bne.n	802dbc8 <memcpy+0xc>
 802dbc6:	4770      	bx	lr
 802dbc8:	b510      	push	{r4, lr}
 802dbca:	f811 4b01 	ldrb.w	r4, [r1], #1
 802dbce:	f803 4f01 	strb.w	r4, [r3, #1]!
 802dbd2:	4291      	cmp	r1, r2
 802dbd4:	d1f9      	bne.n	802dbca <memcpy+0xe>
 802dbd6:	bd10      	pop	{r4, pc}

0802dbd8 <memset>:
 802dbd8:	4402      	add	r2, r0
 802dbda:	4603      	mov	r3, r0
 802dbdc:	4293      	cmp	r3, r2
 802dbde:	d100      	bne.n	802dbe2 <memset+0xa>
 802dbe0:	4770      	bx	lr
 802dbe2:	f803 1b01 	strb.w	r1, [r3], #1
 802dbe6:	e7f9      	b.n	802dbdc <memset+0x4>

0802dbe8 <_free_r>:
 802dbe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802dbea:	2900      	cmp	r1, #0
 802dbec:	d044      	beq.n	802dc78 <_free_r+0x90>
 802dbee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802dbf2:	9001      	str	r0, [sp, #4]
 802dbf4:	2b00      	cmp	r3, #0
 802dbf6:	f1a1 0404 	sub.w	r4, r1, #4
 802dbfa:	bfb8      	it	lt
 802dbfc:	18e4      	addlt	r4, r4, r3
 802dbfe:	f000 ff41 	bl	802ea84 <__malloc_lock>
 802dc02:	4a1e      	ldr	r2, [pc, #120]	; (802dc7c <_free_r+0x94>)
 802dc04:	9801      	ldr	r0, [sp, #4]
 802dc06:	6813      	ldr	r3, [r2, #0]
 802dc08:	b933      	cbnz	r3, 802dc18 <_free_r+0x30>
 802dc0a:	6063      	str	r3, [r4, #4]
 802dc0c:	6014      	str	r4, [r2, #0]
 802dc0e:	b003      	add	sp, #12
 802dc10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802dc14:	f000 bf3c 	b.w	802ea90 <__malloc_unlock>
 802dc18:	42a3      	cmp	r3, r4
 802dc1a:	d908      	bls.n	802dc2e <_free_r+0x46>
 802dc1c:	6825      	ldr	r5, [r4, #0]
 802dc1e:	1961      	adds	r1, r4, r5
 802dc20:	428b      	cmp	r3, r1
 802dc22:	bf01      	itttt	eq
 802dc24:	6819      	ldreq	r1, [r3, #0]
 802dc26:	685b      	ldreq	r3, [r3, #4]
 802dc28:	1949      	addeq	r1, r1, r5
 802dc2a:	6021      	streq	r1, [r4, #0]
 802dc2c:	e7ed      	b.n	802dc0a <_free_r+0x22>
 802dc2e:	461a      	mov	r2, r3
 802dc30:	685b      	ldr	r3, [r3, #4]
 802dc32:	b10b      	cbz	r3, 802dc38 <_free_r+0x50>
 802dc34:	42a3      	cmp	r3, r4
 802dc36:	d9fa      	bls.n	802dc2e <_free_r+0x46>
 802dc38:	6811      	ldr	r1, [r2, #0]
 802dc3a:	1855      	adds	r5, r2, r1
 802dc3c:	42a5      	cmp	r5, r4
 802dc3e:	d10b      	bne.n	802dc58 <_free_r+0x70>
 802dc40:	6824      	ldr	r4, [r4, #0]
 802dc42:	4421      	add	r1, r4
 802dc44:	1854      	adds	r4, r2, r1
 802dc46:	42a3      	cmp	r3, r4
 802dc48:	6011      	str	r1, [r2, #0]
 802dc4a:	d1e0      	bne.n	802dc0e <_free_r+0x26>
 802dc4c:	681c      	ldr	r4, [r3, #0]
 802dc4e:	685b      	ldr	r3, [r3, #4]
 802dc50:	6053      	str	r3, [r2, #4]
 802dc52:	4421      	add	r1, r4
 802dc54:	6011      	str	r1, [r2, #0]
 802dc56:	e7da      	b.n	802dc0e <_free_r+0x26>
 802dc58:	d902      	bls.n	802dc60 <_free_r+0x78>
 802dc5a:	230c      	movs	r3, #12
 802dc5c:	6003      	str	r3, [r0, #0]
 802dc5e:	e7d6      	b.n	802dc0e <_free_r+0x26>
 802dc60:	6825      	ldr	r5, [r4, #0]
 802dc62:	1961      	adds	r1, r4, r5
 802dc64:	428b      	cmp	r3, r1
 802dc66:	bf04      	itt	eq
 802dc68:	6819      	ldreq	r1, [r3, #0]
 802dc6a:	685b      	ldreq	r3, [r3, #4]
 802dc6c:	6063      	str	r3, [r4, #4]
 802dc6e:	bf04      	itt	eq
 802dc70:	1949      	addeq	r1, r1, r5
 802dc72:	6021      	streq	r1, [r4, #0]
 802dc74:	6054      	str	r4, [r2, #4]
 802dc76:	e7ca      	b.n	802dc0e <_free_r+0x26>
 802dc78:	b003      	add	sp, #12
 802dc7a:	bd30      	pop	{r4, r5, pc}
 802dc7c:	2000f26c 	.word	0x2000f26c

0802dc80 <sbrk_aligned>:
 802dc80:	b570      	push	{r4, r5, r6, lr}
 802dc82:	4e0e      	ldr	r6, [pc, #56]	; (802dcbc <sbrk_aligned+0x3c>)
 802dc84:	460c      	mov	r4, r1
 802dc86:	6831      	ldr	r1, [r6, #0]
 802dc88:	4605      	mov	r5, r0
 802dc8a:	b911      	cbnz	r1, 802dc92 <sbrk_aligned+0x12>
 802dc8c:	f000 fbe4 	bl	802e458 <_sbrk_r>
 802dc90:	6030      	str	r0, [r6, #0]
 802dc92:	4621      	mov	r1, r4
 802dc94:	4628      	mov	r0, r5
 802dc96:	f000 fbdf 	bl	802e458 <_sbrk_r>
 802dc9a:	1c43      	adds	r3, r0, #1
 802dc9c:	d00a      	beq.n	802dcb4 <sbrk_aligned+0x34>
 802dc9e:	1cc4      	adds	r4, r0, #3
 802dca0:	f024 0403 	bic.w	r4, r4, #3
 802dca4:	42a0      	cmp	r0, r4
 802dca6:	d007      	beq.n	802dcb8 <sbrk_aligned+0x38>
 802dca8:	1a21      	subs	r1, r4, r0
 802dcaa:	4628      	mov	r0, r5
 802dcac:	f000 fbd4 	bl	802e458 <_sbrk_r>
 802dcb0:	3001      	adds	r0, #1
 802dcb2:	d101      	bne.n	802dcb8 <sbrk_aligned+0x38>
 802dcb4:	f04f 34ff 	mov.w	r4, #4294967295
 802dcb8:	4620      	mov	r0, r4
 802dcba:	bd70      	pop	{r4, r5, r6, pc}
 802dcbc:	2000f270 	.word	0x2000f270

0802dcc0 <_malloc_r>:
 802dcc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802dcc4:	1ccd      	adds	r5, r1, #3
 802dcc6:	f025 0503 	bic.w	r5, r5, #3
 802dcca:	3508      	adds	r5, #8
 802dccc:	2d0c      	cmp	r5, #12
 802dcce:	bf38      	it	cc
 802dcd0:	250c      	movcc	r5, #12
 802dcd2:	2d00      	cmp	r5, #0
 802dcd4:	4607      	mov	r7, r0
 802dcd6:	db01      	blt.n	802dcdc <_malloc_r+0x1c>
 802dcd8:	42a9      	cmp	r1, r5
 802dcda:	d905      	bls.n	802dce8 <_malloc_r+0x28>
 802dcdc:	230c      	movs	r3, #12
 802dcde:	603b      	str	r3, [r7, #0]
 802dce0:	2600      	movs	r6, #0
 802dce2:	4630      	mov	r0, r6
 802dce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802dce8:	4e2e      	ldr	r6, [pc, #184]	; (802dda4 <_malloc_r+0xe4>)
 802dcea:	f000 fecb 	bl	802ea84 <__malloc_lock>
 802dcee:	6833      	ldr	r3, [r6, #0]
 802dcf0:	461c      	mov	r4, r3
 802dcf2:	bb34      	cbnz	r4, 802dd42 <_malloc_r+0x82>
 802dcf4:	4629      	mov	r1, r5
 802dcf6:	4638      	mov	r0, r7
 802dcf8:	f7ff ffc2 	bl	802dc80 <sbrk_aligned>
 802dcfc:	1c43      	adds	r3, r0, #1
 802dcfe:	4604      	mov	r4, r0
 802dd00:	d14d      	bne.n	802dd9e <_malloc_r+0xde>
 802dd02:	6834      	ldr	r4, [r6, #0]
 802dd04:	4626      	mov	r6, r4
 802dd06:	2e00      	cmp	r6, #0
 802dd08:	d140      	bne.n	802dd8c <_malloc_r+0xcc>
 802dd0a:	6823      	ldr	r3, [r4, #0]
 802dd0c:	4631      	mov	r1, r6
 802dd0e:	4638      	mov	r0, r7
 802dd10:	eb04 0803 	add.w	r8, r4, r3
 802dd14:	f000 fba0 	bl	802e458 <_sbrk_r>
 802dd18:	4580      	cmp	r8, r0
 802dd1a:	d13a      	bne.n	802dd92 <_malloc_r+0xd2>
 802dd1c:	6821      	ldr	r1, [r4, #0]
 802dd1e:	3503      	adds	r5, #3
 802dd20:	1a6d      	subs	r5, r5, r1
 802dd22:	f025 0503 	bic.w	r5, r5, #3
 802dd26:	3508      	adds	r5, #8
 802dd28:	2d0c      	cmp	r5, #12
 802dd2a:	bf38      	it	cc
 802dd2c:	250c      	movcc	r5, #12
 802dd2e:	4629      	mov	r1, r5
 802dd30:	4638      	mov	r0, r7
 802dd32:	f7ff ffa5 	bl	802dc80 <sbrk_aligned>
 802dd36:	3001      	adds	r0, #1
 802dd38:	d02b      	beq.n	802dd92 <_malloc_r+0xd2>
 802dd3a:	6823      	ldr	r3, [r4, #0]
 802dd3c:	442b      	add	r3, r5
 802dd3e:	6023      	str	r3, [r4, #0]
 802dd40:	e00e      	b.n	802dd60 <_malloc_r+0xa0>
 802dd42:	6822      	ldr	r2, [r4, #0]
 802dd44:	1b52      	subs	r2, r2, r5
 802dd46:	d41e      	bmi.n	802dd86 <_malloc_r+0xc6>
 802dd48:	2a0b      	cmp	r2, #11
 802dd4a:	d916      	bls.n	802dd7a <_malloc_r+0xba>
 802dd4c:	1961      	adds	r1, r4, r5
 802dd4e:	42a3      	cmp	r3, r4
 802dd50:	6025      	str	r5, [r4, #0]
 802dd52:	bf18      	it	ne
 802dd54:	6059      	strne	r1, [r3, #4]
 802dd56:	6863      	ldr	r3, [r4, #4]
 802dd58:	bf08      	it	eq
 802dd5a:	6031      	streq	r1, [r6, #0]
 802dd5c:	5162      	str	r2, [r4, r5]
 802dd5e:	604b      	str	r3, [r1, #4]
 802dd60:	4638      	mov	r0, r7
 802dd62:	f104 060b 	add.w	r6, r4, #11
 802dd66:	f000 fe93 	bl	802ea90 <__malloc_unlock>
 802dd6a:	f026 0607 	bic.w	r6, r6, #7
 802dd6e:	1d23      	adds	r3, r4, #4
 802dd70:	1af2      	subs	r2, r6, r3
 802dd72:	d0b6      	beq.n	802dce2 <_malloc_r+0x22>
 802dd74:	1b9b      	subs	r3, r3, r6
 802dd76:	50a3      	str	r3, [r4, r2]
 802dd78:	e7b3      	b.n	802dce2 <_malloc_r+0x22>
 802dd7a:	6862      	ldr	r2, [r4, #4]
 802dd7c:	42a3      	cmp	r3, r4
 802dd7e:	bf0c      	ite	eq
 802dd80:	6032      	streq	r2, [r6, #0]
 802dd82:	605a      	strne	r2, [r3, #4]
 802dd84:	e7ec      	b.n	802dd60 <_malloc_r+0xa0>
 802dd86:	4623      	mov	r3, r4
 802dd88:	6864      	ldr	r4, [r4, #4]
 802dd8a:	e7b2      	b.n	802dcf2 <_malloc_r+0x32>
 802dd8c:	4634      	mov	r4, r6
 802dd8e:	6876      	ldr	r6, [r6, #4]
 802dd90:	e7b9      	b.n	802dd06 <_malloc_r+0x46>
 802dd92:	230c      	movs	r3, #12
 802dd94:	603b      	str	r3, [r7, #0]
 802dd96:	4638      	mov	r0, r7
 802dd98:	f000 fe7a 	bl	802ea90 <__malloc_unlock>
 802dd9c:	e7a1      	b.n	802dce2 <_malloc_r+0x22>
 802dd9e:	6025      	str	r5, [r4, #0]
 802dda0:	e7de      	b.n	802dd60 <_malloc_r+0xa0>
 802dda2:	bf00      	nop
 802dda4:	2000f26c 	.word	0x2000f26c

0802dda8 <__sfputc_r>:
 802dda8:	6893      	ldr	r3, [r2, #8]
 802ddaa:	3b01      	subs	r3, #1
 802ddac:	2b00      	cmp	r3, #0
 802ddae:	b410      	push	{r4}
 802ddb0:	6093      	str	r3, [r2, #8]
 802ddb2:	da08      	bge.n	802ddc6 <__sfputc_r+0x1e>
 802ddb4:	6994      	ldr	r4, [r2, #24]
 802ddb6:	42a3      	cmp	r3, r4
 802ddb8:	db01      	blt.n	802ddbe <__sfputc_r+0x16>
 802ddba:	290a      	cmp	r1, #10
 802ddbc:	d103      	bne.n	802ddc6 <__sfputc_r+0x1e>
 802ddbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ddc2:	f000 bbe1 	b.w	802e588 <__swbuf_r>
 802ddc6:	6813      	ldr	r3, [r2, #0]
 802ddc8:	1c58      	adds	r0, r3, #1
 802ddca:	6010      	str	r0, [r2, #0]
 802ddcc:	7019      	strb	r1, [r3, #0]
 802ddce:	4608      	mov	r0, r1
 802ddd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ddd4:	4770      	bx	lr

0802ddd6 <__sfputs_r>:
 802ddd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ddd8:	4606      	mov	r6, r0
 802ddda:	460f      	mov	r7, r1
 802dddc:	4614      	mov	r4, r2
 802ddde:	18d5      	adds	r5, r2, r3
 802dde0:	42ac      	cmp	r4, r5
 802dde2:	d101      	bne.n	802dde8 <__sfputs_r+0x12>
 802dde4:	2000      	movs	r0, #0
 802dde6:	e007      	b.n	802ddf8 <__sfputs_r+0x22>
 802dde8:	f814 1b01 	ldrb.w	r1, [r4], #1
 802ddec:	463a      	mov	r2, r7
 802ddee:	4630      	mov	r0, r6
 802ddf0:	f7ff ffda 	bl	802dda8 <__sfputc_r>
 802ddf4:	1c43      	adds	r3, r0, #1
 802ddf6:	d1f3      	bne.n	802dde0 <__sfputs_r+0xa>
 802ddf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802ddfc <_vfiprintf_r>:
 802ddfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802de00:	460d      	mov	r5, r1
 802de02:	b09d      	sub	sp, #116	; 0x74
 802de04:	4614      	mov	r4, r2
 802de06:	4698      	mov	r8, r3
 802de08:	4606      	mov	r6, r0
 802de0a:	b118      	cbz	r0, 802de14 <_vfiprintf_r+0x18>
 802de0c:	6983      	ldr	r3, [r0, #24]
 802de0e:	b90b      	cbnz	r3, 802de14 <_vfiprintf_r+0x18>
 802de10:	f7ff fdec 	bl	802d9ec <__sinit>
 802de14:	4b89      	ldr	r3, [pc, #548]	; (802e03c <_vfiprintf_r+0x240>)
 802de16:	429d      	cmp	r5, r3
 802de18:	d11b      	bne.n	802de52 <_vfiprintf_r+0x56>
 802de1a:	6875      	ldr	r5, [r6, #4]
 802de1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802de1e:	07d9      	lsls	r1, r3, #31
 802de20:	d405      	bmi.n	802de2e <_vfiprintf_r+0x32>
 802de22:	89ab      	ldrh	r3, [r5, #12]
 802de24:	059a      	lsls	r2, r3, #22
 802de26:	d402      	bmi.n	802de2e <_vfiprintf_r+0x32>
 802de28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802de2a:	f7ff feb4 	bl	802db96 <__retarget_lock_acquire_recursive>
 802de2e:	89ab      	ldrh	r3, [r5, #12]
 802de30:	071b      	lsls	r3, r3, #28
 802de32:	d501      	bpl.n	802de38 <_vfiprintf_r+0x3c>
 802de34:	692b      	ldr	r3, [r5, #16]
 802de36:	b9eb      	cbnz	r3, 802de74 <_vfiprintf_r+0x78>
 802de38:	4629      	mov	r1, r5
 802de3a:	4630      	mov	r0, r6
 802de3c:	f000 fc08 	bl	802e650 <__swsetup_r>
 802de40:	b1c0      	cbz	r0, 802de74 <_vfiprintf_r+0x78>
 802de42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802de44:	07dc      	lsls	r4, r3, #31
 802de46:	d50e      	bpl.n	802de66 <_vfiprintf_r+0x6a>
 802de48:	f04f 30ff 	mov.w	r0, #4294967295
 802de4c:	b01d      	add	sp, #116	; 0x74
 802de4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802de52:	4b7b      	ldr	r3, [pc, #492]	; (802e040 <_vfiprintf_r+0x244>)
 802de54:	429d      	cmp	r5, r3
 802de56:	d101      	bne.n	802de5c <_vfiprintf_r+0x60>
 802de58:	68b5      	ldr	r5, [r6, #8]
 802de5a:	e7df      	b.n	802de1c <_vfiprintf_r+0x20>
 802de5c:	4b79      	ldr	r3, [pc, #484]	; (802e044 <_vfiprintf_r+0x248>)
 802de5e:	429d      	cmp	r5, r3
 802de60:	bf08      	it	eq
 802de62:	68f5      	ldreq	r5, [r6, #12]
 802de64:	e7da      	b.n	802de1c <_vfiprintf_r+0x20>
 802de66:	89ab      	ldrh	r3, [r5, #12]
 802de68:	0598      	lsls	r0, r3, #22
 802de6a:	d4ed      	bmi.n	802de48 <_vfiprintf_r+0x4c>
 802de6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802de6e:	f7ff fe94 	bl	802db9a <__retarget_lock_release_recursive>
 802de72:	e7e9      	b.n	802de48 <_vfiprintf_r+0x4c>
 802de74:	2300      	movs	r3, #0
 802de76:	9309      	str	r3, [sp, #36]	; 0x24
 802de78:	2320      	movs	r3, #32
 802de7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802de7e:	f8cd 800c 	str.w	r8, [sp, #12]
 802de82:	2330      	movs	r3, #48	; 0x30
 802de84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802e048 <_vfiprintf_r+0x24c>
 802de88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802de8c:	f04f 0901 	mov.w	r9, #1
 802de90:	4623      	mov	r3, r4
 802de92:	469a      	mov	sl, r3
 802de94:	f813 2b01 	ldrb.w	r2, [r3], #1
 802de98:	b10a      	cbz	r2, 802de9e <_vfiprintf_r+0xa2>
 802de9a:	2a25      	cmp	r2, #37	; 0x25
 802de9c:	d1f9      	bne.n	802de92 <_vfiprintf_r+0x96>
 802de9e:	ebba 0b04 	subs.w	fp, sl, r4
 802dea2:	d00b      	beq.n	802debc <_vfiprintf_r+0xc0>
 802dea4:	465b      	mov	r3, fp
 802dea6:	4622      	mov	r2, r4
 802dea8:	4629      	mov	r1, r5
 802deaa:	4630      	mov	r0, r6
 802deac:	f7ff ff93 	bl	802ddd6 <__sfputs_r>
 802deb0:	3001      	adds	r0, #1
 802deb2:	f000 80aa 	beq.w	802e00a <_vfiprintf_r+0x20e>
 802deb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802deb8:	445a      	add	r2, fp
 802deba:	9209      	str	r2, [sp, #36]	; 0x24
 802debc:	f89a 3000 	ldrb.w	r3, [sl]
 802dec0:	2b00      	cmp	r3, #0
 802dec2:	f000 80a2 	beq.w	802e00a <_vfiprintf_r+0x20e>
 802dec6:	2300      	movs	r3, #0
 802dec8:	f04f 32ff 	mov.w	r2, #4294967295
 802decc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802ded0:	f10a 0a01 	add.w	sl, sl, #1
 802ded4:	9304      	str	r3, [sp, #16]
 802ded6:	9307      	str	r3, [sp, #28]
 802ded8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802dedc:	931a      	str	r3, [sp, #104]	; 0x68
 802dede:	4654      	mov	r4, sl
 802dee0:	2205      	movs	r2, #5
 802dee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 802dee6:	4858      	ldr	r0, [pc, #352]	; (802e048 <_vfiprintf_r+0x24c>)
 802dee8:	f7d2 f982 	bl	80001f0 <memchr>
 802deec:	9a04      	ldr	r2, [sp, #16]
 802deee:	b9d8      	cbnz	r0, 802df28 <_vfiprintf_r+0x12c>
 802def0:	06d1      	lsls	r1, r2, #27
 802def2:	bf44      	itt	mi
 802def4:	2320      	movmi	r3, #32
 802def6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802defa:	0713      	lsls	r3, r2, #28
 802defc:	bf44      	itt	mi
 802defe:	232b      	movmi	r3, #43	; 0x2b
 802df00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802df04:	f89a 3000 	ldrb.w	r3, [sl]
 802df08:	2b2a      	cmp	r3, #42	; 0x2a
 802df0a:	d015      	beq.n	802df38 <_vfiprintf_r+0x13c>
 802df0c:	9a07      	ldr	r2, [sp, #28]
 802df0e:	4654      	mov	r4, sl
 802df10:	2000      	movs	r0, #0
 802df12:	f04f 0c0a 	mov.w	ip, #10
 802df16:	4621      	mov	r1, r4
 802df18:	f811 3b01 	ldrb.w	r3, [r1], #1
 802df1c:	3b30      	subs	r3, #48	; 0x30
 802df1e:	2b09      	cmp	r3, #9
 802df20:	d94e      	bls.n	802dfc0 <_vfiprintf_r+0x1c4>
 802df22:	b1b0      	cbz	r0, 802df52 <_vfiprintf_r+0x156>
 802df24:	9207      	str	r2, [sp, #28]
 802df26:	e014      	b.n	802df52 <_vfiprintf_r+0x156>
 802df28:	eba0 0308 	sub.w	r3, r0, r8
 802df2c:	fa09 f303 	lsl.w	r3, r9, r3
 802df30:	4313      	orrs	r3, r2
 802df32:	9304      	str	r3, [sp, #16]
 802df34:	46a2      	mov	sl, r4
 802df36:	e7d2      	b.n	802dede <_vfiprintf_r+0xe2>
 802df38:	9b03      	ldr	r3, [sp, #12]
 802df3a:	1d19      	adds	r1, r3, #4
 802df3c:	681b      	ldr	r3, [r3, #0]
 802df3e:	9103      	str	r1, [sp, #12]
 802df40:	2b00      	cmp	r3, #0
 802df42:	bfbb      	ittet	lt
 802df44:	425b      	neglt	r3, r3
 802df46:	f042 0202 	orrlt.w	r2, r2, #2
 802df4a:	9307      	strge	r3, [sp, #28]
 802df4c:	9307      	strlt	r3, [sp, #28]
 802df4e:	bfb8      	it	lt
 802df50:	9204      	strlt	r2, [sp, #16]
 802df52:	7823      	ldrb	r3, [r4, #0]
 802df54:	2b2e      	cmp	r3, #46	; 0x2e
 802df56:	d10c      	bne.n	802df72 <_vfiprintf_r+0x176>
 802df58:	7863      	ldrb	r3, [r4, #1]
 802df5a:	2b2a      	cmp	r3, #42	; 0x2a
 802df5c:	d135      	bne.n	802dfca <_vfiprintf_r+0x1ce>
 802df5e:	9b03      	ldr	r3, [sp, #12]
 802df60:	1d1a      	adds	r2, r3, #4
 802df62:	681b      	ldr	r3, [r3, #0]
 802df64:	9203      	str	r2, [sp, #12]
 802df66:	2b00      	cmp	r3, #0
 802df68:	bfb8      	it	lt
 802df6a:	f04f 33ff 	movlt.w	r3, #4294967295
 802df6e:	3402      	adds	r4, #2
 802df70:	9305      	str	r3, [sp, #20]
 802df72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802e058 <_vfiprintf_r+0x25c>
 802df76:	7821      	ldrb	r1, [r4, #0]
 802df78:	2203      	movs	r2, #3
 802df7a:	4650      	mov	r0, sl
 802df7c:	f7d2 f938 	bl	80001f0 <memchr>
 802df80:	b140      	cbz	r0, 802df94 <_vfiprintf_r+0x198>
 802df82:	2340      	movs	r3, #64	; 0x40
 802df84:	eba0 000a 	sub.w	r0, r0, sl
 802df88:	fa03 f000 	lsl.w	r0, r3, r0
 802df8c:	9b04      	ldr	r3, [sp, #16]
 802df8e:	4303      	orrs	r3, r0
 802df90:	3401      	adds	r4, #1
 802df92:	9304      	str	r3, [sp, #16]
 802df94:	f814 1b01 	ldrb.w	r1, [r4], #1
 802df98:	482c      	ldr	r0, [pc, #176]	; (802e04c <_vfiprintf_r+0x250>)
 802df9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802df9e:	2206      	movs	r2, #6
 802dfa0:	f7d2 f926 	bl	80001f0 <memchr>
 802dfa4:	2800      	cmp	r0, #0
 802dfa6:	d03f      	beq.n	802e028 <_vfiprintf_r+0x22c>
 802dfa8:	4b29      	ldr	r3, [pc, #164]	; (802e050 <_vfiprintf_r+0x254>)
 802dfaa:	bb1b      	cbnz	r3, 802dff4 <_vfiprintf_r+0x1f8>
 802dfac:	9b03      	ldr	r3, [sp, #12]
 802dfae:	3307      	adds	r3, #7
 802dfb0:	f023 0307 	bic.w	r3, r3, #7
 802dfb4:	3308      	adds	r3, #8
 802dfb6:	9303      	str	r3, [sp, #12]
 802dfb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802dfba:	443b      	add	r3, r7
 802dfbc:	9309      	str	r3, [sp, #36]	; 0x24
 802dfbe:	e767      	b.n	802de90 <_vfiprintf_r+0x94>
 802dfc0:	fb0c 3202 	mla	r2, ip, r2, r3
 802dfc4:	460c      	mov	r4, r1
 802dfc6:	2001      	movs	r0, #1
 802dfc8:	e7a5      	b.n	802df16 <_vfiprintf_r+0x11a>
 802dfca:	2300      	movs	r3, #0
 802dfcc:	3401      	adds	r4, #1
 802dfce:	9305      	str	r3, [sp, #20]
 802dfd0:	4619      	mov	r1, r3
 802dfd2:	f04f 0c0a 	mov.w	ip, #10
 802dfd6:	4620      	mov	r0, r4
 802dfd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 802dfdc:	3a30      	subs	r2, #48	; 0x30
 802dfde:	2a09      	cmp	r2, #9
 802dfe0:	d903      	bls.n	802dfea <_vfiprintf_r+0x1ee>
 802dfe2:	2b00      	cmp	r3, #0
 802dfe4:	d0c5      	beq.n	802df72 <_vfiprintf_r+0x176>
 802dfe6:	9105      	str	r1, [sp, #20]
 802dfe8:	e7c3      	b.n	802df72 <_vfiprintf_r+0x176>
 802dfea:	fb0c 2101 	mla	r1, ip, r1, r2
 802dfee:	4604      	mov	r4, r0
 802dff0:	2301      	movs	r3, #1
 802dff2:	e7f0      	b.n	802dfd6 <_vfiprintf_r+0x1da>
 802dff4:	ab03      	add	r3, sp, #12
 802dff6:	9300      	str	r3, [sp, #0]
 802dff8:	462a      	mov	r2, r5
 802dffa:	4b16      	ldr	r3, [pc, #88]	; (802e054 <_vfiprintf_r+0x258>)
 802dffc:	a904      	add	r1, sp, #16
 802dffe:	4630      	mov	r0, r6
 802e000:	f3af 8000 	nop.w
 802e004:	4607      	mov	r7, r0
 802e006:	1c78      	adds	r0, r7, #1
 802e008:	d1d6      	bne.n	802dfb8 <_vfiprintf_r+0x1bc>
 802e00a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802e00c:	07d9      	lsls	r1, r3, #31
 802e00e:	d405      	bmi.n	802e01c <_vfiprintf_r+0x220>
 802e010:	89ab      	ldrh	r3, [r5, #12]
 802e012:	059a      	lsls	r2, r3, #22
 802e014:	d402      	bmi.n	802e01c <_vfiprintf_r+0x220>
 802e016:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802e018:	f7ff fdbf 	bl	802db9a <__retarget_lock_release_recursive>
 802e01c:	89ab      	ldrh	r3, [r5, #12]
 802e01e:	065b      	lsls	r3, r3, #25
 802e020:	f53f af12 	bmi.w	802de48 <_vfiprintf_r+0x4c>
 802e024:	9809      	ldr	r0, [sp, #36]	; 0x24
 802e026:	e711      	b.n	802de4c <_vfiprintf_r+0x50>
 802e028:	ab03      	add	r3, sp, #12
 802e02a:	9300      	str	r3, [sp, #0]
 802e02c:	462a      	mov	r2, r5
 802e02e:	4b09      	ldr	r3, [pc, #36]	; (802e054 <_vfiprintf_r+0x258>)
 802e030:	a904      	add	r1, sp, #16
 802e032:	4630      	mov	r0, r6
 802e034:	f000 f880 	bl	802e138 <_printf_i>
 802e038:	e7e4      	b.n	802e004 <_vfiprintf_r+0x208>
 802e03a:	bf00      	nop
 802e03c:	08030ea0 	.word	0x08030ea0
 802e040:	08030ec0 	.word	0x08030ec0
 802e044:	08030e80 	.word	0x08030e80
 802e048:	08030ee4 	.word	0x08030ee4
 802e04c:	08030eee 	.word	0x08030eee
 802e050:	00000000 	.word	0x00000000
 802e054:	0802ddd7 	.word	0x0802ddd7
 802e058:	08030eea 	.word	0x08030eea

0802e05c <_printf_common>:
 802e05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802e060:	4616      	mov	r6, r2
 802e062:	4699      	mov	r9, r3
 802e064:	688a      	ldr	r2, [r1, #8]
 802e066:	690b      	ldr	r3, [r1, #16]
 802e068:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802e06c:	4293      	cmp	r3, r2
 802e06e:	bfb8      	it	lt
 802e070:	4613      	movlt	r3, r2
 802e072:	6033      	str	r3, [r6, #0]
 802e074:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802e078:	4607      	mov	r7, r0
 802e07a:	460c      	mov	r4, r1
 802e07c:	b10a      	cbz	r2, 802e082 <_printf_common+0x26>
 802e07e:	3301      	adds	r3, #1
 802e080:	6033      	str	r3, [r6, #0]
 802e082:	6823      	ldr	r3, [r4, #0]
 802e084:	0699      	lsls	r1, r3, #26
 802e086:	bf42      	ittt	mi
 802e088:	6833      	ldrmi	r3, [r6, #0]
 802e08a:	3302      	addmi	r3, #2
 802e08c:	6033      	strmi	r3, [r6, #0]
 802e08e:	6825      	ldr	r5, [r4, #0]
 802e090:	f015 0506 	ands.w	r5, r5, #6
 802e094:	d106      	bne.n	802e0a4 <_printf_common+0x48>
 802e096:	f104 0a19 	add.w	sl, r4, #25
 802e09a:	68e3      	ldr	r3, [r4, #12]
 802e09c:	6832      	ldr	r2, [r6, #0]
 802e09e:	1a9b      	subs	r3, r3, r2
 802e0a0:	42ab      	cmp	r3, r5
 802e0a2:	dc26      	bgt.n	802e0f2 <_printf_common+0x96>
 802e0a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802e0a8:	1e13      	subs	r3, r2, #0
 802e0aa:	6822      	ldr	r2, [r4, #0]
 802e0ac:	bf18      	it	ne
 802e0ae:	2301      	movne	r3, #1
 802e0b0:	0692      	lsls	r2, r2, #26
 802e0b2:	d42b      	bmi.n	802e10c <_printf_common+0xb0>
 802e0b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802e0b8:	4649      	mov	r1, r9
 802e0ba:	4638      	mov	r0, r7
 802e0bc:	47c0      	blx	r8
 802e0be:	3001      	adds	r0, #1
 802e0c0:	d01e      	beq.n	802e100 <_printf_common+0xa4>
 802e0c2:	6823      	ldr	r3, [r4, #0]
 802e0c4:	68e5      	ldr	r5, [r4, #12]
 802e0c6:	6832      	ldr	r2, [r6, #0]
 802e0c8:	f003 0306 	and.w	r3, r3, #6
 802e0cc:	2b04      	cmp	r3, #4
 802e0ce:	bf08      	it	eq
 802e0d0:	1aad      	subeq	r5, r5, r2
 802e0d2:	68a3      	ldr	r3, [r4, #8]
 802e0d4:	6922      	ldr	r2, [r4, #16]
 802e0d6:	bf0c      	ite	eq
 802e0d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802e0dc:	2500      	movne	r5, #0
 802e0de:	4293      	cmp	r3, r2
 802e0e0:	bfc4      	itt	gt
 802e0e2:	1a9b      	subgt	r3, r3, r2
 802e0e4:	18ed      	addgt	r5, r5, r3
 802e0e6:	2600      	movs	r6, #0
 802e0e8:	341a      	adds	r4, #26
 802e0ea:	42b5      	cmp	r5, r6
 802e0ec:	d11a      	bne.n	802e124 <_printf_common+0xc8>
 802e0ee:	2000      	movs	r0, #0
 802e0f0:	e008      	b.n	802e104 <_printf_common+0xa8>
 802e0f2:	2301      	movs	r3, #1
 802e0f4:	4652      	mov	r2, sl
 802e0f6:	4649      	mov	r1, r9
 802e0f8:	4638      	mov	r0, r7
 802e0fa:	47c0      	blx	r8
 802e0fc:	3001      	adds	r0, #1
 802e0fe:	d103      	bne.n	802e108 <_printf_common+0xac>
 802e100:	f04f 30ff 	mov.w	r0, #4294967295
 802e104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e108:	3501      	adds	r5, #1
 802e10a:	e7c6      	b.n	802e09a <_printf_common+0x3e>
 802e10c:	18e1      	adds	r1, r4, r3
 802e10e:	1c5a      	adds	r2, r3, #1
 802e110:	2030      	movs	r0, #48	; 0x30
 802e112:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802e116:	4422      	add	r2, r4
 802e118:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802e11c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802e120:	3302      	adds	r3, #2
 802e122:	e7c7      	b.n	802e0b4 <_printf_common+0x58>
 802e124:	2301      	movs	r3, #1
 802e126:	4622      	mov	r2, r4
 802e128:	4649      	mov	r1, r9
 802e12a:	4638      	mov	r0, r7
 802e12c:	47c0      	blx	r8
 802e12e:	3001      	adds	r0, #1
 802e130:	d0e6      	beq.n	802e100 <_printf_common+0xa4>
 802e132:	3601      	adds	r6, #1
 802e134:	e7d9      	b.n	802e0ea <_printf_common+0x8e>
	...

0802e138 <_printf_i>:
 802e138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802e13c:	7e0f      	ldrb	r7, [r1, #24]
 802e13e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802e140:	2f78      	cmp	r7, #120	; 0x78
 802e142:	4691      	mov	r9, r2
 802e144:	4680      	mov	r8, r0
 802e146:	460c      	mov	r4, r1
 802e148:	469a      	mov	sl, r3
 802e14a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802e14e:	d807      	bhi.n	802e160 <_printf_i+0x28>
 802e150:	2f62      	cmp	r7, #98	; 0x62
 802e152:	d80a      	bhi.n	802e16a <_printf_i+0x32>
 802e154:	2f00      	cmp	r7, #0
 802e156:	f000 80d8 	beq.w	802e30a <_printf_i+0x1d2>
 802e15a:	2f58      	cmp	r7, #88	; 0x58
 802e15c:	f000 80a3 	beq.w	802e2a6 <_printf_i+0x16e>
 802e160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802e164:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802e168:	e03a      	b.n	802e1e0 <_printf_i+0xa8>
 802e16a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802e16e:	2b15      	cmp	r3, #21
 802e170:	d8f6      	bhi.n	802e160 <_printf_i+0x28>
 802e172:	a101      	add	r1, pc, #4	; (adr r1, 802e178 <_printf_i+0x40>)
 802e174:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802e178:	0802e1d1 	.word	0x0802e1d1
 802e17c:	0802e1e5 	.word	0x0802e1e5
 802e180:	0802e161 	.word	0x0802e161
 802e184:	0802e161 	.word	0x0802e161
 802e188:	0802e161 	.word	0x0802e161
 802e18c:	0802e161 	.word	0x0802e161
 802e190:	0802e1e5 	.word	0x0802e1e5
 802e194:	0802e161 	.word	0x0802e161
 802e198:	0802e161 	.word	0x0802e161
 802e19c:	0802e161 	.word	0x0802e161
 802e1a0:	0802e161 	.word	0x0802e161
 802e1a4:	0802e2f1 	.word	0x0802e2f1
 802e1a8:	0802e215 	.word	0x0802e215
 802e1ac:	0802e2d3 	.word	0x0802e2d3
 802e1b0:	0802e161 	.word	0x0802e161
 802e1b4:	0802e161 	.word	0x0802e161
 802e1b8:	0802e313 	.word	0x0802e313
 802e1bc:	0802e161 	.word	0x0802e161
 802e1c0:	0802e215 	.word	0x0802e215
 802e1c4:	0802e161 	.word	0x0802e161
 802e1c8:	0802e161 	.word	0x0802e161
 802e1cc:	0802e2db 	.word	0x0802e2db
 802e1d0:	682b      	ldr	r3, [r5, #0]
 802e1d2:	1d1a      	adds	r2, r3, #4
 802e1d4:	681b      	ldr	r3, [r3, #0]
 802e1d6:	602a      	str	r2, [r5, #0]
 802e1d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802e1dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802e1e0:	2301      	movs	r3, #1
 802e1e2:	e0a3      	b.n	802e32c <_printf_i+0x1f4>
 802e1e4:	6820      	ldr	r0, [r4, #0]
 802e1e6:	6829      	ldr	r1, [r5, #0]
 802e1e8:	0606      	lsls	r6, r0, #24
 802e1ea:	f101 0304 	add.w	r3, r1, #4
 802e1ee:	d50a      	bpl.n	802e206 <_printf_i+0xce>
 802e1f0:	680e      	ldr	r6, [r1, #0]
 802e1f2:	602b      	str	r3, [r5, #0]
 802e1f4:	2e00      	cmp	r6, #0
 802e1f6:	da03      	bge.n	802e200 <_printf_i+0xc8>
 802e1f8:	232d      	movs	r3, #45	; 0x2d
 802e1fa:	4276      	negs	r6, r6
 802e1fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802e200:	485e      	ldr	r0, [pc, #376]	; (802e37c <_printf_i+0x244>)
 802e202:	230a      	movs	r3, #10
 802e204:	e019      	b.n	802e23a <_printf_i+0x102>
 802e206:	680e      	ldr	r6, [r1, #0]
 802e208:	602b      	str	r3, [r5, #0]
 802e20a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802e20e:	bf18      	it	ne
 802e210:	b236      	sxthne	r6, r6
 802e212:	e7ef      	b.n	802e1f4 <_printf_i+0xbc>
 802e214:	682b      	ldr	r3, [r5, #0]
 802e216:	6820      	ldr	r0, [r4, #0]
 802e218:	1d19      	adds	r1, r3, #4
 802e21a:	6029      	str	r1, [r5, #0]
 802e21c:	0601      	lsls	r1, r0, #24
 802e21e:	d501      	bpl.n	802e224 <_printf_i+0xec>
 802e220:	681e      	ldr	r6, [r3, #0]
 802e222:	e002      	b.n	802e22a <_printf_i+0xf2>
 802e224:	0646      	lsls	r6, r0, #25
 802e226:	d5fb      	bpl.n	802e220 <_printf_i+0xe8>
 802e228:	881e      	ldrh	r6, [r3, #0]
 802e22a:	4854      	ldr	r0, [pc, #336]	; (802e37c <_printf_i+0x244>)
 802e22c:	2f6f      	cmp	r7, #111	; 0x6f
 802e22e:	bf0c      	ite	eq
 802e230:	2308      	moveq	r3, #8
 802e232:	230a      	movne	r3, #10
 802e234:	2100      	movs	r1, #0
 802e236:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802e23a:	6865      	ldr	r5, [r4, #4]
 802e23c:	60a5      	str	r5, [r4, #8]
 802e23e:	2d00      	cmp	r5, #0
 802e240:	bfa2      	ittt	ge
 802e242:	6821      	ldrge	r1, [r4, #0]
 802e244:	f021 0104 	bicge.w	r1, r1, #4
 802e248:	6021      	strge	r1, [r4, #0]
 802e24a:	b90e      	cbnz	r6, 802e250 <_printf_i+0x118>
 802e24c:	2d00      	cmp	r5, #0
 802e24e:	d04d      	beq.n	802e2ec <_printf_i+0x1b4>
 802e250:	4615      	mov	r5, r2
 802e252:	fbb6 f1f3 	udiv	r1, r6, r3
 802e256:	fb03 6711 	mls	r7, r3, r1, r6
 802e25a:	5dc7      	ldrb	r7, [r0, r7]
 802e25c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802e260:	4637      	mov	r7, r6
 802e262:	42bb      	cmp	r3, r7
 802e264:	460e      	mov	r6, r1
 802e266:	d9f4      	bls.n	802e252 <_printf_i+0x11a>
 802e268:	2b08      	cmp	r3, #8
 802e26a:	d10b      	bne.n	802e284 <_printf_i+0x14c>
 802e26c:	6823      	ldr	r3, [r4, #0]
 802e26e:	07de      	lsls	r6, r3, #31
 802e270:	d508      	bpl.n	802e284 <_printf_i+0x14c>
 802e272:	6923      	ldr	r3, [r4, #16]
 802e274:	6861      	ldr	r1, [r4, #4]
 802e276:	4299      	cmp	r1, r3
 802e278:	bfde      	ittt	le
 802e27a:	2330      	movle	r3, #48	; 0x30
 802e27c:	f805 3c01 	strble.w	r3, [r5, #-1]
 802e280:	f105 35ff 	addle.w	r5, r5, #4294967295
 802e284:	1b52      	subs	r2, r2, r5
 802e286:	6122      	str	r2, [r4, #16]
 802e288:	f8cd a000 	str.w	sl, [sp]
 802e28c:	464b      	mov	r3, r9
 802e28e:	aa03      	add	r2, sp, #12
 802e290:	4621      	mov	r1, r4
 802e292:	4640      	mov	r0, r8
 802e294:	f7ff fee2 	bl	802e05c <_printf_common>
 802e298:	3001      	adds	r0, #1
 802e29a:	d14c      	bne.n	802e336 <_printf_i+0x1fe>
 802e29c:	f04f 30ff 	mov.w	r0, #4294967295
 802e2a0:	b004      	add	sp, #16
 802e2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802e2a6:	4835      	ldr	r0, [pc, #212]	; (802e37c <_printf_i+0x244>)
 802e2a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802e2ac:	6829      	ldr	r1, [r5, #0]
 802e2ae:	6823      	ldr	r3, [r4, #0]
 802e2b0:	f851 6b04 	ldr.w	r6, [r1], #4
 802e2b4:	6029      	str	r1, [r5, #0]
 802e2b6:	061d      	lsls	r5, r3, #24
 802e2b8:	d514      	bpl.n	802e2e4 <_printf_i+0x1ac>
 802e2ba:	07df      	lsls	r7, r3, #31
 802e2bc:	bf44      	itt	mi
 802e2be:	f043 0320 	orrmi.w	r3, r3, #32
 802e2c2:	6023      	strmi	r3, [r4, #0]
 802e2c4:	b91e      	cbnz	r6, 802e2ce <_printf_i+0x196>
 802e2c6:	6823      	ldr	r3, [r4, #0]
 802e2c8:	f023 0320 	bic.w	r3, r3, #32
 802e2cc:	6023      	str	r3, [r4, #0]
 802e2ce:	2310      	movs	r3, #16
 802e2d0:	e7b0      	b.n	802e234 <_printf_i+0xfc>
 802e2d2:	6823      	ldr	r3, [r4, #0]
 802e2d4:	f043 0320 	orr.w	r3, r3, #32
 802e2d8:	6023      	str	r3, [r4, #0]
 802e2da:	2378      	movs	r3, #120	; 0x78
 802e2dc:	4828      	ldr	r0, [pc, #160]	; (802e380 <_printf_i+0x248>)
 802e2de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802e2e2:	e7e3      	b.n	802e2ac <_printf_i+0x174>
 802e2e4:	0659      	lsls	r1, r3, #25
 802e2e6:	bf48      	it	mi
 802e2e8:	b2b6      	uxthmi	r6, r6
 802e2ea:	e7e6      	b.n	802e2ba <_printf_i+0x182>
 802e2ec:	4615      	mov	r5, r2
 802e2ee:	e7bb      	b.n	802e268 <_printf_i+0x130>
 802e2f0:	682b      	ldr	r3, [r5, #0]
 802e2f2:	6826      	ldr	r6, [r4, #0]
 802e2f4:	6961      	ldr	r1, [r4, #20]
 802e2f6:	1d18      	adds	r0, r3, #4
 802e2f8:	6028      	str	r0, [r5, #0]
 802e2fa:	0635      	lsls	r5, r6, #24
 802e2fc:	681b      	ldr	r3, [r3, #0]
 802e2fe:	d501      	bpl.n	802e304 <_printf_i+0x1cc>
 802e300:	6019      	str	r1, [r3, #0]
 802e302:	e002      	b.n	802e30a <_printf_i+0x1d2>
 802e304:	0670      	lsls	r0, r6, #25
 802e306:	d5fb      	bpl.n	802e300 <_printf_i+0x1c8>
 802e308:	8019      	strh	r1, [r3, #0]
 802e30a:	2300      	movs	r3, #0
 802e30c:	6123      	str	r3, [r4, #16]
 802e30e:	4615      	mov	r5, r2
 802e310:	e7ba      	b.n	802e288 <_printf_i+0x150>
 802e312:	682b      	ldr	r3, [r5, #0]
 802e314:	1d1a      	adds	r2, r3, #4
 802e316:	602a      	str	r2, [r5, #0]
 802e318:	681d      	ldr	r5, [r3, #0]
 802e31a:	6862      	ldr	r2, [r4, #4]
 802e31c:	2100      	movs	r1, #0
 802e31e:	4628      	mov	r0, r5
 802e320:	f7d1 ff66 	bl	80001f0 <memchr>
 802e324:	b108      	cbz	r0, 802e32a <_printf_i+0x1f2>
 802e326:	1b40      	subs	r0, r0, r5
 802e328:	6060      	str	r0, [r4, #4]
 802e32a:	6863      	ldr	r3, [r4, #4]
 802e32c:	6123      	str	r3, [r4, #16]
 802e32e:	2300      	movs	r3, #0
 802e330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802e334:	e7a8      	b.n	802e288 <_printf_i+0x150>
 802e336:	6923      	ldr	r3, [r4, #16]
 802e338:	462a      	mov	r2, r5
 802e33a:	4649      	mov	r1, r9
 802e33c:	4640      	mov	r0, r8
 802e33e:	47d0      	blx	sl
 802e340:	3001      	adds	r0, #1
 802e342:	d0ab      	beq.n	802e29c <_printf_i+0x164>
 802e344:	6823      	ldr	r3, [r4, #0]
 802e346:	079b      	lsls	r3, r3, #30
 802e348:	d413      	bmi.n	802e372 <_printf_i+0x23a>
 802e34a:	68e0      	ldr	r0, [r4, #12]
 802e34c:	9b03      	ldr	r3, [sp, #12]
 802e34e:	4298      	cmp	r0, r3
 802e350:	bfb8      	it	lt
 802e352:	4618      	movlt	r0, r3
 802e354:	e7a4      	b.n	802e2a0 <_printf_i+0x168>
 802e356:	2301      	movs	r3, #1
 802e358:	4632      	mov	r2, r6
 802e35a:	4649      	mov	r1, r9
 802e35c:	4640      	mov	r0, r8
 802e35e:	47d0      	blx	sl
 802e360:	3001      	adds	r0, #1
 802e362:	d09b      	beq.n	802e29c <_printf_i+0x164>
 802e364:	3501      	adds	r5, #1
 802e366:	68e3      	ldr	r3, [r4, #12]
 802e368:	9903      	ldr	r1, [sp, #12]
 802e36a:	1a5b      	subs	r3, r3, r1
 802e36c:	42ab      	cmp	r3, r5
 802e36e:	dcf2      	bgt.n	802e356 <_printf_i+0x21e>
 802e370:	e7eb      	b.n	802e34a <_printf_i+0x212>
 802e372:	2500      	movs	r5, #0
 802e374:	f104 0619 	add.w	r6, r4, #25
 802e378:	e7f5      	b.n	802e366 <_printf_i+0x22e>
 802e37a:	bf00      	nop
 802e37c:	08030ef5 	.word	0x08030ef5
 802e380:	08030f06 	.word	0x08030f06

0802e384 <cleanup_glue>:
 802e384:	b538      	push	{r3, r4, r5, lr}
 802e386:	460c      	mov	r4, r1
 802e388:	6809      	ldr	r1, [r1, #0]
 802e38a:	4605      	mov	r5, r0
 802e38c:	b109      	cbz	r1, 802e392 <cleanup_glue+0xe>
 802e38e:	f7ff fff9 	bl	802e384 <cleanup_glue>
 802e392:	4621      	mov	r1, r4
 802e394:	4628      	mov	r0, r5
 802e396:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e39a:	f7ff bc25 	b.w	802dbe8 <_free_r>
	...

0802e3a0 <_reclaim_reent>:
 802e3a0:	4b2c      	ldr	r3, [pc, #176]	; (802e454 <_reclaim_reent+0xb4>)
 802e3a2:	681b      	ldr	r3, [r3, #0]
 802e3a4:	4283      	cmp	r3, r0
 802e3a6:	b570      	push	{r4, r5, r6, lr}
 802e3a8:	4604      	mov	r4, r0
 802e3aa:	d051      	beq.n	802e450 <_reclaim_reent+0xb0>
 802e3ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802e3ae:	b143      	cbz	r3, 802e3c2 <_reclaim_reent+0x22>
 802e3b0:	68db      	ldr	r3, [r3, #12]
 802e3b2:	2b00      	cmp	r3, #0
 802e3b4:	d14a      	bne.n	802e44c <_reclaim_reent+0xac>
 802e3b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802e3b8:	6819      	ldr	r1, [r3, #0]
 802e3ba:	b111      	cbz	r1, 802e3c2 <_reclaim_reent+0x22>
 802e3bc:	4620      	mov	r0, r4
 802e3be:	f7ff fc13 	bl	802dbe8 <_free_r>
 802e3c2:	6961      	ldr	r1, [r4, #20]
 802e3c4:	b111      	cbz	r1, 802e3cc <_reclaim_reent+0x2c>
 802e3c6:	4620      	mov	r0, r4
 802e3c8:	f7ff fc0e 	bl	802dbe8 <_free_r>
 802e3cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802e3ce:	b111      	cbz	r1, 802e3d6 <_reclaim_reent+0x36>
 802e3d0:	4620      	mov	r0, r4
 802e3d2:	f7ff fc09 	bl	802dbe8 <_free_r>
 802e3d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802e3d8:	b111      	cbz	r1, 802e3e0 <_reclaim_reent+0x40>
 802e3da:	4620      	mov	r0, r4
 802e3dc:	f7ff fc04 	bl	802dbe8 <_free_r>
 802e3e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802e3e2:	b111      	cbz	r1, 802e3ea <_reclaim_reent+0x4a>
 802e3e4:	4620      	mov	r0, r4
 802e3e6:	f7ff fbff 	bl	802dbe8 <_free_r>
 802e3ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802e3ec:	b111      	cbz	r1, 802e3f4 <_reclaim_reent+0x54>
 802e3ee:	4620      	mov	r0, r4
 802e3f0:	f7ff fbfa 	bl	802dbe8 <_free_r>
 802e3f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802e3f6:	b111      	cbz	r1, 802e3fe <_reclaim_reent+0x5e>
 802e3f8:	4620      	mov	r0, r4
 802e3fa:	f7ff fbf5 	bl	802dbe8 <_free_r>
 802e3fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802e400:	b111      	cbz	r1, 802e408 <_reclaim_reent+0x68>
 802e402:	4620      	mov	r0, r4
 802e404:	f7ff fbf0 	bl	802dbe8 <_free_r>
 802e408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e40a:	b111      	cbz	r1, 802e412 <_reclaim_reent+0x72>
 802e40c:	4620      	mov	r0, r4
 802e40e:	f7ff fbeb 	bl	802dbe8 <_free_r>
 802e412:	69a3      	ldr	r3, [r4, #24]
 802e414:	b1e3      	cbz	r3, 802e450 <_reclaim_reent+0xb0>
 802e416:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802e418:	4620      	mov	r0, r4
 802e41a:	4798      	blx	r3
 802e41c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802e41e:	b1b9      	cbz	r1, 802e450 <_reclaim_reent+0xb0>
 802e420:	4620      	mov	r0, r4
 802e422:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802e426:	f7ff bfad 	b.w	802e384 <cleanup_glue>
 802e42a:	5949      	ldr	r1, [r1, r5]
 802e42c:	b941      	cbnz	r1, 802e440 <_reclaim_reent+0xa0>
 802e42e:	3504      	adds	r5, #4
 802e430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802e432:	2d80      	cmp	r5, #128	; 0x80
 802e434:	68d9      	ldr	r1, [r3, #12]
 802e436:	d1f8      	bne.n	802e42a <_reclaim_reent+0x8a>
 802e438:	4620      	mov	r0, r4
 802e43a:	f7ff fbd5 	bl	802dbe8 <_free_r>
 802e43e:	e7ba      	b.n	802e3b6 <_reclaim_reent+0x16>
 802e440:	680e      	ldr	r6, [r1, #0]
 802e442:	4620      	mov	r0, r4
 802e444:	f7ff fbd0 	bl	802dbe8 <_free_r>
 802e448:	4631      	mov	r1, r6
 802e44a:	e7ef      	b.n	802e42c <_reclaim_reent+0x8c>
 802e44c:	2500      	movs	r5, #0
 802e44e:	e7ef      	b.n	802e430 <_reclaim_reent+0x90>
 802e450:	bd70      	pop	{r4, r5, r6, pc}
 802e452:	bf00      	nop
 802e454:	20000098 	.word	0x20000098

0802e458 <_sbrk_r>:
 802e458:	b538      	push	{r3, r4, r5, lr}
 802e45a:	4d06      	ldr	r5, [pc, #24]	; (802e474 <_sbrk_r+0x1c>)
 802e45c:	2300      	movs	r3, #0
 802e45e:	4604      	mov	r4, r0
 802e460:	4608      	mov	r0, r1
 802e462:	602b      	str	r3, [r5, #0]
 802e464:	f7d6 f808 	bl	8004478 <_sbrk>
 802e468:	1c43      	adds	r3, r0, #1
 802e46a:	d102      	bne.n	802e472 <_sbrk_r+0x1a>
 802e46c:	682b      	ldr	r3, [r5, #0]
 802e46e:	b103      	cbz	r3, 802e472 <_sbrk_r+0x1a>
 802e470:	6023      	str	r3, [r4, #0]
 802e472:	bd38      	pop	{r3, r4, r5, pc}
 802e474:	2000f37c 	.word	0x2000f37c

0802e478 <_raise_r>:
 802e478:	291f      	cmp	r1, #31
 802e47a:	b538      	push	{r3, r4, r5, lr}
 802e47c:	4604      	mov	r4, r0
 802e47e:	460d      	mov	r5, r1
 802e480:	d904      	bls.n	802e48c <_raise_r+0x14>
 802e482:	2316      	movs	r3, #22
 802e484:	6003      	str	r3, [r0, #0]
 802e486:	f04f 30ff 	mov.w	r0, #4294967295
 802e48a:	bd38      	pop	{r3, r4, r5, pc}
 802e48c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802e48e:	b112      	cbz	r2, 802e496 <_raise_r+0x1e>
 802e490:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802e494:	b94b      	cbnz	r3, 802e4aa <_raise_r+0x32>
 802e496:	4620      	mov	r0, r4
 802e498:	f000 f830 	bl	802e4fc <_getpid_r>
 802e49c:	462a      	mov	r2, r5
 802e49e:	4601      	mov	r1, r0
 802e4a0:	4620      	mov	r0, r4
 802e4a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802e4a6:	f000 b817 	b.w	802e4d8 <_kill_r>
 802e4aa:	2b01      	cmp	r3, #1
 802e4ac:	d00a      	beq.n	802e4c4 <_raise_r+0x4c>
 802e4ae:	1c59      	adds	r1, r3, #1
 802e4b0:	d103      	bne.n	802e4ba <_raise_r+0x42>
 802e4b2:	2316      	movs	r3, #22
 802e4b4:	6003      	str	r3, [r0, #0]
 802e4b6:	2001      	movs	r0, #1
 802e4b8:	e7e7      	b.n	802e48a <_raise_r+0x12>
 802e4ba:	2400      	movs	r4, #0
 802e4bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802e4c0:	4628      	mov	r0, r5
 802e4c2:	4798      	blx	r3
 802e4c4:	2000      	movs	r0, #0
 802e4c6:	e7e0      	b.n	802e48a <_raise_r+0x12>

0802e4c8 <raise>:
 802e4c8:	4b02      	ldr	r3, [pc, #8]	; (802e4d4 <raise+0xc>)
 802e4ca:	4601      	mov	r1, r0
 802e4cc:	6818      	ldr	r0, [r3, #0]
 802e4ce:	f7ff bfd3 	b.w	802e478 <_raise_r>
 802e4d2:	bf00      	nop
 802e4d4:	20000098 	.word	0x20000098

0802e4d8 <_kill_r>:
 802e4d8:	b538      	push	{r3, r4, r5, lr}
 802e4da:	4d07      	ldr	r5, [pc, #28]	; (802e4f8 <_kill_r+0x20>)
 802e4dc:	2300      	movs	r3, #0
 802e4de:	4604      	mov	r4, r0
 802e4e0:	4608      	mov	r0, r1
 802e4e2:	4611      	mov	r1, r2
 802e4e4:	602b      	str	r3, [r5, #0]
 802e4e6:	f7d5 ff3f 	bl	8004368 <_kill>
 802e4ea:	1c43      	adds	r3, r0, #1
 802e4ec:	d102      	bne.n	802e4f4 <_kill_r+0x1c>
 802e4ee:	682b      	ldr	r3, [r5, #0]
 802e4f0:	b103      	cbz	r3, 802e4f4 <_kill_r+0x1c>
 802e4f2:	6023      	str	r3, [r4, #0]
 802e4f4:	bd38      	pop	{r3, r4, r5, pc}
 802e4f6:	bf00      	nop
 802e4f8:	2000f37c 	.word	0x2000f37c

0802e4fc <_getpid_r>:
 802e4fc:	f7d5 bf2c 	b.w	8004358 <_getpid>

0802e500 <__sread>:
 802e500:	b510      	push	{r4, lr}
 802e502:	460c      	mov	r4, r1
 802e504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e508:	f000 fac8 	bl	802ea9c <_read_r>
 802e50c:	2800      	cmp	r0, #0
 802e50e:	bfab      	itete	ge
 802e510:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802e512:	89a3      	ldrhlt	r3, [r4, #12]
 802e514:	181b      	addge	r3, r3, r0
 802e516:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802e51a:	bfac      	ite	ge
 802e51c:	6563      	strge	r3, [r4, #84]	; 0x54
 802e51e:	81a3      	strhlt	r3, [r4, #12]
 802e520:	bd10      	pop	{r4, pc}

0802e522 <__swrite>:
 802e522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e526:	461f      	mov	r7, r3
 802e528:	898b      	ldrh	r3, [r1, #12]
 802e52a:	05db      	lsls	r3, r3, #23
 802e52c:	4605      	mov	r5, r0
 802e52e:	460c      	mov	r4, r1
 802e530:	4616      	mov	r6, r2
 802e532:	d505      	bpl.n	802e540 <__swrite+0x1e>
 802e534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e538:	2302      	movs	r3, #2
 802e53a:	2200      	movs	r2, #0
 802e53c:	f000 fa2a 	bl	802e994 <_lseek_r>
 802e540:	89a3      	ldrh	r3, [r4, #12]
 802e542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802e546:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802e54a:	81a3      	strh	r3, [r4, #12]
 802e54c:	4632      	mov	r2, r6
 802e54e:	463b      	mov	r3, r7
 802e550:	4628      	mov	r0, r5
 802e552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802e556:	f000 b869 	b.w	802e62c <_write_r>

0802e55a <__sseek>:
 802e55a:	b510      	push	{r4, lr}
 802e55c:	460c      	mov	r4, r1
 802e55e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e562:	f000 fa17 	bl	802e994 <_lseek_r>
 802e566:	1c43      	adds	r3, r0, #1
 802e568:	89a3      	ldrh	r3, [r4, #12]
 802e56a:	bf15      	itete	ne
 802e56c:	6560      	strne	r0, [r4, #84]	; 0x54
 802e56e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802e572:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802e576:	81a3      	strheq	r3, [r4, #12]
 802e578:	bf18      	it	ne
 802e57a:	81a3      	strhne	r3, [r4, #12]
 802e57c:	bd10      	pop	{r4, pc}

0802e57e <__sclose>:
 802e57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e582:	f000 b935 	b.w	802e7f0 <_close_r>
	...

0802e588 <__swbuf_r>:
 802e588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802e58a:	460e      	mov	r6, r1
 802e58c:	4614      	mov	r4, r2
 802e58e:	4605      	mov	r5, r0
 802e590:	b118      	cbz	r0, 802e59a <__swbuf_r+0x12>
 802e592:	6983      	ldr	r3, [r0, #24]
 802e594:	b90b      	cbnz	r3, 802e59a <__swbuf_r+0x12>
 802e596:	f7ff fa29 	bl	802d9ec <__sinit>
 802e59a:	4b21      	ldr	r3, [pc, #132]	; (802e620 <__swbuf_r+0x98>)
 802e59c:	429c      	cmp	r4, r3
 802e59e:	d12b      	bne.n	802e5f8 <__swbuf_r+0x70>
 802e5a0:	686c      	ldr	r4, [r5, #4]
 802e5a2:	69a3      	ldr	r3, [r4, #24]
 802e5a4:	60a3      	str	r3, [r4, #8]
 802e5a6:	89a3      	ldrh	r3, [r4, #12]
 802e5a8:	071a      	lsls	r2, r3, #28
 802e5aa:	d52f      	bpl.n	802e60c <__swbuf_r+0x84>
 802e5ac:	6923      	ldr	r3, [r4, #16]
 802e5ae:	b36b      	cbz	r3, 802e60c <__swbuf_r+0x84>
 802e5b0:	6923      	ldr	r3, [r4, #16]
 802e5b2:	6820      	ldr	r0, [r4, #0]
 802e5b4:	1ac0      	subs	r0, r0, r3
 802e5b6:	6963      	ldr	r3, [r4, #20]
 802e5b8:	b2f6      	uxtb	r6, r6
 802e5ba:	4283      	cmp	r3, r0
 802e5bc:	4637      	mov	r7, r6
 802e5be:	dc04      	bgt.n	802e5ca <__swbuf_r+0x42>
 802e5c0:	4621      	mov	r1, r4
 802e5c2:	4628      	mov	r0, r5
 802e5c4:	f000 f9aa 	bl	802e91c <_fflush_r>
 802e5c8:	bb30      	cbnz	r0, 802e618 <__swbuf_r+0x90>
 802e5ca:	68a3      	ldr	r3, [r4, #8]
 802e5cc:	3b01      	subs	r3, #1
 802e5ce:	60a3      	str	r3, [r4, #8]
 802e5d0:	6823      	ldr	r3, [r4, #0]
 802e5d2:	1c5a      	adds	r2, r3, #1
 802e5d4:	6022      	str	r2, [r4, #0]
 802e5d6:	701e      	strb	r6, [r3, #0]
 802e5d8:	6963      	ldr	r3, [r4, #20]
 802e5da:	3001      	adds	r0, #1
 802e5dc:	4283      	cmp	r3, r0
 802e5de:	d004      	beq.n	802e5ea <__swbuf_r+0x62>
 802e5e0:	89a3      	ldrh	r3, [r4, #12]
 802e5e2:	07db      	lsls	r3, r3, #31
 802e5e4:	d506      	bpl.n	802e5f4 <__swbuf_r+0x6c>
 802e5e6:	2e0a      	cmp	r6, #10
 802e5e8:	d104      	bne.n	802e5f4 <__swbuf_r+0x6c>
 802e5ea:	4621      	mov	r1, r4
 802e5ec:	4628      	mov	r0, r5
 802e5ee:	f000 f995 	bl	802e91c <_fflush_r>
 802e5f2:	b988      	cbnz	r0, 802e618 <__swbuf_r+0x90>
 802e5f4:	4638      	mov	r0, r7
 802e5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802e5f8:	4b0a      	ldr	r3, [pc, #40]	; (802e624 <__swbuf_r+0x9c>)
 802e5fa:	429c      	cmp	r4, r3
 802e5fc:	d101      	bne.n	802e602 <__swbuf_r+0x7a>
 802e5fe:	68ac      	ldr	r4, [r5, #8]
 802e600:	e7cf      	b.n	802e5a2 <__swbuf_r+0x1a>
 802e602:	4b09      	ldr	r3, [pc, #36]	; (802e628 <__swbuf_r+0xa0>)
 802e604:	429c      	cmp	r4, r3
 802e606:	bf08      	it	eq
 802e608:	68ec      	ldreq	r4, [r5, #12]
 802e60a:	e7ca      	b.n	802e5a2 <__swbuf_r+0x1a>
 802e60c:	4621      	mov	r1, r4
 802e60e:	4628      	mov	r0, r5
 802e610:	f000 f81e 	bl	802e650 <__swsetup_r>
 802e614:	2800      	cmp	r0, #0
 802e616:	d0cb      	beq.n	802e5b0 <__swbuf_r+0x28>
 802e618:	f04f 37ff 	mov.w	r7, #4294967295
 802e61c:	e7ea      	b.n	802e5f4 <__swbuf_r+0x6c>
 802e61e:	bf00      	nop
 802e620:	08030ea0 	.word	0x08030ea0
 802e624:	08030ec0 	.word	0x08030ec0
 802e628:	08030e80 	.word	0x08030e80

0802e62c <_write_r>:
 802e62c:	b538      	push	{r3, r4, r5, lr}
 802e62e:	4d07      	ldr	r5, [pc, #28]	; (802e64c <_write_r+0x20>)
 802e630:	4604      	mov	r4, r0
 802e632:	4608      	mov	r0, r1
 802e634:	4611      	mov	r1, r2
 802e636:	2200      	movs	r2, #0
 802e638:	602a      	str	r2, [r5, #0]
 802e63a:	461a      	mov	r2, r3
 802e63c:	f7d5 fecb 	bl	80043d6 <_write>
 802e640:	1c43      	adds	r3, r0, #1
 802e642:	d102      	bne.n	802e64a <_write_r+0x1e>
 802e644:	682b      	ldr	r3, [r5, #0]
 802e646:	b103      	cbz	r3, 802e64a <_write_r+0x1e>
 802e648:	6023      	str	r3, [r4, #0]
 802e64a:	bd38      	pop	{r3, r4, r5, pc}
 802e64c:	2000f37c 	.word	0x2000f37c

0802e650 <__swsetup_r>:
 802e650:	4b32      	ldr	r3, [pc, #200]	; (802e71c <__swsetup_r+0xcc>)
 802e652:	b570      	push	{r4, r5, r6, lr}
 802e654:	681d      	ldr	r5, [r3, #0]
 802e656:	4606      	mov	r6, r0
 802e658:	460c      	mov	r4, r1
 802e65a:	b125      	cbz	r5, 802e666 <__swsetup_r+0x16>
 802e65c:	69ab      	ldr	r3, [r5, #24]
 802e65e:	b913      	cbnz	r3, 802e666 <__swsetup_r+0x16>
 802e660:	4628      	mov	r0, r5
 802e662:	f7ff f9c3 	bl	802d9ec <__sinit>
 802e666:	4b2e      	ldr	r3, [pc, #184]	; (802e720 <__swsetup_r+0xd0>)
 802e668:	429c      	cmp	r4, r3
 802e66a:	d10f      	bne.n	802e68c <__swsetup_r+0x3c>
 802e66c:	686c      	ldr	r4, [r5, #4]
 802e66e:	89a3      	ldrh	r3, [r4, #12]
 802e670:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802e674:	0719      	lsls	r1, r3, #28
 802e676:	d42c      	bmi.n	802e6d2 <__swsetup_r+0x82>
 802e678:	06dd      	lsls	r5, r3, #27
 802e67a:	d411      	bmi.n	802e6a0 <__swsetup_r+0x50>
 802e67c:	2309      	movs	r3, #9
 802e67e:	6033      	str	r3, [r6, #0]
 802e680:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802e684:	81a3      	strh	r3, [r4, #12]
 802e686:	f04f 30ff 	mov.w	r0, #4294967295
 802e68a:	e03e      	b.n	802e70a <__swsetup_r+0xba>
 802e68c:	4b25      	ldr	r3, [pc, #148]	; (802e724 <__swsetup_r+0xd4>)
 802e68e:	429c      	cmp	r4, r3
 802e690:	d101      	bne.n	802e696 <__swsetup_r+0x46>
 802e692:	68ac      	ldr	r4, [r5, #8]
 802e694:	e7eb      	b.n	802e66e <__swsetup_r+0x1e>
 802e696:	4b24      	ldr	r3, [pc, #144]	; (802e728 <__swsetup_r+0xd8>)
 802e698:	429c      	cmp	r4, r3
 802e69a:	bf08      	it	eq
 802e69c:	68ec      	ldreq	r4, [r5, #12]
 802e69e:	e7e6      	b.n	802e66e <__swsetup_r+0x1e>
 802e6a0:	0758      	lsls	r0, r3, #29
 802e6a2:	d512      	bpl.n	802e6ca <__swsetup_r+0x7a>
 802e6a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e6a6:	b141      	cbz	r1, 802e6ba <__swsetup_r+0x6a>
 802e6a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802e6ac:	4299      	cmp	r1, r3
 802e6ae:	d002      	beq.n	802e6b6 <__swsetup_r+0x66>
 802e6b0:	4630      	mov	r0, r6
 802e6b2:	f7ff fa99 	bl	802dbe8 <_free_r>
 802e6b6:	2300      	movs	r3, #0
 802e6b8:	6363      	str	r3, [r4, #52]	; 0x34
 802e6ba:	89a3      	ldrh	r3, [r4, #12]
 802e6bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802e6c0:	81a3      	strh	r3, [r4, #12]
 802e6c2:	2300      	movs	r3, #0
 802e6c4:	6063      	str	r3, [r4, #4]
 802e6c6:	6923      	ldr	r3, [r4, #16]
 802e6c8:	6023      	str	r3, [r4, #0]
 802e6ca:	89a3      	ldrh	r3, [r4, #12]
 802e6cc:	f043 0308 	orr.w	r3, r3, #8
 802e6d0:	81a3      	strh	r3, [r4, #12]
 802e6d2:	6923      	ldr	r3, [r4, #16]
 802e6d4:	b94b      	cbnz	r3, 802e6ea <__swsetup_r+0x9a>
 802e6d6:	89a3      	ldrh	r3, [r4, #12]
 802e6d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802e6dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802e6e0:	d003      	beq.n	802e6ea <__swsetup_r+0x9a>
 802e6e2:	4621      	mov	r1, r4
 802e6e4:	4630      	mov	r0, r6
 802e6e6:	f000 f98d 	bl	802ea04 <__smakebuf_r>
 802e6ea:	89a0      	ldrh	r0, [r4, #12]
 802e6ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802e6f0:	f010 0301 	ands.w	r3, r0, #1
 802e6f4:	d00a      	beq.n	802e70c <__swsetup_r+0xbc>
 802e6f6:	2300      	movs	r3, #0
 802e6f8:	60a3      	str	r3, [r4, #8]
 802e6fa:	6963      	ldr	r3, [r4, #20]
 802e6fc:	425b      	negs	r3, r3
 802e6fe:	61a3      	str	r3, [r4, #24]
 802e700:	6923      	ldr	r3, [r4, #16]
 802e702:	b943      	cbnz	r3, 802e716 <__swsetup_r+0xc6>
 802e704:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802e708:	d1ba      	bne.n	802e680 <__swsetup_r+0x30>
 802e70a:	bd70      	pop	{r4, r5, r6, pc}
 802e70c:	0781      	lsls	r1, r0, #30
 802e70e:	bf58      	it	pl
 802e710:	6963      	ldrpl	r3, [r4, #20]
 802e712:	60a3      	str	r3, [r4, #8]
 802e714:	e7f4      	b.n	802e700 <__swsetup_r+0xb0>
 802e716:	2000      	movs	r0, #0
 802e718:	e7f7      	b.n	802e70a <__swsetup_r+0xba>
 802e71a:	bf00      	nop
 802e71c:	20000098 	.word	0x20000098
 802e720:	08030ea0 	.word	0x08030ea0
 802e724:	08030ec0 	.word	0x08030ec0
 802e728:	08030e80 	.word	0x08030e80

0802e72c <__register_exitproc>:
 802e72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e730:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802e7ec <__register_exitproc+0xc0>
 802e734:	4606      	mov	r6, r0
 802e736:	f8d8 0000 	ldr.w	r0, [r8]
 802e73a:	461f      	mov	r7, r3
 802e73c:	460d      	mov	r5, r1
 802e73e:	4691      	mov	r9, r2
 802e740:	f7ff fa29 	bl	802db96 <__retarget_lock_acquire_recursive>
 802e744:	4b25      	ldr	r3, [pc, #148]	; (802e7dc <__register_exitproc+0xb0>)
 802e746:	681c      	ldr	r4, [r3, #0]
 802e748:	b934      	cbnz	r4, 802e758 <__register_exitproc+0x2c>
 802e74a:	4c25      	ldr	r4, [pc, #148]	; (802e7e0 <__register_exitproc+0xb4>)
 802e74c:	601c      	str	r4, [r3, #0]
 802e74e:	4b25      	ldr	r3, [pc, #148]	; (802e7e4 <__register_exitproc+0xb8>)
 802e750:	b113      	cbz	r3, 802e758 <__register_exitproc+0x2c>
 802e752:	681b      	ldr	r3, [r3, #0]
 802e754:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802e758:	6863      	ldr	r3, [r4, #4]
 802e75a:	2b1f      	cmp	r3, #31
 802e75c:	dd07      	ble.n	802e76e <__register_exitproc+0x42>
 802e75e:	f8d8 0000 	ldr.w	r0, [r8]
 802e762:	f7ff fa1a 	bl	802db9a <__retarget_lock_release_recursive>
 802e766:	f04f 30ff 	mov.w	r0, #4294967295
 802e76a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802e76e:	b34e      	cbz	r6, 802e7c4 <__register_exitproc+0x98>
 802e770:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802e774:	b988      	cbnz	r0, 802e79a <__register_exitproc+0x6e>
 802e776:	4b1c      	ldr	r3, [pc, #112]	; (802e7e8 <__register_exitproc+0xbc>)
 802e778:	b923      	cbnz	r3, 802e784 <__register_exitproc+0x58>
 802e77a:	f8d8 0000 	ldr.w	r0, [r8]
 802e77e:	f7ff fa0b 	bl	802db98 <__retarget_lock_release>
 802e782:	e7f0      	b.n	802e766 <__register_exitproc+0x3a>
 802e784:	f44f 7084 	mov.w	r0, #264	; 0x108
 802e788:	f7ff fa08 	bl	802db9c <malloc>
 802e78c:	2800      	cmp	r0, #0
 802e78e:	d0f4      	beq.n	802e77a <__register_exitproc+0x4e>
 802e790:	2300      	movs	r3, #0
 802e792:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802e796:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802e79a:	6863      	ldr	r3, [r4, #4]
 802e79c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802e7a0:	2201      	movs	r2, #1
 802e7a2:	409a      	lsls	r2, r3
 802e7a4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802e7a8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802e7ac:	4313      	orrs	r3, r2
 802e7ae:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802e7b2:	2e02      	cmp	r6, #2
 802e7b4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802e7b8:	bf02      	ittt	eq
 802e7ba:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802e7be:	4313      	orreq	r3, r2
 802e7c0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802e7c4:	6863      	ldr	r3, [r4, #4]
 802e7c6:	f8d8 0000 	ldr.w	r0, [r8]
 802e7ca:	1c5a      	adds	r2, r3, #1
 802e7cc:	3302      	adds	r3, #2
 802e7ce:	6062      	str	r2, [r4, #4]
 802e7d0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802e7d4:	f7ff f9e1 	bl	802db9a <__retarget_lock_release_recursive>
 802e7d8:	2000      	movs	r0, #0
 802e7da:	e7c6      	b.n	802e76a <__register_exitproc+0x3e>
 802e7dc:	2000f40c 	.word	0x2000f40c
 802e7e0:	2000f380 	.word	0x2000f380
 802e7e4:	08030f18 	.word	0x08030f18
 802e7e8:	0802db9d 	.word	0x0802db9d
 802e7ec:	200000fc 	.word	0x200000fc

0802e7f0 <_close_r>:
 802e7f0:	b538      	push	{r3, r4, r5, lr}
 802e7f2:	4d06      	ldr	r5, [pc, #24]	; (802e80c <_close_r+0x1c>)
 802e7f4:	2300      	movs	r3, #0
 802e7f6:	4604      	mov	r4, r0
 802e7f8:	4608      	mov	r0, r1
 802e7fa:	602b      	str	r3, [r5, #0]
 802e7fc:	f7d5 fe07 	bl	800440e <_close>
 802e800:	1c43      	adds	r3, r0, #1
 802e802:	d102      	bne.n	802e80a <_close_r+0x1a>
 802e804:	682b      	ldr	r3, [r5, #0]
 802e806:	b103      	cbz	r3, 802e80a <_close_r+0x1a>
 802e808:	6023      	str	r3, [r4, #0]
 802e80a:	bd38      	pop	{r3, r4, r5, pc}
 802e80c:	2000f37c 	.word	0x2000f37c

0802e810 <__sflush_r>:
 802e810:	898a      	ldrh	r2, [r1, #12]
 802e812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e816:	4605      	mov	r5, r0
 802e818:	0710      	lsls	r0, r2, #28
 802e81a:	460c      	mov	r4, r1
 802e81c:	d458      	bmi.n	802e8d0 <__sflush_r+0xc0>
 802e81e:	684b      	ldr	r3, [r1, #4]
 802e820:	2b00      	cmp	r3, #0
 802e822:	dc05      	bgt.n	802e830 <__sflush_r+0x20>
 802e824:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802e826:	2b00      	cmp	r3, #0
 802e828:	dc02      	bgt.n	802e830 <__sflush_r+0x20>
 802e82a:	2000      	movs	r0, #0
 802e82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802e832:	2e00      	cmp	r6, #0
 802e834:	d0f9      	beq.n	802e82a <__sflush_r+0x1a>
 802e836:	2300      	movs	r3, #0
 802e838:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802e83c:	682f      	ldr	r7, [r5, #0]
 802e83e:	602b      	str	r3, [r5, #0]
 802e840:	d032      	beq.n	802e8a8 <__sflush_r+0x98>
 802e842:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802e844:	89a3      	ldrh	r3, [r4, #12]
 802e846:	075a      	lsls	r2, r3, #29
 802e848:	d505      	bpl.n	802e856 <__sflush_r+0x46>
 802e84a:	6863      	ldr	r3, [r4, #4]
 802e84c:	1ac0      	subs	r0, r0, r3
 802e84e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802e850:	b10b      	cbz	r3, 802e856 <__sflush_r+0x46>
 802e852:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802e854:	1ac0      	subs	r0, r0, r3
 802e856:	2300      	movs	r3, #0
 802e858:	4602      	mov	r2, r0
 802e85a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802e85c:	6a21      	ldr	r1, [r4, #32]
 802e85e:	4628      	mov	r0, r5
 802e860:	47b0      	blx	r6
 802e862:	1c43      	adds	r3, r0, #1
 802e864:	89a3      	ldrh	r3, [r4, #12]
 802e866:	d106      	bne.n	802e876 <__sflush_r+0x66>
 802e868:	6829      	ldr	r1, [r5, #0]
 802e86a:	291d      	cmp	r1, #29
 802e86c:	d82c      	bhi.n	802e8c8 <__sflush_r+0xb8>
 802e86e:	4a2a      	ldr	r2, [pc, #168]	; (802e918 <__sflush_r+0x108>)
 802e870:	40ca      	lsrs	r2, r1
 802e872:	07d6      	lsls	r6, r2, #31
 802e874:	d528      	bpl.n	802e8c8 <__sflush_r+0xb8>
 802e876:	2200      	movs	r2, #0
 802e878:	6062      	str	r2, [r4, #4]
 802e87a:	04d9      	lsls	r1, r3, #19
 802e87c:	6922      	ldr	r2, [r4, #16]
 802e87e:	6022      	str	r2, [r4, #0]
 802e880:	d504      	bpl.n	802e88c <__sflush_r+0x7c>
 802e882:	1c42      	adds	r2, r0, #1
 802e884:	d101      	bne.n	802e88a <__sflush_r+0x7a>
 802e886:	682b      	ldr	r3, [r5, #0]
 802e888:	b903      	cbnz	r3, 802e88c <__sflush_r+0x7c>
 802e88a:	6560      	str	r0, [r4, #84]	; 0x54
 802e88c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802e88e:	602f      	str	r7, [r5, #0]
 802e890:	2900      	cmp	r1, #0
 802e892:	d0ca      	beq.n	802e82a <__sflush_r+0x1a>
 802e894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802e898:	4299      	cmp	r1, r3
 802e89a:	d002      	beq.n	802e8a2 <__sflush_r+0x92>
 802e89c:	4628      	mov	r0, r5
 802e89e:	f7ff f9a3 	bl	802dbe8 <_free_r>
 802e8a2:	2000      	movs	r0, #0
 802e8a4:	6360      	str	r0, [r4, #52]	; 0x34
 802e8a6:	e7c1      	b.n	802e82c <__sflush_r+0x1c>
 802e8a8:	6a21      	ldr	r1, [r4, #32]
 802e8aa:	2301      	movs	r3, #1
 802e8ac:	4628      	mov	r0, r5
 802e8ae:	47b0      	blx	r6
 802e8b0:	1c41      	adds	r1, r0, #1
 802e8b2:	d1c7      	bne.n	802e844 <__sflush_r+0x34>
 802e8b4:	682b      	ldr	r3, [r5, #0]
 802e8b6:	2b00      	cmp	r3, #0
 802e8b8:	d0c4      	beq.n	802e844 <__sflush_r+0x34>
 802e8ba:	2b1d      	cmp	r3, #29
 802e8bc:	d001      	beq.n	802e8c2 <__sflush_r+0xb2>
 802e8be:	2b16      	cmp	r3, #22
 802e8c0:	d101      	bne.n	802e8c6 <__sflush_r+0xb6>
 802e8c2:	602f      	str	r7, [r5, #0]
 802e8c4:	e7b1      	b.n	802e82a <__sflush_r+0x1a>
 802e8c6:	89a3      	ldrh	r3, [r4, #12]
 802e8c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e8cc:	81a3      	strh	r3, [r4, #12]
 802e8ce:	e7ad      	b.n	802e82c <__sflush_r+0x1c>
 802e8d0:	690f      	ldr	r7, [r1, #16]
 802e8d2:	2f00      	cmp	r7, #0
 802e8d4:	d0a9      	beq.n	802e82a <__sflush_r+0x1a>
 802e8d6:	0793      	lsls	r3, r2, #30
 802e8d8:	680e      	ldr	r6, [r1, #0]
 802e8da:	bf08      	it	eq
 802e8dc:	694b      	ldreq	r3, [r1, #20]
 802e8de:	600f      	str	r7, [r1, #0]
 802e8e0:	bf18      	it	ne
 802e8e2:	2300      	movne	r3, #0
 802e8e4:	eba6 0807 	sub.w	r8, r6, r7
 802e8e8:	608b      	str	r3, [r1, #8]
 802e8ea:	f1b8 0f00 	cmp.w	r8, #0
 802e8ee:	dd9c      	ble.n	802e82a <__sflush_r+0x1a>
 802e8f0:	6a21      	ldr	r1, [r4, #32]
 802e8f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802e8f4:	4643      	mov	r3, r8
 802e8f6:	463a      	mov	r2, r7
 802e8f8:	4628      	mov	r0, r5
 802e8fa:	47b0      	blx	r6
 802e8fc:	2800      	cmp	r0, #0
 802e8fe:	dc06      	bgt.n	802e90e <__sflush_r+0xfe>
 802e900:	89a3      	ldrh	r3, [r4, #12]
 802e902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802e906:	81a3      	strh	r3, [r4, #12]
 802e908:	f04f 30ff 	mov.w	r0, #4294967295
 802e90c:	e78e      	b.n	802e82c <__sflush_r+0x1c>
 802e90e:	4407      	add	r7, r0
 802e910:	eba8 0800 	sub.w	r8, r8, r0
 802e914:	e7e9      	b.n	802e8ea <__sflush_r+0xda>
 802e916:	bf00      	nop
 802e918:	20400001 	.word	0x20400001

0802e91c <_fflush_r>:
 802e91c:	b538      	push	{r3, r4, r5, lr}
 802e91e:	690b      	ldr	r3, [r1, #16]
 802e920:	4605      	mov	r5, r0
 802e922:	460c      	mov	r4, r1
 802e924:	b913      	cbnz	r3, 802e92c <_fflush_r+0x10>
 802e926:	2500      	movs	r5, #0
 802e928:	4628      	mov	r0, r5
 802e92a:	bd38      	pop	{r3, r4, r5, pc}
 802e92c:	b118      	cbz	r0, 802e936 <_fflush_r+0x1a>
 802e92e:	6983      	ldr	r3, [r0, #24]
 802e930:	b90b      	cbnz	r3, 802e936 <_fflush_r+0x1a>
 802e932:	f7ff f85b 	bl	802d9ec <__sinit>
 802e936:	4b14      	ldr	r3, [pc, #80]	; (802e988 <_fflush_r+0x6c>)
 802e938:	429c      	cmp	r4, r3
 802e93a:	d11b      	bne.n	802e974 <_fflush_r+0x58>
 802e93c:	686c      	ldr	r4, [r5, #4]
 802e93e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802e942:	2b00      	cmp	r3, #0
 802e944:	d0ef      	beq.n	802e926 <_fflush_r+0xa>
 802e946:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802e948:	07d0      	lsls	r0, r2, #31
 802e94a:	d404      	bmi.n	802e956 <_fflush_r+0x3a>
 802e94c:	0599      	lsls	r1, r3, #22
 802e94e:	d402      	bmi.n	802e956 <_fflush_r+0x3a>
 802e950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e952:	f7ff f920 	bl	802db96 <__retarget_lock_acquire_recursive>
 802e956:	4628      	mov	r0, r5
 802e958:	4621      	mov	r1, r4
 802e95a:	f7ff ff59 	bl	802e810 <__sflush_r>
 802e95e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802e960:	07da      	lsls	r2, r3, #31
 802e962:	4605      	mov	r5, r0
 802e964:	d4e0      	bmi.n	802e928 <_fflush_r+0xc>
 802e966:	89a3      	ldrh	r3, [r4, #12]
 802e968:	059b      	lsls	r3, r3, #22
 802e96a:	d4dd      	bmi.n	802e928 <_fflush_r+0xc>
 802e96c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802e96e:	f7ff f914 	bl	802db9a <__retarget_lock_release_recursive>
 802e972:	e7d9      	b.n	802e928 <_fflush_r+0xc>
 802e974:	4b05      	ldr	r3, [pc, #20]	; (802e98c <_fflush_r+0x70>)
 802e976:	429c      	cmp	r4, r3
 802e978:	d101      	bne.n	802e97e <_fflush_r+0x62>
 802e97a:	68ac      	ldr	r4, [r5, #8]
 802e97c:	e7df      	b.n	802e93e <_fflush_r+0x22>
 802e97e:	4b04      	ldr	r3, [pc, #16]	; (802e990 <_fflush_r+0x74>)
 802e980:	429c      	cmp	r4, r3
 802e982:	bf08      	it	eq
 802e984:	68ec      	ldreq	r4, [r5, #12]
 802e986:	e7da      	b.n	802e93e <_fflush_r+0x22>
 802e988:	08030ea0 	.word	0x08030ea0
 802e98c:	08030ec0 	.word	0x08030ec0
 802e990:	08030e80 	.word	0x08030e80

0802e994 <_lseek_r>:
 802e994:	b538      	push	{r3, r4, r5, lr}
 802e996:	4d07      	ldr	r5, [pc, #28]	; (802e9b4 <_lseek_r+0x20>)
 802e998:	4604      	mov	r4, r0
 802e99a:	4608      	mov	r0, r1
 802e99c:	4611      	mov	r1, r2
 802e99e:	2200      	movs	r2, #0
 802e9a0:	602a      	str	r2, [r5, #0]
 802e9a2:	461a      	mov	r2, r3
 802e9a4:	f7d5 fd5a 	bl	800445c <_lseek>
 802e9a8:	1c43      	adds	r3, r0, #1
 802e9aa:	d102      	bne.n	802e9b2 <_lseek_r+0x1e>
 802e9ac:	682b      	ldr	r3, [r5, #0]
 802e9ae:	b103      	cbz	r3, 802e9b2 <_lseek_r+0x1e>
 802e9b0:	6023      	str	r3, [r4, #0]
 802e9b2:	bd38      	pop	{r3, r4, r5, pc}
 802e9b4:	2000f37c 	.word	0x2000f37c

0802e9b8 <__swhatbuf_r>:
 802e9b8:	b570      	push	{r4, r5, r6, lr}
 802e9ba:	460e      	mov	r6, r1
 802e9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802e9c0:	2900      	cmp	r1, #0
 802e9c2:	b096      	sub	sp, #88	; 0x58
 802e9c4:	4614      	mov	r4, r2
 802e9c6:	461d      	mov	r5, r3
 802e9c8:	da08      	bge.n	802e9dc <__swhatbuf_r+0x24>
 802e9ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802e9ce:	2200      	movs	r2, #0
 802e9d0:	602a      	str	r2, [r5, #0]
 802e9d2:	061a      	lsls	r2, r3, #24
 802e9d4:	d410      	bmi.n	802e9f8 <__swhatbuf_r+0x40>
 802e9d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802e9da:	e00e      	b.n	802e9fa <__swhatbuf_r+0x42>
 802e9dc:	466a      	mov	r2, sp
 802e9de:	f000 f86f 	bl	802eac0 <_fstat_r>
 802e9e2:	2800      	cmp	r0, #0
 802e9e4:	dbf1      	blt.n	802e9ca <__swhatbuf_r+0x12>
 802e9e6:	9a01      	ldr	r2, [sp, #4]
 802e9e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802e9ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802e9f0:	425a      	negs	r2, r3
 802e9f2:	415a      	adcs	r2, r3
 802e9f4:	602a      	str	r2, [r5, #0]
 802e9f6:	e7ee      	b.n	802e9d6 <__swhatbuf_r+0x1e>
 802e9f8:	2340      	movs	r3, #64	; 0x40
 802e9fa:	2000      	movs	r0, #0
 802e9fc:	6023      	str	r3, [r4, #0]
 802e9fe:	b016      	add	sp, #88	; 0x58
 802ea00:	bd70      	pop	{r4, r5, r6, pc}
	...

0802ea04 <__smakebuf_r>:
 802ea04:	898b      	ldrh	r3, [r1, #12]
 802ea06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802ea08:	079d      	lsls	r5, r3, #30
 802ea0a:	4606      	mov	r6, r0
 802ea0c:	460c      	mov	r4, r1
 802ea0e:	d507      	bpl.n	802ea20 <__smakebuf_r+0x1c>
 802ea10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802ea14:	6023      	str	r3, [r4, #0]
 802ea16:	6123      	str	r3, [r4, #16]
 802ea18:	2301      	movs	r3, #1
 802ea1a:	6163      	str	r3, [r4, #20]
 802ea1c:	b002      	add	sp, #8
 802ea1e:	bd70      	pop	{r4, r5, r6, pc}
 802ea20:	ab01      	add	r3, sp, #4
 802ea22:	466a      	mov	r2, sp
 802ea24:	f7ff ffc8 	bl	802e9b8 <__swhatbuf_r>
 802ea28:	9900      	ldr	r1, [sp, #0]
 802ea2a:	4605      	mov	r5, r0
 802ea2c:	4630      	mov	r0, r6
 802ea2e:	f7ff f947 	bl	802dcc0 <_malloc_r>
 802ea32:	b948      	cbnz	r0, 802ea48 <__smakebuf_r+0x44>
 802ea34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ea38:	059a      	lsls	r2, r3, #22
 802ea3a:	d4ef      	bmi.n	802ea1c <__smakebuf_r+0x18>
 802ea3c:	f023 0303 	bic.w	r3, r3, #3
 802ea40:	f043 0302 	orr.w	r3, r3, #2
 802ea44:	81a3      	strh	r3, [r4, #12]
 802ea46:	e7e3      	b.n	802ea10 <__smakebuf_r+0xc>
 802ea48:	4b0d      	ldr	r3, [pc, #52]	; (802ea80 <__smakebuf_r+0x7c>)
 802ea4a:	62b3      	str	r3, [r6, #40]	; 0x28
 802ea4c:	89a3      	ldrh	r3, [r4, #12]
 802ea4e:	6020      	str	r0, [r4, #0]
 802ea50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802ea54:	81a3      	strh	r3, [r4, #12]
 802ea56:	9b00      	ldr	r3, [sp, #0]
 802ea58:	6163      	str	r3, [r4, #20]
 802ea5a:	9b01      	ldr	r3, [sp, #4]
 802ea5c:	6120      	str	r0, [r4, #16]
 802ea5e:	b15b      	cbz	r3, 802ea78 <__smakebuf_r+0x74>
 802ea60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ea64:	4630      	mov	r0, r6
 802ea66:	f000 f83d 	bl	802eae4 <_isatty_r>
 802ea6a:	b128      	cbz	r0, 802ea78 <__smakebuf_r+0x74>
 802ea6c:	89a3      	ldrh	r3, [r4, #12]
 802ea6e:	f023 0303 	bic.w	r3, r3, #3
 802ea72:	f043 0301 	orr.w	r3, r3, #1
 802ea76:	81a3      	strh	r3, [r4, #12]
 802ea78:	89a0      	ldrh	r0, [r4, #12]
 802ea7a:	4305      	orrs	r5, r0
 802ea7c:	81a5      	strh	r5, [r4, #12]
 802ea7e:	e7cd      	b.n	802ea1c <__smakebuf_r+0x18>
 802ea80:	0802d985 	.word	0x0802d985

0802ea84 <__malloc_lock>:
 802ea84:	4801      	ldr	r0, [pc, #4]	; (802ea8c <__malloc_lock+0x8>)
 802ea86:	f7ff b886 	b.w	802db96 <__retarget_lock_acquire_recursive>
 802ea8a:	bf00      	nop
 802ea8c:	2000f269 	.word	0x2000f269

0802ea90 <__malloc_unlock>:
 802ea90:	4801      	ldr	r0, [pc, #4]	; (802ea98 <__malloc_unlock+0x8>)
 802ea92:	f7ff b882 	b.w	802db9a <__retarget_lock_release_recursive>
 802ea96:	bf00      	nop
 802ea98:	2000f269 	.word	0x2000f269

0802ea9c <_read_r>:
 802ea9c:	b538      	push	{r3, r4, r5, lr}
 802ea9e:	4d07      	ldr	r5, [pc, #28]	; (802eabc <_read_r+0x20>)
 802eaa0:	4604      	mov	r4, r0
 802eaa2:	4608      	mov	r0, r1
 802eaa4:	4611      	mov	r1, r2
 802eaa6:	2200      	movs	r2, #0
 802eaa8:	602a      	str	r2, [r5, #0]
 802eaaa:	461a      	mov	r2, r3
 802eaac:	f7d5 fc76 	bl	800439c <_read>
 802eab0:	1c43      	adds	r3, r0, #1
 802eab2:	d102      	bne.n	802eaba <_read_r+0x1e>
 802eab4:	682b      	ldr	r3, [r5, #0]
 802eab6:	b103      	cbz	r3, 802eaba <_read_r+0x1e>
 802eab8:	6023      	str	r3, [r4, #0]
 802eaba:	bd38      	pop	{r3, r4, r5, pc}
 802eabc:	2000f37c 	.word	0x2000f37c

0802eac0 <_fstat_r>:
 802eac0:	b538      	push	{r3, r4, r5, lr}
 802eac2:	4d07      	ldr	r5, [pc, #28]	; (802eae0 <_fstat_r+0x20>)
 802eac4:	2300      	movs	r3, #0
 802eac6:	4604      	mov	r4, r0
 802eac8:	4608      	mov	r0, r1
 802eaca:	4611      	mov	r1, r2
 802eacc:	602b      	str	r3, [r5, #0]
 802eace:	f7d5 fcaa 	bl	8004426 <_fstat>
 802ead2:	1c43      	adds	r3, r0, #1
 802ead4:	d102      	bne.n	802eadc <_fstat_r+0x1c>
 802ead6:	682b      	ldr	r3, [r5, #0]
 802ead8:	b103      	cbz	r3, 802eadc <_fstat_r+0x1c>
 802eada:	6023      	str	r3, [r4, #0]
 802eadc:	bd38      	pop	{r3, r4, r5, pc}
 802eade:	bf00      	nop
 802eae0:	2000f37c 	.word	0x2000f37c

0802eae4 <_isatty_r>:
 802eae4:	b538      	push	{r3, r4, r5, lr}
 802eae6:	4d06      	ldr	r5, [pc, #24]	; (802eb00 <_isatty_r+0x1c>)
 802eae8:	2300      	movs	r3, #0
 802eaea:	4604      	mov	r4, r0
 802eaec:	4608      	mov	r0, r1
 802eaee:	602b      	str	r3, [r5, #0]
 802eaf0:	f7d5 fca9 	bl	8004446 <_isatty>
 802eaf4:	1c43      	adds	r3, r0, #1
 802eaf6:	d102      	bne.n	802eafe <_isatty_r+0x1a>
 802eaf8:	682b      	ldr	r3, [r5, #0]
 802eafa:	b103      	cbz	r3, 802eafe <_isatty_r+0x1a>
 802eafc:	6023      	str	r3, [r4, #0]
 802eafe:	bd38      	pop	{r3, r4, r5, pc}
 802eb00:	2000f37c 	.word	0x2000f37c

0802eb04 <_init>:
 802eb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802eb06:	bf00      	nop
 802eb08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802eb0a:	bc08      	pop	{r3}
 802eb0c:	469e      	mov	lr, r3
 802eb0e:	4770      	bx	lr

0802eb10 <_fini>:
 802eb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802eb12:	bf00      	nop
 802eb14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802eb16:	bc08      	pop	{r3}
 802eb18:	469e      	mov	lr, r3
 802eb1a:	4770      	bx	lr
