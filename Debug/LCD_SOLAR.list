
LCD_SOLAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002a954  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002518  0802ab04  0802ab04  0003ab04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00008fc8  0802d01c  0802d01c  0003d01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000010  08035fe4  08035fe4  00045fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 IntFlashSection 00014728  08035ff4  08035ff4  00045ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000020  0804a71c  0804a71c  0005a71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0804a73c  0804a73c  00060100  2**0
                  CONTENTS
  8 .ARM          00000008  0804a73c  0804a73c  0005a73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0804a744  0804a744  00060100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  0804a744  0804a744  0005a744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0804a758  0804a758  0005a758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000100  20000000  0804a760  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ccmram       00000000  10000000  10000000  00060100  2**0
                  CONTENTS
 14 .bss          0000abf8  20000100  20000100  00060100  2**2
                  ALLOC
 15 ._user_heap_stack 00000c00  2000acf8  2000acf8  00060100  2**0
                  ALLOC
 16 .ARM.attributes 00000030  00000000  00000000  00060100  2**0
                  CONTENTS, READONLY
 17 .debug_info   000a260e  00000000  00000000  00060130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00012915  00000000  00000000  0010273e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00004718  00000000  00000000  00115058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000041b8  00000000  00000000  00119770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00034e9c  00000000  00000000  0011d928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004cdf3  00000000  00000000  001527c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    00121d44  00000000  00000000  0019f5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000cf  00000000  00000000  002c12fb  2**0
                  CONTENTS, READONLY
 25 .debug_frame  000138bc  00000000  00000000  002c13cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .stab         000000cc  00000000  00000000  002d4c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 27 .stabstr      000001b9  00000000  00000000  002d4d54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000100 	.word	0x20000100
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0802aaec 	.word	0x0802aaec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000104 	.word	0x20000104
 80001ec:	0802aaec 	.word	0x0802aaec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b974 	b.w	8000e0c <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468e      	mov	lr, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14d      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4694      	mov	ip, r2
 8000b4e:	d969      	bls.n	8000c24 <__udivmoddi4+0xe8>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b152      	cbz	r2, 8000b6c <__udivmoddi4+0x30>
 8000b56:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5a:	f1c2 0120 	rsb	r1, r2, #32
 8000b5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b66:	ea41 0e03 	orr.w	lr, r1, r3
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	0c21      	lsrs	r1, r4, #16
 8000b72:	fbbe f6f8 	udiv	r6, lr, r8
 8000b76:	fa1f f78c 	uxth.w	r7, ip
 8000b7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b82:	fb06 f107 	mul.w	r1, r6, r7
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b92:	f080 811f 	bcs.w	8000dd4 <__udivmoddi4+0x298>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 811c 	bls.w	8000dd4 <__udivmoddi4+0x298>
 8000b9c:	3e02      	subs	r6, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 f707 	mul.w	r7, r0, r7
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x92>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc0:	f080 810a 	bcs.w	8000dd8 <__udivmoddi4+0x29c>
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	f240 8107 	bls.w	8000dd8 <__udivmoddi4+0x29c>
 8000bca:	4464      	add	r4, ip
 8000bcc:	3802      	subs	r0, #2
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	1be4      	subs	r4, r4, r7
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	b11d      	cbz	r5, 8000be0 <__udivmoddi4+0xa4>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000be0:	4631      	mov	r1, r6
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xc2>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80ef 	beq.w	8000dce <__udivmoddi4+0x292>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x160>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd4>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80f9 	bhi.w	8000e02 <__udivmoddi4+0x2c6>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	469e      	mov	lr, r3
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa4>
 8000c1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xec>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 8092 	bne.w	8000d56 <__udivmoddi4+0x21a>
 8000c32:	eba1 010c 	sub.w	r1, r1, ip
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f fe8c 	uxth.w	lr, ip
 8000c3e:	2601      	movs	r6, #1
 8000c40:	0c20      	lsrs	r0, r4, #16
 8000c42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c46:	fb07 1113 	mls	r1, r7, r3, r1
 8000c4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c4e:	fb0e f003 	mul.w	r0, lr, r3
 8000c52:	4288      	cmp	r0, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x12c>
 8000c56:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x12a>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f200 80cb 	bhi.w	8000dfc <__udivmoddi4+0x2c0>
 8000c66:	4643      	mov	r3, r8
 8000c68:	1a09      	subs	r1, r1, r0
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c70:	fb07 1110 	mls	r1, r7, r0, r1
 8000c74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c78:	fb0e fe00 	mul.w	lr, lr, r0
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x156>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x154>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f200 80bb 	bhi.w	8000e06 <__udivmoddi4+0x2ca>
 8000c90:	4608      	mov	r0, r1
 8000c92:	eba4 040e 	sub.w	r4, r4, lr
 8000c96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c9a:	e79c      	b.n	8000bd6 <__udivmoddi4+0x9a>
 8000c9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ca0:	40b3      	lsls	r3, r6
 8000ca2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ca6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000caa:	fa20 f407 	lsr.w	r4, r0, r7
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	431c      	orrs	r4, r3
 8000cb4:	40f9      	lsrs	r1, r7
 8000cb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cba:	fa00 f306 	lsl.w	r3, r0, r6
 8000cbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cc2:	0c20      	lsrs	r0, r4, #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ccc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b8>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce4:	f080 8088 	bcs.w	8000df8 <__udivmoddi4+0x2bc>
 8000ce8:	4288      	cmp	r0, r1
 8000cea:	f240 8085 	bls.w	8000df8 <__udivmoddi4+0x2bc>
 8000cee:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000d00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d08:	458e      	cmp	lr, r1
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1e2>
 8000d0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d14:	d26c      	bcs.n	8000df0 <__udivmoddi4+0x2b4>
 8000d16:	458e      	cmp	lr, r1
 8000d18:	d96a      	bls.n	8000df0 <__udivmoddi4+0x2b4>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4461      	add	r1, ip
 8000d1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d22:	fba0 9402 	umull	r9, r4, r0, r2
 8000d26:	eba1 010e 	sub.w	r1, r1, lr
 8000d2a:	42a1      	cmp	r1, r4
 8000d2c:	46c8      	mov	r8, r9
 8000d2e:	46a6      	mov	lr, r4
 8000d30:	d356      	bcc.n	8000de0 <__udivmoddi4+0x2a4>
 8000d32:	d053      	beq.n	8000ddc <__udivmoddi4+0x2a0>
 8000d34:	b15d      	cbz	r5, 8000d4e <__udivmoddi4+0x212>
 8000d36:	ebb3 0208 	subs.w	r2, r3, r8
 8000d3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d42:	fa22 f306 	lsr.w	r3, r2, r6
 8000d46:	40f1      	lsrs	r1, r6
 8000d48:	431f      	orrs	r7, r3
 8000d4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d4e:	2600      	movs	r6, #0
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	f1c2 0320 	rsb	r3, r2, #32
 8000d5a:	40d8      	lsrs	r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	fa21 f303 	lsr.w	r3, r1, r3
 8000d64:	4091      	lsls	r1, r2
 8000d66:	4301      	orrs	r1, r0
 8000d68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d74:	fb07 3610 	mls	r6, r7, r0, r3
 8000d78:	0c0b      	lsrs	r3, r1, #16
 8000d7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d82:	429e      	cmp	r6, r3
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x260>
 8000d8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d92:	d22f      	bcs.n	8000df4 <__udivmoddi4+0x2b8>
 8000d94:	429e      	cmp	r6, r3
 8000d96:	d92d      	bls.n	8000df4 <__udivmoddi4+0x2b8>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	b289      	uxth	r1, r1
 8000da0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000da4:	fb07 3316 	mls	r3, r7, r6, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb06 f30e 	mul.w	r3, r6, lr
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x28a>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dbc:	d216      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d914      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000dc2:	3e02      	subs	r6, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	1ac9      	subs	r1, r1, r3
 8000dc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dcc:	e738      	b.n	8000c40 <__udivmoddi4+0x104>
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e705      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e3      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6f8      	b.n	8000bce <__udivmoddi4+0x92>
 8000ddc:	454b      	cmp	r3, r9
 8000dde:	d2a9      	bcs.n	8000d34 <__udivmoddi4+0x1f8>
 8000de0:	ebb9 0802 	subs.w	r8, r9, r2
 8000de4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7a3      	b.n	8000d34 <__udivmoddi4+0x1f8>
 8000dec:	4646      	mov	r6, r8
 8000dee:	e7ea      	b.n	8000dc6 <__udivmoddi4+0x28a>
 8000df0:	4620      	mov	r0, r4
 8000df2:	e794      	b.n	8000d1e <__udivmoddi4+0x1e2>
 8000df4:	4640      	mov	r0, r8
 8000df6:	e7d1      	b.n	8000d9c <__udivmoddi4+0x260>
 8000df8:	46d0      	mov	r8, sl
 8000dfa:	e77b      	b.n	8000cf4 <__udivmoddi4+0x1b8>
 8000dfc:	3b02      	subs	r3, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	e732      	b.n	8000c68 <__udivmoddi4+0x12c>
 8000e02:	4630      	mov	r0, r6
 8000e04:	e709      	b.n	8000c1a <__udivmoddi4+0xde>
 8000e06:	4464      	add	r4, ip
 8000e08:	3802      	subs	r0, #2
 8000e0a:	e742      	b.n	8000c92 <__udivmoddi4+0x156>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <FT5XX6_Init>:

//=============================================================================
// Init touch panel driver
//=============================================================================
uint8_t FT5XX6_Init(I2C_HandleTypeDef i2c_handle)
{
 8000e10:	b084      	sub	sp, #16
 8000e12:	b580      	push	{r7, lr}
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	f107 0c08 	add.w	ip, r7, #8
 8000e1a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c=i2c_handle;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <FT5XX6_Init+0x54>)
 8000e20:	4618      	mov	r0, r3
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	2254      	movs	r2, #84	; 0x54
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f028 fe6b 	bl	8029b04 <memcpy>

	if(HAL_I2C_IsDeviceReady(&hi2c,FT5XX6_ADDR, 5, FT5XX6_TIMEOUT) == HAL_OK )
 8000e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e32:	2205      	movs	r2, #5
 8000e34:	2170      	movs	r1, #112	; 0x70
 8000e36:	480b      	ldr	r0, [pc, #44]	; (8000e64 <FT5XX6_Init+0x54>)
 8000e38:	f007 f880 	bl	8007f3c <HAL_I2C_IsDeviceReady>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d109      	bne.n	8000e56 <FT5XX6_Init+0x46>
	{
		FT5XX6_Write(FT5XX6_MODE,0);		//working mode
 8000e42:	2100      	movs	r1, #0
 8000e44:	2000      	movs	r0, #0
 8000e46:	f000 f80f 	bl	8000e68 <FT5XX6_Write>
		FT5XX6_Write(FT5XX6_GMODE,0);		//polling mode
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	20a4      	movs	r0, #164	; 0xa4
 8000e4e:	f000 f80b 	bl	8000e68 <FT5XX6_Write>
		return 1;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e000      	b.n	8000e58 <FT5XX6_Init+0x48>
	}
	else
		return 0;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e60:	b004      	add	sp, #16
 8000e62:	4770      	bx	lr
 8000e64:	2000011c 	.word	0x2000011c

08000e68 <FT5XX6_Write>:
//=============================================================================
// Write data to touch panel driver
//=============================================================================
void FT5XX6_Write(uint8_t reg_addr, uint8_t byte_2_write)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	4603      	mov	r3, r0
 8000e70:	460a      	mov	r2, r1
 8000e72:	71fb      	strb	r3, [r7, #7]
 8000e74:	4613      	mov	r3, r2
 8000e76:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];

    data[0] = reg_addr;
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	733b      	strb	r3, [r7, #12]
    data[1] = byte_2_write;
 8000e7c:	79bb      	ldrb	r3, [r7, #6]
 8000e7e:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c, FT5XX6_ADDR, (uint8_t *)data, 2, FT5XX6_TIMEOUT);
 8000e80:	f107 020c 	add.w	r2, r7, #12
 8000e84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	2170      	movs	r1, #112	; 0x70
 8000e8e:	4803      	ldr	r0, [pc, #12]	; (8000e9c <FT5XX6_Write+0x34>)
 8000e90:	f006 fd30 	bl	80078f4 <HAL_I2C_Master_Transmit>
}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	2000011c 	.word	0x2000011c

08000ea0 <FT5XX6_ReadPoint>:
}
//=============================================================================
// Read single touch point data
//=============================================================================
CTP_point_data FT5XX6_ReadPoint(uint8_t point_num)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af04      	add	r7, sp, #16
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	70fb      	strb	r3, [r7, #3]
	uint8_t data[FT5XX6_TOUCH_DATA_LEN];
	uint8_t reg_addr=FT5XX6_TOUCH_DATA_PTR+(point_num*FT5XX6_TOUCH_DATA_LEN);  //6 bytes per point
 8000eac:	78fb      	ldrb	r3, [r7, #3]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	0052      	lsls	r2, r2, #1
 8000eb2:	4413      	add	r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	3303      	adds	r3, #3
 8000eba:	75fb      	strb	r3, [r7, #23]
	CTP_point_data point={0,0,0,0,0,0};
 8000ebc:	f107 0308 	add.w	r3, r7, #8
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]

	HAL_I2C_Mem_Read(&hi2c,FT5XX6_ADDR, reg_addr,1,data,FT5XX6_TOUCH_DATA_LEN,1000);
 8000ec6:	7dfb      	ldrb	r3, [r7, #23]
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	9302      	str	r3, [sp, #8]
 8000ed0:	2306      	movs	r3, #6
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2301      	movs	r3, #1
 8000edc:	2170      	movs	r1, #112	; 0x70
 8000ede:	481a      	ldr	r0, [pc, #104]	; (8000f48 <FT5XX6_ReadPoint+0xa8>)
 8000ee0:	f006 fe06 	bl	8007af0 <HAL_I2C_Mem_Read>

	point.event=(data[0]&0xC0)>>6;
 8000ee4:	7c3b      	ldrb	r3, [r7, #16]
 8000ee6:	099b      	lsrs	r3, r3, #6
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	73bb      	strb	r3, [r7, #14]
	point.y= FT5XX6_FLIP_AXIS == 1 ? (data[0]&0x0F)<<8|data[1] : (data[2]&0x0F)<<8|data[3];
 8000eec:	7c3b      	ldrb	r3, [r7, #16]
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	b21b      	sxth	r3, r3
 8000ef2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	7c7b      	ldrb	r3, [r7, #17]
 8000efa:	b21b      	sxth	r3, r3
 8000efc:	4313      	orrs	r3, r2
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	817b      	strh	r3, [r7, #10]
	point.id=(data[2]&0xF0)>>4;
 8000f04:	7cbb      	ldrb	r3, [r7, #18]
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	737b      	strb	r3, [r7, #13]
	point.x=FT5XX6_FLIP_AXIS == 1 ? (data[2]&0x0F)<<8|data[3] : (data[0]&0x0F)<<8|data[1];
 8000f0c:	7cbb      	ldrb	r3, [r7, #18]
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000f16:	b21a      	sxth	r2, r3
 8000f18:	7cfb      	ldrb	r3, [r7, #19]
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b21b      	sxth	r3, r3
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	813b      	strh	r3, [r7, #8]
	point.pressure=data[4];
 8000f24:	7d3b      	ldrb	r3, [r7, #20]
 8000f26:	733b      	strb	r3, [r7, #12]
	point.area=(data[5]&0xF0)>>4;
 8000f28:	7d7b      	ldrb	r3, [r7, #21]
 8000f2a:	091b      	lsrs	r3, r3, #4
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	73fb      	strb	r3, [r7, #15]

	return point;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	461a      	mov	r2, r3
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	cb03      	ldmia	r3!, {r0, r1}
 8000f3a:	6010      	str	r0, [r2, #0]
 8000f3c:	6051      	str	r1, [r2, #4]
}
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000011c 	.word	0x2000011c

08000f4c <TOUCH_Init>:
extern I2C_HandleTypeDef hi2c2;  //i2c port for touch screen
//=============================================================================
// TOUCH
//=============================================================================
void TOUCH_Init(void)
{
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b093      	sub	sp, #76	; 0x4c
 8000f50:	af12      	add	r7, sp, #72	; 0x48
	// Configure touch GPIOs externally (CubeMx)
	  FT5XX6_Init(hi2c2);
 8000f52:	4c08      	ldr	r4, [pc, #32]	; (8000f74 <TOUCH_Init+0x28>)
 8000f54:	4668      	mov	r0, sp
 8000f56:	f104 0310 	add.w	r3, r4, #16
 8000f5a:	2244      	movs	r2, #68	; 0x44
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f028 fdd1 	bl	8029b04 <memcpy>
 8000f62:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f66:	f7ff ff53 	bl	8000e10 <FT5XX6_Init>
}
 8000f6a:	bf00      	nop
 8000f6c:	3704      	adds	r7, #4
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd90      	pop	{r4, r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000996c 	.word	0x2000996c

08000f78 <TOUCH_IsPressed>:

uint8_t TOUCH_IsPressed(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
    return isPressed;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <TOUCH_IsPressed+0x14>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000170 	.word	0x20000170

08000f90 <TOUCH_Set>:
void TOUCH_Set(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
    isPressed=1;
 8000f94:	4b03      	ldr	r3, [pc, #12]	; (8000fa4 <TOUCH_Set+0x14>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	20000170 	.word	0x20000170

08000fa8 <TOUCH_Reset>:

void TOUCH_Reset(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(INT_PORT,INT_PIN)==GPIO_PIN_SET) //reset touch state if INT goes high
 8000fac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <TOUCH_Reset+0x20>)
 8000fb2:	f006 faf7 	bl	80075a4 <HAL_GPIO_ReadPin>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d102      	bne.n	8000fc2 <TOUCH_Reset+0x1a>
		isPressed=0;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <TOUCH_Reset+0x24>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40022000 	.word	0x40022000
 8000fcc:	20000170 	.word	0x20000170

08000fd0 <TOUCH_GetData>:

TOUCH_Data TOUCH_GetData(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	TOUCH_Data td={0,0,0};
 8000fd8:	2300      	movs	r3, #0
 8000fda:	823b      	strh	r3, [r7, #16]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	827b      	strh	r3, [r7, #18]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	753b      	strb	r3, [r7, #20]
	CTP_point_data cpd=FT5XX6_ReadPoint(0);   // only reading first touch point
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ff58 	bl	8000ea0 <FT5XX6_ReadPoint>

	td.x=cpd.x;
 8000ff0:	893b      	ldrh	r3, [r7, #8]
 8000ff2:	823b      	strh	r3, [r7, #16]
	td.y=cpd.y;
 8000ff4:	897b      	ldrh	r3, [r7, #10]
 8000ff6:	827b      	strh	r3, [r7, #18]
	td.p=cpd.pressure;
 8000ff8:	7b3b      	ldrb	r3, [r7, #12]
 8000ffa:	753b      	strb	r3, [r7, #20]

	return td;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	461a      	mov	r2, r3
 8001000:	f107 0310 	add.w	r3, r7, #16
 8001004:	6818      	ldr	r0, [r3, #0]
 8001006:	6010      	str	r0, [r2, #0]
 8001008:	889b      	ldrh	r3, [r3, #4]
 800100a:	8093      	strh	r3, [r2, #4]
}
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <DMA_Callback>:
#include "WS2812_Lib.h"

uint16_t WS2812_TIM_BUF[WS2812_BUFLEN];
uint8_t dma_ready = 1;

void DMA_Callback(void) {
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
	dma_ready = 1;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <DMA_Callback+0x14>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	20000004 	.word	0x20000004
 800102c:	00000000 	.word	0x00000000

08001030 <calcBuf>:
/**
 * Internal function, calculates the HI or LO values for the 800 kHz WS2812 signal and puts them into a buffer for the Timer-DMA
 *
 */
void calcBuf(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
  uint32_t n;
  uint32_t pos;

  pos=0;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  // set timings for all LEDs
  for(n=0;n<WS2812_NUM_LEDS_CH1;n++) {
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	f000 bef6 	b.w	8001e2e <calcBuf+0xdfe>

	WS2812_RGB_t led = WS2812_LED_BUF_CH1[n];
 8001042:	49c5      	ldr	r1, [pc, #788]	; (8001358 <calcBuf+0x328>)
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	4613      	mov	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4413      	add	r3, r2
 800104c:	18ca      	adds	r2, r1, r3
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	8811      	ldrh	r1, [r2, #0]
 8001054:	7892      	ldrb	r2, [r2, #2]
 8001056:	8019      	strh	r1, [r3, #0]
 8001058:	709a      	strb	r2, [r3, #2]
	float brightness = Current_Status.LED_BRIGHTNESS / 100.0;
 800105a:	4bc0      	ldr	r3, [pc, #768]	; (800135c <calcBuf+0x32c>)
 800105c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa67 	bl	8000534 <__aeabi_i2d>
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	4bbd      	ldr	r3, [pc, #756]	; (8001360 <calcBuf+0x330>)
 800106c:	f7ff fbf6 	bl	800085c <__aeabi_ddiv>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f7ff fcf8 	bl	8000a6c <__aeabi_d2f>
 800107c:	4603      	mov	r3, r0
 800107e:	60fb      	str	r3, [r7, #12]

    led.red = (uint8_t)(led.red * brightness);
 8001080:	7a3b      	ldrb	r3, [r7, #8]
 8001082:	ee07 3a90 	vmov	s15, r3
 8001086:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800108a:	edd7 7a03 	vldr	s15, [r7, #12]
 800108e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001096:	edc7 7a01 	vstr	s15, [r7, #4]
 800109a:	793b      	ldrb	r3, [r7, #4]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	723b      	strb	r3, [r7, #8]
    led.green = (uint8_t)(led.green * brightness);
 80010a0:	7a7b      	ldrb	r3, [r7, #9]
 80010a2:	ee07 3a90 	vmov	s15, r3
 80010a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010b6:	edc7 7a01 	vstr	s15, [r7, #4]
 80010ba:	793b      	ldrb	r3, [r7, #4]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	727b      	strb	r3, [r7, #9]
    led.blue = (uint8_t)(led.blue * brightness);
 80010c0:	7abb      	ldrb	r3, [r7, #10]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010d6:	edc7 7a01 	vstr	s15, [r7, #4]
 80010da:	793b      	ldrb	r3, [r7, #4]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	72bb      	strb	r3, [r7, #10]

    // Col:Red , Bit:7..0
    WS2812_TIM_BUF[pos++]=((led.red&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80010e0:	7a3b      	ldrb	r3, [r7, #8]
 80010e2:	b25b      	sxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	da1c      	bge.n	8001122 <calcBuf+0xf2>
 80010e8:	4b9e      	ldr	r3, [pc, #632]	; (8001364 <calcBuf+0x334>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fa10 	bl	8000514 <__aeabi_ui2d>
 80010f4:	a394      	add	r3, pc, #592	; (adr r3, 8001348 <calcBuf+0x318>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	f7ff fbaf 	bl	800085c <__aeabi_ddiv>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	4b97      	ldr	r3, [pc, #604]	; (8001368 <calcBuf+0x338>)
 800110c:	f7ff f8c4 	bl	8000298 <__aeabi_dsub>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f7ff fc88 	bl	8000a2c <__aeabi_d2uiz>
 800111c:	4603      	mov	r3, r0
 800111e:	b29a      	uxth	r2, r3
 8001120:	e01b      	b.n	800115a <calcBuf+0x12a>
 8001122:	4b90      	ldr	r3, [pc, #576]	; (8001364 <calcBuf+0x334>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f9f3 	bl	8000514 <__aeabi_ui2d>
 800112e:	a388      	add	r3, pc, #544	; (adr r3, 8001350 <calcBuf+0x320>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f7ff fb92 	bl	800085c <__aeabi_ddiv>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	4b88      	ldr	r3, [pc, #544]	; (8001368 <calcBuf+0x338>)
 8001146:	f7ff f8a7 	bl	8000298 <__aeabi_dsub>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f7ff fc6b 	bl	8000a2c <__aeabi_d2uiz>
 8001156:	4603      	mov	r3, r0
 8001158:	b29a      	uxth	r2, r3
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1c59      	adds	r1, r3, #1
 800115e:	6139      	str	r1, [r7, #16]
 8001160:	4982      	ldr	r1, [pc, #520]	; (800136c <calcBuf+0x33c>)
 8001162:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001166:	7a3b      	ldrb	r3, [r7, #8]
 8001168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800116c:	2b00      	cmp	r3, #0
 800116e:	d01c      	beq.n	80011aa <calcBuf+0x17a>
 8001170:	4b7c      	ldr	r3, [pc, #496]	; (8001364 <calcBuf+0x334>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9cc 	bl	8000514 <__aeabi_ui2d>
 800117c:	a372      	add	r3, pc, #456	; (adr r3, 8001348 <calcBuf+0x318>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff fb6b 	bl	800085c <__aeabi_ddiv>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4b75      	ldr	r3, [pc, #468]	; (8001368 <calcBuf+0x338>)
 8001194:	f7ff f880 	bl	8000298 <__aeabi_dsub>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fc44 	bl	8000a2c <__aeabi_d2uiz>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	e01b      	b.n	80011e2 <calcBuf+0x1b2>
 80011aa:	4b6e      	ldr	r3, [pc, #440]	; (8001364 <calcBuf+0x334>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f9af 	bl	8000514 <__aeabi_ui2d>
 80011b6:	a366      	add	r3, pc, #408	; (adr r3, 8001350 <calcBuf+0x320>)
 80011b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011bc:	f7ff fb4e 	bl	800085c <__aeabi_ddiv>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	4b66      	ldr	r3, [pc, #408]	; (8001368 <calcBuf+0x338>)
 80011ce:	f7ff f863 	bl	8000298 <__aeabi_dsub>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fc27 	bl	8000a2c <__aeabi_d2uiz>
 80011de:	4603      	mov	r3, r0
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1c59      	adds	r1, r3, #1
 80011e6:	6139      	str	r1, [r7, #16]
 80011e8:	4960      	ldr	r1, [pc, #384]	; (800136c <calcBuf+0x33c>)
 80011ea:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80011ee:	7a3b      	ldrb	r3, [r7, #8]
 80011f0:	f003 0320 	and.w	r3, r3, #32
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d01c      	beq.n	8001232 <calcBuf+0x202>
 80011f8:	4b5a      	ldr	r3, [pc, #360]	; (8001364 <calcBuf+0x334>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f988 	bl	8000514 <__aeabi_ui2d>
 8001204:	a350      	add	r3, pc, #320	; (adr r3, 8001348 <calcBuf+0x318>)
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	f7ff fb27 	bl	800085c <__aeabi_ddiv>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	4b53      	ldr	r3, [pc, #332]	; (8001368 <calcBuf+0x338>)
 800121c:	f7ff f83c 	bl	8000298 <__aeabi_dsub>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fc00 	bl	8000a2c <__aeabi_d2uiz>
 800122c:	4603      	mov	r3, r0
 800122e:	b29a      	uxth	r2, r3
 8001230:	e01b      	b.n	800126a <calcBuf+0x23a>
 8001232:	4b4c      	ldr	r3, [pc, #304]	; (8001364 <calcBuf+0x334>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f96b 	bl	8000514 <__aeabi_ui2d>
 800123e:	a344      	add	r3, pc, #272	; (adr r3, 8001350 <calcBuf+0x320>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff fb0a 	bl	800085c <__aeabi_ddiv>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b44      	ldr	r3, [pc, #272]	; (8001368 <calcBuf+0x338>)
 8001256:	f7ff f81f 	bl	8000298 <__aeabi_dsub>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff fbe3 	bl	8000a2c <__aeabi_d2uiz>
 8001266:	4603      	mov	r3, r0
 8001268:	b29a      	uxth	r2, r3
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1c59      	adds	r1, r3, #1
 800126e:	6139      	str	r1, [r7, #16]
 8001270:	493e      	ldr	r1, [pc, #248]	; (800136c <calcBuf+0x33c>)
 8001272:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001276:	7a3b      	ldrb	r3, [r7, #8]
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	2b00      	cmp	r3, #0
 800127e:	d01c      	beq.n	80012ba <calcBuf+0x28a>
 8001280:	4b38      	ldr	r3, [pc, #224]	; (8001364 <calcBuf+0x334>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f944 	bl	8000514 <__aeabi_ui2d>
 800128c:	a32e      	add	r3, pc, #184	; (adr r3, 8001348 <calcBuf+0x318>)
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	f7ff fae3 	bl	800085c <__aeabi_ddiv>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4610      	mov	r0, r2
 800129c:	4619      	mov	r1, r3
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	4b31      	ldr	r3, [pc, #196]	; (8001368 <calcBuf+0x338>)
 80012a4:	f7fe fff8 	bl	8000298 <__aeabi_dsub>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4610      	mov	r0, r2
 80012ae:	4619      	mov	r1, r3
 80012b0:	f7ff fbbc 	bl	8000a2c <__aeabi_d2uiz>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	e01b      	b.n	80012f2 <calcBuf+0x2c2>
 80012ba:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <calcBuf+0x334>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f927 	bl	8000514 <__aeabi_ui2d>
 80012c6:	a322      	add	r3, pc, #136	; (adr r3, 8001350 <calcBuf+0x320>)
 80012c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012cc:	f7ff fac6 	bl	800085c <__aeabi_ddiv>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 0200 	mov.w	r2, #0
 80012dc:	4b22      	ldr	r3, [pc, #136]	; (8001368 <calcBuf+0x338>)
 80012de:	f7fe ffdb 	bl	8000298 <__aeabi_dsub>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fb9f 	bl	8000a2c <__aeabi_d2uiz>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1c59      	adds	r1, r3, #1
 80012f6:	6139      	str	r1, [r7, #16]
 80012f8:	491c      	ldr	r1, [pc, #112]	; (800136c <calcBuf+0x33c>)
 80012fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80012fe:	7a3b      	ldrb	r3, [r7, #8]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	2b00      	cmp	r3, #0
 8001306:	d033      	beq.n	8001370 <calcBuf+0x340>
 8001308:	4b16      	ldr	r3, [pc, #88]	; (8001364 <calcBuf+0x334>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f900 	bl	8000514 <__aeabi_ui2d>
 8001314:	a30c      	add	r3, pc, #48	; (adr r3, 8001348 <calcBuf+0x318>)
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	f7ff fa9f 	bl	800085c <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <calcBuf+0x338>)
 800132c:	f7fe ffb4 	bl	8000298 <__aeabi_dsub>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4610      	mov	r0, r2
 8001336:	4619      	mov	r1, r3
 8001338:	f7ff fb78 	bl	8000a2c <__aeabi_d2uiz>
 800133c:	4603      	mov	r3, r0
 800133e:	b29a      	uxth	r2, r3
 8001340:	e032      	b.n	80013a8 <calcBuf+0x378>
 8001342:	bf00      	nop
 8001344:	f3af 8000 	nop.w
 8001348:	08d3dcb1 	.word	0x08d3dcb1
 800134c:	40013dcb 	.word	0x40013dcb
 8001350:	8ba2e8ba 	.word	0x8ba2e8ba
 8001354:	4016ba2e 	.word	0x4016ba2e
 8001358:	20009420 	.word	0x20009420
 800135c:	200099c0 	.word	0x200099c0
 8001360:	40590000 	.word	0x40590000
 8001364:	200093d8 	.word	0x200093d8
 8001368:	3ff00000 	.word	0x3ff00000
 800136c:	200090d8 	.word	0x200090d8
 8001370:	4bad      	ldr	r3, [pc, #692]	; (8001628 <calcBuf+0x5f8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f8cc 	bl	8000514 <__aeabi_ui2d>
 800137c:	a3a6      	add	r3, pc, #664	; (adr r3, 8001618 <calcBuf+0x5e8>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	f7ff fa6b 	bl	800085c <__aeabi_ddiv>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4ba6      	ldr	r3, [pc, #664]	; (800162c <calcBuf+0x5fc>)
 8001394:	f7fe ff80 	bl	8000298 <__aeabi_dsub>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fb44 	bl	8000a2c <__aeabi_d2uiz>
 80013a4:	4603      	mov	r3, r0
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1c59      	adds	r1, r3, #1
 80013ac:	6139      	str	r1, [r7, #16]
 80013ae:	49a0      	ldr	r1, [pc, #640]	; (8001630 <calcBuf+0x600>)
 80013b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80013b4:	7a3b      	ldrb	r3, [r7, #8]
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d01c      	beq.n	80013f8 <calcBuf+0x3c8>
 80013be:	4b9a      	ldr	r3, [pc, #616]	; (8001628 <calcBuf+0x5f8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f8a5 	bl	8000514 <__aeabi_ui2d>
 80013ca:	a395      	add	r3, pc, #596	; (adr r3, 8001620 <calcBuf+0x5f0>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	f7ff fa44 	bl	800085c <__aeabi_ddiv>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	4b92      	ldr	r3, [pc, #584]	; (800162c <calcBuf+0x5fc>)
 80013e2:	f7fe ff59 	bl	8000298 <__aeabi_dsub>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	f7ff fb1d 	bl	8000a2c <__aeabi_d2uiz>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	e01b      	b.n	8001430 <calcBuf+0x400>
 80013f8:	4b8b      	ldr	r3, [pc, #556]	; (8001628 <calcBuf+0x5f8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f888 	bl	8000514 <__aeabi_ui2d>
 8001404:	a384      	add	r3, pc, #528	; (adr r3, 8001618 <calcBuf+0x5e8>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7ff fa27 	bl	800085c <__aeabi_ddiv>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	4b84      	ldr	r3, [pc, #528]	; (800162c <calcBuf+0x5fc>)
 800141c:	f7fe ff3c 	bl	8000298 <__aeabi_dsub>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	f7ff fb00 	bl	8000a2c <__aeabi_d2uiz>
 800142c:	4603      	mov	r3, r0
 800142e:	b29a      	uxth	r2, r3
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1c59      	adds	r1, r3, #1
 8001434:	6139      	str	r1, [r7, #16]
 8001436:	497e      	ldr	r1, [pc, #504]	; (8001630 <calcBuf+0x600>)
 8001438:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800143c:	7a3b      	ldrb	r3, [r7, #8]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d01c      	beq.n	8001480 <calcBuf+0x450>
 8001446:	4b78      	ldr	r3, [pc, #480]	; (8001628 <calcBuf+0x5f8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f861 	bl	8000514 <__aeabi_ui2d>
 8001452:	a373      	add	r3, pc, #460	; (adr r3, 8001620 <calcBuf+0x5f0>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f7ff fa00 	bl	800085c <__aeabi_ddiv>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	4b70      	ldr	r3, [pc, #448]	; (800162c <calcBuf+0x5fc>)
 800146a:	f7fe ff15 	bl	8000298 <__aeabi_dsub>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	f7ff fad9 	bl	8000a2c <__aeabi_d2uiz>
 800147a:	4603      	mov	r3, r0
 800147c:	b29a      	uxth	r2, r3
 800147e:	e01b      	b.n	80014b8 <calcBuf+0x488>
 8001480:	4b69      	ldr	r3, [pc, #420]	; (8001628 <calcBuf+0x5f8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f844 	bl	8000514 <__aeabi_ui2d>
 800148c:	a362      	add	r3, pc, #392	; (adr r3, 8001618 <calcBuf+0x5e8>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff f9e3 	bl	800085c <__aeabi_ddiv>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f04f 0200 	mov.w	r2, #0
 80014a2:	4b62      	ldr	r3, [pc, #392]	; (800162c <calcBuf+0x5fc>)
 80014a4:	f7fe fef8 	bl	8000298 <__aeabi_dsub>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff fabc 	bl	8000a2c <__aeabi_d2uiz>
 80014b4:	4603      	mov	r3, r0
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1c59      	adds	r1, r3, #1
 80014bc:	6139      	str	r1, [r7, #16]
 80014be:	495c      	ldr	r1, [pc, #368]	; (8001630 <calcBuf+0x600>)
 80014c0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.red&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80014c4:	7a3b      	ldrb	r3, [r7, #8]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d01c      	beq.n	8001508 <calcBuf+0x4d8>
 80014ce:	4b56      	ldr	r3, [pc, #344]	; (8001628 <calcBuf+0x5f8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f81d 	bl	8000514 <__aeabi_ui2d>
 80014da:	a351      	add	r3, pc, #324	; (adr r3, 8001620 <calcBuf+0x5f0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f9bc 	bl	800085c <__aeabi_ddiv>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	4b4e      	ldr	r3, [pc, #312]	; (800162c <calcBuf+0x5fc>)
 80014f2:	f7fe fed1 	bl	8000298 <__aeabi_dsub>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff fa95 	bl	8000a2c <__aeabi_d2uiz>
 8001502:	4603      	mov	r3, r0
 8001504:	b29a      	uxth	r2, r3
 8001506:	e01b      	b.n	8001540 <calcBuf+0x510>
 8001508:	4b47      	ldr	r3, [pc, #284]	; (8001628 <calcBuf+0x5f8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f800 	bl	8000514 <__aeabi_ui2d>
 8001514:	a340      	add	r3, pc, #256	; (adr r3, 8001618 <calcBuf+0x5e8>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7ff f99f 	bl	800085c <__aeabi_ddiv>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	4b40      	ldr	r3, [pc, #256]	; (800162c <calcBuf+0x5fc>)
 800152c:	f7fe feb4 	bl	8000298 <__aeabi_dsub>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff fa78 	bl	8000a2c <__aeabi_d2uiz>
 800153c:	4603      	mov	r3, r0
 800153e:	b29a      	uxth	r2, r3
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1c59      	adds	r1, r3, #1
 8001544:	6139      	str	r1, [r7, #16]
 8001546:	493a      	ldr	r1, [pc, #232]	; (8001630 <calcBuf+0x600>)
 8001548:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Col:Green , Bit:7..0
    WS2812_TIM_BUF[pos++]=((led.green&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 800154c:	7a7b      	ldrb	r3, [r7, #9]
 800154e:	b25b      	sxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	da1c      	bge.n	800158e <calcBuf+0x55e>
 8001554:	4b34      	ldr	r3, [pc, #208]	; (8001628 <calcBuf+0x5f8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe ffda 	bl	8000514 <__aeabi_ui2d>
 8001560:	a32f      	add	r3, pc, #188	; (adr r3, 8001620 <calcBuf+0x5f0>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7ff f979 	bl	800085c <__aeabi_ddiv>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <calcBuf+0x5fc>)
 8001578:	f7fe fe8e 	bl	8000298 <__aeabi_dsub>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f7ff fa52 	bl	8000a2c <__aeabi_d2uiz>
 8001588:	4603      	mov	r3, r0
 800158a:	b29a      	uxth	r2, r3
 800158c:	e01b      	b.n	80015c6 <calcBuf+0x596>
 800158e:	4b26      	ldr	r3, [pc, #152]	; (8001628 <calcBuf+0x5f8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ffbd 	bl	8000514 <__aeabi_ui2d>
 800159a:	a31f      	add	r3, pc, #124	; (adr r3, 8001618 <calcBuf+0x5e8>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7ff f95c 	bl	800085c <__aeabi_ddiv>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4610      	mov	r0, r2
 80015aa:	4619      	mov	r1, r3
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b1e      	ldr	r3, [pc, #120]	; (800162c <calcBuf+0x5fc>)
 80015b2:	f7fe fe71 	bl	8000298 <__aeabi_dsub>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f7ff fa35 	bl	8000a2c <__aeabi_d2uiz>
 80015c2:	4603      	mov	r3, r0
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1c59      	adds	r1, r3, #1
 80015ca:	6139      	str	r1, [r7, #16]
 80015cc:	4918      	ldr	r1, [pc, #96]	; (8001630 <calcBuf+0x600>)
 80015ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80015d2:	7a7b      	ldrb	r3, [r7, #9]
 80015d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d02b      	beq.n	8001634 <calcBuf+0x604>
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <calcBuf+0x5f8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ff96 	bl	8000514 <__aeabi_ui2d>
 80015e8:	a30d      	add	r3, pc, #52	; (adr r3, 8001620 <calcBuf+0x5f0>)
 80015ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ee:	f7ff f935 	bl	800085c <__aeabi_ddiv>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <calcBuf+0x5fc>)
 8001600:	f7fe fe4a 	bl	8000298 <__aeabi_dsub>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff fa0e 	bl	8000a2c <__aeabi_d2uiz>
 8001610:	4603      	mov	r3, r0
 8001612:	b29a      	uxth	r2, r3
 8001614:	e02a      	b.n	800166c <calcBuf+0x63c>
 8001616:	bf00      	nop
 8001618:	8ba2e8ba 	.word	0x8ba2e8ba
 800161c:	4016ba2e 	.word	0x4016ba2e
 8001620:	08d3dcb1 	.word	0x08d3dcb1
 8001624:	40013dcb 	.word	0x40013dcb
 8001628:	200093d8 	.word	0x200093d8
 800162c:	3ff00000 	.word	0x3ff00000
 8001630:	200090d8 	.word	0x200090d8
 8001634:	4bae      	ldr	r3, [pc, #696]	; (80018f0 <calcBuf+0x8c0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe ff6a 	bl	8000514 <__aeabi_ui2d>
 8001640:	a3a7      	add	r3, pc, #668	; (adr r3, 80018e0 <calcBuf+0x8b0>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7ff f909 	bl	800085c <__aeabi_ddiv>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	4ba7      	ldr	r3, [pc, #668]	; (80018f4 <calcBuf+0x8c4>)
 8001658:	f7fe fe1e 	bl	8000298 <__aeabi_dsub>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f7ff f9e2 	bl	8000a2c <__aeabi_d2uiz>
 8001668:	4603      	mov	r3, r0
 800166a:	b29a      	uxth	r2, r3
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1c59      	adds	r1, r3, #1
 8001670:	6139      	str	r1, [r7, #16]
 8001672:	49a1      	ldr	r1, [pc, #644]	; (80018f8 <calcBuf+0x8c8>)
 8001674:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001678:	7a7b      	ldrb	r3, [r7, #9]
 800167a:	f003 0320 	and.w	r3, r3, #32
 800167e:	2b00      	cmp	r3, #0
 8001680:	d01c      	beq.n	80016bc <calcBuf+0x68c>
 8001682:	4b9b      	ldr	r3, [pc, #620]	; (80018f0 <calcBuf+0x8c0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe ff43 	bl	8000514 <__aeabi_ui2d>
 800168e:	a396      	add	r3, pc, #600	; (adr r3, 80018e8 <calcBuf+0x8b8>)
 8001690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001694:	f7ff f8e2 	bl	800085c <__aeabi_ddiv>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	4b93      	ldr	r3, [pc, #588]	; (80018f4 <calcBuf+0x8c4>)
 80016a6:	f7fe fdf7 	bl	8000298 <__aeabi_dsub>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f7ff f9bb 	bl	8000a2c <__aeabi_d2uiz>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	e01b      	b.n	80016f4 <calcBuf+0x6c4>
 80016bc:	4b8c      	ldr	r3, [pc, #560]	; (80018f0 <calcBuf+0x8c0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe ff26 	bl	8000514 <__aeabi_ui2d>
 80016c8:	a385      	add	r3, pc, #532	; (adr r3, 80018e0 <calcBuf+0x8b0>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	f7ff f8c5 	bl	800085c <__aeabi_ddiv>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	4b85      	ldr	r3, [pc, #532]	; (80018f4 <calcBuf+0x8c4>)
 80016e0:	f7fe fdda 	bl	8000298 <__aeabi_dsub>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff f99e 	bl	8000a2c <__aeabi_d2uiz>
 80016f0:	4603      	mov	r3, r0
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1c59      	adds	r1, r3, #1
 80016f8:	6139      	str	r1, [r7, #16]
 80016fa:	497f      	ldr	r1, [pc, #508]	; (80018f8 <calcBuf+0x8c8>)
 80016fc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001700:	7a7b      	ldrb	r3, [r7, #9]
 8001702:	f003 0310 	and.w	r3, r3, #16
 8001706:	2b00      	cmp	r3, #0
 8001708:	d01c      	beq.n	8001744 <calcBuf+0x714>
 800170a:	4b79      	ldr	r3, [pc, #484]	; (80018f0 <calcBuf+0x8c0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe feff 	bl	8000514 <__aeabi_ui2d>
 8001716:	a374      	add	r3, pc, #464	; (adr r3, 80018e8 <calcBuf+0x8b8>)
 8001718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171c:	f7ff f89e 	bl	800085c <__aeabi_ddiv>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	4b71      	ldr	r3, [pc, #452]	; (80018f4 <calcBuf+0x8c4>)
 800172e:	f7fe fdb3 	bl	8000298 <__aeabi_dsub>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f7ff f977 	bl	8000a2c <__aeabi_d2uiz>
 800173e:	4603      	mov	r3, r0
 8001740:	b29a      	uxth	r2, r3
 8001742:	e01b      	b.n	800177c <calcBuf+0x74c>
 8001744:	4b6a      	ldr	r3, [pc, #424]	; (80018f0 <calcBuf+0x8c0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fee2 	bl	8000514 <__aeabi_ui2d>
 8001750:	a363      	add	r3, pc, #396	; (adr r3, 80018e0 <calcBuf+0x8b0>)
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	f7ff f881 	bl	800085c <__aeabi_ddiv>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <calcBuf+0x8c4>)
 8001768:	f7fe fd96 	bl	8000298 <__aeabi_dsub>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	f7ff f95a 	bl	8000a2c <__aeabi_d2uiz>
 8001778:	4603      	mov	r3, r0
 800177a:	b29a      	uxth	r2, r3
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1c59      	adds	r1, r3, #1
 8001780:	6139      	str	r1, [r7, #16]
 8001782:	495d      	ldr	r1, [pc, #372]	; (80018f8 <calcBuf+0x8c8>)
 8001784:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001788:	7a7b      	ldrb	r3, [r7, #9]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b00      	cmp	r3, #0
 8001790:	d01c      	beq.n	80017cc <calcBuf+0x79c>
 8001792:	4b57      	ldr	r3, [pc, #348]	; (80018f0 <calcBuf+0x8c0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe febb 	bl	8000514 <__aeabi_ui2d>
 800179e:	a352      	add	r3, pc, #328	; (adr r3, 80018e8 <calcBuf+0x8b8>)
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	f7ff f85a 	bl	800085c <__aeabi_ddiv>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	4b4f      	ldr	r3, [pc, #316]	; (80018f4 <calcBuf+0x8c4>)
 80017b6:	f7fe fd6f 	bl	8000298 <__aeabi_dsub>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	f7ff f933 	bl	8000a2c <__aeabi_d2uiz>
 80017c6:	4603      	mov	r3, r0
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	e01b      	b.n	8001804 <calcBuf+0x7d4>
 80017cc:	4b48      	ldr	r3, [pc, #288]	; (80018f0 <calcBuf+0x8c0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fe9e 	bl	8000514 <__aeabi_ui2d>
 80017d8:	a341      	add	r3, pc, #260	; (adr r3, 80018e0 <calcBuf+0x8b0>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	f7ff f83d 	bl	800085c <__aeabi_ddiv>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <calcBuf+0x8c4>)
 80017f0:	f7fe fd52 	bl	8000298 <__aeabi_dsub>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff f916 	bl	8000a2c <__aeabi_d2uiz>
 8001800:	4603      	mov	r3, r0
 8001802:	b29a      	uxth	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1c59      	adds	r1, r3, #1
 8001808:	6139      	str	r1, [r7, #16]
 800180a:	493b      	ldr	r1, [pc, #236]	; (80018f8 <calcBuf+0x8c8>)
 800180c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001810:	7a7b      	ldrb	r3, [r7, #9]
 8001812:	f003 0304 	and.w	r3, r3, #4
 8001816:	2b00      	cmp	r3, #0
 8001818:	d01c      	beq.n	8001854 <calcBuf+0x824>
 800181a:	4b35      	ldr	r3, [pc, #212]	; (80018f0 <calcBuf+0x8c0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001820:	4618      	mov	r0, r3
 8001822:	f7fe fe77 	bl	8000514 <__aeabi_ui2d>
 8001826:	a330      	add	r3, pc, #192	; (adr r3, 80018e8 <calcBuf+0x8b8>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	f7ff f816 	bl	800085c <__aeabi_ddiv>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <calcBuf+0x8c4>)
 800183e:	f7fe fd2b 	bl	8000298 <__aeabi_dsub>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	f7ff f8ef 	bl	8000a2c <__aeabi_d2uiz>
 800184e:	4603      	mov	r3, r0
 8001850:	b29a      	uxth	r2, r3
 8001852:	e01b      	b.n	800188c <calcBuf+0x85c>
 8001854:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <calcBuf+0x8c0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fe5a 	bl	8000514 <__aeabi_ui2d>
 8001860:	a31f      	add	r3, pc, #124	; (adr r3, 80018e0 <calcBuf+0x8b0>)
 8001862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001866:	f7fe fff9 	bl	800085c <__aeabi_ddiv>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4610      	mov	r0, r2
 8001870:	4619      	mov	r1, r3
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <calcBuf+0x8c4>)
 8001878:	f7fe fd0e 	bl	8000298 <__aeabi_dsub>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	f7ff f8d2 	bl	8000a2c <__aeabi_d2uiz>
 8001888:	4603      	mov	r3, r0
 800188a:	b29a      	uxth	r2, r3
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1c59      	adds	r1, r3, #1
 8001890:	6139      	str	r1, [r7, #16]
 8001892:	4919      	ldr	r1, [pc, #100]	; (80018f8 <calcBuf+0x8c8>)
 8001894:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001898:	7a7b      	ldrb	r3, [r7, #9]
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d02c      	beq.n	80018fc <calcBuf+0x8cc>
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <calcBuf+0x8c0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe33 	bl	8000514 <__aeabi_ui2d>
 80018ae:	a30e      	add	r3, pc, #56	; (adr r3, 80018e8 <calcBuf+0x8b8>)
 80018b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b4:	f7fe ffd2 	bl	800085c <__aeabi_ddiv>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <calcBuf+0x8c4>)
 80018c6:	f7fe fce7 	bl	8000298 <__aeabi_dsub>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	f7ff f8ab 	bl	8000a2c <__aeabi_d2uiz>
 80018d6:	4603      	mov	r3, r0
 80018d8:	b29a      	uxth	r2, r3
 80018da:	e02b      	b.n	8001934 <calcBuf+0x904>
 80018dc:	f3af 8000 	nop.w
 80018e0:	8ba2e8ba 	.word	0x8ba2e8ba
 80018e4:	4016ba2e 	.word	0x4016ba2e
 80018e8:	08d3dcb1 	.word	0x08d3dcb1
 80018ec:	40013dcb 	.word	0x40013dcb
 80018f0:	200093d8 	.word	0x200093d8
 80018f4:	3ff00000 	.word	0x3ff00000
 80018f8:	200090d8 	.word	0x200090d8
 80018fc:	4bae      	ldr	r3, [pc, #696]	; (8001bb8 <calcBuf+0xb88>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fe06 	bl	8000514 <__aeabi_ui2d>
 8001908:	a3a7      	add	r3, pc, #668	; (adr r3, 8001ba8 <calcBuf+0xb78>)
 800190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190e:	f7fe ffa5 	bl	800085c <__aeabi_ddiv>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	4ba7      	ldr	r3, [pc, #668]	; (8001bbc <calcBuf+0xb8c>)
 8001920:	f7fe fcba 	bl	8000298 <__aeabi_dsub>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f7ff f87e 	bl	8000a2c <__aeabi_d2uiz>
 8001930:	4603      	mov	r3, r0
 8001932:	b29a      	uxth	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1c59      	adds	r1, r3, #1
 8001938:	6139      	str	r1, [r7, #16]
 800193a:	49a1      	ldr	r1, [pc, #644]	; (8001bc0 <calcBuf+0xb90>)
 800193c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    WS2812_TIM_BUF[pos++]=((led.green&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001940:	7a7b      	ldrb	r3, [r7, #9]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d01c      	beq.n	8001984 <calcBuf+0x954>
 800194a:	4b9b      	ldr	r3, [pc, #620]	; (8001bb8 <calcBuf+0xb88>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fddf 	bl	8000514 <__aeabi_ui2d>
 8001956:	a396      	add	r3, pc, #600	; (adr r3, 8001bb0 <calcBuf+0xb80>)
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	f7fe ff7e 	bl	800085c <__aeabi_ddiv>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4b93      	ldr	r3, [pc, #588]	; (8001bbc <calcBuf+0xb8c>)
 800196e:	f7fe fc93 	bl	8000298 <__aeabi_dsub>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f7ff f857 	bl	8000a2c <__aeabi_d2uiz>
 800197e:	4603      	mov	r3, r0
 8001980:	b29a      	uxth	r2, r3
 8001982:	e01b      	b.n	80019bc <calcBuf+0x98c>
 8001984:	4b8c      	ldr	r3, [pc, #560]	; (8001bb8 <calcBuf+0xb88>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fdc2 	bl	8000514 <__aeabi_ui2d>
 8001990:	a385      	add	r3, pc, #532	; (adr r3, 8001ba8 <calcBuf+0xb78>)
 8001992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001996:	f7fe ff61 	bl	800085c <__aeabi_ddiv>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4610      	mov	r0, r2
 80019a0:	4619      	mov	r1, r3
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	4b85      	ldr	r3, [pc, #532]	; (8001bbc <calcBuf+0xb8c>)
 80019a8:	f7fe fc76 	bl	8000298 <__aeabi_dsub>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7ff f83a 	bl	8000a2c <__aeabi_d2uiz>
 80019b8:	4603      	mov	r3, r0
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1c59      	adds	r1, r3, #1
 80019c0:	6139      	str	r1, [r7, #16]
 80019c2:	497f      	ldr	r1, [pc, #508]	; (8001bc0 <calcBuf+0xb90>)
 80019c4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

	// Col:Blue , Bit:7..0
	WS2812_TIM_BUF[pos++]=((led.blue&0x80) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 80019c8:	7abb      	ldrb	r3, [r7, #10]
 80019ca:	b25b      	sxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	da1c      	bge.n	8001a0a <calcBuf+0x9da>
 80019d0:	4b79      	ldr	r3, [pc, #484]	; (8001bb8 <calcBuf+0xb88>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fd9c 	bl	8000514 <__aeabi_ui2d>
 80019dc:	a374      	add	r3, pc, #464	; (adr r3, 8001bb0 <calcBuf+0xb80>)
 80019de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e2:	f7fe ff3b 	bl	800085c <__aeabi_ddiv>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	4b72      	ldr	r3, [pc, #456]	; (8001bbc <calcBuf+0xb8c>)
 80019f4:	f7fe fc50 	bl	8000298 <__aeabi_dsub>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f7ff f814 	bl	8000a2c <__aeabi_d2uiz>
 8001a04:	4603      	mov	r3, r0
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	e01b      	b.n	8001a42 <calcBuf+0xa12>
 8001a0a:	4b6b      	ldr	r3, [pc, #428]	; (8001bb8 <calcBuf+0xb88>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fd7f 	bl	8000514 <__aeabi_ui2d>
 8001a16:	a364      	add	r3, pc, #400	; (adr r3, 8001ba8 <calcBuf+0xb78>)
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	f7fe ff1e 	bl	800085c <__aeabi_ddiv>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	4b63      	ldr	r3, [pc, #396]	; (8001bbc <calcBuf+0xb8c>)
 8001a2e:	f7fe fc33 	bl	8000298 <__aeabi_dsub>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f7fe fff7 	bl	8000a2c <__aeabi_d2uiz>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1c59      	adds	r1, r3, #1
 8001a46:	6139      	str	r1, [r7, #16]
 8001a48:	495d      	ldr	r1, [pc, #372]	; (8001bc0 <calcBuf+0xb90>)
 8001a4a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x40) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001a4e:	7abb      	ldrb	r3, [r7, #10]
 8001a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d01c      	beq.n	8001a92 <calcBuf+0xa62>
 8001a58:	4b57      	ldr	r3, [pc, #348]	; (8001bb8 <calcBuf+0xb88>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fd58 	bl	8000514 <__aeabi_ui2d>
 8001a64:	a352      	add	r3, pc, #328	; (adr r3, 8001bb0 <calcBuf+0xb80>)
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	f7fe fef7 	bl	800085c <__aeabi_ddiv>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	4b50      	ldr	r3, [pc, #320]	; (8001bbc <calcBuf+0xb8c>)
 8001a7c:	f7fe fc0c 	bl	8000298 <__aeabi_dsub>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	f7fe ffd0 	bl	8000a2c <__aeabi_d2uiz>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	e01b      	b.n	8001aca <calcBuf+0xa9a>
 8001a92:	4b49      	ldr	r3, [pc, #292]	; (8001bb8 <calcBuf+0xb88>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fd3b 	bl	8000514 <__aeabi_ui2d>
 8001a9e:	a342      	add	r3, pc, #264	; (adr r3, 8001ba8 <calcBuf+0xb78>)
 8001aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa4:	f7fe feda 	bl	800085c <__aeabi_ddiv>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	4b41      	ldr	r3, [pc, #260]	; (8001bbc <calcBuf+0xb8c>)
 8001ab6:	f7fe fbef 	bl	8000298 <__aeabi_dsub>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f7fe ffb3 	bl	8000a2c <__aeabi_d2uiz>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1c59      	adds	r1, r3, #1
 8001ace:	6139      	str	r1, [r7, #16]
 8001ad0:	493b      	ldr	r1, [pc, #236]	; (8001bc0 <calcBuf+0xb90>)
 8001ad2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x20) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001ad6:	7abb      	ldrb	r3, [r7, #10]
 8001ad8:	f003 0320 	and.w	r3, r3, #32
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d01c      	beq.n	8001b1a <calcBuf+0xaea>
 8001ae0:	4b35      	ldr	r3, [pc, #212]	; (8001bb8 <calcBuf+0xb88>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fd14 	bl	8000514 <__aeabi_ui2d>
 8001aec:	a330      	add	r3, pc, #192	; (adr r3, 8001bb0 <calcBuf+0xb80>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	f7fe feb3 	bl	800085c <__aeabi_ddiv>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <calcBuf+0xb8c>)
 8001b04:	f7fe fbc8 	bl	8000298 <__aeabi_dsub>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7fe ff8c 	bl	8000a2c <__aeabi_d2uiz>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	e01b      	b.n	8001b52 <calcBuf+0xb22>
 8001b1a:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <calcBuf+0xb88>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fcf7 	bl	8000514 <__aeabi_ui2d>
 8001b26:	a320      	add	r3, pc, #128	; (adr r3, 8001ba8 <calcBuf+0xb78>)
 8001b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2c:	f7fe fe96 	bl	800085c <__aeabi_ddiv>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <calcBuf+0xb8c>)
 8001b3e:	f7fe fbab 	bl	8000298 <__aeabi_dsub>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4610      	mov	r0, r2
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f7fe ff6f 	bl	8000a2c <__aeabi_d2uiz>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1c59      	adds	r1, r3, #1
 8001b56:	6139      	str	r1, [r7, #16]
 8001b58:	4919      	ldr	r1, [pc, #100]	; (8001bc0 <calcBuf+0xb90>)
 8001b5a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x10) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001b5e:	7abb      	ldrb	r3, [r7, #10]
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d02d      	beq.n	8001bc4 <calcBuf+0xb94>
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <calcBuf+0xb88>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe fcd0 	bl	8000514 <__aeabi_ui2d>
 8001b74:	a30e      	add	r3, pc, #56	; (adr r3, 8001bb0 <calcBuf+0xb80>)
 8001b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7a:	f7fe fe6f 	bl	800085c <__aeabi_ddiv>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <calcBuf+0xb8c>)
 8001b8c:	f7fe fb84 	bl	8000298 <__aeabi_dsub>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7fe ff48 	bl	8000a2c <__aeabi_d2uiz>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	e02c      	b.n	8001bfc <calcBuf+0xbcc>
 8001ba2:	bf00      	nop
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	8ba2e8ba 	.word	0x8ba2e8ba
 8001bac:	4016ba2e 	.word	0x4016ba2e
 8001bb0:	08d3dcb1 	.word	0x08d3dcb1
 8001bb4:	40013dcb 	.word	0x40013dcb
 8001bb8:	200093d8 	.word	0x200093d8
 8001bbc:	3ff00000 	.word	0x3ff00000
 8001bc0:	200090d8 	.word	0x200090d8
 8001bc4:	4ba2      	ldr	r3, [pc, #648]	; (8001e50 <calcBuf+0xe20>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fca2 	bl	8000514 <__aeabi_ui2d>
 8001bd0:	a39b      	add	r3, pc, #620	; (adr r3, 8001e40 <calcBuf+0xe10>)
 8001bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd6:	f7fe fe41 	bl	800085c <__aeabi_ddiv>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	4b9b      	ldr	r3, [pc, #620]	; (8001e54 <calcBuf+0xe24>)
 8001be8:	f7fe fb56 	bl	8000298 <__aeabi_dsub>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7fe ff1a 	bl	8000a2c <__aeabi_d2uiz>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1c59      	adds	r1, r3, #1
 8001c00:	6139      	str	r1, [r7, #16]
 8001c02:	4995      	ldr	r1, [pc, #596]	; (8001e58 <calcBuf+0xe28>)
 8001c04:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x08) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001c08:	7abb      	ldrb	r3, [r7, #10]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d01c      	beq.n	8001c4c <calcBuf+0xc1c>
 8001c12:	4b8f      	ldr	r3, [pc, #572]	; (8001e50 <calcBuf+0xe20>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc7b 	bl	8000514 <__aeabi_ui2d>
 8001c1e:	a38a      	add	r3, pc, #552	; (adr r3, 8001e48 <calcBuf+0xe18>)
 8001c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c24:	f7fe fe1a 	bl	800085c <__aeabi_ddiv>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	4b87      	ldr	r3, [pc, #540]	; (8001e54 <calcBuf+0xe24>)
 8001c36:	f7fe fb2f 	bl	8000298 <__aeabi_dsub>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	f7fe fef3 	bl	8000a2c <__aeabi_d2uiz>
 8001c46:	4603      	mov	r3, r0
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	e01b      	b.n	8001c84 <calcBuf+0xc54>
 8001c4c:	4b80      	ldr	r3, [pc, #512]	; (8001e50 <calcBuf+0xe20>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fc5e 	bl	8000514 <__aeabi_ui2d>
 8001c58:	a379      	add	r3, pc, #484	; (adr r3, 8001e40 <calcBuf+0xe10>)
 8001c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5e:	f7fe fdfd 	bl	800085c <__aeabi_ddiv>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	4b79      	ldr	r3, [pc, #484]	; (8001e54 <calcBuf+0xe24>)
 8001c70:	f7fe fb12 	bl	8000298 <__aeabi_dsub>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f7fe fed6 	bl	8000a2c <__aeabi_d2uiz>
 8001c80:	4603      	mov	r3, r0
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1c59      	adds	r1, r3, #1
 8001c88:	6139      	str	r1, [r7, #16]
 8001c8a:	4973      	ldr	r1, [pc, #460]	; (8001e58 <calcBuf+0xe28>)
 8001c8c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x04) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001c90:	7abb      	ldrb	r3, [r7, #10]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d01c      	beq.n	8001cd4 <calcBuf+0xca4>
 8001c9a:	4b6d      	ldr	r3, [pc, #436]	; (8001e50 <calcBuf+0xe20>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fc37 	bl	8000514 <__aeabi_ui2d>
 8001ca6:	a368      	add	r3, pc, #416	; (adr r3, 8001e48 <calcBuf+0xe18>)
 8001ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cac:	f7fe fdd6 	bl	800085c <__aeabi_ddiv>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	4b65      	ldr	r3, [pc, #404]	; (8001e54 <calcBuf+0xe24>)
 8001cbe:	f7fe faeb 	bl	8000298 <__aeabi_dsub>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f7fe feaf 	bl	8000a2c <__aeabi_d2uiz>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	e01b      	b.n	8001d0c <calcBuf+0xcdc>
 8001cd4:	4b5e      	ldr	r3, [pc, #376]	; (8001e50 <calcBuf+0xe20>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fc1a 	bl	8000514 <__aeabi_ui2d>
 8001ce0:	a357      	add	r3, pc, #348	; (adr r3, 8001e40 <calcBuf+0xe10>)
 8001ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce6:	f7fe fdb9 	bl	800085c <__aeabi_ddiv>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	4b57      	ldr	r3, [pc, #348]	; (8001e54 <calcBuf+0xe24>)
 8001cf8:	f7fe face 	bl	8000298 <__aeabi_dsub>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7fe fe92 	bl	8000a2c <__aeabi_d2uiz>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1c59      	adds	r1, r3, #1
 8001d10:	6139      	str	r1, [r7, #16]
 8001d12:	4951      	ldr	r1, [pc, #324]	; (8001e58 <calcBuf+0xe28>)
 8001d14:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x02) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001d18:	7abb      	ldrb	r3, [r7, #10]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d01c      	beq.n	8001d5c <calcBuf+0xd2c>
 8001d22:	4b4b      	ldr	r3, [pc, #300]	; (8001e50 <calcBuf+0xe20>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fbf3 	bl	8000514 <__aeabi_ui2d>
 8001d2e:	a346      	add	r3, pc, #280	; (adr r3, 8001e48 <calcBuf+0xe18>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fd92 	bl	800085c <__aeabi_ddiv>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	4b43      	ldr	r3, [pc, #268]	; (8001e54 <calcBuf+0xe24>)
 8001d46:	f7fe faa7 	bl	8000298 <__aeabi_dsub>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4610      	mov	r0, r2
 8001d50:	4619      	mov	r1, r3
 8001d52:	f7fe fe6b 	bl	8000a2c <__aeabi_d2uiz>
 8001d56:	4603      	mov	r3, r0
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	e01b      	b.n	8001d94 <calcBuf+0xd64>
 8001d5c:	4b3c      	ldr	r3, [pc, #240]	; (8001e50 <calcBuf+0xe20>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fbd6 	bl	8000514 <__aeabi_ui2d>
 8001d68:	a335      	add	r3, pc, #212	; (adr r3, 8001e40 <calcBuf+0xe10>)
 8001d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6e:	f7fe fd75 	bl	800085c <__aeabi_ddiv>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4610      	mov	r0, r2
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	4b35      	ldr	r3, [pc, #212]	; (8001e54 <calcBuf+0xe24>)
 8001d80:	f7fe fa8a 	bl	8000298 <__aeabi_dsub>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4610      	mov	r0, r2
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f7fe fe4e 	bl	8000a2c <__aeabi_d2uiz>
 8001d90:	4603      	mov	r3, r0
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1c59      	adds	r1, r3, #1
 8001d98:	6139      	str	r1, [r7, #16]
 8001d9a:	492f      	ldr	r1, [pc, #188]	; (8001e58 <calcBuf+0xe28>)
 8001d9c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	WS2812_TIM_BUF[pos++]=((led.blue&0x01) != 0)?WS2812_HI_TIME:WS2812_LO_TIME;
 8001da0:	7abb      	ldrb	r3, [r7, #10]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d01c      	beq.n	8001de4 <calcBuf+0xdb4>
 8001daa:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <calcBuf+0xe20>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe fbaf 	bl	8000514 <__aeabi_ui2d>
 8001db6:	a324      	add	r3, pc, #144	; (adr r3, 8001e48 <calcBuf+0xe18>)
 8001db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbc:	f7fe fd4e 	bl	800085c <__aeabi_ddiv>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <calcBuf+0xe24>)
 8001dce:	f7fe fa63 	bl	8000298 <__aeabi_dsub>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f7fe fe27 	bl	8000a2c <__aeabi_d2uiz>
 8001dde:	4603      	mov	r3, r0
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	e01b      	b.n	8001e1c <calcBuf+0xdec>
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <calcBuf+0xe20>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fb92 	bl	8000514 <__aeabi_ui2d>
 8001df0:	a313      	add	r3, pc, #76	; (adr r3, 8001e40 <calcBuf+0xe10>)
 8001df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df6:	f7fe fd31 	bl	800085c <__aeabi_ddiv>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4610      	mov	r0, r2
 8001e00:	4619      	mov	r1, r3
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	4b13      	ldr	r3, [pc, #76]	; (8001e54 <calcBuf+0xe24>)
 8001e08:	f7fe fa46 	bl	8000298 <__aeabi_dsub>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f7fe fe0a 	bl	8000a2c <__aeabi_d2uiz>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1c59      	adds	r1, r3, #1
 8001e20:	6139      	str	r1, [r7, #16]
 8001e22:	490d      	ldr	r1, [pc, #52]	; (8001e58 <calcBuf+0xe28>)
 8001e24:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(n=0;n<WS2812_NUM_LEDS_CH1;n++) {
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2b0d      	cmp	r3, #13
 8001e32:	f67f a906 	bls.w	8001042 <calcBuf+0x12>

  // short pause after all LEDs have been updated
//  for(n=0;n<(WS2812_NUM_LEDS_CH1+2);n++) {
//    WS2812_TIM_BUF[pos++]=0;
//  }
}
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	8ba2e8ba 	.word	0x8ba2e8ba
 8001e44:	4016ba2e 	.word	0x4016ba2e
 8001e48:	08d3dcb1 	.word	0x08d3dcb1
 8001e4c:	40013dcb 	.word	0x40013dcb
 8001e50:	200093d8 	.word	0x200093d8
 8001e54:	3ff00000 	.word	0x3ff00000
 8001e58:	200090d8 	.word	0x200090d8

08001e5c <startDMA>:

/**
 * Internal function; start DMA transfer
 */
void startDMA(void) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	dma_ready = 0;
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <startDMA+0x2c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
	  if (HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t *)WS2812_TIM_BUF, WS2812_BUFLEN) != HAL_OK)
 8001e66:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e6a:	4a08      	ldr	r2, [pc, #32]	; (8001e8c <startDMA+0x30>)
 8001e6c:	2104      	movs	r1, #4
 8001e6e:	4808      	ldr	r0, [pc, #32]	; (8001e90 <startDMA+0x34>)
 8001e70:	f009 fba4 	bl	800b5bc <HAL_TIM_PWM_Start_DMA>
	  {

	  }
	  if (HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, (uint32_t *)WS2812_TIM_BUF, WS2812_BUFLEN) != HAL_OK)
 8001e74:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e78:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <startDMA+0x30>)
 8001e7a:	2108      	movs	r1, #8
 8001e7c:	4804      	ldr	r0, [pc, #16]	; (8001e90 <startDMA+0x34>)
 8001e7e:	f009 fb9d 	bl	800b5bc <HAL_TIM_PWM_Start_DMA>
	  {

	  }
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000004 	.word	0x20000004
 8001e8c:	200090d8 	.word	0x200090d8
 8001e90:	200093d8 	.word	0x200093d8

08001e94 <WS2812_Refresh>:

void WS2812_Refresh(void) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
	while(!dma_ready);
 8001e98:	bf00      	nop
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <WS2812_Refresh+0x1c>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0fb      	beq.n	8001e9a <WS2812_Refresh+0x6>
	calcBuf();
 8001ea2:	f7ff f8c5 	bl	8001030 <calcBuf>
	startDMA();
 8001ea6:	f7ff ffd9 	bl	8001e5c <startDMA>
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000004 	.word	0x20000004

08001eb4 <WS2812_Clear>:

/**
 * Set all LEDs to 0 (off) and update
 */
void WS2812_Clear(uint8_t refresh) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	71fb      	strb	r3, [r7, #7]
	uint16_t num;

	for(num = 0; num < WS2812_NUM_LEDS_CH1; num++) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	81fb      	strh	r3, [r7, #14]
 8001ec2:	e01a      	b.n	8001efa <WS2812_Clear+0x46>
		WS2812_LED_BUF_CH1[num] = (WS2812_RGB_t){0,0,0};
 8001ec4:	89fa      	ldrh	r2, [r7, #14]
 8001ec6:	4913      	ldr	r1, [pc, #76]	; (8001f14 <WS2812_Clear+0x60>)
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	440b      	add	r3, r1
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	7019      	strb	r1, [r3, #0]
 8001ed4:	490f      	ldr	r1, [pc, #60]	; (8001f14 <WS2812_Clear+0x60>)
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	440b      	add	r3, r1
 8001ede:	3301      	adds	r3, #1
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	7019      	strb	r1, [r3, #0]
 8001ee4:	490b      	ldr	r1, [pc, #44]	; (8001f14 <WS2812_Clear+0x60>)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	440b      	add	r3, r1
 8001eee:	3302      	adds	r3, #2
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
	for(num = 0; num < WS2812_NUM_LEDS_CH1; num++) {
 8001ef4:	89fb      	ldrh	r3, [r7, #14]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	81fb      	strh	r3, [r7, #14]
 8001efa:	89fb      	ldrh	r3, [r7, #14]
 8001efc:	2b0d      	cmp	r3, #13
 8001efe:	d9e1      	bls.n	8001ec4 <WS2812_Clear+0x10>
	}

	 if(refresh==1) WS2812_Refresh();
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <WS2812_Clear+0x56>
 8001f06:	f7ff ffc5 	bl	8001e94 <WS2812_Refresh>
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20009420 	.word	0x20009420

08001f18 <WS2812_All_RGB>:

/**
 * Set all LEDs (R, G, B values). If refresh == 1, update LEDs, otherwise just update buffer (if several function calls are to be done before refresh)
 */
void WS2812_All_RGB(WS2812_RGB_t rgb_col, uint8_t refresh)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	70fb      	strb	r3, [r7, #3]
  uint32_t n;

  for(n=0;n<WS2812_NUM_LEDS_CH1;n++) {
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	e00e      	b.n	8001f48 <WS2812_All_RGB+0x30>
	  WS2812_LED_BUF_CH1[n]=rgb_col;
 8001f2a:	490d      	ldr	r1, [pc, #52]	; (8001f60 <WS2812_All_RGB+0x48>)
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	440b      	add	r3, r1
 8001f36:	461a      	mov	r2, r3
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	8819      	ldrh	r1, [r3, #0]
 8001f3c:	789b      	ldrb	r3, [r3, #2]
 8001f3e:	8011      	strh	r1, [r2, #0]
 8001f40:	7093      	strb	r3, [r2, #2]
  for(n=0;n<WS2812_NUM_LEDS_CH1;n++) {
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3301      	adds	r3, #1
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b0d      	cmp	r3, #13
 8001f4c:	d9ed      	bls.n	8001f2a <WS2812_All_RGB+0x12>
  }
  if(refresh==1) WS2812_Refresh();
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <WS2812_All_RGB+0x40>
 8001f54:	f7ff ff9e 	bl	8001e94 <WS2812_Refresh>
}
 8001f58:	bf00      	nop
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20009420 	.word	0x20009420

08001f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	BufferIsSet = 0;
 8001f68:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <main+0xfc>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f6e:	f003 f859 	bl	8005024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f72:	f000 f8af 	bl	80020d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f76:	f000 fcf9 	bl	800296c <MX_GPIO_Init>
  MX_DMA_Init();
 8001f7a:	f000 fc71 	bl	8002860 <MX_DMA_Init>
  MX_LTDC_Init();
 8001f7e:	f000 faa7 	bl	80024d0 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8001f82:	f000 fa1d 	bl	80023c0 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001f86:	f000 fc93 	bl	80028b0 <MX_FMC_Init>
  MX_CRC_Init();
 8001f8a:	f000 fa05 	bl	8002398 <MX_CRC_Init>
  MX_TIM13_Init();
 8001f8e:	f000 fbc1 	bl	8002714 <MX_TIM13_Init>
  MX_CAN1_Init();
 8001f92:	f000 f95d 	bl	8002250 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001f96:	f000 f9c9 	bl	800232c <MX_CAN2_Init>
  MX_I2C2_Init();
 8001f9a:	f000 fa59 	bl	8002450 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8001f9e:	f000 fb19 	bl	80025d4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001fa2:	f00c f83b 	bl	800e01c <MX_FATFS_Init>
  MX_ADC1_Init();
 8001fa6:	f000 f901 	bl	80021ac <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001faa:	f000 fc2b 	bl	8002804 <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_UART_Init();
 8001fae:	f000 fbff 	bl	80027b0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001fb2:	f000 fb2f 	bl	8002614 <MX_TIM2_Init>
  MX_TouchGFX_Init();
 8001fb6:	f00f ff50 	bl	8011e5a <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8001fba:	f00f ff47 	bl	8011e4c <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4828      	ldr	r0, [pc, #160]	; (8002064 <main+0x100>)
 8001fc2:	f009 fa33 	bl	800b42c <HAL_TIM_PWM_Start>
	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001fc6:	f00c fb0d 	bl	800e5e4 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of START_Task */
  START_TaskHandle = osThreadNew(Start_START_Task, NULL, &START_Task_attributes);
 8001fca:	4a27      	ldr	r2, [pc, #156]	; (8002068 <main+0x104>)
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4827      	ldr	r0, [pc, #156]	; (800206c <main+0x108>)
 8001fd0:	f00c fb89 	bl	800e6e6 <osThreadNew>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4a26      	ldr	r2, [pc, #152]	; (8002070 <main+0x10c>)
 8001fd8:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8001fda:	4a26      	ldr	r2, [pc, #152]	; (8002074 <main+0x110>)
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4826      	ldr	r0, [pc, #152]	; (8002078 <main+0x114>)
 8001fe0:	f00c fb81 	bl	800e6e6 <osThreadNew>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4a25      	ldr	r2, [pc, #148]	; (800207c <main+0x118>)
 8001fe8:	6013      	str	r3, [r2, #0]

  /* creation of CAN_Task */
  CAN_TaskHandle = osThreadNew(Start_CAN_Task, NULL, &CAN_Task_attributes);
 8001fea:	4a25      	ldr	r2, [pc, #148]	; (8002080 <main+0x11c>)
 8001fec:	2100      	movs	r1, #0
 8001fee:	4825      	ldr	r0, [pc, #148]	; (8002084 <main+0x120>)
 8001ff0:	f00c fb79 	bl	800e6e6 <osThreadNew>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4a24      	ldr	r2, [pc, #144]	; (8002088 <main+0x124>)
 8001ff8:	6013      	str	r3, [r2, #0]

  /* creation of BTN_Task */
  BTN_TaskHandle = osThreadNew(Start_BTN_Task, NULL, &BTN_Task_attributes);
 8001ffa:	4a24      	ldr	r2, [pc, #144]	; (800208c <main+0x128>)
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4824      	ldr	r0, [pc, #144]	; (8002090 <main+0x12c>)
 8002000:	f00c fb71 	bl	800e6e6 <osThreadNew>
 8002004:	4603      	mov	r3, r0
 8002006:	4a23      	ldr	r2, [pc, #140]	; (8002094 <main+0x130>)
 8002008:	6013      	str	r3, [r2, #0]

  /* creation of BARO_Task */
  BARO_TaskHandle = osThreadNew(Start_BARO_Task, NULL, &BARO_Task_attributes);
 800200a:	4a23      	ldr	r2, [pc, #140]	; (8002098 <main+0x134>)
 800200c:	2100      	movs	r1, #0
 800200e:	4823      	ldr	r0, [pc, #140]	; (800209c <main+0x138>)
 8002010:	f00c fb69 	bl	800e6e6 <osThreadNew>
 8002014:	4603      	mov	r3, r0
 8002016:	4a22      	ldr	r2, [pc, #136]	; (80020a0 <main+0x13c>)
 8002018:	6013      	str	r3, [r2, #0]

  /* creation of RGB_Task */
  RGB_TaskHandle = osThreadNew(Start_RGB_Task, NULL, &RGB_Task_attributes);
 800201a:	4a22      	ldr	r2, [pc, #136]	; (80020a4 <main+0x140>)
 800201c:	2100      	movs	r1, #0
 800201e:	4822      	ldr	r0, [pc, #136]	; (80020a8 <main+0x144>)
 8002020:	f00c fb61 	bl	800e6e6 <osThreadNew>
 8002024:	4603      	mov	r3, r0
 8002026:	4a21      	ldr	r2, [pc, #132]	; (80020ac <main+0x148>)
 8002028:	6013      	str	r3, [r2, #0]

  /* creation of INPUT_Task */
  INPUT_TaskHandle = osThreadNew(Start_INPUT_Task, NULL, &INPUT_Task_attributes);
 800202a:	4a21      	ldr	r2, [pc, #132]	; (80020b0 <main+0x14c>)
 800202c:	2100      	movs	r1, #0
 800202e:	4821      	ldr	r0, [pc, #132]	; (80020b4 <main+0x150>)
 8002030:	f00c fb59 	bl	800e6e6 <osThreadNew>
 8002034:	4603      	mov	r3, r0
 8002036:	4a20      	ldr	r2, [pc, #128]	; (80020b8 <main+0x154>)
 8002038:	6013      	str	r3, [r2, #0]

  /* creation of OUTPUT_Task */
  OUTPUT_TaskHandle = osThreadNew(Start_OUTPUT_Task, NULL, &OUTPUT_Task_attributes);
 800203a:	4a20      	ldr	r2, [pc, #128]	; (80020bc <main+0x158>)
 800203c:	2100      	movs	r1, #0
 800203e:	4820      	ldr	r0, [pc, #128]	; (80020c0 <main+0x15c>)
 8002040:	f00c fb51 	bl	800e6e6 <osThreadNew>
 8002044:	4603      	mov	r3, r0
 8002046:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <main+0x160>)
 8002048:	6013      	str	r3, [r2, #0]

  /* creation of BMS_Task */
  BMS_TaskHandle = osThreadNew(Start_BMS_Task, NULL, &BMS_Task_attributes);
 800204a:	4a1f      	ldr	r2, [pc, #124]	; (80020c8 <main+0x164>)
 800204c:	2100      	movs	r1, #0
 800204e:	481f      	ldr	r0, [pc, #124]	; (80020cc <main+0x168>)
 8002050:	f00c fb49 	bl	800e6e6 <osThreadNew>
 8002054:	4603      	mov	r3, r0
 8002056:	4a1e      	ldr	r2, [pc, #120]	; (80020d0 <main+0x16c>)
 8002058:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800205a:	f00c fb09 	bl	800e670 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 800205e:	e7fe      	b.n	800205e <main+0xfa>
 8002060:	20009454 	.word	0x20009454
 8002064:	20009dfc 	.word	0x20009dfc
 8002068:	0802b9c4 	.word	0x0802b9c4
 800206c:	08002ca1 	.word	0x08002ca1
 8002070:	20009c78 	.word	0x20009c78
 8002074:	0802b9e8 	.word	0x0802b9e8
 8002078:	08011e67 	.word	0x08011e67
 800207c:	20009df4 	.word	0x20009df4
 8002080:	0802ba0c 	.word	0x0802ba0c
 8002084:	08002cf1 	.word	0x08002cf1
 8002088:	2000a71c 	.word	0x2000a71c
 800208c:	0802ba30 	.word	0x0802ba30
 8002090:	08003d25 	.word	0x08003d25
 8002094:	2000a690 	.word	0x2000a690
 8002098:	0802ba54 	.word	0x0802ba54
 800209c:	08003d65 	.word	0x08003d65
 80020a0:	2000a7fc 	.word	0x2000a7fc
 80020a4:	0802ba78 	.word	0x0802ba78
 80020a8:	08003d85 	.word	0x08003d85
 80020ac:	2000944c 	.word	0x2000944c
 80020b0:	0802ba9c 	.word	0x0802ba9c
 80020b4:	08003dc9 	.word	0x08003dc9
 80020b8:	2000a7f8 	.word	0x2000a7f8
 80020bc:	0802bac0 	.word	0x0802bac0
 80020c0:	08003e5d 	.word	0x08003e5d
 80020c4:	20009450 	.word	0x20009450
 80020c8:	0802bae4 	.word	0x0802bae4
 80020cc:	08003ed5 	.word	0x08003ed5
 80020d0:	20009df8 	.word	0x20009df8

080020d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b094      	sub	sp, #80	; 0x50
 80020d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020da:	f107 0320 	add.w	r3, r7, #32
 80020de:	2230      	movs	r2, #48	; 0x30
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f027 fd1c 	bl	8029b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020e8:	f107 030c 	add.w	r3, r7, #12
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <SystemClock_Config+0xd0>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	4a28      	ldr	r2, [pc, #160]	; (80021a4 <SystemClock_Config+0xd0>)
 8002102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002106:	6413      	str	r3, [r2, #64]	; 0x40
 8002108:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <SystemClock_Config+0xd0>)
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002114:	2300      	movs	r3, #0
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <SystemClock_Config+0xd4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a22      	ldr	r2, [pc, #136]	; (80021a8 <SystemClock_Config+0xd4>)
 800211e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <SystemClock_Config+0xd4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002130:	2301      	movs	r3, #1
 8002132:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002134:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800213a:	2302      	movs	r3, #2
 800213c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800213e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002142:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002144:	2304      	movs	r3, #4
 8002146:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002148:	23a8      	movs	r3, #168	; 0xa8
 800214a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800214c:	2302      	movs	r3, #2
 800214e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002150:	2307      	movs	r3, #7
 8002152:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002154:	f107 0320 	add.w	r3, r7, #32
 8002158:	4618      	mov	r0, r3
 800215a:	f007 f891 	bl	8009280 <HAL_RCC_OscConfig>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002164:	f002 f84c 	bl	8004200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002168:	230f      	movs	r3, #15
 800216a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800216c:	2302      	movs	r3, #2
 800216e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002174:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002178:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800217a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800217e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	2105      	movs	r1, #5
 8002186:	4618      	mov	r0, r3
 8002188:	f007 faf2 	bl	8009770 <HAL_RCC_ClockConfig>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002192:	f002 f835 	bl	8004200 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8002196:	f007 fbd1 	bl	800993c <HAL_RCC_EnableCSS>
}
 800219a:	bf00      	nop
 800219c:	3750      	adds	r7, #80	; 0x50
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40007000 	.word	0x40007000

080021ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021b2:	463b      	mov	r3, r7
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80021be:	4b21      	ldr	r3, [pc, #132]	; (8002244 <MX_ADC1_Init+0x98>)
 80021c0:	4a21      	ldr	r2, [pc, #132]	; (8002248 <MX_ADC1_Init+0x9c>)
 80021c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80021c4:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <MX_ADC1_Init+0x98>)
 80021c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <MX_ADC1_Init+0x98>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80021d2:	4b1c      	ldr	r3, [pc, #112]	; (8002244 <MX_ADC1_Init+0x98>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <MX_ADC1_Init+0x98>)
 80021da:	2200      	movs	r2, #0
 80021dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021de:	4b19      	ldr	r3, [pc, #100]	; (8002244 <MX_ADC1_Init+0x98>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021e6:	4b17      	ldr	r3, [pc, #92]	; (8002244 <MX_ADC1_Init+0x98>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021ec:	4b15      	ldr	r3, [pc, #84]	; (8002244 <MX_ADC1_Init+0x98>)
 80021ee:	4a17      	ldr	r2, [pc, #92]	; (800224c <MX_ADC1_Init+0xa0>)
 80021f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021f2:	4b14      	ldr	r3, [pc, #80]	; (8002244 <MX_ADC1_Init+0x98>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <MX_ADC1_Init+0x98>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <MX_ADC1_Init+0x98>)
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <MX_ADC1_Init+0x98>)
 8002208:	2201      	movs	r2, #1
 800220a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800220c:	480d      	ldr	r0, [pc, #52]	; (8002244 <MX_ADC1_Init+0x98>)
 800220e:	f002 ff6f 	bl	80050f0 <HAL_ADC_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002218:	f001 fff2 	bl	8004200 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800221c:	230b      	movs	r3, #11
 800221e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002220:	2301      	movs	r3, #1
 8002222:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002224:	2300      	movs	r3, #0
 8002226:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002228:	463b      	mov	r3, r7
 800222a:	4619      	mov	r1, r3
 800222c:	4805      	ldr	r0, [pc, #20]	; (8002244 <MX_ADC1_Init+0x98>)
 800222e:	f003 f933 	bl	8005498 <HAL_ADC_ConfigChannel>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002238:	f001 ffe2 	bl	8004200 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20009d84 	.word	0x20009d84
 8002248:	40012000 	.word	0x40012000
 800224c:	0f000001 	.word	0x0f000001

08002250 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b08c      	sub	sp, #48	; 0x30
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002256:	4b32      	ldr	r3, [pc, #200]	; (8002320 <MX_CAN1_Init+0xd0>)
 8002258:	4a32      	ldr	r2, [pc, #200]	; (8002324 <MX_CAN1_Init+0xd4>)
 800225a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 800225c:	4b30      	ldr	r3, [pc, #192]	; (8002320 <MX_CAN1_Init+0xd0>)
 800225e:	220c      	movs	r2, #12
 8002260:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002262:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <MX_CAN1_Init+0xd0>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002268:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <MX_CAN1_Init+0xd0>)
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 800226e:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <MX_CAN1_Init+0xd0>)
 8002270:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002274:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002276:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <MX_CAN1_Init+0xd0>)
 8002278:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800227c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800227e:	4b28      	ldr	r3, [pc, #160]	; (8002320 <MX_CAN1_Init+0xd0>)
 8002280:	2200      	movs	r2, #0
 8002282:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002284:	4b26      	ldr	r3, [pc, #152]	; (8002320 <MX_CAN1_Init+0xd0>)
 8002286:	2200      	movs	r2, #0
 8002288:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800228a:	4b25      	ldr	r3, [pc, #148]	; (8002320 <MX_CAN1_Init+0xd0>)
 800228c:	2200      	movs	r2, #0
 800228e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002290:	4b23      	ldr	r3, [pc, #140]	; (8002320 <MX_CAN1_Init+0xd0>)
 8002292:	2200      	movs	r2, #0
 8002294:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002296:	4b22      	ldr	r3, [pc, #136]	; (8002320 <MX_CAN1_Init+0xd0>)
 8002298:	2200      	movs	r2, #0
 800229a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800229c:	4b20      	ldr	r3, [pc, #128]	; (8002320 <MX_CAN1_Init+0xd0>)
 800229e:	2200      	movs	r2, #0
 80022a0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80022a2:	481f      	ldr	r0, [pc, #124]	; (8002320 <MX_CAN1_Init+0xd0>)
 80022a4:	f003 fb26 	bl	80058f4 <HAL_CAN_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80022ae:	f001 ffa7 	bl	8004200 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	sFilterConfig.FilterBank = 15;
 80022b2:	230f      	movs	r3, #15
 80022b4:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80022ba:	2301      	movs	r3, #1
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = 0x0000;
 80022be:	2300      	movs	r3, #0
 80022c0:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = 0x0000;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 80022d2:	2301      	movs	r3, #1
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
	//sFilterConfig.SlaveStartFilterBank = 14;
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80022d6:	f107 0308 	add.w	r3, r7, #8
 80022da:	4619      	mov	r1, r3
 80022dc:	4810      	ldr	r0, [pc, #64]	; (8002320 <MX_CAN1_Init+0xd0>)
 80022de:	f003 fc05 	bl	8005aec <HAL_CAN_ConfigFilter>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_CAN1_Init+0x9c>
		/* Filter configuration Error */
		Error_Handler();
 80022e8:	f001 ff8a 	bl	8004200 <Error_Handler>
	}
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80022ec:	480c      	ldr	r0, [pc, #48]	; (8002320 <MX_CAN1_Init+0xd0>)
 80022ee:	f003 fcdd 	bl	8005cac <HAL_CAN_Start>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_CAN1_Init+0xac>
		/* Start Error */
		Error_Handler();
 80022f8:	f001 ff82 	bl	8004200 <Error_Handler>
	}

	__HAL_RCC_CAN1_CLK_ENABLE();
 80022fc:	2300      	movs	r3, #0
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <MX_CAN1_Init+0xd8>)
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	4a08      	ldr	r2, [pc, #32]	; (8002328 <MX_CAN1_Init+0xd8>)
 8002306:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800230a:	6413      	str	r3, [r2, #64]	; 0x40
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <MX_CAN1_Init+0xd8>)
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
	//__HAL_RCC_CAN2_CLK_ENABLE();
  /* USER CODE END CAN1_Init 2 */

}
 8002318:	bf00      	nop
 800231a:	3730      	adds	r7, #48	; 0x30
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	2000a768 	.word	0x2000a768
 8002324:	40006400 	.word	0x40006400
 8002328:	40023800 	.word	0x40023800

0800232c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002330:	4b17      	ldr	r3, [pc, #92]	; (8002390 <MX_CAN2_Init+0x64>)
 8002332:	4a18      	ldr	r2, [pc, #96]	; (8002394 <MX_CAN2_Init+0x68>)
 8002334:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 12;
 8002336:	4b16      	ldr	r3, [pc, #88]	; (8002390 <MX_CAN2_Init+0x64>)
 8002338:	220c      	movs	r2, #12
 800233a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800233c:	4b14      	ldr	r3, [pc, #80]	; (8002390 <MX_CAN2_Init+0x64>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002342:	4b13      	ldr	r3, [pc, #76]	; (8002390 <MX_CAN2_Init+0x64>)
 8002344:	2200      	movs	r2, #0
 8002346:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <MX_CAN2_Init+0x64>)
 800234a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800234e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <MX_CAN2_Init+0x64>)
 8002352:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002356:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002358:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <MX_CAN2_Init+0x64>)
 800235a:	2200      	movs	r2, #0
 800235c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <MX_CAN2_Init+0x64>)
 8002360:	2200      	movs	r2, #0
 8002362:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <MX_CAN2_Init+0x64>)
 8002366:	2200      	movs	r2, #0
 8002368:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800236a:	4b09      	ldr	r3, [pc, #36]	; (8002390 <MX_CAN2_Init+0x64>)
 800236c:	2200      	movs	r2, #0
 800236e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002370:	4b07      	ldr	r3, [pc, #28]	; (8002390 <MX_CAN2_Init+0x64>)
 8002372:	2200      	movs	r2, #0
 8002374:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <MX_CAN2_Init+0x64>)
 8002378:	2200      	movs	r2, #0
 800237a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800237c:	4804      	ldr	r0, [pc, #16]	; (8002390 <MX_CAN2_Init+0x64>)
 800237e:	f003 fab9 	bl	80058f4 <HAL_CAN_Init>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002388:	f001 ff3a 	bl	8004200 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800238c:	bf00      	nop
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20009dcc 	.word	0x20009dcc
 8002394:	40006800 	.word	0x40006800

08002398 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <MX_CRC_Init+0x20>)
 800239e:	4a07      	ldr	r2, [pc, #28]	; (80023bc <MX_CRC_Init+0x24>)
 80023a0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80023a2:	4805      	ldr	r0, [pc, #20]	; (80023b8 <MX_CRC_Init+0x20>)
 80023a4:	f004 f9ce 	bl	8006744 <HAL_CRC_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80023ae:	f001 ff27 	bl	8004200 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20009964 	.word	0x20009964
 80023bc:	40023000 	.word	0x40023000

080023c0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80023c4:	4b20      	ldr	r3, [pc, #128]	; (8002448 <MX_DMA2D_Init+0x88>)
 80023c6:	4a21      	ldr	r2, [pc, #132]	; (800244c <MX_DMA2D_Init+0x8c>)
 80023c8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_BLEND;
 80023ca:	4b1f      	ldr	r3, [pc, #124]	; (8002448 <MX_DMA2D_Init+0x88>)
 80023cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023d0:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80023d2:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <MX_DMA2D_Init+0x88>)
 80023d4:	2202      	movs	r2, #2
 80023d6:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <MX_DMA2D_Init+0x88>)
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[0].InputOffset = 0;
 80023de:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <MX_DMA2D_Init+0x88>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	619a      	str	r2, [r3, #24]
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 80023e4:	4b18      	ldr	r3, [pc, #96]	; (8002448 <MX_DMA2D_Init+0x88>)
 80023e6:	2202      	movs	r2, #2
 80023e8:	61da      	str	r2, [r3, #28]
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80023ea:	4b17      	ldr	r3, [pc, #92]	; (8002448 <MX_DMA2D_Init+0x88>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	621a      	str	r2, [r3, #32]
  hdma2d.LayerCfg[0].InputAlpha = 0;
 80023f0:	4b15      	ldr	r3, [pc, #84]	; (8002448 <MX_DMA2D_Init+0x88>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d.LayerCfg[1].InputOffset = 0;
 80023f6:	4b14      	ldr	r3, [pc, #80]	; (8002448 <MX_DMA2D_Init+0x88>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <MX_DMA2D_Init+0x88>)
 80023fe:	2202      	movs	r2, #2
 8002400:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <MX_DMA2D_Init+0x88>)
 8002404:	2200      	movs	r2, #0
 8002406:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <MX_DMA2D_Init+0x88>)
 800240a:	2200      	movs	r2, #0
 800240c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800240e:	480e      	ldr	r0, [pc, #56]	; (8002448 <MX_DMA2D_Init+0x88>)
 8002410:	f004 fd30 	bl	8006e74 <HAL_DMA2D_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_DMA2D_Init+0x5e>
  {
    Error_Handler();
 800241a:	f001 fef1 	bl	8004200 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 0) != HAL_OK)
 800241e:	2100      	movs	r1, #0
 8002420:	4809      	ldr	r0, [pc, #36]	; (8002448 <MX_DMA2D_Init+0x88>)
 8002422:	f004 fe81 	bl	8007128 <HAL_DMA2D_ConfigLayer>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_DMA2D_Init+0x70>
  {
    Error_Handler();
 800242c:	f001 fee8 	bl	8004200 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002430:	2101      	movs	r1, #1
 8002432:	4805      	ldr	r0, [pc, #20]	; (8002448 <MX_DMA2D_Init+0x88>)
 8002434:	f004 fe78 	bl	8007128 <HAL_DMA2D_ConfigLayer>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_DMA2D_Init+0x82>
  {
    Error_Handler();
 800243e:	f001 fedf 	bl	8004200 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	2000a720 	.word	0x2000a720
 800244c:	4002b000 	.word	0x4002b000

08002450 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <MX_I2C2_Init+0x74>)
 8002456:	4a1c      	ldr	r2, [pc, #112]	; (80024c8 <MX_I2C2_Init+0x78>)
 8002458:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800245a:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <MX_I2C2_Init+0x74>)
 800245c:	4a1b      	ldr	r2, [pc, #108]	; (80024cc <MX_I2C2_Init+0x7c>)
 800245e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002460:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <MX_I2C2_Init+0x74>)
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002466:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <MX_I2C2_Init+0x74>)
 8002468:	2200      	movs	r2, #0
 800246a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800246c:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <MX_I2C2_Init+0x74>)
 800246e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002472:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002474:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <MX_I2C2_Init+0x74>)
 8002476:	2200      	movs	r2, #0
 8002478:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <MX_I2C2_Init+0x74>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002480:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <MX_I2C2_Init+0x74>)
 8002482:	2200      	movs	r2, #0
 8002484:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002486:	4b0f      	ldr	r3, [pc, #60]	; (80024c4 <MX_I2C2_Init+0x74>)
 8002488:	2200      	movs	r2, #0
 800248a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800248c:	480d      	ldr	r0, [pc, #52]	; (80024c4 <MX_I2C2_Init+0x74>)
 800248e:	f005 f8ed 	bl	800766c <HAL_I2C_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002498:	f001 feb2 	bl	8004200 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800249c:	2100      	movs	r1, #0
 800249e:	4809      	ldr	r0, [pc, #36]	; (80024c4 <MX_I2C2_Init+0x74>)
 80024a0:	f006 f9c1 	bl	8008826 <HAL_I2CEx_ConfigAnalogFilter>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80024aa:	f001 fea9 	bl	8004200 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80024ae:	2100      	movs	r1, #0
 80024b0:	4804      	ldr	r0, [pc, #16]	; (80024c4 <MX_I2C2_Init+0x74>)
 80024b2:	f006 f9f4 	bl	800889e <HAL_I2CEx_ConfigDigitalFilter>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80024bc:	f001 fea0 	bl	8004200 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	2000996c 	.word	0x2000996c
 80024c8:	40005800 	.word	0x40005800
 80024cc:	00061a80 	.word	0x00061a80

080024d0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08e      	sub	sp, #56	; 0x38
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	2234      	movs	r2, #52	; 0x34
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f027 fb1f 	bl	8029b20 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80024e2:	4b3a      	ldr	r3, [pc, #232]	; (80025cc <MX_LTDC_Init+0xfc>)
 80024e4:	4a3a      	ldr	r2, [pc, #232]	; (80025d0 <MX_LTDC_Init+0x100>)
 80024e6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80024e8:	4b38      	ldr	r3, [pc, #224]	; (80025cc <MX_LTDC_Init+0xfc>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80024ee:	4b37      	ldr	r3, [pc, #220]	; (80025cc <MX_LTDC_Init+0xfc>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80024f4:	4b35      	ldr	r3, [pc, #212]	; (80025cc <MX_LTDC_Init+0xfc>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80024fa:	4b34      	ldr	r3, [pc, #208]	; (80025cc <MX_LTDC_Init+0xfc>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 20;
 8002500:	4b32      	ldr	r3, [pc, #200]	; (80025cc <MX_LTDC_Init+0xfc>)
 8002502:	2214      	movs	r2, #20
 8002504:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002506:	4b31      	ldr	r3, [pc, #196]	; (80025cc <MX_LTDC_Init+0xfc>)
 8002508:	2203      	movs	r2, #3
 800250a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 160;
 800250c:	4b2f      	ldr	r3, [pc, #188]	; (80025cc <MX_LTDC_Init+0xfc>)
 800250e:	22a0      	movs	r2, #160	; 0xa0
 8002510:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 15;
 8002512:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <MX_LTDC_Init+0xfc>)
 8002514:	220f      	movs	r2, #15
 8002516:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 960;
 8002518:	4b2c      	ldr	r3, [pc, #176]	; (80025cc <MX_LTDC_Init+0xfc>)
 800251a:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 800251e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 495;
 8002520:	4b2a      	ldr	r3, [pc, #168]	; (80025cc <MX_LTDC_Init+0xfc>)
 8002522:	f240 12ef 	movw	r2, #495	; 0x1ef
 8002526:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 1120;
 8002528:	4b28      	ldr	r3, [pc, #160]	; (80025cc <MX_LTDC_Init+0xfc>)
 800252a:	f44f 628c 	mov.w	r2, #1120	; 0x460
 800252e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 515;
 8002530:	4b26      	ldr	r3, [pc, #152]	; (80025cc <MX_LTDC_Init+0xfc>)
 8002532:	f240 2203 	movw	r2, #515	; 0x203
 8002536:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002538:	4b24      	ldr	r3, [pc, #144]	; (80025cc <MX_LTDC_Init+0xfc>)
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002540:	4b22      	ldr	r3, [pc, #136]	; (80025cc <MX_LTDC_Init+0xfc>)
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002548:	4b20      	ldr	r3, [pc, #128]	; (80025cc <MX_LTDC_Init+0xfc>)
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002550:	481e      	ldr	r0, [pc, #120]	; (80025cc <MX_LTDC_Init+0xfc>)
 8002552:	f006 f9e3 	bl	800891c <HAL_LTDC_Init>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800255c:	f001 fe50 	bl	8004200 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8002564:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002568:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 800256e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002572:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002574:	2302      	movs	r3, #2
 8002576:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002578:	23ff      	movs	r3, #255	; 0xff
 800257a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002580:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002584:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002586:	2307      	movs	r3, #7
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800258a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8002590:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8002596:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800259a:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	2200      	movs	r2, #0
 80025b2:	4619      	mov	r1, r3
 80025b4:	4805      	ldr	r0, [pc, #20]	; (80025cc <MX_LTDC_Init+0xfc>)
 80025b6:	f006 fb39 	bl	8008c2c <HAL_LTDC_ConfigLayer>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80025c0:	f001 fe1e 	bl	8004200 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80025c4:	bf00      	nop
 80025c6:	3738      	adds	r7, #56	; 0x38
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20009cdc 	.word	0x20009cdc
 80025d0:	40016800 	.word	0x40016800

080025d4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80025d8:	4b0c      	ldr	r3, [pc, #48]	; (800260c <MX_SDIO_SD_Init+0x38>)
 80025da:	4a0d      	ldr	r2, [pc, #52]	; (8002610 <MX_SDIO_SD_Init+0x3c>)
 80025dc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <MX_SDIO_SD_Init+0x38>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <MX_SDIO_SD_Init+0x38>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80025ea:	4b08      	ldr	r3, [pc, #32]	; (800260c <MX_SDIO_SD_Init+0x38>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <MX_SDIO_SD_Init+0x38>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80025f6:	4b05      	ldr	r3, [pc, #20]	; (800260c <MX_SDIO_SD_Init+0x38>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <MX_SDIO_SD_Init+0x38>)
 80025fe:	2200      	movs	r2, #0
 8002600:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002602:	bf00      	nop
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	2000a694 	.word	0x2000a694
 8002610:	40012c00 	.word	0x40012c00

08002614 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08e      	sub	sp, #56	; 0x38
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800261a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]
 8002624:	609a      	str	r2, [r3, #8]
 8002626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002628:	f107 0320 	add.w	r3, r7, #32
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002632:	1d3b      	adds	r3, r7, #4
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
 8002640:	615a      	str	r2, [r3, #20]
 8002642:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002644:	4b32      	ldr	r3, [pc, #200]	; (8002710 <MX_TIM2_Init+0xfc>)
 8002646:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800264a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800264c:	4b30      	ldr	r3, [pc, #192]	; (8002710 <MX_TIM2_Init+0xfc>)
 800264e:	2200      	movs	r2, #0
 8002650:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002652:	4b2f      	ldr	r3, [pc, #188]	; (8002710 <MX_TIM2_Init+0xfc>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 210;
 8002658:	4b2d      	ldr	r3, [pc, #180]	; (8002710 <MX_TIM2_Init+0xfc>)
 800265a:	22d2      	movs	r2, #210	; 0xd2
 800265c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800265e:	4b2c      	ldr	r3, [pc, #176]	; (8002710 <MX_TIM2_Init+0xfc>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002664:	4b2a      	ldr	r3, [pc, #168]	; (8002710 <MX_TIM2_Init+0xfc>)
 8002666:	2200      	movs	r2, #0
 8002668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800266a:	4829      	ldr	r0, [pc, #164]	; (8002710 <MX_TIM2_Init+0xfc>)
 800266c:	f008 fdc4 	bl	800b1f8 <HAL_TIM_Base_Init>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002676:	f001 fdc3 	bl	8004200 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800267a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002680:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002684:	4619      	mov	r1, r3
 8002686:	4822      	ldr	r0, [pc, #136]	; (8002710 <MX_TIM2_Init+0xfc>)
 8002688:	f009 fb2a 	bl	800bce0 <HAL_TIM_ConfigClockSource>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002692:	f001 fdb5 	bl	8004200 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002696:	481e      	ldr	r0, [pc, #120]	; (8002710 <MX_TIM2_Init+0xfc>)
 8002698:	f008 fe6e 	bl	800b378 <HAL_TIM_PWM_Init>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80026a2:	f001 fdad 	bl	8004200 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026aa:	2300      	movs	r3, #0
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026ae:	f107 0320 	add.w	r3, r7, #32
 80026b2:	4619      	mov	r1, r3
 80026b4:	4816      	ldr	r0, [pc, #88]	; (8002710 <MX_TIM2_Init+0xfc>)
 80026b6:	f009 fff7 	bl	800c6a8 <HAL_TIMEx_MasterConfigSynchronization>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80026c0:	f001 fd9e 	bl	8004200 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026c4:	2360      	movs	r3, #96	; 0x60
 80026c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	2204      	movs	r2, #4
 80026d8:	4619      	mov	r1, r3
 80026da:	480d      	ldr	r0, [pc, #52]	; (8002710 <MX_TIM2_Init+0xfc>)
 80026dc:	f009 fa3e 	bl	800bb5c <HAL_TIM_PWM_ConfigChannel>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80026e6:	f001 fd8b 	bl	8004200 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	2208      	movs	r2, #8
 80026ee:	4619      	mov	r1, r3
 80026f0:	4807      	ldr	r0, [pc, #28]	; (8002710 <MX_TIM2_Init+0xfc>)
 80026f2:	f009 fa33 	bl	800bb5c <HAL_TIM_PWM_ConfigChannel>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80026fc:	f001 fd80 	bl	8004200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002700:	4803      	ldr	r0, [pc, #12]	; (8002710 <MX_TIM2_Init+0xfc>)
 8002702:	f002 f9cd 	bl	8004aa0 <HAL_TIM_MspPostInit>

}
 8002706:	bf00      	nop
 8002708:	3738      	adds	r7, #56	; 0x38
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	200093d8 	.word	0x200093d8

08002714 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
 8002728:	615a      	str	r2, [r3, #20]
 800272a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800272c:	4b1e      	ldr	r3, [pc, #120]	; (80027a8 <MX_TIM13_Init+0x94>)
 800272e:	4a1f      	ldr	r2, [pc, #124]	; (80027ac <MX_TIM13_Init+0x98>)
 8002730:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 90-1;
 8002732:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <MX_TIM13_Init+0x94>)
 8002734:	2259      	movs	r2, #89	; 0x59
 8002736:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <MX_TIM13_Init+0x94>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 800273e:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <MX_TIM13_Init+0x94>)
 8002740:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002744:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002746:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <MX_TIM13_Init+0x94>)
 8002748:	2200      	movs	r2, #0
 800274a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800274c:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <MX_TIM13_Init+0x94>)
 800274e:	2280      	movs	r2, #128	; 0x80
 8002750:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002752:	4815      	ldr	r0, [pc, #84]	; (80027a8 <MX_TIM13_Init+0x94>)
 8002754:	f008 fd50 	bl	800b1f8 <HAL_TIM_Base_Init>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800275e:	f001 fd4f 	bl	8004200 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002762:	4811      	ldr	r0, [pc, #68]	; (80027a8 <MX_TIM13_Init+0x94>)
 8002764:	f008 fe08 	bl	800b378 <HAL_TIM_PWM_Init>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800276e:	f001 fd47 	bl	8004200 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002772:	2360      	movs	r3, #96	; 0x60
 8002774:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	2200      	movs	r2, #0
 8002786:	4619      	mov	r1, r3
 8002788:	4807      	ldr	r0, [pc, #28]	; (80027a8 <MX_TIM13_Init+0x94>)
 800278a:	f009 f9e7 	bl	800bb5c <HAL_TIM_PWM_ConfigChannel>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002794:	f001 fd34 	bl	8004200 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002798:	4803      	ldr	r0, [pc, #12]	; (80027a8 <MX_TIM13_Init+0x94>)
 800279a:	f002 f981 	bl	8004aa0 <HAL_TIM_MspPostInit>

}
 800279e:	bf00      	nop
 80027a0:	3720      	adds	r7, #32
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20009dfc 	.word	0x20009dfc
 80027ac:	40001c00 	.word	0x40001c00

080027b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027b6:	4a12      	ldr	r2, [pc, #72]	; (8002800 <MX_USART1_UART_Init+0x50>)
 80027b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027ce:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027d6:	220c      	movs	r2, #12
 80027d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027dc:	2200      	movs	r2, #0
 80027de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027e6:	4805      	ldr	r0, [pc, #20]	; (80027fc <MX_USART1_UART_Init+0x4c>)
 80027e8:	f009 ffee 	bl	800c7c8 <HAL_UART_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027f2:	f001 fd05 	bl	8004200 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20009e44 	.word	0x20009e44
 8002800:	40011000 	.word	0x40011000

08002804 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002808:	4b14      	ldr	r3, [pc, #80]	; (800285c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800280a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800280e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002810:	4b12      	ldr	r3, [pc, #72]	; (800285c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002812:	2204      	movs	r2, #4
 8002814:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002816:	4b11      	ldr	r3, [pc, #68]	; (800285c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002818:	2202      	movs	r2, #2
 800281a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800281e:	2200      	movs	r2, #0
 8002820:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002822:	4b0e      	ldr	r3, [pc, #56]	; (800285c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002824:	2202      	movs	r2, #2
 8002826:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800282a:	2200      	movs	r2, #0
 800282c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800282e:	4b0b      	ldr	r3, [pc, #44]	; (800285c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002830:	2200      	movs	r2, #0
 8002832:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002834:	4b09      	ldr	r3, [pc, #36]	; (800285c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002836:	2200      	movs	r2, #0
 8002838:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800283c:	2200      	movs	r2, #0
 800283e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002842:	2200      	movs	r2, #0
 8002844:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002846:	4805      	ldr	r0, [pc, #20]	; (800285c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002848:	f006 fbfd 	bl	8009046 <HAL_PCD_Init>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002852:	f001 fcd5 	bl	8004200 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20009458 	.word	0x20009458

08002860 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <MX_DMA_Init+0x4c>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a0f      	ldr	r2, [pc, #60]	; (80028ac <MX_DMA_Init+0x4c>)
 8002870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b0d      	ldr	r3, [pc, #52]	; (80028ac <MX_DMA_Init+0x4c>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800287e:	607b      	str	r3, [r7, #4]
 8002880:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002882:	2200      	movs	r2, #0
 8002884:	2105      	movs	r1, #5
 8002886:	200c      	movs	r0, #12
 8002888:	f003 ff32 	bl	80066f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800288c:	200c      	movs	r0, #12
 800288e:	f003 ff4b 	bl	8006728 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002892:	2200      	movs	r2, #0
 8002894:	2105      	movs	r1, #5
 8002896:	2011      	movs	r0, #17
 8002898:	f003 ff2a 	bl	80066f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800289c:	2011      	movs	r0, #17
 800289e:	f003 ff43 	bl	8006728 <HAL_NVIC_EnableIRQ>

}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800

080028b0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08c      	sub	sp, #48	; 0x30
 80028b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80028b6:	f107 0314 	add.w	r3, r7, #20
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	60da      	str	r2, [r3, #12]
 80028c4:	611a      	str	r2, [r3, #16]
 80028c6:	615a      	str	r2, [r3, #20]
 80028c8:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80028ca:	4b26      	ldr	r3, [pc, #152]	; (8002964 <MX_FMC_Init+0xb4>)
 80028cc:	4a26      	ldr	r2, [pc, #152]	; (8002968 <MX_FMC_Init+0xb8>)
 80028ce:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80028d0:	4b24      	ldr	r3, [pc, #144]	; (8002964 <MX_FMC_Init+0xb4>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80028d6:	4b23      	ldr	r3, [pc, #140]	; (8002964 <MX_FMC_Init+0xb4>)
 80028d8:	2201      	movs	r2, #1
 80028da:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80028dc:	4b21      	ldr	r3, [pc, #132]	; (8002964 <MX_FMC_Init+0xb4>)
 80028de:	2208      	movs	r2, #8
 80028e0:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80028e2:	4b20      	ldr	r3, [pc, #128]	; (8002964 <MX_FMC_Init+0xb4>)
 80028e4:	2210      	movs	r2, #16
 80028e6:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80028e8:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <MX_FMC_Init+0xb4>)
 80028ea:	2240      	movs	r2, #64	; 0x40
 80028ec:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80028ee:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <MX_FMC_Init+0xb4>)
 80028f0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80028f4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80028f6:	4b1b      	ldr	r3, [pc, #108]	; (8002964 <MX_FMC_Init+0xb4>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <MX_FMC_Init+0xb4>)
 80028fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002902:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002904:	4b17      	ldr	r3, [pc, #92]	; (8002964 <MX_FMC_Init+0xb4>)
 8002906:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800290a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800290c:	4b15      	ldr	r3, [pc, #84]	; (8002964 <MX_FMC_Init+0xb4>)
 800290e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002912:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002914:	2302      	movs	r3, #2
 8002916:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 8;
 8002918:	2308      	movs	r3, #8
 800291a:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 6;
 800291c:	2306      	movs	r3, #6
 800291e:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 7;
 8002920:	2307      	movs	r3, #7
 8002922:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 5;
 8002924:	2305      	movs	r3, #5
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8002928:	2302      	movs	r3, #2
 800292a:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 800292c:	2302      	movs	r3, #2
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	4619      	mov	r1, r3
 8002936:	480b      	ldr	r0, [pc, #44]	; (8002964 <MX_FMC_Init+0xb4>)
 8002938:	f008 fbd1 	bl	800b0de <HAL_SDRAM_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 8002942:	f001 fc5d 	bl	8004200 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	FMC_SDRAM_CommandTypeDef command;
	if (SDRAM_Initialization_Sequence(&hsdram1, &command) != HAL_OK) {
 8002946:	1d3b      	adds	r3, r7, #4
 8002948:	4619      	mov	r1, r3
 800294a:	4806      	ldr	r0, [pc, #24]	; (8002964 <MX_FMC_Init+0xb4>)
 800294c:	f001 fc7a 	bl	8004244 <SDRAM_Initialization_Sequence>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_FMC_Init+0xaa>
		Error_Handler();
 8002956:	f001 fc53 	bl	8004200 <Error_Handler>
	}
  /* USER CODE END FMC_Init 2 */
}
 800295a:	bf00      	nop
 800295c:	3730      	adds	r7, #48	; 0x30
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	2000a7a8 	.word	0x2000a7a8
 8002968:	a0000140 	.word	0xa0000140

0800296c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b090      	sub	sp, #64	; 0x40
 8002970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	60da      	str	r2, [r3, #12]
 8002980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	62bb      	str	r3, [r7, #40]	; 0x28
 8002986:	4bad      	ldr	r3, [pc, #692]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4aac      	ldr	r2, [pc, #688]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 800298c:	f043 0310 	orr.w	r3, r3, #16
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4baa      	ldr	r3, [pc, #680]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28
 800299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
 80029a2:	4ba6      	ldr	r3, [pc, #664]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	4aa5      	ldr	r2, [pc, #660]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 80029a8:	f043 0304 	orr.w	r3, r3, #4
 80029ac:	6313      	str	r3, [r2, #48]	; 0x30
 80029ae:	4ba3      	ldr	r3, [pc, #652]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	623b      	str	r3, [r7, #32]
 80029be:	4b9f      	ldr	r3, [pc, #636]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	4a9e      	ldr	r2, [pc, #632]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 80029c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ca:	4b9c      	ldr	r3, [pc, #624]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	623b      	str	r3, [r7, #32]
 80029d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	4b98      	ldr	r3, [pc, #608]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	4a97      	ldr	r2, [pc, #604]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 80029e0:	f043 0320 	orr.w	r3, r3, #32
 80029e4:	6313      	str	r3, [r2, #48]	; 0x30
 80029e6:	4b95      	ldr	r3, [pc, #596]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	f003 0320 	and.w	r3, r3, #32
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	61bb      	str	r3, [r7, #24]
 80029f6:	4b91      	ldr	r3, [pc, #580]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	4a90      	ldr	r2, [pc, #576]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 80029fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a00:	6313      	str	r3, [r2, #48]	; 0x30
 8002a02:	4b8e      	ldr	r3, [pc, #568]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0a:	61bb      	str	r3, [r7, #24]
 8002a0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	4b8a      	ldr	r3, [pc, #552]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	4a89      	ldr	r2, [pc, #548]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002a18:	f043 0301 	orr.w	r3, r3, #1
 8002a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1e:	4b87      	ldr	r3, [pc, #540]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	4b83      	ldr	r3, [pc, #524]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	4a82      	ldr	r2, [pc, #520]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002a34:	f043 0302 	orr.w	r3, r3, #2
 8002a38:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3a:	4b80      	ldr	r3, [pc, #512]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b7c      	ldr	r3, [pc, #496]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a7b      	ldr	r2, [pc, #492]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002a50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b79      	ldr	r3, [pc, #484]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	4b75      	ldr	r3, [pc, #468]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	4a74      	ldr	r2, [pc, #464]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a70:	6313      	str	r3, [r2, #48]	; 0x30
 8002a72:	4b72      	ldr	r3, [pc, #456]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	4b6e      	ldr	r3, [pc, #440]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	4a6d      	ldr	r2, [pc, #436]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002a88:	f043 0308 	orr.w	r3, r3, #8
 8002a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8e:	4b6b      	ldr	r3, [pc, #428]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	607b      	str	r3, [r7, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	603b      	str	r3, [r7, #0]
 8002a9e:	4b67      	ldr	r3, [pc, #412]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	4a66      	ldr	r2, [pc, #408]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002aa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aaa:	4b64      	ldr	r3, [pc, #400]	; (8002c3c <MX_GPIO_Init+0x2d0>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OUT_S0_Pin|OUT_E_Pin, GPIO_PIN_RESET);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	210c      	movs	r1, #12
 8002aba:	4861      	ldr	r0, [pc, #388]	; (8002c40 <MX_GPIO_Init+0x2d4>)
 8002abc:	f004 fd8a 	bl	80075d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MULTISENSE_EN5_Pin|LED_PJ12_Pin|LED_PJ13_Pin|LED_PJ14_Pin
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f24f 0108 	movw	r1, #61448	; 0xf008
 8002ac6:	485f      	ldr	r0, [pc, #380]	; (8002c44 <MX_GPIO_Init+0x2d8>)
 8002ac8:	f004 fd84 	bl	80075d4 <HAL_GPIO_WritePin>
                          |LED_PJ15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, MULTISENSE_RST_Pin|MULTISENSE_SEL0_Pin|MULTISENSE_SEL1_Pin|CAN2_SEL0_Pin
 8002acc:	2200      	movs	r2, #0
 8002ace:	21fc      	movs	r1, #252	; 0xfc
 8002ad0:	485d      	ldr	r0, [pc, #372]	; (8002c48 <MX_GPIO_Init+0x2dc>)
 8002ad2:	f004 fd7f 	bl	80075d4 <HAL_GPIO_WritePin>
                          |CAN1_SEL0_Pin|CAN2_SEL0K7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PI3_GPIO_Port, LED_PI3_Pin, GPIO_PIN_RESET);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2108      	movs	r1, #8
 8002ada:	485c      	ldr	r0, [pc, #368]	; (8002c4c <MX_GPIO_Init+0x2e0>)
 8002adc:	f004 fd7a 	bl	80075d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PUD_S0_Pin|PUD_S1_Pin|PUD_S2_Pin|PUD_E_Pin, GPIO_PIN_RESET);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	21b8      	movs	r1, #184	; 0xb8
 8002ae4:	485a      	ldr	r0, [pc, #360]	; (8002c50 <MX_GPIO_Init+0x2e4>)
 8002ae6:	f004 fd75 	bl	80075d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, IN_E_Pin|IN_S0_Pin|IN_S1_Pin|IN_S2_Pin
 8002aea:	2200      	movs	r2, #0
 8002aec:	f44f 41ec 	mov.w	r1, #30208	; 0x7600
 8002af0:	4858      	ldr	r0, [pc, #352]	; (8002c54 <MX_GPIO_Init+0x2e8>)
 8002af2:	f004 fd6f 	bl	80075d4 <HAL_GPIO_WritePin>
                          |IN_S3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin;
 8002af6:	230c      	movs	r3, #12
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002afa:	2300      	movs	r3, #0
 8002afc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b06:	4619      	mov	r1, r3
 8002b08:	4853      	ldr	r0, [pc, #332]	; (8002c58 <MX_GPIO_Init+0x2ec>)
 8002b0a:	f004 fb9f 	bl	800724c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_EN_Pin */
  GPIO_InitStruct.Pin = TOUCH_EN_Pin;
 8002b0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002b18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TOUCH_EN_GPIO_Port, &GPIO_InitStruct);
 8002b1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b22:	4619      	mov	r1, r3
 8002b24:	4849      	ldr	r0, [pc, #292]	; (8002c4c <MX_GPIO_Init+0x2e0>)
 8002b26:	f004 fb91 	bl	800724c <HAL_GPIO_Init>

  /*Configure GPIO pin : HALL_OUT_1_PI12_Pin */
  GPIO_InitStruct.Pin = HALL_OUT_1_PI12_Pin;
 8002b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b30:	2300      	movs	r3, #0
 8002b32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HALL_OUT_1_PI12_GPIO_Port, &GPIO_InitStruct);
 8002b38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4843      	ldr	r0, [pc, #268]	; (8002c4c <MX_GPIO_Init+0x2e0>)
 8002b40:	f004 fb84 	bl	800724c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_S0_Pin OUT_E_Pin */
  GPIO_InitStruct.Pin = OUT_S0_Pin|OUT_E_Pin;
 8002b44:	230c      	movs	r3, #12
 8002b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b50:	2300      	movs	r3, #0
 8002b52:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4839      	ldr	r0, [pc, #228]	; (8002c40 <MX_GPIO_Init+0x2d4>)
 8002b5c:	f004 fb76 	bl	800724c <HAL_GPIO_Init>

  /*Configure GPIO pins : MULTISENSE_EN5_Pin LED_PJ12_Pin LED_PJ13_Pin LED_PJ14_Pin
                           LED_PJ15_Pin */
  GPIO_InitStruct.Pin = MULTISENSE_EN5_Pin|LED_PJ12_Pin|LED_PJ13_Pin|LED_PJ14_Pin
 8002b60:	f24f 0308 	movw	r3, #61448	; 0xf008
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED_PJ15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b66:	2301      	movs	r3, #1
 8002b68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002b72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b76:	4619      	mov	r1, r3
 8002b78:	4832      	ldr	r0, [pc, #200]	; (8002c44 <MX_GPIO_Init+0x2d8>)
 8002b7a:	f004 fb67 	bl	800724c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_3_Pin BTN_4_Pin */
  GPIO_InitStruct.Pin = BTN_3_Pin|BTN_4_Pin;
 8002b7e:	23c0      	movs	r3, #192	; 0xc0
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b82:	2300      	movs	r3, #0
 8002b84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002b8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b8e:	4619      	mov	r1, r3
 8002b90:	482c      	ldr	r0, [pc, #176]	; (8002c44 <MX_GPIO_Init+0x2d8>)
 8002b92:	f004 fb5b 	bl	800724c <HAL_GPIO_Init>

  /*Configure GPIO pins : MULTISENSE_RST_Pin MULTISENSE_SEL0_Pin MULTISENSE_SEL1_Pin CAN2_SEL0_Pin
                           CAN1_SEL0_Pin CAN2_SEL0K7_Pin */
  GPIO_InitStruct.Pin = MULTISENSE_RST_Pin|MULTISENSE_SEL0_Pin|MULTISENSE_SEL1_Pin|CAN2_SEL0_Pin
 8002b96:	23fc      	movs	r3, #252	; 0xfc
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |CAN1_SEL0_Pin|CAN2_SEL0K7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002ba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002baa:	4619      	mov	r1, r3
 8002bac:	4826      	ldr	r0, [pc, #152]	; (8002c48 <MX_GPIO_Init+0x2dc>)
 8002bae:	f004 fb4d 	bl	800724c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_ENT_Pin */
  GPIO_InitStruct.Pin = SDIO_ENT_Pin;
 8002bb2:	2308      	movs	r3, #8
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDIO_ENT_GPIO_Port, &GPIO_InitStruct);
 8002bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4823      	ldr	r0, [pc, #140]	; (8002c54 <MX_GPIO_Init+0x2e8>)
 8002bc6:	f004 fb41 	bl	800724c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PI3_Pin */
  GPIO_InitStruct.Pin = LED_PI3_Pin;
 8002bca:	2308      	movs	r3, #8
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED_PI3_GPIO_Port, &GPIO_InitStruct);
 8002bda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bde:	4619      	mov	r1, r3
 8002be0:	481a      	ldr	r0, [pc, #104]	; (8002c4c <MX_GPIO_Init+0x2e0>)
 8002be2:	f004 fb33 	bl	800724c <HAL_GPIO_Init>

  /*Configure GPIO pins : PUD_S0_Pin PUD_S1_Pin PUD_S2_Pin PUD_E_Pin */
  GPIO_InitStruct.Pin = PUD_S0_Pin|PUD_S1_Pin|PUD_S2_Pin|PUD_E_Pin;
 8002be6:	23b8      	movs	r3, #184	; 0xb8
 8002be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bea:	2301      	movs	r3, #1
 8002bec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4814      	ldr	r0, [pc, #80]	; (8002c50 <MX_GPIO_Init+0x2e4>)
 8002bfe:	f004 fb25 	bl	800724c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_E_Pin IN_S0_Pin IN_S1_Pin IN_S2_Pin
                           IN_S3_Pin */
  GPIO_InitStruct.Pin = IN_E_Pin|IN_S0_Pin|IN_S1_Pin|IN_S2_Pin
 8002c02:	f44f 43ec 	mov.w	r3, #30208	; 0x7600
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |IN_S3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c10:	2300      	movs	r3, #0
 8002c12:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c18:	4619      	mov	r1, r3
 8002c1a:	480e      	ldr	r0, [pc, #56]	; (8002c54 <MX_GPIO_Init+0x2e8>)
 8002c1c:	f004 fb16 	bl	800724c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002c20:	2338      	movs	r3, #56	; 0x38
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c24:	2302      	movs	r3, #2
 8002c26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c30:	2305      	movs	r3, #5
 8002c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c38:	4619      	mov	r1, r3
 8002c3a:	e00f      	b.n	8002c5c <MX_GPIO_Init+0x2f0>
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	40021c00 	.word	0x40021c00
 8002c44:	40022400 	.word	0x40022400
 8002c48:	40022800 	.word	0x40022800
 8002c4c:	40022000 	.word	0x40022000
 8002c50:	40020c00 	.word	0x40020c00
 8002c54:	40021800 	.word	0x40021800
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	4807      	ldr	r0, [pc, #28]	; (8002c7c <MX_GPIO_Init+0x310>)
 8002c5e:	f004 faf5 	bl	800724c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8002c62:	2200      	movs	r2, #0
 8002c64:	2105      	movs	r1, #5
 8002c66:	2028      	movs	r0, #40	; 0x28
 8002c68:	f003 fd42 	bl	80066f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c6c:	2028      	movs	r0, #40	; 0x28
 8002c6e:	f003 fd5b 	bl	8006728 <HAL_NVIC_EnableIRQ>

}
 8002c72:	bf00      	nop
 8002c74:	3740      	adds	r7, #64	; 0x40
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40020400 	.word	0x40020400

08002c80 <HAL_GPIO_EXTI_Callback>:
	return (int) ((x - in_min) * (out_max - out_min) / (in_max - in_min)
			+ out_min);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == INT_PIN)
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c90:	d101      	bne.n	8002c96 <HAL_GPIO_EXTI_Callback+0x16>
  {
	  TOUCH_Set();
 8002c92:	f7fe f97d 	bl	8000f90 <TOUCH_Set>
  }
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <Start_START_Task>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_START_Task */
void Start_START_Task(void *argument)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	//htim13.Instance->CCR1 = (htim13.Instance->ARR) * 0.99;
	Current_Status.LED_BRIGHTNESS = LED_DEFAULT_BRIGHTNESS;
 8002ca8:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <Start_START_Task+0x48>)
 8002caa:	2202      	movs	r2, #2
 8002cac:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	Current_Status.LCD_BRIGHTNESS = LCD_DEFAULT_BRIGHTNESS;
 8002cb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <Start_START_Task+0x48>)
 8002cb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cb6:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	Current_Status.LCD_BRIGHTNESS_CHANGED = 1;
 8002cba:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <Start_START_Task+0x48>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	/* Infinite loop */
	for (;;) {
		if (Current_Status.LCD_BRIGHTNESS_CHANGED == 1) {
 8002cc2:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <Start_START_Task+0x48>)
 8002cc4:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d109      	bne.n	8002ce0 <Start_START_Task+0x40>
			htim13.Instance->CCR1 = Current_Status.LCD_BRIGHTNESS;
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <Start_START_Task+0x48>)
 8002cce:	f8b3 209c 	ldrh.w	r2, [r3, #156]	; 0x9c
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <Start_START_Task+0x4c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	635a      	str	r2, [r3, #52]	; 0x34
			Current_Status.LCD_BRIGHTNESS_CHANGED = 0;
 8002cd8:	4b03      	ldr	r3, [pc, #12]	; (8002ce8 <Start_START_Task+0x48>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
		}
//		Current_Status.ECT = 50;
//		Current_Status.IAT = 50;
//        Current_Status.RPM = Current_Status.RPM <= 8000 ? Current_Status.RPM + 25 : 0;
		osDelay(10);
 8002ce0:	200a      	movs	r0, #10
 8002ce2:	f00b fd92 	bl	800e80a <osDelay>
		if (Current_Status.LCD_BRIGHTNESS_CHANGED == 1) {
 8002ce6:	e7ec      	b.n	8002cc2 <Start_START_Task+0x22>
 8002ce8:	200099c0 	.word	0x200099c0
 8002cec:	20009dfc 	.word	0x20009dfc

08002cf0 <Start_CAN_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_CAN_Task */
void Start_CAN_Task(void *argument)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_CAN_Task */
	/* Infinite loop */
	Current_Status.CAN_PROTOCOL = CAN_BMW_PHEV;
 8002cf8:	4bc1      	ldr	r3, [pc, #772]	; (8003000 <Start_CAN_Task+0x310>)
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	f883 209f 	strb.w	r2, [r3, #159]	; 0x9f
	Current_Status.PRES_UNIT = kPa;
 8002d00:	4bbf      	ldr	r3, [pc, #764]	; (8003000 <Start_CAN_Task+0x310>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]
	Current_Status.TEMP_UNIT = C;
 8002d06:	4bbe      	ldr	r3, [pc, #760]	; (8003000 <Start_CAN_Task+0x310>)
 8002d08:	2203      	movs	r2, #3
 8002d0a:	705a      	strb	r2, [r3, #1]
	Current_Status.SPEED_UNIT = Kmh;
 8002d0c:	4bbc      	ldr	r3, [pc, #752]	; (8003000 <Start_CAN_Task+0x310>)
 8002d0e:	2205      	movs	r2, #5
 8002d10:	709a      	strb	r2, [r3, #2]
	HAL_GPIO_WritePin(CAN1_SEL0_GPIO_Port, CAN1_SEL0_Pin, SET);
 8002d12:	2201      	movs	r2, #1
 8002d14:	2140      	movs	r1, #64	; 0x40
 8002d16:	48bb      	ldr	r0, [pc, #748]	; (8003004 <Start_CAN_Task+0x314>)
 8002d18:	f004 fc5c 	bl	80075d4 <HAL_GPIO_WritePin>

	uint8_t countBlankMessages = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	75fb      	strb	r3, [r7, #23]

	for (;;) {
		if (CAN_ENABLED) {

			if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData)
 8002d20:	4bb9      	ldr	r3, [pc, #740]	; (8003008 <Start_CAN_Task+0x318>)
 8002d22:	4aba      	ldr	r2, [pc, #744]	; (800300c <Start_CAN_Task+0x31c>)
 8002d24:	2100      	movs	r1, #0
 8002d26:	48ba      	ldr	r0, [pc, #744]	; (8003010 <Start_CAN_Task+0x320>)
 8002d28:	f003 f8df 	bl	8005eea <HAL_CAN_GetRxMessage>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f6      	bne.n	8002d20 <Start_CAN_Task+0x30>
					== HAL_OK) {
				switch (Current_Status.CAN_PROTOCOL) {
 8002d32:	4bb3      	ldr	r3, [pc, #716]	; (8003000 <Start_CAN_Task+0x310>)
 8002d34:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	f000 84af 	beq.w	800369c <Start_CAN_Task+0x9ac>
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	f300 87d7 	bgt.w	8003cf2 <Start_CAN_Task+0x1002>
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d004      	beq.n	8002d52 <Start_CAN_Task+0x62>
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	f000 8387 	beq.w	800345c <Start_CAN_Task+0x76c>
								}
							}
					  }
					break;
				default:
					break;
 8002d4e:	f000 bfd0 	b.w	8003cf2 <Start_CAN_Task+0x1002>
					switch (RxHeader.StdId) {
 8002d52:	4bae      	ldr	r3, [pc, #696]	; (800300c <Start_CAN_Task+0x31c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d5a:	f000 815d 	beq.w	8003018 <Start_CAN_Task+0x328>
 8002d5e:	f5b3 6ffd 	cmp.w	r3, #2024	; 0x7e8
 8002d62:	f040 87c8 	bne.w	8003cf6 <Start_CAN_Task+0x1006>
						switch (RxData[2]) {
 8002d66:	4ba8      	ldr	r3, [pc, #672]	; (8003008 <Start_CAN_Task+0x318>)
 8002d68:	789b      	ldrb	r3, [r3, #2]
 8002d6a:	3b05      	subs	r3, #5
 8002d6c:	2b5b      	cmp	r3, #91	; 0x5b
 8002d6e:	f200 8140 	bhi.w	8002ff2 <Start_CAN_Task+0x302>
 8002d72:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <Start_CAN_Task+0x88>)
 8002d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d78:	08002ee9 	.word	0x08002ee9
 8002d7c:	08002ff3 	.word	0x08002ff3
 8002d80:	08002ff3 	.word	0x08002ff3
 8002d84:	08002ff3 	.word	0x08002ff3
 8002d88:	08002ff3 	.word	0x08002ff3
 8002d8c:	08002ff3 	.word	0x08002ff3
 8002d90:	08002efd 	.word	0x08002efd
 8002d94:	08002f0b 	.word	0x08002f0b
 8002d98:	08002f25 	.word	0x08002f25
 8002d9c:	08002f31 	.word	0x08002f31
 8002da0:	08002f45 	.word	0x08002f45
 8002da4:	08002ff3 	.word	0x08002ff3
 8002da8:	08002f59 	.word	0x08002f59
 8002dac:	08002ff3 	.word	0x08002ff3
 8002db0:	08002ff3 	.word	0x08002ff3
 8002db4:	08002ff3 	.word	0x08002ff3
 8002db8:	08002ff3 	.word	0x08002ff3
 8002dbc:	08002ff3 	.word	0x08002ff3
 8002dc0:	08002ff3 	.word	0x08002ff3
 8002dc4:	08002ff3 	.word	0x08002ff3
 8002dc8:	08002ff3 	.word	0x08002ff3
 8002dcc:	08002ff3 	.word	0x08002ff3
 8002dd0:	08002ff3 	.word	0x08002ff3
 8002dd4:	08002ff3 	.word	0x08002ff3
 8002dd8:	08002ff3 	.word	0x08002ff3
 8002ddc:	08002ff3 	.word	0x08002ff3
 8002de0:	08002ff3 	.word	0x08002ff3
 8002de4:	08002ff3 	.word	0x08002ff3
 8002de8:	08002ff3 	.word	0x08002ff3
 8002dec:	08002f63 	.word	0x08002f63
 8002df0:	08002ff3 	.word	0x08002ff3
 8002df4:	08002f9d 	.word	0x08002f9d
 8002df8:	08002fa5 	.word	0x08002fa5
 8002dfc:	08002ff3 	.word	0x08002ff3
 8002e00:	08002ff3 	.word	0x08002ff3
 8002e04:	08002ff3 	.word	0x08002ff3
 8002e08:	08002ff3 	.word	0x08002ff3
 8002e0c:	08002ff3 	.word	0x08002ff3
 8002e10:	08002ff3 	.word	0x08002ff3
 8002e14:	08002ff3 	.word	0x08002ff3
 8002e18:	08002ff3 	.word	0x08002ff3
 8002e1c:	08002ff3 	.word	0x08002ff3
 8002e20:	08002ff3 	.word	0x08002ff3
 8002e24:	08002ff3 	.word	0x08002ff3
 8002e28:	08002ff3 	.word	0x08002ff3
 8002e2c:	08002ff3 	.word	0x08002ff3
 8002e30:	08002fad 	.word	0x08002fad
 8002e34:	08002ff3 	.word	0x08002ff3
 8002e38:	08002ff3 	.word	0x08002ff3
 8002e3c:	08002ff3 	.word	0x08002ff3
 8002e40:	08002ff3 	.word	0x08002ff3
 8002e44:	08002ff3 	.word	0x08002ff3
 8002e48:	08002ff3 	.word	0x08002ff3
 8002e4c:	08002ff3 	.word	0x08002ff3
 8002e50:	08002ff3 	.word	0x08002ff3
 8002e54:	08002ff3 	.word	0x08002ff3
 8002e58:	08002ff3 	.word	0x08002ff3
 8002e5c:	08002ff3 	.word	0x08002ff3
 8002e60:	08002ff3 	.word	0x08002ff3
 8002e64:	08002ff3 	.word	0x08002ff3
 8002e68:	08002ff3 	.word	0x08002ff3
 8002e6c:	08002fbb 	.word	0x08002fbb
 8002e70:	08002ff3 	.word	0x08002ff3
 8002e74:	08002ff3 	.word	0x08002ff3
 8002e78:	08002ff3 	.word	0x08002ff3
 8002e7c:	08002ff3 	.word	0x08002ff3
 8002e80:	08002ff3 	.word	0x08002ff3
 8002e84:	08002ff3 	.word	0x08002ff3
 8002e88:	08002ff3 	.word	0x08002ff3
 8002e8c:	08002ff3 	.word	0x08002ff3
 8002e90:	08002ff3 	.word	0x08002ff3
 8002e94:	08002ff3 	.word	0x08002ff3
 8002e98:	08002ff3 	.word	0x08002ff3
 8002e9c:	08002ff3 	.word	0x08002ff3
 8002ea0:	08002ff3 	.word	0x08002ff3
 8002ea4:	08002ff3 	.word	0x08002ff3
 8002ea8:	08002ff3 	.word	0x08002ff3
 8002eac:	08002fd5 	.word	0x08002fd5
 8002eb0:	08002ff3 	.word	0x08002ff3
 8002eb4:	08002ff3 	.word	0x08002ff3
 8002eb8:	08002ff3 	.word	0x08002ff3
 8002ebc:	08002ff3 	.word	0x08002ff3
 8002ec0:	08002ff3 	.word	0x08002ff3
 8002ec4:	08002ff3 	.word	0x08002ff3
 8002ec8:	08002ff3 	.word	0x08002ff3
 8002ecc:	08002ff3 	.word	0x08002ff3
 8002ed0:	08002ff3 	.word	0x08002ff3
 8002ed4:	08002fdf 	.word	0x08002fdf
 8002ed8:	08002ff3 	.word	0x08002ff3
 8002edc:	08002ff3 	.word	0x08002ff3
 8002ee0:	08002ff3 	.word	0x08002ff3
 8002ee4:	08002ff3 	.word	0x08002ff3
							Current_Status.ECT = RxData[3] - 40;
 8002ee8:	4b47      	ldr	r3, [pc, #284]	; (8003008 <Start_CAN_Task+0x318>)
 8002eea:	78db      	ldrb	r3, [r3, #3]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b28      	subs	r3, #40	; 0x28
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	b21a      	sxth	r2, r3
 8002ef4:	4b42      	ldr	r3, [pc, #264]	; (8003000 <Start_CAN_Task+0x310>)
 8002ef6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
							break;
 8002efa:	e07b      	b.n	8002ff4 <Start_CAN_Task+0x304>
							Current_Status.MAP = RxData[3];
 8002efc:	4b42      	ldr	r3, [pc, #264]	; (8003008 <Start_CAN_Task+0x318>)
 8002efe:	78db      	ldrb	r3, [r3, #3]
 8002f00:	b21a      	sxth	r2, r3
 8002f02:	4b3f      	ldr	r3, [pc, #252]	; (8003000 <Start_CAN_Task+0x310>)
 8002f04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
							break;
 8002f08:	e074      	b.n	8002ff4 <Start_CAN_Task+0x304>
							Current_Status.RPM = (uint16_t) ((RxData[4] << 8)
 8002f0a:	4b3f      	ldr	r3, [pc, #252]	; (8003008 <Start_CAN_Task+0x318>)
 8002f0c:	791b      	ldrb	r3, [r3, #4]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	021b      	lsls	r3, r3, #8
 8002f12:	b29a      	uxth	r2, r3
									+ (RxData[3] & 0x00ff));
 8002f14:	4b3c      	ldr	r3, [pc, #240]	; (8003008 <Start_CAN_Task+0x318>)
 8002f16:	78db      	ldrb	r3, [r3, #3]
 8002f18:	b29b      	uxth	r3, r3
							Current_Status.RPM = (uint16_t) ((RxData[4] << 8)
 8002f1a:	4413      	add	r3, r2
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	4b38      	ldr	r3, [pc, #224]	; (8003000 <Start_CAN_Task+0x310>)
 8002f20:	809a      	strh	r2, [r3, #4]
							break;
 8002f22:	e067      	b.n	8002ff4 <Start_CAN_Task+0x304>
							Current_Status.LF_SPEED = RxData[3];
 8002f24:	4b38      	ldr	r3, [pc, #224]	; (8003008 <Start_CAN_Task+0x318>)
 8002f26:	78db      	ldrb	r3, [r3, #3]
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	4b35      	ldr	r3, [pc, #212]	; (8003000 <Start_CAN_Task+0x310>)
 8002f2c:	861a      	strh	r2, [r3, #48]	; 0x30
							break;
 8002f2e:	e061      	b.n	8002ff4 <Start_CAN_Task+0x304>
							Current_Status.IGN_TIM = RxData[3] / 2 - 64;
 8002f30:	4b35      	ldr	r3, [pc, #212]	; (8003008 <Start_CAN_Task+0x318>)
 8002f32:	78db      	ldrb	r3, [r3, #3]
 8002f34:	085b      	lsrs	r3, r3, #1
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b40      	subs	r3, #64	; 0x40
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	4b30      	ldr	r3, [pc, #192]	; (8003000 <Start_CAN_Task+0x310>)
 8002f40:	83da      	strh	r2, [r3, #30]
							break;
 8002f42:	e057      	b.n	8002ff4 <Start_CAN_Task+0x304>
							Current_Status.IAT = RxData[3] - 40;
 8002f44:	4b30      	ldr	r3, [pc, #192]	; (8003008 <Start_CAN_Task+0x318>)
 8002f46:	78db      	ldrb	r3, [r3, #3]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b28      	subs	r3, #40	; 0x28
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	b21a      	sxth	r2, r3
 8002f50:	4b2b      	ldr	r3, [pc, #172]	; (8003000 <Start_CAN_Task+0x310>)
 8002f52:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
							break;
 8002f56:	e04d      	b.n	8002ff4 <Start_CAN_Task+0x304>
							Current_Status.TPS = 100 / 256 * RxData[3];
 8002f58:	4b29      	ldr	r3, [pc, #164]	; (8003000 <Start_CAN_Task+0x310>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
							break;
 8002f60:	e048      	b.n	8002ff4 <Start_CAN_Task+0x304>
									* (256 * (uint16_t) (RxData[4] << 8)
 8002f62:	4b29      	ldr	r3, [pc, #164]	; (8003008 <Start_CAN_Task+0x318>)
 8002f64:	791b      	ldrb	r3, [r3, #4]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	021b      	lsls	r3, r3, #8
											+ (RxData[3] & 0x00ff));
 8002f6e:	4a26      	ldr	r2, [pc, #152]	; (8003008 <Start_CAN_Task+0x318>)
 8002f70:	78d2      	ldrb	r2, [r2, #3]
 8002f72:	4413      	add	r3, r2
									* (256 * (uint16_t) (RxData[4] << 8)
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fd fadd 	bl	8000534 <__aeabi_i2d>
 8002f7a:	a31f      	add	r3, pc, #124	; (adr r3, 8002ff8 <Start_CAN_Task+0x308>)
 8002f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f80:	f7fd fb42 	bl	8000608 <__aeabi_dmul>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
							Current_Status.FUELP = 0.079
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f7fd fd4e 	bl	8000a2c <__aeabi_d2uiz>
 8002f90:	4603      	mov	r3, r0
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	4b1a      	ldr	r3, [pc, #104]	; (8003000 <Start_CAN_Task+0x310>)
 8002f96:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
							break;
 8002f9a:	e02b      	b.n	8002ff4 <Start_CAN_Task+0x304>
							Current_Status.LAMBDA1 = (2 / 65536)
 8002f9c:	4b18      	ldr	r3, [pc, #96]	; (8003000 <Start_CAN_Task+0x310>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	851a      	strh	r2, [r3, #40]	; 0x28
							break;
 8002fa2:	e027      	b.n	8002ff4 <Start_CAN_Task+0x304>
							Current_Status.LAMBDA2 = (2 / 65536)
 8002fa4:	4b16      	ldr	r3, [pc, #88]	; (8003000 <Start_CAN_Task+0x310>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
							break;
 8002faa:	e023      	b.n	8002ff4 <Start_CAN_Task+0x304>
							Current_Status.BARO = RxData[3];
 8002fac:	4b16      	ldr	r3, [pc, #88]	; (8003008 <Start_CAN_Task+0x318>)
 8002fae:	78db      	ldrb	r3, [r3, #3]
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	4b13      	ldr	r3, [pc, #76]	; (8003000 <Start_CAN_Task+0x310>)
 8002fb4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
							break;
 8002fb8:	e01c      	b.n	8002ff4 <Start_CAN_Task+0x304>
									+ (RxData[3] & 0x00ff) / 1000;
 8002fba:	4b13      	ldr	r3, [pc, #76]	; (8003008 <Start_CAN_Task+0x318>)
 8002fbc:	78db      	ldrb	r3, [r3, #3]
 8002fbe:	4a15      	ldr	r2, [pc, #84]	; (8003014 <Start_CAN_Task+0x324>)
 8002fc0:	fb82 1203 	smull	r1, r2, r2, r3
 8002fc4:	1192      	asrs	r2, r2, #6
 8002fc6:	17db      	asrs	r3, r3, #31
 8002fc8:	1ad3      	subs	r3, r2, r3
							Current_Status.BATT = 256
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <Start_CAN_Task+0x310>)
 8002fce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
							break;
 8002fd2:	e00f      	b.n	8002ff4 <Start_CAN_Task+0x304>
							Current_Status.ETHANOL = 100 / 255 * RxData[3];
 8002fd4:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <Start_CAN_Task+0x310>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
							break;
 8002fdc:	e00a      	b.n	8002ff4 <Start_CAN_Task+0x304>
							Current_Status.OILT = RxData[3] - 40;
 8002fde:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <Start_CAN_Task+0x318>)
 8002fe0:	78db      	ldrb	r3, [r3, #3]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b28      	subs	r3, #40	; 0x28
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	b21a      	sxth	r2, r3
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <Start_CAN_Task+0x310>)
 8002fec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
							break;
 8002ff0:	e000      	b.n	8002ff4 <Start_CAN_Task+0x304>
							break;
 8002ff2:	bf00      	nop
						break;
 8002ff4:	e22b      	b.n	800344e <Start_CAN_Task+0x75e>
 8002ff6:	bf00      	nop
 8002ff8:	10624dd3 	.word	0x10624dd3
 8002ffc:	3fb43958 	.word	0x3fb43958
 8003000:	200099c0 	.word	0x200099c0
 8003004:	40022800 	.word	0x40022800
 8003008:	2000a760 	.word	0x2000a760
 800300c:	2000a7dc 	.word	0x2000a7dc
 8003010:	2000a768 	.word	0x2000a768
 8003014:	10624dd3 	.word	0x10624dd3
						switch (RxData[0]) {
 8003018:	4b84      	ldr	r3, [pc, #528]	; (800322c <Start_CAN_Task+0x53c>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b0c      	cmp	r3, #12
 800301e:	f200 8215 	bhi.w	800344c <Start_CAN_Task+0x75c>
 8003022:	a201      	add	r2, pc, #4	; (adr r2, 8003028 <Start_CAN_Task+0x338>)
 8003024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003028:	0800305d 	.word	0x0800305d
 800302c:	080030ab 	.word	0x080030ab
 8003030:	080030f9 	.word	0x080030f9
 8003034:	08003147 	.word	0x08003147
 8003038:	08003197 	.word	0x08003197
 800303c:	080031e3 	.word	0x080031e3
 8003040:	08003235 	.word	0x08003235
 8003044:	0800327f 	.word	0x0800327f
 8003048:	080032cb 	.word	0x080032cb
 800304c:	0800331b 	.word	0x0800331b
 8003050:	08003365 	.word	0x08003365
 8003054:	080033af 	.word	0x080033af
 8003058:	080033fd 	.word	0x080033fd
							Current_Status.RPM = (uint16_t) ((RxData[3] << 8)
 800305c:	4b73      	ldr	r3, [pc, #460]	; (800322c <Start_CAN_Task+0x53c>)
 800305e:	78db      	ldrb	r3, [r3, #3]
 8003060:	b29b      	uxth	r3, r3
 8003062:	021b      	lsls	r3, r3, #8
 8003064:	b29a      	uxth	r2, r3
									+ (RxData[2] & 0x00ff));
 8003066:	4b71      	ldr	r3, [pc, #452]	; (800322c <Start_CAN_Task+0x53c>)
 8003068:	789b      	ldrb	r3, [r3, #2]
 800306a:	b29b      	uxth	r3, r3
							Current_Status.RPM = (uint16_t) ((RxData[3] << 8)
 800306c:	4413      	add	r3, r2
 800306e:	b29a      	uxth	r2, r3
 8003070:	4b6f      	ldr	r3, [pc, #444]	; (8003230 <Start_CAN_Task+0x540>)
 8003072:	809a      	strh	r2, [r3, #4]
							Current_Status.MAP = (uint16_t) ((RxData[5] << 8)
 8003074:	4b6d      	ldr	r3, [pc, #436]	; (800322c <Start_CAN_Task+0x53c>)
 8003076:	795b      	ldrb	r3, [r3, #5]
 8003078:	b29b      	uxth	r3, r3
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	b29a      	uxth	r2, r3
									+ (RxData[4] & 0x00ff));
 800307e:	4b6b      	ldr	r3, [pc, #428]	; (800322c <Start_CAN_Task+0x53c>)
 8003080:	791b      	ldrb	r3, [r3, #4]
 8003082:	b29b      	uxth	r3, r3
							Current_Status.MAP = (uint16_t) ((RxData[5] << 8)
 8003084:	4413      	add	r3, r2
 8003086:	b29b      	uxth	r3, r3
 8003088:	b21a      	sxth	r2, r3
 800308a:	4b69      	ldr	r3, [pc, #420]	; (8003230 <Start_CAN_Task+0x540>)
 800308c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
							Current_Status.MGP = (uint16_t) ((RxData[7] << 8)
 8003090:	4b66      	ldr	r3, [pc, #408]	; (800322c <Start_CAN_Task+0x53c>)
 8003092:	79db      	ldrb	r3, [r3, #7]
 8003094:	b29b      	uxth	r3, r3
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	b29a      	uxth	r2, r3
									+ (RxData[6] & 0x00ff));
 800309a:	4b64      	ldr	r3, [pc, #400]	; (800322c <Start_CAN_Task+0x53c>)
 800309c:	799b      	ldrb	r3, [r3, #6]
 800309e:	b29b      	uxth	r3, r3
							Current_Status.MGP = (uint16_t) ((RxData[7] << 8)
 80030a0:	4413      	add	r3, r2
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	4b62      	ldr	r3, [pc, #392]	; (8003230 <Start_CAN_Task+0x540>)
 80030a6:	825a      	strh	r2, [r3, #18]
							break;
 80030a8:	e1d0      	b.n	800344c <Start_CAN_Task+0x75c>
							Current_Status.BARO = (uint16_t) ((RxData[3] << 8)
 80030aa:	4b60      	ldr	r3, [pc, #384]	; (800322c <Start_CAN_Task+0x53c>)
 80030ac:	78db      	ldrb	r3, [r3, #3]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	b29a      	uxth	r2, r3
									+ (RxData[2] & 0x00ff));
 80030b4:	4b5d      	ldr	r3, [pc, #372]	; (800322c <Start_CAN_Task+0x53c>)
 80030b6:	789b      	ldrb	r3, [r3, #2]
 80030b8:	b29b      	uxth	r3, r3
							Current_Status.BARO = (uint16_t) ((RxData[3] << 8)
 80030ba:	4413      	add	r3, r2
 80030bc:	b29a      	uxth	r2, r3
 80030be:	4b5c      	ldr	r3, [pc, #368]	; (8003230 <Start_CAN_Task+0x540>)
 80030c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
							Current_Status.TPS = (uint16_t) ((RxData[5] << 8)
 80030c4:	4b59      	ldr	r3, [pc, #356]	; (800322c <Start_CAN_Task+0x53c>)
 80030c6:	795b      	ldrb	r3, [r3, #5]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	021b      	lsls	r3, r3, #8
 80030cc:	b29a      	uxth	r2, r3
									+ (RxData[4] & 0x00ff));
 80030ce:	4b57      	ldr	r3, [pc, #348]	; (800322c <Start_CAN_Task+0x53c>)
 80030d0:	791b      	ldrb	r3, [r3, #4]
 80030d2:	b29b      	uxth	r3, r3
							Current_Status.TPS = (uint16_t) ((RxData[5] << 8)
 80030d4:	4413      	add	r3, r2
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	4b55      	ldr	r3, [pc, #340]	; (8003230 <Start_CAN_Task+0x540>)
 80030da:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
							Current_Status.INJ_DC = (uint16_t) ((RxData[7] << 8)
 80030de:	4b53      	ldr	r3, [pc, #332]	; (800322c <Start_CAN_Task+0x53c>)
 80030e0:	79db      	ldrb	r3, [r3, #7]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	021b      	lsls	r3, r3, #8
 80030e6:	b29a      	uxth	r2, r3
									+ (RxData[6] & 0x00ff));
 80030e8:	4b50      	ldr	r3, [pc, #320]	; (800322c <Start_CAN_Task+0x53c>)
 80030ea:	799b      	ldrb	r3, [r3, #6]
 80030ec:	b29b      	uxth	r3, r3
							Current_Status.INJ_DC = (uint16_t) ((RxData[7] << 8)
 80030ee:	4413      	add	r3, r2
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	4b4f      	ldr	r3, [pc, #316]	; (8003230 <Start_CAN_Task+0x540>)
 80030f4:	829a      	strh	r2, [r3, #20]
							break;
 80030f6:	e1a9      	b.n	800344c <Start_CAN_Task+0x75c>
							Current_Status.INJ_DC_ST = (uint16_t) ((RxData[3]
 80030f8:	4b4c      	ldr	r3, [pc, #304]	; (800322c <Start_CAN_Task+0x53c>)
 80030fa:	78db      	ldrb	r3, [r3, #3]
 80030fc:	b29b      	uxth	r3, r3
									<< 8) + (RxData[2] & 0x00ff));
 80030fe:	021b      	lsls	r3, r3, #8
 8003100:	b29a      	uxth	r2, r3
 8003102:	4b4a      	ldr	r3, [pc, #296]	; (800322c <Start_CAN_Task+0x53c>)
 8003104:	789b      	ldrb	r3, [r3, #2]
 8003106:	b29b      	uxth	r3, r3
							Current_Status.INJ_DC_ST = (uint16_t) ((RxData[3]
 8003108:	4413      	add	r3, r2
 800310a:	b29a      	uxth	r2, r3
 800310c:	4b48      	ldr	r3, [pc, #288]	; (8003230 <Start_CAN_Task+0x540>)
 800310e:	82da      	strh	r2, [r3, #22]
							Current_Status.INJ_PULSE = (uint16_t) ((RxData[5]
 8003110:	4b46      	ldr	r3, [pc, #280]	; (800322c <Start_CAN_Task+0x53c>)
 8003112:	795b      	ldrb	r3, [r3, #5]
 8003114:	b29b      	uxth	r3, r3
									<< 8) + (RxData[4] & 0x00ff));
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	b29a      	uxth	r2, r3
 800311a:	4b44      	ldr	r3, [pc, #272]	; (800322c <Start_CAN_Task+0x53c>)
 800311c:	791b      	ldrb	r3, [r3, #4]
 800311e:	b29b      	uxth	r3, r3
							Current_Status.INJ_PULSE = (uint16_t) ((RxData[5]
 8003120:	4413      	add	r3, r2
 8003122:	b29a      	uxth	r2, r3
 8003124:	4b42      	ldr	r3, [pc, #264]	; (8003230 <Start_CAN_Task+0x540>)
 8003126:	831a      	strh	r2, [r3, #24]
							Current_Status.ECT = (uint16_t) ((RxData[7] << 8)
 8003128:	4b40      	ldr	r3, [pc, #256]	; (800322c <Start_CAN_Task+0x53c>)
 800312a:	79db      	ldrb	r3, [r3, #7]
 800312c:	b29b      	uxth	r3, r3
 800312e:	021b      	lsls	r3, r3, #8
 8003130:	b29a      	uxth	r2, r3
									+ (RxData[6] & 0x00ff));
 8003132:	4b3e      	ldr	r3, [pc, #248]	; (800322c <Start_CAN_Task+0x53c>)
 8003134:	799b      	ldrb	r3, [r3, #6]
 8003136:	b29b      	uxth	r3, r3
							Current_Status.ECT = (uint16_t) ((RxData[7] << 8)
 8003138:	4413      	add	r3, r2
 800313a:	b29b      	uxth	r3, r3
 800313c:	b21a      	sxth	r2, r3
 800313e:	4b3c      	ldr	r3, [pc, #240]	; (8003230 <Start_CAN_Task+0x540>)
 8003140:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
							break;
 8003144:	e182      	b.n	800344c <Start_CAN_Task+0x75c>
							Current_Status.IAT = (uint16_t) ((RxData[3] << 8)
 8003146:	4b39      	ldr	r3, [pc, #228]	; (800322c <Start_CAN_Task+0x53c>)
 8003148:	78db      	ldrb	r3, [r3, #3]
 800314a:	b29b      	uxth	r3, r3
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	b29a      	uxth	r2, r3
									+ (RxData[2] & 0x00ff));
 8003150:	4b36      	ldr	r3, [pc, #216]	; (800322c <Start_CAN_Task+0x53c>)
 8003152:	789b      	ldrb	r3, [r3, #2]
 8003154:	b29b      	uxth	r3, r3
							Current_Status.IAT = (uint16_t) ((RxData[3] << 8)
 8003156:	4413      	add	r3, r2
 8003158:	b29b      	uxth	r3, r3
 800315a:	b21a      	sxth	r2, r3
 800315c:	4b34      	ldr	r3, [pc, #208]	; (8003230 <Start_CAN_Task+0x540>)
 800315e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
							Current_Status.BATT = (uint16_t) ((RxData[5] << 8)
 8003162:	4b32      	ldr	r3, [pc, #200]	; (800322c <Start_CAN_Task+0x53c>)
 8003164:	795b      	ldrb	r3, [r3, #5]
 8003166:	b29b      	uxth	r3, r3
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	b29a      	uxth	r2, r3
									+ (RxData[4] & 0x00ff));
 800316c:	4b2f      	ldr	r3, [pc, #188]	; (800322c <Start_CAN_Task+0x53c>)
 800316e:	791b      	ldrb	r3, [r3, #4]
 8003170:	b29b      	uxth	r3, r3
							Current_Status.BATT = (uint16_t) ((RxData[5] << 8)
 8003172:	4413      	add	r3, r2
 8003174:	b29a      	uxth	r2, r3
 8003176:	4b2e      	ldr	r3, [pc, #184]	; (8003230 <Start_CAN_Task+0x540>)
 8003178:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
							Current_Status.MAF = (uint16_t) ((RxData[7] << 8)
 800317c:	4b2b      	ldr	r3, [pc, #172]	; (800322c <Start_CAN_Task+0x53c>)
 800317e:	79db      	ldrb	r3, [r3, #7]
 8003180:	b29b      	uxth	r3, r3
 8003182:	021b      	lsls	r3, r3, #8
 8003184:	b29a      	uxth	r2, r3
									+ (RxData[6] & 0x00ff));
 8003186:	4b29      	ldr	r3, [pc, #164]	; (800322c <Start_CAN_Task+0x53c>)
 8003188:	799b      	ldrb	r3, [r3, #6]
 800318a:	b29b      	uxth	r3, r3
							Current_Status.MAF = (uint16_t) ((RxData[7] << 8)
 800318c:	4413      	add	r3, r2
 800318e:	b29a      	uxth	r2, r3
 8003190:	4b27      	ldr	r3, [pc, #156]	; (8003230 <Start_CAN_Task+0x540>)
 8003192:	835a      	strh	r2, [r3, #26]
							break;
 8003194:	e15a      	b.n	800344c <Start_CAN_Task+0x75c>
							Current_Status.GEAR = (uint16_t) ((RxData[3] << 8)
 8003196:	4b25      	ldr	r3, [pc, #148]	; (800322c <Start_CAN_Task+0x53c>)
 8003198:	78db      	ldrb	r3, [r3, #3]
 800319a:	b29b      	uxth	r3, r3
 800319c:	021b      	lsls	r3, r3, #8
 800319e:	b29a      	uxth	r2, r3
									+ (RxData[2] & 0x00ff));
 80031a0:	4b22      	ldr	r3, [pc, #136]	; (800322c <Start_CAN_Task+0x53c>)
 80031a2:	789b      	ldrb	r3, [r3, #2]
 80031a4:	b29b      	uxth	r3, r3
							Current_Status.GEAR = (uint16_t) ((RxData[3] << 8)
 80031a6:	4413      	add	r3, r2
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	4b21      	ldr	r3, [pc, #132]	; (8003230 <Start_CAN_Task+0x540>)
 80031ac:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
									(uint16_t) ((RxData[5] << 8)
 80031b0:	4b1e      	ldr	r3, [pc, #120]	; (800322c <Start_CAN_Task+0x53c>)
 80031b2:	795b      	ldrb	r3, [r3, #5]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	b29a      	uxth	r2, r3
											+ (RxData[4] & 0x00ff));
 80031ba:	4b1c      	ldr	r3, [pc, #112]	; (800322c <Start_CAN_Task+0x53c>)
 80031bc:	791b      	ldrb	r3, [r3, #4]
 80031be:	b29b      	uxth	r3, r3
									(uint16_t) ((RxData[5] << 8)
 80031c0:	4413      	add	r3, r2
 80031c2:	b29a      	uxth	r2, r3
							Current_Status.INJ_TIM =
 80031c4:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <Start_CAN_Task+0x540>)
 80031c6:	839a      	strh	r2, [r3, #28]
									(uint16_t) ((RxData[7] << 8)
 80031c8:	4b18      	ldr	r3, [pc, #96]	; (800322c <Start_CAN_Task+0x53c>)
 80031ca:	79db      	ldrb	r3, [r3, #7]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	b29a      	uxth	r2, r3
											+ (RxData[6] & 0x00ff));
 80031d2:	4b16      	ldr	r3, [pc, #88]	; (800322c <Start_CAN_Task+0x53c>)
 80031d4:	799b      	ldrb	r3, [r3, #6]
 80031d6:	b29b      	uxth	r3, r3
									(uint16_t) ((RxData[7] << 8)
 80031d8:	4413      	add	r3, r2
 80031da:	b29a      	uxth	r2, r3
							Current_Status.IGN_TIM =
 80031dc:	4b14      	ldr	r3, [pc, #80]	; (8003230 <Start_CAN_Task+0x540>)
 80031de:	83da      	strh	r2, [r3, #30]
							break;
 80031e0:	e134      	b.n	800344c <Start_CAN_Task+0x75c>
									(uint16_t) ((RxData[3] << 8)
 80031e2:	4b12      	ldr	r3, [pc, #72]	; (800322c <Start_CAN_Task+0x53c>)
 80031e4:	78db      	ldrb	r3, [r3, #3]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	021b      	lsls	r3, r3, #8
 80031ea:	b29a      	uxth	r2, r3
											+ (RxData[2] & 0x00ff));
 80031ec:	4b0f      	ldr	r3, [pc, #60]	; (800322c <Start_CAN_Task+0x53c>)
 80031ee:	789b      	ldrb	r3, [r3, #2]
 80031f0:	b29b      	uxth	r3, r3
									(uint16_t) ((RxData[3] << 8)
 80031f2:	4413      	add	r3, r2
 80031f4:	b29a      	uxth	r2, r3
							Current_Status.CAM_I_L =
 80031f6:	4b0e      	ldr	r3, [pc, #56]	; (8003230 <Start_CAN_Task+0x540>)
 80031f8:	841a      	strh	r2, [r3, #32]
									(uint16_t) ((RxData[5] << 8)
 80031fa:	4b0c      	ldr	r3, [pc, #48]	; (800322c <Start_CAN_Task+0x53c>)
 80031fc:	795b      	ldrb	r3, [r3, #5]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	021b      	lsls	r3, r3, #8
 8003202:	b29a      	uxth	r2, r3
											+ (RxData[4] & 0x00ff));
 8003204:	4b09      	ldr	r3, [pc, #36]	; (800322c <Start_CAN_Task+0x53c>)
 8003206:	791b      	ldrb	r3, [r3, #4]
 8003208:	b29b      	uxth	r3, r3
									(uint16_t) ((RxData[5] << 8)
 800320a:	4413      	add	r3, r2
 800320c:	b29a      	uxth	r2, r3
							Current_Status.CAM_I_R =
 800320e:	4b08      	ldr	r3, [pc, #32]	; (8003230 <Start_CAN_Task+0x540>)
 8003210:	845a      	strh	r2, [r3, #34]	; 0x22
									(uint16_t) ((RxData[7] << 8)
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <Start_CAN_Task+0x53c>)
 8003214:	79db      	ldrb	r3, [r3, #7]
 8003216:	b29b      	uxth	r3, r3
 8003218:	021b      	lsls	r3, r3, #8
 800321a:	b29a      	uxth	r2, r3
											+ (RxData[6] & 0x00ff));
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <Start_CAN_Task+0x53c>)
 800321e:	799b      	ldrb	r3, [r3, #6]
 8003220:	b29b      	uxth	r3, r3
									(uint16_t) ((RxData[7] << 8)
 8003222:	4413      	add	r3, r2
 8003224:	b29a      	uxth	r2, r3
							Current_Status.CAM_E_L =
 8003226:	4b02      	ldr	r3, [pc, #8]	; (8003230 <Start_CAN_Task+0x540>)
 8003228:	849a      	strh	r2, [r3, #36]	; 0x24
							break;
 800322a:	e10f      	b.n	800344c <Start_CAN_Task+0x75c>
 800322c:	2000a760 	.word	0x2000a760
 8003230:	200099c0 	.word	0x200099c0
									(uint16_t) ((RxData[3] << 8)
 8003234:	4b87      	ldr	r3, [pc, #540]	; (8003454 <Start_CAN_Task+0x764>)
 8003236:	78db      	ldrb	r3, [r3, #3]
 8003238:	b29b      	uxth	r3, r3
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	b29a      	uxth	r2, r3
											+ (RxData[2] & 0x00ff));
 800323e:	4b85      	ldr	r3, [pc, #532]	; (8003454 <Start_CAN_Task+0x764>)
 8003240:	789b      	ldrb	r3, [r3, #2]
 8003242:	b29b      	uxth	r3, r3
									(uint16_t) ((RxData[3] << 8)
 8003244:	4413      	add	r3, r2
 8003246:	b29a      	uxth	r2, r3
							Current_Status.CAM_E_R =
 8003248:	4b83      	ldr	r3, [pc, #524]	; (8003458 <Start_CAN_Task+0x768>)
 800324a:	84da      	strh	r2, [r3, #38]	; 0x26
									(uint16_t) ((RxData[5] << 8)
 800324c:	4b81      	ldr	r3, [pc, #516]	; (8003454 <Start_CAN_Task+0x764>)
 800324e:	795b      	ldrb	r3, [r3, #5]
 8003250:	b29b      	uxth	r3, r3
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	b29a      	uxth	r2, r3
											+ (RxData[4] & 0x00ff));
 8003256:	4b7f      	ldr	r3, [pc, #508]	; (8003454 <Start_CAN_Task+0x764>)
 8003258:	791b      	ldrb	r3, [r3, #4]
 800325a:	b29b      	uxth	r3, r3
									(uint16_t) ((RxData[5] << 8)
 800325c:	4413      	add	r3, r2
 800325e:	b29a      	uxth	r2, r3
							Current_Status.LAMBDA1 =
 8003260:	4b7d      	ldr	r3, [pc, #500]	; (8003458 <Start_CAN_Task+0x768>)
 8003262:	851a      	strh	r2, [r3, #40]	; 0x28
									(uint16_t) ((RxData[7] << 8)
 8003264:	4b7b      	ldr	r3, [pc, #492]	; (8003454 <Start_CAN_Task+0x764>)
 8003266:	79db      	ldrb	r3, [r3, #7]
 8003268:	b29b      	uxth	r3, r3
 800326a:	021b      	lsls	r3, r3, #8
 800326c:	b29a      	uxth	r2, r3
											+ (RxData[6] & 0x00ff));
 800326e:	4b79      	ldr	r3, [pc, #484]	; (8003454 <Start_CAN_Task+0x764>)
 8003270:	799b      	ldrb	r3, [r3, #6]
 8003272:	b29b      	uxth	r3, r3
									(uint16_t) ((RxData[7] << 8)
 8003274:	4413      	add	r3, r2
 8003276:	b29a      	uxth	r2, r3
							Current_Status.LAMBDA2 =
 8003278:	4b77      	ldr	r3, [pc, #476]	; (8003458 <Start_CAN_Task+0x768>)
 800327a:	855a      	strh	r2, [r3, #42]	; 0x2a
							break;
 800327c:	e0e6      	b.n	800344c <Start_CAN_Task+0x75c>
							Current_Status.TRIG1_ERROR = (uint16_t) ((RxData[3]
 800327e:	4b75      	ldr	r3, [pc, #468]	; (8003454 <Start_CAN_Task+0x764>)
 8003280:	78db      	ldrb	r3, [r3, #3]
 8003282:	b29b      	uxth	r3, r3
									<< 8) + (RxData[2] & 0x00ff));
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	b29a      	uxth	r2, r3
 8003288:	4b72      	ldr	r3, [pc, #456]	; (8003454 <Start_CAN_Task+0x764>)
 800328a:	789b      	ldrb	r3, [r3, #2]
 800328c:	b29b      	uxth	r3, r3
							Current_Status.TRIG1_ERROR = (uint16_t) ((RxData[3]
 800328e:	4413      	add	r3, r2
 8003290:	b29a      	uxth	r2, r3
 8003292:	4b71      	ldr	r3, [pc, #452]	; (8003458 <Start_CAN_Task+0x768>)
 8003294:	859a      	strh	r2, [r3, #44]	; 0x2c
							Current_Status.FAULT_CODES = (uint16_t) ((RxData[5]
 8003296:	4b6f      	ldr	r3, [pc, #444]	; (8003454 <Start_CAN_Task+0x764>)
 8003298:	795b      	ldrb	r3, [r3, #5]
 800329a:	b29b      	uxth	r3, r3
									<< 8) + (RxData[4] & 0x00ff));
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	b29a      	uxth	r2, r3
 80032a0:	4b6c      	ldr	r3, [pc, #432]	; (8003454 <Start_CAN_Task+0x764>)
 80032a2:	791b      	ldrb	r3, [r3, #4]
 80032a4:	b29b      	uxth	r3, r3
							Current_Status.FAULT_CODES = (uint16_t) ((RxData[5]
 80032a6:	4413      	add	r3, r2
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	4b6b      	ldr	r3, [pc, #428]	; (8003458 <Start_CAN_Task+0x768>)
 80032ac:	85da      	strh	r2, [r3, #46]	; 0x2e
							Current_Status.FUELP = (uint16_t) ((RxData[7] << 8)
 80032ae:	4b69      	ldr	r3, [pc, #420]	; (8003454 <Start_CAN_Task+0x764>)
 80032b0:	79db      	ldrb	r3, [r3, #7]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	b29a      	uxth	r2, r3
									+ (RxData[6] & 0x00ff));
 80032b8:	4b66      	ldr	r3, [pc, #408]	; (8003454 <Start_CAN_Task+0x764>)
 80032ba:	799b      	ldrb	r3, [r3, #6]
 80032bc:	b29b      	uxth	r3, r3
							Current_Status.FUELP = (uint16_t) ((RxData[7] << 8)
 80032be:	4413      	add	r3, r2
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	4b65      	ldr	r3, [pc, #404]	; (8003458 <Start_CAN_Task+0x768>)
 80032c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
							break;
 80032c8:	e0c0      	b.n	800344c <Start_CAN_Task+0x75c>
							Current_Status.OILT = (uint16_t) ((RxData[3] << 8)
 80032ca:	4b62      	ldr	r3, [pc, #392]	; (8003454 <Start_CAN_Task+0x764>)
 80032cc:	78db      	ldrb	r3, [r3, #3]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	021b      	lsls	r3, r3, #8
 80032d2:	b29a      	uxth	r2, r3
									+ (RxData[2] & 0x00ff));
 80032d4:	4b5f      	ldr	r3, [pc, #380]	; (8003454 <Start_CAN_Task+0x764>)
 80032d6:	789b      	ldrb	r3, [r3, #2]
 80032d8:	b29b      	uxth	r3, r3
							Current_Status.OILT = (uint16_t) ((RxData[3] << 8)
 80032da:	4413      	add	r3, r2
 80032dc:	b29b      	uxth	r3, r3
 80032de:	b21a      	sxth	r2, r3
 80032e0:	4b5d      	ldr	r3, [pc, #372]	; (8003458 <Start_CAN_Task+0x768>)
 80032e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
							Current_Status.OILP = (uint16_t) ((RxData[5] << 8)
 80032e6:	4b5b      	ldr	r3, [pc, #364]	; (8003454 <Start_CAN_Task+0x764>)
 80032e8:	795b      	ldrb	r3, [r3, #5]
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	b29a      	uxth	r2, r3
									+ (RxData[4] & 0x00ff));
 80032f0:	4b58      	ldr	r3, [pc, #352]	; (8003454 <Start_CAN_Task+0x764>)
 80032f2:	791b      	ldrb	r3, [r3, #4]
 80032f4:	b29b      	uxth	r3, r3
							Current_Status.OILP = (uint16_t) ((RxData[5] << 8)
 80032f6:	4413      	add	r3, r2
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	4b57      	ldr	r3, [pc, #348]	; (8003458 <Start_CAN_Task+0x768>)
 80032fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
							Current_Status.LF_SPEED = (uint16_t) ((RxData[7]
 8003300:	4b54      	ldr	r3, [pc, #336]	; (8003454 <Start_CAN_Task+0x764>)
 8003302:	79db      	ldrb	r3, [r3, #7]
 8003304:	b29b      	uxth	r3, r3
									<< 8) + (RxData[6] & 0x00ff));
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	b29a      	uxth	r2, r3
 800330a:	4b52      	ldr	r3, [pc, #328]	; (8003454 <Start_CAN_Task+0x764>)
 800330c:	799b      	ldrb	r3, [r3, #6]
 800330e:	b29b      	uxth	r3, r3
							Current_Status.LF_SPEED = (uint16_t) ((RxData[7]
 8003310:	4413      	add	r3, r2
 8003312:	b29a      	uxth	r2, r3
 8003314:	4b50      	ldr	r3, [pc, #320]	; (8003458 <Start_CAN_Task+0x768>)
 8003316:	861a      	strh	r2, [r3, #48]	; 0x30
							break;
 8003318:	e098      	b.n	800344c <Start_CAN_Task+0x75c>
							Current_Status.LR_SPEED = (uint16_t) ((RxData[3]
 800331a:	4b4e      	ldr	r3, [pc, #312]	; (8003454 <Start_CAN_Task+0x764>)
 800331c:	78db      	ldrb	r3, [r3, #3]
 800331e:	b29b      	uxth	r3, r3
									<< 8) + (RxData[2] & 0x00ff));
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	b29a      	uxth	r2, r3
 8003324:	4b4b      	ldr	r3, [pc, #300]	; (8003454 <Start_CAN_Task+0x764>)
 8003326:	789b      	ldrb	r3, [r3, #2]
 8003328:	b29b      	uxth	r3, r3
							Current_Status.LR_SPEED = (uint16_t) ((RxData[3]
 800332a:	4413      	add	r3, r2
 800332c:	b29a      	uxth	r2, r3
 800332e:	4b4a      	ldr	r3, [pc, #296]	; (8003458 <Start_CAN_Task+0x768>)
 8003330:	865a      	strh	r2, [r3, #50]	; 0x32
							Current_Status.RF_SPEED = (uint16_t) ((RxData[5]
 8003332:	4b48      	ldr	r3, [pc, #288]	; (8003454 <Start_CAN_Task+0x764>)
 8003334:	795b      	ldrb	r3, [r3, #5]
 8003336:	b29b      	uxth	r3, r3
									<< 8) + (RxData[4] & 0x00ff));
 8003338:	021b      	lsls	r3, r3, #8
 800333a:	b29a      	uxth	r2, r3
 800333c:	4b45      	ldr	r3, [pc, #276]	; (8003454 <Start_CAN_Task+0x764>)
 800333e:	791b      	ldrb	r3, [r3, #4]
 8003340:	b29b      	uxth	r3, r3
							Current_Status.RF_SPEED = (uint16_t) ((RxData[5]
 8003342:	4413      	add	r3, r2
 8003344:	b29a      	uxth	r2, r3
 8003346:	4b44      	ldr	r3, [pc, #272]	; (8003458 <Start_CAN_Task+0x768>)
 8003348:	869a      	strh	r2, [r3, #52]	; 0x34
							Current_Status.RR_SPEED = (uint16_t) ((RxData[7]
 800334a:	4b42      	ldr	r3, [pc, #264]	; (8003454 <Start_CAN_Task+0x764>)
 800334c:	79db      	ldrb	r3, [r3, #7]
 800334e:	b29b      	uxth	r3, r3
									<< 8) + (RxData[6] & 0x00ff));
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	b29a      	uxth	r2, r3
 8003354:	4b3f      	ldr	r3, [pc, #252]	; (8003454 <Start_CAN_Task+0x764>)
 8003356:	799b      	ldrb	r3, [r3, #6]
 8003358:	b29b      	uxth	r3, r3
							Current_Status.RR_SPEED = (uint16_t) ((RxData[7]
 800335a:	4413      	add	r3, r2
 800335c:	b29a      	uxth	r2, r3
 800335e:	4b3e      	ldr	r3, [pc, #248]	; (8003458 <Start_CAN_Task+0x768>)
 8003360:	86da      	strh	r2, [r3, #54]	; 0x36
							break;
 8003362:	e073      	b.n	800344c <Start_CAN_Task+0x75c>
							Current_Status.KNOCK1 = (uint16_t) ((RxData[3] << 8)
 8003364:	4b3b      	ldr	r3, [pc, #236]	; (8003454 <Start_CAN_Task+0x764>)
 8003366:	78db      	ldrb	r3, [r3, #3]
 8003368:	b29b      	uxth	r3, r3
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	b29a      	uxth	r2, r3
									+ (RxData[2] & 0x00ff));
 800336e:	4b39      	ldr	r3, [pc, #228]	; (8003454 <Start_CAN_Task+0x764>)
 8003370:	789b      	ldrb	r3, [r3, #2]
 8003372:	b29b      	uxth	r3, r3
							Current_Status.KNOCK1 = (uint16_t) ((RxData[3] << 8)
 8003374:	4413      	add	r3, r2
 8003376:	b29a      	uxth	r2, r3
 8003378:	4b37      	ldr	r3, [pc, #220]	; (8003458 <Start_CAN_Task+0x768>)
 800337a:	871a      	strh	r2, [r3, #56]	; 0x38
							Current_Status.KNOCK2 = (uint16_t) ((RxData[5] << 8)
 800337c:	4b35      	ldr	r3, [pc, #212]	; (8003454 <Start_CAN_Task+0x764>)
 800337e:	795b      	ldrb	r3, [r3, #5]
 8003380:	b29b      	uxth	r3, r3
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	b29a      	uxth	r2, r3
									+ (RxData[4] & 0x00ff));
 8003386:	4b33      	ldr	r3, [pc, #204]	; (8003454 <Start_CAN_Task+0x764>)
 8003388:	791b      	ldrb	r3, [r3, #4]
 800338a:	b29b      	uxth	r3, r3
							Current_Status.KNOCK2 = (uint16_t) ((RxData[5] << 8)
 800338c:	4413      	add	r3, r2
 800338e:	b29a      	uxth	r2, r3
 8003390:	4b31      	ldr	r3, [pc, #196]	; (8003458 <Start_CAN_Task+0x768>)
 8003392:	875a      	strh	r2, [r3, #58]	; 0x3a
							Current_Status.KNOCK3 = (uint16_t) ((RxData[7] << 8)
 8003394:	4b2f      	ldr	r3, [pc, #188]	; (8003454 <Start_CAN_Task+0x764>)
 8003396:	79db      	ldrb	r3, [r3, #7]
 8003398:	b29b      	uxth	r3, r3
 800339a:	021b      	lsls	r3, r3, #8
 800339c:	b29a      	uxth	r2, r3
									+ (RxData[6] & 0x00ff));
 800339e:	4b2d      	ldr	r3, [pc, #180]	; (8003454 <Start_CAN_Task+0x764>)
 80033a0:	799b      	ldrb	r3, [r3, #6]
 80033a2:	b29b      	uxth	r3, r3
							Current_Status.KNOCK3 = (uint16_t) ((RxData[7] << 8)
 80033a4:	4413      	add	r3, r2
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	4b2b      	ldr	r3, [pc, #172]	; (8003458 <Start_CAN_Task+0x768>)
 80033aa:	879a      	strh	r2, [r3, #60]	; 0x3c
							break;
 80033ac:	e04e      	b.n	800344c <Start_CAN_Task+0x75c>
							Current_Status.KNOCK4 = (uint16_t) ((RxData[3] << 8)
 80033ae:	4b29      	ldr	r3, [pc, #164]	; (8003454 <Start_CAN_Task+0x764>)
 80033b0:	78db      	ldrb	r3, [r3, #3]
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	b29a      	uxth	r2, r3
									+ (RxData[2] & 0x00ff));
 80033b8:	4b26      	ldr	r3, [pc, #152]	; (8003454 <Start_CAN_Task+0x764>)
 80033ba:	789b      	ldrb	r3, [r3, #2]
 80033bc:	b29b      	uxth	r3, r3
							Current_Status.KNOCK4 = (uint16_t) ((RxData[3] << 8)
 80033be:	4413      	add	r3, r2
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	4b25      	ldr	r3, [pc, #148]	; (8003458 <Start_CAN_Task+0x768>)
 80033c4:	87da      	strh	r2, [r3, #62]	; 0x3e
							Current_Status.KNOCK5 = (uint16_t) ((RxData[5] << 8)
 80033c6:	4b23      	ldr	r3, [pc, #140]	; (8003454 <Start_CAN_Task+0x764>)
 80033c8:	795b      	ldrb	r3, [r3, #5]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	b29a      	uxth	r2, r3
									+ (RxData[4] & 0x00ff));
 80033d0:	4b20      	ldr	r3, [pc, #128]	; (8003454 <Start_CAN_Task+0x764>)
 80033d2:	791b      	ldrb	r3, [r3, #4]
 80033d4:	b29b      	uxth	r3, r3
							Current_Status.KNOCK5 = (uint16_t) ((RxData[5] << 8)
 80033d6:	4413      	add	r3, r2
 80033d8:	b29a      	uxth	r2, r3
 80033da:	4b1f      	ldr	r3, [pc, #124]	; (8003458 <Start_CAN_Task+0x768>)
 80033dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
							Current_Status.KNOCK6 = (uint16_t) ((RxData[7] << 8)
 80033e0:	4b1c      	ldr	r3, [pc, #112]	; (8003454 <Start_CAN_Task+0x764>)
 80033e2:	79db      	ldrb	r3, [r3, #7]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	b29a      	uxth	r2, r3
									+ (RxData[6] & 0x00ff));
 80033ea:	4b1a      	ldr	r3, [pc, #104]	; (8003454 <Start_CAN_Task+0x764>)
 80033ec:	799b      	ldrb	r3, [r3, #6]
 80033ee:	b29b      	uxth	r3, r3
							Current_Status.KNOCK6 = (uint16_t) ((RxData[7] << 8)
 80033f0:	4413      	add	r3, r2
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	4b18      	ldr	r3, [pc, #96]	; (8003458 <Start_CAN_Task+0x768>)
 80033f6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
							break;
 80033fa:	e027      	b.n	800344c <Start_CAN_Task+0x75c>
							Current_Status.KNOCK7 = (uint16_t) ((RxData[3] << 8)
 80033fc:	4b15      	ldr	r3, [pc, #84]	; (8003454 <Start_CAN_Task+0x764>)
 80033fe:	78db      	ldrb	r3, [r3, #3]
 8003400:	b29b      	uxth	r3, r3
 8003402:	021b      	lsls	r3, r3, #8
 8003404:	b29a      	uxth	r2, r3
									+ (RxData[2] & 0x00ff));
 8003406:	4b13      	ldr	r3, [pc, #76]	; (8003454 <Start_CAN_Task+0x764>)
 8003408:	789b      	ldrb	r3, [r3, #2]
 800340a:	b29b      	uxth	r3, r3
							Current_Status.KNOCK7 = (uint16_t) ((RxData[3] << 8)
 800340c:	4413      	add	r3, r2
 800340e:	b29a      	uxth	r2, r3
 8003410:	4b11      	ldr	r3, [pc, #68]	; (8003458 <Start_CAN_Task+0x768>)
 8003412:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
							Current_Status.KNOCK8 = (uint16_t) ((RxData[5] << 8)
 8003416:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <Start_CAN_Task+0x764>)
 8003418:	795b      	ldrb	r3, [r3, #5]
 800341a:	b29b      	uxth	r3, r3
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	b29a      	uxth	r2, r3
									+ (RxData[4] & 0x00ff));
 8003420:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <Start_CAN_Task+0x764>)
 8003422:	791b      	ldrb	r3, [r3, #4]
 8003424:	b29b      	uxth	r3, r3
							Current_Status.KNOCK8 = (uint16_t) ((RxData[5] << 8)
 8003426:	4413      	add	r3, r2
 8003428:	b29a      	uxth	r2, r3
 800342a:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <Start_CAN_Task+0x768>)
 800342c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
							Current_Status.LIMITS = (uint16_t) ((RxData[7] << 8)
 8003430:	4b08      	ldr	r3, [pc, #32]	; (8003454 <Start_CAN_Task+0x764>)
 8003432:	79db      	ldrb	r3, [r3, #7]
 8003434:	b29b      	uxth	r3, r3
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	b29a      	uxth	r2, r3
									+ (RxData[6] & 0x00ff));
 800343a:	4b06      	ldr	r3, [pc, #24]	; (8003454 <Start_CAN_Task+0x764>)
 800343c:	799b      	ldrb	r3, [r3, #6]
 800343e:	b29b      	uxth	r3, r3
							Current_Status.LIMITS = (uint16_t) ((RxData[7] << 8)
 8003440:	4413      	add	r3, r2
 8003442:	b29a      	uxth	r2, r3
 8003444:	4b04      	ldr	r3, [pc, #16]	; (8003458 <Start_CAN_Task+0x768>)
 8003446:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
							break;
 800344a:	bf00      	nop
						break;
 800344c:	bf00      	nop
					break;
 800344e:	f000 bc52 	b.w	8003cf6 <Start_CAN_Task+0x1006>
 8003452:	bf00      	nop
 8003454:	2000a760 	.word	0x2000a760
 8003458:	200099c0 	.word	0x200099c0
					switch (RxHeader.StdId) {
 800345c:	4b89      	ldr	r3, [pc, #548]	; (8003684 <Start_CAN_Task+0x994>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f5a3 63be 	sub.w	r3, r3, #1520	; 0x5f0
 8003464:	2b06      	cmp	r3, #6
 8003466:	f200 8448 	bhi.w	8003cfa <Start_CAN_Task+0x100a>
 800346a:	a201      	add	r2, pc, #4	; (adr r2, 8003470 <Start_CAN_Task+0x780>)
 800346c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003470:	0800348d 	.word	0x0800348d
 8003474:	08003cfb 	.word	0x08003cfb
 8003478:	080034cb 	.word	0x080034cb
 800347c:	08003595 	.word	0x08003595
 8003480:	08003629 	.word	0x08003629
 8003484:	08003cfb 	.word	0x08003cfb
 8003488:	08003649 	.word	0x08003649
						Current_Status.RPM = (uint16_t) ((RxData[1] << 8) + (RxData[0] & 0x00ff));
 800348c:	4b7e      	ldr	r3, [pc, #504]	; (8003688 <Start_CAN_Task+0x998>)
 800348e:	785b      	ldrb	r3, [r3, #1]
 8003490:	b29b      	uxth	r3, r3
 8003492:	021b      	lsls	r3, r3, #8
 8003494:	b29a      	uxth	r2, r3
 8003496:	4b7c      	ldr	r3, [pc, #496]	; (8003688 <Start_CAN_Task+0x998>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	b29b      	uxth	r3, r3
 800349c:	4413      	add	r3, r2
 800349e:	b29a      	uxth	r2, r3
 80034a0:	4b7a      	ldr	r3, [pc, #488]	; (800368c <Start_CAN_Task+0x99c>)
 80034a2:	809a      	strh	r2, [r3, #4]
						Current_Status.TPS = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff)) / 65;
 80034a4:	4b78      	ldr	r3, [pc, #480]	; (8003688 <Start_CAN_Task+0x998>)
 80034a6:	78db      	ldrb	r3, [r3, #3]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	4b76      	ldr	r3, [pc, #472]	; (8003688 <Start_CAN_Task+0x998>)
 80034b0:	789b      	ldrb	r3, [r3, #2]
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	4413      	add	r3, r2
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	4a75      	ldr	r2, [pc, #468]	; (8003690 <Start_CAN_Task+0x9a0>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	099b      	lsrs	r3, r3, #6
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	4b72      	ldr	r3, [pc, #456]	; (800368c <Start_CAN_Task+0x99c>)
 80034c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
						break;
 80034c8:	e0db      	b.n	8003682 <Start_CAN_Task+0x992>
						Current_Status.IAT = (uint16_t)((RxData[1] << 8) + (RxData[0] & 0x00ff)) / 19 - 450;
 80034ca:	4b6f      	ldr	r3, [pc, #444]	; (8003688 <Start_CAN_Task+0x998>)
 80034cc:	785b      	ldrb	r3, [r3, #1]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	4b6c      	ldr	r3, [pc, #432]	; (8003688 <Start_CAN_Task+0x998>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	4413      	add	r3, r2
 80034dc:	b29a      	uxth	r2, r3
 80034de:	4b6d      	ldr	r3, [pc, #436]	; (8003694 <Start_CAN_Task+0x9a4>)
 80034e0:	fba3 1302 	umull	r1, r3, r3, r2
 80034e4:	1ad2      	subs	r2, r2, r3
 80034e6:	0852      	lsrs	r2, r2, #1
 80034e8:	4413      	add	r3, r2
 80034ea:	091b      	lsrs	r3, r3, #4
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	f5a3 73e1 	sub.w	r3, r3, #450	; 0x1c2
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	b21a      	sxth	r2, r3
 80034f6:	4b65      	ldr	r3, [pc, #404]	; (800368c <Start_CAN_Task+0x99c>)
 80034f8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
						Current_Status.ECT = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff)) / 19 - 450;
 80034fc:	4b62      	ldr	r3, [pc, #392]	; (8003688 <Start_CAN_Task+0x998>)
 80034fe:	78db      	ldrb	r3, [r3, #3]
 8003500:	b29b      	uxth	r3, r3
 8003502:	021b      	lsls	r3, r3, #8
 8003504:	b29a      	uxth	r2, r3
 8003506:	4b60      	ldr	r3, [pc, #384]	; (8003688 <Start_CAN_Task+0x998>)
 8003508:	789b      	ldrb	r3, [r3, #2]
 800350a:	b29b      	uxth	r3, r3
 800350c:	4413      	add	r3, r2
 800350e:	b29a      	uxth	r2, r3
 8003510:	4b60      	ldr	r3, [pc, #384]	; (8003694 <Start_CAN_Task+0x9a4>)
 8003512:	fba3 1302 	umull	r1, r3, r3, r2
 8003516:	1ad2      	subs	r2, r2, r3
 8003518:	0852      	lsrs	r2, r2, #1
 800351a:	4413      	add	r3, r2
 800351c:	091b      	lsrs	r3, r3, #4
 800351e:	b29b      	uxth	r3, r3
 8003520:	f5a3 73e1 	sub.w	r3, r3, #450	; 0x1c2
 8003524:	b29b      	uxth	r3, r3
 8003526:	b21a      	sxth	r2, r3
 8003528:	4b58      	ldr	r3, [pc, #352]	; (800368c <Start_CAN_Task+0x99c>)
 800352a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
						Current_Status.FUELT = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff)) / 19 - 450;
 800352e:	4b56      	ldr	r3, [pc, #344]	; (8003688 <Start_CAN_Task+0x998>)
 8003530:	795b      	ldrb	r3, [r3, #5]
 8003532:	b29b      	uxth	r3, r3
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	b29a      	uxth	r2, r3
 8003538:	4b53      	ldr	r3, [pc, #332]	; (8003688 <Start_CAN_Task+0x998>)
 800353a:	791b      	ldrb	r3, [r3, #4]
 800353c:	b29b      	uxth	r3, r3
 800353e:	4413      	add	r3, r2
 8003540:	b29a      	uxth	r2, r3
 8003542:	4b54      	ldr	r3, [pc, #336]	; (8003694 <Start_CAN_Task+0x9a4>)
 8003544:	fba3 1302 	umull	r1, r3, r3, r2
 8003548:	1ad2      	subs	r2, r2, r3
 800354a:	0852      	lsrs	r2, r2, #1
 800354c:	4413      	add	r3, r2
 800354e:	091b      	lsrs	r3, r3, #4
 8003550:	b29b      	uxth	r3, r3
 8003552:	f5a3 73e1 	sub.w	r3, r3, #450	; 0x1c2
 8003556:	b29b      	uxth	r3, r3
 8003558:	b21a      	sxth	r2, r3
 800355a:	4b4c      	ldr	r3, [pc, #304]	; (800368c <Start_CAN_Task+0x99c>)
 800355c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
						Current_Status.OILT = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff)) / 19 - 450;
 8003560:	4b49      	ldr	r3, [pc, #292]	; (8003688 <Start_CAN_Task+0x998>)
 8003562:	79db      	ldrb	r3, [r3, #7]
 8003564:	b29b      	uxth	r3, r3
 8003566:	021b      	lsls	r3, r3, #8
 8003568:	b29a      	uxth	r2, r3
 800356a:	4b47      	ldr	r3, [pc, #284]	; (8003688 <Start_CAN_Task+0x998>)
 800356c:	799b      	ldrb	r3, [r3, #6]
 800356e:	b29b      	uxth	r3, r3
 8003570:	4413      	add	r3, r2
 8003572:	b29a      	uxth	r2, r3
 8003574:	4b47      	ldr	r3, [pc, #284]	; (8003694 <Start_CAN_Task+0x9a4>)
 8003576:	fba3 1302 	umull	r1, r3, r3, r2
 800357a:	1ad2      	subs	r2, r2, r3
 800357c:	0852      	lsrs	r2, r2, #1
 800357e:	4413      	add	r3, r2
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	b29b      	uxth	r3, r3
 8003584:	f5a3 73e1 	sub.w	r3, r3, #450	; 0x1c2
 8003588:	b29b      	uxth	r3, r3
 800358a:	b21a      	sxth	r2, r3
 800358c:	4b3f      	ldr	r3, [pc, #252]	; (800368c <Start_CAN_Task+0x99c>)
 800358e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
						break;
 8003592:	e076      	b.n	8003682 <Start_CAN_Task+0x992>
						Current_Status.MAP = (uint16_t)((RxData[1] << 8) + (RxData[0] & 0x00ff)) / 10;
 8003594:	4b3c      	ldr	r3, [pc, #240]	; (8003688 <Start_CAN_Task+0x998>)
 8003596:	785b      	ldrb	r3, [r3, #1]
 8003598:	b29b      	uxth	r3, r3
 800359a:	021b      	lsls	r3, r3, #8
 800359c:	b29a      	uxth	r2, r3
 800359e:	4b3a      	ldr	r3, [pc, #232]	; (8003688 <Start_CAN_Task+0x998>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	4413      	add	r3, r2
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	4a3b      	ldr	r2, [pc, #236]	; (8003698 <Start_CAN_Task+0x9a8>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	08db      	lsrs	r3, r3, #3
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	b21a      	sxth	r2, r3
 80035b4:	4b35      	ldr	r3, [pc, #212]	; (800368c <Start_CAN_Task+0x99c>)
 80035b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
						Current_Status.BARO = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff)) / 10;
 80035ba:	4b33      	ldr	r3, [pc, #204]	; (8003688 <Start_CAN_Task+0x998>)
 80035bc:	78db      	ldrb	r3, [r3, #3]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	021b      	lsls	r3, r3, #8
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	4b30      	ldr	r3, [pc, #192]	; (8003688 <Start_CAN_Task+0x998>)
 80035c6:	789b      	ldrb	r3, [r3, #2]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	4a32      	ldr	r2, [pc, #200]	; (8003698 <Start_CAN_Task+0x9a8>)
 80035d0:	fba2 2303 	umull	r2, r3, r2, r3
 80035d4:	08db      	lsrs	r3, r3, #3
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	4b2c      	ldr	r3, [pc, #176]	; (800368c <Start_CAN_Task+0x99c>)
 80035da:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
						Current_Status.OILP = (uint16_t)((RxData[5] << 8) + (RxData[4] & 0x00ff)) * 100 / 100;
 80035de:	4b2a      	ldr	r3, [pc, #168]	; (8003688 <Start_CAN_Task+0x998>)
 80035e0:	795b      	ldrb	r3, [r3, #5]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	4b27      	ldr	r3, [pc, #156]	; (8003688 <Start_CAN_Task+0x998>)
 80035ea:	791b      	ldrb	r3, [r3, #4]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	4413      	add	r3, r2
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	4b26      	ldr	r3, [pc, #152]	; (800368c <Start_CAN_Task+0x99c>)
 80035f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
						Current_Status.FUELP = (uint16_t)((RxData[7] << 8) + (RxData[6] & 0x00ff)) * 100 / 2;
 80035f8:	4b23      	ldr	r3, [pc, #140]	; (8003688 <Start_CAN_Task+0x998>)
 80035fa:	79db      	ldrb	r3, [r3, #7]
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	021b      	lsls	r3, r3, #8
 8003600:	b29a      	uxth	r2, r3
 8003602:	4b21      	ldr	r3, [pc, #132]	; (8003688 <Start_CAN_Task+0x998>)
 8003604:	799b      	ldrb	r3, [r3, #6]
 8003606:	b29b      	uxth	r3, r3
 8003608:	4413      	add	r3, r2
 800360a:	b29b      	uxth	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	0092      	lsls	r2, r2, #2
 8003610:	4413      	add	r3, r2
 8003612:	461a      	mov	r2, r3
 8003614:	0091      	lsls	r1, r2, #2
 8003616:	461a      	mov	r2, r3
 8003618:	460b      	mov	r3, r1
 800361a:	4413      	add	r3, r2
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	4b1a      	ldr	r3, [pc, #104]	; (800368c <Start_CAN_Task+0x99c>)
 8003622:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						break;
 8003626:	e02c      	b.n	8003682 <Start_CAN_Task+0x992>
						Current_Status.BATT = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff)) / 32;
 8003628:	4b17      	ldr	r3, [pc, #92]	; (8003688 <Start_CAN_Task+0x998>)
 800362a:	78db      	ldrb	r3, [r3, #3]
 800362c:	b29b      	uxth	r3, r3
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	b29a      	uxth	r2, r3
 8003632:	4b15      	ldr	r3, [pc, #84]	; (8003688 <Start_CAN_Task+0x998>)
 8003634:	789b      	ldrb	r3, [r3, #2]
 8003636:	b29b      	uxth	r3, r3
 8003638:	4413      	add	r3, r2
 800363a:	b29b      	uxth	r3, r3
 800363c:	095b      	lsrs	r3, r3, #5
 800363e:	b29a      	uxth	r2, r3
 8003640:	4b12      	ldr	r3, [pc, #72]	; (800368c <Start_CAN_Task+0x99c>)
 8003642:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
						break;
 8003646:	e01c      	b.n	8003682 <Start_CAN_Task+0x992>
						Current_Status.LAMBDA1 = (uint16_t)((RxData[1] << 8) + (RxData[0] & 0x00ff)) / 2;
 8003648:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <Start_CAN_Task+0x998>)
 800364a:	785b      	ldrb	r3, [r3, #1]
 800364c:	b29b      	uxth	r3, r3
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	b29a      	uxth	r2, r3
 8003652:	4b0d      	ldr	r3, [pc, #52]	; (8003688 <Start_CAN_Task+0x998>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	b29b      	uxth	r3, r3
 8003658:	4413      	add	r3, r2
 800365a:	b29b      	uxth	r3, r3
 800365c:	085b      	lsrs	r3, r3, #1
 800365e:	b29a      	uxth	r2, r3
 8003660:	4b0a      	ldr	r3, [pc, #40]	; (800368c <Start_CAN_Task+0x99c>)
 8003662:	851a      	strh	r2, [r3, #40]	; 0x28
						Current_Status.LAMBDA2 = (uint16_t)((RxData[3] << 8) + (RxData[2] & 0x00ff)) / 2;
 8003664:	4b08      	ldr	r3, [pc, #32]	; (8003688 <Start_CAN_Task+0x998>)
 8003666:	78db      	ldrb	r3, [r3, #3]
 8003668:	b29b      	uxth	r3, r3
 800366a:	021b      	lsls	r3, r3, #8
 800366c:	b29a      	uxth	r2, r3
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <Start_CAN_Task+0x998>)
 8003670:	789b      	ldrb	r3, [r3, #2]
 8003672:	b29b      	uxth	r3, r3
 8003674:	4413      	add	r3, r2
 8003676:	b29b      	uxth	r3, r3
 8003678:	085b      	lsrs	r3, r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <Start_CAN_Task+0x99c>)
 800367e:	855a      	strh	r2, [r3, #42]	; 0x2a
						break;
 8003680:	bf00      	nop
					break;
 8003682:	e33a      	b.n	8003cfa <Start_CAN_Task+0x100a>
 8003684:	2000a7dc 	.word	0x2000a7dc
 8003688:	2000a760 	.word	0x2000a760
 800368c:	200099c0 	.word	0x200099c0
 8003690:	fc0fc0fd 	.word	0xfc0fc0fd
 8003694:	af286bcb 	.word	0xaf286bcb
 8003698:	cccccccd 	.word	0xcccccccd
					if (RxHeader.StdId > 0x99 && RxHeader.StdId < 0x180)//do BMS magic if ids are ones identified to be modules
 800369c:	4b80      	ldr	r3, [pc, #512]	; (80038a0 <Start_CAN_Task+0xbb0>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b99      	cmp	r3, #153	; 0x99
 80036a2:	f240 82cb 	bls.w	8003c3c <Start_CAN_Task+0xf4c>
 80036a6:	4b7e      	ldr	r3, [pc, #504]	; (80038a0 <Start_CAN_Task+0xbb0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80036ae:	f080 82c5 	bcs.w	8003c3c <Start_CAN_Task+0xf4c>
						int Id = (RxHeader.StdId & 0x0F0);
 80036b2:	4b7b      	ldr	r3, [pc, #492]	; (80038a0 <Start_CAN_Task+0xbb0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ba:	61fb      	str	r3, [r7, #28]
						int CMU = (RxHeader.StdId & 0x00F);
 80036bc:	4b78      	ldr	r3, [pc, #480]	; (80038a0 <Start_CAN_Task+0xbb0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 030f 	and.w	r3, r3, #15
 80036c4:	613b      	str	r3, [r7, #16]
						Current_Status.BATTERY_MODULES[CMU].ENABLED = true;
 80036c6:	4977      	ldr	r1, [pc, #476]	; (80038a4 <Start_CAN_Task+0xbb4>)
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4613      	mov	r3, r2
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	33a4      	adds	r3, #164	; 0xa4
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	2b70      	cmp	r3, #112	; 0x70
 80036de:	d033      	beq.n	8003748 <Start_CAN_Task+0xa58>
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	2b70      	cmp	r3, #112	; 0x70
 80036e4:	dc33      	bgt.n	800374e <Start_CAN_Task+0xa5e>
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	2b60      	cmp	r3, #96	; 0x60
 80036ea:	d02a      	beq.n	8003742 <Start_CAN_Task+0xa52>
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2b60      	cmp	r3, #96	; 0x60
 80036f0:	dc2d      	bgt.n	800374e <Start_CAN_Task+0xa5e>
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	2b50      	cmp	r3, #80	; 0x50
 80036f6:	d021      	beq.n	800373c <Start_CAN_Task+0xa4c>
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	2b50      	cmp	r3, #80	; 0x50
 80036fc:	dc27      	bgt.n	800374e <Start_CAN_Task+0xa5e>
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	2b40      	cmp	r3, #64	; 0x40
 8003702:	d018      	beq.n	8003736 <Start_CAN_Task+0xa46>
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	2b40      	cmp	r3, #64	; 0x40
 8003708:	dc21      	bgt.n	800374e <Start_CAN_Task+0xa5e>
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	2b30      	cmp	r3, #48	; 0x30
 800370e:	d00f      	beq.n	8003730 <Start_CAN_Task+0xa40>
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	2b30      	cmp	r3, #48	; 0x30
 8003714:	dc1b      	bgt.n	800374e <Start_CAN_Task+0xa5e>
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <Start_CAN_Task+0xa34>
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b20      	cmp	r3, #32
 8003720:	d003      	beq.n	800372a <Start_CAN_Task+0xa3a>
 8003722:	e014      	b.n	800374e <Start_CAN_Task+0xa5e>
							  Id = 0;
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
							  break;
 8003728:	e011      	b.n	800374e <Start_CAN_Task+0xa5e>
							  Id = 1;
 800372a:	2301      	movs	r3, #1
 800372c:	61fb      	str	r3, [r7, #28]
							  break;
 800372e:	e00e      	b.n	800374e <Start_CAN_Task+0xa5e>
							  Id = 2;
 8003730:	2302      	movs	r3, #2
 8003732:	61fb      	str	r3, [r7, #28]
							  break;
 8003734:	e00b      	b.n	800374e <Start_CAN_Task+0xa5e>
							  Id = 3;
 8003736:	2303      	movs	r3, #3
 8003738:	61fb      	str	r3, [r7, #28]
							  break;
 800373a:	e008      	b.n	800374e <Start_CAN_Task+0xa5e>
							  Id = 4;
 800373c:	2304      	movs	r3, #4
 800373e:	61fb      	str	r3, [r7, #28]
							  break;
 8003740:	e005      	b.n	800374e <Start_CAN_Task+0xa5e>
							  Id = 5;
 8003742:	2305      	movs	r3, #5
 8003744:	61fb      	str	r3, [r7, #28]
							  break;
 8003746:	e002      	b.n	800374e <Start_CAN_Task+0xa5e>
							  Id = 6;
 8003748:	2306      	movs	r3, #6
 800374a:	61fb      	str	r3, [r7, #28]
							  break;
 800374c:	bf00      	nop
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	2b06      	cmp	r3, #6
 8003752:	f200 8280 	bhi.w	8003c56 <Start_CAN_Task+0xf66>
 8003756:	a201      	add	r2, pc, #4	; (adr r2, 800375c <Start_CAN_Task+0xa6c>)
 8003758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375c:	08003779 	.word	0x08003779
 8003760:	080037d7 	.word	0x080037d7
 8003764:	080038ad 	.word	0x080038ad
 8003768:	08003975 	.word	0x08003975
 800376c:	08003a3d 	.word	0x08003a3d
 8003770:	08003b0d 	.word	0x08003b0d
 8003774:	08003bd5 	.word	0x08003bd5
								Current_Status.BATTERY_MODULES[CMU].ERROR = RxData[0] + (RxData[1] << 8) + (RxData[2] << 16) + (RxData[3] << 24);
 8003778:	4b4b      	ldr	r3, [pc, #300]	; (80038a8 <Start_CAN_Task+0xbb8>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	4b4a      	ldr	r3, [pc, #296]	; (80038a8 <Start_CAN_Task+0xbb8>)
 8003780:	785b      	ldrb	r3, [r3, #1]
 8003782:	021b      	lsls	r3, r3, #8
 8003784:	441a      	add	r2, r3
 8003786:	4b48      	ldr	r3, [pc, #288]	; (80038a8 <Start_CAN_Task+0xbb8>)
 8003788:	789b      	ldrb	r3, [r3, #2]
 800378a:	041b      	lsls	r3, r3, #16
 800378c:	441a      	add	r2, r3
 800378e:	4b46      	ldr	r3, [pc, #280]	; (80038a8 <Start_CAN_Task+0xbb8>)
 8003790:	78db      	ldrb	r3, [r3, #3]
 8003792:	061b      	lsls	r3, r3, #24
 8003794:	4413      	add	r3, r2
 8003796:	4618      	mov	r0, r3
 8003798:	4942      	ldr	r1, [pc, #264]	; (80038a4 <Start_CAN_Task+0xbb4>)
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4613      	mov	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	33b0      	adds	r3, #176	; 0xb0
 80037a8:	6018      	str	r0, [r3, #0]
								Current_Status.BATTERY_MODULES[CMU].BALANCE = (RxData[5]<< 8) + RxData[4];
 80037aa:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <Start_CAN_Task+0xbb8>)
 80037ac:	795b      	ldrb	r3, [r3, #5]
 80037ae:	021b      	lsls	r3, r3, #8
 80037b0:	4a3d      	ldr	r2, [pc, #244]	; (80038a8 <Start_CAN_Task+0xbb8>)
 80037b2:	7912      	ldrb	r2, [r2, #4]
 80037b4:	4413      	add	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	bf14      	ite	ne
 80037ba:	2301      	movne	r3, #1
 80037bc:	2300      	moveq	r3, #0
 80037be:	b2d8      	uxtb	r0, r3
 80037c0:	4938      	ldr	r1, [pc, #224]	; (80038a4 <Start_CAN_Task+0xbb4>)
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4613      	mov	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	33ac      	adds	r3, #172	; 0xac
 80037d0:	4602      	mov	r2, r0
 80037d2:	701a      	strb	r2, [r3, #0]
							  break;
 80037d4:	e23f      	b.n	8003c56 <Start_CAN_Task+0xf66>
							  if (Current_Status.BATTERY_MODULES[CMU].BALANCE == 0 && Current_Status.BATTERY_MODULES[CMU].IGNORE == 0)
 80037d6:	4933      	ldr	r1, [pc, #204]	; (80038a4 <Start_CAN_Task+0xbb4>)
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4613      	mov	r3, r2
 80037dc:	011b      	lsls	r3, r3, #4
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	440b      	add	r3, r1
 80037e4:	33ac      	adds	r3, #172	; 0xac
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	f083 0301 	eor.w	r3, r3, #1
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 8226 	beq.w	8003c40 <Start_CAN_Task+0xf50>
 80037f4:	492b      	ldr	r1, [pc, #172]	; (80038a4 <Start_CAN_Task+0xbb4>)
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4613      	mov	r3, r2
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	33ad      	adds	r3, #173	; 0xad
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	f083 0301 	eor.w	r3, r3, #1
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8217 	beq.w	8003c40 <Start_CAN_Task+0xf50>
								Current_Status.BATTERY_MODULES[CMU].CELLS[0] = (uint16_t)(RxData[0] + (RxData[1] & 0x3F) * 256);
 8003812:	4b25      	ldr	r3, [pc, #148]	; (80038a8 <Start_CAN_Task+0xbb8>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	b29a      	uxth	r2, r3
 8003818:	4b23      	ldr	r3, [pc, #140]	; (80038a8 <Start_CAN_Task+0xbb8>)
 800381a:	785b      	ldrb	r3, [r3, #1]
 800381c:	b29b      	uxth	r3, r3
 800381e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003822:	b29b      	uxth	r3, r3
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	b29b      	uxth	r3, r3
 8003828:	4413      	add	r3, r2
 800382a:	b298      	uxth	r0, r3
 800382c:	491d      	ldr	r1, [pc, #116]	; (80038a4 <Start_CAN_Task+0xbb4>)
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4613      	mov	r3, r2
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	33b4      	adds	r3, #180	; 0xb4
 800383c:	4602      	mov	r2, r0
 800383e:	801a      	strh	r2, [r3, #0]
								Current_Status.BATTERY_MODULES[CMU].CELLS[1] = (uint16_t)(RxData[2] + (RxData[3] & 0x3F) * 256);
 8003840:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <Start_CAN_Task+0xbb8>)
 8003842:	789b      	ldrb	r3, [r3, #2]
 8003844:	b29a      	uxth	r2, r3
 8003846:	4b18      	ldr	r3, [pc, #96]	; (80038a8 <Start_CAN_Task+0xbb8>)
 8003848:	78db      	ldrb	r3, [r3, #3]
 800384a:	b29b      	uxth	r3, r3
 800384c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003850:	b29b      	uxth	r3, r3
 8003852:	021b      	lsls	r3, r3, #8
 8003854:	b29b      	uxth	r3, r3
 8003856:	4413      	add	r3, r2
 8003858:	b298      	uxth	r0, r3
 800385a:	4912      	ldr	r1, [pc, #72]	; (80038a4 <Start_CAN_Task+0xbb4>)
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	33b6      	adds	r3, #182	; 0xb6
 800386a:	4602      	mov	r2, r0
 800386c:	801a      	strh	r2, [r3, #0]
								Current_Status.BATTERY_MODULES[CMU].CELLS[2] = (uint16_t)(RxData[4] + (RxData[5] & 0x3F) * 256);
 800386e:	4b0e      	ldr	r3, [pc, #56]	; (80038a8 <Start_CAN_Task+0xbb8>)
 8003870:	791b      	ldrb	r3, [r3, #4]
 8003872:	b29a      	uxth	r2, r3
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <Start_CAN_Task+0xbb8>)
 8003876:	795b      	ldrb	r3, [r3, #5]
 8003878:	b29b      	uxth	r3, r3
 800387a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800387e:	b29b      	uxth	r3, r3
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	b29b      	uxth	r3, r3
 8003884:	4413      	add	r3, r2
 8003886:	b298      	uxth	r0, r3
 8003888:	4906      	ldr	r1, [pc, #24]	; (80038a4 <Start_CAN_Task+0xbb4>)
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4613      	mov	r3, r2
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	33b8      	adds	r3, #184	; 0xb8
 8003898:	4602      	mov	r2, r0
 800389a:	801a      	strh	r2, [r3, #0]
							  break;
 800389c:	e1d0      	b.n	8003c40 <Start_CAN_Task+0xf50>
 800389e:	bf00      	nop
 80038a0:	2000a7dc 	.word	0x2000a7dc
 80038a4:	200099c0 	.word	0x200099c0
 80038a8:	2000a760 	.word	0x2000a760
							  if (Current_Status.BATTERY_MODULES[CMU].BALANCE == 0 && Current_Status.BATTERY_MODULES[CMU].IGNORE == 0)
 80038ac:	4995      	ldr	r1, [pc, #596]	; (8003b04 <Start_CAN_Task+0xe14>)
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	33ac      	adds	r3, #172	; 0xac
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	f083 0301 	eor.w	r3, r3, #1
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 81bd 	beq.w	8003c44 <Start_CAN_Task+0xf54>
 80038ca:	498e      	ldr	r1, [pc, #568]	; (8003b04 <Start_CAN_Task+0xe14>)
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4613      	mov	r3, r2
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	33ad      	adds	r3, #173	; 0xad
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	f083 0301 	eor.w	r3, r3, #1
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 81ae 	beq.w	8003c44 <Start_CAN_Task+0xf54>
								Current_Status.BATTERY_MODULES[CMU].CELLS[3] = (uint16_t)(RxData[0] + (RxData[1] & 0x3F) * 256);
 80038e8:	4b87      	ldr	r3, [pc, #540]	; (8003b08 <Start_CAN_Task+0xe18>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	4b86      	ldr	r3, [pc, #536]	; (8003b08 <Start_CAN_Task+0xe18>)
 80038f0:	785b      	ldrb	r3, [r3, #1]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	4413      	add	r3, r2
 8003900:	b298      	uxth	r0, r3
 8003902:	4980      	ldr	r1, [pc, #512]	; (8003b04 <Start_CAN_Task+0xe14>)
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4613      	mov	r3, r2
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	33ba      	adds	r3, #186	; 0xba
 8003912:	4602      	mov	r2, r0
 8003914:	801a      	strh	r2, [r3, #0]
								Current_Status.BATTERY_MODULES[CMU].CELLS[4] = (uint16_t)(RxData[2] + (RxData[3] & 0x3F) * 256);
 8003916:	4b7c      	ldr	r3, [pc, #496]	; (8003b08 <Start_CAN_Task+0xe18>)
 8003918:	789b      	ldrb	r3, [r3, #2]
 800391a:	b29a      	uxth	r2, r3
 800391c:	4b7a      	ldr	r3, [pc, #488]	; (8003b08 <Start_CAN_Task+0xe18>)
 800391e:	78db      	ldrb	r3, [r3, #3]
 8003920:	b29b      	uxth	r3, r3
 8003922:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003926:	b29b      	uxth	r3, r3
 8003928:	021b      	lsls	r3, r3, #8
 800392a:	b29b      	uxth	r3, r3
 800392c:	4413      	add	r3, r2
 800392e:	b298      	uxth	r0, r3
 8003930:	4974      	ldr	r1, [pc, #464]	; (8003b04 <Start_CAN_Task+0xe14>)
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4613      	mov	r3, r2
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	33bc      	adds	r3, #188	; 0xbc
 8003940:	4602      	mov	r2, r0
 8003942:	801a      	strh	r2, [r3, #0]
								Current_Status.BATTERY_MODULES[CMU].CELLS[5] = (uint16_t)(RxData[4] + (RxData[5] & 0x3F) * 256);
 8003944:	4b70      	ldr	r3, [pc, #448]	; (8003b08 <Start_CAN_Task+0xe18>)
 8003946:	791b      	ldrb	r3, [r3, #4]
 8003948:	b29a      	uxth	r2, r3
 800394a:	4b6f      	ldr	r3, [pc, #444]	; (8003b08 <Start_CAN_Task+0xe18>)
 800394c:	795b      	ldrb	r3, [r3, #5]
 800394e:	b29b      	uxth	r3, r3
 8003950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003954:	b29b      	uxth	r3, r3
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	b29b      	uxth	r3, r3
 800395a:	4413      	add	r3, r2
 800395c:	b298      	uxth	r0, r3
 800395e:	4969      	ldr	r1, [pc, #420]	; (8003b04 <Start_CAN_Task+0xe14>)
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	33be      	adds	r3, #190	; 0xbe
 800396e:	4602      	mov	r2, r0
 8003970:	801a      	strh	r2, [r3, #0]
							  break;
 8003972:	e167      	b.n	8003c44 <Start_CAN_Task+0xf54>
							  if (Current_Status.BATTERY_MODULES[CMU].BALANCE == 0 && Current_Status.BATTERY_MODULES[CMU].IGNORE == 0)
 8003974:	4963      	ldr	r1, [pc, #396]	; (8003b04 <Start_CAN_Task+0xe14>)
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4613      	mov	r3, r2
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	33ac      	adds	r3, #172	; 0xac
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	f083 0301 	eor.w	r3, r3, #1
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 815b 	beq.w	8003c48 <Start_CAN_Task+0xf58>
 8003992:	495c      	ldr	r1, [pc, #368]	; (8003b04 <Start_CAN_Task+0xe14>)
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4613      	mov	r3, r2
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	33ad      	adds	r3, #173	; 0xad
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	f083 0301 	eor.w	r3, r3, #1
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 814c 	beq.w	8003c48 <Start_CAN_Task+0xf58>
								Current_Status.BATTERY_MODULES[CMU].CELLS[6] = (uint16_t)(RxData[0] + (RxData[1] & 0x3F) * 256);
 80039b0:	4b55      	ldr	r3, [pc, #340]	; (8003b08 <Start_CAN_Task+0xe18>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	4b54      	ldr	r3, [pc, #336]	; (8003b08 <Start_CAN_Task+0xe18>)
 80039b8:	785b      	ldrb	r3, [r3, #1]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	4413      	add	r3, r2
 80039c8:	b298      	uxth	r0, r3
 80039ca:	494e      	ldr	r1, [pc, #312]	; (8003b04 <Start_CAN_Task+0xe14>)
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4613      	mov	r3, r2
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	33c0      	adds	r3, #192	; 0xc0
 80039da:	4602      	mov	r2, r0
 80039dc:	801a      	strh	r2, [r3, #0]
								Current_Status.BATTERY_MODULES[CMU].CELLS[7] = (uint16_t)(RxData[2] + (RxData[3] & 0x3F) * 256);
 80039de:	4b4a      	ldr	r3, [pc, #296]	; (8003b08 <Start_CAN_Task+0xe18>)
 80039e0:	789b      	ldrb	r3, [r3, #2]
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	4b48      	ldr	r3, [pc, #288]	; (8003b08 <Start_CAN_Task+0xe18>)
 80039e6:	78db      	ldrb	r3, [r3, #3]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	4413      	add	r3, r2
 80039f6:	b298      	uxth	r0, r3
 80039f8:	4942      	ldr	r1, [pc, #264]	; (8003b04 <Start_CAN_Task+0xe14>)
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4613      	mov	r3, r2
 80039fe:	011b      	lsls	r3, r3, #4
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	440b      	add	r3, r1
 8003a06:	33c2      	adds	r3, #194	; 0xc2
 8003a08:	4602      	mov	r2, r0
 8003a0a:	801a      	strh	r2, [r3, #0]
								Current_Status.BATTERY_MODULES[CMU].CELLS[8] = (uint16_t)(RxData[4] + (RxData[5] & 0x3F) * 256);
 8003a0c:	4b3e      	ldr	r3, [pc, #248]	; (8003b08 <Start_CAN_Task+0xe18>)
 8003a0e:	791b      	ldrb	r3, [r3, #4]
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	4b3d      	ldr	r3, [pc, #244]	; (8003b08 <Start_CAN_Task+0xe18>)
 8003a14:	795b      	ldrb	r3, [r3, #5]
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	4413      	add	r3, r2
 8003a24:	b298      	uxth	r0, r3
 8003a26:	4937      	ldr	r1, [pc, #220]	; (8003b04 <Start_CAN_Task+0xe14>)
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	33c4      	adds	r3, #196	; 0xc4
 8003a36:	4602      	mov	r2, r0
 8003a38:	801a      	strh	r2, [r3, #0]
							  break;
 8003a3a:	e105      	b.n	8003c48 <Start_CAN_Task+0xf58>
							  if (Current_Status.BATTERY_MODULES[CMU].BALANCE == 0 && Current_Status.BATTERY_MODULES[CMU].IGNORE == 0)
 8003a3c:	4931      	ldr	r1, [pc, #196]	; (8003b04 <Start_CAN_Task+0xe14>)
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4613      	mov	r3, r2
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	33ac      	adds	r3, #172	; 0xac
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	f083 0301 	eor.w	r3, r3, #1
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80f9 	beq.w	8003c4c <Start_CAN_Task+0xf5c>
 8003a5a:	492a      	ldr	r1, [pc, #168]	; (8003b04 <Start_CAN_Task+0xe14>)
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	33ad      	adds	r3, #173	; 0xad
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	f083 0301 	eor.w	r3, r3, #1
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 80ea 	beq.w	8003c4c <Start_CAN_Task+0xf5c>
								Current_Status.BATTERY_MODULES[CMU].CELLS[9] = (uint16_t)(RxData[0] + (RxData[1] & 0x3F) * 256);
 8003a78:	4b23      	ldr	r3, [pc, #140]	; (8003b08 <Start_CAN_Task+0xe18>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	4b22      	ldr	r3, [pc, #136]	; (8003b08 <Start_CAN_Task+0xe18>)
 8003a80:	785b      	ldrb	r3, [r3, #1]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	4413      	add	r3, r2
 8003a90:	b298      	uxth	r0, r3
 8003a92:	491c      	ldr	r1, [pc, #112]	; (8003b04 <Start_CAN_Task+0xe14>)
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4613      	mov	r3, r2
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	33c6      	adds	r3, #198	; 0xc6
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	801a      	strh	r2, [r3, #0]
								Current_Status.BATTERY_MODULES[CMU].CELLS[10] = (uint16_t)(RxData[2] + (RxData[3] & 0x3F) * 256);
 8003aa6:	4b18      	ldr	r3, [pc, #96]	; (8003b08 <Start_CAN_Task+0xe18>)
 8003aa8:	789b      	ldrb	r3, [r3, #2]
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	4b16      	ldr	r3, [pc, #88]	; (8003b08 <Start_CAN_Task+0xe18>)
 8003aae:	78db      	ldrb	r3, [r3, #3]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	021b      	lsls	r3, r3, #8
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	4413      	add	r3, r2
 8003abe:	b298      	uxth	r0, r3
 8003ac0:	4910      	ldr	r1, [pc, #64]	; (8003b04 <Start_CAN_Task+0xe14>)
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	33c8      	adds	r3, #200	; 0xc8
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	801a      	strh	r2, [r3, #0]
								Current_Status.BATTERY_MODULES[CMU].CELLS[11] = (uint16_t)(RxData[4] + (RxData[5] & 0x3F) * 256);
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	; (8003b08 <Start_CAN_Task+0xe18>)
 8003ad6:	791b      	ldrb	r3, [r3, #4]
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <Start_CAN_Task+0xe18>)
 8003adc:	795b      	ldrb	r3, [r3, #5]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	4413      	add	r3, r2
 8003aec:	b298      	uxth	r0, r3
 8003aee:	4905      	ldr	r1, [pc, #20]	; (8003b04 <Start_CAN_Task+0xe14>)
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4613      	mov	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	33ca      	adds	r3, #202	; 0xca
 8003afe:	4602      	mov	r2, r0
 8003b00:	801a      	strh	r2, [r3, #0]
							  break;
 8003b02:	e0a3      	b.n	8003c4c <Start_CAN_Task+0xf5c>
 8003b04:	200099c0 	.word	0x200099c0
 8003b08:	2000a760 	.word	0x2000a760
							  if (Current_Status.BATTERY_MODULES[CMU].BALANCE == 0 && Current_Status.BATTERY_MODULES[CMU].IGNORE == 0)
 8003b0c:	4981      	ldr	r1, [pc, #516]	; (8003d14 <Start_CAN_Task+0x1024>)
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4613      	mov	r3, r2
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	33ac      	adds	r3, #172	; 0xac
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	f083 0301 	eor.w	r3, r3, #1
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8093 	beq.w	8003c50 <Start_CAN_Task+0xf60>
 8003b2a:	497a      	ldr	r1, [pc, #488]	; (8003d14 <Start_CAN_Task+0x1024>)
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	33ad      	adds	r3, #173	; 0xad
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	f083 0301 	eor.w	r3, r3, #1
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f000 8084 	beq.w	8003c50 <Start_CAN_Task+0xf60>
								Current_Status.BATTERY_MODULES[CMU].CELLS[12] = (uint16_t)(RxData[0] + (RxData[1] & 0x3F) * 256);
 8003b48:	4b73      	ldr	r3, [pc, #460]	; (8003d18 <Start_CAN_Task+0x1028>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	4b72      	ldr	r3, [pc, #456]	; (8003d18 <Start_CAN_Task+0x1028>)
 8003b50:	785b      	ldrb	r3, [r3, #1]
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	021b      	lsls	r3, r3, #8
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	b298      	uxth	r0, r3
 8003b62:	496c      	ldr	r1, [pc, #432]	; (8003d14 <Start_CAN_Task+0x1024>)
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4613      	mov	r3, r2
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	33cc      	adds	r3, #204	; 0xcc
 8003b72:	4602      	mov	r2, r0
 8003b74:	801a      	strh	r2, [r3, #0]
								Current_Status.BATTERY_MODULES[CMU].CELLS[13] = (uint16_t)(RxData[2] + (RxData[3] & 0x3F) * 256);
 8003b76:	4b68      	ldr	r3, [pc, #416]	; (8003d18 <Start_CAN_Task+0x1028>)
 8003b78:	789b      	ldrb	r3, [r3, #2]
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	4b66      	ldr	r3, [pc, #408]	; (8003d18 <Start_CAN_Task+0x1028>)
 8003b7e:	78db      	ldrb	r3, [r3, #3]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	021b      	lsls	r3, r3, #8
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	b298      	uxth	r0, r3
 8003b90:	4960      	ldr	r1, [pc, #384]	; (8003d14 <Start_CAN_Task+0x1024>)
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	4613      	mov	r3, r2
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	33ce      	adds	r3, #206	; 0xce
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	801a      	strh	r2, [r3, #0]
								Current_Status.BATTERY_MODULES[CMU].CELLS[14] = (uint16_t)(RxData[4] + (RxData[5] & 0x3F) * 256);
 8003ba4:	4b5c      	ldr	r3, [pc, #368]	; (8003d18 <Start_CAN_Task+0x1028>)
 8003ba6:	791b      	ldrb	r3, [r3, #4]
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	4b5b      	ldr	r3, [pc, #364]	; (8003d18 <Start_CAN_Task+0x1028>)
 8003bac:	795b      	ldrb	r3, [r3, #5]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	b298      	uxth	r0, r3
 8003bbe:	4955      	ldr	r1, [pc, #340]	; (8003d14 <Start_CAN_Task+0x1024>)
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	33d0      	adds	r3, #208	; 0xd0
 8003bce:	4602      	mov	r2, r0
 8003bd0:	801a      	strh	r2, [r3, #0]
							  break;
 8003bd2:	e03d      	b.n	8003c50 <Start_CAN_Task+0xf60>
							  if (Current_Status.BATTERY_MODULES[CMU].BALANCE == 0 && Current_Status.BATTERY_MODULES[CMU].IGNORE == 0)
 8003bd4:	494f      	ldr	r1, [pc, #316]	; (8003d14 <Start_CAN_Task+0x1024>)
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	33ac      	adds	r3, #172	; 0xac
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	f083 0301 	eor.w	r3, r3, #1
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d031      	beq.n	8003c54 <Start_CAN_Task+0xf64>
 8003bf0:	4948      	ldr	r1, [pc, #288]	; (8003d14 <Start_CAN_Task+0x1024>)
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	33ad      	adds	r3, #173	; 0xad
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	f083 0301 	eor.w	r3, r3, #1
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d023      	beq.n	8003c54 <Start_CAN_Task+0xf64>
								Current_Status.BATTERY_MODULES[CMU].CELLS[15] = (uint16_t)(RxData[0] + (RxData[1] & 0x3F) * 256);
 8003c0c:	4b42      	ldr	r3, [pc, #264]	; (8003d18 <Start_CAN_Task+0x1028>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <Start_CAN_Task+0x1028>)
 8003c14:	785b      	ldrb	r3, [r3, #1]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	021b      	lsls	r3, r3, #8
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	4413      	add	r3, r2
 8003c24:	b298      	uxth	r0, r3
 8003c26:	493b      	ldr	r1, [pc, #236]	; (8003d14 <Start_CAN_Task+0x1024>)
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	33d2      	adds	r3, #210	; 0xd2
 8003c36:	4602      	mov	r2, r0
 8003c38:	801a      	strh	r2, [r3, #0]
							  break;
 8003c3a:	e00b      	b.n	8003c54 <Start_CAN_Task+0xf64>
					  }
 8003c3c:	bf00      	nop
 8003c3e:	e00a      	b.n	8003c56 <Start_CAN_Task+0xf66>
							  break;
 8003c40:	bf00      	nop
 8003c42:	e008      	b.n	8003c56 <Start_CAN_Task+0xf66>
							  break;
 8003c44:	bf00      	nop
 8003c46:	e006      	b.n	8003c56 <Start_CAN_Task+0xf66>
							  break;
 8003c48:	bf00      	nop
 8003c4a:	e004      	b.n	8003c56 <Start_CAN_Task+0xf66>
							  break;
 8003c4c:	bf00      	nop
 8003c4e:	e002      	b.n	8003c56 <Start_CAN_Task+0xf66>
							  break;
 8003c50:	bf00      	nop
 8003c52:	e000      	b.n	8003c56 <Start_CAN_Task+0xf66>
							  break;
 8003c54:	bf00      	nop
					  if ((RxHeader.StdId & 0xFF0) == 0x180)    // Determine if ID is standard (11 bits) or extended (29 bits)
 8003c56:	4b31      	ldr	r3, [pc, #196]	; (8003d1c <Start_CAN_Task+0x102c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8003c5e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003c62:	d14c      	bne.n	8003cfe <Start_CAN_Task+0x100e>
							int CMU = (RxHeader.StdId & 0x00F);
 8003c64:	4b2d      	ldr	r3, [pc, #180]	; (8003d1c <Start_CAN_Task+0x102c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	60fb      	str	r3, [r7, #12]
							for (int i = 0; i < (sizeof Current_Status.BATTERY_MODULES[CMU].TEMPS / sizeof Current_Status.BATTERY_MODULES[CMU].TEMPS[0]) - 1; i++)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	e03a      	b.n	8003cea <Start_CAN_Task+0xffa>
								Current_Status.BATTERY_MODULES[CMU].TEMPS[i] = RxData[i] - 40;
 8003c74:	4a28      	ldr	r2, [pc, #160]	; (8003d18 <Start_CAN_Task+0x1028>)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	4413      	add	r3, r2
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	3b28      	subs	r3, #40	; 0x28
 8003c80:	b298      	uxth	r0, r3
 8003c82:	4924      	ldr	r1, [pc, #144]	; (8003d14 <Start_CAN_Task+0x1024>)
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4613      	mov	r3, r2
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	4413      	add	r3, r2
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4413      	add	r3, r2
 8003c92:	3368      	adds	r3, #104	; 0x68
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	440b      	add	r3, r1
 8003c98:	4602      	mov	r2, r0
 8003c9a:	809a      	strh	r2, [r3, #4]
								  Current_Status.BATTERY_MODULES[CMU].TEMPS[i] = Current_Status.BATTERY_MODULES[CMU].TEMPS[i] + Current_Status.BATTERY_MODULES[CMU].TEMPOFF;
 8003c9c:	491d      	ldr	r1, [pc, #116]	; (8003d14 <Start_CAN_Task+0x1024>)
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	4413      	add	r3, r2
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4413      	add	r3, r2
 8003cac:	3368      	adds	r3, #104	; 0x68
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	440b      	add	r3, r1
 8003cb2:	8899      	ldrh	r1, [r3, #4]
 8003cb4:	4817      	ldr	r0, [pc, #92]	; (8003d14 <Start_CAN_Task+0x1024>)
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4403      	add	r3, r0
 8003cc2:	33dc      	adds	r3, #220	; 0xdc
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	440b      	add	r3, r1
 8003cc8:	b298      	uxth	r0, r3
 8003cca:	4912      	ldr	r1, [pc, #72]	; (8003d14 <Start_CAN_Task+0x1024>)
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	4413      	add	r3, r2
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4413      	add	r3, r2
 8003cda:	3368      	adds	r3, #104	; 0x68
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	440b      	add	r3, r1
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	809a      	strh	r2, [r3, #4]
							for (int i = 0; i < (sizeof Current_Status.BATTERY_MODULES[CMU].TEMPS / sizeof Current_Status.BATTERY_MODULES[CMU].TEMPS[0]) - 1; i++)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d9c1      	bls.n	8003c74 <Start_CAN_Task+0xf84>
					break;
 8003cf0:	e005      	b.n	8003cfe <Start_CAN_Task+0x100e>
					break;
 8003cf2:	bf00      	nop
 8003cf4:	e004      	b.n	8003d00 <Start_CAN_Task+0x1010>
					break;
 8003cf6:	bf00      	nop
 8003cf8:	e002      	b.n	8003d00 <Start_CAN_Task+0x1010>
					break;
 8003cfa:	bf00      	nop
 8003cfc:	e000      	b.n	8003d00 <Start_CAN_Task+0x1010>
					break;
 8003cfe:	bf00      	nop
				}
				HAL_GPIO_TogglePin(LED_PJ15_GPIO_Port, LED_PJ15_Pin);
 8003d00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d04:	4806      	ldr	r0, [pc, #24]	; (8003d20 <Start_CAN_Task+0x1030>)
 8003d06:	f003 fc7e 	bl	8007606 <HAL_GPIO_TogglePin>
				osDelay(1);
 8003d0a:	2001      	movs	r0, #1
 8003d0c:	f00a fd7d 	bl	800e80a <osDelay>
		if (CAN_ENABLED) {
 8003d10:	f7ff b806 	b.w	8002d20 <Start_CAN_Task+0x30>
 8003d14:	200099c0 	.word	0x200099c0
 8003d18:	2000a760 	.word	0x2000a760
 8003d1c:	2000a7dc 	.word	0x2000a7dc
 8003d20:	40022400 	.word	0x40022400

08003d24 <Start_BTN_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_BTN_Task */
void Start_BTN_Task(void *argument)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]

	//htim9.Instance->CCR1 = crr1 - 1; //left
	//htim9.Instance->CCR2 = crr2 - 1; //right

	for (;;) {
		Current_Status.BTN_TOP_RIGHT = HAL_GPIO_ReadPin(BTN_1_GPIO_Port,
 8003d2c:	2104      	movs	r1, #4
 8003d2e:	480a      	ldr	r0, [pc, #40]	; (8003d58 <Start_BTN_Task+0x34>)
 8003d30:	f003 fc38 	bl	80075a4 <HAL_GPIO_ReadPin>
 8003d34:	4603      	mov	r3, r0
 8003d36:	461a      	mov	r2, r3
 8003d38:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <Start_BTN_Task+0x38>)
 8003d3a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
		BTN_1_Pin);
		Current_Status.BTN_TOP_LEFT = HAL_GPIO_ReadPin(BTN_3_GPIO_Port,
 8003d3e:	2140      	movs	r1, #64	; 0x40
 8003d40:	4807      	ldr	r0, [pc, #28]	; (8003d60 <Start_BTN_Task+0x3c>)
 8003d42:	f003 fc2f 	bl	80075a4 <HAL_GPIO_ReadPin>
 8003d46:	4603      	mov	r3, r0
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <Start_BTN_Task+0x38>)
 8003d4c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
//		Current_Status.IND_RIGHT =
//				in16 == 0 && htim9.Instance->CNT < crr2 ? true : false;

		//Current_Status.ECT = htim9.Instance->CNT;

		osDelay(1);
 8003d50:	2001      	movs	r0, #1
 8003d52:	f00a fd5a 	bl	800e80a <osDelay>
		Current_Status.BTN_TOP_RIGHT = HAL_GPIO_ReadPin(BTN_1_GPIO_Port,
 8003d56:	e7e9      	b.n	8003d2c <Start_BTN_Task+0x8>
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	200099c0 	.word	0x200099c0
 8003d60:	40022400 	.word	0x40022400

08003d64 <Start_BARO_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_BARO_Task */
void Start_BARO_Task(void *argument)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_BARO_Task */
	/* Infinite loop */
	for (;;) {

		HAL_GPIO_TogglePin(LED_PJ12_GPIO_Port, LED_PJ12_Pin);
 8003d6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d70:	4803      	ldr	r0, [pc, #12]	; (8003d80 <Start_BARO_Task+0x1c>)
 8003d72:	f003 fc48 	bl	8007606 <HAL_GPIO_TogglePin>
		osDelay(1000);
 8003d76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d7a:	f00a fd46 	bl	800e80a <osDelay>
		HAL_GPIO_TogglePin(LED_PJ12_GPIO_Port, LED_PJ12_Pin);
 8003d7e:	e7f5      	b.n	8003d6c <Start_BARO_Task+0x8>
 8003d80:	40022400 	.word	0x40022400

08003d84 <Start_RGB_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_RGB_Task */
void Start_RGB_Task(void *argument)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_RGB_Task */

	Current_Status.LED_BRIGHTNESS = LED_DEFAULT_BRIGHTNESS;
 8003d8c:	4b0d      	ldr	r3, [pc, #52]	; (8003dc4 <Start_RGB_Task+0x40>)
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	Current_Status.RPM = 4000;
 8003d94:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <Start_RGB_Task+0x40>)
 8003d96:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8003d9a:	809a      	strh	r2, [r3, #4]
	/* Infinite loop */
	for (;;) {
		if (RGB_ENABLED) {

			WS2812_Clear(0);
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	f7fe f889 	bl	8001eb4 <WS2812_Clear>

			WS2812_RGB_t color;
			color.red = 255;
 8003da2:	23ff      	movs	r3, #255	; 0xff
 8003da4:	733b      	strb	r3, [r7, #12]
			color.green = 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	737b      	strb	r3, [r7, #13]
			color.blue = 0;
 8003daa:	2300      	movs	r3, #0
 8003dac:	73bb      	strb	r3, [r7, #14]
			WS2812_All_RGB(color, 0);
 8003dae:	2100      	movs	r1, #0
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f7fe f8b1 	bl	8001f18 <WS2812_All_RGB>
			WS2812_Refresh();
 8003db6:	f7fe f86d 	bl	8001e94 <WS2812_Refresh>

			osDelay(100);
 8003dba:	2064      	movs	r0, #100	; 0x64
 8003dbc:	f00a fd25 	bl	800e80a <osDelay>
		if (RGB_ENABLED) {
 8003dc0:	e7ec      	b.n	8003d9c <Start_RGB_Task+0x18>
 8003dc2:	bf00      	nop
 8003dc4:	200099c0 	.word	0x200099c0

08003dc8 <Start_INPUT_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_INPUT_Task */
void Start_INPUT_Task(void *argument)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
	/* Infinite loop */

	for (;;) {

		//PIN SETUP
		HAL_GPIO_WritePin(IN_E_GPIO_Port, IN_E_Pin, 0);
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003dd6:	481e      	ldr	r0, [pc, #120]	; (8003e50 <Start_INPUT_Task+0x88>)
 8003dd8:	f003 fbfc 	bl	80075d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_S0_GPIO_Port, IN_S0_Pin, 1);
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003de2:	481b      	ldr	r0, [pc, #108]	; (8003e50 <Start_INPUT_Task+0x88>)
 8003de4:	f003 fbf6 	bl	80075d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_S1_GPIO_Port, IN_S1_Pin, 1);
 8003de8:	2201      	movs	r2, #1
 8003dea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003dee:	4818      	ldr	r0, [pc, #96]	; (8003e50 <Start_INPUT_Task+0x88>)
 8003df0:	f003 fbf0 	bl	80075d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_S2_GPIO_Port, IN_S2_Pin, 1);
 8003df4:	2201      	movs	r2, #1
 8003df6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003dfa:	4815      	ldr	r0, [pc, #84]	; (8003e50 <Start_INPUT_Task+0x88>)
 8003dfc:	f003 fbea 	bl	80075d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_S3_GPIO_Port, IN_S3_Pin, 1);
 8003e00:	2201      	movs	r2, #1
 8003e02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e06:	4812      	ldr	r0, [pc, #72]	; (8003e50 <Start_INPUT_Task+0x88>)
 8003e08:	f003 fbe4 	bl	80075d4 <HAL_GPIO_WritePin>

		//PULL SETUP
		HAL_GPIO_WritePin(PUD_E_GPIO_Port, PUD_E_Pin, 0);
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2180      	movs	r1, #128	; 0x80
 8003e10:	4810      	ldr	r0, [pc, #64]	; (8003e54 <Start_INPUT_Task+0x8c>)
 8003e12:	f003 fbdf 	bl	80075d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUD_S0_GPIO_Port, PUD_S0_Pin, 1);
 8003e16:	2201      	movs	r2, #1
 8003e18:	2108      	movs	r1, #8
 8003e1a:	480e      	ldr	r0, [pc, #56]	; (8003e54 <Start_INPUT_Task+0x8c>)
 8003e1c:	f003 fbda 	bl	80075d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUD_S1_GPIO_Port, PUD_S1_Pin, 1);
 8003e20:	2201      	movs	r2, #1
 8003e22:	2110      	movs	r1, #16
 8003e24:	480b      	ldr	r0, [pc, #44]	; (8003e54 <Start_INPUT_Task+0x8c>)
 8003e26:	f003 fbd5 	bl	80075d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PUD_S2_GPIO_Port, PUD_S2_Pin, 1);
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	2120      	movs	r1, #32
 8003e2e:	4809      	ldr	r0, [pc, #36]	; (8003e54 <Start_INPUT_Task+0x8c>)
 8003e30:	f003 fbd0 	bl	80075d4 <HAL_GPIO_WritePin>

		//OUTPUT SETUP
		HAL_GPIO_WritePin(OUT_E_GPIO_Port, OUT_E_Pin, 0);
 8003e34:	2200      	movs	r2, #0
 8003e36:	2108      	movs	r1, #8
 8003e38:	4807      	ldr	r0, [pc, #28]	; (8003e58 <Start_INPUT_Task+0x90>)
 8003e3a:	f003 fbcb 	bl	80075d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT_S0_GPIO_Port, OUT_S0_Pin, 1);
 8003e3e:	2201      	movs	r2, #1
 8003e40:	2104      	movs	r1, #4
 8003e42:	4805      	ldr	r0, [pc, #20]	; (8003e58 <Start_INPUT_Task+0x90>)
 8003e44:	f003 fbc6 	bl	80075d4 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(PUD_S1_GPIO_Port, PUD_S1_Pin, 1);
		//HAL_GPIO_WritePin(PUD_S2_GPIO_Port, PUD_S2_Pin, 1);
		//HAL_GPIO_WritePin(HALL_OUT_1_PI12_GPIO_Port, HALL_OUT_1_PI12_Pin, 0);

		osDelay(1);
 8003e48:	2001      	movs	r0, #1
 8003e4a:	f00a fcde 	bl	800e80a <osDelay>
		HAL_GPIO_WritePin(IN_E_GPIO_Port, IN_E_Pin, 0);
 8003e4e:	e7bf      	b.n	8003dd0 <Start_INPUT_Task+0x8>
 8003e50:	40021800 	.word	0x40021800
 8003e54:	40020c00 	.word	0x40020c00
 8003e58:	40021c00 	.word	0x40021c00

08003e5c <Start_OUTPUT_Task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_OUTPUT_Task */
void Start_OUTPUT_Task(void *argument)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_OUTPUT_Task */
	/* Infinite loop */
	for (;;) {
		ADC_ChannelConfTypeDef sConfig = { 0 };
 8003e64:	f107 0308 	add.w	r3, r7, #8
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	605a      	str	r2, [r3, #4]
 8003e6e:	609a      	str	r2, [r3, #8]
 8003e70:	60da      	str	r2, [r3, #12]
		//sConfig.Channel = ADC_CHANNEL_1; //IN
		sConfig.Channel = ADC_CHANNEL_2; //BATT
 8003e72:	2302      	movs	r3, #2
 8003e74:	60bb      	str	r3, [r7, #8]
		//sConfig.Channel = ADC_CHANNEL_11; //MULTISENSE
		sConfig.Rank = 1;
 8003e76:	2301      	movs	r3, #1
 8003e78:	60fb      	str	r3, [r7, #12]
		sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003e7e:	f107 0308 	add.w	r3, r7, #8
 8003e82:	4619      	mov	r1, r3
 8003e84:	4811      	ldr	r0, [pc, #68]	; (8003ecc <Start_OUTPUT_Task+0x70>)
 8003e86:	f001 fb07 	bl	8005498 <HAL_ADC_ConfigChannel>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <Start_OUTPUT_Task+0x38>
			Error_Handler();
 8003e90:	f000 f9b6 	bl	8004200 <Error_Handler>
		}

		//uint32_t ADCValue = 0;
		HAL_ADC_Start(&hadc1);
 8003e94:	480d      	ldr	r0, [pc, #52]	; (8003ecc <Start_OUTPUT_Task+0x70>)
 8003e96:	f001 f96f 	bl	8005178 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8003e9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e9e:	480b      	ldr	r0, [pc, #44]	; (8003ecc <Start_OUTPUT_Task+0x70>)
 8003ea0:	f001 fa6f 	bl	8005382 <HAL_ADC_PollForConversion>
		//ADCValue = HAL_ADC_GetValue(&hadc1);
		HAL_ADC_Stop(&hadc1);
 8003ea4:	4809      	ldr	r0, [pc, #36]	; (8003ecc <Start_OUTPUT_Task+0x70>)
 8003ea6:	f001 fa39 	bl	800531c <HAL_ADC_Stop>
		//Current_Status.BATT = (ADCValue * 749) * (3.3 / 4096) / 100;
		Current_Status.IND_BATT = Current_Status.BATT < 11.98 ? true : false;
 8003eaa:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <Start_OUTPUT_Task+0x74>)
 8003eac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003eb0:	2b0b      	cmp	r3, #11
 8003eb2:	bf94      	ite	ls
 8003eb4:	2301      	movls	r3, #1
 8003eb6:	2300      	movhi	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <Start_OUTPUT_Task+0x74>)
 8003ebe:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		//Current_Status.ECT = (ADCValue * 749) * (3.3 / 4096);
		osDelay(1000);
 8003ec2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ec6:	f00a fca0 	bl	800e80a <osDelay>
	for (;;) {
 8003eca:	e7cb      	b.n	8003e64 <Start_OUTPUT_Task+0x8>
 8003ecc:	20009d84 	.word	0x20009d84
 8003ed0:	200099c0 	.word	0x200099c0

08003ed4 <Start_BMS_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_BMS_Task */
void Start_BMS_Task(void *argument)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b0dc      	sub	sp, #368	; 0x170
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003ede:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003ee2:	6018      	str	r0, [r3, #0]
	  /* Infinite loop */

		CAN_TxHeaderTypeDef   TxHeader;
		uint8_t               TxData[8];
		uint32_t              TxMailbox;
		uint8_t               mescycle = 0;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
		uint8_t               nextmes = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e
		uint8_t               testcycle = 0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f887 316d 	strb.w	r3, [r7, #365]	; 0x16d
		uint8_t               balancecells;
		uint8_t               balancepauze = 0;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
		const uint8_t finalxor [12] = {0xCF, 0xF5, 0xBB, 0x81, 0x27, 0x1D, 0x53, 0x69, 0x02, 0x38, 0x76, 0x4C};
 8003efc:	4ab4      	ldr	r2, [pc, #720]	; (80041d0 <Start_BMS_Task+0x2fc>)
 8003efe:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003f02:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f04:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		uint8_t  remainder;



		for (int dividend = 0; dividend < 256; ++dividend)
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8003f0e:	e032      	b.n	8003f76 <Start_BMS_Task+0xa2>
		{
			remainder = dividend << (WIDTH - 8);
 8003f10:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f14:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b

			for (uint8_t bit = 8; bit > 0; --bit)
 8003f18:	2308      	movs	r3, #8
 8003f1a:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
 8003f1e:	e017      	b.n	8003f50 <Start_BMS_Task+0x7c>
			{
				if (remainder & TOPBIT)
 8003f20:	f997 316b 	ldrsb.w	r3, [r7, #363]	; 0x16b
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	da09      	bge.n	8003f3c <Start_BMS_Task+0x68>
				{
					remainder = (remainder << 1) ^ POLYNOMIAL;
 8003f28:	f897 316b 	ldrb.w	r3, [r7, #363]	; 0x16b
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	b25b      	sxtb	r3, r3
 8003f30:	f083 031d 	eor.w	r3, r3, #29
 8003f34:	b25b      	sxtb	r3, r3
 8003f36:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
 8003f3a:	e004      	b.n	8003f46 <Start_BMS_Task+0x72>
				}
				else
				{
					remainder = (remainder << 1);
 8003f3c:	f897 316b 	ldrb.w	r3, [r7, #363]	; 0x16b
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
			for (uint8_t bit = 8; bit > 0; --bit)
 8003f46:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
 8003f50:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e3      	bne.n	8003f20 <Start_BMS_Task+0x4c>
				}
			}
			crcTable[dividend] = remainder;
 8003f58:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003f5c:	f5a3 72ae 	sub.w	r2, r3, #348	; 0x15c
 8003f60:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f64:	4413      	add	r3, r2
 8003f66:	f897 216b 	ldrb.w	r2, [r7, #363]	; 0x16b
 8003f6a:	701a      	strb	r2, [r3, #0]
		for (int dividend = 0; dividend < 256; ++dividend)
 8003f6c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f70:	3301      	adds	r3, #1
 8003f72:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8003f76:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003f7a:	2bff      	cmp	r3, #255	; 0xff
 8003f7c:	ddc8      	ble.n	8003f10 <Start_BMS_Task+0x3c>
		}

		for (int i = 0; i < (sizeof Current_Status.BATTERY_MODULES / sizeof Current_Status.BATTERY_MODULES[0]); ++i) {
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003f84:	e025      	b.n	8003fd2 <Start_BMS_Task+0xfe>
			Current_Status.BATTERY_MODULES[i].LOWEST_CELL_ID = 99;
 8003f86:	4993      	ldr	r1, [pc, #588]	; (80041d4 <Start_BMS_Task+0x300>)
 8003f88:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	33e2      	adds	r3, #226	; 0xe2
 8003f98:	2263      	movs	r2, #99	; 0x63
 8003f9a:	701a      	strb	r2, [r3, #0]
			Current_Status.BATTERY_MODULES[i].HIGHEST_CELL_ID = 99;
 8003f9c:	498d      	ldr	r1, [pc, #564]	; (80041d4 <Start_BMS_Task+0x300>)
 8003f9e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	33e6      	adds	r3, #230	; 0xe6
 8003fae:	2263      	movs	r2, #99	; 0x63
 8003fb0:	701a      	strb	r2, [r3, #0]
			Current_Status.BATTERY_MODULES[i].TICK = 0;
 8003fb2:	4988      	ldr	r1, [pc, #544]	; (80041d4 <Start_BMS_Task+0x300>)
 8003fb4:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8003fb8:	4613      	mov	r3, r2
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	33a8      	adds	r3, #168	; 0xa8
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < (sizeof Current_Status.BATTERY_MODULES / sizeof Current_Status.BATTERY_MODULES[0]); ++i) {
 8003fc8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003fcc:	3301      	adds	r3, #1
 8003fce:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003fd2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003fd6:	2b05      	cmp	r3, #5
 8003fd8:	d9d5      	bls.n	8003f86 <Start_BMS_Task+0xb2>
		}


	  for(;;)
	  {
		  if(Current_Status.CAN_PROTOCOL == CAN_BMW_PHEV)
 8003fda:	4b7e      	ldr	r3, [pc, #504]	; (80041d4 <Start_BMS_Task+0x300>)
 8003fdc:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8003fe0:	2b03      	cmp	r3, #3
 8003fe2:	d1fa      	bne.n	8003fda <Start_BMS_Task+0x106>
		  {
			if (nextmes == 6)
 8003fe4:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 8003fe8:	2b06      	cmp	r3, #6
 8003fea:	d117      	bne.n	800401c <Start_BMS_Task+0x148>
			{
				mescycle ++;
 8003fec:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
				nextmes = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e

				if (testcycle < 4)
 8003ffc:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 8004000:	2b03      	cmp	r3, #3
 8004002:	d804      	bhi.n	800400e <Start_BMS_Task+0x13a>
				{
					testcycle++;
 8004004:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 8004008:	3301      	adds	r3, #1
 800400a:	f887 316d 	strb.w	r3, [r7, #365]	; 0x16d
				}
				if (mescycle == 0xF)
 800400e:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004012:	2b0f      	cmp	r3, #15
 8004014:	d102      	bne.n	800401c <Start_BMS_Task+0x148>
				{
					mescycle = 0;
 8004016:	2300      	movs	r3, #0
 8004018:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
				}
			}

			if (balancepauze == 1)
 800401c:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8004020:	2b01      	cmp	r3, #1
 8004022:	d102      	bne.n	800402a <Start_BMS_Task+0x156>
			{
				balancecells = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	f887 316c 	strb.w	r3, [r7, #364]	; 0x16c
			}

			TxHeader.IDE = CAN_ID_STD;
 800402a:	2300      	movs	r3, #0
 800402c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			TxHeader.RTR = CAN_RTR_DATA;
 8004030:	2300      	movs	r3, #0
 8004032:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
			TxHeader.DLC = 8;
 8004036:	2308      	movs	r3, #8
 8004038:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

			TxHeader.StdId = 0x080 | (nextmes);
 800403c:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 8004040:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004044:	b2db      	uxtb	r3, r3
 8004046:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
			TxData[0] = 0xC7;
 800404a:	23c7      	movs	r3, #199	; 0xc7
 800404c:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124
			TxData[1] = 0x10;
 8004050:	2310      	movs	r3, #16
 8004052:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
			TxData[2] = 0x00;
 8004056:	2300      	movs	r3, #0
 8004058:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
			TxData[3] = 0x00;
 800405c:	2300      	movs	r3, #0
 800405e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

			if (testcycle < 3)
 8004062:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 8004066:	2b02      	cmp	r3, #2
 8004068:	d806      	bhi.n	8004078 <Start_BMS_Task+0x1a4>
			{
				TxData[4] = 0x20;
 800406a:	2320      	movs	r3, #32
 800406c:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
				TxData[5] = 0x00;
 8004070:	2300      	movs	r3, #0
 8004072:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
 8004076:	e00d      	b.n	8004094 <Start_BMS_Task+0x1c0>
			}
			else
			{
				if (balancecells == 1)
 8004078:	f897 316c 	ldrb.w	r3, [r7, #364]	; 0x16c
 800407c:	2b01      	cmp	r3, #1
 800407e:	d103      	bne.n	8004088 <Start_BMS_Task+0x1b4>
				{
					TxData[4] = 0x48;
 8004080:	2348      	movs	r3, #72	; 0x48
 8004082:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
 8004086:	e002      	b.n	800408e <Start_BMS_Task+0x1ba>
				}
				else
				{
					TxData[4] = 0x40;
 8004088:	2340      	movs	r3, #64	; 0x40
 800408a:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
				}
				TxData[5] = 0x01;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
			}

			TxData[6] = mescycle << 4;
 8004094:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
			if (testcycle == 2)
 80040a0:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d105      	bne.n	80040b4 <Start_BMS_Task+0x1e0>
			{
				TxData[6] = TxData[6] + 0x04;
 80040a8:	f897 312a 	ldrb.w	r3, [r7, #298]	; 0x12a
 80040ac:	3304      	adds	r3, #4
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a
			//CALCULATE NEXT CRC



			unsigned char canmes [11];
			int meslen = TxHeader.DLC + 1; //remove one for crc and add two for id bytes
 80040b4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80040b8:	3301      	adds	r3, #1
 80040ba:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
			canmes [1] = TxHeader.StdId;
 80040be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80040c8:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80040cc:	705a      	strb	r2, [r3, #1]
			canmes [0] = TxHeader.StdId >> 8;
 80040ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040d2:	0a1b      	lsrs	r3, r3, #8
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80040da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80040de:	701a      	strb	r2, [r3, #0]

			for (int i = 0; i < (TxHeader.DLC - 1); i++)
 80040e0:	2300      	movs	r3, #0
 80040e2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80040e6:	e012      	b.n	800410e <Start_BMS_Task+0x23a>
			{
				canmes[i + 2] = TxData[i];
 80040e8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80040ec:	3302      	adds	r3, #2
 80040ee:	f507 7192 	add.w	r1, r7, #292	; 0x124
 80040f2:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80040f6:	440a      	add	r2, r1
 80040f8:	7811      	ldrb	r1, [r2, #0]
 80040fa:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 80040fe:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 8004102:	54d1      	strb	r1, [r2, r3]
			for (int i = 0; i < (TxHeader.DLC - 1); i++)
 8004104:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004108:	3301      	adds	r3, #1
 800410a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800410e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004112:	1e5a      	subs	r2, r3, #1
 8004114:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004118:	429a      	cmp	r2, r3
 800411a:	d8e5      	bhi.n	80040e8 <Start_BMS_Task+0x214>
			}

			uint8_t crcData;
			uint8_t crcRemainder = 0xFF;
 800411c:	23ff      	movs	r3, #255	; 0xff
 800411e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

			for (int i = 0; i < meslen; ++i)
 8004122:	2300      	movs	r3, #0
 8004124:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004128:	e021      	b.n	800416e <Start_BMS_Task+0x29a>
			{
				crcData = canmes[i] ^ (crcRemainder >> (WIDTH - 8));
 800412a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800412e:	f5a3 72b4 	sub.w	r2, r3, #360	; 0x168
 8004132:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004136:	4413      	add	r3, r2
 8004138:	781a      	ldrb	r2, [r3, #0]
 800413a:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800413e:	4053      	eors	r3, r2
 8004140:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
				crcRemainder = crcTable[crcData] ^ (crcRemainder << 8);
 8004144:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8004148:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800414c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004150:	5cd3      	ldrb	r3, [r2, r3]
 8004152:	b25a      	sxtb	r2, r3
 8004154:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8004158:	021b      	lsls	r3, r3, #8
 800415a:	b25b      	sxtb	r3, r3
 800415c:	4053      	eors	r3, r2
 800415e:	b25b      	sxtb	r3, r3
 8004160:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			for (int i = 0; i < meslen; ++i)
 8004164:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004168:	3301      	adds	r3, #1
 800416a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800416e:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8004172:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004176:	429a      	cmp	r2, r3
 8004178:	dbd7      	blt.n	800412a <Start_BMS_Task+0x256>
			}
			crcRemainder = crcRemainder^(finalxor[nextmes]);
 800417a:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 800417e:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8004182:	443b      	add	r3, r7
 8004184:	f813 2c5c 	ldrb.w	r2, [r3, #-92]
 8004188:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 800418c:	4053      	eors	r3, r2
 800418e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
			TxData[7] = crcRemainder;
 8004192:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8004196:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
			osDelay(2);
 800419a:	2002      	movs	r0, #2
 800419c:	f00a fb35 	bl	800e80a <osDelay>
			if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80041a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80041a4:	f507 7292 	add.w	r2, r7, #292	; 0x124
 80041a8:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 80041ac:	480a      	ldr	r0, [pc, #40]	; (80041d8 <Start_BMS_Task+0x304>)
 80041ae:	f001 fdc1 	bl	8005d34 <HAL_CAN_AddTxMessage>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <Start_BMS_Task+0x2e8>
			{
			 Error_Handler ();
 80041b8:	f000 f822 	bl	8004200 <Error_Handler>
			}
			//
			nextmes ++;
 80041bc:	f897 316e 	ldrb.w	r3, [r7, #366]	; 0x16e
 80041c0:	3301      	adds	r3, #1
 80041c2:	f887 316e 	strb.w	r3, [r7, #366]	; 0x16e
			osDelay(5);
 80041c6:	2005      	movs	r0, #5
 80041c8:	f00a fb1f 	bl	800e80a <osDelay>
		  if(Current_Status.CAN_PROTOCOL == CAN_BMW_PHEV)
 80041cc:	e705      	b.n	8003fda <Start_BMS_Task+0x106>
 80041ce:	bf00      	nop
 80041d0:	0802ab74 	.word	0x0802ab74
 80041d4:	200099c0 	.word	0x200099c0
 80041d8:	2000a768 	.word	0x2000a768

080041dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a04      	ldr	r2, [pc, #16]	; (80041fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d101      	bne.n	80041f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80041ee:	f000 ff3b 	bl	8005068 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40001000 	.word	0x40001000

08004200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004204:	b672      	cpsid	i
}
 8004206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004208:	e7fe      	b.n	8004208 <Error_Handler+0x8>
	...

0800420c <SDRAM_delay>:

SDRAM_HandleTypeDef hsdram1;
FMC_SDRAM_CommandTypeDef command;

void SDRAM_delay(__IO uint32_t nCount)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]
	
  for(index = (100000 * nCount); index != 0; index--);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a09      	ldr	r2, [pc, #36]	; (8004240 <SDRAM_delay+0x34>)
 800421c:	fb02 f303 	mul.w	r3, r2, r3
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	e002      	b.n	800422a <SDRAM_delay+0x1e>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3b01      	subs	r3, #1
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f9      	bne.n	8004224 <SDRAM_delay+0x18>

}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	000186a0 	.word	0x000186a0

08004244 <SDRAM_Initialization_Sequence>:


HAL_StatusTypeDef SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t tmpmrd = 0;
 8004252:	2300      	movs	r3, #0
 8004254:	60bb      	str	r3, [r7, #8]
  
  /* Configure a clock configuration enable command */
  Command->CommandMode 					= FMC_SDRAM_CMD_CLK_ENABLE;	// ����SDRAMʱ�� 
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2201      	movs	r2, #1
 800425a:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK; 	// ѡ��Ҫ���Ƶ�����
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2208      	movs	r2, #8
 8004260:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2201      	movs	r2, #1
 8004266:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2200      	movs	r2, #0
 800426c:	60da      	str	r2, [r3, #12]
  
  status = HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 800426e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004272:	6839      	ldr	r1, [r7, #0]
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f006 ff8a 	bl	800b18e <HAL_SDRAM_SendCommand>
 800427a:	4603      	mov	r3, r0
 800427c:	73fb      	strb	r3, [r7, #15]
  SDRAM_delay(1);		// ��ʱ�ȴ�
 800427e:	2001      	movs	r0, #1
 8004280:	f7ff ffc4 	bl	800420c <SDRAM_delay>
  
  /* Configure a PALL (precharge all) command */ 
  Command->CommandMode 					= FMC_SDRAM_CMD_PALL;		// Ԥ�������
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2202      	movs	r2, #2
 8004288:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;	// ѡ��Ҫ���Ƶ�����
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2208      	movs	r2, #8
 800428e:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2201      	movs	r2, #1
 8004294:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2200      	movs	r2, #0
 800429a:	60da      	str	r2, [r3, #12]
  
  status = HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);  // ���Ϳ���ָ��
 800429c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042a0:	6839      	ldr	r1, [r7, #0]
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f006 ff73 	bl	800b18e <HAL_SDRAM_SendCommand>
 80042a8:	4603      	mov	r3, r0
 80042aa:	73fb      	strb	r3, [r7, #15]
  
  /* Configure a Auto-Refresh command */ 
  Command->CommandMode 					= FMC_SDRAM_CMD_AUTOREFRESH_MODE;	// ʹ���Զ�ˢ��
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2203      	movs	r2, #3
 80042b0:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;          // ѡ��Ҫ���Ƶ�����
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2208      	movs	r2, #8
 80042b6:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber			= 8;                                // �Զ�ˢ�´���
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2208      	movs	r2, #8
 80042bc:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= 0;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2200      	movs	r2, #0
 80042c2:	60da      	str	r2, [r3, #12]
  
  status = HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 80042c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042c8:	6839      	ldr	r1, [r7, #0]
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f006 ff5f 	bl	800b18e <HAL_SDRAM_SendCommand>
 80042d0:	4603      	mov	r3, r0
 80042d2:	73fb      	strb	r3, [r7, #15]
  
  /* Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_2          |
 80042d4:	f240 2331 	movw	r3, #561	; 0x231
 80042d8:	60bb      	str	r3, [r7, #8]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command->CommandMode					= FMC_SDRAM_CMD_LOAD_MODE;	// ����ģʽ�Ĵ�������
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	2204      	movs	r2, #4
 80042de:	601a      	str	r2, [r3, #0]
  Command->CommandTarget 				= FMC_COMMAND_TARGET_BANK;	// ѡ��Ҫ���Ƶ�����
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	2208      	movs	r2, #8
 80042e4:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber 			= 1;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2201      	movs	r2, #1
 80042ea:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition 	= tmpmrd;
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	60da      	str	r2, [r3, #12]
  
  status = HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);	// ���Ϳ���ָ��
 80042f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80042f6:	6839      	ldr	r1, [r7, #0]
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f006 ff48 	bl	800b18e <HAL_SDRAM_SendCommand>
 80042fe:	4603      	mov	r3, r0
 8004300:	73fb      	strb	r3, [r7, #15]
  
  hsdram->Instance->SDRTR |= ((uint32_t)((1386)<< 1));	// ����ˢ�¼����� 
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6812      	ldr	r2, [r2, #0]
 800430c:	f443 632d 	orr.w	r3, r3, #2768	; 0xad0
 8004310:	f043 0304 	orr.w	r3, r3, #4
 8004314:	6153      	str	r3, [r2, #20]

  return status;
 8004316:	7bfb      	ldrb	r3, [r7, #15]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004326:	2300      	movs	r3, #0
 8004328:	607b      	str	r3, [r7, #4]
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <HAL_MspInit+0x54>)
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	4a11      	ldr	r2, [pc, #68]	; (8004374 <HAL_MspInit+0x54>)
 8004330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004334:	6453      	str	r3, [r2, #68]	; 0x44
 8004336:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <HAL_MspInit+0x54>)
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800433e:	607b      	str	r3, [r7, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004342:	2300      	movs	r3, #0
 8004344:	603b      	str	r3, [r7, #0]
 8004346:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <HAL_MspInit+0x54>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	4a0a      	ldr	r2, [pc, #40]	; (8004374 <HAL_MspInit+0x54>)
 800434c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004350:	6413      	str	r3, [r2, #64]	; 0x40
 8004352:	4b08      	ldr	r3, [pc, #32]	; (8004374 <HAL_MspInit+0x54>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800435e:	2200      	movs	r2, #0
 8004360:	210f      	movs	r1, #15
 8004362:	f06f 0001 	mvn.w	r0, #1
 8004366:	f002 f9c3 	bl	80066f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800436a:	bf00      	nop
 800436c:	3708      	adds	r7, #8
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40023800 	.word	0x40023800

08004378 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08a      	sub	sp, #40	; 0x28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004380:	f107 0314 	add.w	r3, r7, #20
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	609a      	str	r2, [r3, #8]
 800438c:	60da      	str	r2, [r3, #12]
 800438e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a17      	ldr	r2, [pc, #92]	; (80043f4 <HAL_ADC_MspInit+0x7c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d127      	bne.n	80043ea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800439a:	2300      	movs	r3, #0
 800439c:	613b      	str	r3, [r7, #16]
 800439e:	4b16      	ldr	r3, [pc, #88]	; (80043f8 <HAL_ADC_MspInit+0x80>)
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	4a15      	ldr	r2, [pc, #84]	; (80043f8 <HAL_ADC_MspInit+0x80>)
 80043a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a8:	6453      	str	r3, [r2, #68]	; 0x44
 80043aa:	4b13      	ldr	r3, [pc, #76]	; (80043f8 <HAL_ADC_MspInit+0x80>)
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <HAL_ADC_MspInit+0x80>)
 80043bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043be:	4a0e      	ldr	r2, [pc, #56]	; (80043f8 <HAL_ADC_MspInit+0x80>)
 80043c0:	f043 0304 	orr.w	r3, r3, #4
 80043c4:	6313      	str	r3, [r2, #48]	; 0x30
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <HAL_ADC_MspInit+0x80>)
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = MULTISENSE_ADC_Pin;
 80043d2:	2302      	movs	r3, #2
 80043d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043d6:	2303      	movs	r3, #3
 80043d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MULTISENSE_ADC_GPIO_Port, &GPIO_InitStruct);
 80043de:	f107 0314 	add.w	r3, r7, #20
 80043e2:	4619      	mov	r1, r3
 80043e4:	4805      	ldr	r0, [pc, #20]	; (80043fc <HAL_ADC_MspInit+0x84>)
 80043e6:	f002 ff31 	bl	800724c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80043ea:	bf00      	nop
 80043ec:	3728      	adds	r7, #40	; 0x28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40012000 	.word	0x40012000
 80043f8:	40023800 	.word	0x40023800
 80043fc:	40020800 	.word	0x40020800

08004400 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08c      	sub	sp, #48	; 0x30
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004408:	f107 031c 	add.w	r3, r7, #28
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	609a      	str	r2, [r3, #8]
 8004414:	60da      	str	r2, [r3, #12]
 8004416:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a4b      	ldr	r2, [pc, #300]	; (800454c <HAL_CAN_MspInit+0x14c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d13e      	bne.n	80044a0 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004422:	4b4b      	ldr	r3, [pc, #300]	; (8004550 <HAL_CAN_MspInit+0x150>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3301      	adds	r3, #1
 8004428:	4a49      	ldr	r2, [pc, #292]	; (8004550 <HAL_CAN_MspInit+0x150>)
 800442a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800442c:	4b48      	ldr	r3, [pc, #288]	; (8004550 <HAL_CAN_MspInit+0x150>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d10d      	bne.n	8004450 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004434:	2300      	movs	r3, #0
 8004436:	61bb      	str	r3, [r7, #24]
 8004438:	4b46      	ldr	r3, [pc, #280]	; (8004554 <HAL_CAN_MspInit+0x154>)
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	4a45      	ldr	r2, [pc, #276]	; (8004554 <HAL_CAN_MspInit+0x154>)
 800443e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004442:	6413      	str	r3, [r2, #64]	; 0x40
 8004444:	4b43      	ldr	r3, [pc, #268]	; (8004554 <HAL_CAN_MspInit+0x154>)
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	4b3f      	ldr	r3, [pc, #252]	; (8004554 <HAL_CAN_MspInit+0x154>)
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	4a3e      	ldr	r2, [pc, #248]	; (8004554 <HAL_CAN_MspInit+0x154>)
 800445a:	f043 0302 	orr.w	r3, r3, #2
 800445e:	6313      	str	r3, [r2, #48]	; 0x30
 8004460:	4b3c      	ldr	r3, [pc, #240]	; (8004554 <HAL_CAN_MspInit+0x154>)
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800446c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004472:	2302      	movs	r3, #2
 8004474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004476:	2300      	movs	r3, #0
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800447a:	2303      	movs	r3, #3
 800447c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800447e:	2309      	movs	r3, #9
 8004480:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004482:	f107 031c 	add.w	r3, r7, #28
 8004486:	4619      	mov	r1, r3
 8004488:	4833      	ldr	r0, [pc, #204]	; (8004558 <HAL_CAN_MspInit+0x158>)
 800448a:	f002 fedf 	bl	800724c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800448e:	2200      	movs	r2, #0
 8004490:	2105      	movs	r1, #5
 8004492:	2014      	movs	r0, #20
 8004494:	f002 f92c 	bl	80066f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004498:	2014      	movs	r0, #20
 800449a:	f002 f945 	bl	8006728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800449e:	e050      	b.n	8004542 <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a2d      	ldr	r2, [pc, #180]	; (800455c <HAL_CAN_MspInit+0x15c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d14b      	bne.n	8004542 <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80044aa:	2300      	movs	r3, #0
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	4b29      	ldr	r3, [pc, #164]	; (8004554 <HAL_CAN_MspInit+0x154>)
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	4a28      	ldr	r2, [pc, #160]	; (8004554 <HAL_CAN_MspInit+0x154>)
 80044b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044b8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ba:	4b26      	ldr	r3, [pc, #152]	; (8004554 <HAL_CAN_MspInit+0x154>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80044c6:	4b22      	ldr	r3, [pc, #136]	; (8004550 <HAL_CAN_MspInit+0x150>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3301      	adds	r3, #1
 80044cc:	4a20      	ldr	r2, [pc, #128]	; (8004550 <HAL_CAN_MspInit+0x150>)
 80044ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80044d0:	4b1f      	ldr	r3, [pc, #124]	; (8004550 <HAL_CAN_MspInit+0x150>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d10d      	bne.n	80044f4 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	4b1d      	ldr	r3, [pc, #116]	; (8004554 <HAL_CAN_MspInit+0x154>)
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	4a1c      	ldr	r2, [pc, #112]	; (8004554 <HAL_CAN_MspInit+0x154>)
 80044e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044e6:	6413      	str	r3, [r2, #64]	; 0x40
 80044e8:	4b1a      	ldr	r3, [pc, #104]	; (8004554 <HAL_CAN_MspInit+0x154>)
 80044ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044f4:	2300      	movs	r3, #0
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	4b16      	ldr	r3, [pc, #88]	; (8004554 <HAL_CAN_MspInit+0x154>)
 80044fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fc:	4a15      	ldr	r2, [pc, #84]	; (8004554 <HAL_CAN_MspInit+0x154>)
 80044fe:	f043 0302 	orr.w	r3, r3, #2
 8004502:	6313      	str	r3, [r2, #48]	; 0x30
 8004504:	4b13      	ldr	r3, [pc, #76]	; (8004554 <HAL_CAN_MspInit+0x154>)
 8004506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004510:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004516:	2302      	movs	r3, #2
 8004518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451a:	2300      	movs	r3, #0
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800451e:	2303      	movs	r3, #3
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004522:	2309      	movs	r3, #9
 8004524:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004526:	f107 031c 	add.w	r3, r7, #28
 800452a:	4619      	mov	r1, r3
 800452c:	480a      	ldr	r0, [pc, #40]	; (8004558 <HAL_CAN_MspInit+0x158>)
 800452e:	f002 fe8d 	bl	800724c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8004532:	2200      	movs	r2, #0
 8004534:	2105      	movs	r1, #5
 8004536:	2040      	movs	r0, #64	; 0x40
 8004538:	f002 f8da 	bl	80066f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800453c:	2040      	movs	r0, #64	; 0x40
 800453e:	f002 f8f3 	bl	8006728 <HAL_NVIC_EnableIRQ>
}
 8004542:	bf00      	nop
 8004544:	3730      	adds	r7, #48	; 0x30
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	40006400 	.word	0x40006400
 8004550:	20000174 	.word	0x20000174
 8004554:	40023800 	.word	0x40023800
 8004558:	40020400 	.word	0x40020400
 800455c:	40006800 	.word	0x40006800

08004560 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a0b      	ldr	r2, [pc, #44]	; (800459c <HAL_CRC_MspInit+0x3c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d10d      	bne.n	800458e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <HAL_CRC_MspInit+0x40>)
 8004578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457a:	4a09      	ldr	r2, [pc, #36]	; (80045a0 <HAL_CRC_MspInit+0x40>)
 800457c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004580:	6313      	str	r3, [r2, #48]	; 0x30
 8004582:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <HAL_CRC_MspInit+0x40>)
 8004584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800458e:	bf00      	nop
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40023000 	.word	0x40023000
 80045a0:	40023800 	.word	0x40023800

080045a4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a0e      	ldr	r2, [pc, #56]	; (80045ec <HAL_DMA2D_MspInit+0x48>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d115      	bne.n	80045e2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	4b0d      	ldr	r3, [pc, #52]	; (80045f0 <HAL_DMA2D_MspInit+0x4c>)
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045be:	4a0c      	ldr	r2, [pc, #48]	; (80045f0 <HAL_DMA2D_MspInit+0x4c>)
 80045c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045c4:	6313      	str	r3, [r2, #48]	; 0x30
 80045c6:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <HAL_DMA2D_MspInit+0x4c>)
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80045d2:	2200      	movs	r2, #0
 80045d4:	2105      	movs	r1, #5
 80045d6:	205a      	movs	r0, #90	; 0x5a
 80045d8:	f002 f88a 	bl	80066f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80045dc:	205a      	movs	r0, #90	; 0x5a
 80045de:	f002 f8a3 	bl	8006728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80045e2:	bf00      	nop
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	4002b000 	.word	0x4002b000
 80045f0:	40023800 	.word	0x40023800

080045f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08a      	sub	sp, #40	; 0x28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045fc:	f107 0314 	add.w	r3, r7, #20
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	605a      	str	r2, [r3, #4]
 8004606:	609a      	str	r2, [r3, #8]
 8004608:	60da      	str	r2, [r3, #12]
 800460a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a19      	ldr	r2, [pc, #100]	; (8004678 <HAL_I2C_MspInit+0x84>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d12b      	bne.n	800466e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004616:	2300      	movs	r3, #0
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	4b18      	ldr	r3, [pc, #96]	; (800467c <HAL_I2C_MspInit+0x88>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	4a17      	ldr	r2, [pc, #92]	; (800467c <HAL_I2C_MspInit+0x88>)
 8004620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004624:	6313      	str	r3, [r2, #48]	; 0x30
 8004626:	4b15      	ldr	r3, [pc, #84]	; (800467c <HAL_I2C_MspInit+0x88>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462e:	613b      	str	r3, [r7, #16]
 8004630:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004632:	2330      	movs	r3, #48	; 0x30
 8004634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004636:	2312      	movs	r3, #18
 8004638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800463a:	2301      	movs	r3, #1
 800463c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800463e:	2303      	movs	r3, #3
 8004640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004642:	2304      	movs	r3, #4
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004646:	f107 0314 	add.w	r3, r7, #20
 800464a:	4619      	mov	r1, r3
 800464c:	480c      	ldr	r0, [pc, #48]	; (8004680 <HAL_I2C_MspInit+0x8c>)
 800464e:	f002 fdfd 	bl	800724c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004652:	2300      	movs	r3, #0
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	4b09      	ldr	r3, [pc, #36]	; (800467c <HAL_I2C_MspInit+0x88>)
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	4a08      	ldr	r2, [pc, #32]	; (800467c <HAL_I2C_MspInit+0x88>)
 800465c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004660:	6413      	str	r3, [r2, #64]	; 0x40
 8004662:	4b06      	ldr	r3, [pc, #24]	; (800467c <HAL_I2C_MspInit+0x88>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800466e:	bf00      	nop
 8004670:	3728      	adds	r7, #40	; 0x28
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40005800 	.word	0x40005800
 800467c:	40023800 	.word	0x40023800
 8004680:	40021c00 	.word	0x40021c00

08004684 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b09a      	sub	sp, #104	; 0x68
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800468c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	605a      	str	r2, [r3, #4]
 8004696:	609a      	str	r2, [r3, #8]
 8004698:	60da      	str	r2, [r3, #12]
 800469a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800469c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046a0:	2230      	movs	r2, #48	; 0x30
 80046a2:	2100      	movs	r1, #0
 80046a4:	4618      	mov	r0, r3
 80046a6:	f025 fa3b 	bl	8029b20 <memset>
  if(hltdc->Instance==LTDC)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a65      	ldr	r2, [pc, #404]	; (8004844 <HAL_LTDC_MspInit+0x1c0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	f040 80c2 	bne.w	800483a <HAL_LTDC_MspInit+0x1b6>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80046b6:	2308      	movs	r3, #8
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80046ba:	2332      	movs	r3, #50	; 0x32
 80046bc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80046be:	2302      	movs	r3, #2
 80046c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80046c2:	2300      	movs	r3, #0
 80046c4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046ca:	4618      	mov	r0, r3
 80046cc:	f005 faae 	bl	8009c2c <HAL_RCCEx_PeriphCLKConfig>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80046d6:	f7ff fd93 	bl	8004200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80046da:	2300      	movs	r3, #0
 80046dc:	623b      	str	r3, [r7, #32]
 80046de:	4b5a      	ldr	r3, [pc, #360]	; (8004848 <HAL_LTDC_MspInit+0x1c4>)
 80046e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e2:	4a59      	ldr	r2, [pc, #356]	; (8004848 <HAL_LTDC_MspInit+0x1c4>)
 80046e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046e8:	6453      	str	r3, [r2, #68]	; 0x44
 80046ea:	4b57      	ldr	r3, [pc, #348]	; (8004848 <HAL_LTDC_MspInit+0x1c4>)
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046f2:	623b      	str	r3, [r7, #32]
 80046f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80046f6:	2300      	movs	r3, #0
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	4b53      	ldr	r3, [pc, #332]	; (8004848 <HAL_LTDC_MspInit+0x1c4>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	4a52      	ldr	r2, [pc, #328]	; (8004848 <HAL_LTDC_MspInit+0x1c4>)
 8004700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004704:	6313      	str	r3, [r2, #48]	; 0x30
 8004706:	4b50      	ldr	r3, [pc, #320]	; (8004848 <HAL_LTDC_MspInit+0x1c4>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470e:	61fb      	str	r3, [r7, #28]
 8004710:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004712:	2300      	movs	r3, #0
 8004714:	61bb      	str	r3, [r7, #24]
 8004716:	4b4c      	ldr	r3, [pc, #304]	; (8004848 <HAL_LTDC_MspInit+0x1c4>)
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	4a4b      	ldr	r2, [pc, #300]	; (8004848 <HAL_LTDC_MspInit+0x1c4>)
 800471c:	f043 0320 	orr.w	r3, r3, #32
 8004720:	6313      	str	r3, [r2, #48]	; 0x30
 8004722:	4b49      	ldr	r3, [pc, #292]	; (8004848 <HAL_LTDC_MspInit+0x1c4>)
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	61bb      	str	r3, [r7, #24]
 800472c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	4b45      	ldr	r3, [pc, #276]	; (8004848 <HAL_LTDC_MspInit+0x1c4>)
 8004734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004736:	4a44      	ldr	r2, [pc, #272]	; (8004848 <HAL_LTDC_MspInit+0x1c4>)
 8004738:	f043 0302 	orr.w	r3, r3, #2
 800473c:	6313      	str	r3, [r2, #48]	; 0x30
 800473e:	4b42      	ldr	r3, [pc, #264]	; (8004848 <HAL_LTDC_MspInit+0x1c4>)
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800474a:	2300      	movs	r3, #0
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	4b3e      	ldr	r3, [pc, #248]	; (8004848 <HAL_LTDC_MspInit+0x1c4>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	4a3d      	ldr	r2, [pc, #244]	; (8004848 <HAL_LTDC_MspInit+0x1c4>)
 8004754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004758:	6313      	str	r3, [r2, #48]	; 0x30
 800475a:	4b3b      	ldr	r3, [pc, #236]	; (8004848 <HAL_LTDC_MspInit+0x1c4>)
 800475c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	4b37      	ldr	r3, [pc, #220]	; (8004848 <HAL_LTDC_MspInit+0x1c4>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	4a36      	ldr	r2, [pc, #216]	; (8004848 <HAL_LTDC_MspInit+0x1c4>)
 8004770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004774:	6313      	str	r3, [r2, #48]	; 0x30
 8004776:	4b34      	ldr	r3, [pc, #208]	; (8004848 <HAL_LTDC_MspInit+0x1c4>)
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
    PI4     ------> LTDC_B4
    PI5     ------> LTDC_B5
    PI6     ------> LTDC_B6
    PI7     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_1
 8004782:	f240 63f7 	movw	r3, #1783	; 0x6f7
 8004786:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004788:	2302      	movs	r3, #2
 800478a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800478c:	2301      	movs	r3, #1
 800478e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004790:	2303      	movs	r3, #3
 8004792:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004794:	230e      	movs	r3, #14
 8004796:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004798:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800479c:	4619      	mov	r1, r3
 800479e:	482b      	ldr	r0, [pc, #172]	; (800484c <HAL_LTDC_MspInit+0x1c8>)
 80047a0:	f002 fd54 	bl	800724c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80047a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047a8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047aa:	2302      	movs	r3, #2
 80047ac:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047ae:	2301      	movs	r3, #1
 80047b0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047b2:	2303      	movs	r3, #3
 80047b4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80047b6:	230e      	movs	r3, #14
 80047b8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80047ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80047be:	4619      	mov	r1, r3
 80047c0:	4823      	ldr	r0, [pc, #140]	; (8004850 <HAL_LTDC_MspInit+0x1cc>)
 80047c2:	f002 fd43 	bl	800724c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80047c6:	2302      	movs	r3, #2
 80047c8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ca:	2302      	movs	r3, #2
 80047cc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047ce:	2301      	movs	r3, #1
 80047d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047d2:	2303      	movs	r3, #3
 80047d4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80047d6:	2309      	movs	r3, #9
 80047d8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80047de:	4619      	mov	r1, r3
 80047e0:	481c      	ldr	r0, [pc, #112]	; (8004854 <HAL_LTDC_MspInit+0x1d0>)
 80047e2:	f002 fd33 	bl	800724c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13
 80047e6:	f44f 436e 	mov.w	r3, #60928	; 0xee00
 80047ea:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ec:	2302      	movs	r3, #2
 80047ee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047f0:	2301      	movs	r3, #1
 80047f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047f4:	2303      	movs	r3, #3
 80047f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80047f8:	230e      	movs	r3, #14
 80047fa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80047fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004800:	4619      	mov	r1, r3
 8004802:	4815      	ldr	r0, [pc, #84]	; (8004858 <HAL_LTDC_MspInit+0x1d4>)
 8004804:	f002 fd22 	bl	800724c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8004808:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800480c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800480e:	2302      	movs	r3, #2
 8004810:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004812:	2301      	movs	r3, #1
 8004814:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004816:	2303      	movs	r3, #3
 8004818:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800481a:	230e      	movs	r3, #14
 800481c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800481e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004822:	4619      	mov	r1, r3
 8004824:	480d      	ldr	r0, [pc, #52]	; (800485c <HAL_LTDC_MspInit+0x1d8>)
 8004826:	f002 fd11 	bl	800724c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800482a:	2200      	movs	r2, #0
 800482c:	2105      	movs	r1, #5
 800482e:	2058      	movs	r0, #88	; 0x58
 8004830:	f001 ff5e 	bl	80066f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004834:	2058      	movs	r0, #88	; 0x58
 8004836:	f001 ff77 	bl	8006728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800483a:	bf00      	nop
 800483c:	3768      	adds	r7, #104	; 0x68
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40016800 	.word	0x40016800
 8004848:	40023800 	.word	0x40023800
 800484c:	40022000 	.word	0x40022000
 8004850:	40021400 	.word	0x40021400
 8004854:	40020400 	.word	0x40020400
 8004858:	40021c00 	.word	0x40021c00
 800485c:	40021800 	.word	0x40021800

08004860 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08a      	sub	sp, #40	; 0x28
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004868:	f107 0314 	add.w	r3, r7, #20
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	605a      	str	r2, [r3, #4]
 8004872:	609a      	str	r2, [r3, #8]
 8004874:	60da      	str	r2, [r3, #12]
 8004876:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a28      	ldr	r2, [pc, #160]	; (8004920 <HAL_SD_MspInit+0xc0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d14a      	bne.n	8004918 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004882:	2300      	movs	r3, #0
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	4b27      	ldr	r3, [pc, #156]	; (8004924 <HAL_SD_MspInit+0xc4>)
 8004888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488a:	4a26      	ldr	r2, [pc, #152]	; (8004924 <HAL_SD_MspInit+0xc4>)
 800488c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004890:	6453      	str	r3, [r2, #68]	; 0x44
 8004892:	4b24      	ldr	r3, [pc, #144]	; (8004924 <HAL_SD_MspInit+0xc4>)
 8004894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	4b20      	ldr	r3, [pc, #128]	; (8004924 <HAL_SD_MspInit+0xc4>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	4a1f      	ldr	r2, [pc, #124]	; (8004924 <HAL_SD_MspInit+0xc4>)
 80048a8:	f043 0304 	orr.w	r3, r3, #4
 80048ac:	6313      	str	r3, [r2, #48]	; 0x30
 80048ae:	4b1d      	ldr	r3, [pc, #116]	; (8004924 <HAL_SD_MspInit+0xc4>)
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	f003 0304 	and.w	r3, r3, #4
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]
 80048be:	4b19      	ldr	r3, [pc, #100]	; (8004924 <HAL_SD_MspInit+0xc4>)
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	4a18      	ldr	r2, [pc, #96]	; (8004924 <HAL_SD_MspInit+0xc4>)
 80048c4:	f043 0308 	orr.w	r3, r3, #8
 80048c8:	6313      	str	r3, [r2, #48]	; 0x30
 80048ca:	4b16      	ldr	r3, [pc, #88]	; (8004924 <HAL_SD_MspInit+0xc4>)
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	60bb      	str	r3, [r7, #8]
 80048d4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80048d6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80048da:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048dc:	2302      	movs	r3, #2
 80048de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048e0:	2301      	movs	r3, #1
 80048e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048e4:	2303      	movs	r3, #3
 80048e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80048e8:	230c      	movs	r3, #12
 80048ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048ec:	f107 0314 	add.w	r3, r7, #20
 80048f0:	4619      	mov	r1, r3
 80048f2:	480d      	ldr	r0, [pc, #52]	; (8004928 <HAL_SD_MspInit+0xc8>)
 80048f4:	f002 fcaa 	bl	800724c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80048f8:	2304      	movs	r3, #4
 80048fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048fc:	2302      	movs	r3, #2
 80048fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004900:	2301      	movs	r3, #1
 8004902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004904:	2303      	movs	r3, #3
 8004906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004908:	230c      	movs	r3, #12
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800490c:	f107 0314 	add.w	r3, r7, #20
 8004910:	4619      	mov	r1, r3
 8004912:	4806      	ldr	r0, [pc, #24]	; (800492c <HAL_SD_MspInit+0xcc>)
 8004914:	f002 fc9a 	bl	800724c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8004918:	bf00      	nop
 800491a:	3728      	adds	r7, #40	; 0x28
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40012c00 	.word	0x40012c00
 8004924:	40023800 	.word	0x40023800
 8004928:	40020800 	.word	0x40020800
 800492c:	40020c00 	.word	0x40020c00

08004930 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004940:	f040 808b 	bne.w	8004a5a <HAL_TIM_Base_MspInit+0x12a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]
 8004948:	4b4f      	ldr	r3, [pc, #316]	; (8004a88 <HAL_TIM_Base_MspInit+0x158>)
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	4a4e      	ldr	r2, [pc, #312]	; (8004a88 <HAL_TIM_Base_MspInit+0x158>)
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	6413      	str	r3, [r2, #64]	; 0x40
 8004954:	4b4c      	ldr	r3, [pc, #304]	; (8004a88 <HAL_TIM_Base_MspInit+0x158>)
 8004956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	60fb      	str	r3, [r7, #12]
 800495e:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8004960:	4b4a      	ldr	r3, [pc, #296]	; (8004a8c <HAL_TIM_Base_MspInit+0x15c>)
 8004962:	4a4b      	ldr	r2, [pc, #300]	; (8004a90 <HAL_TIM_Base_MspInit+0x160>)
 8004964:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8004966:	4b49      	ldr	r3, [pc, #292]	; (8004a8c <HAL_TIM_Base_MspInit+0x15c>)
 8004968:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800496c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800496e:	4b47      	ldr	r3, [pc, #284]	; (8004a8c <HAL_TIM_Base_MspInit+0x15c>)
 8004970:	2240      	movs	r2, #64	; 0x40
 8004972:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8004974:	4b45      	ldr	r3, [pc, #276]	; (8004a8c <HAL_TIM_Base_MspInit+0x15c>)
 8004976:	2200      	movs	r2, #0
 8004978:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800497a:	4b44      	ldr	r3, [pc, #272]	; (8004a8c <HAL_TIM_Base_MspInit+0x15c>)
 800497c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004980:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004982:	4b42      	ldr	r3, [pc, #264]	; (8004a8c <HAL_TIM_Base_MspInit+0x15c>)
 8004984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004988:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800498a:	4b40      	ldr	r3, [pc, #256]	; (8004a8c <HAL_TIM_Base_MspInit+0x15c>)
 800498c:	2200      	movs	r2, #0
 800498e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8004990:	4b3e      	ldr	r3, [pc, #248]	; (8004a8c <HAL_TIM_Base_MspInit+0x15c>)
 8004992:	2200      	movs	r2, #0
 8004994:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8004996:	4b3d      	ldr	r3, [pc, #244]	; (8004a8c <HAL_TIM_Base_MspInit+0x15c>)
 8004998:	2200      	movs	r2, #0
 800499a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800499c:	4b3b      	ldr	r3, [pc, #236]	; (8004a8c <HAL_TIM_Base_MspInit+0x15c>)
 800499e:	2204      	movs	r2, #4
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_ch2_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80049a2:	4b3a      	ldr	r3, [pc, #232]	; (8004a8c <HAL_TIM_Base_MspInit+0x15c>)
 80049a4:	2203      	movs	r2, #3
 80049a6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_ch2_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 80049a8:	4b38      	ldr	r3, [pc, #224]	; (8004a8c <HAL_TIM_Base_MspInit+0x15c>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_ch2_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80049ae:	4b37      	ldr	r3, [pc, #220]	; (8004a8c <HAL_TIM_Base_MspInit+0x15c>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80049b4:	4835      	ldr	r0, [pc, #212]	; (8004a8c <HAL_TIM_Base_MspInit+0x15c>)
 80049b6:	f001 fee1 	bl	800677c <HAL_DMA_Init>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d001      	beq.n	80049c4 <HAL_TIM_Base_MspInit+0x94>
    {
      Error_Handler();
 80049c0:	f7ff fc1e 	bl	8004200 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a31      	ldr	r2, [pc, #196]	; (8004a8c <HAL_TIM_Base_MspInit+0x15c>)
 80049c8:	629a      	str	r2, [r3, #40]	; 0x28
 80049ca:	4a30      	ldr	r2, [pc, #192]	; (8004a8c <HAL_TIM_Base_MspInit+0x15c>)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a2e      	ldr	r2, [pc, #184]	; (8004a8c <HAL_TIM_Base_MspInit+0x15c>)
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
 80049d6:	4a2d      	ldr	r2, [pc, #180]	; (8004a8c <HAL_TIM_Base_MspInit+0x15c>)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2_UP_CH3 Init */
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 80049dc:	4b2d      	ldr	r3, [pc, #180]	; (8004a94 <HAL_TIM_Base_MspInit+0x164>)
 80049de:	4a2e      	ldr	r2, [pc, #184]	; (8004a98 <HAL_TIM_Base_MspInit+0x168>)
 80049e0:	601a      	str	r2, [r3, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 80049e2:	4b2c      	ldr	r3, [pc, #176]	; (8004a94 <HAL_TIM_Base_MspInit+0x164>)
 80049e4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80049e8:	605a      	str	r2, [r3, #4]
    hdma_tim2_up_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049ea:	4b2a      	ldr	r3, [pc, #168]	; (8004a94 <HAL_TIM_Base_MspInit+0x164>)
 80049ec:	2240      	movs	r2, #64	; 0x40
 80049ee:	609a      	str	r2, [r3, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80049f0:	4b28      	ldr	r3, [pc, #160]	; (8004a94 <HAL_TIM_Base_MspInit+0x164>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	60da      	str	r2, [r3, #12]
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80049f6:	4b27      	ldr	r3, [pc, #156]	; (8004a94 <HAL_TIM_Base_MspInit+0x164>)
 80049f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049fc:	611a      	str	r2, [r3, #16]
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80049fe:	4b25      	ldr	r3, [pc, #148]	; (8004a94 <HAL_TIM_Base_MspInit+0x164>)
 8004a00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a04:	615a      	str	r2, [r3, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a06:	4b23      	ldr	r3, [pc, #140]	; (8004a94 <HAL_TIM_Base_MspInit+0x164>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	619a      	str	r2, [r3, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_NORMAL;
 8004a0c:	4b21      	ldr	r3, [pc, #132]	; (8004a94 <HAL_TIM_Base_MspInit+0x164>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	61da      	str	r2, [r3, #28]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8004a12:	4b20      	ldr	r3, [pc, #128]	; (8004a94 <HAL_TIM_Base_MspInit+0x164>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	621a      	str	r2, [r3, #32]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004a18:	4b1e      	ldr	r3, [pc, #120]	; (8004a94 <HAL_TIM_Base_MspInit+0x164>)
 8004a1a:	2204      	movs	r2, #4
 8004a1c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim2_up_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004a1e:	4b1d      	ldr	r3, [pc, #116]	; (8004a94 <HAL_TIM_Base_MspInit+0x164>)
 8004a20:	2203      	movs	r2, #3
 8004a22:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim2_up_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 8004a24:	4b1b      	ldr	r3, [pc, #108]	; (8004a94 <HAL_TIM_Base_MspInit+0x164>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim2_up_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004a2a:	4b1a      	ldr	r3, [pc, #104]	; (8004a94 <HAL_TIM_Base_MspInit+0x164>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8004a30:	4818      	ldr	r0, [pc, #96]	; (8004a94 <HAL_TIM_Base_MspInit+0x164>)
 8004a32:	f001 fea3 	bl	800677c <HAL_DMA_Init>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <HAL_TIM_Base_MspInit+0x110>
    {
      Error_Handler();
 8004a3c:	f7ff fbe0 	bl	8004200 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a14      	ldr	r2, [pc, #80]	; (8004a94 <HAL_TIM_Base_MspInit+0x164>)
 8004a44:	621a      	str	r2, [r3, #32]
 8004a46:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <HAL_TIM_Base_MspInit+0x164>)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a11      	ldr	r2, [pc, #68]	; (8004a94 <HAL_TIM_Base_MspInit+0x164>)
 8004a50:	62da      	str	r2, [r3, #44]	; 0x2c
 8004a52:	4a10      	ldr	r2, [pc, #64]	; (8004a94 <HAL_TIM_Base_MspInit+0x164>)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8004a58:	e012      	b.n	8004a80 <HAL_TIM_Base_MspInit+0x150>
  else if(htim_base->Instance==TIM13)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a0f      	ldr	r2, [pc, #60]	; (8004a9c <HAL_TIM_Base_MspInit+0x16c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d10d      	bne.n	8004a80 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004a64:	2300      	movs	r3, #0
 8004a66:	60bb      	str	r3, [r7, #8]
 8004a68:	4b07      	ldr	r3, [pc, #28]	; (8004a88 <HAL_TIM_Base_MspInit+0x158>)
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	4a06      	ldr	r2, [pc, #24]	; (8004a88 <HAL_TIM_Base_MspInit+0x158>)
 8004a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a72:	6413      	str	r3, [r2, #64]	; 0x40
 8004a74:	4b04      	ldr	r3, [pc, #16]	; (8004a88 <HAL_TIM_Base_MspInit+0x158>)
 8004a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
}
 8004a80:	bf00      	nop
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	20009c00 	.word	0x20009c00
 8004a90:	400260a0 	.word	0x400260a0
 8004a94:	20009c7c 	.word	0x20009c7c
 8004a98:	40026028 	.word	0x40026028
 8004a9c:	40001c00 	.word	0x40001c00

08004aa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08a      	sub	sp, #40	; 0x28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa8:	f107 0314 	add.w	r3, r7, #20
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	605a      	str	r2, [r3, #4]
 8004ab2:	609a      	str	r2, [r3, #8]
 8004ab4:	60da      	str	r2, [r3, #12]
 8004ab6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac0:	d11e      	bne.n	8004b00 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	4b22      	ldr	r3, [pc, #136]	; (8004b50 <HAL_TIM_MspPostInit+0xb0>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	4a21      	ldr	r2, [pc, #132]	; (8004b50 <HAL_TIM_MspPostInit+0xb0>)
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad2:	4b1f      	ldr	r3, [pc, #124]	; (8004b50 <HAL_TIM_MspPostInit+0xb0>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8004ade:	2306      	movs	r3, #6
 8004ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aea:	2300      	movs	r3, #0
 8004aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004aee:	2301      	movs	r3, #1
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004af2:	f107 0314 	add.w	r3, r7, #20
 8004af6:	4619      	mov	r1, r3
 8004af8:	4816      	ldr	r0, [pc, #88]	; (8004b54 <HAL_TIM_MspPostInit+0xb4>)
 8004afa:	f002 fba7 	bl	800724c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8004afe:	e023      	b.n	8004b48 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM13)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a14      	ldr	r2, [pc, #80]	; (8004b58 <HAL_TIM_MspPostInit+0xb8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d11e      	bne.n	8004b48 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <HAL_TIM_MspPostInit+0xb0>)
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	4a0f      	ldr	r2, [pc, #60]	; (8004b50 <HAL_TIM_MspPostInit+0xb0>)
 8004b14:	f043 0320 	orr.w	r3, r3, #32
 8004b18:	6313      	str	r3, [r2, #48]	; 0x30
 8004b1a:	4b0d      	ldr	r3, [pc, #52]	; (8004b50 <HAL_TIM_MspPostInit+0xb0>)
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004b26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b30:	2300      	movs	r3, #0
 8004b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b34:	2300      	movs	r3, #0
 8004b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8004b38:	2309      	movs	r3, #9
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004b3c:	f107 0314 	add.w	r3, r7, #20
 8004b40:	4619      	mov	r1, r3
 8004b42:	4806      	ldr	r0, [pc, #24]	; (8004b5c <HAL_TIM_MspPostInit+0xbc>)
 8004b44:	f002 fb82 	bl	800724c <HAL_GPIO_Init>
}
 8004b48:	bf00      	nop
 8004b4a:	3728      	adds	r7, #40	; 0x28
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	40023800 	.word	0x40023800
 8004b54:	40020000 	.word	0x40020000
 8004b58:	40001c00 	.word	0x40001c00
 8004b5c:	40021400 	.word	0x40021400

08004b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08a      	sub	sp, #40	; 0x28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b68:	f107 0314 	add.w	r3, r7, #20
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	605a      	str	r2, [r3, #4]
 8004b72:	609a      	str	r2, [r3, #8]
 8004b74:	60da      	str	r2, [r3, #12]
 8004b76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a19      	ldr	r2, [pc, #100]	; (8004be4 <HAL_UART_MspInit+0x84>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d12c      	bne.n	8004bdc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b82:	2300      	movs	r3, #0
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	4b18      	ldr	r3, [pc, #96]	; (8004be8 <HAL_UART_MspInit+0x88>)
 8004b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8a:	4a17      	ldr	r2, [pc, #92]	; (8004be8 <HAL_UART_MspInit+0x88>)
 8004b8c:	f043 0310 	orr.w	r3, r3, #16
 8004b90:	6453      	str	r3, [r2, #68]	; 0x44
 8004b92:	4b15      	ldr	r3, [pc, #84]	; (8004be8 <HAL_UART_MspInit+0x88>)
 8004b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	613b      	str	r3, [r7, #16]
 8004b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	4b11      	ldr	r3, [pc, #68]	; (8004be8 <HAL_UART_MspInit+0x88>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	4a10      	ldr	r2, [pc, #64]	; (8004be8 <HAL_UART_MspInit+0x88>)
 8004ba8:	f043 0301 	orr.w	r3, r3, #1
 8004bac:	6313      	str	r3, [r2, #48]	; 0x30
 8004bae:	4b0e      	ldr	r3, [pc, #56]	; (8004be8 <HAL_UART_MspInit+0x88>)
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004bba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004bcc:	2307      	movs	r3, #7
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bd0:	f107 0314 	add.w	r3, r7, #20
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4805      	ldr	r0, [pc, #20]	; (8004bec <HAL_UART_MspInit+0x8c>)
 8004bd8:	f002 fb38 	bl	800724c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004bdc:	bf00      	nop
 8004bde:	3728      	adds	r7, #40	; 0x28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40011000 	.word	0x40011000
 8004be8:	40023800 	.word	0x40023800
 8004bec:	40020000 	.word	0x40020000

08004bf0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08a      	sub	sp, #40	; 0x28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf8:	f107 0314 	add.w	r3, r7, #20
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	605a      	str	r2, [r3, #4]
 8004c02:	609a      	str	r2, [r3, #8]
 8004c04:	60da      	str	r2, [r3, #12]
 8004c06:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c10:	d132      	bne.n	8004c78 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c12:	2300      	movs	r3, #0
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	4b1a      	ldr	r3, [pc, #104]	; (8004c80 <HAL_PCD_MspInit+0x90>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	4a19      	ldr	r2, [pc, #100]	; (8004c80 <HAL_PCD_MspInit+0x90>)
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	6313      	str	r3, [r2, #48]	; 0x30
 8004c22:	4b17      	ldr	r3, [pc, #92]	; (8004c80 <HAL_PCD_MspInit+0x90>)
 8004c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004c2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c34:	2302      	movs	r3, #2
 8004c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004c40:	230a      	movs	r3, #10
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c44:	f107 0314 	add.w	r3, r7, #20
 8004c48:	4619      	mov	r1, r3
 8004c4a:	480e      	ldr	r0, [pc, #56]	; (8004c84 <HAL_PCD_MspInit+0x94>)
 8004c4c:	f002 fafe 	bl	800724c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <HAL_PCD_MspInit+0x90>)
 8004c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c54:	4a0a      	ldr	r2, [pc, #40]	; (8004c80 <HAL_PCD_MspInit+0x90>)
 8004c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5a:	6353      	str	r3, [r2, #52]	; 0x34
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <HAL_PCD_MspInit+0x90>)
 8004c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c64:	4a06      	ldr	r2, [pc, #24]	; (8004c80 <HAL_PCD_MspInit+0x90>)
 8004c66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c6a:	6453      	str	r3, [r2, #68]	; 0x44
 8004c6c:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <HAL_PCD_MspInit+0x90>)
 8004c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8004c78:	bf00      	nop
 8004c7a:	3728      	adds	r7, #40	; 0x28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40023800 	.word	0x40023800
 8004c84:	40020000 	.word	0x40020000

08004c88 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004c8e:	1d3b      	adds	r3, r7, #4
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	605a      	str	r2, [r3, #4]
 8004c96:	609a      	str	r2, [r3, #8]
 8004c98:	60da      	str	r2, [r3, #12]
 8004c9a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004c9c:	4b3f      	ldr	r3, [pc, #252]	; (8004d9c <HAL_FMC_MspInit+0x114>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d177      	bne.n	8004d94 <HAL_FMC_MspInit+0x10c>
    return;
  }
  FMC_Initialized = 1;
 8004ca4:	4b3d      	ldr	r3, [pc, #244]	; (8004d9c <HAL_FMC_MspInit+0x114>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004caa:	2300      	movs	r3, #0
 8004cac:	603b      	str	r3, [r7, #0]
 8004cae:	4b3c      	ldr	r3, [pc, #240]	; (8004da0 <HAL_FMC_MspInit+0x118>)
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb2:	4a3b      	ldr	r2, [pc, #236]	; (8004da0 <HAL_FMC_MspInit+0x118>)
 8004cb4:	f043 0301 	orr.w	r3, r3, #1
 8004cb8:	6393      	str	r3, [r2, #56]	; 0x38
 8004cba:	4b39      	ldr	r3, [pc, #228]	; (8004da0 <HAL_FMC_MspInit+0x118>)
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	603b      	str	r3, [r7, #0]
 8004cc4:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004cc6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004cca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004cd8:	230c      	movs	r3, #12
 8004cda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004cdc:	1d3b      	adds	r3, r7, #4
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4830      	ldr	r0, [pc, #192]	; (8004da4 <HAL_FMC_MspInit+0x11c>)
 8004ce2:	f002 fab3 	bl	800724c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cea:	2302      	movs	r3, #2
 8004cec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cfa:	1d3b      	adds	r3, r7, #4
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	482a      	ldr	r0, [pc, #168]	; (8004da8 <HAL_FMC_MspInit+0x120>)
 8004d00:	f002 faa4 	bl	800724c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8004d04:	f248 1337 	movw	r3, #33079	; 0x8137
 8004d08:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d12:	2303      	movs	r3, #3
 8004d14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004d16:	230c      	movs	r3, #12
 8004d18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004d1a:	1d3b      	adds	r3, r7, #4
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4823      	ldr	r0, [pc, #140]	; (8004dac <HAL_FMC_MspInit+0x124>)
 8004d20:	f002 fa94 	bl	800724c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004d24:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004d28:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d32:	2303      	movs	r3, #3
 8004d34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004d36:	230c      	movs	r3, #12
 8004d38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d3a:	1d3b      	adds	r3, r7, #4
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	481c      	ldr	r0, [pc, #112]	; (8004db0 <HAL_FMC_MspInit+0x128>)
 8004d40:	f002 fa84 	bl	800724c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004d44:	23c0      	movs	r3, #192	; 0xc0
 8004d46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d50:	2303      	movs	r3, #3
 8004d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004d54:	230c      	movs	r3, #12
 8004d56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004d58:	1d3b      	adds	r3, r7, #4
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4815      	ldr	r0, [pc, #84]	; (8004db4 <HAL_FMC_MspInit+0x12c>)
 8004d5e:	f002 fa75 	bl	800724c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8004d62:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004d66:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d70:	2303      	movs	r3, #3
 8004d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004d74:	230c      	movs	r3, #12
 8004d76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d78:	1d3b      	adds	r3, r7, #4
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	480e      	ldr	r0, [pc, #56]	; (8004db8 <HAL_FMC_MspInit+0x130>)
 8004d7e:	f002 fa65 	bl	800724c <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FMC_IRQn, 5, 0);
 8004d82:	2200      	movs	r2, #0
 8004d84:	2105      	movs	r1, #5
 8004d86:	2030      	movs	r0, #48	; 0x30
 8004d88:	f001 fcb2 	bl	80066f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FMC_IRQn);
 8004d8c:	2030      	movs	r0, #48	; 0x30
 8004d8e:	f001 fccb 	bl	8006728 <HAL_NVIC_EnableIRQ>
 8004d92:	e000      	b.n	8004d96 <HAL_FMC_MspInit+0x10e>
    return;
 8004d94:	bf00      	nop
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	20000178 	.word	0x20000178
 8004da0:	40023800 	.word	0x40023800
 8004da4:	40021400 	.word	0x40021400
 8004da8:	40020800 	.word	0x40020800
 8004dac:	40021800 	.word	0x40021800
 8004db0:	40021000 	.word	0x40021000
 8004db4:	40021c00 	.word	0x40021c00
 8004db8:	40020c00 	.word	0x40020c00

08004dbc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004dc4:	f7ff ff60 	bl	8004c88 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004dc8:	bf00      	nop
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08e      	sub	sp, #56	; 0x38
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	4b33      	ldr	r3, [pc, #204]	; (8004eb4 <HAL_InitTick+0xe4>)
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	4a32      	ldr	r2, [pc, #200]	; (8004eb4 <HAL_InitTick+0xe4>)
 8004dea:	f043 0310 	orr.w	r3, r3, #16
 8004dee:	6413      	str	r3, [r2, #64]	; 0x40
 8004df0:	4b30      	ldr	r3, [pc, #192]	; (8004eb4 <HAL_InitTick+0xe4>)
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004dfc:	f107 0210 	add.w	r2, r7, #16
 8004e00:	f107 0314 	add.w	r3, r7, #20
 8004e04:	4611      	mov	r1, r2
 8004e06:	4618      	mov	r0, r3
 8004e08:	f004 fede 	bl	8009bc8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d103      	bne.n	8004e1e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004e16:	f004 feaf 	bl	8009b78 <HAL_RCC_GetPCLK1Freq>
 8004e1a:	6378      	str	r0, [r7, #52]	; 0x34
 8004e1c:	e004      	b.n	8004e28 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004e1e:	f004 feab 	bl	8009b78 <HAL_RCC_GetPCLK1Freq>
 8004e22:	4603      	mov	r3, r0
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2a:	4a23      	ldr	r2, [pc, #140]	; (8004eb8 <HAL_InitTick+0xe8>)
 8004e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e30:	0c9b      	lsrs	r3, r3, #18
 8004e32:	3b01      	subs	r3, #1
 8004e34:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004e36:	4b21      	ldr	r3, [pc, #132]	; (8004ebc <HAL_InitTick+0xec>)
 8004e38:	4a21      	ldr	r2, [pc, #132]	; (8004ec0 <HAL_InitTick+0xf0>)
 8004e3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004e3c:	4b1f      	ldr	r3, [pc, #124]	; (8004ebc <HAL_InitTick+0xec>)
 8004e3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004e42:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004e44:	4a1d      	ldr	r2, [pc, #116]	; (8004ebc <HAL_InitTick+0xec>)
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004e4a:	4b1c      	ldr	r3, [pc, #112]	; (8004ebc <HAL_InitTick+0xec>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e50:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <HAL_InitTick+0xec>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e56:	4b19      	ldr	r3, [pc, #100]	; (8004ebc <HAL_InitTick+0xec>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004e5c:	4817      	ldr	r0, [pc, #92]	; (8004ebc <HAL_InitTick+0xec>)
 8004e5e:	f006 f9cb 	bl	800b1f8 <HAL_TIM_Base_Init>
 8004e62:	4603      	mov	r3, r0
 8004e64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004e68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d11b      	bne.n	8004ea8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004e70:	4812      	ldr	r0, [pc, #72]	; (8004ebc <HAL_InitTick+0xec>)
 8004e72:	f006 fa11 	bl	800b298 <HAL_TIM_Base_Start_IT>
 8004e76:	4603      	mov	r3, r0
 8004e78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004e7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d111      	bne.n	8004ea8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004e84:	2036      	movs	r0, #54	; 0x36
 8004e86:	f001 fc4f 	bl	8006728 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b0f      	cmp	r3, #15
 8004e8e:	d808      	bhi.n	8004ea2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004e90:	2200      	movs	r2, #0
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	2036      	movs	r0, #54	; 0x36
 8004e96:	f001 fc2b 	bl	80066f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e9a:	4a0a      	ldr	r2, [pc, #40]	; (8004ec4 <HAL_InitTick+0xf4>)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	e002      	b.n	8004ea8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004ea8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3738      	adds	r7, #56	; 0x38
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	431bde83 	.word	0x431bde83
 8004ebc:	2000a800 	.word	0x2000a800
 8004ec0:	40001000 	.word	0x40001000
 8004ec4:	2000000c 	.word	0x2000000c

08004ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ecc:	e7fe      	b.n	8004ecc <NMI_Handler+0x4>

08004ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ed2:	e7fe      	b.n	8004ed2 <HardFault_Handler+0x4>

08004ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ed8:	e7fe      	b.n	8004ed8 <MemManage_Handler+0x4>

08004eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004eda:	b480      	push	{r7}
 8004edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ede:	e7fe      	b.n	8004ede <BusFault_Handler+0x4>

08004ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ee4:	e7fe      	b.n	8004ee4 <UsageFault_Handler+0x4>

08004ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004eea:	bf00      	nop
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
	DMA_Callback();
 8004ef8:	f7fc f88c 	bl	8001014 <DMA_Callback>
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8004efc:	4802      	ldr	r0, [pc, #8]	; (8004f08 <DMA1_Stream1_IRQHandler+0x14>)
 8004efe:	f001 fd43 	bl	8006988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004f02:	bf00      	nop
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20009c7c 	.word	0x20009c7c

08004f0c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
	DMA_Callback();
 8004f10:	f7fc f880 	bl	8001014 <DMA_Callback>
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8004f14:	4802      	ldr	r0, [pc, #8]	; (8004f20 <DMA1_Stream6_IRQHandler+0x14>)
 8004f16:	f001 fd37 	bl	8006988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004f1a:	bf00      	nop
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20009c00 	.word	0x20009c00

08004f24 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004f28:	4802      	ldr	r0, [pc, #8]	; (8004f34 <CAN1_RX0_IRQHandler+0x10>)
 8004f2a:	f001 f8f0 	bl	800610e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004f2e:	bf00      	nop
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	2000a768 	.word	0x2000a768

08004f38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_EN_Pin);
 8004f3c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004f40:	f002 fb7c 	bl	800763c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004f44:	bf00      	nop
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <FMC_IRQHandler>:

/**
  * @brief This function handles FMC global interrupt.
  */
void FMC_IRQHandler(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_IRQn 0 */

  /* USER CODE END FMC_IRQn 0 */
  HAL_SDRAM_IRQHandler(&hsdram1);
 8004f4c:	4802      	ldr	r0, [pc, #8]	; (8004f58 <FMC_IRQHandler+0x10>)
 8004f4e:	f006 f8fa 	bl	800b146 <HAL_SDRAM_IRQHandler>
  /* USER CODE BEGIN FMC_IRQn 1 */

  /* USER CODE END FMC_IRQn 1 */
}
 8004f52:	bf00      	nop
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	2000a7a8 	.word	0x2000a7a8

08004f5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004f60:	4802      	ldr	r0, [pc, #8]	; (8004f6c <TIM6_DAC_IRQHandler+0x10>)
 8004f62:	f006 fcf3 	bl	800b94c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004f66:	bf00      	nop
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	2000a800 	.word	0x2000a800

08004f70 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004f74:	4802      	ldr	r0, [pc, #8]	; (8004f80 <CAN2_RX0_IRQHandler+0x10>)
 8004f76:	f001 f8ca 	bl	800610e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004f7a:	bf00      	nop
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20009dcc 	.word	0x20009dcc

08004f84 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004f88:	4802      	ldr	r0, [pc, #8]	; (8004f94 <LTDC_IRQHandler+0x10>)
 8004f8a:	f003 fd97 	bl	8008abc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004f8e:	bf00      	nop
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20009cdc 	.word	0x20009cdc

08004f98 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004f9c:	4802      	ldr	r0, [pc, #8]	; (8004fa8 <DMA2D_IRQHandler+0x10>)
 8004f9e:	f001 ffb2 	bl	8006f06 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004fa2:	bf00      	nop
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	2000a720 	.word	0x2000a720

08004fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fac:	b480      	push	{r7}
 8004fae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fb0:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <SystemInit+0x20>)
 8004fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb6:	4a05      	ldr	r2, [pc, #20]	; (8004fcc <SystemInit+0x20>)
 8004fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004fc0:	bf00      	nop
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	e000ed00 	.word	0xe000ed00

08004fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005008 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004fd4:	480d      	ldr	r0, [pc, #52]	; (800500c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004fd6:	490e      	ldr	r1, [pc, #56]	; (8005010 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004fd8:	4a0e      	ldr	r2, [pc, #56]	; (8005014 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fdc:	e002      	b.n	8004fe4 <LoopCopyDataInit>

08004fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fe2:	3304      	adds	r3, #4

08004fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fe8:	d3f9      	bcc.n	8004fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fea:	4a0b      	ldr	r2, [pc, #44]	; (8005018 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004fec:	4c0b      	ldr	r4, [pc, #44]	; (800501c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ff0:	e001      	b.n	8004ff6 <LoopFillZerobss>

08004ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ff4:	3204      	adds	r2, #4

08004ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ff8:	d3fb      	bcc.n	8004ff2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004ffa:	f7ff ffd7 	bl	8004fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ffe:	f024 fd49 	bl	8029a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005002:	f7fc ffaf 	bl	8001f64 <main>
  bx  lr    
 8005006:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005008:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800500c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005010:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8005014:	0804a760 	.word	0x0804a760
  ldr r2, =_sbss
 8005018:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 800501c:	2000acf8 	.word	0x2000acf8

08005020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005020:	e7fe      	b.n	8005020 <ADC_IRQHandler>
	...

08005024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005028:	4b0e      	ldr	r3, [pc, #56]	; (8005064 <HAL_Init+0x40>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a0d      	ldr	r2, [pc, #52]	; (8005064 <HAL_Init+0x40>)
 800502e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005034:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <HAL_Init+0x40>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a0a      	ldr	r2, [pc, #40]	; (8005064 <HAL_Init+0x40>)
 800503a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800503e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005040:	4b08      	ldr	r3, [pc, #32]	; (8005064 <HAL_Init+0x40>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a07      	ldr	r2, [pc, #28]	; (8005064 <HAL_Init+0x40>)
 8005046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800504a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800504c:	2003      	movs	r0, #3
 800504e:	f001 fb44 	bl	80066da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005052:	200f      	movs	r0, #15
 8005054:	f7ff febc 	bl	8004dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005058:	f7ff f962 	bl	8004320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	40023c00 	.word	0x40023c00

08005068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800506c:	4b06      	ldr	r3, [pc, #24]	; (8005088 <HAL_IncTick+0x20>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	4b06      	ldr	r3, [pc, #24]	; (800508c <HAL_IncTick+0x24>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4413      	add	r3, r2
 8005078:	4a04      	ldr	r2, [pc, #16]	; (800508c <HAL_IncTick+0x24>)
 800507a:	6013      	str	r3, [r2, #0]
}
 800507c:	bf00      	nop
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	20000010 	.word	0x20000010
 800508c:	2000a848 	.word	0x2000a848

08005090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
  return uwTick;
 8005094:	4b03      	ldr	r3, [pc, #12]	; (80050a4 <HAL_GetTick+0x14>)
 8005096:	681b      	ldr	r3, [r3, #0]
}
 8005098:	4618      	mov	r0, r3
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	2000a848 	.word	0x2000a848

080050a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050b0:	f7ff ffee 	bl	8005090 <HAL_GetTick>
 80050b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c0:	d005      	beq.n	80050ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050c2:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <HAL_Delay+0x44>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80050ce:	bf00      	nop
 80050d0:	f7ff ffde 	bl	8005090 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d8f7      	bhi.n	80050d0 <HAL_Delay+0x28>
  {
  }
}
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	20000010 	.word	0x20000010

080050f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e033      	b.n	800516e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	d109      	bne.n	8005122 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff f932 	bl	8004378 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f003 0310 	and.w	r3, r3, #16
 800512a:	2b00      	cmp	r3, #0
 800512c:	d118      	bne.n	8005160 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005136:	f023 0302 	bic.w	r3, r3, #2
 800513a:	f043 0202 	orr.w	r2, r3, #2
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fada 	bl	80056fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	f023 0303 	bic.w	r3, r3, #3
 8005156:	f043 0201 	orr.w	r2, r3, #1
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	641a      	str	r2, [r3, #64]	; 0x40
 800515e:	e001      	b.n	8005164 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800516c:	7bfb      	ldrb	r3, [r7, #15]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
	...

08005178 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800518a:	2b01      	cmp	r3, #1
 800518c:	d101      	bne.n	8005192 <HAL_ADC_Start+0x1a>
 800518e:	2302      	movs	r3, #2
 8005190:	e0b2      	b.n	80052f8 <HAL_ADC_Start+0x180>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d018      	beq.n	80051da <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80051b8:	4b52      	ldr	r3, [pc, #328]	; (8005304 <HAL_ADC_Start+0x18c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a52      	ldr	r2, [pc, #328]	; (8005308 <HAL_ADC_Start+0x190>)
 80051be:	fba2 2303 	umull	r2, r3, r2, r3
 80051c2:	0c9a      	lsrs	r2, r3, #18
 80051c4:	4613      	mov	r3, r2
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	4413      	add	r3, r2
 80051ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80051cc:	e002      	b.n	80051d4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f9      	bne.n	80051ce <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d17a      	bne.n	80052de <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80051f0:	f023 0301 	bic.w	r3, r3, #1
 80051f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005206:	2b00      	cmp	r3, #0
 8005208:	d007      	beq.n	800521a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005212:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005226:	d106      	bne.n	8005236 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522c:	f023 0206 	bic.w	r2, r3, #6
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	645a      	str	r2, [r3, #68]	; 0x44
 8005234:	e002      	b.n	800523c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005244:	4b31      	ldr	r3, [pc, #196]	; (800530c <HAL_ADC_Start+0x194>)
 8005246:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005250:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f003 031f 	and.w	r3, r3, #31
 800525a:	2b00      	cmp	r3, #0
 800525c:	d12a      	bne.n	80052b4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a2b      	ldr	r2, [pc, #172]	; (8005310 <HAL_ADC_Start+0x198>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d015      	beq.n	8005294 <HAL_ADC_Start+0x11c>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a29      	ldr	r2, [pc, #164]	; (8005314 <HAL_ADC_Start+0x19c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d105      	bne.n	800527e <HAL_ADC_Start+0x106>
 8005272:	4b26      	ldr	r3, [pc, #152]	; (800530c <HAL_ADC_Start+0x194>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f003 031f 	and.w	r3, r3, #31
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a25      	ldr	r2, [pc, #148]	; (8005318 <HAL_ADC_Start+0x1a0>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d136      	bne.n	80052f6 <HAL_ADC_Start+0x17e>
 8005288:	4b20      	ldr	r3, [pc, #128]	; (800530c <HAL_ADC_Start+0x194>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	2b00      	cmp	r3, #0
 8005292:	d130      	bne.n	80052f6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d129      	bne.n	80052f6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80052b0:	609a      	str	r2, [r3, #8]
 80052b2:	e020      	b.n	80052f6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a15      	ldr	r2, [pc, #84]	; (8005310 <HAL_ADC_Start+0x198>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d11b      	bne.n	80052f6 <HAL_ADC_Start+0x17e>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d114      	bne.n	80052f6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80052da:	609a      	str	r2, [r3, #8]
 80052dc:	e00b      	b.n	80052f6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	f043 0210 	orr.w	r2, r3, #16
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ee:	f043 0201 	orr.w	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	20000008 	.word	0x20000008
 8005308:	431bde83 	.word	0x431bde83
 800530c:	40012300 	.word	0x40012300
 8005310:	40012000 	.word	0x40012000
 8005314:	40012100 	.word	0x40012100
 8005318:	40012200 	.word	0x40012200

0800531c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_ADC_Stop+0x16>
 800532e:	2302      	movs	r3, #2
 8005330:	e021      	b.n	8005376 <HAL_ADC_Stop+0x5a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0201 	bic.w	r2, r2, #1
 8005348:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	d109      	bne.n	800536c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005360:	f023 0301 	bic.w	r3, r3, #1
 8005364:	f043 0201 	orr.w	r2, r3, #1
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800539a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800539e:	d113      	bne.n	80053c8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80053aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ae:	d10b      	bne.n	80053c8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	f043 0220 	orr.w	r2, r3, #32
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e063      	b.n	8005490 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80053c8:	f7ff fe62 	bl	8005090 <HAL_GetTick>
 80053cc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80053ce:	e021      	b.n	8005414 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d6:	d01d      	beq.n	8005414 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <HAL_ADC_PollForConversion+0x6c>
 80053de:	f7ff fe57 	bl	8005090 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d212      	bcs.n	8005414 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d00b      	beq.n	8005414 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	f043 0204 	orr.w	r2, r3, #4
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e03d      	b.n	8005490 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b02      	cmp	r3, #2
 8005420:	d1d6      	bne.n	80053d0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f06f 0212 	mvn.w	r2, #18
 800542a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d123      	bne.n	800548e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800544a:	2b00      	cmp	r3, #0
 800544c:	d11f      	bne.n	800548e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005458:	2b00      	cmp	r3, #0
 800545a:	d006      	beq.n	800546a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005466:	2b00      	cmp	r3, #0
 8005468:	d111      	bne.n	800548e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d105      	bne.n	800548e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	f043 0201 	orr.w	r2, r3, #1
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d101      	bne.n	80054b4 <HAL_ADC_ConfigChannel+0x1c>
 80054b0:	2302      	movs	r3, #2
 80054b2:	e113      	b.n	80056dc <HAL_ADC_ConfigChannel+0x244>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b09      	cmp	r3, #9
 80054c2:	d925      	bls.n	8005510 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68d9      	ldr	r1, [r3, #12]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	4613      	mov	r3, r2
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	4413      	add	r3, r2
 80054d8:	3b1e      	subs	r3, #30
 80054da:	2207      	movs	r2, #7
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	43da      	mvns	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	400a      	ands	r2, r1
 80054e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68d9      	ldr	r1, [r3, #12]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	4618      	mov	r0, r3
 80054fc:	4603      	mov	r3, r0
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	4403      	add	r3, r0
 8005502:	3b1e      	subs	r3, #30
 8005504:	409a      	lsls	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	60da      	str	r2, [r3, #12]
 800550e:	e022      	b.n	8005556 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6919      	ldr	r1, [r3, #16]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	b29b      	uxth	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	4613      	mov	r3, r2
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	4413      	add	r3, r2
 8005524:	2207      	movs	r2, #7
 8005526:	fa02 f303 	lsl.w	r3, r2, r3
 800552a:	43da      	mvns	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	400a      	ands	r2, r1
 8005532:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6919      	ldr	r1, [r3, #16]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	b29b      	uxth	r3, r3
 8005544:	4618      	mov	r0, r3
 8005546:	4603      	mov	r3, r0
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	4403      	add	r3, r0
 800554c:	409a      	lsls	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	2b06      	cmp	r3, #6
 800555c:	d824      	bhi.n	80055a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	3b05      	subs	r3, #5
 8005570:	221f      	movs	r2, #31
 8005572:	fa02 f303 	lsl.w	r3, r2, r3
 8005576:	43da      	mvns	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	400a      	ands	r2, r1
 800557e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	b29b      	uxth	r3, r3
 800558c:	4618      	mov	r0, r3
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	685a      	ldr	r2, [r3, #4]
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	3b05      	subs	r3, #5
 800559a:	fa00 f203 	lsl.w	r2, r0, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	635a      	str	r2, [r3, #52]	; 0x34
 80055a6:	e04c      	b.n	8005642 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b0c      	cmp	r3, #12
 80055ae:	d824      	bhi.n	80055fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	3b23      	subs	r3, #35	; 0x23
 80055c2:	221f      	movs	r2, #31
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	43da      	mvns	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	400a      	ands	r2, r1
 80055d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	4618      	mov	r0, r3
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	4613      	mov	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	3b23      	subs	r3, #35	; 0x23
 80055ec:	fa00 f203 	lsl.w	r2, r0, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	631a      	str	r2, [r3, #48]	; 0x30
 80055f8:	e023      	b.n	8005642 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	4613      	mov	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	3b41      	subs	r3, #65	; 0x41
 800560c:	221f      	movs	r2, #31
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	43da      	mvns	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	400a      	ands	r2, r1
 800561a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	b29b      	uxth	r3, r3
 8005628:	4618      	mov	r0, r3
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	3b41      	subs	r3, #65	; 0x41
 8005636:	fa00 f203 	lsl.w	r2, r0, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005642:	4b29      	ldr	r3, [pc, #164]	; (80056e8 <HAL_ADC_ConfigChannel+0x250>)
 8005644:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a28      	ldr	r2, [pc, #160]	; (80056ec <HAL_ADC_ConfigChannel+0x254>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d10f      	bne.n	8005670 <HAL_ADC_ConfigChannel+0x1d8>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b12      	cmp	r3, #18
 8005656:	d10b      	bne.n	8005670 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a1d      	ldr	r2, [pc, #116]	; (80056ec <HAL_ADC_ConfigChannel+0x254>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d12b      	bne.n	80056d2 <HAL_ADC_ConfigChannel+0x23a>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a1c      	ldr	r2, [pc, #112]	; (80056f0 <HAL_ADC_ConfigChannel+0x258>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d003      	beq.n	800568c <HAL_ADC_ConfigChannel+0x1f4>
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b11      	cmp	r3, #17
 800568a:	d122      	bne.n	80056d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a11      	ldr	r2, [pc, #68]	; (80056f0 <HAL_ADC_ConfigChannel+0x258>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d111      	bne.n	80056d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80056ae:	4b11      	ldr	r3, [pc, #68]	; (80056f4 <HAL_ADC_ConfigChannel+0x25c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a11      	ldr	r2, [pc, #68]	; (80056f8 <HAL_ADC_ConfigChannel+0x260>)
 80056b4:	fba2 2303 	umull	r2, r3, r2, r3
 80056b8:	0c9a      	lsrs	r2, r3, #18
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80056c4:	e002      	b.n	80056cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f9      	bne.n	80056c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	40012300 	.word	0x40012300
 80056ec:	40012000 	.word	0x40012000
 80056f0:	10000012 	.word	0x10000012
 80056f4:	20000008 	.word	0x20000008
 80056f8:	431bde83 	.word	0x431bde83

080056fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005704:	4b79      	ldr	r3, [pc, #484]	; (80058ec <ADC_Init+0x1f0>)
 8005706:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	431a      	orrs	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005730:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6859      	ldr	r1, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	021a      	lsls	r2, r3, #8
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005754:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6859      	ldr	r1, [r3, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689a      	ldr	r2, [r3, #8]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689a      	ldr	r2, [r3, #8]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005776:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6899      	ldr	r1, [r3, #8]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578e:	4a58      	ldr	r2, [pc, #352]	; (80058f0 <ADC_Init+0x1f4>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d022      	beq.n	80057da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6899      	ldr	r1, [r3, #8]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689a      	ldr	r2, [r3, #8]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80057c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6899      	ldr	r1, [r3, #8]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	609a      	str	r2, [r3, #8]
 80057d8:	e00f      	b.n	80057fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80057f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0202 	bic.w	r2, r2, #2
 8005808:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6899      	ldr	r1, [r3, #8]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	7e1b      	ldrb	r3, [r3, #24]
 8005814:	005a      	lsls	r2, r3, #1
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d01b      	beq.n	8005860 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005836:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005846:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6859      	ldr	r1, [r3, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	3b01      	subs	r3, #1
 8005854:	035a      	lsls	r2, r3, #13
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	605a      	str	r2, [r3, #4]
 800585e:	e007      	b.n	8005870 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800586e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800587e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	3b01      	subs	r3, #1
 800588c:	051a      	lsls	r2, r3, #20
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80058a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6899      	ldr	r1, [r3, #8]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058b2:	025a      	lsls	r2, r3, #9
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6899      	ldr	r1, [r3, #8]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	029a      	lsls	r2, r3, #10
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	430a      	orrs	r2, r1
 80058de:	609a      	str	r2, [r3, #8]
}
 80058e0:	bf00      	nop
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr
 80058ec:	40012300 	.word	0x40012300
 80058f0:	0f000001 	.word	0x0f000001

080058f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e0ed      	b.n	8005ae2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d102      	bne.n	8005918 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7fe fd74 	bl	8004400 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0201 	orr.w	r2, r2, #1
 8005926:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005928:	f7ff fbb2 	bl	8005090 <HAL_GetTick>
 800592c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800592e:	e012      	b.n	8005956 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005930:	f7ff fbae 	bl	8005090 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b0a      	cmp	r3, #10
 800593c:	d90b      	bls.n	8005956 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2205      	movs	r2, #5
 800594e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e0c5      	b.n	8005ae2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0e5      	beq.n	8005930 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0202 	bic.w	r2, r2, #2
 8005972:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005974:	f7ff fb8c 	bl	8005090 <HAL_GetTick>
 8005978:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800597a:	e012      	b.n	80059a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800597c:	f7ff fb88 	bl	8005090 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b0a      	cmp	r3, #10
 8005988:	d90b      	bls.n	80059a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2205      	movs	r2, #5
 800599a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e09f      	b.n	8005ae2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e5      	bne.n	800597c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	7e1b      	ldrb	r3, [r3, #24]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d108      	bne.n	80059ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	e007      	b.n	80059da <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	7e5b      	ldrb	r3, [r3, #25]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d108      	bne.n	80059f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	e007      	b.n	8005a04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	7e9b      	ldrb	r3, [r3, #26]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d108      	bne.n	8005a1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f042 0220 	orr.w	r2, r2, #32
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	e007      	b.n	8005a2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 0220 	bic.w	r2, r2, #32
 8005a2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	7edb      	ldrb	r3, [r3, #27]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d108      	bne.n	8005a48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0210 	bic.w	r2, r2, #16
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	e007      	b.n	8005a58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0210 	orr.w	r2, r2, #16
 8005a56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	7f1b      	ldrb	r3, [r3, #28]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d108      	bne.n	8005a72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0208 	orr.w	r2, r2, #8
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	e007      	b.n	8005a82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0208 	bic.w	r2, r2, #8
 8005a80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	7f5b      	ldrb	r3, [r3, #29]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d108      	bne.n	8005a9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f042 0204 	orr.w	r2, r2, #4
 8005a98:	601a      	str	r2, [r3, #0]
 8005a9a:	e007      	b.n	8005aac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0204 	bic.w	r2, r2, #4
 8005aaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	431a      	orrs	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	ea42 0103 	orr.w	r1, r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	1e5a      	subs	r2, r3, #1
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
	...

08005aec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b02:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005b04:	7cfb      	ldrb	r3, [r7, #19]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d003      	beq.n	8005b12 <HAL_CAN_ConfigFilter+0x26>
 8005b0a:	7cfb      	ldrb	r3, [r7, #19]
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	f040 80be 	bne.w	8005c8e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005b12:	4b65      	ldr	r3, [pc, #404]	; (8005ca8 <HAL_CAN_ConfigFilter+0x1bc>)
 8005b14:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b1c:	f043 0201 	orr.w	r2, r3, #1
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b2c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	021b      	lsls	r3, r3, #8
 8005b42:	431a      	orrs	r2, r3
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	f003 031f 	and.w	r3, r3, #31
 8005b52:	2201      	movs	r2, #1
 8005b54:	fa02 f303 	lsl.w	r3, r2, r3
 8005b58:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	43db      	mvns	r3, r3
 8005b64:	401a      	ands	r2, r3
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d123      	bne.n	8005bbc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	401a      	ands	r2, r3
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005b96:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	3248      	adds	r2, #72	; 0x48
 8005b9c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005bb0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005bb2:	6979      	ldr	r1, [r7, #20]
 8005bb4:	3348      	adds	r3, #72	; 0x48
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	440b      	add	r3, r1
 8005bba:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d122      	bne.n	8005c0a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	431a      	orrs	r2, r3
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005be4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	3248      	adds	r2, #72	; 0x48
 8005bea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005bfe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005c00:	6979      	ldr	r1, [r7, #20]
 8005c02:	3348      	adds	r3, #72	; 0x48
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	440b      	add	r3, r1
 8005c08:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	43db      	mvns	r3, r3
 8005c1c:	401a      	ands	r2, r3
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005c24:	e007      	b.n	8005c36 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d109      	bne.n	8005c52 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	43db      	mvns	r3, r3
 8005c48:	401a      	ands	r2, r3
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005c50:	e007      	b.n	8005c62 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d107      	bne.n	8005c7a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	431a      	orrs	r2, r3
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c80:	f023 0201 	bic.w	r2, r3, #1
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e006      	b.n	8005c9c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
  }
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	40006400 	.word	0x40006400

08005cac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d12e      	bne.n	8005d1e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0201 	bic.w	r2, r2, #1
 8005cd6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cd8:	f7ff f9da 	bl	8005090 <HAL_GetTick>
 8005cdc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005cde:	e012      	b.n	8005d06 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005ce0:	f7ff f9d6 	bl	8005090 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b0a      	cmp	r3, #10
 8005cec:	d90b      	bls.n	8005d06 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2205      	movs	r2, #5
 8005cfe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e012      	b.n	8005d2c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1e5      	bne.n	8005ce0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e006      	b.n	8005d2c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
  }
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b089      	sub	sp, #36	; 0x24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
 8005d40:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d48:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005d52:	7ffb      	ldrb	r3, [r7, #31]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d003      	beq.n	8005d60 <HAL_CAN_AddTxMessage+0x2c>
 8005d58:	7ffb      	ldrb	r3, [r7, #31]
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	f040 80b8 	bne.w	8005ed0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10a      	bne.n	8005d80 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d105      	bne.n	8005d80 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 80a0 	beq.w	8005ec0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	0e1b      	lsrs	r3, r3, #24
 8005d84:	f003 0303 	and.w	r3, r3, #3
 8005d88:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d907      	bls.n	8005da0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d94:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e09e      	b.n	8005ede <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005da0:	2201      	movs	r2, #1
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	409a      	lsls	r2, r3
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10d      	bne.n	8005dce <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005dbc:	68f9      	ldr	r1, [r7, #12]
 8005dbe:	6809      	ldr	r1, [r1, #0]
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	3318      	adds	r3, #24
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	440b      	add	r3, r1
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	e00f      	b.n	8005dee <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005dd8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005dde:	68f9      	ldr	r1, [r7, #12]
 8005de0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005de2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	3318      	adds	r3, #24
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	440b      	add	r3, r1
 8005dec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6819      	ldr	r1, [r3, #0]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	691a      	ldr	r2, [r3, #16]
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	3318      	adds	r3, #24
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	440b      	add	r3, r1
 8005dfe:	3304      	adds	r3, #4
 8005e00:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	7d1b      	ldrb	r3, [r3, #20]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d111      	bne.n	8005e2e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	3318      	adds	r3, #24
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	4413      	add	r3, r2
 8005e16:	3304      	adds	r3, #4
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	6811      	ldr	r1, [r2, #0]
 8005e1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	3318      	adds	r3, #24
 8005e26:	011b      	lsls	r3, r3, #4
 8005e28:	440b      	add	r3, r1
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3307      	adds	r3, #7
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	061a      	lsls	r2, r3, #24
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3306      	adds	r3, #6
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	041b      	lsls	r3, r3, #16
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3305      	adds	r3, #5
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	021b      	lsls	r3, r3, #8
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	3204      	adds	r2, #4
 8005e4e:	7812      	ldrb	r2, [r2, #0]
 8005e50:	4610      	mov	r0, r2
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	6811      	ldr	r1, [r2, #0]
 8005e56:	ea43 0200 	orr.w	r2, r3, r0
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	011b      	lsls	r3, r3, #4
 8005e5e:	440b      	add	r3, r1
 8005e60:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005e64:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	3303      	adds	r3, #3
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	061a      	lsls	r2, r3, #24
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	3302      	adds	r3, #2
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	041b      	lsls	r3, r3, #16
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	021b      	lsls	r3, r3, #8
 8005e80:	4313      	orrs	r3, r2
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	7812      	ldrb	r2, [r2, #0]
 8005e86:	4610      	mov	r0, r2
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	6811      	ldr	r1, [r2, #0]
 8005e8c:	ea43 0200 	orr.w	r2, r3, r0
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	440b      	add	r3, r1
 8005e96:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005e9a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	3318      	adds	r3, #24
 8005ea4:	011b      	lsls	r3, r3, #4
 8005ea6:	4413      	add	r3, r2
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	6811      	ldr	r1, [r2, #0]
 8005eae:	f043 0201 	orr.w	r2, r3, #1
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	3318      	adds	r3, #24
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	440b      	add	r3, r1
 8005eba:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	e00e      	b.n	8005ede <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e006      	b.n	8005ede <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
  }
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3724      	adds	r7, #36	; 0x24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005eea:	b480      	push	{r7}
 8005eec:	b087      	sub	sp, #28
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	607a      	str	r2, [r7, #4]
 8005ef6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005efe:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005f00:	7dfb      	ldrb	r3, [r7, #23]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d003      	beq.n	8005f0e <HAL_CAN_GetRxMessage+0x24>
 8005f06:	7dfb      	ldrb	r3, [r7, #23]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	f040 80f3 	bne.w	80060f4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10e      	bne.n	8005f32 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d116      	bne.n	8005f50 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e0e7      	b.n	8006102 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	f003 0303 	and.w	r3, r3, #3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d107      	bne.n	8005f50 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e0d8      	b.n	8006102 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	331b      	adds	r3, #27
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	4413      	add	r3, r2
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0204 	and.w	r2, r3, #4
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10c      	bne.n	8005f88 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	331b      	adds	r3, #27
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	4413      	add	r3, r2
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	0d5b      	lsrs	r3, r3, #21
 8005f7e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	e00b      	b.n	8005fa0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	331b      	adds	r3, #27
 8005f90:	011b      	lsls	r3, r3, #4
 8005f92:	4413      	add	r3, r2
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	08db      	lsrs	r3, r3, #3
 8005f98:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	331b      	adds	r3, #27
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	4413      	add	r3, r2
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0202 	and.w	r2, r3, #2
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	331b      	adds	r3, #27
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	4413      	add	r3, r2
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 020f 	and.w	r2, r3, #15
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	331b      	adds	r3, #27
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	4413      	add	r3, r2
 8005fda:	3304      	adds	r3, #4
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	0a1b      	lsrs	r3, r3, #8
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	331b      	adds	r3, #27
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	4413      	add	r3, r2
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	0c1b      	lsrs	r3, r3, #16
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	4413      	add	r3, r2
 8006008:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	b2da      	uxtb	r2, r3
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	4413      	add	r3, r2
 800601e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	0a1a      	lsrs	r2, r3, #8
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	3301      	adds	r3, #1
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	4413      	add	r3, r2
 8006038:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	0c1a      	lsrs	r2, r3, #16
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	3302      	adds	r3, #2
 8006044:	b2d2      	uxtb	r2, r2
 8006046:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	4413      	add	r3, r2
 8006052:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	0e1a      	lsrs	r2, r3, #24
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	3303      	adds	r3, #3
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	4413      	add	r3, r2
 800606c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	3304      	adds	r3, #4
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	4413      	add	r3, r2
 8006084:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	0a1a      	lsrs	r2, r3, #8
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	3305      	adds	r3, #5
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	011b      	lsls	r3, r3, #4
 800609c:	4413      	add	r3, r2
 800609e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	0c1a      	lsrs	r2, r3, #16
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	3306      	adds	r3, #6
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	0e1a      	lsrs	r2, r3, #24
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	3307      	adds	r3, #7
 80060c4:	b2d2      	uxtb	r2, r2
 80060c6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d108      	bne.n	80060e0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f042 0220 	orr.w	r2, r2, #32
 80060dc:	60da      	str	r2, [r3, #12]
 80060de:	e007      	b.n	80060f0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691a      	ldr	r2, [r3, #16]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f042 0220 	orr.w	r2, r2, #32
 80060ee:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80060f0:	2300      	movs	r3, #0
 80060f2:	e006      	b.n	8006102 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
  }
}
 8006102:	4618      	mov	r0, r3
 8006104:	371c      	adds	r7, #28
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b08a      	sub	sp, #40	; 0x28
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006116:	2300      	movs	r3, #0
 8006118:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d07c      	beq.n	800624e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d023      	beq.n	80061a6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2201      	movs	r2, #1
 8006164:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f983 	bl	800647c <HAL_CAN_TxMailbox0CompleteCallback>
 8006176:	e016      	b.n	80061a6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	2b00      	cmp	r3, #0
 8006180:	d004      	beq.n	800618c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006188:	627b      	str	r3, [r7, #36]	; 0x24
 800618a:	e00c      	b.n	80061a6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	f003 0308 	and.w	r3, r3, #8
 8006192:	2b00      	cmp	r3, #0
 8006194:	d004      	beq.n	80061a0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800619c:	627b      	str	r3, [r7, #36]	; 0x24
 800619e:	e002      	b.n	80061a6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f989 	bl	80064b8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d024      	beq.n	80061fa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d003      	beq.n	80061cc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f963 	bl	8006490 <HAL_CAN_TxMailbox1CompleteCallback>
 80061ca:	e016      	b.n	80061fa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d004      	beq.n	80061e0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80061dc:	627b      	str	r3, [r7, #36]	; 0x24
 80061de:	e00c      	b.n	80061fa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d004      	beq.n	80061f4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061f0:	627b      	str	r3, [r7, #36]	; 0x24
 80061f2:	e002      	b.n	80061fa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f969 	bl	80064cc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d024      	beq.n	800624e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800620c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 f943 	bl	80064a4 <HAL_CAN_TxMailbox2CompleteCallback>
 800621e:	e016      	b.n	800624e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d004      	beq.n	8006234 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006230:	627b      	str	r3, [r7, #36]	; 0x24
 8006232:	e00c      	b.n	800624e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d004      	beq.n	8006248 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
 8006246:	e002      	b.n	800624e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f949 	bl	80064e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	f003 0308 	and.w	r3, r3, #8
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00c      	beq.n	8006272 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f003 0310 	and.w	r3, r3, #16
 800625e:	2b00      	cmp	r3, #0
 8006260:	d007      	beq.n	8006272 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006264:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006268:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2210      	movs	r2, #16
 8006270:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00b      	beq.n	8006294 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b00      	cmp	r3, #0
 8006284:	d006      	beq.n	8006294 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2208      	movs	r2, #8
 800628c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f93a 	bl	8006508 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d009      	beq.n	80062b2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f003 0303 	and.w	r3, r3, #3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f921 	bl	80064f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00c      	beq.n	80062d6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	f003 0310 	and.w	r3, r3, #16
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d007      	beq.n	80062d6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2210      	movs	r2, #16
 80062d4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	f003 0320 	and.w	r3, r3, #32
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00b      	beq.n	80062f8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	f003 0308 	and.w	r3, r3, #8
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d006      	beq.n	80062f8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2208      	movs	r2, #8
 80062f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f91c 	bl	8006530 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	f003 0310 	and.w	r3, r3, #16
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d009      	beq.n	8006316 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	f003 0303 	and.w	r3, r3, #3
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 f903 	bl	800651c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	f003 0310 	and.w	r3, r3, #16
 8006326:	2b00      	cmp	r3, #0
 8006328:	d006      	beq.n	8006338 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2210      	movs	r2, #16
 8006330:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f906 	bl	8006544 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00b      	beq.n	800635a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	f003 0308 	and.w	r3, r3, #8
 8006348:	2b00      	cmp	r3, #0
 800634a:	d006      	beq.n	800635a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2208      	movs	r2, #8
 8006352:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f8ff 	bl	8006558 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006360:	2b00      	cmp	r3, #0
 8006362:	d07b      	beq.n	800645c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	f003 0304 	and.w	r3, r3, #4
 800636a:	2b00      	cmp	r3, #0
 800636c:	d072      	beq.n	8006454 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006374:	2b00      	cmp	r3, #0
 8006376:	d008      	beq.n	800638a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	f043 0301 	orr.w	r3, r3, #1
 8006388:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	f043 0302 	orr.w	r3, r3, #2
 80063a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d008      	beq.n	80063c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	f043 0304 	orr.w	r3, r3, #4
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d043      	beq.n	8006454 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d03e      	beq.n	8006454 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80063dc:	2b60      	cmp	r3, #96	; 0x60
 80063de:	d02b      	beq.n	8006438 <HAL_CAN_IRQHandler+0x32a>
 80063e0:	2b60      	cmp	r3, #96	; 0x60
 80063e2:	d82e      	bhi.n	8006442 <HAL_CAN_IRQHandler+0x334>
 80063e4:	2b50      	cmp	r3, #80	; 0x50
 80063e6:	d022      	beq.n	800642e <HAL_CAN_IRQHandler+0x320>
 80063e8:	2b50      	cmp	r3, #80	; 0x50
 80063ea:	d82a      	bhi.n	8006442 <HAL_CAN_IRQHandler+0x334>
 80063ec:	2b40      	cmp	r3, #64	; 0x40
 80063ee:	d019      	beq.n	8006424 <HAL_CAN_IRQHandler+0x316>
 80063f0:	2b40      	cmp	r3, #64	; 0x40
 80063f2:	d826      	bhi.n	8006442 <HAL_CAN_IRQHandler+0x334>
 80063f4:	2b30      	cmp	r3, #48	; 0x30
 80063f6:	d010      	beq.n	800641a <HAL_CAN_IRQHandler+0x30c>
 80063f8:	2b30      	cmp	r3, #48	; 0x30
 80063fa:	d822      	bhi.n	8006442 <HAL_CAN_IRQHandler+0x334>
 80063fc:	2b10      	cmp	r3, #16
 80063fe:	d002      	beq.n	8006406 <HAL_CAN_IRQHandler+0x2f8>
 8006400:	2b20      	cmp	r3, #32
 8006402:	d005      	beq.n	8006410 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006404:	e01d      	b.n	8006442 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	f043 0308 	orr.w	r3, r3, #8
 800640c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800640e:	e019      	b.n	8006444 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	f043 0310 	orr.w	r3, r3, #16
 8006416:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006418:	e014      	b.n	8006444 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	f043 0320 	orr.w	r3, r3, #32
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006422:	e00f      	b.n	8006444 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800642a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800642c:	e00a      	b.n	8006444 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006434:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006436:	e005      	b.n	8006444 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800643e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006440:	e000      	b.n	8006444 <HAL_CAN_IRQHandler+0x336>
            break;
 8006442:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	699a      	ldr	r2, [r3, #24]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006452:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2204      	movs	r2, #4
 800645a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	2b00      	cmp	r3, #0
 8006460:	d008      	beq.n	8006474 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	431a      	orrs	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f87c 	bl	800656c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006474:	bf00      	nop
 8006476:	3728      	adds	r7, #40	; 0x28
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006580:	b480      	push	{r7}
 8006582:	b085      	sub	sp, #20
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f003 0307 	and.w	r3, r3, #7
 800658e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006590:	4b0c      	ldr	r3, [pc, #48]	; (80065c4 <__NVIC_SetPriorityGrouping+0x44>)
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800659c:	4013      	ands	r3, r2
 800659e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80065a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80065ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80065b2:	4a04      	ldr	r2, [pc, #16]	; (80065c4 <__NVIC_SetPriorityGrouping+0x44>)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	60d3      	str	r3, [r2, #12]
}
 80065b8:	bf00      	nop
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	e000ed00 	.word	0xe000ed00

080065c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065cc:	4b04      	ldr	r3, [pc, #16]	; (80065e0 <__NVIC_GetPriorityGrouping+0x18>)
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	0a1b      	lsrs	r3, r3, #8
 80065d2:	f003 0307 	and.w	r3, r3, #7
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	e000ed00 	.word	0xe000ed00

080065e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	4603      	mov	r3, r0
 80065ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	db0b      	blt.n	800660e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065f6:	79fb      	ldrb	r3, [r7, #7]
 80065f8:	f003 021f 	and.w	r2, r3, #31
 80065fc:	4907      	ldr	r1, [pc, #28]	; (800661c <__NVIC_EnableIRQ+0x38>)
 80065fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006602:	095b      	lsrs	r3, r3, #5
 8006604:	2001      	movs	r0, #1
 8006606:	fa00 f202 	lsl.w	r2, r0, r2
 800660a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800660e:	bf00      	nop
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	e000e100 	.word	0xe000e100

08006620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	4603      	mov	r3, r0
 8006628:	6039      	str	r1, [r7, #0]
 800662a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800662c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006630:	2b00      	cmp	r3, #0
 8006632:	db0a      	blt.n	800664a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	b2da      	uxtb	r2, r3
 8006638:	490c      	ldr	r1, [pc, #48]	; (800666c <__NVIC_SetPriority+0x4c>)
 800663a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800663e:	0112      	lsls	r2, r2, #4
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	440b      	add	r3, r1
 8006644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006648:	e00a      	b.n	8006660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	b2da      	uxtb	r2, r3
 800664e:	4908      	ldr	r1, [pc, #32]	; (8006670 <__NVIC_SetPriority+0x50>)
 8006650:	79fb      	ldrb	r3, [r7, #7]
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	3b04      	subs	r3, #4
 8006658:	0112      	lsls	r2, r2, #4
 800665a:	b2d2      	uxtb	r2, r2
 800665c:	440b      	add	r3, r1
 800665e:	761a      	strb	r2, [r3, #24]
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr
 800666c:	e000e100 	.word	0xe000e100
 8006670:	e000ed00 	.word	0xe000ed00

08006674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006674:	b480      	push	{r7}
 8006676:	b089      	sub	sp, #36	; 0x24
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	f1c3 0307 	rsb	r3, r3, #7
 800668e:	2b04      	cmp	r3, #4
 8006690:	bf28      	it	cs
 8006692:	2304      	movcs	r3, #4
 8006694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	3304      	adds	r3, #4
 800669a:	2b06      	cmp	r3, #6
 800669c:	d902      	bls.n	80066a4 <NVIC_EncodePriority+0x30>
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	3b03      	subs	r3, #3
 80066a2:	e000      	b.n	80066a6 <NVIC_EncodePriority+0x32>
 80066a4:	2300      	movs	r3, #0
 80066a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066a8:	f04f 32ff 	mov.w	r2, #4294967295
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	fa02 f303 	lsl.w	r3, r2, r3
 80066b2:	43da      	mvns	r2, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	401a      	ands	r2, r3
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066bc:	f04f 31ff 	mov.w	r1, #4294967295
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	fa01 f303 	lsl.w	r3, r1, r3
 80066c6:	43d9      	mvns	r1, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066cc:	4313      	orrs	r3, r2
         );
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3724      	adds	r7, #36	; 0x24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b082      	sub	sp, #8
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7ff ff4c 	bl	8006580 <__NVIC_SetPriorityGrouping>
}
 80066e8:	bf00      	nop
 80066ea:	3708      	adds	r7, #8
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	4603      	mov	r3, r0
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
 80066fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80066fe:	2300      	movs	r3, #0
 8006700:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006702:	f7ff ff61 	bl	80065c8 <__NVIC_GetPriorityGrouping>
 8006706:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	68b9      	ldr	r1, [r7, #8]
 800670c:	6978      	ldr	r0, [r7, #20]
 800670e:	f7ff ffb1 	bl	8006674 <NVIC_EncodePriority>
 8006712:	4602      	mov	r2, r0
 8006714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006718:	4611      	mov	r1, r2
 800671a:	4618      	mov	r0, r3
 800671c:	f7ff ff80 	bl	8006620 <__NVIC_SetPriority>
}
 8006720:	bf00      	nop
 8006722:	3718      	adds	r7, #24
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	4603      	mov	r3, r0
 8006730:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006736:	4618      	mov	r0, r3
 8006738:	f7ff ff54 	bl	80065e4 <__NVIC_EnableIRQ>
}
 800673c:	bf00      	nop
 800673e:	3708      	adds	r7, #8
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e00e      	b.n	8006774 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	795b      	ldrb	r3, [r3, #5]
 800675a:	b2db      	uxtb	r3, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	d105      	bne.n	800676c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7fd fefa 	bl	8004560 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006784:	2300      	movs	r3, #0
 8006786:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006788:	f7fe fc82 	bl	8005090 <HAL_GetTick>
 800678c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e099      	b.n	80068cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 0201 	bic.w	r2, r2, #1
 80067b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067b8:	e00f      	b.n	80067da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80067ba:	f7fe fc69 	bl	8005090 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b05      	cmp	r3, #5
 80067c6:	d908      	bls.n	80067da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2220      	movs	r2, #32
 80067cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2203      	movs	r2, #3
 80067d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e078      	b.n	80068cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1e8      	bne.n	80067ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4b38      	ldr	r3, [pc, #224]	; (80068d4 <HAL_DMA_Init+0x158>)
 80067f4:	4013      	ands	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006806:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006812:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800681e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	4313      	orrs	r3, r2
 800682a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	2b04      	cmp	r3, #4
 8006832:	d107      	bne.n	8006844 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800683c:	4313      	orrs	r3, r2
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	4313      	orrs	r3, r2
 8006842:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f023 0307 	bic.w	r3, r3, #7
 800685a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	4313      	orrs	r3, r2
 8006864:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	2b04      	cmp	r3, #4
 800686c:	d117      	bne.n	800689e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	4313      	orrs	r3, r2
 8006876:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00e      	beq.n	800689e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fa7b 	bl	8006d7c <DMA_CheckFifoParam>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d008      	beq.n	800689e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2240      	movs	r2, #64	; 0x40
 8006890:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800689a:	2301      	movs	r3, #1
 800689c:	e016      	b.n	80068cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fa32 	bl	8006d10 <DMA_CalcBaseAndBitshift>
 80068ac:	4603      	mov	r3, r0
 80068ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b4:	223f      	movs	r2, #63	; 0x3f
 80068b6:	409a      	lsls	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	f010803f 	.word	0xf010803f

080068d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d101      	bne.n	80068fe <HAL_DMA_Start_IT+0x26>
 80068fa:	2302      	movs	r3, #2
 80068fc:	e040      	b.n	8006980 <HAL_DMA_Start_IT+0xa8>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b01      	cmp	r3, #1
 8006910:	d12f      	bne.n	8006972 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2202      	movs	r2, #2
 8006916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	68b9      	ldr	r1, [r7, #8]
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 f9c4 	bl	8006cb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006930:	223f      	movs	r2, #63	; 0x3f
 8006932:	409a      	lsls	r2, r3
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f042 0216 	orr.w	r2, r2, #22
 8006946:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694c:	2b00      	cmp	r3, #0
 800694e:	d007      	beq.n	8006960 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0208 	orr.w	r2, r2, #8
 800695e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0201 	orr.w	r2, r2, #1
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	e005      	b.n	800697e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800697a:	2302      	movs	r3, #2
 800697c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800697e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006994:	4b8e      	ldr	r3, [pc, #568]	; (8006bd0 <HAL_DMA_IRQHandler+0x248>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a8e      	ldr	r2, [pc, #568]	; (8006bd4 <HAL_DMA_IRQHandler+0x24c>)
 800699a:	fba2 2303 	umull	r2, r3, r2, r3
 800699e:	0a9b      	lsrs	r3, r3, #10
 80069a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069b2:	2208      	movs	r2, #8
 80069b4:	409a      	lsls	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4013      	ands	r3, r2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d01a      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d013      	beq.n	80069f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0204 	bic.w	r2, r2, #4
 80069da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e0:	2208      	movs	r2, #8
 80069e2:	409a      	lsls	r2, r3
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ec:	f043 0201 	orr.w	r2, r3, #1
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f8:	2201      	movs	r2, #1
 80069fa:	409a      	lsls	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4013      	ands	r3, r2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d012      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00b      	beq.n	8006a2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a16:	2201      	movs	r2, #1
 8006a18:	409a      	lsls	r2, r3
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a22:	f043 0202 	orr.w	r2, r3, #2
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a2e:	2204      	movs	r2, #4
 8006a30:	409a      	lsls	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4013      	ands	r3, r2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d012      	beq.n	8006a60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00b      	beq.n	8006a60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a4c:	2204      	movs	r2, #4
 8006a4e:	409a      	lsls	r2, r3
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a58:	f043 0204 	orr.w	r2, r3, #4
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a64:	2210      	movs	r2, #16
 8006a66:	409a      	lsls	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d043      	beq.n	8006af8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0308 	and.w	r3, r3, #8
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d03c      	beq.n	8006af8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a82:	2210      	movs	r2, #16
 8006a84:	409a      	lsls	r2, r3
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d018      	beq.n	8006aca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d108      	bne.n	8006ab8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d024      	beq.n	8006af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4798      	blx	r3
 8006ab6:	e01f      	b.n	8006af8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d01b      	beq.n	8006af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	4798      	blx	r3
 8006ac8:	e016      	b.n	8006af8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d107      	bne.n	8006ae8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 0208 	bic.w	r2, r2, #8
 8006ae6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006afc:	2220      	movs	r2, #32
 8006afe:	409a      	lsls	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4013      	ands	r3, r2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 808f 	beq.w	8006c28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0310 	and.w	r3, r3, #16
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 8087 	beq.w	8006c28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b1e:	2220      	movs	r2, #32
 8006b20:	409a      	lsls	r2, r3
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b05      	cmp	r3, #5
 8006b30:	d136      	bne.n	8006ba0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 0216 	bic.w	r2, r2, #22
 8006b40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	695a      	ldr	r2, [r3, #20]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d103      	bne.n	8006b62 <HAL_DMA_IRQHandler+0x1da>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d007      	beq.n	8006b72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f022 0208 	bic.w	r2, r2, #8
 8006b70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b76:	223f      	movs	r2, #63	; 0x3f
 8006b78:	409a      	lsls	r2, r3
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d07e      	beq.n	8006c94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	4798      	blx	r3
        }
        return;
 8006b9e:	e079      	b.n	8006c94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d01d      	beq.n	8006bea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10d      	bne.n	8006bd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d031      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	4798      	blx	r3
 8006bcc:	e02c      	b.n	8006c28 <HAL_DMA_IRQHandler+0x2a0>
 8006bce:	bf00      	nop
 8006bd0:	20000008 	.word	0x20000008
 8006bd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d023      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	4798      	blx	r3
 8006be8:	e01e      	b.n	8006c28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10f      	bne.n	8006c18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0210 	bic.w	r2, r2, #16
 8006c06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d032      	beq.n	8006c96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d022      	beq.n	8006c82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2205      	movs	r2, #5
 8006c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 0201 	bic.w	r2, r2, #1
 8006c52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	3301      	adds	r3, #1
 8006c58:	60bb      	str	r3, [r7, #8]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d307      	bcc.n	8006c70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1f2      	bne.n	8006c54 <HAL_DMA_IRQHandler+0x2cc>
 8006c6e:	e000      	b.n	8006c72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006c70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d005      	beq.n	8006c96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	4798      	blx	r3
 8006c92:	e000      	b.n	8006c96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006c94:	bf00      	nop
    }
  }
}
 8006c96:	3718      	adds	r7, #24
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
 8006cc0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006cd0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	2b40      	cmp	r3, #64	; 0x40
 8006ce0:	d108      	bne.n	8006cf4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006cf2:	e007      	b.n	8006d04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	60da      	str	r2, [r3, #12]
}
 8006d04:	bf00      	nop
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	3b10      	subs	r3, #16
 8006d20:	4a14      	ldr	r2, [pc, #80]	; (8006d74 <DMA_CalcBaseAndBitshift+0x64>)
 8006d22:	fba2 2303 	umull	r2, r3, r2, r3
 8006d26:	091b      	lsrs	r3, r3, #4
 8006d28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006d2a:	4a13      	ldr	r2, [pc, #76]	; (8006d78 <DMA_CalcBaseAndBitshift+0x68>)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4413      	add	r3, r2
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	461a      	mov	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	d909      	bls.n	8006d52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006d46:	f023 0303 	bic.w	r3, r3, #3
 8006d4a:	1d1a      	adds	r2, r3, #4
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	659a      	str	r2, [r3, #88]	; 0x58
 8006d50:	e007      	b.n	8006d62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006d5a:	f023 0303 	bic.w	r3, r3, #3
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	aaaaaaab 	.word	0xaaaaaaab
 8006d78:	0802bb20 	.word	0x0802bb20

08006d7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	699b      	ldr	r3, [r3, #24]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d11f      	bne.n	8006dd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d856      	bhi.n	8006e4a <DMA_CheckFifoParam+0xce>
 8006d9c:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <DMA_CheckFifoParam+0x28>)
 8006d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da2:	bf00      	nop
 8006da4:	08006db5 	.word	0x08006db5
 8006da8:	08006dc7 	.word	0x08006dc7
 8006dac:	08006db5 	.word	0x08006db5
 8006db0:	08006e4b 	.word	0x08006e4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d046      	beq.n	8006e4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dc4:	e043      	b.n	8006e4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006dce:	d140      	bne.n	8006e52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dd4:	e03d      	b.n	8006e52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dde:	d121      	bne.n	8006e24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d837      	bhi.n	8006e56 <DMA_CheckFifoParam+0xda>
 8006de6:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <DMA_CheckFifoParam+0x70>)
 8006de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dec:	08006dfd 	.word	0x08006dfd
 8006df0:	08006e03 	.word	0x08006e03
 8006df4:	08006dfd 	.word	0x08006dfd
 8006df8:	08006e15 	.word	0x08006e15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8006e00:	e030      	b.n	8006e64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d025      	beq.n	8006e5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e12:	e022      	b.n	8006e5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e1c:	d11f      	bne.n	8006e5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006e22:	e01c      	b.n	8006e5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d903      	bls.n	8006e32 <DMA_CheckFifoParam+0xb6>
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d003      	beq.n	8006e38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006e30:	e018      	b.n	8006e64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	73fb      	strb	r3, [r7, #15]
      break;
 8006e36:	e015      	b.n	8006e64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00e      	beq.n	8006e62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	73fb      	strb	r3, [r7, #15]
      break;
 8006e48:	e00b      	b.n	8006e62 <DMA_CheckFifoParam+0xe6>
      break;
 8006e4a:	bf00      	nop
 8006e4c:	e00a      	b.n	8006e64 <DMA_CheckFifoParam+0xe8>
      break;
 8006e4e:	bf00      	nop
 8006e50:	e008      	b.n	8006e64 <DMA_CheckFifoParam+0xe8>
      break;
 8006e52:	bf00      	nop
 8006e54:	e006      	b.n	8006e64 <DMA_CheckFifoParam+0xe8>
      break;
 8006e56:	bf00      	nop
 8006e58:	e004      	b.n	8006e64 <DMA_CheckFifoParam+0xe8>
      break;
 8006e5a:	bf00      	nop
 8006e5c:	e002      	b.n	8006e64 <DMA_CheckFifoParam+0xe8>
      break;   
 8006e5e:	bf00      	nop
 8006e60:	e000      	b.n	8006e64 <DMA_CheckFifoParam+0xe8>
      break;
 8006e62:	bf00      	nop
    }
  } 
  
  return status; 
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop

08006e74 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e03b      	b.n	8006efe <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d106      	bne.n	8006ea0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7fd fb82 	bl	80045a4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec4:	f023 0107 	bic.w	r1, r3, #7
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006ede:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	68d1      	ldr	r1, [r2, #12]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	6812      	ldr	r2, [r2, #0]
 8006eea:	430b      	orrs	r3, r1
 8006eec:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b084      	sub	sp, #16
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d026      	beq.n	8006f76 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d021      	beq.n	8006f76 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f40:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f46:	f043 0201 	orr.w	r2, r3, #1
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2201      	movs	r2, #1
 8006f54:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2204      	movs	r2, #4
 8006f5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f003 0320 	and.w	r3, r3, #32
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d026      	beq.n	8006fce <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d021      	beq.n	8006fce <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f98:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa6:	f043 0202 	orr.w	r2, r3, #2
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2204      	movs	r2, #4
 8006fb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f003 0308 	and.w	r3, r3, #8
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d026      	beq.n	8007026 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d021      	beq.n	8007026 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ff0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2208      	movs	r2, #8
 8006ff8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffe:	f043 0204 	orr.w	r2, r3, #4
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2204      	movs	r2, #4
 800700a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f003 0304 	and.w	r3, r3, #4
 800702c:	2b00      	cmp	r3, #0
 800702e:	d013      	beq.n	8007058 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00e      	beq.n	8007058 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007048:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2204      	movs	r2, #4
 8007050:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f853 	bl	80070fe <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d024      	beq.n	80070ac <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007068:	2b00      	cmp	r3, #0
 800706a:	d01f      	beq.n	80070ac <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800707a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2202      	movs	r2, #2
 8007082:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d003      	beq.n	80070ac <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f003 0310 	and.w	r3, r3, #16
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d01f      	beq.n	80070f6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d01a      	beq.n	80070f6 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070ce:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2210      	movs	r2, #16
 80070d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f80e 	bl	8007112 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80070f6:	bf00      	nop
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80070fe:	b480      	push	{r7}
 8007100:	b083      	sub	sp, #12
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007112:	b480      	push	{r7}
 8007114:	b083      	sub	sp, #12
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800711a:	bf00      	nop
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
	...

08007128 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007140:	2b01      	cmp	r3, #1
 8007142:	d101      	bne.n	8007148 <HAL_DMA2D_ConfigLayer+0x20>
 8007144:	2302      	movs	r3, #2
 8007146:	e079      	b.n	800723c <HAL_DMA2D_ConfigLayer+0x114>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	3318      	adds	r3, #24
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	4413      	add	r3, r2
 8007162:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	041b      	lsls	r3, r3, #16
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007172:	4b35      	ldr	r3, [pc, #212]	; (8007248 <HAL_DMA2D_ConfigLayer+0x120>)
 8007174:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	2b0a      	cmp	r3, #10
 800717c:	d003      	beq.n	8007186 <HAL_DMA2D_ConfigLayer+0x5e>
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	2b09      	cmp	r3, #9
 8007184:	d107      	bne.n	8007196 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	4313      	orrs	r3, r2
 8007192:	617b      	str	r3, [r7, #20]
 8007194:	e005      	b.n	80071a2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	061b      	lsls	r3, r3, #24
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	4313      	orrs	r3, r2
 80071a0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d120      	bne.n	80071ea <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	43db      	mvns	r3, r3
 80071b2:	ea02 0103 	and.w	r1, r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	430a      	orrs	r2, r1
 80071be:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	6812      	ldr	r2, [r2, #0]
 80071c8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	2b0a      	cmp	r3, #10
 80071d0:	d003      	beq.n	80071da <HAL_DMA2D_ConfigLayer+0xb2>
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	2b09      	cmp	r3, #9
 80071d8:	d127      	bne.n	800722a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80071e6:	629a      	str	r2, [r3, #40]	; 0x28
 80071e8:	e01f      	b.n	800722a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69da      	ldr	r2, [r3, #28]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	43db      	mvns	r3, r3
 80071f4:	ea02 0103 	and.w	r1, r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	430a      	orrs	r2, r1
 8007200:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	6812      	ldr	r2, [r2, #0]
 800720a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	2b0a      	cmp	r3, #10
 8007212:	d003      	beq.n	800721c <HAL_DMA2D_ConfigLayer+0xf4>
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	2b09      	cmp	r3, #9
 800721a:	d106      	bne.n	800722a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	68da      	ldr	r2, [r3, #12]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007228:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	371c      	adds	r7, #28
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr
 8007248:	ff03000f 	.word	0xff03000f

0800724c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800724c:	b480      	push	{r7}
 800724e:	b089      	sub	sp, #36	; 0x24
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007256:	2300      	movs	r3, #0
 8007258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800725a:	2300      	movs	r3, #0
 800725c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800725e:	2300      	movs	r3, #0
 8007260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007262:	2300      	movs	r3, #0
 8007264:	61fb      	str	r3, [r7, #28]
 8007266:	e177      	b.n	8007558 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007268:	2201      	movs	r2, #1
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	fa02 f303 	lsl.w	r3, r2, r3
 8007270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	4013      	ands	r3, r2
 800727a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	429a      	cmp	r2, r3
 8007282:	f040 8166 	bne.w	8007552 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f003 0303 	and.w	r3, r3, #3
 800728e:	2b01      	cmp	r3, #1
 8007290:	d005      	beq.n	800729e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800729a:	2b02      	cmp	r3, #2
 800729c:	d130      	bne.n	8007300 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	2203      	movs	r2, #3
 80072aa:	fa02 f303 	lsl.w	r3, r2, r3
 80072ae:	43db      	mvns	r3, r3
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	4013      	ands	r3, r2
 80072b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	fa02 f303 	lsl.w	r3, r2, r3
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	69ba      	ldr	r2, [r7, #24]
 80072cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80072d4:	2201      	movs	r2, #1
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	fa02 f303 	lsl.w	r3, r2, r3
 80072dc:	43db      	mvns	r3, r3
 80072de:	69ba      	ldr	r2, [r7, #24]
 80072e0:	4013      	ands	r3, r2
 80072e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	091b      	lsrs	r3, r3, #4
 80072ea:	f003 0201 	and.w	r2, r3, #1
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	fa02 f303 	lsl.w	r3, r2, r3
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f003 0303 	and.w	r3, r3, #3
 8007308:	2b03      	cmp	r3, #3
 800730a:	d017      	beq.n	800733c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	005b      	lsls	r3, r3, #1
 8007316:	2203      	movs	r2, #3
 8007318:	fa02 f303 	lsl.w	r3, r2, r3
 800731c:	43db      	mvns	r3, r3
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	4013      	ands	r3, r2
 8007322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	fa02 f303 	lsl.w	r3, r2, r3
 8007330:	69ba      	ldr	r2, [r7, #24]
 8007332:	4313      	orrs	r3, r2
 8007334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f003 0303 	and.w	r3, r3, #3
 8007344:	2b02      	cmp	r3, #2
 8007346:	d123      	bne.n	8007390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	08da      	lsrs	r2, r3, #3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	3208      	adds	r2, #8
 8007350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	f003 0307 	and.w	r3, r3, #7
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	220f      	movs	r2, #15
 8007360:	fa02 f303 	lsl.w	r3, r2, r3
 8007364:	43db      	mvns	r3, r3
 8007366:	69ba      	ldr	r2, [r7, #24]
 8007368:	4013      	ands	r3, r2
 800736a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	691a      	ldr	r2, [r3, #16]
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	f003 0307 	and.w	r3, r3, #7
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	fa02 f303 	lsl.w	r3, r2, r3
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	4313      	orrs	r3, r2
 8007380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	08da      	lsrs	r2, r3, #3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	3208      	adds	r2, #8
 800738a:	69b9      	ldr	r1, [r7, #24]
 800738c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	005b      	lsls	r3, r3, #1
 800739a:	2203      	movs	r2, #3
 800739c:	fa02 f303 	lsl.w	r3, r2, r3
 80073a0:	43db      	mvns	r3, r3
 80073a2:	69ba      	ldr	r2, [r7, #24]
 80073a4:	4013      	ands	r3, r2
 80073a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f003 0203 	and.w	r2, r3, #3
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	fa02 f303 	lsl.w	r3, r2, r3
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	69ba      	ldr	r2, [r7, #24]
 80073c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 80c0 	beq.w	8007552 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073d2:	2300      	movs	r3, #0
 80073d4:	60fb      	str	r3, [r7, #12]
 80073d6:	4b66      	ldr	r3, [pc, #408]	; (8007570 <HAL_GPIO_Init+0x324>)
 80073d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073da:	4a65      	ldr	r2, [pc, #404]	; (8007570 <HAL_GPIO_Init+0x324>)
 80073dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073e0:	6453      	str	r3, [r2, #68]	; 0x44
 80073e2:	4b63      	ldr	r3, [pc, #396]	; (8007570 <HAL_GPIO_Init+0x324>)
 80073e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80073ee:	4a61      	ldr	r2, [pc, #388]	; (8007574 <HAL_GPIO_Init+0x328>)
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	089b      	lsrs	r3, r3, #2
 80073f4:	3302      	adds	r3, #2
 80073f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	f003 0303 	and.w	r3, r3, #3
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	220f      	movs	r2, #15
 8007406:	fa02 f303 	lsl.w	r3, r2, r3
 800740a:	43db      	mvns	r3, r3
 800740c:	69ba      	ldr	r2, [r7, #24]
 800740e:	4013      	ands	r3, r2
 8007410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a58      	ldr	r2, [pc, #352]	; (8007578 <HAL_GPIO_Init+0x32c>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d037      	beq.n	800748a <HAL_GPIO_Init+0x23e>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a57      	ldr	r2, [pc, #348]	; (800757c <HAL_GPIO_Init+0x330>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d031      	beq.n	8007486 <HAL_GPIO_Init+0x23a>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a56      	ldr	r2, [pc, #344]	; (8007580 <HAL_GPIO_Init+0x334>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d02b      	beq.n	8007482 <HAL_GPIO_Init+0x236>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a55      	ldr	r2, [pc, #340]	; (8007584 <HAL_GPIO_Init+0x338>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d025      	beq.n	800747e <HAL_GPIO_Init+0x232>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a54      	ldr	r2, [pc, #336]	; (8007588 <HAL_GPIO_Init+0x33c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d01f      	beq.n	800747a <HAL_GPIO_Init+0x22e>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a53      	ldr	r2, [pc, #332]	; (800758c <HAL_GPIO_Init+0x340>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d019      	beq.n	8007476 <HAL_GPIO_Init+0x22a>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a52      	ldr	r2, [pc, #328]	; (8007590 <HAL_GPIO_Init+0x344>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d013      	beq.n	8007472 <HAL_GPIO_Init+0x226>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a51      	ldr	r2, [pc, #324]	; (8007594 <HAL_GPIO_Init+0x348>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00d      	beq.n	800746e <HAL_GPIO_Init+0x222>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a50      	ldr	r2, [pc, #320]	; (8007598 <HAL_GPIO_Init+0x34c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d007      	beq.n	800746a <HAL_GPIO_Init+0x21e>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a4f      	ldr	r2, [pc, #316]	; (800759c <HAL_GPIO_Init+0x350>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d101      	bne.n	8007466 <HAL_GPIO_Init+0x21a>
 8007462:	2309      	movs	r3, #9
 8007464:	e012      	b.n	800748c <HAL_GPIO_Init+0x240>
 8007466:	230a      	movs	r3, #10
 8007468:	e010      	b.n	800748c <HAL_GPIO_Init+0x240>
 800746a:	2308      	movs	r3, #8
 800746c:	e00e      	b.n	800748c <HAL_GPIO_Init+0x240>
 800746e:	2307      	movs	r3, #7
 8007470:	e00c      	b.n	800748c <HAL_GPIO_Init+0x240>
 8007472:	2306      	movs	r3, #6
 8007474:	e00a      	b.n	800748c <HAL_GPIO_Init+0x240>
 8007476:	2305      	movs	r3, #5
 8007478:	e008      	b.n	800748c <HAL_GPIO_Init+0x240>
 800747a:	2304      	movs	r3, #4
 800747c:	e006      	b.n	800748c <HAL_GPIO_Init+0x240>
 800747e:	2303      	movs	r3, #3
 8007480:	e004      	b.n	800748c <HAL_GPIO_Init+0x240>
 8007482:	2302      	movs	r3, #2
 8007484:	e002      	b.n	800748c <HAL_GPIO_Init+0x240>
 8007486:	2301      	movs	r3, #1
 8007488:	e000      	b.n	800748c <HAL_GPIO_Init+0x240>
 800748a:	2300      	movs	r3, #0
 800748c:	69fa      	ldr	r2, [r7, #28]
 800748e:	f002 0203 	and.w	r2, r2, #3
 8007492:	0092      	lsls	r2, r2, #2
 8007494:	4093      	lsls	r3, r2
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	4313      	orrs	r3, r2
 800749a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800749c:	4935      	ldr	r1, [pc, #212]	; (8007574 <HAL_GPIO_Init+0x328>)
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	089b      	lsrs	r3, r3, #2
 80074a2:	3302      	adds	r3, #2
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80074aa:	4b3d      	ldr	r3, [pc, #244]	; (80075a0 <HAL_GPIO_Init+0x354>)
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	43db      	mvns	r3, r3
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	4013      	ands	r3, r2
 80074b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d003      	beq.n	80074ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80074c6:	69ba      	ldr	r2, [r7, #24]
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80074ce:	4a34      	ldr	r2, [pc, #208]	; (80075a0 <HAL_GPIO_Init+0x354>)
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80074d4:	4b32      	ldr	r3, [pc, #200]	; (80075a0 <HAL_GPIO_Init+0x354>)
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	43db      	mvns	r3, r3
 80074de:	69ba      	ldr	r2, [r7, #24]
 80074e0:	4013      	ands	r3, r2
 80074e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d003      	beq.n	80074f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80074f0:	69ba      	ldr	r2, [r7, #24]
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80074f8:	4a29      	ldr	r2, [pc, #164]	; (80075a0 <HAL_GPIO_Init+0x354>)
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80074fe:	4b28      	ldr	r3, [pc, #160]	; (80075a0 <HAL_GPIO_Init+0x354>)
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	43db      	mvns	r3, r3
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	4013      	ands	r3, r2
 800750c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800751a:	69ba      	ldr	r2, [r7, #24]
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	4313      	orrs	r3, r2
 8007520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007522:	4a1f      	ldr	r2, [pc, #124]	; (80075a0 <HAL_GPIO_Init+0x354>)
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007528:	4b1d      	ldr	r3, [pc, #116]	; (80075a0 <HAL_GPIO_Init+0x354>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	43db      	mvns	r3, r3
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	4013      	ands	r3, r2
 8007536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d003      	beq.n	800754c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007544:	69ba      	ldr	r2, [r7, #24]
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	4313      	orrs	r3, r2
 800754a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800754c:	4a14      	ldr	r2, [pc, #80]	; (80075a0 <HAL_GPIO_Init+0x354>)
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	3301      	adds	r3, #1
 8007556:	61fb      	str	r3, [r7, #28]
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	2b0f      	cmp	r3, #15
 800755c:	f67f ae84 	bls.w	8007268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007560:	bf00      	nop
 8007562:	bf00      	nop
 8007564:	3724      	adds	r7, #36	; 0x24
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	40023800 	.word	0x40023800
 8007574:	40013800 	.word	0x40013800
 8007578:	40020000 	.word	0x40020000
 800757c:	40020400 	.word	0x40020400
 8007580:	40020800 	.word	0x40020800
 8007584:	40020c00 	.word	0x40020c00
 8007588:	40021000 	.word	0x40021000
 800758c:	40021400 	.word	0x40021400
 8007590:	40021800 	.word	0x40021800
 8007594:	40021c00 	.word	0x40021c00
 8007598:	40022000 	.word	0x40022000
 800759c:	40022400 	.word	0x40022400
 80075a0:	40013c00 	.word	0x40013c00

080075a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	691a      	ldr	r2, [r3, #16]
 80075b4:	887b      	ldrh	r3, [r7, #2]
 80075b6:	4013      	ands	r3, r2
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80075bc:	2301      	movs	r3, #1
 80075be:	73fb      	strb	r3, [r7, #15]
 80075c0:	e001      	b.n	80075c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80075c2:	2300      	movs	r3, #0
 80075c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3714      	adds	r7, #20
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	460b      	mov	r3, r1
 80075de:	807b      	strh	r3, [r7, #2]
 80075e0:	4613      	mov	r3, r2
 80075e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80075e4:	787b      	ldrb	r3, [r7, #1]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d003      	beq.n	80075f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075ea:	887a      	ldrh	r2, [r7, #2]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80075f0:	e003      	b.n	80075fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80075f2:	887b      	ldrh	r3, [r7, #2]
 80075f4:	041a      	lsls	r2, r3, #16
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	619a      	str	r2, [r3, #24]
}
 80075fa:	bf00      	nop
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007606:	b480      	push	{r7}
 8007608:	b085      	sub	sp, #20
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	460b      	mov	r3, r1
 8007610:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007618:	887a      	ldrh	r2, [r7, #2]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	4013      	ands	r3, r2
 800761e:	041a      	lsls	r2, r3, #16
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	43d9      	mvns	r1, r3
 8007624:	887b      	ldrh	r3, [r7, #2]
 8007626:	400b      	ands	r3, r1
 8007628:	431a      	orrs	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	619a      	str	r2, [r3, #24]
}
 800762e:	bf00      	nop
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
	...

0800763c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	4603      	mov	r3, r0
 8007644:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007646:	4b08      	ldr	r3, [pc, #32]	; (8007668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007648:	695a      	ldr	r2, [r3, #20]
 800764a:	88fb      	ldrh	r3, [r7, #6]
 800764c:	4013      	ands	r3, r2
 800764e:	2b00      	cmp	r3, #0
 8007650:	d006      	beq.n	8007660 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007652:	4a05      	ldr	r2, [pc, #20]	; (8007668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007654:	88fb      	ldrh	r3, [r7, #6]
 8007656:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007658:	88fb      	ldrh	r3, [r7, #6]
 800765a:	4618      	mov	r0, r3
 800765c:	f7fb fb10 	bl	8002c80 <HAL_GPIO_EXTI_Callback>
  }
}
 8007660:	bf00      	nop
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	40013c00 	.word	0x40013c00

0800766c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d101      	bne.n	800767e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e12b      	b.n	80078d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d106      	bne.n	8007698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7fc ffae 	bl	80045f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2224      	movs	r2, #36	; 0x24
 800769c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f022 0201 	bic.w	r2, r2, #1
 80076ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80076d0:	f002 fa52 	bl	8009b78 <HAL_RCC_GetPCLK1Freq>
 80076d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	4a81      	ldr	r2, [pc, #516]	; (80078e0 <HAL_I2C_Init+0x274>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d807      	bhi.n	80076f0 <HAL_I2C_Init+0x84>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4a80      	ldr	r2, [pc, #512]	; (80078e4 <HAL_I2C_Init+0x278>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	bf94      	ite	ls
 80076e8:	2301      	movls	r3, #1
 80076ea:	2300      	movhi	r3, #0
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	e006      	b.n	80076fe <HAL_I2C_Init+0x92>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4a7d      	ldr	r2, [pc, #500]	; (80078e8 <HAL_I2C_Init+0x27c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	bf94      	ite	ls
 80076f8:	2301      	movls	r3, #1
 80076fa:	2300      	movhi	r3, #0
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e0e7      	b.n	80078d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4a78      	ldr	r2, [pc, #480]	; (80078ec <HAL_I2C_Init+0x280>)
 800770a:	fba2 2303 	umull	r2, r3, r2, r3
 800770e:	0c9b      	lsrs	r3, r3, #18
 8007710:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	430a      	orrs	r2, r1
 8007724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6a1b      	ldr	r3, [r3, #32]
 800772c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	4a6a      	ldr	r2, [pc, #424]	; (80078e0 <HAL_I2C_Init+0x274>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d802      	bhi.n	8007740 <HAL_I2C_Init+0xd4>
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	3301      	adds	r3, #1
 800773e:	e009      	b.n	8007754 <HAL_I2C_Init+0xe8>
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007746:	fb02 f303 	mul.w	r3, r2, r3
 800774a:	4a69      	ldr	r2, [pc, #420]	; (80078f0 <HAL_I2C_Init+0x284>)
 800774c:	fba2 2303 	umull	r2, r3, r2, r3
 8007750:	099b      	lsrs	r3, r3, #6
 8007752:	3301      	adds	r3, #1
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	6812      	ldr	r2, [r2, #0]
 8007758:	430b      	orrs	r3, r1
 800775a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007766:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	495c      	ldr	r1, [pc, #368]	; (80078e0 <HAL_I2C_Init+0x274>)
 8007770:	428b      	cmp	r3, r1
 8007772:	d819      	bhi.n	80077a8 <HAL_I2C_Init+0x13c>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	1e59      	subs	r1, r3, #1
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007782:	1c59      	adds	r1, r3, #1
 8007784:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007788:	400b      	ands	r3, r1
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <HAL_I2C_Init+0x138>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	1e59      	subs	r1, r3, #1
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	fbb1 f3f3 	udiv	r3, r1, r3
 800779c:	3301      	adds	r3, #1
 800779e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077a2:	e051      	b.n	8007848 <HAL_I2C_Init+0x1dc>
 80077a4:	2304      	movs	r3, #4
 80077a6:	e04f      	b.n	8007848 <HAL_I2C_Init+0x1dc>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d111      	bne.n	80077d4 <HAL_I2C_Init+0x168>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	1e58      	subs	r0, r3, #1
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6859      	ldr	r1, [r3, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	440b      	add	r3, r1
 80077be:	fbb0 f3f3 	udiv	r3, r0, r3
 80077c2:	3301      	adds	r3, #1
 80077c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	bf0c      	ite	eq
 80077cc:	2301      	moveq	r3, #1
 80077ce:	2300      	movne	r3, #0
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	e012      	b.n	80077fa <HAL_I2C_Init+0x18e>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	1e58      	subs	r0, r3, #1
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6859      	ldr	r1, [r3, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	440b      	add	r3, r1
 80077e2:	0099      	lsls	r1, r3, #2
 80077e4:	440b      	add	r3, r1
 80077e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80077ea:	3301      	adds	r3, #1
 80077ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	bf0c      	ite	eq
 80077f4:	2301      	moveq	r3, #1
 80077f6:	2300      	movne	r3, #0
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d001      	beq.n	8007802 <HAL_I2C_Init+0x196>
 80077fe:	2301      	movs	r3, #1
 8007800:	e022      	b.n	8007848 <HAL_I2C_Init+0x1dc>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10e      	bne.n	8007828 <HAL_I2C_Init+0x1bc>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	1e58      	subs	r0, r3, #1
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6859      	ldr	r1, [r3, #4]
 8007812:	460b      	mov	r3, r1
 8007814:	005b      	lsls	r3, r3, #1
 8007816:	440b      	add	r3, r1
 8007818:	fbb0 f3f3 	udiv	r3, r0, r3
 800781c:	3301      	adds	r3, #1
 800781e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007826:	e00f      	b.n	8007848 <HAL_I2C_Init+0x1dc>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	1e58      	subs	r0, r3, #1
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6859      	ldr	r1, [r3, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	440b      	add	r3, r1
 8007836:	0099      	lsls	r1, r3, #2
 8007838:	440b      	add	r3, r1
 800783a:	fbb0 f3f3 	udiv	r3, r0, r3
 800783e:	3301      	adds	r3, #1
 8007840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007848:	6879      	ldr	r1, [r7, #4]
 800784a:	6809      	ldr	r1, [r1, #0]
 800784c:	4313      	orrs	r3, r2
 800784e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	69da      	ldr	r2, [r3, #28]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	431a      	orrs	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	430a      	orrs	r2, r1
 800786a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007876:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	6911      	ldr	r1, [r2, #16]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	68d2      	ldr	r2, [r2, #12]
 8007882:	4311      	orrs	r1, r2
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	6812      	ldr	r2, [r2, #0]
 8007888:	430b      	orrs	r3, r1
 800788a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	695a      	ldr	r2, [r3, #20]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	431a      	orrs	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f042 0201 	orr.w	r2, r2, #1
 80078b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2220      	movs	r2, #32
 80078c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	000186a0 	.word	0x000186a0
 80078e4:	001e847f 	.word	0x001e847f
 80078e8:	003d08ff 	.word	0x003d08ff
 80078ec:	431bde83 	.word	0x431bde83
 80078f0:	10624dd3 	.word	0x10624dd3

080078f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b088      	sub	sp, #32
 80078f8:	af02      	add	r7, sp, #8
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	607a      	str	r2, [r7, #4]
 80078fe:	461a      	mov	r2, r3
 8007900:	460b      	mov	r3, r1
 8007902:	817b      	strh	r3, [r7, #10]
 8007904:	4613      	mov	r3, r2
 8007906:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007908:	f7fd fbc2 	bl	8005090 <HAL_GetTick>
 800790c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b20      	cmp	r3, #32
 8007918:	f040 80e0 	bne.w	8007adc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	2319      	movs	r3, #25
 8007922:	2201      	movs	r2, #1
 8007924:	4970      	ldr	r1, [pc, #448]	; (8007ae8 <HAL_I2C_Master_Transmit+0x1f4>)
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f000 fda0 	bl	800846c <I2C_WaitOnFlagUntilTimeout>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007932:	2302      	movs	r3, #2
 8007934:	e0d3      	b.n	8007ade <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800793c:	2b01      	cmp	r3, #1
 800793e:	d101      	bne.n	8007944 <HAL_I2C_Master_Transmit+0x50>
 8007940:	2302      	movs	r3, #2
 8007942:	e0cc      	b.n	8007ade <HAL_I2C_Master_Transmit+0x1ea>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b01      	cmp	r3, #1
 8007958:	d007      	beq.n	800796a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f042 0201 	orr.w	r2, r2, #1
 8007968:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007978:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2221      	movs	r2, #33	; 0x21
 800797e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2210      	movs	r2, #16
 8007986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	893a      	ldrh	r2, [r7, #8]
 800799a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4a50      	ldr	r2, [pc, #320]	; (8007aec <HAL_I2C_Master_Transmit+0x1f8>)
 80079aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80079ac:	8979      	ldrh	r1, [r7, #10]
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	6a3a      	ldr	r2, [r7, #32]
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 fbf0 	bl	8008198 <I2C_MasterRequestWrite>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e08d      	b.n	8007ade <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079c2:	2300      	movs	r3, #0
 80079c4:	613b      	str	r3, [r7, #16]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	613b      	str	r3, [r7, #16]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	613b      	str	r3, [r7, #16]
 80079d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80079d8:	e066      	b.n	8007aa8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	6a39      	ldr	r1, [r7, #32]
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 fe1a 	bl	8008618 <I2C_WaitOnTXEFlagUntilTimeout>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00d      	beq.n	8007a06 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ee:	2b04      	cmp	r3, #4
 80079f0:	d107      	bne.n	8007a02 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a00:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e06b      	b.n	8007ade <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0a:	781a      	ldrb	r2, [r3, #0]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a16:	1c5a      	adds	r2, r3, #1
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	3b01      	subs	r3, #1
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	f003 0304 	and.w	r3, r3, #4
 8007a40:	2b04      	cmp	r3, #4
 8007a42:	d11b      	bne.n	8007a7c <HAL_I2C_Master_Transmit+0x188>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d017      	beq.n	8007a7c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	781a      	ldrb	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a74:	3b01      	subs	r3, #1
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	6a39      	ldr	r1, [r7, #32]
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 fe0a 	bl	800869a <I2C_WaitOnBTFFlagUntilTimeout>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00d      	beq.n	8007aa8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d107      	bne.n	8007aa4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aa2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e01a      	b.n	8007ade <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d194      	bne.n	80079da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	e000      	b.n	8007ade <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007adc:	2302      	movs	r3, #2
  }
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	00100002 	.word	0x00100002
 8007aec:	ffff0000 	.word	0xffff0000

08007af0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b08c      	sub	sp, #48	; 0x30
 8007af4:	af02      	add	r7, sp, #8
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	4608      	mov	r0, r1
 8007afa:	4611      	mov	r1, r2
 8007afc:	461a      	mov	r2, r3
 8007afe:	4603      	mov	r3, r0
 8007b00:	817b      	strh	r3, [r7, #10]
 8007b02:	460b      	mov	r3, r1
 8007b04:	813b      	strh	r3, [r7, #8]
 8007b06:	4613      	mov	r3, r2
 8007b08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007b0a:	f7fd fac1 	bl	8005090 <HAL_GetTick>
 8007b0e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b20      	cmp	r3, #32
 8007b1a:	f040 8208 	bne.w	8007f2e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	2319      	movs	r3, #25
 8007b24:	2201      	movs	r2, #1
 8007b26:	497b      	ldr	r1, [pc, #492]	; (8007d14 <HAL_I2C_Mem_Read+0x224>)
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 fc9f 	bl	800846c <I2C_WaitOnFlagUntilTimeout>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d001      	beq.n	8007b38 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007b34:	2302      	movs	r3, #2
 8007b36:	e1fb      	b.n	8007f30 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d101      	bne.n	8007b46 <HAL_I2C_Mem_Read+0x56>
 8007b42:	2302      	movs	r3, #2
 8007b44:	e1f4      	b.n	8007f30 <HAL_I2C_Mem_Read+0x440>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0301 	and.w	r3, r3, #1
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d007      	beq.n	8007b6c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f042 0201 	orr.w	r2, r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2222      	movs	r2, #34	; 0x22
 8007b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2240      	movs	r2, #64	; 0x40
 8007b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	4a5b      	ldr	r2, [pc, #364]	; (8007d18 <HAL_I2C_Mem_Read+0x228>)
 8007bac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007bae:	88f8      	ldrh	r0, [r7, #6]
 8007bb0:	893a      	ldrh	r2, [r7, #8]
 8007bb2:	8979      	ldrh	r1, [r7, #10]
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f000 fb6c 	bl	800829c <I2C_RequestMemoryRead>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d001      	beq.n	8007bce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e1b0      	b.n	8007f30 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d113      	bne.n	8007bfe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	623b      	str	r3, [r7, #32]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	623b      	str	r3, [r7, #32]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	623b      	str	r3, [r7, #32]
 8007bea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	e184      	b.n	8007f08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d11b      	bne.n	8007c3e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c16:	2300      	movs	r3, #0
 8007c18:	61fb      	str	r3, [r7, #28]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	61fb      	str	r3, [r7, #28]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	61fb      	str	r3, [r7, #28]
 8007c2a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	e164      	b.n	8007f08 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d11b      	bne.n	8007c7e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c54:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c66:	2300      	movs	r3, #0
 8007c68:	61bb      	str	r3, [r7, #24]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	61bb      	str	r3, [r7, #24]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	61bb      	str	r3, [r7, #24]
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	e144      	b.n	8007f08 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c7e:	2300      	movs	r3, #0
 8007c80:	617b      	str	r3, [r7, #20]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	617b      	str	r3, [r7, #20]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	617b      	str	r3, [r7, #20]
 8007c92:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007c94:	e138      	b.n	8007f08 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	f200 80f1 	bhi.w	8007e82 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d123      	bne.n	8007cf0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007caa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 fd35 	bl	800871c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e139      	b.n	8007f30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	691a      	ldr	r2, [r3, #16]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc6:	b2d2      	uxtb	r2, r2
 8007cc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	1c5a      	adds	r2, r3, #1
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007cee:	e10b      	b.n	8007f08 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d14e      	bne.n	8007d96 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfe:	2200      	movs	r2, #0
 8007d00:	4906      	ldr	r1, [pc, #24]	; (8007d1c <HAL_I2C_Mem_Read+0x22c>)
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f000 fbb2 	bl	800846c <I2C_WaitOnFlagUntilTimeout>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d008      	beq.n	8007d20 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e10e      	b.n	8007f30 <HAL_I2C_Mem_Read+0x440>
 8007d12:	bf00      	nop
 8007d14:	00100002 	.word	0x00100002
 8007d18:	ffff0000 	.word	0xffff0000
 8007d1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	691a      	ldr	r2, [r3, #16]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	b2d2      	uxtb	r2, r2
 8007d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d42:	1c5a      	adds	r2, r3, #1
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	691a      	ldr	r2, [r3, #16]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6c:	b2d2      	uxtb	r2, r2
 8007d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d74:	1c5a      	adds	r2, r3, #1
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	b29a      	uxth	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d94:	e0b8      	b.n	8007f08 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d98:	9300      	str	r3, [sp, #0]
 8007d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	4966      	ldr	r1, [pc, #408]	; (8007f38 <HAL_I2C_Mem_Read+0x448>)
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 fb63 	bl	800846c <I2C_WaitOnFlagUntilTimeout>
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e0bf      	b.n	8007f30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	691a      	ldr	r2, [r3, #16]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	b2d2      	uxtb	r2, r2
 8007dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	3b01      	subs	r3, #1
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df8:	2200      	movs	r2, #0
 8007dfa:	494f      	ldr	r1, [pc, #316]	; (8007f38 <HAL_I2C_Mem_Read+0x448>)
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	f000 fb35 	bl	800846c <I2C_WaitOnFlagUntilTimeout>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e091      	b.n	8007f30 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	691a      	ldr	r2, [r3, #16]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e26:	b2d2      	uxtb	r2, r2
 8007e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2e:	1c5a      	adds	r2, r3, #1
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	3b01      	subs	r3, #1
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	691a      	ldr	r2, [r3, #16]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e58:	b2d2      	uxtb	r2, r2
 8007e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	1c5a      	adds	r2, r3, #1
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e80:	e042      	b.n	8007f08 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f000 fc48 	bl	800871c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e04c      	b.n	8007f30 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	691a      	ldr	r2, [r3, #16]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	b2d2      	uxtb	r2, r2
 8007ea2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	1c5a      	adds	r2, r3, #1
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	f003 0304 	and.w	r3, r3, #4
 8007ed2:	2b04      	cmp	r3, #4
 8007ed4:	d118      	bne.n	8007f08 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	691a      	ldr	r2, [r3, #16]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee0:	b2d2      	uxtb	r2, r2
 8007ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee8:	1c5a      	adds	r2, r3, #1
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	3b01      	subs	r3, #1
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f47f aec2 	bne.w	8007c96 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2220      	movs	r2, #32
 8007f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	e000      	b.n	8007f30 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007f2e:	2302      	movs	r3, #2
  }
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3728      	adds	r7, #40	; 0x28
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	00010004 	.word	0x00010004

08007f3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b08a      	sub	sp, #40	; 0x28
 8007f40:	af02      	add	r7, sp, #8
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	607a      	str	r2, [r7, #4]
 8007f46:	603b      	str	r3, [r7, #0]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007f4c:	f7fd f8a0 	bl	8005090 <HAL_GetTick>
 8007f50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b20      	cmp	r3, #32
 8007f60:	f040 8111 	bne.w	8008186 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	2319      	movs	r3, #25
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	4988      	ldr	r1, [pc, #544]	; (8008190 <HAL_I2C_IsDeviceReady+0x254>)
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f000 fa7c 	bl	800846c <I2C_WaitOnFlagUntilTimeout>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007f7a:	2302      	movs	r3, #2
 8007f7c:	e104      	b.n	8008188 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d101      	bne.n	8007f8c <HAL_I2C_IsDeviceReady+0x50>
 8007f88:	2302      	movs	r3, #2
 8007f8a:	e0fd      	b.n	8008188 <HAL_I2C_IsDeviceReady+0x24c>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d007      	beq.n	8007fb2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 0201 	orr.w	r2, r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2224      	movs	r2, #36	; 0x24
 8007fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4a70      	ldr	r2, [pc, #448]	; (8008194 <HAL_I2C_IsDeviceReady+0x258>)
 8007fd4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fe4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	9300      	str	r3, [sp, #0]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f000 fa3a 	bl	800846c <I2C_WaitOnFlagUntilTimeout>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00d      	beq.n	800801a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800800c:	d103      	bne.n	8008016 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008014:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e0b6      	b.n	8008188 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800801a:	897b      	ldrh	r3, [r7, #10]
 800801c:	b2db      	uxtb	r3, r3
 800801e:	461a      	mov	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008028:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800802a:	f7fd f831 	bl	8005090 <HAL_GetTick>
 800802e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	f003 0302 	and.w	r3, r3, #2
 800803a:	2b02      	cmp	r3, #2
 800803c:	bf0c      	ite	eq
 800803e:	2301      	moveq	r3, #1
 8008040:	2300      	movne	r3, #0
 8008042:	b2db      	uxtb	r3, r3
 8008044:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	695b      	ldr	r3, [r3, #20]
 800804c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008054:	bf0c      	ite	eq
 8008056:	2301      	moveq	r3, #1
 8008058:	2300      	movne	r3, #0
 800805a:	b2db      	uxtb	r3, r3
 800805c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800805e:	e025      	b.n	80080ac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008060:	f7fd f816 	bl	8005090 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	429a      	cmp	r2, r3
 800806e:	d302      	bcc.n	8008076 <HAL_I2C_IsDeviceReady+0x13a>
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d103      	bne.n	800807e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	22a0      	movs	r2, #160	; 0xa0
 800807a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	695b      	ldr	r3, [r3, #20]
 8008084:	f003 0302 	and.w	r3, r3, #2
 8008088:	2b02      	cmp	r3, #2
 800808a:	bf0c      	ite	eq
 800808c:	2301      	moveq	r3, #1
 800808e:	2300      	movne	r3, #0
 8008090:	b2db      	uxtb	r3, r3
 8008092:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800809e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080a2:	bf0c      	ite	eq
 80080a4:	2301      	moveq	r3, #1
 80080a6:	2300      	movne	r3, #0
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	2ba0      	cmp	r3, #160	; 0xa0
 80080b6:	d005      	beq.n	80080c4 <HAL_I2C_IsDeviceReady+0x188>
 80080b8:	7dfb      	ldrb	r3, [r7, #23]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d102      	bne.n	80080c4 <HAL_I2C_IsDeviceReady+0x188>
 80080be:	7dbb      	ldrb	r3, [r7, #22]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d0cd      	beq.n	8008060 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2220      	movs	r2, #32
 80080c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	f003 0302 	and.w	r3, r3, #2
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d129      	bne.n	800812e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080ea:	2300      	movs	r3, #0
 80080ec:	613b      	str	r3, [r7, #16]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	695b      	ldr	r3, [r3, #20]
 80080f4:	613b      	str	r3, [r7, #16]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	613b      	str	r3, [r7, #16]
 80080fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	2319      	movs	r3, #25
 8008106:	2201      	movs	r2, #1
 8008108:	4921      	ldr	r1, [pc, #132]	; (8008190 <HAL_I2C_IsDeviceReady+0x254>)
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f000 f9ae 	bl	800846c <I2C_WaitOnFlagUntilTimeout>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e036      	b.n	8008188 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2220      	movs	r2, #32
 800811e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	e02c      	b.n	8008188 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800813c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008146:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	2319      	movs	r3, #25
 800814e:	2201      	movs	r2, #1
 8008150:	490f      	ldr	r1, [pc, #60]	; (8008190 <HAL_I2C_IsDeviceReady+0x254>)
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 f98a 	bl	800846c <I2C_WaitOnFlagUntilTimeout>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e012      	b.n	8008188 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	3301      	adds	r3, #1
 8008166:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	429a      	cmp	r2, r3
 800816e:	f4ff af32 	bcc.w	8007fd6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2220      	movs	r2, #32
 8008176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e000      	b.n	8008188 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8008186:	2302      	movs	r3, #2
  }
}
 8008188:	4618      	mov	r0, r3
 800818a:	3720      	adds	r7, #32
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	00100002 	.word	0x00100002
 8008194:	ffff0000 	.word	0xffff0000

08008198 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b088      	sub	sp, #32
 800819c:	af02      	add	r7, sp, #8
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	607a      	str	r2, [r7, #4]
 80081a2:	603b      	str	r3, [r7, #0]
 80081a4:	460b      	mov	r3, r1
 80081a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2b08      	cmp	r3, #8
 80081b2:	d006      	beq.n	80081c2 <I2C_MasterRequestWrite+0x2a>
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d003      	beq.n	80081c2 <I2C_MasterRequestWrite+0x2a>
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80081c0:	d108      	bne.n	80081d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081d0:	601a      	str	r2, [r3, #0]
 80081d2:	e00b      	b.n	80081ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d8:	2b12      	cmp	r3, #18
 80081da:	d107      	bne.n	80081ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 f937 	bl	800846c <I2C_WaitOnFlagUntilTimeout>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00d      	beq.n	8008220 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800820e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008212:	d103      	bne.n	800821c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800821a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e035      	b.n	800828c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008228:	d108      	bne.n	800823c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800822a:	897b      	ldrh	r3, [r7, #10]
 800822c:	b2db      	uxtb	r3, r3
 800822e:	461a      	mov	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008238:	611a      	str	r2, [r3, #16]
 800823a:	e01b      	b.n	8008274 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800823c:	897b      	ldrh	r3, [r7, #10]
 800823e:	11db      	asrs	r3, r3, #7
 8008240:	b2db      	uxtb	r3, r3
 8008242:	f003 0306 	and.w	r3, r3, #6
 8008246:	b2db      	uxtb	r3, r3
 8008248:	f063 030f 	orn	r3, r3, #15
 800824c:	b2da      	uxtb	r2, r3
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	490e      	ldr	r1, [pc, #56]	; (8008294 <I2C_MasterRequestWrite+0xfc>)
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 f95d 	bl	800851a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e010      	b.n	800828c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800826a:	897b      	ldrh	r3, [r7, #10]
 800826c:	b2da      	uxtb	r2, r3
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	4907      	ldr	r1, [pc, #28]	; (8008298 <I2C_MasterRequestWrite+0x100>)
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 f94d 	bl	800851a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d001      	beq.n	800828a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e000      	b.n	800828c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	00010008 	.word	0x00010008
 8008298:	00010002 	.word	0x00010002

0800829c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b088      	sub	sp, #32
 80082a0:	af02      	add	r7, sp, #8
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	4608      	mov	r0, r1
 80082a6:	4611      	mov	r1, r2
 80082a8:	461a      	mov	r2, r3
 80082aa:	4603      	mov	r3, r0
 80082ac:	817b      	strh	r3, [r7, #10]
 80082ae:	460b      	mov	r3, r1
 80082b0:	813b      	strh	r3, [r7, #8]
 80082b2:	4613      	mov	r3, r2
 80082b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80082c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	2200      	movs	r2, #0
 80082de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f000 f8c2 	bl	800846c <I2C_WaitOnFlagUntilTimeout>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00d      	beq.n	800830a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082fc:	d103      	bne.n	8008306 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008304:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e0aa      	b.n	8008460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800830a:	897b      	ldrh	r3, [r7, #10]
 800830c:	b2db      	uxtb	r3, r3
 800830e:	461a      	mov	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008318:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	6a3a      	ldr	r2, [r7, #32]
 800831e:	4952      	ldr	r1, [pc, #328]	; (8008468 <I2C_RequestMemoryRead+0x1cc>)
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f000 f8fa 	bl	800851a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e097      	b.n	8008460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008330:	2300      	movs	r3, #0
 8008332:	617b      	str	r3, [r7, #20]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	617b      	str	r3, [r7, #20]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	617b      	str	r3, [r7, #20]
 8008344:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008348:	6a39      	ldr	r1, [r7, #32]
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f000 f964 	bl	8008618 <I2C_WaitOnTXEFlagUntilTimeout>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00d      	beq.n	8008372 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800835a:	2b04      	cmp	r3, #4
 800835c:	d107      	bne.n	800836e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800836c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e076      	b.n	8008460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008372:	88fb      	ldrh	r3, [r7, #6]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d105      	bne.n	8008384 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008378:	893b      	ldrh	r3, [r7, #8]
 800837a:	b2da      	uxtb	r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	611a      	str	r2, [r3, #16]
 8008382:	e021      	b.n	80083c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008384:	893b      	ldrh	r3, [r7, #8]
 8008386:	0a1b      	lsrs	r3, r3, #8
 8008388:	b29b      	uxth	r3, r3
 800838a:	b2da      	uxtb	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008394:	6a39      	ldr	r1, [r7, #32]
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f000 f93e 	bl	8008618 <I2C_WaitOnTXEFlagUntilTimeout>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00d      	beq.n	80083be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d107      	bne.n	80083ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e050      	b.n	8008460 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083be:	893b      	ldrh	r3, [r7, #8]
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ca:	6a39      	ldr	r1, [r7, #32]
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 f923 	bl	8008618 <I2C_WaitOnTXEFlagUntilTimeout>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00d      	beq.n	80083f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083dc:	2b04      	cmp	r3, #4
 80083de:	d107      	bne.n	80083f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e035      	b.n	8008460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008402:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	2200      	movs	r2, #0
 800840c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f000 f82b 	bl	800846c <I2C_WaitOnFlagUntilTimeout>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00d      	beq.n	8008438 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800842a:	d103      	bne.n	8008434 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008432:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e013      	b.n	8008460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008438:	897b      	ldrh	r3, [r7, #10]
 800843a:	b2db      	uxtb	r3, r3
 800843c:	f043 0301 	orr.w	r3, r3, #1
 8008440:	b2da      	uxtb	r2, r3
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	6a3a      	ldr	r2, [r7, #32]
 800844c:	4906      	ldr	r1, [pc, #24]	; (8008468 <I2C_RequestMemoryRead+0x1cc>)
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f000 f863 	bl	800851a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e000      	b.n	8008460 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3718      	adds	r7, #24
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	00010002 	.word	0x00010002

0800846c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	603b      	str	r3, [r7, #0]
 8008478:	4613      	mov	r3, r2
 800847a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800847c:	e025      	b.n	80084ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008484:	d021      	beq.n	80084ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008486:	f7fc fe03 	bl	8005090 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	429a      	cmp	r2, r3
 8008494:	d302      	bcc.n	800849c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d116      	bne.n	80084ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2220      	movs	r2, #32
 80084a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b6:	f043 0220 	orr.w	r2, r3, #32
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e023      	b.n	8008512 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	0c1b      	lsrs	r3, r3, #16
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d10d      	bne.n	80084f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	43da      	mvns	r2, r3
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	4013      	ands	r3, r2
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	bf0c      	ite	eq
 80084e6:	2301      	moveq	r3, #1
 80084e8:	2300      	movne	r3, #0
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	461a      	mov	r2, r3
 80084ee:	e00c      	b.n	800850a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699b      	ldr	r3, [r3, #24]
 80084f6:	43da      	mvns	r2, r3
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	4013      	ands	r3, r2
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	bf0c      	ite	eq
 8008502:	2301      	moveq	r3, #1
 8008504:	2300      	movne	r3, #0
 8008506:	b2db      	uxtb	r3, r3
 8008508:	461a      	mov	r2, r3
 800850a:	79fb      	ldrb	r3, [r7, #7]
 800850c:	429a      	cmp	r2, r3
 800850e:	d0b6      	beq.n	800847e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b084      	sub	sp, #16
 800851e:	af00      	add	r7, sp, #0
 8008520:	60f8      	str	r0, [r7, #12]
 8008522:	60b9      	str	r1, [r7, #8]
 8008524:	607a      	str	r2, [r7, #4]
 8008526:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008528:	e051      	b.n	80085ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	695b      	ldr	r3, [r3, #20]
 8008530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008538:	d123      	bne.n	8008582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008548:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008552:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2200      	movs	r2, #0
 8008558:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2220      	movs	r2, #32
 800855e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856e:	f043 0204 	orr.w	r2, r3, #4
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e046      	b.n	8008610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008588:	d021      	beq.n	80085ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800858a:	f7fc fd81 	bl	8005090 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	429a      	cmp	r2, r3
 8008598:	d302      	bcc.n	80085a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d116      	bne.n	80085ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2220      	movs	r2, #32
 80085aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ba:	f043 0220 	orr.w	r2, r3, #32
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e020      	b.n	8008610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	0c1b      	lsrs	r3, r3, #16
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d10c      	bne.n	80085f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	695b      	ldr	r3, [r3, #20]
 80085de:	43da      	mvns	r2, r3
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	4013      	ands	r3, r2
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	bf14      	ite	ne
 80085ea:	2301      	movne	r3, #1
 80085ec:	2300      	moveq	r3, #0
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	e00b      	b.n	800860a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	699b      	ldr	r3, [r3, #24]
 80085f8:	43da      	mvns	r2, r3
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	4013      	ands	r3, r2
 80085fe:	b29b      	uxth	r3, r3
 8008600:	2b00      	cmp	r3, #0
 8008602:	bf14      	ite	ne
 8008604:	2301      	movne	r3, #1
 8008606:	2300      	moveq	r3, #0
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d18d      	bne.n	800852a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008624:	e02d      	b.n	8008682 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f000 f8ce 	bl	80087c8 <I2C_IsAcknowledgeFailed>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e02d      	b.n	8008692 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800863c:	d021      	beq.n	8008682 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800863e:	f7fc fd27 	bl	8005090 <HAL_GetTick>
 8008642:	4602      	mov	r2, r0
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	68ba      	ldr	r2, [r7, #8]
 800864a:	429a      	cmp	r2, r3
 800864c:	d302      	bcc.n	8008654 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d116      	bne.n	8008682 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2220      	movs	r2, #32
 800865e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	f043 0220 	orr.w	r2, r3, #32
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e007      	b.n	8008692 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800868c:	2b80      	cmp	r3, #128	; 0x80
 800868e:	d1ca      	bne.n	8008626 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b084      	sub	sp, #16
 800869e:	af00      	add	r7, sp, #0
 80086a0:	60f8      	str	r0, [r7, #12]
 80086a2:	60b9      	str	r1, [r7, #8]
 80086a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80086a6:	e02d      	b.n	8008704 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	f000 f88d 	bl	80087c8 <I2C_IsAcknowledgeFailed>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e02d      	b.n	8008714 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086be:	d021      	beq.n	8008704 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086c0:	f7fc fce6 	bl	8005090 <HAL_GetTick>
 80086c4:	4602      	mov	r2, r0
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d302      	bcc.n	80086d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d116      	bne.n	8008704 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2220      	movs	r2, #32
 80086e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f0:	f043 0220 	orr.w	r2, r3, #32
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e007      	b.n	8008714 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	f003 0304 	and.w	r3, r3, #4
 800870e:	2b04      	cmp	r3, #4
 8008710:	d1ca      	bne.n	80086a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3710      	adds	r7, #16
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008728:	e042      	b.n	80087b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	695b      	ldr	r3, [r3, #20]
 8008730:	f003 0310 	and.w	r3, r3, #16
 8008734:	2b10      	cmp	r3, #16
 8008736:	d119      	bne.n	800876c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f06f 0210 	mvn.w	r2, #16
 8008740:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2220      	movs	r2, #32
 800874c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	e029      	b.n	80087c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800876c:	f7fc fc90 	bl	8005090 <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	429a      	cmp	r2, r3
 800877a:	d302      	bcc.n	8008782 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d116      	bne.n	80087b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2220      	movs	r2, #32
 800878c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879c:	f043 0220 	orr.w	r2, r3, #32
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e007      	b.n	80087c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ba:	2b40      	cmp	r3, #64	; 0x40
 80087bc:	d1b5      	bne.n	800872a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087de:	d11b      	bne.n	8008818 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80087e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2220      	movs	r2, #32
 80087f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008804:	f043 0204 	orr.w	r2, r3, #4
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	e000      	b.n	800881a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b20      	cmp	r3, #32
 800883a:	d129      	bne.n	8008890 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2224      	movs	r2, #36	; 0x24
 8008840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f022 0201 	bic.w	r2, r2, #1
 8008852:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f022 0210 	bic.w	r2, r2, #16
 8008862:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	430a      	orrs	r2, r1
 8008872:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f042 0201 	orr.w	r2, r2, #1
 8008882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2220      	movs	r2, #32
 8008888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	e000      	b.n	8008892 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8008890:	2302      	movs	r3, #2
  }
}
 8008892:	4618      	mov	r0, r3
 8008894:	370c      	adds	r7, #12
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800889e:	b480      	push	{r7}
 80088a0:	b085      	sub	sp, #20
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80088a8:	2300      	movs	r3, #0
 80088aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b20      	cmp	r3, #32
 80088b6:	d12a      	bne.n	800890e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2224      	movs	r2, #36	; 0x24
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f022 0201 	bic.w	r2, r2, #1
 80088ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80088d8:	89fb      	ldrh	r3, [r7, #14]
 80088da:	f023 030f 	bic.w	r3, r3, #15
 80088de:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	89fb      	ldrh	r3, [r7, #14]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	89fa      	ldrh	r2, [r7, #14]
 80088f0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f042 0201 	orr.w	r2, r2, #1
 8008900:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2220      	movs	r2, #32
 8008906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	e000      	b.n	8008910 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800890e:	2302      	movs	r3, #2
  }
}
 8008910:	4618      	mov	r0, r3
 8008912:	3714      	adds	r7, #20
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d101      	bne.n	800892e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e0bf      	b.n	8008aae <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d106      	bne.n	8008948 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7fb fe9e 	bl	8004684 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2202      	movs	r2, #2
 800894c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	699a      	ldr	r2, [r3, #24]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800895e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6999      	ldr	r1, [r3, #24]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685a      	ldr	r2, [r3, #4]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008974:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	430a      	orrs	r2, r1
 8008982:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6899      	ldr	r1, [r3, #8]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	4b4a      	ldr	r3, [pc, #296]	; (8008ab8 <HAL_LTDC_Init+0x19c>)
 8008990:	400b      	ands	r3, r1
 8008992:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	041b      	lsls	r3, r3, #16
 800899a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6899      	ldr	r1, [r3, #8]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	699a      	ldr	r2, [r3, #24]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	431a      	orrs	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68d9      	ldr	r1, [r3, #12]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	4b3e      	ldr	r3, [pc, #248]	; (8008ab8 <HAL_LTDC_Init+0x19c>)
 80089be:	400b      	ands	r3, r1
 80089c0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	69db      	ldr	r3, [r3, #28]
 80089c6:	041b      	lsls	r3, r3, #16
 80089c8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68d9      	ldr	r1, [r3, #12]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a1a      	ldr	r2, [r3, #32]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	431a      	orrs	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	430a      	orrs	r2, r1
 80089de:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6919      	ldr	r1, [r3, #16]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	4b33      	ldr	r3, [pc, #204]	; (8008ab8 <HAL_LTDC_Init+0x19c>)
 80089ec:	400b      	ands	r3, r1
 80089ee:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f4:	041b      	lsls	r3, r3, #16
 80089f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6919      	ldr	r1, [r3, #16]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	431a      	orrs	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	6959      	ldr	r1, [r3, #20]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	4b27      	ldr	r3, [pc, #156]	; (8008ab8 <HAL_LTDC_Init+0x19c>)
 8008a1a:	400b      	ands	r3, r1
 8008a1c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a22:	041b      	lsls	r3, r3, #16
 8008a24:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6959      	ldr	r1, [r3, #20]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	431a      	orrs	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a42:	021b      	lsls	r3, r3, #8
 8008a44:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008a4c:	041b      	lsls	r3, r3, #16
 8008a4e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008a72:	431a      	orrs	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	430a      	orrs	r2, r1
 8008a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f042 0206 	orr.w	r2, r2, #6
 8008a8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	699a      	ldr	r2, [r3, #24]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f042 0201 	orr.w	r2, r2, #1
 8008a9a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	f000f800 	.word	0xf000f800

08008abc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f003 0304 	and.w	r3, r3, #4
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d023      	beq.n	8008b26 <HAL_LTDC_IRQHandler+0x6a>
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	f003 0304 	and.w	r3, r3, #4
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d01e      	beq.n	8008b26 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f022 0204 	bic.w	r2, r2, #4
 8008af6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2204      	movs	r2, #4
 8008afe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008b06:	f043 0201 	orr.w	r2, r3, #1
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2204      	movs	r2, #4
 8008b14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 f86f 	bl	8008c04 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f003 0302 	and.w	r3, r3, #2
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d023      	beq.n	8008b78 <HAL_LTDC_IRQHandler+0xbc>
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	f003 0302 	and.w	r3, r3, #2
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d01e      	beq.n	8008b78 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f022 0202 	bic.w	r2, r2, #2
 8008b48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2202      	movs	r2, #2
 8008b50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008b58:	f043 0202 	orr.w	r2, r3, #2
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2204      	movs	r2, #4
 8008b66:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f846 	bl	8008c04 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d01b      	beq.n	8008bba <HAL_LTDC_IRQHandler+0xfe>
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d016      	beq.n	8008bba <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f022 0201 	bic.w	r2, r2, #1
 8008b9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f00f fa0f 	bl	8017fd8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f003 0308 	and.w	r3, r3, #8
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d01b      	beq.n	8008bfc <HAL_LTDC_IRQHandler+0x140>
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	f003 0308 	and.w	r3, r3, #8
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d016      	beq.n	8008bfc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f022 0208 	bic.w	r2, r2, #8
 8008bdc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2208      	movs	r2, #8
 8008be4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f80e 	bl	8008c18 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008bfc:	bf00      	nop
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008c2c:	b5b0      	push	{r4, r5, r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d101      	bne.n	8008c46 <HAL_LTDC_ConfigLayer+0x1a>
 8008c42:	2302      	movs	r3, #2
 8008c44:	e02c      	b.n	8008ca0 <HAL_LTDC_ConfigLayer+0x74>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2202      	movs	r2, #2
 8008c52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2134      	movs	r1, #52	; 0x34
 8008c5c:	fb01 f303 	mul.w	r3, r1, r3
 8008c60:	4413      	add	r3, r2
 8008c62:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	4614      	mov	r4, r2
 8008c6a:	461d      	mov	r5, r3
 8008c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c78:	682b      	ldr	r3, [r5, #0]
 8008c7a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	68b9      	ldr	r1, [r7, #8]
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f000 f849 	bl	8008d18 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bdb0      	pop	{r4, r5, r7, pc}

08008ca8 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d101      	bne.n	8008cc0 <HAL_LTDC_ProgramLineEvent+0x18>
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	e023      	b.n	8008d08 <HAL_LTDC_ProgramLineEvent+0x60>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2202      	movs	r2, #2
 8008ccc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f022 0201 	bic.w	r2, r2, #1
 8008cde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8008ce0:	4a0c      	ldr	r2, [pc, #48]	; (8008d14 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f042 0201 	orr.w	r2, r2, #1
 8008cf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	40016800 	.word	0x40016800

08008d18 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b089      	sub	sp, #36	; 0x24
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	685a      	ldr	r2, [r3, #4]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	0c1b      	lsrs	r3, r3, #16
 8008d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d34:	4413      	add	r3, r2
 8008d36:	041b      	lsls	r3, r3, #16
 8008d38:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	01db      	lsls	r3, r3, #7
 8008d44:	4413      	add	r3, r2
 8008d46:	3384      	adds	r3, #132	; 0x84
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	6812      	ldr	r2, [r2, #0]
 8008d4e:	4611      	mov	r1, r2
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	01d2      	lsls	r2, r2, #7
 8008d54:	440a      	add	r2, r1
 8008d56:	3284      	adds	r2, #132	; 0x84
 8008d58:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008d5c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	0c1b      	lsrs	r3, r3, #16
 8008d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008d6e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008d70:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4619      	mov	r1, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	01db      	lsls	r3, r3, #7
 8008d7c:	440b      	add	r3, r1
 8008d7e:	3384      	adds	r3, #132	; 0x84
 8008d80:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008d86:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	68da      	ldr	r2, [r3, #12]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008d96:	4413      	add	r3, r2
 8008d98:	041b      	lsls	r3, r3, #16
 8008d9a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	461a      	mov	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	01db      	lsls	r3, r3, #7
 8008da6:	4413      	add	r3, r2
 8008da8:	3384      	adds	r3, #132	; 0x84
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	6812      	ldr	r2, [r2, #0]
 8008db0:	4611      	mov	r1, r2
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	01d2      	lsls	r2, r2, #7
 8008db6:	440a      	add	r2, r1
 8008db8:	3284      	adds	r2, #132	; 0x84
 8008dba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008dbe:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	689a      	ldr	r2, [r3, #8]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008dce:	4413      	add	r3, r2
 8008dd0:	1c5a      	adds	r2, r3, #1
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	01db      	lsls	r3, r3, #7
 8008ddc:	440b      	add	r3, r1
 8008dde:	3384      	adds	r3, #132	; 0x84
 8008de0:	4619      	mov	r1, r3
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	461a      	mov	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	01db      	lsls	r3, r3, #7
 8008df2:	4413      	add	r3, r2
 8008df4:	3384      	adds	r3, #132	; 0x84
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	6812      	ldr	r2, [r2, #0]
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	01d2      	lsls	r2, r2, #7
 8008e02:	440a      	add	r2, r1
 8008e04:	3284      	adds	r2, #132	; 0x84
 8008e06:	f023 0307 	bic.w	r3, r3, #7
 8008e0a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	461a      	mov	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	01db      	lsls	r3, r3, #7
 8008e16:	4413      	add	r3, r2
 8008e18:	3384      	adds	r3, #132	; 0x84
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008e28:	021b      	lsls	r3, r3, #8
 8008e2a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008e32:	041b      	lsls	r3, r3, #16
 8008e34:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	061b      	lsls	r3, r3, #24
 8008e3c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	461a      	mov	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	01db      	lsls	r3, r3, #7
 8008e48:	4413      	add	r3, r2
 8008e4a:	3384      	adds	r3, #132	; 0x84
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	461a      	mov	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	01db      	lsls	r3, r3, #7
 8008e58:	4413      	add	r3, r2
 8008e5a:	3384      	adds	r3, #132	; 0x84
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	2300      	movs	r3, #0
 8008e60:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e68:	461a      	mov	r2, r3
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	431a      	orrs	r2, r3
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	431a      	orrs	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4619      	mov	r1, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	01db      	lsls	r3, r3, #7
 8008e7c:	440b      	add	r3, r1
 8008e7e:	3384      	adds	r3, #132	; 0x84
 8008e80:	4619      	mov	r1, r3
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	01db      	lsls	r3, r3, #7
 8008e92:	4413      	add	r3, r2
 8008e94:	3384      	adds	r3, #132	; 0x84
 8008e96:	695b      	ldr	r3, [r3, #20]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	6812      	ldr	r2, [r2, #0]
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	01d2      	lsls	r2, r2, #7
 8008ea2:	440a      	add	r2, r1
 8008ea4:	3284      	adds	r2, #132	; 0x84
 8008ea6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008eaa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	01db      	lsls	r3, r3, #7
 8008eb6:	4413      	add	r3, r2
 8008eb8:	3384      	adds	r3, #132	; 0x84
 8008eba:	461a      	mov	r2, r3
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	01db      	lsls	r3, r3, #7
 8008ecc:	4413      	add	r3, r2
 8008ece:	3384      	adds	r3, #132	; 0x84
 8008ed0:	69db      	ldr	r3, [r3, #28]
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	6812      	ldr	r2, [r2, #0]
 8008ed6:	4611      	mov	r1, r2
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	01d2      	lsls	r2, r2, #7
 8008edc:	440a      	add	r2, r1
 8008ede:	3284      	adds	r2, #132	; 0x84
 8008ee0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008ee4:	f023 0307 	bic.w	r3, r3, #7
 8008ee8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	69da      	ldr	r2, [r3, #28]
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	68f9      	ldr	r1, [r7, #12]
 8008ef4:	6809      	ldr	r1, [r1, #0]
 8008ef6:	4608      	mov	r0, r1
 8008ef8:	6879      	ldr	r1, [r7, #4]
 8008efa:	01c9      	lsls	r1, r1, #7
 8008efc:	4401      	add	r1, r0
 8008efe:	3184      	adds	r1, #132	; 0x84
 8008f00:	4313      	orrs	r3, r2
 8008f02:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	461a      	mov	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	01db      	lsls	r3, r3, #7
 8008f0e:	4413      	add	r3, r2
 8008f10:	3384      	adds	r3, #132	; 0x84
 8008f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	01db      	lsls	r3, r3, #7
 8008f1e:	4413      	add	r3, r2
 8008f20:	3384      	adds	r3, #132	; 0x84
 8008f22:	461a      	mov	r2, r3
 8008f24:	2300      	movs	r3, #0
 8008f26:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	01db      	lsls	r3, r3, #7
 8008f32:	4413      	add	r3, r2
 8008f34:	3384      	adds	r3, #132	; 0x84
 8008f36:	461a      	mov	r2, r3
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d102      	bne.n	8008f4c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8008f46:	2304      	movs	r3, #4
 8008f48:	61fb      	str	r3, [r7, #28]
 8008f4a:	e01b      	b.n	8008f84 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d102      	bne.n	8008f5a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8008f54:	2303      	movs	r3, #3
 8008f56:	61fb      	str	r3, [r7, #28]
 8008f58:	e014      	b.n	8008f84 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	2b04      	cmp	r3, #4
 8008f60:	d00b      	beq.n	8008f7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d007      	beq.n	8008f7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008f6e:	2b03      	cmp	r3, #3
 8008f70:	d003      	beq.n	8008f7a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008f76:	2b07      	cmp	r3, #7
 8008f78:	d102      	bne.n	8008f80 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	61fb      	str	r3, [r7, #28]
 8008f7e:	e001      	b.n	8008f84 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8008f80:	2301      	movs	r3, #1
 8008f82:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	01db      	lsls	r3, r3, #7
 8008f8e:	4413      	add	r3, r2
 8008f90:	3384      	adds	r3, #132	; 0x84
 8008f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	6812      	ldr	r2, [r2, #0]
 8008f98:	4611      	mov	r1, r2
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	01d2      	lsls	r2, r2, #7
 8008f9e:	440a      	add	r2, r1
 8008fa0:	3284      	adds	r2, #132	; 0x84
 8008fa2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008fa6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fac:	69fa      	ldr	r2, [r7, #28]
 8008fae:	fb02 f303 	mul.w	r3, r2, r3
 8008fb2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	6859      	ldr	r1, [r3, #4]
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	1acb      	subs	r3, r1, r3
 8008fbe:	69f9      	ldr	r1, [r7, #28]
 8008fc0:	fb01 f303 	mul.w	r3, r1, r3
 8008fc4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008fc6:	68f9      	ldr	r1, [r7, #12]
 8008fc8:	6809      	ldr	r1, [r1, #0]
 8008fca:	4608      	mov	r0, r1
 8008fcc:	6879      	ldr	r1, [r7, #4]
 8008fce:	01c9      	lsls	r1, r1, #7
 8008fd0:	4401      	add	r1, r0
 8008fd2:	3184      	adds	r1, #132	; 0x84
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	01db      	lsls	r3, r3, #7
 8008fe2:	4413      	add	r3, r2
 8008fe4:	3384      	adds	r3, #132	; 0x84
 8008fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	6812      	ldr	r2, [r2, #0]
 8008fec:	4611      	mov	r1, r2
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	01d2      	lsls	r2, r2, #7
 8008ff2:	440a      	add	r2, r1
 8008ff4:	3284      	adds	r2, #132	; 0x84
 8008ff6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008ffa:	f023 0307 	bic.w	r3, r3, #7
 8008ffe:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	461a      	mov	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	01db      	lsls	r3, r3, #7
 800900a:	4413      	add	r3, r2
 800900c:	3384      	adds	r3, #132	; 0x84
 800900e:	461a      	mov	r2, r3
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009014:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	461a      	mov	r2, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	01db      	lsls	r3, r3, #7
 8009020:	4413      	add	r3, r2
 8009022:	3384      	adds	r3, #132	; 0x84
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	6812      	ldr	r2, [r2, #0]
 800902a:	4611      	mov	r1, r2
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	01d2      	lsls	r2, r2, #7
 8009030:	440a      	add	r2, r1
 8009032:	3284      	adds	r2, #132	; 0x84
 8009034:	f043 0301 	orr.w	r3, r3, #1
 8009038:	6013      	str	r3, [r2, #0]
}
 800903a:	bf00      	nop
 800903c:	3724      	adds	r7, #36	; 0x24
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009046:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009048:	b08f      	sub	sp, #60	; 0x3c
 800904a:	af0a      	add	r7, sp, #40	; 0x28
 800904c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e10f      	b.n	8009278 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d106      	bne.n	8009078 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f7fb fdbc 	bl	8004bf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2203      	movs	r2, #3
 800907c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009088:	2b00      	cmp	r3, #0
 800908a:	d102      	bne.n	8009092 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4618      	mov	r0, r3
 8009098:	f004 fd1f 	bl	800dada <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	603b      	str	r3, [r7, #0]
 80090a2:	687e      	ldr	r6, [r7, #4]
 80090a4:	466d      	mov	r5, sp
 80090a6:	f106 0410 	add.w	r4, r6, #16
 80090aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80090ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80090ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80090b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80090b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80090b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80090ba:	1d33      	adds	r3, r6, #4
 80090bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80090be:	6838      	ldr	r0, [r7, #0]
 80090c0:	f004 fcaa 	bl	800da18 <USB_CoreInit>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d005      	beq.n	80090d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2202      	movs	r2, #2
 80090ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e0d0      	b.n	8009278 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2100      	movs	r1, #0
 80090dc:	4618      	mov	r0, r3
 80090de:	f004 fd0d 	bl	800dafc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80090e2:	2300      	movs	r3, #0
 80090e4:	73fb      	strb	r3, [r7, #15]
 80090e6:	e04a      	b.n	800917e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80090e8:	7bfa      	ldrb	r2, [r7, #15]
 80090ea:	6879      	ldr	r1, [r7, #4]
 80090ec:	4613      	mov	r3, r2
 80090ee:	00db      	lsls	r3, r3, #3
 80090f0:	4413      	add	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	440b      	add	r3, r1
 80090f6:	333d      	adds	r3, #61	; 0x3d
 80090f8:	2201      	movs	r2, #1
 80090fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80090fc:	7bfa      	ldrb	r2, [r7, #15]
 80090fe:	6879      	ldr	r1, [r7, #4]
 8009100:	4613      	mov	r3, r2
 8009102:	00db      	lsls	r3, r3, #3
 8009104:	4413      	add	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	440b      	add	r3, r1
 800910a:	333c      	adds	r3, #60	; 0x3c
 800910c:	7bfa      	ldrb	r2, [r7, #15]
 800910e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009110:	7bfa      	ldrb	r2, [r7, #15]
 8009112:	7bfb      	ldrb	r3, [r7, #15]
 8009114:	b298      	uxth	r0, r3
 8009116:	6879      	ldr	r1, [r7, #4]
 8009118:	4613      	mov	r3, r2
 800911a:	00db      	lsls	r3, r3, #3
 800911c:	4413      	add	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	440b      	add	r3, r1
 8009122:	3344      	adds	r3, #68	; 0x44
 8009124:	4602      	mov	r2, r0
 8009126:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009128:	7bfa      	ldrb	r2, [r7, #15]
 800912a:	6879      	ldr	r1, [r7, #4]
 800912c:	4613      	mov	r3, r2
 800912e:	00db      	lsls	r3, r3, #3
 8009130:	4413      	add	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	440b      	add	r3, r1
 8009136:	3340      	adds	r3, #64	; 0x40
 8009138:	2200      	movs	r2, #0
 800913a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800913c:	7bfa      	ldrb	r2, [r7, #15]
 800913e:	6879      	ldr	r1, [r7, #4]
 8009140:	4613      	mov	r3, r2
 8009142:	00db      	lsls	r3, r3, #3
 8009144:	4413      	add	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	440b      	add	r3, r1
 800914a:	3348      	adds	r3, #72	; 0x48
 800914c:	2200      	movs	r2, #0
 800914e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009150:	7bfa      	ldrb	r2, [r7, #15]
 8009152:	6879      	ldr	r1, [r7, #4]
 8009154:	4613      	mov	r3, r2
 8009156:	00db      	lsls	r3, r3, #3
 8009158:	4413      	add	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	440b      	add	r3, r1
 800915e:	334c      	adds	r3, #76	; 0x4c
 8009160:	2200      	movs	r2, #0
 8009162:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009164:	7bfa      	ldrb	r2, [r7, #15]
 8009166:	6879      	ldr	r1, [r7, #4]
 8009168:	4613      	mov	r3, r2
 800916a:	00db      	lsls	r3, r3, #3
 800916c:	4413      	add	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	440b      	add	r3, r1
 8009172:	3354      	adds	r3, #84	; 0x54
 8009174:	2200      	movs	r2, #0
 8009176:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009178:	7bfb      	ldrb	r3, [r7, #15]
 800917a:	3301      	adds	r3, #1
 800917c:	73fb      	strb	r3, [r7, #15]
 800917e:	7bfa      	ldrb	r2, [r7, #15]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	429a      	cmp	r2, r3
 8009186:	d3af      	bcc.n	80090e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009188:	2300      	movs	r3, #0
 800918a:	73fb      	strb	r3, [r7, #15]
 800918c:	e044      	b.n	8009218 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800918e:	7bfa      	ldrb	r2, [r7, #15]
 8009190:	6879      	ldr	r1, [r7, #4]
 8009192:	4613      	mov	r3, r2
 8009194:	00db      	lsls	r3, r3, #3
 8009196:	4413      	add	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	440b      	add	r3, r1
 800919c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80091a0:	2200      	movs	r2, #0
 80091a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80091a4:	7bfa      	ldrb	r2, [r7, #15]
 80091a6:	6879      	ldr	r1, [r7, #4]
 80091a8:	4613      	mov	r3, r2
 80091aa:	00db      	lsls	r3, r3, #3
 80091ac:	4413      	add	r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	440b      	add	r3, r1
 80091b2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80091b6:	7bfa      	ldrb	r2, [r7, #15]
 80091b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80091ba:	7bfa      	ldrb	r2, [r7, #15]
 80091bc:	6879      	ldr	r1, [r7, #4]
 80091be:	4613      	mov	r3, r2
 80091c0:	00db      	lsls	r3, r3, #3
 80091c2:	4413      	add	r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	440b      	add	r3, r1
 80091c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80091cc:	2200      	movs	r2, #0
 80091ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80091d0:	7bfa      	ldrb	r2, [r7, #15]
 80091d2:	6879      	ldr	r1, [r7, #4]
 80091d4:	4613      	mov	r3, r2
 80091d6:	00db      	lsls	r3, r3, #3
 80091d8:	4413      	add	r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	440b      	add	r3, r1
 80091de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80091e2:	2200      	movs	r2, #0
 80091e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80091e6:	7bfa      	ldrb	r2, [r7, #15]
 80091e8:	6879      	ldr	r1, [r7, #4]
 80091ea:	4613      	mov	r3, r2
 80091ec:	00db      	lsls	r3, r3, #3
 80091ee:	4413      	add	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	440b      	add	r3, r1
 80091f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80091f8:	2200      	movs	r2, #0
 80091fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80091fc:	7bfa      	ldrb	r2, [r7, #15]
 80091fe:	6879      	ldr	r1, [r7, #4]
 8009200:	4613      	mov	r3, r2
 8009202:	00db      	lsls	r3, r3, #3
 8009204:	4413      	add	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	440b      	add	r3, r1
 800920a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800920e:	2200      	movs	r2, #0
 8009210:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009212:	7bfb      	ldrb	r3, [r7, #15]
 8009214:	3301      	adds	r3, #1
 8009216:	73fb      	strb	r3, [r7, #15]
 8009218:	7bfa      	ldrb	r2, [r7, #15]
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	429a      	cmp	r2, r3
 8009220:	d3b5      	bcc.n	800918e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	603b      	str	r3, [r7, #0]
 8009228:	687e      	ldr	r6, [r7, #4]
 800922a:	466d      	mov	r5, sp
 800922c:	f106 0410 	add.w	r4, r6, #16
 8009230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009238:	e894 0003 	ldmia.w	r4, {r0, r1}
 800923c:	e885 0003 	stmia.w	r5, {r0, r1}
 8009240:	1d33      	adds	r3, r6, #4
 8009242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009244:	6838      	ldr	r0, [r7, #0]
 8009246:	f004 fca5 	bl	800db94 <USB_DevInit>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d005      	beq.n	800925c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2202      	movs	r2, #2
 8009254:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	e00d      	b.n	8009278 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4618      	mov	r0, r3
 8009272:	f004 fe70 	bl	800df56 <USB_DevDisconnect>

  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3714      	adds	r7, #20
 800927c:	46bd      	mov	sp, r7
 800927e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009280 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d101      	bne.n	8009292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e267      	b.n	8009762 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 0301 	and.w	r3, r3, #1
 800929a:	2b00      	cmp	r3, #0
 800929c:	d075      	beq.n	800938a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800929e:	4b88      	ldr	r3, [pc, #544]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f003 030c 	and.w	r3, r3, #12
 80092a6:	2b04      	cmp	r3, #4
 80092a8:	d00c      	beq.n	80092c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80092aa:	4b85      	ldr	r3, [pc, #532]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80092b2:	2b08      	cmp	r3, #8
 80092b4:	d112      	bne.n	80092dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80092b6:	4b82      	ldr	r3, [pc, #520]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092c2:	d10b      	bne.n	80092dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092c4:	4b7e      	ldr	r3, [pc, #504]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d05b      	beq.n	8009388 <HAL_RCC_OscConfig+0x108>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d157      	bne.n	8009388 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	e242      	b.n	8009762 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092e4:	d106      	bne.n	80092f4 <HAL_RCC_OscConfig+0x74>
 80092e6:	4b76      	ldr	r3, [pc, #472]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a75      	ldr	r2, [pc, #468]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 80092ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092f0:	6013      	str	r3, [r2, #0]
 80092f2:	e01d      	b.n	8009330 <HAL_RCC_OscConfig+0xb0>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092fc:	d10c      	bne.n	8009318 <HAL_RCC_OscConfig+0x98>
 80092fe:	4b70      	ldr	r3, [pc, #448]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a6f      	ldr	r2, [pc, #444]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 8009304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009308:	6013      	str	r3, [r2, #0]
 800930a:	4b6d      	ldr	r3, [pc, #436]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a6c      	ldr	r2, [pc, #432]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 8009310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009314:	6013      	str	r3, [r2, #0]
 8009316:	e00b      	b.n	8009330 <HAL_RCC_OscConfig+0xb0>
 8009318:	4b69      	ldr	r3, [pc, #420]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a68      	ldr	r2, [pc, #416]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 800931e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009322:	6013      	str	r3, [r2, #0]
 8009324:	4b66      	ldr	r3, [pc, #408]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a65      	ldr	r2, [pc, #404]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 800932a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800932e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d013      	beq.n	8009360 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009338:	f7fb feaa 	bl	8005090 <HAL_GetTick>
 800933c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800933e:	e008      	b.n	8009352 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009340:	f7fb fea6 	bl	8005090 <HAL_GetTick>
 8009344:	4602      	mov	r2, r0
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	2b64      	cmp	r3, #100	; 0x64
 800934c:	d901      	bls.n	8009352 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e207      	b.n	8009762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009352:	4b5b      	ldr	r3, [pc, #364]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800935a:	2b00      	cmp	r3, #0
 800935c:	d0f0      	beq.n	8009340 <HAL_RCC_OscConfig+0xc0>
 800935e:	e014      	b.n	800938a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009360:	f7fb fe96 	bl	8005090 <HAL_GetTick>
 8009364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009366:	e008      	b.n	800937a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009368:	f7fb fe92 	bl	8005090 <HAL_GetTick>
 800936c:	4602      	mov	r2, r0
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	2b64      	cmp	r3, #100	; 0x64
 8009374:	d901      	bls.n	800937a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009376:	2303      	movs	r3, #3
 8009378:	e1f3      	b.n	8009762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800937a:	4b51      	ldr	r3, [pc, #324]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1f0      	bne.n	8009368 <HAL_RCC_OscConfig+0xe8>
 8009386:	e000      	b.n	800938a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 0302 	and.w	r3, r3, #2
 8009392:	2b00      	cmp	r3, #0
 8009394:	d063      	beq.n	800945e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009396:	4b4a      	ldr	r3, [pc, #296]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	f003 030c 	and.w	r3, r3, #12
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00b      	beq.n	80093ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80093a2:	4b47      	ldr	r3, [pc, #284]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80093aa:	2b08      	cmp	r3, #8
 80093ac:	d11c      	bne.n	80093e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80093ae:	4b44      	ldr	r3, [pc, #272]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d116      	bne.n	80093e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80093ba:	4b41      	ldr	r3, [pc, #260]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f003 0302 	and.w	r3, r3, #2
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d005      	beq.n	80093d2 <HAL_RCC_OscConfig+0x152>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d001      	beq.n	80093d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e1c7      	b.n	8009762 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093d2:	4b3b      	ldr	r3, [pc, #236]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	00db      	lsls	r3, r3, #3
 80093e0:	4937      	ldr	r1, [pc, #220]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80093e6:	e03a      	b.n	800945e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d020      	beq.n	8009432 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80093f0:	4b34      	ldr	r3, [pc, #208]	; (80094c4 <HAL_RCC_OscConfig+0x244>)
 80093f2:	2201      	movs	r2, #1
 80093f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f6:	f7fb fe4b 	bl	8005090 <HAL_GetTick>
 80093fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093fc:	e008      	b.n	8009410 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093fe:	f7fb fe47 	bl	8005090 <HAL_GetTick>
 8009402:	4602      	mov	r2, r0
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	1ad3      	subs	r3, r2, r3
 8009408:	2b02      	cmp	r3, #2
 800940a:	d901      	bls.n	8009410 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800940c:	2303      	movs	r3, #3
 800940e:	e1a8      	b.n	8009762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009410:	4b2b      	ldr	r3, [pc, #172]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 0302 	and.w	r3, r3, #2
 8009418:	2b00      	cmp	r3, #0
 800941a:	d0f0      	beq.n	80093fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800941c:	4b28      	ldr	r3, [pc, #160]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	00db      	lsls	r3, r3, #3
 800942a:	4925      	ldr	r1, [pc, #148]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 800942c:	4313      	orrs	r3, r2
 800942e:	600b      	str	r3, [r1, #0]
 8009430:	e015      	b.n	800945e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009432:	4b24      	ldr	r3, [pc, #144]	; (80094c4 <HAL_RCC_OscConfig+0x244>)
 8009434:	2200      	movs	r2, #0
 8009436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009438:	f7fb fe2a 	bl	8005090 <HAL_GetTick>
 800943c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800943e:	e008      	b.n	8009452 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009440:	f7fb fe26 	bl	8005090 <HAL_GetTick>
 8009444:	4602      	mov	r2, r0
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	2b02      	cmp	r3, #2
 800944c:	d901      	bls.n	8009452 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800944e:	2303      	movs	r3, #3
 8009450:	e187      	b.n	8009762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009452:	4b1b      	ldr	r3, [pc, #108]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0302 	and.w	r3, r3, #2
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1f0      	bne.n	8009440 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 0308 	and.w	r3, r3, #8
 8009466:	2b00      	cmp	r3, #0
 8009468:	d036      	beq.n	80094d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	695b      	ldr	r3, [r3, #20]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d016      	beq.n	80094a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009472:	4b15      	ldr	r3, [pc, #84]	; (80094c8 <HAL_RCC_OscConfig+0x248>)
 8009474:	2201      	movs	r2, #1
 8009476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009478:	f7fb fe0a 	bl	8005090 <HAL_GetTick>
 800947c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800947e:	e008      	b.n	8009492 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009480:	f7fb fe06 	bl	8005090 <HAL_GetTick>
 8009484:	4602      	mov	r2, r0
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	1ad3      	subs	r3, r2, r3
 800948a:	2b02      	cmp	r3, #2
 800948c:	d901      	bls.n	8009492 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800948e:	2303      	movs	r3, #3
 8009490:	e167      	b.n	8009762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009492:	4b0b      	ldr	r3, [pc, #44]	; (80094c0 <HAL_RCC_OscConfig+0x240>)
 8009494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009496:	f003 0302 	and.w	r3, r3, #2
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0f0      	beq.n	8009480 <HAL_RCC_OscConfig+0x200>
 800949e:	e01b      	b.n	80094d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80094a0:	4b09      	ldr	r3, [pc, #36]	; (80094c8 <HAL_RCC_OscConfig+0x248>)
 80094a2:	2200      	movs	r2, #0
 80094a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094a6:	f7fb fdf3 	bl	8005090 <HAL_GetTick>
 80094aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80094ac:	e00e      	b.n	80094cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80094ae:	f7fb fdef 	bl	8005090 <HAL_GetTick>
 80094b2:	4602      	mov	r2, r0
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d907      	bls.n	80094cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	e150      	b.n	8009762 <HAL_RCC_OscConfig+0x4e2>
 80094c0:	40023800 	.word	0x40023800
 80094c4:	42470000 	.word	0x42470000
 80094c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80094cc:	4b88      	ldr	r3, [pc, #544]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 80094ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094d0:	f003 0302 	and.w	r3, r3, #2
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1ea      	bne.n	80094ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f000 8097 	beq.w	8009614 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094e6:	2300      	movs	r3, #0
 80094e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094ea:	4b81      	ldr	r3, [pc, #516]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 80094ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10f      	bne.n	8009516 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094f6:	2300      	movs	r3, #0
 80094f8:	60bb      	str	r3, [r7, #8]
 80094fa:	4b7d      	ldr	r3, [pc, #500]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 80094fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fe:	4a7c      	ldr	r2, [pc, #496]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 8009500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009504:	6413      	str	r3, [r2, #64]	; 0x40
 8009506:	4b7a      	ldr	r3, [pc, #488]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 8009508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800950e:	60bb      	str	r3, [r7, #8]
 8009510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009512:	2301      	movs	r3, #1
 8009514:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009516:	4b77      	ldr	r3, [pc, #476]	; (80096f4 <HAL_RCC_OscConfig+0x474>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800951e:	2b00      	cmp	r3, #0
 8009520:	d118      	bne.n	8009554 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009522:	4b74      	ldr	r3, [pc, #464]	; (80096f4 <HAL_RCC_OscConfig+0x474>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a73      	ldr	r2, [pc, #460]	; (80096f4 <HAL_RCC_OscConfig+0x474>)
 8009528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800952c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800952e:	f7fb fdaf 	bl	8005090 <HAL_GetTick>
 8009532:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009534:	e008      	b.n	8009548 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009536:	f7fb fdab 	bl	8005090 <HAL_GetTick>
 800953a:	4602      	mov	r2, r0
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	1ad3      	subs	r3, r2, r3
 8009540:	2b02      	cmp	r3, #2
 8009542:	d901      	bls.n	8009548 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009544:	2303      	movs	r3, #3
 8009546:	e10c      	b.n	8009762 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009548:	4b6a      	ldr	r3, [pc, #424]	; (80096f4 <HAL_RCC_OscConfig+0x474>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009550:	2b00      	cmp	r3, #0
 8009552:	d0f0      	beq.n	8009536 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d106      	bne.n	800956a <HAL_RCC_OscConfig+0x2ea>
 800955c:	4b64      	ldr	r3, [pc, #400]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 800955e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009560:	4a63      	ldr	r2, [pc, #396]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 8009562:	f043 0301 	orr.w	r3, r3, #1
 8009566:	6713      	str	r3, [r2, #112]	; 0x70
 8009568:	e01c      	b.n	80095a4 <HAL_RCC_OscConfig+0x324>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	2b05      	cmp	r3, #5
 8009570:	d10c      	bne.n	800958c <HAL_RCC_OscConfig+0x30c>
 8009572:	4b5f      	ldr	r3, [pc, #380]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 8009574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009576:	4a5e      	ldr	r2, [pc, #376]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 8009578:	f043 0304 	orr.w	r3, r3, #4
 800957c:	6713      	str	r3, [r2, #112]	; 0x70
 800957e:	4b5c      	ldr	r3, [pc, #368]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 8009580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009582:	4a5b      	ldr	r2, [pc, #364]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 8009584:	f043 0301 	orr.w	r3, r3, #1
 8009588:	6713      	str	r3, [r2, #112]	; 0x70
 800958a:	e00b      	b.n	80095a4 <HAL_RCC_OscConfig+0x324>
 800958c:	4b58      	ldr	r3, [pc, #352]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 800958e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009590:	4a57      	ldr	r2, [pc, #348]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 8009592:	f023 0301 	bic.w	r3, r3, #1
 8009596:	6713      	str	r3, [r2, #112]	; 0x70
 8009598:	4b55      	ldr	r3, [pc, #340]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 800959a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959c:	4a54      	ldr	r2, [pc, #336]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 800959e:	f023 0304 	bic.w	r3, r3, #4
 80095a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d015      	beq.n	80095d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095ac:	f7fb fd70 	bl	8005090 <HAL_GetTick>
 80095b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095b2:	e00a      	b.n	80095ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095b4:	f7fb fd6c 	bl	8005090 <HAL_GetTick>
 80095b8:	4602      	mov	r2, r0
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	f241 3288 	movw	r2, #5000	; 0x1388
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d901      	bls.n	80095ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e0cb      	b.n	8009762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095ca:	4b49      	ldr	r3, [pc, #292]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 80095cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ce:	f003 0302 	and.w	r3, r3, #2
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d0ee      	beq.n	80095b4 <HAL_RCC_OscConfig+0x334>
 80095d6:	e014      	b.n	8009602 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095d8:	f7fb fd5a 	bl	8005090 <HAL_GetTick>
 80095dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095de:	e00a      	b.n	80095f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095e0:	f7fb fd56 	bl	8005090 <HAL_GetTick>
 80095e4:	4602      	mov	r2, r0
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d901      	bls.n	80095f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80095f2:	2303      	movs	r3, #3
 80095f4:	e0b5      	b.n	8009762 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095f6:	4b3e      	ldr	r3, [pc, #248]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 80095f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095fa:	f003 0302 	and.w	r3, r3, #2
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1ee      	bne.n	80095e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009602:	7dfb      	ldrb	r3, [r7, #23]
 8009604:	2b01      	cmp	r3, #1
 8009606:	d105      	bne.n	8009614 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009608:	4b39      	ldr	r3, [pc, #228]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 800960a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960c:	4a38      	ldr	r2, [pc, #224]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 800960e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009612:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 80a1 	beq.w	8009760 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800961e:	4b34      	ldr	r3, [pc, #208]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f003 030c 	and.w	r3, r3, #12
 8009626:	2b08      	cmp	r3, #8
 8009628:	d05c      	beq.n	80096e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	2b02      	cmp	r3, #2
 8009630:	d141      	bne.n	80096b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009632:	4b31      	ldr	r3, [pc, #196]	; (80096f8 <HAL_RCC_OscConfig+0x478>)
 8009634:	2200      	movs	r2, #0
 8009636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009638:	f7fb fd2a 	bl	8005090 <HAL_GetTick>
 800963c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800963e:	e008      	b.n	8009652 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009640:	f7fb fd26 	bl	8005090 <HAL_GetTick>
 8009644:	4602      	mov	r2, r0
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	2b02      	cmp	r3, #2
 800964c:	d901      	bls.n	8009652 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800964e:	2303      	movs	r3, #3
 8009650:	e087      	b.n	8009762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009652:	4b27      	ldr	r3, [pc, #156]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1f0      	bne.n	8009640 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	69da      	ldr	r2, [r3, #28]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	431a      	orrs	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966c:	019b      	lsls	r3, r3, #6
 800966e:	431a      	orrs	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009674:	085b      	lsrs	r3, r3, #1
 8009676:	3b01      	subs	r3, #1
 8009678:	041b      	lsls	r3, r3, #16
 800967a:	431a      	orrs	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009680:	061b      	lsls	r3, r3, #24
 8009682:	491b      	ldr	r1, [pc, #108]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 8009684:	4313      	orrs	r3, r2
 8009686:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009688:	4b1b      	ldr	r3, [pc, #108]	; (80096f8 <HAL_RCC_OscConfig+0x478>)
 800968a:	2201      	movs	r2, #1
 800968c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800968e:	f7fb fcff 	bl	8005090 <HAL_GetTick>
 8009692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009694:	e008      	b.n	80096a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009696:	f7fb fcfb 	bl	8005090 <HAL_GetTick>
 800969a:	4602      	mov	r2, r0
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	1ad3      	subs	r3, r2, r3
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d901      	bls.n	80096a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80096a4:	2303      	movs	r3, #3
 80096a6:	e05c      	b.n	8009762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096a8:	4b11      	ldr	r3, [pc, #68]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d0f0      	beq.n	8009696 <HAL_RCC_OscConfig+0x416>
 80096b4:	e054      	b.n	8009760 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096b6:	4b10      	ldr	r3, [pc, #64]	; (80096f8 <HAL_RCC_OscConfig+0x478>)
 80096b8:	2200      	movs	r2, #0
 80096ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096bc:	f7fb fce8 	bl	8005090 <HAL_GetTick>
 80096c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096c2:	e008      	b.n	80096d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096c4:	f7fb fce4 	bl	8005090 <HAL_GetTick>
 80096c8:	4602      	mov	r2, r0
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	1ad3      	subs	r3, r2, r3
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d901      	bls.n	80096d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80096d2:	2303      	movs	r3, #3
 80096d4:	e045      	b.n	8009762 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096d6:	4b06      	ldr	r3, [pc, #24]	; (80096f0 <HAL_RCC_OscConfig+0x470>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1f0      	bne.n	80096c4 <HAL_RCC_OscConfig+0x444>
 80096e2:	e03d      	b.n	8009760 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d107      	bne.n	80096fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80096ec:	2301      	movs	r3, #1
 80096ee:	e038      	b.n	8009762 <HAL_RCC_OscConfig+0x4e2>
 80096f0:	40023800 	.word	0x40023800
 80096f4:	40007000 	.word	0x40007000
 80096f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80096fc:	4b1b      	ldr	r3, [pc, #108]	; (800976c <HAL_RCC_OscConfig+0x4ec>)
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d028      	beq.n	800975c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009714:	429a      	cmp	r2, r3
 8009716:	d121      	bne.n	800975c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009722:	429a      	cmp	r2, r3
 8009724:	d11a      	bne.n	800975c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800972c:	4013      	ands	r3, r2
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009732:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009734:	4293      	cmp	r3, r2
 8009736:	d111      	bne.n	800975c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009742:	085b      	lsrs	r3, r3, #1
 8009744:	3b01      	subs	r3, #1
 8009746:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009748:	429a      	cmp	r2, r3
 800974a:	d107      	bne.n	800975c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009756:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009758:	429a      	cmp	r2, r3
 800975a:	d001      	beq.n	8009760 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e000      	b.n	8009762 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3718      	adds	r7, #24
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	40023800 	.word	0x40023800

08009770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d101      	bne.n	8009784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e0cc      	b.n	800991e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009784:	4b68      	ldr	r3, [pc, #416]	; (8009928 <HAL_RCC_ClockConfig+0x1b8>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 030f 	and.w	r3, r3, #15
 800978c:	683a      	ldr	r2, [r7, #0]
 800978e:	429a      	cmp	r2, r3
 8009790:	d90c      	bls.n	80097ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009792:	4b65      	ldr	r3, [pc, #404]	; (8009928 <HAL_RCC_ClockConfig+0x1b8>)
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	b2d2      	uxtb	r2, r2
 8009798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800979a:	4b63      	ldr	r3, [pc, #396]	; (8009928 <HAL_RCC_ClockConfig+0x1b8>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 030f 	and.w	r3, r3, #15
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d001      	beq.n	80097ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e0b8      	b.n	800991e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f003 0302 	and.w	r3, r3, #2
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d020      	beq.n	80097fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f003 0304 	and.w	r3, r3, #4
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d005      	beq.n	80097d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80097c4:	4b59      	ldr	r3, [pc, #356]	; (800992c <HAL_RCC_ClockConfig+0x1bc>)
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	4a58      	ldr	r2, [pc, #352]	; (800992c <HAL_RCC_ClockConfig+0x1bc>)
 80097ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80097ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f003 0308 	and.w	r3, r3, #8
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d005      	beq.n	80097e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80097dc:	4b53      	ldr	r3, [pc, #332]	; (800992c <HAL_RCC_ClockConfig+0x1bc>)
 80097de:	689b      	ldr	r3, [r3, #8]
 80097e0:	4a52      	ldr	r2, [pc, #328]	; (800992c <HAL_RCC_ClockConfig+0x1bc>)
 80097e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80097e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097e8:	4b50      	ldr	r3, [pc, #320]	; (800992c <HAL_RCC_ClockConfig+0x1bc>)
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	494d      	ldr	r1, [pc, #308]	; (800992c <HAL_RCC_ClockConfig+0x1bc>)
 80097f6:	4313      	orrs	r3, r2
 80097f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	2b00      	cmp	r3, #0
 8009804:	d044      	beq.n	8009890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	2b01      	cmp	r3, #1
 800980c:	d107      	bne.n	800981e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800980e:	4b47      	ldr	r3, [pc, #284]	; (800992c <HAL_RCC_ClockConfig+0x1bc>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009816:	2b00      	cmp	r3, #0
 8009818:	d119      	bne.n	800984e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	e07f      	b.n	800991e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	2b02      	cmp	r3, #2
 8009824:	d003      	beq.n	800982e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800982a:	2b03      	cmp	r3, #3
 800982c:	d107      	bne.n	800983e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800982e:	4b3f      	ldr	r3, [pc, #252]	; (800992c <HAL_RCC_ClockConfig+0x1bc>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009836:	2b00      	cmp	r3, #0
 8009838:	d109      	bne.n	800984e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	e06f      	b.n	800991e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800983e:	4b3b      	ldr	r3, [pc, #236]	; (800992c <HAL_RCC_ClockConfig+0x1bc>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 0302 	and.w	r3, r3, #2
 8009846:	2b00      	cmp	r3, #0
 8009848:	d101      	bne.n	800984e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e067      	b.n	800991e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800984e:	4b37      	ldr	r3, [pc, #220]	; (800992c <HAL_RCC_ClockConfig+0x1bc>)
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	f023 0203 	bic.w	r2, r3, #3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	4934      	ldr	r1, [pc, #208]	; (800992c <HAL_RCC_ClockConfig+0x1bc>)
 800985c:	4313      	orrs	r3, r2
 800985e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009860:	f7fb fc16 	bl	8005090 <HAL_GetTick>
 8009864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009866:	e00a      	b.n	800987e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009868:	f7fb fc12 	bl	8005090 <HAL_GetTick>
 800986c:	4602      	mov	r2, r0
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	1ad3      	subs	r3, r2, r3
 8009872:	f241 3288 	movw	r2, #5000	; 0x1388
 8009876:	4293      	cmp	r3, r2
 8009878:	d901      	bls.n	800987e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800987a:	2303      	movs	r3, #3
 800987c:	e04f      	b.n	800991e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800987e:	4b2b      	ldr	r3, [pc, #172]	; (800992c <HAL_RCC_ClockConfig+0x1bc>)
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	f003 020c 	and.w	r2, r3, #12
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	429a      	cmp	r2, r3
 800988e:	d1eb      	bne.n	8009868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009890:	4b25      	ldr	r3, [pc, #148]	; (8009928 <HAL_RCC_ClockConfig+0x1b8>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 030f 	and.w	r3, r3, #15
 8009898:	683a      	ldr	r2, [r7, #0]
 800989a:	429a      	cmp	r2, r3
 800989c:	d20c      	bcs.n	80098b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800989e:	4b22      	ldr	r3, [pc, #136]	; (8009928 <HAL_RCC_ClockConfig+0x1b8>)
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	b2d2      	uxtb	r2, r2
 80098a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80098a6:	4b20      	ldr	r3, [pc, #128]	; (8009928 <HAL_RCC_ClockConfig+0x1b8>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f003 030f 	and.w	r3, r3, #15
 80098ae:	683a      	ldr	r2, [r7, #0]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d001      	beq.n	80098b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	e032      	b.n	800991e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 0304 	and.w	r3, r3, #4
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d008      	beq.n	80098d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80098c4:	4b19      	ldr	r3, [pc, #100]	; (800992c <HAL_RCC_ClockConfig+0x1bc>)
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	4916      	ldr	r1, [pc, #88]	; (800992c <HAL_RCC_ClockConfig+0x1bc>)
 80098d2:	4313      	orrs	r3, r2
 80098d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 0308 	and.w	r3, r3, #8
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d009      	beq.n	80098f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80098e2:	4b12      	ldr	r3, [pc, #72]	; (800992c <HAL_RCC_ClockConfig+0x1bc>)
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	00db      	lsls	r3, r3, #3
 80098f0:	490e      	ldr	r1, [pc, #56]	; (800992c <HAL_RCC_ClockConfig+0x1bc>)
 80098f2:	4313      	orrs	r3, r2
 80098f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80098f6:	f000 f82d 	bl	8009954 <HAL_RCC_GetSysClockFreq>
 80098fa:	4602      	mov	r2, r0
 80098fc:	4b0b      	ldr	r3, [pc, #44]	; (800992c <HAL_RCC_ClockConfig+0x1bc>)
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	091b      	lsrs	r3, r3, #4
 8009902:	f003 030f 	and.w	r3, r3, #15
 8009906:	490a      	ldr	r1, [pc, #40]	; (8009930 <HAL_RCC_ClockConfig+0x1c0>)
 8009908:	5ccb      	ldrb	r3, [r1, r3]
 800990a:	fa22 f303 	lsr.w	r3, r2, r3
 800990e:	4a09      	ldr	r2, [pc, #36]	; (8009934 <HAL_RCC_ClockConfig+0x1c4>)
 8009910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009912:	4b09      	ldr	r3, [pc, #36]	; (8009938 <HAL_RCC_ClockConfig+0x1c8>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4618      	mov	r0, r3
 8009918:	f7fb fa5a 	bl	8004dd0 <HAL_InitTick>

  return HAL_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	40023c00 	.word	0x40023c00
 800992c:	40023800 	.word	0x40023800
 8009930:	0802bb08 	.word	0x0802bb08
 8009934:	20000008 	.word	0x20000008
 8009938:	2000000c 	.word	0x2000000c

0800993c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800993c:	b480      	push	{r7}
 800993e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8009940:	4b03      	ldr	r3, [pc, #12]	; (8009950 <HAL_RCC_EnableCSS+0x14>)
 8009942:	2201      	movs	r2, #1
 8009944:	601a      	str	r2, [r3, #0]
}
 8009946:	bf00      	nop
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr
 8009950:	4247004c 	.word	0x4247004c

08009954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009958:	b094      	sub	sp, #80	; 0x50
 800995a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800995c:	2300      	movs	r3, #0
 800995e:	647b      	str	r3, [r7, #68]	; 0x44
 8009960:	2300      	movs	r3, #0
 8009962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009964:	2300      	movs	r3, #0
 8009966:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009968:	2300      	movs	r3, #0
 800996a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800996c:	4b79      	ldr	r3, [pc, #484]	; (8009b54 <HAL_RCC_GetSysClockFreq+0x200>)
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	f003 030c 	and.w	r3, r3, #12
 8009974:	2b08      	cmp	r3, #8
 8009976:	d00d      	beq.n	8009994 <HAL_RCC_GetSysClockFreq+0x40>
 8009978:	2b08      	cmp	r3, #8
 800997a:	f200 80e1 	bhi.w	8009b40 <HAL_RCC_GetSysClockFreq+0x1ec>
 800997e:	2b00      	cmp	r3, #0
 8009980:	d002      	beq.n	8009988 <HAL_RCC_GetSysClockFreq+0x34>
 8009982:	2b04      	cmp	r3, #4
 8009984:	d003      	beq.n	800998e <HAL_RCC_GetSysClockFreq+0x3a>
 8009986:	e0db      	b.n	8009b40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009988:	4b73      	ldr	r3, [pc, #460]	; (8009b58 <HAL_RCC_GetSysClockFreq+0x204>)
 800998a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800998c:	e0db      	b.n	8009b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800998e:	4b73      	ldr	r3, [pc, #460]	; (8009b5c <HAL_RCC_GetSysClockFreq+0x208>)
 8009990:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009992:	e0d8      	b.n	8009b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009994:	4b6f      	ldr	r3, [pc, #444]	; (8009b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800999c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800999e:	4b6d      	ldr	r3, [pc, #436]	; (8009b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d063      	beq.n	8009a72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80099aa:	4b6a      	ldr	r3, [pc, #424]	; (8009b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	099b      	lsrs	r3, r3, #6
 80099b0:	2200      	movs	r2, #0
 80099b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80099b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80099b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099bc:	633b      	str	r3, [r7, #48]	; 0x30
 80099be:	2300      	movs	r3, #0
 80099c0:	637b      	str	r3, [r7, #52]	; 0x34
 80099c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80099c6:	4622      	mov	r2, r4
 80099c8:	462b      	mov	r3, r5
 80099ca:	f04f 0000 	mov.w	r0, #0
 80099ce:	f04f 0100 	mov.w	r1, #0
 80099d2:	0159      	lsls	r1, r3, #5
 80099d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80099d8:	0150      	lsls	r0, r2, #5
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	4621      	mov	r1, r4
 80099e0:	1a51      	subs	r1, r2, r1
 80099e2:	6139      	str	r1, [r7, #16]
 80099e4:	4629      	mov	r1, r5
 80099e6:	eb63 0301 	sbc.w	r3, r3, r1
 80099ea:	617b      	str	r3, [r7, #20]
 80099ec:	f04f 0200 	mov.w	r2, #0
 80099f0:	f04f 0300 	mov.w	r3, #0
 80099f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80099f8:	4659      	mov	r1, fp
 80099fa:	018b      	lsls	r3, r1, #6
 80099fc:	4651      	mov	r1, sl
 80099fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009a02:	4651      	mov	r1, sl
 8009a04:	018a      	lsls	r2, r1, #6
 8009a06:	4651      	mov	r1, sl
 8009a08:	ebb2 0801 	subs.w	r8, r2, r1
 8009a0c:	4659      	mov	r1, fp
 8009a0e:	eb63 0901 	sbc.w	r9, r3, r1
 8009a12:	f04f 0200 	mov.w	r2, #0
 8009a16:	f04f 0300 	mov.w	r3, #0
 8009a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009a26:	4690      	mov	r8, r2
 8009a28:	4699      	mov	r9, r3
 8009a2a:	4623      	mov	r3, r4
 8009a2c:	eb18 0303 	adds.w	r3, r8, r3
 8009a30:	60bb      	str	r3, [r7, #8]
 8009a32:	462b      	mov	r3, r5
 8009a34:	eb49 0303 	adc.w	r3, r9, r3
 8009a38:	60fb      	str	r3, [r7, #12]
 8009a3a:	f04f 0200 	mov.w	r2, #0
 8009a3e:	f04f 0300 	mov.w	r3, #0
 8009a42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009a46:	4629      	mov	r1, r5
 8009a48:	024b      	lsls	r3, r1, #9
 8009a4a:	4621      	mov	r1, r4
 8009a4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009a50:	4621      	mov	r1, r4
 8009a52:	024a      	lsls	r2, r1, #9
 8009a54:	4610      	mov	r0, r2
 8009a56:	4619      	mov	r1, r3
 8009a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a64:	f7f7 f852 	bl	8000b0c <__aeabi_uldivmod>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a70:	e058      	b.n	8009b24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009a72:	4b38      	ldr	r3, [pc, #224]	; (8009b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	099b      	lsrs	r3, r3, #6
 8009a78:	2200      	movs	r2, #0
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	4611      	mov	r1, r2
 8009a7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009a82:	623b      	str	r3, [r7, #32]
 8009a84:	2300      	movs	r3, #0
 8009a86:	627b      	str	r3, [r7, #36]	; 0x24
 8009a88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009a8c:	4642      	mov	r2, r8
 8009a8e:	464b      	mov	r3, r9
 8009a90:	f04f 0000 	mov.w	r0, #0
 8009a94:	f04f 0100 	mov.w	r1, #0
 8009a98:	0159      	lsls	r1, r3, #5
 8009a9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009a9e:	0150      	lsls	r0, r2, #5
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	4641      	mov	r1, r8
 8009aa6:	ebb2 0a01 	subs.w	sl, r2, r1
 8009aaa:	4649      	mov	r1, r9
 8009aac:	eb63 0b01 	sbc.w	fp, r3, r1
 8009ab0:	f04f 0200 	mov.w	r2, #0
 8009ab4:	f04f 0300 	mov.w	r3, #0
 8009ab8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009abc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009ac0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009ac4:	ebb2 040a 	subs.w	r4, r2, sl
 8009ac8:	eb63 050b 	sbc.w	r5, r3, fp
 8009acc:	f04f 0200 	mov.w	r2, #0
 8009ad0:	f04f 0300 	mov.w	r3, #0
 8009ad4:	00eb      	lsls	r3, r5, #3
 8009ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ada:	00e2      	lsls	r2, r4, #3
 8009adc:	4614      	mov	r4, r2
 8009ade:	461d      	mov	r5, r3
 8009ae0:	4643      	mov	r3, r8
 8009ae2:	18e3      	adds	r3, r4, r3
 8009ae4:	603b      	str	r3, [r7, #0]
 8009ae6:	464b      	mov	r3, r9
 8009ae8:	eb45 0303 	adc.w	r3, r5, r3
 8009aec:	607b      	str	r3, [r7, #4]
 8009aee:	f04f 0200 	mov.w	r2, #0
 8009af2:	f04f 0300 	mov.w	r3, #0
 8009af6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009afa:	4629      	mov	r1, r5
 8009afc:	028b      	lsls	r3, r1, #10
 8009afe:	4621      	mov	r1, r4
 8009b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009b04:	4621      	mov	r1, r4
 8009b06:	028a      	lsls	r2, r1, #10
 8009b08:	4610      	mov	r0, r2
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b0e:	2200      	movs	r2, #0
 8009b10:	61bb      	str	r3, [r7, #24]
 8009b12:	61fa      	str	r2, [r7, #28]
 8009b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b18:	f7f6 fff8 	bl	8000b0c <__aeabi_uldivmod>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	460b      	mov	r3, r1
 8009b20:	4613      	mov	r3, r2
 8009b22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009b24:	4b0b      	ldr	r3, [pc, #44]	; (8009b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	0c1b      	lsrs	r3, r3, #16
 8009b2a:	f003 0303 	and.w	r3, r3, #3
 8009b2e:	3301      	adds	r3, #1
 8009b30:	005b      	lsls	r3, r3, #1
 8009b32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009b34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009b3e:	e002      	b.n	8009b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009b40:	4b05      	ldr	r3, [pc, #20]	; (8009b58 <HAL_RCC_GetSysClockFreq+0x204>)
 8009b42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3750      	adds	r7, #80	; 0x50
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b52:	bf00      	nop
 8009b54:	40023800 	.word	0x40023800
 8009b58:	00f42400 	.word	0x00f42400
 8009b5c:	007a1200 	.word	0x007a1200

08009b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b60:	b480      	push	{r7}
 8009b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009b64:	4b03      	ldr	r3, [pc, #12]	; (8009b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8009b66:	681b      	ldr	r3, [r3, #0]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	20000008 	.word	0x20000008

08009b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009b7c:	f7ff fff0 	bl	8009b60 <HAL_RCC_GetHCLKFreq>
 8009b80:	4602      	mov	r2, r0
 8009b82:	4b05      	ldr	r3, [pc, #20]	; (8009b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	0a9b      	lsrs	r3, r3, #10
 8009b88:	f003 0307 	and.w	r3, r3, #7
 8009b8c:	4903      	ldr	r1, [pc, #12]	; (8009b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b8e:	5ccb      	ldrb	r3, [r1, r3]
 8009b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	40023800 	.word	0x40023800
 8009b9c:	0802bb18 	.word	0x0802bb18

08009ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009ba4:	f7ff ffdc 	bl	8009b60 <HAL_RCC_GetHCLKFreq>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	4b05      	ldr	r3, [pc, #20]	; (8009bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	0b5b      	lsrs	r3, r3, #13
 8009bb0:	f003 0307 	and.w	r3, r3, #7
 8009bb4:	4903      	ldr	r1, [pc, #12]	; (8009bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009bb6:	5ccb      	ldrb	r3, [r1, r3]
 8009bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	40023800 	.word	0x40023800
 8009bc4:	0802bb18 	.word	0x0802bb18

08009bc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	220f      	movs	r2, #15
 8009bd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009bd8:	4b12      	ldr	r3, [pc, #72]	; (8009c24 <HAL_RCC_GetClockConfig+0x5c>)
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	f003 0203 	and.w	r2, r3, #3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009be4:	4b0f      	ldr	r3, [pc, #60]	; (8009c24 <HAL_RCC_GetClockConfig+0x5c>)
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009bf0:	4b0c      	ldr	r3, [pc, #48]	; (8009c24 <HAL_RCC_GetClockConfig+0x5c>)
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009bfc:	4b09      	ldr	r3, [pc, #36]	; (8009c24 <HAL_RCC_GetClockConfig+0x5c>)
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	08db      	lsrs	r3, r3, #3
 8009c02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009c0a:	4b07      	ldr	r3, [pc, #28]	; (8009c28 <HAL_RCC_GetClockConfig+0x60>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f003 020f 	and.w	r2, r3, #15
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	601a      	str	r2, [r3, #0]
}
 8009c16:	bf00      	nop
 8009c18:	370c      	adds	r7, #12
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	40023800 	.word	0x40023800
 8009c28:	40023c00 	.word	0x40023c00

08009c2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009c34:	2300      	movs	r3, #0
 8009c36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10b      	bne.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d105      	bne.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d075      	beq.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009c60:	4b91      	ldr	r3, [pc, #580]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8009c62:	2200      	movs	r2, #0
 8009c64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009c66:	f7fb fa13 	bl	8005090 <HAL_GetTick>
 8009c6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009c6c:	e008      	b.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009c6e:	f7fb fa0f 	bl	8005090 <HAL_GetTick>
 8009c72:	4602      	mov	r2, r0
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d901      	bls.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009c7c:	2303      	movs	r3, #3
 8009c7e:	e189      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009c80:	4b8a      	ldr	r3, [pc, #552]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1f0      	bne.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f003 0301 	and.w	r3, r3, #1
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d009      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	019a      	lsls	r2, r3, #6
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	071b      	lsls	r3, r3, #28
 8009ca4:	4981      	ldr	r1, [pc, #516]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 0302 	and.w	r3, r3, #2
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d01f      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009cb8:	4b7c      	ldr	r3, [pc, #496]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cbe:	0f1b      	lsrs	r3, r3, #28
 8009cc0:	f003 0307 	and.w	r3, r3, #7
 8009cc4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	019a      	lsls	r2, r3, #6
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	061b      	lsls	r3, r3, #24
 8009cd2:	431a      	orrs	r2, r3
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	071b      	lsls	r3, r3, #28
 8009cd8:	4974      	ldr	r1, [pc, #464]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009ce0:	4b72      	ldr	r3, [pc, #456]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ce6:	f023 021f 	bic.w	r2, r3, #31
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	69db      	ldr	r3, [r3, #28]
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	496e      	ldr	r1, [pc, #440]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00d      	beq.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	019a      	lsls	r2, r3, #6
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	061b      	lsls	r3, r3, #24
 8009d10:	431a      	orrs	r2, r3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	071b      	lsls	r3, r3, #28
 8009d18:	4964      	ldr	r1, [pc, #400]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009d20:	4b61      	ldr	r3, [pc, #388]	; (8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8009d22:	2201      	movs	r2, #1
 8009d24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009d26:	f7fb f9b3 	bl	8005090 <HAL_GetTick>
 8009d2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009d2c:	e008      	b.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009d2e:	f7fb f9af 	bl	8005090 <HAL_GetTick>
 8009d32:	4602      	mov	r2, r0
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d901      	bls.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e129      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009d40:	4b5a      	ldr	r3, [pc, #360]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d0f0      	beq.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f003 0304 	and.w	r3, r3, #4
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d105      	bne.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d079      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009d64:	4b52      	ldr	r3, [pc, #328]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009d66:	2200      	movs	r2, #0
 8009d68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009d6a:	f7fb f991 	bl	8005090 <HAL_GetTick>
 8009d6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009d70:	e008      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009d72:	f7fb f98d 	bl	8005090 <HAL_GetTick>
 8009d76:	4602      	mov	r2, r0
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	1ad3      	subs	r3, r2, r3
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d901      	bls.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009d80:	2303      	movs	r3, #3
 8009d82:	e107      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009d84:	4b49      	ldr	r3, [pc, #292]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d90:	d0ef      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f003 0304 	and.w	r3, r3, #4
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d020      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009d9e:	4b43      	ldr	r3, [pc, #268]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009da4:	0f1b      	lsrs	r3, r3, #28
 8009da6:	f003 0307 	and.w	r3, r3, #7
 8009daa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	691b      	ldr	r3, [r3, #16]
 8009db0:	019a      	lsls	r2, r3, #6
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	695b      	ldr	r3, [r3, #20]
 8009db6:	061b      	lsls	r3, r3, #24
 8009db8:	431a      	orrs	r2, r3
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	071b      	lsls	r3, r3, #28
 8009dbe:	493b      	ldr	r1, [pc, #236]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009dc6:	4b39      	ldr	r3, [pc, #228]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dcc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6a1b      	ldr	r3, [r3, #32]
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	021b      	lsls	r3, r3, #8
 8009dd8:	4934      	ldr	r1, [pc, #208]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f003 0308 	and.w	r3, r3, #8
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d01e      	beq.n	8009e2a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009dec:	4b2f      	ldr	r3, [pc, #188]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009df2:	0e1b      	lsrs	r3, r3, #24
 8009df4:	f003 030f 	and.w	r3, r3, #15
 8009df8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	019a      	lsls	r2, r3, #6
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	061b      	lsls	r3, r3, #24
 8009e04:	431a      	orrs	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	071b      	lsls	r3, r3, #28
 8009e0c:	4927      	ldr	r1, [pc, #156]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009e14:	4b25      	ldr	r3, [pc, #148]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e22:	4922      	ldr	r1, [pc, #136]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009e24:	4313      	orrs	r3, r2
 8009e26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009e2a:	4b21      	ldr	r3, [pc, #132]	; (8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009e30:	f7fb f92e 	bl	8005090 <HAL_GetTick>
 8009e34:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009e36:	e008      	b.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009e38:	f7fb f92a 	bl	8005090 <HAL_GetTick>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	1ad3      	subs	r3, r2, r3
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	d901      	bls.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009e46:	2303      	movs	r3, #3
 8009e48:	e0a4      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009e4a:	4b18      	ldr	r3, [pc, #96]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e56:	d1ef      	bne.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 0320 	and.w	r3, r3, #32
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f000 808b 	beq.w	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009e66:	2300      	movs	r3, #0
 8009e68:	60fb      	str	r3, [r7, #12]
 8009e6a:	4b10      	ldr	r3, [pc, #64]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6e:	4a0f      	ldr	r2, [pc, #60]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e74:	6413      	str	r3, [r2, #64]	; 0x40
 8009e76:	4b0d      	ldr	r3, [pc, #52]	; (8009eac <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e7e:	60fb      	str	r3, [r7, #12]
 8009e80:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009e82:	4b0c      	ldr	r3, [pc, #48]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a0b      	ldr	r2, [pc, #44]	; (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009e8e:	f7fb f8ff 	bl	8005090 <HAL_GetTick>
 8009e92:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009e94:	e010      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009e96:	f7fb f8fb 	bl	8005090 <HAL_GetTick>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	1ad3      	subs	r3, r2, r3
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d909      	bls.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	e075      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8009ea8:	42470068 	.word	0x42470068
 8009eac:	40023800 	.word	0x40023800
 8009eb0:	42470070 	.word	0x42470070
 8009eb4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009eb8:	4b38      	ldr	r3, [pc, #224]	; (8009f9c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d0e8      	beq.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009ec4:	4b36      	ldr	r3, [pc, #216]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ecc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d02f      	beq.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ed8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009edc:	693a      	ldr	r2, [r7, #16]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d028      	beq.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009ee2:	4b2f      	ldr	r3, [pc, #188]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009eec:	4b2d      	ldr	r3, [pc, #180]	; (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009eee:	2201      	movs	r2, #1
 8009ef0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009ef2:	4b2c      	ldr	r3, [pc, #176]	; (8009fa4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009ef8:	4a29      	ldr	r2, [pc, #164]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009efe:	4b28      	ldr	r3, [pc, #160]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f02:	f003 0301 	and.w	r3, r3, #1
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d114      	bne.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009f0a:	f7fb f8c1 	bl	8005090 <HAL_GetTick>
 8009f0e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f10:	e00a      	b.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f12:	f7fb f8bd 	bl	8005090 <HAL_GetTick>
 8009f16:	4602      	mov	r2, r0
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d901      	bls.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8009f24:	2303      	movs	r3, #3
 8009f26:	e035      	b.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f28:	4b1d      	ldr	r3, [pc, #116]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f2c:	f003 0302 	and.w	r3, r3, #2
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d0ee      	beq.n	8009f12 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f40:	d10d      	bne.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8009f42:	4b17      	ldr	r3, [pc, #92]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f4e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f56:	4912      	ldr	r1, [pc, #72]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	608b      	str	r3, [r1, #8]
 8009f5c:	e005      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8009f5e:	4b10      	ldr	r3, [pc, #64]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	4a0f      	ldr	r2, [pc, #60]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009f64:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009f68:	6093      	str	r3, [r2, #8]
 8009f6a:	4b0d      	ldr	r3, [pc, #52]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009f6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f76:	490a      	ldr	r1, [pc, #40]	; (8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f003 0310 	and.w	r3, r3, #16
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d004      	beq.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009f8e:	4b06      	ldr	r3, [pc, #24]	; (8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8009f90:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3718      	adds	r7, #24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	40007000 	.word	0x40007000
 8009fa0:	40023800 	.word	0x40023800
 8009fa4:	42470e40 	.word	0x42470e40
 8009fa8:	424711e0 	.word	0x424711e0

08009fac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d101      	bne.n	8009fbe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e022      	b.n	800a004 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d105      	bne.n	8009fd6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7fa fc45 	bl	8004860 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2203      	movs	r2, #3
 8009fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 f814 	bl	800a00c <HAL_SD_InitCard>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d001      	beq.n	8009fee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e00a      	b.n	800a004 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a00c:	b5b0      	push	{r4, r5, r7, lr}
 800a00e:	b08e      	sub	sp, #56	; 0x38
 800a010:	af04      	add	r7, sp, #16
 800a012:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a014:	2300      	movs	r3, #0
 800a016:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a018:	2300      	movs	r3, #0
 800a01a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a01c:	2300      	movs	r3, #0
 800a01e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a020:	2300      	movs	r3, #0
 800a022:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a024:	2300      	movs	r3, #0
 800a026:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a028:	2376      	movs	r3, #118	; 0x76
 800a02a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681d      	ldr	r5, [r3, #0]
 800a030:	466c      	mov	r4, sp
 800a032:	f107 0314 	add.w	r3, r7, #20
 800a036:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a03a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a03e:	f107 0308 	add.w	r3, r7, #8
 800a042:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a044:	4628      	mov	r0, r5
 800a046:	f002 ff84 	bl	800cf52 <SDIO_Init>
 800a04a:	4603      	mov	r3, r0
 800a04c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a054:	2b00      	cmp	r3, #0
 800a056:	d001      	beq.n	800a05c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	e04f      	b.n	800a0fc <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a05c:	4b29      	ldr	r3, [pc, #164]	; (800a104 <HAL_SD_InitCard+0xf8>)
 800a05e:	2200      	movs	r2, #0
 800a060:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4618      	mov	r0, r3
 800a068:	f002 ffab 	bl	800cfc2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a06c:	4b25      	ldr	r3, [pc, #148]	; (800a104 <HAL_SD_InitCard+0xf8>)
 800a06e:	2201      	movs	r2, #1
 800a070:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800a072:	2002      	movs	r0, #2
 800a074:	f7fb f818 	bl	80050a8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fe11 	bl	800aca0 <SD_PowerON>
 800a07e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a080:	6a3b      	ldr	r3, [r7, #32]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00b      	beq.n	800a09e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a092:	6a3b      	ldr	r3, [r7, #32]
 800a094:	431a      	orrs	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e02e      	b.n	800a0fc <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fd30 	bl	800ab04 <SD_InitCard>
 800a0a4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00b      	beq.n	800a0c4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0b8:	6a3b      	ldr	r3, [r7, #32]
 800a0ba:	431a      	orrs	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e01b      	b.n	800a0fc <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f003 f80a 	bl	800d0e6 <SDMMC_CmdBlockLength>
 800a0d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00f      	beq.n	800a0fa <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a0a      	ldr	r2, [pc, #40]	; (800a108 <HAL_SD_InitCard+0xfc>)
 800a0e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0e6:	6a3b      	ldr	r3, [r7, #32]
 800a0e8:	431a      	orrs	r2, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e000      	b.n	800a0fc <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800a0fa:	2300      	movs	r3, #0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3728      	adds	r7, #40	; 0x28
 800a100:	46bd      	mov	sp, r7
 800a102:	bdb0      	pop	{r4, r5, r7, pc}
 800a104:	422580a0 	.word	0x422580a0
 800a108:	004005ff 	.word	0x004005ff

0800a10c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b08c      	sub	sp, #48	; 0x30
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	607a      	str	r2, [r7, #4]
 800a118:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d107      	bne.n	800a134 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a128:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	e0c0      	b.n	800a2b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	f040 80b9 	bne.w	800a2b4 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	441a      	add	r2, r3
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a152:	429a      	cmp	r2, r3
 800a154:	d907      	bls.n	800a166 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e0a7      	b.n	800a2b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2203      	movs	r2, #3
 800a16a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2200      	movs	r2, #0
 800a174:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a17c:	68fa      	ldr	r2, [r7, #12]
 800a17e:	6812      	ldr	r2, [r2, #0]
 800a180:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800a184:	f043 0302 	orr.w	r3, r3, #2
 800a188:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18e:	4a4c      	ldr	r2, [pc, #304]	; (800a2c0 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800a190:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a196:	4a4b      	ldr	r2, [pc, #300]	; (800a2c4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a198:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a19e:	2200      	movs	r2, #0
 800a1a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ba:	689a      	ldr	r2, [r3, #8]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	430a      	orrs	r2, r1
 800a1c4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	3380      	adds	r3, #128	; 0x80
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	68ba      	ldr	r2, [r7, #8]
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	025b      	lsls	r3, r3, #9
 800a1d8:	089b      	lsrs	r3, r3, #2
 800a1da:	f7fc fb7d 	bl	80068d8 <HAL_DMA_Start_IT>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d017      	beq.n	800a214 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a1f2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a33      	ldr	r2, [pc, #204]	; (800a2c8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a1fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a200:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	2201      	movs	r2, #1
 800a20c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	e050      	b.n	800a2b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a214:	4b2d      	ldr	r3, [pc, #180]	; (800a2cc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a216:	2201      	movs	r2, #1
 800a218:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d002      	beq.n	800a228 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800a222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a224:	025b      	lsls	r3, r3, #9
 800a226:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a228:	f04f 33ff 	mov.w	r3, #4294967295
 800a22c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	025b      	lsls	r3, r3, #9
 800a232:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a234:	2390      	movs	r3, #144	; 0x90
 800a236:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a238:	2302      	movs	r3, #2
 800a23a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a23c:	2300      	movs	r3, #0
 800a23e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a240:	2301      	movs	r3, #1
 800a242:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f107 0210 	add.w	r2, r7, #16
 800a24c:	4611      	mov	r1, r2
 800a24e:	4618      	mov	r0, r3
 800a250:	f002 ff1d 	bl	800d08e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	2b01      	cmp	r3, #1
 800a258:	d90a      	bls.n	800a270 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2282      	movs	r2, #130	; 0x82
 800a25e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a266:	4618      	mov	r0, r3
 800a268:	f002 ff81 	bl	800d16e <SDMMC_CmdReadMultiBlock>
 800a26c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a26e:	e009      	b.n	800a284 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2281      	movs	r2, #129	; 0x81
 800a274:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a27c:	4618      	mov	r0, r3
 800a27e:	f002 ff54 	bl	800d12a <SDMMC_CmdReadSingleBlock>
 800a282:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a286:	2b00      	cmp	r3, #0
 800a288:	d012      	beq.n	800a2b0 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a0e      	ldr	r2, [pc, #56]	; (800a2c8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a290:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a298:	431a      	orrs	r2, r3
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e002      	b.n	800a2b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	e000      	b.n	800a2b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800a2b4:	2302      	movs	r3, #2
  }
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3730      	adds	r7, #48	; 0x30
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	0800a9ef 	.word	0x0800a9ef
 800a2c4:	0800aa61 	.word	0x0800aa61
 800a2c8:	004005ff 	.word	0x004005ff
 800a2cc:	4225858c 	.word	0x4225858c

0800a2d0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b08c      	sub	sp, #48	; 0x30
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
 800a2dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d107      	bne.n	800a2f8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e0c5      	b.n	800a484 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	2b01      	cmp	r3, #1
 800a302:	f040 80be 	bne.w	800a482 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2200      	movs	r2, #0
 800a30a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a30c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	441a      	add	r2, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a316:	429a      	cmp	r2, r3
 800a318:	d907      	bls.n	800a32a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a31e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e0ac      	b.n	800a484 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2203      	movs	r2, #3
 800a32e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2200      	movs	r2, #0
 800a338:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	6812      	ldr	r2, [r2, #0]
 800a344:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800a348:	f043 0302 	orr.w	r3, r3, #2
 800a34c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a352:	4a4e      	ldr	r2, [pc, #312]	; (800a48c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800a354:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a35a:	4a4d      	ldr	r2, [pc, #308]	; (800a490 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a35c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a362:	2200      	movs	r2, #0
 800a364:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d002      	beq.n	800a374 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800a36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a370:	025b      	lsls	r3, r3, #9
 800a372:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2b01      	cmp	r3, #1
 800a378:	d90a      	bls.n	800a390 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	22a0      	movs	r2, #160	; 0xa0
 800a37e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a386:	4618      	mov	r0, r3
 800a388:	f002 ff35 	bl	800d1f6 <SDMMC_CmdWriteMultiBlock>
 800a38c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a38e:	e009      	b.n	800a3a4 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2290      	movs	r2, #144	; 0x90
 800a394:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a39c:	4618      	mov	r0, r3
 800a39e:	f002 ff08 	bl	800d1b2 <SDMMC_CmdWriteSingleBlock>
 800a3a2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d012      	beq.n	800a3d0 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a39      	ldr	r2, [pc, #228]	; (800a494 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a3b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3b8:	431a      	orrs	r2, r3
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e059      	b.n	800a484 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a3d0:	4b31      	ldr	r3, [pc, #196]	; (800a498 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3da:	2240      	movs	r2, #64	; 0x40
 800a3dc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ee:	689a      	ldr	r2, [r3, #8]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	430a      	orrs	r2, r1
 800a3f8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a3fe:	68b9      	ldr	r1, [r7, #8]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	3380      	adds	r3, #128	; 0x80
 800a406:	461a      	mov	r2, r3
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	025b      	lsls	r3, r3, #9
 800a40c:	089b      	lsrs	r3, r3, #2
 800a40e:	f7fc fa63 	bl	80068d8 <HAL_DMA_Start_IT>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d01c      	beq.n	800a452 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	6812      	ldr	r2, [r2, #0]
 800a422:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800a426:	f023 0302 	bic.w	r3, r3, #2
 800a42a:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a18      	ldr	r2, [pc, #96]	; (800a494 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a432:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a438:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2201      	movs	r2, #1
 800a444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2200      	movs	r2, #0
 800a44c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	e018      	b.n	800a484 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a452:	f04f 33ff 	mov.w	r3, #4294967295
 800a456:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	025b      	lsls	r3, r3, #9
 800a45c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a45e:	2390      	movs	r3, #144	; 0x90
 800a460:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a462:	2300      	movs	r3, #0
 800a464:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a466:	2300      	movs	r3, #0
 800a468:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a46a:	2301      	movs	r3, #1
 800a46c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f107 0210 	add.w	r2, r7, #16
 800a476:	4611      	mov	r1, r2
 800a478:	4618      	mov	r0, r3
 800a47a:	f002 fe08 	bl	800d08e <SDIO_ConfigData>

      return HAL_OK;
 800a47e:	2300      	movs	r3, #0
 800a480:	e000      	b.n	800a484 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800a482:	2302      	movs	r3, #2
  }
}
 800a484:	4618      	mov	r0, r3
 800a486:	3730      	adds	r7, #48	; 0x30
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	0800a9c5 	.word	0x0800a9c5
 800a490:	0800aa61 	.word	0x0800aa61
 800a494:	004005ff 	.word	0x004005ff
 800a498:	4225858c 	.word	0x4225858c

0800a49c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a4a4:	bf00      	nop
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4be:	0f9b      	lsrs	r3, r3, #30
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4ca:	0e9b      	lsrs	r3, r3, #26
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	f003 030f 	and.w	r3, r3, #15
 800a4d2:	b2da      	uxtb	r2, r3
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4dc:	0e1b      	lsrs	r3, r3, #24
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	f003 0303 	and.w	r3, r3, #3
 800a4e4:	b2da      	uxtb	r2, r3
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4ee:	0c1b      	lsrs	r3, r3, #16
 800a4f0:	b2da      	uxtb	r2, r3
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4fa:	0a1b      	lsrs	r3, r3, #8
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a506:	b2da      	uxtb	r2, r3
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a510:	0d1b      	lsrs	r3, r3, #20
 800a512:	b29a      	uxth	r2, r3
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a51c:	0c1b      	lsrs	r3, r3, #16
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	f003 030f 	and.w	r3, r3, #15
 800a524:	b2da      	uxtb	r2, r3
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a52e:	0bdb      	lsrs	r3, r3, #15
 800a530:	b2db      	uxtb	r3, r3
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	b2da      	uxtb	r2, r3
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a540:	0b9b      	lsrs	r3, r3, #14
 800a542:	b2db      	uxtb	r3, r3
 800a544:	f003 0301 	and.w	r3, r3, #1
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a552:	0b5b      	lsrs	r3, r3, #13
 800a554:	b2db      	uxtb	r3, r3
 800a556:	f003 0301 	and.w	r3, r3, #1
 800a55a:	b2da      	uxtb	r2, r3
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a564:	0b1b      	lsrs	r3, r3, #12
 800a566:	b2db      	uxtb	r3, r3
 800a568:	f003 0301 	and.w	r3, r3, #1
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	2200      	movs	r2, #0
 800a576:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d163      	bne.n	800a648 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a584:	009a      	lsls	r2, r3, #2
 800a586:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a58a:	4013      	ands	r3, r2
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a590:	0f92      	lsrs	r2, r2, #30
 800a592:	431a      	orrs	r2, r3
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a59c:	0edb      	lsrs	r3, r3, #27
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	f003 0307 	and.w	r3, r3, #7
 800a5a4:	b2da      	uxtb	r2, r3
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5ae:	0e1b      	lsrs	r3, r3, #24
 800a5b0:	b2db      	uxtb	r3, r3
 800a5b2:	f003 0307 	and.w	r3, r3, #7
 800a5b6:	b2da      	uxtb	r2, r3
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5c0:	0d5b      	lsrs	r3, r3, #21
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	f003 0307 	and.w	r3, r3, #7
 800a5c8:	b2da      	uxtb	r2, r3
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5d2:	0c9b      	lsrs	r3, r3, #18
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	f003 0307 	and.w	r3, r3, #7
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5e4:	0bdb      	lsrs	r3, r3, #15
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	f003 0307 	and.w	r3, r3, #7
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	1c5a      	adds	r2, r3, #1
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	7e1b      	ldrb	r3, [r3, #24]
 800a600:	b2db      	uxtb	r3, r3
 800a602:	f003 0307 	and.w	r3, r3, #7
 800a606:	3302      	adds	r3, #2
 800a608:	2201      	movs	r2, #1
 800a60a:	fa02 f303 	lsl.w	r3, r2, r3
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a612:	fb03 f202 	mul.w	r2, r3, r2
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	7a1b      	ldrb	r3, [r3, #8]
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	f003 030f 	and.w	r3, r3, #15
 800a624:	2201      	movs	r2, #1
 800a626:	409a      	lsls	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a634:	0a52      	lsrs	r2, r2, #9
 800a636:	fb03 f202 	mul.w	r2, r3, r2
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a644:	661a      	str	r2, [r3, #96]	; 0x60
 800a646:	e031      	b.n	800a6ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d11d      	bne.n	800a68c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a654:	041b      	lsls	r3, r3, #16
 800a656:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a65e:	0c1b      	lsrs	r3, r3, #16
 800a660:	431a      	orrs	r2, r3
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	3301      	adds	r3, #1
 800a66c:	029a      	lsls	r2, r3, #10
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a680:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	661a      	str	r2, [r3, #96]	; 0x60
 800a68a:	e00f      	b.n	800a6ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a58      	ldr	r2, [pc, #352]	; (800a7f4 <HAL_SD_GetCardCSD+0x344>)
 800a692:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a698:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e09d      	b.n	800a7e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6b0:	0b9b      	lsrs	r3, r3, #14
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	f003 0301 	and.w	r3, r3, #1
 800a6b8:	b2da      	uxtb	r2, r3
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6c2:	09db      	lsrs	r3, r3, #7
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6da:	b2da      	uxtb	r2, r3
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6e4:	0fdb      	lsrs	r3, r3, #31
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6f0:	0f5b      	lsrs	r3, r3, #29
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	f003 0303 	and.w	r3, r3, #3
 800a6f8:	b2da      	uxtb	r2, r3
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a702:	0e9b      	lsrs	r3, r3, #26
 800a704:	b2db      	uxtb	r3, r3
 800a706:	f003 0307 	and.w	r3, r3, #7
 800a70a:	b2da      	uxtb	r2, r3
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a714:	0d9b      	lsrs	r3, r3, #22
 800a716:	b2db      	uxtb	r3, r3
 800a718:	f003 030f 	and.w	r3, r3, #15
 800a71c:	b2da      	uxtb	r2, r3
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a726:	0d5b      	lsrs	r3, r3, #21
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	f003 0301 	and.w	r3, r3, #1
 800a72e:	b2da      	uxtb	r2, r3
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	2200      	movs	r2, #0
 800a73a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a742:	0c1b      	lsrs	r3, r3, #16
 800a744:	b2db      	uxtb	r3, r3
 800a746:	f003 0301 	and.w	r3, r3, #1
 800a74a:	b2da      	uxtb	r2, r3
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a756:	0bdb      	lsrs	r3, r3, #15
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	f003 0301 	and.w	r3, r3, #1
 800a75e:	b2da      	uxtb	r2, r3
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a76a:	0b9b      	lsrs	r3, r3, #14
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	f003 0301 	and.w	r3, r3, #1
 800a772:	b2da      	uxtb	r2, r3
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a77e:	0b5b      	lsrs	r3, r3, #13
 800a780:	b2db      	uxtb	r3, r3
 800a782:	f003 0301 	and.w	r3, r3, #1
 800a786:	b2da      	uxtb	r2, r3
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a792:	0b1b      	lsrs	r3, r3, #12
 800a794:	b2db      	uxtb	r3, r3
 800a796:	f003 0301 	and.w	r3, r3, #1
 800a79a:	b2da      	uxtb	r2, r3
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7a6:	0a9b      	lsrs	r3, r3, #10
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	f003 0303 	and.w	r3, r3, #3
 800a7ae:	b2da      	uxtb	r2, r3
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ba:	0a1b      	lsrs	r3, r3, #8
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	f003 0303 	and.w	r3, r3, #3
 800a7c2:	b2da      	uxtb	r2, r3
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ce:	085b      	lsrs	r3, r3, #1
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7d6:	b2da      	uxtb	r2, r3
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	2201      	movs	r2, #1
 800a7e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr
 800a7f4:	004005ff 	.word	0x004005ff

0800a7f8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a842:	2300      	movs	r3, #0
}
 800a844:	4618      	mov	r0, r3
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a850:	b5b0      	push	{r4, r5, r7, lr}
 800a852:	b08e      	sub	sp, #56	; 0x38
 800a854:	af04      	add	r7, sp, #16
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2203      	movs	r2, #3
 800a864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a86c:	2b03      	cmp	r3, #3
 800a86e:	d02e      	beq.n	800a8ce <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a876:	d106      	bne.n	800a886 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	639a      	str	r2, [r3, #56]	; 0x38
 800a884:	e029      	b.n	800a8da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a88c:	d10a      	bne.n	800a8a4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 fabc 	bl	800ae0c <SD_WideBus_Enable>
 800a894:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a89a:	6a3b      	ldr	r3, [r7, #32]
 800a89c:	431a      	orrs	r2, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	639a      	str	r2, [r3, #56]	; 0x38
 800a8a2:	e01a      	b.n	800a8da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10a      	bne.n	800a8c0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 faf9 	bl	800aea2 <SD_WideBus_Disable>
 800a8b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8b6:	6a3b      	ldr	r3, [r7, #32]
 800a8b8:	431a      	orrs	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	639a      	str	r2, [r3, #56]	; 0x38
 800a8be:	e00c      	b.n	800a8da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	639a      	str	r2, [r3, #56]	; 0x38
 800a8cc:	e005      	b.n	800a8da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00b      	beq.n	800a8fa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a26      	ldr	r2, [pc, #152]	; (800a980 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a8e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8f8:	e01f      	b.n	800a93a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	695b      	ldr	r3, [r3, #20]
 800a914:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	699b      	ldr	r3, [r3, #24]
 800a91a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681d      	ldr	r5, [r3, #0]
 800a920:	466c      	mov	r4, sp
 800a922:	f107 0314 	add.w	r3, r7, #20
 800a926:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a92a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a92e:	f107 0308 	add.w	r3, r7, #8
 800a932:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a934:	4628      	mov	r0, r5
 800a936:	f002 fb0c 	bl	800cf52 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a942:	4618      	mov	r0, r3
 800a944:	f002 fbcf 	bl	800d0e6 <SDMMC_CmdBlockLength>
 800a948:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a94a:	6a3b      	ldr	r3, [r7, #32]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00c      	beq.n	800a96a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a0a      	ldr	r2, [pc, #40]	; (800a980 <HAL_SD_ConfigWideBusOperation+0x130>)
 800a956:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a95c:	6a3b      	ldr	r3, [r7, #32]
 800a95e:	431a      	orrs	r2, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2201      	movs	r2, #1
 800a96e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a976:	4618      	mov	r0, r3
 800a978:	3728      	adds	r7, #40	; 0x28
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bdb0      	pop	{r4, r5, r7, pc}
 800a97e:	bf00      	nop
 800a980:	004005ff 	.word	0x004005ff

0800a984 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b086      	sub	sp, #24
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a98c:	2300      	movs	r3, #0
 800a98e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a990:	f107 030c 	add.w	r3, r7, #12
 800a994:	4619      	mov	r1, r3
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 fa10 	bl	800adbc <SD_SendStatus>
 800a99c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d005      	beq.n	800a9b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	431a      	orrs	r2, r3
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	0a5b      	lsrs	r3, r3, #9
 800a9b4:	f003 030f 	and.w	r3, r3, #15
 800a9b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a9ba:	693b      	ldr	r3, [r7, #16]
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3718      	adds	r7, #24
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b085      	sub	sp, #20
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9e0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a9e2:	bf00      	nop
 800a9e4:	3714      	adds	r7, #20
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b084      	sub	sp, #16
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9fa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa00:	2b82      	cmp	r3, #130	; 0x82
 800aa02:	d111      	bne.n	800aa28 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f002 fc17 	bl	800d23c <SDMMC_CmdStopTransfer>
 800aa0e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d008      	beq.n	800aa28 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	431a      	orrs	r2, r3
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f7ff fd3a 	bl	800a49c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f022 0208 	bic.w	r2, r2, #8
 800aa36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f240 523a 	movw	r2, #1338	; 0x53a
 800aa40:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2201      	movs	r2, #1
 800aa46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f003 fb6d 	bl	800e130 <HAL_SD_RxCpltCallback>
#endif
}
 800aa56:	bf00      	nop
 800aa58:	3710      	adds	r7, #16
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
	...

0800aa60 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f7fc f914 	bl	8006c9c <HAL_DMA_GetError>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	d03e      	beq.n	800aaf8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa80:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa88:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d002      	beq.n	800aa96 <SD_DMAError+0x36>
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d12d      	bne.n	800aaf2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a19      	ldr	r2, [pc, #100]	; (800ab00 <SD_DMAError+0xa0>)
 800aa9c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800aaac:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800aaba:	6978      	ldr	r0, [r7, #20]
 800aabc:	f7ff ff62 	bl	800a984 <HAL_SD_GetCardState>
 800aac0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	2b06      	cmp	r3, #6
 800aac6:	d002      	beq.n	800aace <SD_DMAError+0x6e>
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	2b05      	cmp	r3, #5
 800aacc:	d10a      	bne.n	800aae4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4618      	mov	r0, r3
 800aad4:	f002 fbb2 	bl	800d23c <SDMMC_CmdStopTransfer>
 800aad8:	4602      	mov	r2, r0
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aade:	431a      	orrs	r2, r3
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800aaf2:	6978      	ldr	r0, [r7, #20]
 800aaf4:	f7ff fcd2 	bl	800a49c <HAL_SD_ErrorCallback>
#endif
  }
}
 800aaf8:	bf00      	nop
 800aafa:	3718      	adds	r7, #24
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	004005ff 	.word	0x004005ff

0800ab04 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ab04:	b5b0      	push	{r4, r5, r7, lr}
 800ab06:	b094      	sub	sp, #80	; 0x50
 800ab08:	af04      	add	r7, sp, #16
 800ab0a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4618      	mov	r0, r3
 800ab16:	f002 fa62 	bl	800cfde <SDIO_GetPowerState>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d102      	bne.n	800ab26 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ab20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ab24:	e0b8      	b.n	800ac98 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab2a:	2b03      	cmp	r3, #3
 800ab2c:	d02f      	beq.n	800ab8e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4618      	mov	r0, r3
 800ab34:	f002 fc8c 	bl	800d450 <SDMMC_CmdSendCID>
 800ab38:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <SD_InitCard+0x40>
    {
      return errorstate;
 800ab40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab42:	e0a9      	b.n	800ac98 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2100      	movs	r1, #0
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f002 fa8c 	bl	800d068 <SDIO_GetResponse>
 800ab50:	4602      	mov	r2, r0
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2104      	movs	r1, #4
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f002 fa83 	bl	800d068 <SDIO_GetResponse>
 800ab62:	4602      	mov	r2, r0
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2108      	movs	r1, #8
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f002 fa7a 	bl	800d068 <SDIO_GetResponse>
 800ab74:	4602      	mov	r2, r0
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	210c      	movs	r1, #12
 800ab80:	4618      	mov	r0, r3
 800ab82:	f002 fa71 	bl	800d068 <SDIO_GetResponse>
 800ab86:	4602      	mov	r2, r0
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab92:	2b03      	cmp	r3, #3
 800ab94:	d00d      	beq.n	800abb2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f107 020e 	add.w	r2, r7, #14
 800ab9e:	4611      	mov	r1, r2
 800aba0:	4618      	mov	r0, r3
 800aba2:	f002 fc92 	bl	800d4ca <SDMMC_CmdSetRelAdd>
 800aba6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d001      	beq.n	800abb2 <SD_InitCard+0xae>
    {
      return errorstate;
 800abae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb0:	e072      	b.n	800ac98 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abb6:	2b03      	cmp	r3, #3
 800abb8:	d036      	beq.n	800ac28 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800abba:	89fb      	ldrh	r3, [r7, #14]
 800abbc:	461a      	mov	r2, r3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abca:	041b      	lsls	r3, r3, #16
 800abcc:	4619      	mov	r1, r3
 800abce:	4610      	mov	r0, r2
 800abd0:	f002 fc5c 	bl	800d48c <SDMMC_CmdSendCSD>
 800abd4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800abd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d001      	beq.n	800abe0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800abdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abde:	e05b      	b.n	800ac98 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2100      	movs	r1, #0
 800abe6:	4618      	mov	r0, r3
 800abe8:	f002 fa3e 	bl	800d068 <SDIO_GetResponse>
 800abec:	4602      	mov	r2, r0
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2104      	movs	r1, #4
 800abf8:	4618      	mov	r0, r3
 800abfa:	f002 fa35 	bl	800d068 <SDIO_GetResponse>
 800abfe:	4602      	mov	r2, r0
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2108      	movs	r1, #8
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f002 fa2c 	bl	800d068 <SDIO_GetResponse>
 800ac10:	4602      	mov	r2, r0
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	210c      	movs	r1, #12
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f002 fa23 	bl	800d068 <SDIO_GetResponse>
 800ac22:	4602      	mov	r2, r0
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	2104      	movs	r1, #4
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f002 fa1a 	bl	800d068 <SDIO_GetResponse>
 800ac34:	4603      	mov	r3, r0
 800ac36:	0d1a      	lsrs	r2, r3, #20
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ac3c:	f107 0310 	add.w	r3, r7, #16
 800ac40:	4619      	mov	r1, r3
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f7ff fc34 	bl	800a4b0 <HAL_SD_GetCardCSD>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d002      	beq.n	800ac54 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ac52:	e021      	b.n	800ac98 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6819      	ldr	r1, [r3, #0]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac5c:	041b      	lsls	r3, r3, #16
 800ac5e:	2200      	movs	r2, #0
 800ac60:	461c      	mov	r4, r3
 800ac62:	4615      	mov	r5, r2
 800ac64:	4622      	mov	r2, r4
 800ac66:	462b      	mov	r3, r5
 800ac68:	4608      	mov	r0, r1
 800ac6a:	f002 fb09 	bl	800d280 <SDMMC_CmdSelDesel>
 800ac6e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d001      	beq.n	800ac7a <SD_InitCard+0x176>
  {
    return errorstate;
 800ac76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac78:	e00e      	b.n	800ac98 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681d      	ldr	r5, [r3, #0]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	466c      	mov	r4, sp
 800ac82:	f103 0210 	add.w	r2, r3, #16
 800ac86:	ca07      	ldmia	r2, {r0, r1, r2}
 800ac88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ac8c:	3304      	adds	r3, #4
 800ac8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac90:	4628      	mov	r0, r5
 800ac92:	f002 f95e 	bl	800cf52 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3740      	adds	r7, #64	; 0x40
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bdb0      	pop	{r4, r5, r7, pc}

0800aca0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aca8:	2300      	movs	r3, #0
 800acaa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800acac:	2300      	movs	r3, #0
 800acae:	617b      	str	r3, [r7, #20]
 800acb0:	2300      	movs	r3, #0
 800acb2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4618      	mov	r0, r3
 800acba:	f002 fb04 	bl	800d2c6 <SDMMC_CmdGoIdleState>
 800acbe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <SD_PowerON+0x2a>
  {
    return errorstate;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	e072      	b.n	800adb0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4618      	mov	r0, r3
 800acd0:	f002 fb17 	bl	800d302 <SDMMC_CmdOperCond>
 800acd4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00d      	beq.n	800acf8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4618      	mov	r0, r3
 800ace8:	f002 faed 	bl	800d2c6 <SDMMC_CmdGoIdleState>
 800acec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d004      	beq.n	800acfe <SD_PowerON+0x5e>
    {
      return errorstate;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	e05b      	b.n	800adb0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	d137      	bne.n	800ad76 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2100      	movs	r1, #0
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f002 fb17 	bl	800d340 <SDMMC_CmdAppCommand>
 800ad12:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d02d      	beq.n	800ad76 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ad1e:	e047      	b.n	800adb0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	2100      	movs	r1, #0
 800ad26:	4618      	mov	r0, r3
 800ad28:	f002 fb0a 	bl	800d340 <SDMMC_CmdAppCommand>
 800ad2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d001      	beq.n	800ad38 <SD_PowerON+0x98>
    {
      return errorstate;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	e03b      	b.n	800adb0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	491e      	ldr	r1, [pc, #120]	; (800adb8 <SD_PowerON+0x118>)
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f002 fb20 	bl	800d384 <SDMMC_CmdAppOperCommand>
 800ad44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d002      	beq.n	800ad52 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ad50:	e02e      	b.n	800adb0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2100      	movs	r1, #0
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f002 f985 	bl	800d068 <SDIO_GetResponse>
 800ad5e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	0fdb      	lsrs	r3, r3, #31
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d101      	bne.n	800ad6c <SD_PowerON+0xcc>
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e000      	b.n	800ad6e <SD_PowerON+0xce>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	613b      	str	r3, [r7, #16]

    count++;
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	3301      	adds	r3, #1
 800ad74:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d802      	bhi.n	800ad86 <SD_PowerON+0xe6>
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d0cc      	beq.n	800ad20 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d902      	bls.n	800ad96 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ad90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad94:	e00c      	b.n	800adb0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d003      	beq.n	800ada8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	645a      	str	r2, [r3, #68]	; 0x44
 800ada6:	e002      	b.n	800adae <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2200      	movs	r2, #0
 800adac:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3718      	adds	r7, #24
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	c1100000 	.word	0xc1100000

0800adbc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d102      	bne.n	800add2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800adcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800add0:	e018      	b.n	800ae04 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adda:	041b      	lsls	r3, r3, #16
 800addc:	4619      	mov	r1, r3
 800adde:	4610      	mov	r0, r2
 800ade0:	f002 fb94 	bl	800d50c <SDMMC_CmdSendStatus>
 800ade4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d001      	beq.n	800adf0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	e009      	b.n	800ae04 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2100      	movs	r1, #0
 800adf6:	4618      	mov	r0, r3
 800adf8:	f002 f936 	bl	800d068 <SDIO_GetResponse>
 800adfc:	4602      	mov	r2, r0
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ae02:	2300      	movs	r3, #0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3710      	adds	r7, #16
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b086      	sub	sp, #24
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ae14:	2300      	movs	r3, #0
 800ae16:	60fb      	str	r3, [r7, #12]
 800ae18:	2300      	movs	r3, #0
 800ae1a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2100      	movs	r1, #0
 800ae22:	4618      	mov	r0, r3
 800ae24:	f002 f920 	bl	800d068 <SDIO_GetResponse>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae32:	d102      	bne.n	800ae3a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ae34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae38:	e02f      	b.n	800ae9a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ae3a:	f107 030c 	add.w	r3, r7, #12
 800ae3e:	4619      	mov	r1, r3
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 f879 	bl	800af38 <SD_FindSCR>
 800ae46:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d001      	beq.n	800ae52 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	e023      	b.n	800ae9a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d01c      	beq.n	800ae96 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae64:	041b      	lsls	r3, r3, #16
 800ae66:	4619      	mov	r1, r3
 800ae68:	4610      	mov	r0, r2
 800ae6a:	f002 fa69 	bl	800d340 <SDMMC_CmdAppCommand>
 800ae6e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d001      	beq.n	800ae7a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	e00f      	b.n	800ae9a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2102      	movs	r1, #2
 800ae80:	4618      	mov	r0, r3
 800ae82:	f002 faa2 	bl	800d3ca <SDMMC_CmdBusWidth>
 800ae86:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d001      	beq.n	800ae92 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	e003      	b.n	800ae9a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ae92:	2300      	movs	r3, #0
 800ae94:	e001      	b.n	800ae9a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ae96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3718      	adds	r7, #24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b086      	sub	sp, #24
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800aeaa:	2300      	movs	r3, #0
 800aeac:	60fb      	str	r3, [r7, #12]
 800aeae:	2300      	movs	r3, #0
 800aeb0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2100      	movs	r1, #0
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f002 f8d5 	bl	800d068 <SDIO_GetResponse>
 800aebe:	4603      	mov	r3, r0
 800aec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aec4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aec8:	d102      	bne.n	800aed0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aeca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aece:	e02f      	b.n	800af30 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aed0:	f107 030c 	add.w	r3, r7, #12
 800aed4:	4619      	mov	r1, r3
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 f82e 	bl	800af38 <SD_FindSCR>
 800aedc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	e023      	b.n	800af30 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d01c      	beq.n	800af2c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aefa:	041b      	lsls	r3, r3, #16
 800aefc:	4619      	mov	r1, r3
 800aefe:	4610      	mov	r0, r2
 800af00:	f002 fa1e 	bl	800d340 <SDMMC_CmdAppCommand>
 800af04:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d001      	beq.n	800af10 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	e00f      	b.n	800af30 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2100      	movs	r1, #0
 800af16:	4618      	mov	r0, r3
 800af18:	f002 fa57 	bl	800d3ca <SDMMC_CmdBusWidth>
 800af1c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d001      	beq.n	800af28 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	e003      	b.n	800af30 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800af28:	2300      	movs	r3, #0
 800af2a:	e001      	b.n	800af30 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800af2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800af30:	4618      	mov	r0, r3
 800af32:	3718      	adds	r7, #24
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800af38:	b590      	push	{r4, r7, lr}
 800af3a:	b08f      	sub	sp, #60	; 0x3c
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800af42:	f7fa f8a5 	bl	8005090 <HAL_GetTick>
 800af46:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800af48:	2300      	movs	r3, #0
 800af4a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800af4c:	2300      	movs	r3, #0
 800af4e:	60bb      	str	r3, [r7, #8]
 800af50:	2300      	movs	r3, #0
 800af52:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2108      	movs	r1, #8
 800af5e:	4618      	mov	r0, r3
 800af60:	f002 f8c1 	bl	800d0e6 <SDMMC_CmdBlockLength>
 800af64:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800af66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d001      	beq.n	800af70 <SD_FindSCR+0x38>
  {
    return errorstate;
 800af6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6e:	e0b2      	b.n	800b0d6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af78:	041b      	lsls	r3, r3, #16
 800af7a:	4619      	mov	r1, r3
 800af7c:	4610      	mov	r0, r2
 800af7e:	f002 f9df 	bl	800d340 <SDMMC_CmdAppCommand>
 800af82:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800af84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af86:	2b00      	cmp	r3, #0
 800af88:	d001      	beq.n	800af8e <SD_FindSCR+0x56>
  {
    return errorstate;
 800af8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8c:	e0a3      	b.n	800b0d6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800af8e:	f04f 33ff 	mov.w	r3, #4294967295
 800af92:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800af94:	2308      	movs	r3, #8
 800af96:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800af98:	2330      	movs	r3, #48	; 0x30
 800af9a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800af9c:	2302      	movs	r3, #2
 800af9e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800afa4:	2301      	movs	r3, #1
 800afa6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f107 0210 	add.w	r2, r7, #16
 800afb0:	4611      	mov	r1, r2
 800afb2:	4618      	mov	r0, r3
 800afb4:	f002 f86b 	bl	800d08e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f002 fa26 	bl	800d40e <SDMMC_CmdSendSCR>
 800afc2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800afc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d02a      	beq.n	800b020 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800afca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afcc:	e083      	b.n	800b0d6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d00f      	beq.n	800affc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6819      	ldr	r1, [r3, #0]
 800afe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	f107 0208 	add.w	r2, r7, #8
 800afe8:	18d4      	adds	r4, r2, r3
 800afea:	4608      	mov	r0, r1
 800afec:	f001 ffdc 	bl	800cfa8 <SDIO_ReadFIFO>
 800aff0:	4603      	mov	r3, r0
 800aff2:	6023      	str	r3, [r4, #0]
      index++;
 800aff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aff6:	3301      	adds	r3, #1
 800aff8:	637b      	str	r3, [r7, #52]	; 0x34
 800affa:	e006      	b.n	800b00a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b002:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b006:	2b00      	cmp	r3, #0
 800b008:	d012      	beq.n	800b030 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b00a:	f7fa f841 	bl	8005090 <HAL_GetTick>
 800b00e:	4602      	mov	r2, r0
 800b010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b012:	1ad3      	subs	r3, r2, r3
 800b014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b018:	d102      	bne.n	800b020 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b01a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b01e:	e05a      	b.n	800b0d6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b026:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d0cf      	beq.n	800afce <SD_FindSCR+0x96>
 800b02e:	e000      	b.n	800b032 <SD_FindSCR+0xfa>
      break;
 800b030:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b038:	f003 0308 	and.w	r3, r3, #8
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d005      	beq.n	800b04c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2208      	movs	r2, #8
 800b046:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b048:	2308      	movs	r3, #8
 800b04a:	e044      	b.n	800b0d6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b052:	f003 0302 	and.w	r3, r3, #2
 800b056:	2b00      	cmp	r3, #0
 800b058:	d005      	beq.n	800b066 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	2202      	movs	r2, #2
 800b060:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b062:	2302      	movs	r3, #2
 800b064:	e037      	b.n	800b0d6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b06c:	f003 0320 	and.w	r3, r3, #32
 800b070:	2b00      	cmp	r3, #0
 800b072:	d005      	beq.n	800b080 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2220      	movs	r2, #32
 800b07a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b07c:	2320      	movs	r3, #32
 800b07e:	e02a      	b.n	800b0d6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f240 523a 	movw	r2, #1338	; 0x53a
 800b088:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	061a      	lsls	r2, r3, #24
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	021b      	lsls	r3, r3, #8
 800b092:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b096:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	0a1b      	lsrs	r3, r3, #8
 800b09c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b0a0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	0e1b      	lsrs	r3, r3, #24
 800b0a6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0aa:	601a      	str	r2, [r3, #0]
    scr++;
 800b0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0ae:	3304      	adds	r3, #4
 800b0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	061a      	lsls	r2, r3, #24
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	021b      	lsls	r3, r3, #8
 800b0ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b0be:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	0a1b      	lsrs	r3, r3, #8
 800b0c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b0c8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	0e1b      	lsrs	r3, r3, #24
 800b0ce:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	373c      	adds	r7, #60	; 0x3c
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd90      	pop	{r4, r7, pc}

0800b0de <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b082      	sub	sp, #8
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
 800b0e6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d101      	bne.n	800b0f2 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e025      	b.n	800b13e <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d106      	bne.n	800b10c <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f7f9 fe58 	bl	8004dbc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2202      	movs	r2, #2
 800b110:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	3304      	adds	r3, #4
 800b11c:	4619      	mov	r1, r3
 800b11e:	4610      	mov	r0, r2
 800b120:	f001 fe14 	bl	800cd4c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6818      	ldr	r0, [r3, #0]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	461a      	mov	r2, r3
 800b12e:	6839      	ldr	r1, [r7, #0]
 800b130:	f001 fe69 	bl	800ce06 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b13c:	2300      	movs	r3, #0
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <HAL_SDRAM_IRQHandler>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b082      	sub	sp, #8
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  /* Check SDRAM interrupt Rising edge flag */
  if (__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	699b      	ldr	r3, [r3, #24]
 800b154:	f003 0301 	and.w	r3, r3, #1
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d10a      	bne.n	800b172 <HAL_SDRAM_IRQHandler+0x2c>
  {
    /* SDRAM refresh error interrupt callback */
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
    hsdram->RefreshErrorCallback(hsdram);
#else
    HAL_SDRAM_RefreshErrorCallback(hsdram);
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 f80c 	bl	800b17a <HAL_SDRAM_RefreshErrorCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    /* Clear SDRAM refresh error interrupt pending bit */
    __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	695a      	ldr	r2, [r3, #20]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f042 0201 	orr.w	r2, r2, #1
 800b170:	615a      	str	r2, [r3, #20]
  }
}
 800b172:	bf00      	nop
 800b174:	3708      	adds	r7, #8
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}

0800b17a <HAL_SDRAM_RefreshErrorCallback>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
{
 800b17a:	b480      	push	{r7}
 800b17c:	b083      	sub	sp, #12
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
   */
}
 800b182:	bf00      	nop
 800b184:	370c      	adds	r7, #12
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b086      	sub	sp, #24
 800b192:	af00      	add	r7, sp, #0
 800b194:	60f8      	str	r0, [r7, #12]
 800b196:	60b9      	str	r1, [r7, #8]
 800b198:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b1a0:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b1a2:	7dfb      	ldrb	r3, [r7, #23]
 800b1a4:	2b02      	cmp	r3, #2
 800b1a6:	d101      	bne.n	800b1ac <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	e021      	b.n	800b1f0 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b1ac:	7dfb      	ldrb	r3, [r7, #23]
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d002      	beq.n	800b1b8 <HAL_SDRAM_SendCommand+0x2a>
 800b1b2:	7dfb      	ldrb	r3, [r7, #23]
 800b1b4:	2b05      	cmp	r3, #5
 800b1b6:	d118      	bne.n	800b1ea <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2202      	movs	r2, #2
 800b1bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	68b9      	ldr	r1, [r7, #8]
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f001 fe85 	bl	800ced8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2b02      	cmp	r3, #2
 800b1d4:	d104      	bne.n	800b1e0 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2205      	movs	r2, #5
 800b1da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b1de:	e006      	b.n	800b1ee <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b1e8:	e001      	b.n	800b1ee <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e000      	b.n	800b1f0 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3718      	adds	r7, #24
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d101      	bne.n	800b20a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b206:	2301      	movs	r3, #1
 800b208:	e041      	b.n	800b28e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b210:	b2db      	uxtb	r3, r3
 800b212:	2b00      	cmp	r3, #0
 800b214:	d106      	bne.n	800b224 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f7f9 fb86 	bl	8004930 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2202      	movs	r2, #2
 800b228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	3304      	adds	r3, #4
 800b234:	4619      	mov	r1, r3
 800b236:	4610      	mov	r0, r2
 800b238:	f000 ff26 	bl	800c088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2201      	movs	r2, #1
 800b240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2201      	movs	r2, #1
 800b248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2201      	movs	r2, #1
 800b250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2201      	movs	r2, #1
 800b260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2201      	movs	r2, #1
 800b268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2201      	movs	r2, #1
 800b270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2201      	movs	r2, #1
 800b278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2201      	movs	r2, #1
 800b280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2201      	movs	r2, #1
 800b288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3708      	adds	r7, #8
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
	...

0800b298 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d001      	beq.n	800b2b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	e04e      	b.n	800b34e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	68da      	ldr	r2, [r3, #12]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f042 0201 	orr.w	r2, r2, #1
 800b2c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a23      	ldr	r2, [pc, #140]	; (800b35c <HAL_TIM_Base_Start_IT+0xc4>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d022      	beq.n	800b318 <HAL_TIM_Base_Start_IT+0x80>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2da:	d01d      	beq.n	800b318 <HAL_TIM_Base_Start_IT+0x80>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a1f      	ldr	r2, [pc, #124]	; (800b360 <HAL_TIM_Base_Start_IT+0xc8>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d018      	beq.n	800b318 <HAL_TIM_Base_Start_IT+0x80>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a1e      	ldr	r2, [pc, #120]	; (800b364 <HAL_TIM_Base_Start_IT+0xcc>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d013      	beq.n	800b318 <HAL_TIM_Base_Start_IT+0x80>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a1c      	ldr	r2, [pc, #112]	; (800b368 <HAL_TIM_Base_Start_IT+0xd0>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d00e      	beq.n	800b318 <HAL_TIM_Base_Start_IT+0x80>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a1b      	ldr	r2, [pc, #108]	; (800b36c <HAL_TIM_Base_Start_IT+0xd4>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d009      	beq.n	800b318 <HAL_TIM_Base_Start_IT+0x80>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a19      	ldr	r2, [pc, #100]	; (800b370 <HAL_TIM_Base_Start_IT+0xd8>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d004      	beq.n	800b318 <HAL_TIM_Base_Start_IT+0x80>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a18      	ldr	r2, [pc, #96]	; (800b374 <HAL_TIM_Base_Start_IT+0xdc>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d111      	bne.n	800b33c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	689b      	ldr	r3, [r3, #8]
 800b31e:	f003 0307 	and.w	r3, r3, #7
 800b322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2b06      	cmp	r3, #6
 800b328:	d010      	beq.n	800b34c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f042 0201 	orr.w	r2, r2, #1
 800b338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b33a:	e007      	b.n	800b34c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f042 0201 	orr.w	r2, r2, #1
 800b34a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3714      	adds	r7, #20
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	40010000 	.word	0x40010000
 800b360:	40000400 	.word	0x40000400
 800b364:	40000800 	.word	0x40000800
 800b368:	40000c00 	.word	0x40000c00
 800b36c:	40010400 	.word	0x40010400
 800b370:	40014000 	.word	0x40014000
 800b374:	40001800 	.word	0x40001800

0800b378 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d101      	bne.n	800b38a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b386:	2301      	movs	r3, #1
 800b388:	e041      	b.n	800b40e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b390:	b2db      	uxtb	r3, r3
 800b392:	2b00      	cmp	r3, #0
 800b394:	d106      	bne.n	800b3a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 f839 	bl	800b416 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2202      	movs	r2, #2
 800b3a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	3304      	adds	r3, #4
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	4610      	mov	r0, r2
 800b3b8:	f000 fe66 	bl	800c088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2201      	movs	r2, #1
 800b3d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2201      	movs	r2, #1
 800b408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3708      	adds	r7, #8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b416:	b480      	push	{r7}
 800b418:	b083      	sub	sp, #12
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b41e:	bf00      	nop
 800b420:	370c      	adds	r7, #12
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr
	...

0800b42c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d109      	bne.n	800b450 <HAL_TIM_PWM_Start+0x24>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b442:	b2db      	uxtb	r3, r3
 800b444:	2b01      	cmp	r3, #1
 800b446:	bf14      	ite	ne
 800b448:	2301      	movne	r3, #1
 800b44a:	2300      	moveq	r3, #0
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	e022      	b.n	800b496 <HAL_TIM_PWM_Start+0x6a>
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	2b04      	cmp	r3, #4
 800b454:	d109      	bne.n	800b46a <HAL_TIM_PWM_Start+0x3e>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	2b01      	cmp	r3, #1
 800b460:	bf14      	ite	ne
 800b462:	2301      	movne	r3, #1
 800b464:	2300      	moveq	r3, #0
 800b466:	b2db      	uxtb	r3, r3
 800b468:	e015      	b.n	800b496 <HAL_TIM_PWM_Start+0x6a>
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	2b08      	cmp	r3, #8
 800b46e:	d109      	bne.n	800b484 <HAL_TIM_PWM_Start+0x58>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b476:	b2db      	uxtb	r3, r3
 800b478:	2b01      	cmp	r3, #1
 800b47a:	bf14      	ite	ne
 800b47c:	2301      	movne	r3, #1
 800b47e:	2300      	moveq	r3, #0
 800b480:	b2db      	uxtb	r3, r3
 800b482:	e008      	b.n	800b496 <HAL_TIM_PWM_Start+0x6a>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	bf14      	ite	ne
 800b490:	2301      	movne	r3, #1
 800b492:	2300      	moveq	r3, #0
 800b494:	b2db      	uxtb	r3, r3
 800b496:	2b00      	cmp	r3, #0
 800b498:	d001      	beq.n	800b49e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	e07c      	b.n	800b598 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d104      	bne.n	800b4ae <HAL_TIM_PWM_Start+0x82>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2202      	movs	r2, #2
 800b4a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b4ac:	e013      	b.n	800b4d6 <HAL_TIM_PWM_Start+0xaa>
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	2b04      	cmp	r3, #4
 800b4b2:	d104      	bne.n	800b4be <HAL_TIM_PWM_Start+0x92>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2202      	movs	r2, #2
 800b4b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b4bc:	e00b      	b.n	800b4d6 <HAL_TIM_PWM_Start+0xaa>
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	2b08      	cmp	r3, #8
 800b4c2:	d104      	bne.n	800b4ce <HAL_TIM_PWM_Start+0xa2>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2202      	movs	r2, #2
 800b4c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b4cc:	e003      	b.n	800b4d6 <HAL_TIM_PWM_Start+0xaa>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2202      	movs	r2, #2
 800b4d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	6839      	ldr	r1, [r7, #0]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f001 f8bc 	bl	800c65c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a2d      	ldr	r2, [pc, #180]	; (800b5a0 <HAL_TIM_PWM_Start+0x174>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d004      	beq.n	800b4f8 <HAL_TIM_PWM_Start+0xcc>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a2c      	ldr	r2, [pc, #176]	; (800b5a4 <HAL_TIM_PWM_Start+0x178>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d101      	bne.n	800b4fc <HAL_TIM_PWM_Start+0xd0>
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e000      	b.n	800b4fe <HAL_TIM_PWM_Start+0xd2>
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d007      	beq.n	800b512 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b510:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a22      	ldr	r2, [pc, #136]	; (800b5a0 <HAL_TIM_PWM_Start+0x174>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d022      	beq.n	800b562 <HAL_TIM_PWM_Start+0x136>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b524:	d01d      	beq.n	800b562 <HAL_TIM_PWM_Start+0x136>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a1f      	ldr	r2, [pc, #124]	; (800b5a8 <HAL_TIM_PWM_Start+0x17c>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d018      	beq.n	800b562 <HAL_TIM_PWM_Start+0x136>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a1d      	ldr	r2, [pc, #116]	; (800b5ac <HAL_TIM_PWM_Start+0x180>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d013      	beq.n	800b562 <HAL_TIM_PWM_Start+0x136>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a1c      	ldr	r2, [pc, #112]	; (800b5b0 <HAL_TIM_PWM_Start+0x184>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d00e      	beq.n	800b562 <HAL_TIM_PWM_Start+0x136>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a16      	ldr	r2, [pc, #88]	; (800b5a4 <HAL_TIM_PWM_Start+0x178>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d009      	beq.n	800b562 <HAL_TIM_PWM_Start+0x136>
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	4a18      	ldr	r2, [pc, #96]	; (800b5b4 <HAL_TIM_PWM_Start+0x188>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d004      	beq.n	800b562 <HAL_TIM_PWM_Start+0x136>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a16      	ldr	r2, [pc, #88]	; (800b5b8 <HAL_TIM_PWM_Start+0x18c>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d111      	bne.n	800b586 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	f003 0307 	and.w	r3, r3, #7
 800b56c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2b06      	cmp	r3, #6
 800b572:	d010      	beq.n	800b596 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f042 0201 	orr.w	r2, r2, #1
 800b582:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b584:	e007      	b.n	800b596 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f042 0201 	orr.w	r2, r2, #1
 800b594:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b596:	2300      	movs	r3, #0
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3710      	adds	r7, #16
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	40010000 	.word	0x40010000
 800b5a4:	40010400 	.word	0x40010400
 800b5a8:	40000400 	.word	0x40000400
 800b5ac:	40000800 	.word	0x40000800
 800b5b0:	40000c00 	.word	0x40000c00
 800b5b4:	40014000 	.word	0x40014000
 800b5b8:	40001800 	.word	0x40001800

0800b5bc <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
 800b5c8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d109      	bne.n	800b5e8 <HAL_TIM_PWM_Start_DMA+0x2c>
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	bf0c      	ite	eq
 800b5e0:	2301      	moveq	r3, #1
 800b5e2:	2300      	movne	r3, #0
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	e022      	b.n	800b62e <HAL_TIM_PWM_Start_DMA+0x72>
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	2b04      	cmp	r3, #4
 800b5ec:	d109      	bne.n	800b602 <HAL_TIM_PWM_Start_DMA+0x46>
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	2b02      	cmp	r3, #2
 800b5f8:	bf0c      	ite	eq
 800b5fa:	2301      	moveq	r3, #1
 800b5fc:	2300      	movne	r3, #0
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	e015      	b.n	800b62e <HAL_TIM_PWM_Start_DMA+0x72>
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	2b08      	cmp	r3, #8
 800b606:	d109      	bne.n	800b61c <HAL_TIM_PWM_Start_DMA+0x60>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	2b02      	cmp	r3, #2
 800b612:	bf0c      	ite	eq
 800b614:	2301      	moveq	r3, #1
 800b616:	2300      	movne	r3, #0
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	e008      	b.n	800b62e <HAL_TIM_PWM_Start_DMA+0x72>
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b622:	b2db      	uxtb	r3, r3
 800b624:	2b02      	cmp	r3, #2
 800b626:	bf0c      	ite	eq
 800b628:	2301      	moveq	r3, #1
 800b62a:	2300      	movne	r3, #0
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d001      	beq.n	800b636 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800b632:	2302      	movs	r3, #2
 800b634:	e171      	b.n	800b91a <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d109      	bne.n	800b650 <HAL_TIM_PWM_Start_DMA+0x94>
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b642:	b2db      	uxtb	r3, r3
 800b644:	2b01      	cmp	r3, #1
 800b646:	bf0c      	ite	eq
 800b648:	2301      	moveq	r3, #1
 800b64a:	2300      	movne	r3, #0
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	e022      	b.n	800b696 <HAL_TIM_PWM_Start_DMA+0xda>
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	2b04      	cmp	r3, #4
 800b654:	d109      	bne.n	800b66a <HAL_TIM_PWM_Start_DMA+0xae>
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	2b01      	cmp	r3, #1
 800b660:	bf0c      	ite	eq
 800b662:	2301      	moveq	r3, #1
 800b664:	2300      	movne	r3, #0
 800b666:	b2db      	uxtb	r3, r3
 800b668:	e015      	b.n	800b696 <HAL_TIM_PWM_Start_DMA+0xda>
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	2b08      	cmp	r3, #8
 800b66e:	d109      	bne.n	800b684 <HAL_TIM_PWM_Start_DMA+0xc8>
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b676:	b2db      	uxtb	r3, r3
 800b678:	2b01      	cmp	r3, #1
 800b67a:	bf0c      	ite	eq
 800b67c:	2301      	moveq	r3, #1
 800b67e:	2300      	movne	r3, #0
 800b680:	b2db      	uxtb	r3, r3
 800b682:	e008      	b.n	800b696 <HAL_TIM_PWM_Start_DMA+0xda>
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	bf0c      	ite	eq
 800b690:	2301      	moveq	r3, #1
 800b692:	2300      	movne	r3, #0
 800b694:	b2db      	uxtb	r3, r3
 800b696:	2b00      	cmp	r3, #0
 800b698:	d024      	beq.n	800b6e4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d104      	bne.n	800b6aa <HAL_TIM_PWM_Start_DMA+0xee>
 800b6a0:	887b      	ldrh	r3, [r7, #2]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d001      	beq.n	800b6aa <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e137      	b.n	800b91a <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d104      	bne.n	800b6ba <HAL_TIM_PWM_Start_DMA+0xfe>
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2202      	movs	r2, #2
 800b6b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b6b8:	e016      	b.n	800b6e8 <HAL_TIM_PWM_Start_DMA+0x12c>
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	2b04      	cmp	r3, #4
 800b6be:	d104      	bne.n	800b6ca <HAL_TIM_PWM_Start_DMA+0x10e>
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2202      	movs	r2, #2
 800b6c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b6c8:	e00e      	b.n	800b6e8 <HAL_TIM_PWM_Start_DMA+0x12c>
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	2b08      	cmp	r3, #8
 800b6ce:	d104      	bne.n	800b6da <HAL_TIM_PWM_Start_DMA+0x11e>
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2202      	movs	r2, #2
 800b6d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6d8:	e006      	b.n	800b6e8 <HAL_TIM_PWM_Start_DMA+0x12c>
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2202      	movs	r2, #2
 800b6de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b6e2:	e001      	b.n	800b6e8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	e118      	b.n	800b91a <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	2b0c      	cmp	r3, #12
 800b6ec:	f200 80ae 	bhi.w	800b84c <HAL_TIM_PWM_Start_DMA+0x290>
 800b6f0:	a201      	add	r2, pc, #4	; (adr r2, 800b6f8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800b6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f6:	bf00      	nop
 800b6f8:	0800b72d 	.word	0x0800b72d
 800b6fc:	0800b84d 	.word	0x0800b84d
 800b700:	0800b84d 	.word	0x0800b84d
 800b704:	0800b84d 	.word	0x0800b84d
 800b708:	0800b775 	.word	0x0800b775
 800b70c:	0800b84d 	.word	0x0800b84d
 800b710:	0800b84d 	.word	0x0800b84d
 800b714:	0800b84d 	.word	0x0800b84d
 800b718:	0800b7bd 	.word	0x0800b7bd
 800b71c:	0800b84d 	.word	0x0800b84d
 800b720:	0800b84d 	.word	0x0800b84d
 800b724:	0800b84d 	.word	0x0800b84d
 800b728:	0800b805 	.word	0x0800b805
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b730:	4a7c      	ldr	r2, [pc, #496]	; (800b924 <HAL_TIM_PWM_Start_DMA+0x368>)
 800b732:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b738:	4a7b      	ldr	r2, [pc, #492]	; (800b928 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800b73a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b740:	4a7a      	ldr	r2, [pc, #488]	; (800b92c <HAL_TIM_PWM_Start_DMA+0x370>)
 800b742:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b748:	6879      	ldr	r1, [r7, #4]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	3334      	adds	r3, #52	; 0x34
 800b750:	461a      	mov	r2, r3
 800b752:	887b      	ldrh	r3, [r7, #2]
 800b754:	f7fb f8c0 	bl	80068d8 <HAL_DMA_Start_IT>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d001      	beq.n	800b762 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b75e:	2301      	movs	r3, #1
 800b760:	e0db      	b.n	800b91a <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	68da      	ldr	r2, [r3, #12]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b770:	60da      	str	r2, [r3, #12]
      break;
 800b772:	e06e      	b.n	800b852 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b778:	4a6a      	ldr	r2, [pc, #424]	; (800b924 <HAL_TIM_PWM_Start_DMA+0x368>)
 800b77a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b780:	4a69      	ldr	r2, [pc, #420]	; (800b928 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800b782:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b788:	4a68      	ldr	r2, [pc, #416]	; (800b92c <HAL_TIM_PWM_Start_DMA+0x370>)
 800b78a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b790:	6879      	ldr	r1, [r7, #4]
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	3338      	adds	r3, #56	; 0x38
 800b798:	461a      	mov	r2, r3
 800b79a:	887b      	ldrh	r3, [r7, #2]
 800b79c:	f7fb f89c 	bl	80068d8 <HAL_DMA_Start_IT>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d001      	beq.n	800b7aa <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e0b7      	b.n	800b91a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	68da      	ldr	r2, [r3, #12]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b7b8:	60da      	str	r2, [r3, #12]
      break;
 800b7ba:	e04a      	b.n	800b852 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c0:	4a58      	ldr	r2, [pc, #352]	; (800b924 <HAL_TIM_PWM_Start_DMA+0x368>)
 800b7c2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c8:	4a57      	ldr	r2, [pc, #348]	; (800b928 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800b7ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d0:	4a56      	ldr	r2, [pc, #344]	; (800b92c <HAL_TIM_PWM_Start_DMA+0x370>)
 800b7d2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b7d8:	6879      	ldr	r1, [r7, #4]
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	333c      	adds	r3, #60	; 0x3c
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	887b      	ldrh	r3, [r7, #2]
 800b7e4:	f7fb f878 	bl	80068d8 <HAL_DMA_Start_IT>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d001      	beq.n	800b7f2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e093      	b.n	800b91a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	68da      	ldr	r2, [r3, #12]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b800:	60da      	str	r2, [r3, #12]
      break;
 800b802:	e026      	b.n	800b852 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b808:	4a46      	ldr	r2, [pc, #280]	; (800b924 <HAL_TIM_PWM_Start_DMA+0x368>)
 800b80a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b810:	4a45      	ldr	r2, [pc, #276]	; (800b928 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800b812:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b818:	4a44      	ldr	r2, [pc, #272]	; (800b92c <HAL_TIM_PWM_Start_DMA+0x370>)
 800b81a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b820:	6879      	ldr	r1, [r7, #4]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	3340      	adds	r3, #64	; 0x40
 800b828:	461a      	mov	r2, r3
 800b82a:	887b      	ldrh	r3, [r7, #2]
 800b82c:	f7fb f854 	bl	80068d8 <HAL_DMA_Start_IT>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d001      	beq.n	800b83a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	e06f      	b.n	800b91a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	68da      	ldr	r2, [r3, #12]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b848:	60da      	str	r2, [r3, #12]
      break;
 800b84a:	e002      	b.n	800b852 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	75fb      	strb	r3, [r7, #23]
      break;
 800b850:	bf00      	nop
  }

  if (status == HAL_OK)
 800b852:	7dfb      	ldrb	r3, [r7, #23]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d15f      	bne.n	800b918 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2201      	movs	r2, #1
 800b85e:	68b9      	ldr	r1, [r7, #8]
 800b860:	4618      	mov	r0, r3
 800b862:	f000 fefb 	bl	800c65c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4a31      	ldr	r2, [pc, #196]	; (800b930 <HAL_TIM_PWM_Start_DMA+0x374>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d004      	beq.n	800b87a <HAL_TIM_PWM_Start_DMA+0x2be>
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a2f      	ldr	r2, [pc, #188]	; (800b934 <HAL_TIM_PWM_Start_DMA+0x378>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d101      	bne.n	800b87e <HAL_TIM_PWM_Start_DMA+0x2c2>
 800b87a:	2301      	movs	r3, #1
 800b87c:	e000      	b.n	800b880 <HAL_TIM_PWM_Start_DMA+0x2c4>
 800b87e:	2300      	movs	r3, #0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d007      	beq.n	800b894 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b892:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a25      	ldr	r2, [pc, #148]	; (800b930 <HAL_TIM_PWM_Start_DMA+0x374>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d022      	beq.n	800b8e4 <HAL_TIM_PWM_Start_DMA+0x328>
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8a6:	d01d      	beq.n	800b8e4 <HAL_TIM_PWM_Start_DMA+0x328>
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a22      	ldr	r2, [pc, #136]	; (800b938 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d018      	beq.n	800b8e4 <HAL_TIM_PWM_Start_DMA+0x328>
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a21      	ldr	r2, [pc, #132]	; (800b93c <HAL_TIM_PWM_Start_DMA+0x380>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d013      	beq.n	800b8e4 <HAL_TIM_PWM_Start_DMA+0x328>
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a1f      	ldr	r2, [pc, #124]	; (800b940 <HAL_TIM_PWM_Start_DMA+0x384>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d00e      	beq.n	800b8e4 <HAL_TIM_PWM_Start_DMA+0x328>
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a1a      	ldr	r2, [pc, #104]	; (800b934 <HAL_TIM_PWM_Start_DMA+0x378>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d009      	beq.n	800b8e4 <HAL_TIM_PWM_Start_DMA+0x328>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a1b      	ldr	r2, [pc, #108]	; (800b944 <HAL_TIM_PWM_Start_DMA+0x388>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d004      	beq.n	800b8e4 <HAL_TIM_PWM_Start_DMA+0x328>
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a1a      	ldr	r2, [pc, #104]	; (800b948 <HAL_TIM_PWM_Start_DMA+0x38c>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d111      	bne.n	800b908 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	689b      	ldr	r3, [r3, #8]
 800b8ea:	f003 0307 	and.w	r3, r3, #7
 800b8ee:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	2b06      	cmp	r3, #6
 800b8f4:	d010      	beq.n	800b918 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f042 0201 	orr.w	r2, r2, #1
 800b904:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b906:	e007      	b.n	800b918 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f042 0201 	orr.w	r2, r2, #1
 800b916:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800b918:	7dfb      	ldrb	r3, [r7, #23]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3718      	adds	r7, #24
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	0800bf79 	.word	0x0800bf79
 800b928:	0800c021 	.word	0x0800c021
 800b92c:	0800bee7 	.word	0x0800bee7
 800b930:	40010000 	.word	0x40010000
 800b934:	40010400 	.word	0x40010400
 800b938:	40000400 	.word	0x40000400
 800b93c:	40000800 	.word	0x40000800
 800b940:	40000c00 	.word	0x40000c00
 800b944:	40014000 	.word	0x40014000
 800b948:	40001800 	.word	0x40001800

0800b94c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	691b      	ldr	r3, [r3, #16]
 800b95a:	f003 0302 	and.w	r3, r3, #2
 800b95e:	2b02      	cmp	r3, #2
 800b960:	d122      	bne.n	800b9a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	f003 0302 	and.w	r3, r3, #2
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d11b      	bne.n	800b9a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f06f 0202 	mvn.w	r2, #2
 800b978:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2201      	movs	r2, #1
 800b97e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	699b      	ldr	r3, [r3, #24]
 800b986:	f003 0303 	and.w	r3, r3, #3
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d003      	beq.n	800b996 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 fa77 	bl	800be82 <HAL_TIM_IC_CaptureCallback>
 800b994:	e005      	b.n	800b9a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 fa69 	bl	800be6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 fa7a 	bl	800be96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	691b      	ldr	r3, [r3, #16]
 800b9ae:	f003 0304 	and.w	r3, r3, #4
 800b9b2:	2b04      	cmp	r3, #4
 800b9b4:	d122      	bne.n	800b9fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	f003 0304 	and.w	r3, r3, #4
 800b9c0:	2b04      	cmp	r3, #4
 800b9c2:	d11b      	bne.n	800b9fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f06f 0204 	mvn.w	r2, #4
 800b9cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2202      	movs	r2, #2
 800b9d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	699b      	ldr	r3, [r3, #24]
 800b9da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d003      	beq.n	800b9ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fa4d 	bl	800be82 <HAL_TIM_IC_CaptureCallback>
 800b9e8:	e005      	b.n	800b9f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fa3f 	bl	800be6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 fa50 	bl	800be96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	691b      	ldr	r3, [r3, #16]
 800ba02:	f003 0308 	and.w	r3, r3, #8
 800ba06:	2b08      	cmp	r3, #8
 800ba08:	d122      	bne.n	800ba50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	f003 0308 	and.w	r3, r3, #8
 800ba14:	2b08      	cmp	r3, #8
 800ba16:	d11b      	bne.n	800ba50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f06f 0208 	mvn.w	r2, #8
 800ba20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2204      	movs	r2, #4
 800ba26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	69db      	ldr	r3, [r3, #28]
 800ba2e:	f003 0303 	and.w	r3, r3, #3
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d003      	beq.n	800ba3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 fa23 	bl	800be82 <HAL_TIM_IC_CaptureCallback>
 800ba3c:	e005      	b.n	800ba4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 fa15 	bl	800be6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 fa26 	bl	800be96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	f003 0310 	and.w	r3, r3, #16
 800ba5a:	2b10      	cmp	r3, #16
 800ba5c:	d122      	bne.n	800baa4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	f003 0310 	and.w	r3, r3, #16
 800ba68:	2b10      	cmp	r3, #16
 800ba6a:	d11b      	bne.n	800baa4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f06f 0210 	mvn.w	r2, #16
 800ba74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2208      	movs	r2, #8
 800ba7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	69db      	ldr	r3, [r3, #28]
 800ba82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d003      	beq.n	800ba92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 f9f9 	bl	800be82 <HAL_TIM_IC_CaptureCallback>
 800ba90:	e005      	b.n	800ba9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 f9eb 	bl	800be6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 f9fc 	bl	800be96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2200      	movs	r2, #0
 800baa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	691b      	ldr	r3, [r3, #16]
 800baaa:	f003 0301 	and.w	r3, r3, #1
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d10e      	bne.n	800bad0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	f003 0301 	and.w	r3, r3, #1
 800babc:	2b01      	cmp	r3, #1
 800babe:	d107      	bne.n	800bad0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f06f 0201 	mvn.w	r2, #1
 800bac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f7f8 fb86 	bl	80041dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bada:	2b80      	cmp	r3, #128	; 0x80
 800badc:	d10e      	bne.n	800bafc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	68db      	ldr	r3, [r3, #12]
 800bae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bae8:	2b80      	cmp	r3, #128	; 0x80
 800baea:	d107      	bne.n	800bafc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800baf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 fe5c 	bl	800c7b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb06:	2b40      	cmp	r3, #64	; 0x40
 800bb08:	d10e      	bne.n	800bb28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb14:	2b40      	cmp	r3, #64	; 0x40
 800bb16:	d107      	bne.n	800bb28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bb20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 f9cb 	bl	800bebe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	691b      	ldr	r3, [r3, #16]
 800bb2e:	f003 0320 	and.w	r3, r3, #32
 800bb32:	2b20      	cmp	r3, #32
 800bb34:	d10e      	bne.n	800bb54 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	f003 0320 	and.w	r3, r3, #32
 800bb40:	2b20      	cmp	r3, #32
 800bb42:	d107      	bne.n	800bb54 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f06f 0220 	mvn.w	r2, #32
 800bb4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 fe26 	bl	800c7a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb54:	bf00      	nop
 800bb56:	3708      	adds	r7, #8
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b086      	sub	sp, #24
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d101      	bne.n	800bb7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bb76:	2302      	movs	r3, #2
 800bb78:	e0ae      	b.n	800bcd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2b0c      	cmp	r3, #12
 800bb86:	f200 809f 	bhi.w	800bcc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800bb8a:	a201      	add	r2, pc, #4	; (adr r2, 800bb90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb90:	0800bbc5 	.word	0x0800bbc5
 800bb94:	0800bcc9 	.word	0x0800bcc9
 800bb98:	0800bcc9 	.word	0x0800bcc9
 800bb9c:	0800bcc9 	.word	0x0800bcc9
 800bba0:	0800bc05 	.word	0x0800bc05
 800bba4:	0800bcc9 	.word	0x0800bcc9
 800bba8:	0800bcc9 	.word	0x0800bcc9
 800bbac:	0800bcc9 	.word	0x0800bcc9
 800bbb0:	0800bc47 	.word	0x0800bc47
 800bbb4:	0800bcc9 	.word	0x0800bcc9
 800bbb8:	0800bcc9 	.word	0x0800bcc9
 800bbbc:	0800bcc9 	.word	0x0800bcc9
 800bbc0:	0800bc87 	.word	0x0800bc87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	68b9      	ldr	r1, [r7, #8]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f000 fafc 	bl	800c1c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	699a      	ldr	r2, [r3, #24]
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f042 0208 	orr.w	r2, r2, #8
 800bbde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	699a      	ldr	r2, [r3, #24]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f022 0204 	bic.w	r2, r2, #4
 800bbee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	6999      	ldr	r1, [r3, #24]
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	691a      	ldr	r2, [r3, #16]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	430a      	orrs	r2, r1
 800bc00:	619a      	str	r2, [r3, #24]
      break;
 800bc02:	e064      	b.n	800bcce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	68b9      	ldr	r1, [r7, #8]
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f000 fb4c 	bl	800c2a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	699a      	ldr	r2, [r3, #24]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	699a      	ldr	r2, [r3, #24]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	6999      	ldr	r1, [r3, #24]
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	691b      	ldr	r3, [r3, #16]
 800bc3a:	021a      	lsls	r2, r3, #8
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	430a      	orrs	r2, r1
 800bc42:	619a      	str	r2, [r3, #24]
      break;
 800bc44:	e043      	b.n	800bcce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	68b9      	ldr	r1, [r7, #8]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f000 fba1 	bl	800c394 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	69da      	ldr	r2, [r3, #28]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f042 0208 	orr.w	r2, r2, #8
 800bc60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	69da      	ldr	r2, [r3, #28]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f022 0204 	bic.w	r2, r2, #4
 800bc70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	69d9      	ldr	r1, [r3, #28]
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	691a      	ldr	r2, [r3, #16]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	430a      	orrs	r2, r1
 800bc82:	61da      	str	r2, [r3, #28]
      break;
 800bc84:	e023      	b.n	800bcce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	68b9      	ldr	r1, [r7, #8]
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f000 fbf5 	bl	800c47c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	69da      	ldr	r2, [r3, #28]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	69da      	ldr	r2, [r3, #28]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bcb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	69d9      	ldr	r1, [r3, #28]
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	691b      	ldr	r3, [r3, #16]
 800bcbc:	021a      	lsls	r2, r3, #8
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	430a      	orrs	r2, r1
 800bcc4:	61da      	str	r2, [r3, #28]
      break;
 800bcc6:	e002      	b.n	800bcce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	75fb      	strb	r3, [r7, #23]
      break;
 800bccc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3718      	adds	r7, #24
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b084      	sub	sp, #16
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bcea:	2300      	movs	r3, #0
 800bcec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d101      	bne.n	800bcfc <HAL_TIM_ConfigClockSource+0x1c>
 800bcf8:	2302      	movs	r3, #2
 800bcfa:	e0b4      	b.n	800be66 <HAL_TIM_ConfigClockSource+0x186>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2202      	movs	r2, #2
 800bd08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	689b      	ldr	r3, [r3, #8]
 800bd12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bd1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd34:	d03e      	beq.n	800bdb4 <HAL_TIM_ConfigClockSource+0xd4>
 800bd36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd3a:	f200 8087 	bhi.w	800be4c <HAL_TIM_ConfigClockSource+0x16c>
 800bd3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd42:	f000 8086 	beq.w	800be52 <HAL_TIM_ConfigClockSource+0x172>
 800bd46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd4a:	d87f      	bhi.n	800be4c <HAL_TIM_ConfigClockSource+0x16c>
 800bd4c:	2b70      	cmp	r3, #112	; 0x70
 800bd4e:	d01a      	beq.n	800bd86 <HAL_TIM_ConfigClockSource+0xa6>
 800bd50:	2b70      	cmp	r3, #112	; 0x70
 800bd52:	d87b      	bhi.n	800be4c <HAL_TIM_ConfigClockSource+0x16c>
 800bd54:	2b60      	cmp	r3, #96	; 0x60
 800bd56:	d050      	beq.n	800bdfa <HAL_TIM_ConfigClockSource+0x11a>
 800bd58:	2b60      	cmp	r3, #96	; 0x60
 800bd5a:	d877      	bhi.n	800be4c <HAL_TIM_ConfigClockSource+0x16c>
 800bd5c:	2b50      	cmp	r3, #80	; 0x50
 800bd5e:	d03c      	beq.n	800bdda <HAL_TIM_ConfigClockSource+0xfa>
 800bd60:	2b50      	cmp	r3, #80	; 0x50
 800bd62:	d873      	bhi.n	800be4c <HAL_TIM_ConfigClockSource+0x16c>
 800bd64:	2b40      	cmp	r3, #64	; 0x40
 800bd66:	d058      	beq.n	800be1a <HAL_TIM_ConfigClockSource+0x13a>
 800bd68:	2b40      	cmp	r3, #64	; 0x40
 800bd6a:	d86f      	bhi.n	800be4c <HAL_TIM_ConfigClockSource+0x16c>
 800bd6c:	2b30      	cmp	r3, #48	; 0x30
 800bd6e:	d064      	beq.n	800be3a <HAL_TIM_ConfigClockSource+0x15a>
 800bd70:	2b30      	cmp	r3, #48	; 0x30
 800bd72:	d86b      	bhi.n	800be4c <HAL_TIM_ConfigClockSource+0x16c>
 800bd74:	2b20      	cmp	r3, #32
 800bd76:	d060      	beq.n	800be3a <HAL_TIM_ConfigClockSource+0x15a>
 800bd78:	2b20      	cmp	r3, #32
 800bd7a:	d867      	bhi.n	800be4c <HAL_TIM_ConfigClockSource+0x16c>
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d05c      	beq.n	800be3a <HAL_TIM_ConfigClockSource+0x15a>
 800bd80:	2b10      	cmp	r3, #16
 800bd82:	d05a      	beq.n	800be3a <HAL_TIM_ConfigClockSource+0x15a>
 800bd84:	e062      	b.n	800be4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6818      	ldr	r0, [r3, #0]
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	6899      	ldr	r1, [r3, #8]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	685a      	ldr	r2, [r3, #4]
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	f000 fc41 	bl	800c61c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	689b      	ldr	r3, [r3, #8]
 800bda0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bda8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	68ba      	ldr	r2, [r7, #8]
 800bdb0:	609a      	str	r2, [r3, #8]
      break;
 800bdb2:	e04f      	b.n	800be54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6818      	ldr	r0, [r3, #0]
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	6899      	ldr	r1, [r3, #8]
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	685a      	ldr	r2, [r3, #4]
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	f000 fc2a 	bl	800c61c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	689a      	ldr	r2, [r3, #8]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bdd6:	609a      	str	r2, [r3, #8]
      break;
 800bdd8:	e03c      	b.n	800be54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6818      	ldr	r0, [r3, #0]
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	6859      	ldr	r1, [r3, #4]
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	68db      	ldr	r3, [r3, #12]
 800bde6:	461a      	mov	r2, r3
 800bde8:	f000 fb9e 	bl	800c528 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	2150      	movs	r1, #80	; 0x50
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f000 fbf7 	bl	800c5e6 <TIM_ITRx_SetConfig>
      break;
 800bdf8:	e02c      	b.n	800be54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6818      	ldr	r0, [r3, #0]
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	6859      	ldr	r1, [r3, #4]
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	68db      	ldr	r3, [r3, #12]
 800be06:	461a      	mov	r2, r3
 800be08:	f000 fbbd 	bl	800c586 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2160      	movs	r1, #96	; 0x60
 800be12:	4618      	mov	r0, r3
 800be14:	f000 fbe7 	bl	800c5e6 <TIM_ITRx_SetConfig>
      break;
 800be18:	e01c      	b.n	800be54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6818      	ldr	r0, [r3, #0]
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	6859      	ldr	r1, [r3, #4]
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	461a      	mov	r2, r3
 800be28:	f000 fb7e 	bl	800c528 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2140      	movs	r1, #64	; 0x40
 800be32:	4618      	mov	r0, r3
 800be34:	f000 fbd7 	bl	800c5e6 <TIM_ITRx_SetConfig>
      break;
 800be38:	e00c      	b.n	800be54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4619      	mov	r1, r3
 800be44:	4610      	mov	r0, r2
 800be46:	f000 fbce 	bl	800c5e6 <TIM_ITRx_SetConfig>
      break;
 800be4a:	e003      	b.n	800be54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800be4c:	2301      	movs	r3, #1
 800be4e:	73fb      	strb	r3, [r7, #15]
      break;
 800be50:	e000      	b.n	800be54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800be52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2201      	movs	r2, #1
 800be58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2200      	movs	r2, #0
 800be60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be64:	7bfb      	ldrb	r3, [r7, #15]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be6e:	b480      	push	{r7}
 800be70:	b083      	sub	sp, #12
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800be76:	bf00      	nop
 800be78:	370c      	adds	r7, #12
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr

0800be82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800be82:	b480      	push	{r7}
 800be84:	b083      	sub	sp, #12
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800be8a:	bf00      	nop
 800be8c:	370c      	adds	r7, #12
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr

0800be96 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be96:	b480      	push	{r7}
 800be98:	b083      	sub	sp, #12
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be9e:	bf00      	nop
 800bea0:	370c      	adds	r7, #12
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr

0800beaa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800beaa:	b480      	push	{r7}
 800beac:	b083      	sub	sp, #12
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800beb2:	bf00      	nop
 800beb4:	370c      	adds	r7, #12
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr

0800bebe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bebe:	b480      	push	{r7}
 800bec0:	b083      	sub	sp, #12
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bec6:	bf00      	nop
 800bec8:	370c      	adds	r7, #12
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr

0800bed2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800bed2:	b480      	push	{r7}
 800bed4:	b083      	sub	sp, #12
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800beda:	bf00      	nop
 800bedc:	370c      	adds	r7, #12
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr

0800bee6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800bee6:	b580      	push	{r7, lr}
 800bee8:	b084      	sub	sp, #16
 800beea:	af00      	add	r7, sp, #0
 800beec:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	429a      	cmp	r2, r3
 800befc:	d107      	bne.n	800bf0e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2201      	movs	r2, #1
 800bf02:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2201      	movs	r2, #1
 800bf08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf0c:	e02a      	b.n	800bf64 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d107      	bne.n	800bf28 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2202      	movs	r2, #2
 800bf1c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2201      	movs	r2, #1
 800bf22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf26:	e01d      	b.n	800bf64 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d107      	bne.n	800bf42 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2204      	movs	r2, #4
 800bf36:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf40:	e010      	b.n	800bf64 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d107      	bne.n	800bf5c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2208      	movs	r2, #8
 800bf50:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2201      	movs	r2, #1
 800bf56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf5a:	e003      	b.n	800bf64 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2201      	movs	r2, #1
 800bf60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800bf64:	68f8      	ldr	r0, [r7, #12]
 800bf66:	f7ff ffb4 	bl	800bed2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	771a      	strb	r2, [r3, #28]
}
 800bf70:	bf00      	nop
 800bf72:	3710      	adds	r7, #16
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf84:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d10b      	bne.n	800bfa8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2201      	movs	r2, #1
 800bf94:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	69db      	ldr	r3, [r3, #28]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d136      	bne.n	800c00c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bfa6:	e031      	b.n	800c00c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d10b      	bne.n	800bfca <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2202      	movs	r2, #2
 800bfb6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	69db      	ldr	r3, [r3, #28]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d125      	bne.n	800c00c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bfc8:	e020      	b.n	800c00c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d10b      	bne.n	800bfec <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2204      	movs	r2, #4
 800bfd8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	69db      	ldr	r3, [r3, #28]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d114      	bne.n	800c00c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bfea:	e00f      	b.n	800c00c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d10a      	bne.n	800c00c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2208      	movs	r2, #8
 800bffa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	69db      	ldr	r3, [r3, #28]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d103      	bne.n	800c00c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2201      	movs	r2, #1
 800c008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c00c:	68f8      	ldr	r0, [r7, #12]
 800c00e:	f7ff ff42 	bl	800be96 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2200      	movs	r2, #0
 800c016:	771a      	strb	r2, [r3, #28]
}
 800c018:	bf00      	nop
 800c01a:	3710      	adds	r7, #16
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c02c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	429a      	cmp	r2, r3
 800c036:	d103      	bne.n	800c040 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2201      	movs	r2, #1
 800c03c:	771a      	strb	r2, [r3, #28]
 800c03e:	e019      	b.n	800c074 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	429a      	cmp	r2, r3
 800c048:	d103      	bne.n	800c052 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2202      	movs	r2, #2
 800c04e:	771a      	strb	r2, [r3, #28]
 800c050:	e010      	b.n	800c074 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	429a      	cmp	r2, r3
 800c05a:	d103      	bne.n	800c064 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2204      	movs	r2, #4
 800c060:	771a      	strb	r2, [r3, #28]
 800c062:	e007      	b.n	800c074 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d102      	bne.n	800c074 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2208      	movs	r2, #8
 800c072:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800c074:	68f8      	ldr	r0, [r7, #12]
 800c076:	f7ff ff18 	bl	800beaa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2200      	movs	r2, #0
 800c07e:	771a      	strb	r2, [r3, #28]
}
 800c080:	bf00      	nop
 800c082:	3710      	adds	r7, #16
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4a40      	ldr	r2, [pc, #256]	; (800c19c <TIM_Base_SetConfig+0x114>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d013      	beq.n	800c0c8 <TIM_Base_SetConfig+0x40>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0a6:	d00f      	beq.n	800c0c8 <TIM_Base_SetConfig+0x40>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	4a3d      	ldr	r2, [pc, #244]	; (800c1a0 <TIM_Base_SetConfig+0x118>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d00b      	beq.n	800c0c8 <TIM_Base_SetConfig+0x40>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4a3c      	ldr	r2, [pc, #240]	; (800c1a4 <TIM_Base_SetConfig+0x11c>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d007      	beq.n	800c0c8 <TIM_Base_SetConfig+0x40>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	4a3b      	ldr	r2, [pc, #236]	; (800c1a8 <TIM_Base_SetConfig+0x120>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d003      	beq.n	800c0c8 <TIM_Base_SetConfig+0x40>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	4a3a      	ldr	r2, [pc, #232]	; (800c1ac <TIM_Base_SetConfig+0x124>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d108      	bne.n	800c0da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	68fa      	ldr	r2, [r7, #12]
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	4a2f      	ldr	r2, [pc, #188]	; (800c19c <TIM_Base_SetConfig+0x114>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d02b      	beq.n	800c13a <TIM_Base_SetConfig+0xb2>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0e8:	d027      	beq.n	800c13a <TIM_Base_SetConfig+0xb2>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	4a2c      	ldr	r2, [pc, #176]	; (800c1a0 <TIM_Base_SetConfig+0x118>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d023      	beq.n	800c13a <TIM_Base_SetConfig+0xb2>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	4a2b      	ldr	r2, [pc, #172]	; (800c1a4 <TIM_Base_SetConfig+0x11c>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d01f      	beq.n	800c13a <TIM_Base_SetConfig+0xb2>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	4a2a      	ldr	r2, [pc, #168]	; (800c1a8 <TIM_Base_SetConfig+0x120>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d01b      	beq.n	800c13a <TIM_Base_SetConfig+0xb2>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	4a29      	ldr	r2, [pc, #164]	; (800c1ac <TIM_Base_SetConfig+0x124>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d017      	beq.n	800c13a <TIM_Base_SetConfig+0xb2>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	4a28      	ldr	r2, [pc, #160]	; (800c1b0 <TIM_Base_SetConfig+0x128>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d013      	beq.n	800c13a <TIM_Base_SetConfig+0xb2>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	4a27      	ldr	r2, [pc, #156]	; (800c1b4 <TIM_Base_SetConfig+0x12c>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d00f      	beq.n	800c13a <TIM_Base_SetConfig+0xb2>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	4a26      	ldr	r2, [pc, #152]	; (800c1b8 <TIM_Base_SetConfig+0x130>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d00b      	beq.n	800c13a <TIM_Base_SetConfig+0xb2>
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	4a25      	ldr	r2, [pc, #148]	; (800c1bc <TIM_Base_SetConfig+0x134>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d007      	beq.n	800c13a <TIM_Base_SetConfig+0xb2>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	4a24      	ldr	r2, [pc, #144]	; (800c1c0 <TIM_Base_SetConfig+0x138>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d003      	beq.n	800c13a <TIM_Base_SetConfig+0xb2>
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	4a23      	ldr	r2, [pc, #140]	; (800c1c4 <TIM_Base_SetConfig+0x13c>)
 800c136:	4293      	cmp	r3, r2
 800c138:	d108      	bne.n	800c14c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	68fa      	ldr	r2, [r7, #12]
 800c148:	4313      	orrs	r3, r2
 800c14a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	695b      	ldr	r3, [r3, #20]
 800c156:	4313      	orrs	r3, r2
 800c158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	68fa      	ldr	r2, [r7, #12]
 800c15e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	689a      	ldr	r2, [r3, #8]
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	4a0a      	ldr	r2, [pc, #40]	; (800c19c <TIM_Base_SetConfig+0x114>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d003      	beq.n	800c180 <TIM_Base_SetConfig+0xf8>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	4a0c      	ldr	r2, [pc, #48]	; (800c1ac <TIM_Base_SetConfig+0x124>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d103      	bne.n	800c188 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	691a      	ldr	r2, [r3, #16]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2201      	movs	r2, #1
 800c18c:	615a      	str	r2, [r3, #20]
}
 800c18e:	bf00      	nop
 800c190:	3714      	adds	r7, #20
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	40010000 	.word	0x40010000
 800c1a0:	40000400 	.word	0x40000400
 800c1a4:	40000800 	.word	0x40000800
 800c1a8:	40000c00 	.word	0x40000c00
 800c1ac:	40010400 	.word	0x40010400
 800c1b0:	40014000 	.word	0x40014000
 800c1b4:	40014400 	.word	0x40014400
 800c1b8:	40014800 	.word	0x40014800
 800c1bc:	40001800 	.word	0x40001800
 800c1c0:	40001c00 	.word	0x40001c00
 800c1c4:	40002000 	.word	0x40002000

0800c1c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b087      	sub	sp, #28
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6a1b      	ldr	r3, [r3, #32]
 800c1d6:	f023 0201 	bic.w	r2, r3, #1
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a1b      	ldr	r3, [r3, #32]
 800c1e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	699b      	ldr	r3, [r3, #24]
 800c1ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f023 0303 	bic.w	r3, r3, #3
 800c1fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	68fa      	ldr	r2, [r7, #12]
 800c206:	4313      	orrs	r3, r2
 800c208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	f023 0302 	bic.w	r3, r3, #2
 800c210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	689b      	ldr	r3, [r3, #8]
 800c216:	697a      	ldr	r2, [r7, #20]
 800c218:	4313      	orrs	r3, r2
 800c21a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	4a20      	ldr	r2, [pc, #128]	; (800c2a0 <TIM_OC1_SetConfig+0xd8>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d003      	beq.n	800c22c <TIM_OC1_SetConfig+0x64>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	4a1f      	ldr	r2, [pc, #124]	; (800c2a4 <TIM_OC1_SetConfig+0xdc>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d10c      	bne.n	800c246 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	f023 0308 	bic.w	r3, r3, #8
 800c232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	68db      	ldr	r3, [r3, #12]
 800c238:	697a      	ldr	r2, [r7, #20]
 800c23a:	4313      	orrs	r3, r2
 800c23c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	f023 0304 	bic.w	r3, r3, #4
 800c244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	4a15      	ldr	r2, [pc, #84]	; (800c2a0 <TIM_OC1_SetConfig+0xd8>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d003      	beq.n	800c256 <TIM_OC1_SetConfig+0x8e>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	4a14      	ldr	r2, [pc, #80]	; (800c2a4 <TIM_OC1_SetConfig+0xdc>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d111      	bne.n	800c27a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c25c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	695b      	ldr	r3, [r3, #20]
 800c26a:	693a      	ldr	r2, [r7, #16]
 800c26c:	4313      	orrs	r3, r2
 800c26e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	699b      	ldr	r3, [r3, #24]
 800c274:	693a      	ldr	r2, [r7, #16]
 800c276:	4313      	orrs	r3, r2
 800c278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	693a      	ldr	r2, [r7, #16]
 800c27e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	685a      	ldr	r2, [r3, #4]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	697a      	ldr	r2, [r7, #20]
 800c292:	621a      	str	r2, [r3, #32]
}
 800c294:	bf00      	nop
 800c296:	371c      	adds	r7, #28
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr
 800c2a0:	40010000 	.word	0x40010000
 800c2a4:	40010400 	.word	0x40010400

0800c2a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b087      	sub	sp, #28
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6a1b      	ldr	r3, [r3, #32]
 800c2b6:	f023 0210 	bic.w	r2, r3, #16
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6a1b      	ldr	r3, [r3, #32]
 800c2c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	699b      	ldr	r3, [r3, #24]
 800c2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	021b      	lsls	r3, r3, #8
 800c2e6:	68fa      	ldr	r2, [r7, #12]
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	f023 0320 	bic.w	r3, r3, #32
 800c2f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	689b      	ldr	r3, [r3, #8]
 800c2f8:	011b      	lsls	r3, r3, #4
 800c2fa:	697a      	ldr	r2, [r7, #20]
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4a22      	ldr	r2, [pc, #136]	; (800c38c <TIM_OC2_SetConfig+0xe4>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d003      	beq.n	800c310 <TIM_OC2_SetConfig+0x68>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	4a21      	ldr	r2, [pc, #132]	; (800c390 <TIM_OC2_SetConfig+0xe8>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d10d      	bne.n	800c32c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c310:	697b      	ldr	r3, [r7, #20]
 800c312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	011b      	lsls	r3, r3, #4
 800c31e:	697a      	ldr	r2, [r7, #20]
 800c320:	4313      	orrs	r3, r2
 800c322:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c32a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	4a17      	ldr	r2, [pc, #92]	; (800c38c <TIM_OC2_SetConfig+0xe4>)
 800c330:	4293      	cmp	r3, r2
 800c332:	d003      	beq.n	800c33c <TIM_OC2_SetConfig+0x94>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	4a16      	ldr	r2, [pc, #88]	; (800c390 <TIM_OC2_SetConfig+0xe8>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d113      	bne.n	800c364 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c342:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c34a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	695b      	ldr	r3, [r3, #20]
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	693a      	ldr	r2, [r7, #16]
 800c354:	4313      	orrs	r3, r2
 800c356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	699b      	ldr	r3, [r3, #24]
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	693a      	ldr	r2, [r7, #16]
 800c360:	4313      	orrs	r3, r2
 800c362:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	693a      	ldr	r2, [r7, #16]
 800c368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	68fa      	ldr	r2, [r7, #12]
 800c36e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	685a      	ldr	r2, [r3, #4]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	697a      	ldr	r2, [r7, #20]
 800c37c:	621a      	str	r2, [r3, #32]
}
 800c37e:	bf00      	nop
 800c380:	371c      	adds	r7, #28
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr
 800c38a:	bf00      	nop
 800c38c:	40010000 	.word	0x40010000
 800c390:	40010400 	.word	0x40010400

0800c394 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c394:	b480      	push	{r7}
 800c396:	b087      	sub	sp, #28
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6a1b      	ldr	r3, [r3, #32]
 800c3a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a1b      	ldr	r3, [r3, #32]
 800c3ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	69db      	ldr	r3, [r3, #28]
 800c3ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f023 0303 	bic.w	r3, r3, #3
 800c3ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	68fa      	ldr	r2, [r7, #12]
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c3dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	689b      	ldr	r3, [r3, #8]
 800c3e2:	021b      	lsls	r3, r3, #8
 800c3e4:	697a      	ldr	r2, [r7, #20]
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	4a21      	ldr	r2, [pc, #132]	; (800c474 <TIM_OC3_SetConfig+0xe0>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d003      	beq.n	800c3fa <TIM_OC3_SetConfig+0x66>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	4a20      	ldr	r2, [pc, #128]	; (800c478 <TIM_OC3_SetConfig+0xe4>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d10d      	bne.n	800c416 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c400:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	021b      	lsls	r3, r3, #8
 800c408:	697a      	ldr	r2, [r7, #20]
 800c40a:	4313      	orrs	r3, r2
 800c40c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	4a16      	ldr	r2, [pc, #88]	; (800c474 <TIM_OC3_SetConfig+0xe0>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d003      	beq.n	800c426 <TIM_OC3_SetConfig+0x92>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	4a15      	ldr	r2, [pc, #84]	; (800c478 <TIM_OC3_SetConfig+0xe4>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d113      	bne.n	800c44e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c42c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	695b      	ldr	r3, [r3, #20]
 800c43a:	011b      	lsls	r3, r3, #4
 800c43c:	693a      	ldr	r2, [r7, #16]
 800c43e:	4313      	orrs	r3, r2
 800c440:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	699b      	ldr	r3, [r3, #24]
 800c446:	011b      	lsls	r3, r3, #4
 800c448:	693a      	ldr	r2, [r7, #16]
 800c44a:	4313      	orrs	r3, r2
 800c44c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	693a      	ldr	r2, [r7, #16]
 800c452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	685a      	ldr	r2, [r3, #4]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	697a      	ldr	r2, [r7, #20]
 800c466:	621a      	str	r2, [r3, #32]
}
 800c468:	bf00      	nop
 800c46a:	371c      	adds	r7, #28
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr
 800c474:	40010000 	.word	0x40010000
 800c478:	40010400 	.word	0x40010400

0800c47c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b087      	sub	sp, #28
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6a1b      	ldr	r3, [r3, #32]
 800c48a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6a1b      	ldr	r3, [r3, #32]
 800c496:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	69db      	ldr	r3, [r3, #28]
 800c4a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c4aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	021b      	lsls	r3, r3, #8
 800c4ba:	68fa      	ldr	r2, [r7, #12]
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c4c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	031b      	lsls	r3, r3, #12
 800c4ce:	693a      	ldr	r2, [r7, #16]
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	4a12      	ldr	r2, [pc, #72]	; (800c520 <TIM_OC4_SetConfig+0xa4>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d003      	beq.n	800c4e4 <TIM_OC4_SetConfig+0x68>
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	4a11      	ldr	r2, [pc, #68]	; (800c524 <TIM_OC4_SetConfig+0xa8>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d109      	bne.n	800c4f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c4ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	695b      	ldr	r3, [r3, #20]
 800c4f0:	019b      	lsls	r3, r3, #6
 800c4f2:	697a      	ldr	r2, [r7, #20]
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	697a      	ldr	r2, [r7, #20]
 800c4fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	685a      	ldr	r2, [r3, #4]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	693a      	ldr	r2, [r7, #16]
 800c510:	621a      	str	r2, [r3, #32]
}
 800c512:	bf00      	nop
 800c514:	371c      	adds	r7, #28
 800c516:	46bd      	mov	sp, r7
 800c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51c:	4770      	bx	lr
 800c51e:	bf00      	nop
 800c520:	40010000 	.word	0x40010000
 800c524:	40010400 	.word	0x40010400

0800c528 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c528:	b480      	push	{r7}
 800c52a:	b087      	sub	sp, #28
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	6a1b      	ldr	r3, [r3, #32]
 800c538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6a1b      	ldr	r3, [r3, #32]
 800c53e:	f023 0201 	bic.w	r2, r3, #1
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	699b      	ldr	r3, [r3, #24]
 800c54a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	011b      	lsls	r3, r3, #4
 800c558:	693a      	ldr	r2, [r7, #16]
 800c55a:	4313      	orrs	r3, r2
 800c55c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	f023 030a 	bic.w	r3, r3, #10
 800c564:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c566:	697a      	ldr	r2, [r7, #20]
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	4313      	orrs	r3, r2
 800c56c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	693a      	ldr	r2, [r7, #16]
 800c572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	697a      	ldr	r2, [r7, #20]
 800c578:	621a      	str	r2, [r3, #32]
}
 800c57a:	bf00      	nop
 800c57c:	371c      	adds	r7, #28
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr

0800c586 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c586:	b480      	push	{r7}
 800c588:	b087      	sub	sp, #28
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	60f8      	str	r0, [r7, #12]
 800c58e:	60b9      	str	r1, [r7, #8]
 800c590:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	6a1b      	ldr	r3, [r3, #32]
 800c596:	f023 0210 	bic.w	r2, r3, #16
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	699b      	ldr	r3, [r3, #24]
 800c5a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	6a1b      	ldr	r3, [r3, #32]
 800c5a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c5b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	031b      	lsls	r3, r3, #12
 800c5b6:	697a      	ldr	r2, [r7, #20]
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c5c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	011b      	lsls	r3, r3, #4
 800c5c8:	693a      	ldr	r2, [r7, #16]
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	697a      	ldr	r2, [r7, #20]
 800c5d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	693a      	ldr	r2, [r7, #16]
 800c5d8:	621a      	str	r2, [r3, #32]
}
 800c5da:	bf00      	nop
 800c5dc:	371c      	adds	r7, #28
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr

0800c5e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c5e6:	b480      	push	{r7}
 800c5e8:	b085      	sub	sp, #20
 800c5ea:	af00      	add	r7, sp, #0
 800c5ec:	6078      	str	r0, [r7, #4]
 800c5ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c5fe:	683a      	ldr	r2, [r7, #0]
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	4313      	orrs	r3, r2
 800c604:	f043 0307 	orr.w	r3, r3, #7
 800c608:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	68fa      	ldr	r2, [r7, #12]
 800c60e:	609a      	str	r2, [r3, #8]
}
 800c610:	bf00      	nop
 800c612:	3714      	adds	r7, #20
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr

0800c61c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b087      	sub	sp, #28
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	607a      	str	r2, [r7, #4]
 800c628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	021a      	lsls	r2, r3, #8
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	431a      	orrs	r2, r3
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	4313      	orrs	r3, r2
 800c644:	697a      	ldr	r2, [r7, #20]
 800c646:	4313      	orrs	r3, r2
 800c648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	697a      	ldr	r2, [r7, #20]
 800c64e:	609a      	str	r2, [r3, #8]
}
 800c650:	bf00      	nop
 800c652:	371c      	adds	r7, #28
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr

0800c65c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b087      	sub	sp, #28
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	f003 031f 	and.w	r3, r3, #31
 800c66e:	2201      	movs	r2, #1
 800c670:	fa02 f303 	lsl.w	r3, r2, r3
 800c674:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	6a1a      	ldr	r2, [r3, #32]
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	43db      	mvns	r3, r3
 800c67e:	401a      	ands	r2, r3
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	6a1a      	ldr	r2, [r3, #32]
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	f003 031f 	and.w	r3, r3, #31
 800c68e:	6879      	ldr	r1, [r7, #4]
 800c690:	fa01 f303 	lsl.w	r3, r1, r3
 800c694:	431a      	orrs	r2, r3
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	621a      	str	r2, [r3, #32]
}
 800c69a:	bf00      	nop
 800c69c:	371c      	adds	r7, #28
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr
	...

0800c6a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d101      	bne.n	800c6c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c6bc:	2302      	movs	r3, #2
 800c6be:	e05a      	b.n	800c776 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2201      	movs	r2, #1
 800c6c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2202      	movs	r2, #2
 800c6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	68fa      	ldr	r2, [r7, #12]
 800c6f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a21      	ldr	r2, [pc, #132]	; (800c784 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d022      	beq.n	800c74a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c70c:	d01d      	beq.n	800c74a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4a1d      	ldr	r2, [pc, #116]	; (800c788 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d018      	beq.n	800c74a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a1b      	ldr	r2, [pc, #108]	; (800c78c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d013      	beq.n	800c74a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a1a      	ldr	r2, [pc, #104]	; (800c790 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d00e      	beq.n	800c74a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a18      	ldr	r2, [pc, #96]	; (800c794 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d009      	beq.n	800c74a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a17      	ldr	r2, [pc, #92]	; (800c798 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d004      	beq.n	800c74a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a15      	ldr	r2, [pc, #84]	; (800c79c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d10c      	bne.n	800c764 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c750:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	68ba      	ldr	r2, [r7, #8]
 800c758:	4313      	orrs	r3, r2
 800c75a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	68ba      	ldr	r2, [r7, #8]
 800c762:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c774:	2300      	movs	r3, #0
}
 800c776:	4618      	mov	r0, r3
 800c778:	3714      	adds	r7, #20
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop
 800c784:	40010000 	.word	0x40010000
 800c788:	40000400 	.word	0x40000400
 800c78c:	40000800 	.word	0x40000800
 800c790:	40000c00 	.word	0x40000c00
 800c794:	40010400 	.word	0x40010400
 800c798:	40014000 	.word	0x40014000
 800c79c:	40001800 	.word	0x40001800

0800c7a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b083      	sub	sp, #12
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c7a8:	bf00      	nop
 800c7aa:	370c      	adds	r7, #12
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr

0800c7b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c7bc:	bf00      	nop
 800c7be:	370c      	adds	r7, #12
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr

0800c7c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d101      	bne.n	800c7da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	e03f      	b.n	800c85a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d106      	bne.n	800c7f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f7f8 f9b6 	bl	8004b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2224      	movs	r2, #36	; 0x24
 800c7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	68da      	ldr	r2, [r3, #12]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c80a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 f829 	bl	800c864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	691a      	ldr	r2, [r3, #16]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c820:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	695a      	ldr	r2, [r3, #20]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c830:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	68da      	ldr	r2, [r3, #12]
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c840:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2220      	movs	r2, #32
 800c84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2220      	movs	r2, #32
 800c854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c858:	2300      	movs	r3, #0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3708      	adds	r7, #8
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
	...

0800c864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c868:	b0c0      	sub	sp, #256	; 0x100
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	691b      	ldr	r3, [r3, #16]
 800c878:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c87c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c880:	68d9      	ldr	r1, [r3, #12]
 800c882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	ea40 0301 	orr.w	r3, r0, r1
 800c88c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c88e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c892:	689a      	ldr	r2, [r3, #8]
 800c894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c898:	691b      	ldr	r3, [r3, #16]
 800c89a:	431a      	orrs	r2, r3
 800c89c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8a0:	695b      	ldr	r3, [r3, #20]
 800c8a2:	431a      	orrs	r2, r3
 800c8a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8a8:	69db      	ldr	r3, [r3, #28]
 800c8aa:	4313      	orrs	r3, r2
 800c8ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c8b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c8bc:	f021 010c 	bic.w	r1, r1, #12
 800c8c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8c4:	681a      	ldr	r2, [r3, #0]
 800c8c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c8ca:	430b      	orrs	r3, r1
 800c8cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c8ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	695b      	ldr	r3, [r3, #20]
 800c8d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c8da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8de:	6999      	ldr	r1, [r3, #24]
 800c8e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8e4:	681a      	ldr	r2, [r3, #0]
 800c8e6:	ea40 0301 	orr.w	r3, r0, r1
 800c8ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c8ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8f0:	681a      	ldr	r2, [r3, #0]
 800c8f2:	4b8f      	ldr	r3, [pc, #572]	; (800cb30 <UART_SetConfig+0x2cc>)
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d005      	beq.n	800c904 <UART_SetConfig+0xa0>
 800c8f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	4b8d      	ldr	r3, [pc, #564]	; (800cb34 <UART_SetConfig+0x2d0>)
 800c900:	429a      	cmp	r2, r3
 800c902:	d104      	bne.n	800c90e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c904:	f7fd f94c 	bl	8009ba0 <HAL_RCC_GetPCLK2Freq>
 800c908:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c90c:	e003      	b.n	800c916 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c90e:	f7fd f933 	bl	8009b78 <HAL_RCC_GetPCLK1Freq>
 800c912:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c91a:	69db      	ldr	r3, [r3, #28]
 800c91c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c920:	f040 810c 	bne.w	800cb3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c928:	2200      	movs	r2, #0
 800c92a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c92e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c932:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c936:	4622      	mov	r2, r4
 800c938:	462b      	mov	r3, r5
 800c93a:	1891      	adds	r1, r2, r2
 800c93c:	65b9      	str	r1, [r7, #88]	; 0x58
 800c93e:	415b      	adcs	r3, r3
 800c940:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c942:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c946:	4621      	mov	r1, r4
 800c948:	eb12 0801 	adds.w	r8, r2, r1
 800c94c:	4629      	mov	r1, r5
 800c94e:	eb43 0901 	adc.w	r9, r3, r1
 800c952:	f04f 0200 	mov.w	r2, #0
 800c956:	f04f 0300 	mov.w	r3, #0
 800c95a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c95e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c966:	4690      	mov	r8, r2
 800c968:	4699      	mov	r9, r3
 800c96a:	4623      	mov	r3, r4
 800c96c:	eb18 0303 	adds.w	r3, r8, r3
 800c970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c974:	462b      	mov	r3, r5
 800c976:	eb49 0303 	adc.w	r3, r9, r3
 800c97a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c97e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c98a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c98e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c992:	460b      	mov	r3, r1
 800c994:	18db      	adds	r3, r3, r3
 800c996:	653b      	str	r3, [r7, #80]	; 0x50
 800c998:	4613      	mov	r3, r2
 800c99a:	eb42 0303 	adc.w	r3, r2, r3
 800c99e:	657b      	str	r3, [r7, #84]	; 0x54
 800c9a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c9a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c9a8:	f7f4 f8b0 	bl	8000b0c <__aeabi_uldivmod>
 800c9ac:	4602      	mov	r2, r0
 800c9ae:	460b      	mov	r3, r1
 800c9b0:	4b61      	ldr	r3, [pc, #388]	; (800cb38 <UART_SetConfig+0x2d4>)
 800c9b2:	fba3 2302 	umull	r2, r3, r3, r2
 800c9b6:	095b      	lsrs	r3, r3, #5
 800c9b8:	011c      	lsls	r4, r3, #4
 800c9ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c9c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c9c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c9cc:	4642      	mov	r2, r8
 800c9ce:	464b      	mov	r3, r9
 800c9d0:	1891      	adds	r1, r2, r2
 800c9d2:	64b9      	str	r1, [r7, #72]	; 0x48
 800c9d4:	415b      	adcs	r3, r3
 800c9d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c9d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c9dc:	4641      	mov	r1, r8
 800c9de:	eb12 0a01 	adds.w	sl, r2, r1
 800c9e2:	4649      	mov	r1, r9
 800c9e4:	eb43 0b01 	adc.w	fp, r3, r1
 800c9e8:	f04f 0200 	mov.w	r2, #0
 800c9ec:	f04f 0300 	mov.w	r3, #0
 800c9f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c9f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c9f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c9fc:	4692      	mov	sl, r2
 800c9fe:	469b      	mov	fp, r3
 800ca00:	4643      	mov	r3, r8
 800ca02:	eb1a 0303 	adds.w	r3, sl, r3
 800ca06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ca0a:	464b      	mov	r3, r9
 800ca0c:	eb4b 0303 	adc.w	r3, fp, r3
 800ca10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ca14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca18:	685b      	ldr	r3, [r3, #4]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ca20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ca24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ca28:	460b      	mov	r3, r1
 800ca2a:	18db      	adds	r3, r3, r3
 800ca2c:	643b      	str	r3, [r7, #64]	; 0x40
 800ca2e:	4613      	mov	r3, r2
 800ca30:	eb42 0303 	adc.w	r3, r2, r3
 800ca34:	647b      	str	r3, [r7, #68]	; 0x44
 800ca36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ca3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ca3e:	f7f4 f865 	bl	8000b0c <__aeabi_uldivmod>
 800ca42:	4602      	mov	r2, r0
 800ca44:	460b      	mov	r3, r1
 800ca46:	4611      	mov	r1, r2
 800ca48:	4b3b      	ldr	r3, [pc, #236]	; (800cb38 <UART_SetConfig+0x2d4>)
 800ca4a:	fba3 2301 	umull	r2, r3, r3, r1
 800ca4e:	095b      	lsrs	r3, r3, #5
 800ca50:	2264      	movs	r2, #100	; 0x64
 800ca52:	fb02 f303 	mul.w	r3, r2, r3
 800ca56:	1acb      	subs	r3, r1, r3
 800ca58:	00db      	lsls	r3, r3, #3
 800ca5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ca5e:	4b36      	ldr	r3, [pc, #216]	; (800cb38 <UART_SetConfig+0x2d4>)
 800ca60:	fba3 2302 	umull	r2, r3, r3, r2
 800ca64:	095b      	lsrs	r3, r3, #5
 800ca66:	005b      	lsls	r3, r3, #1
 800ca68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ca6c:	441c      	add	r4, r3
 800ca6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca72:	2200      	movs	r2, #0
 800ca74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ca78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ca7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ca80:	4642      	mov	r2, r8
 800ca82:	464b      	mov	r3, r9
 800ca84:	1891      	adds	r1, r2, r2
 800ca86:	63b9      	str	r1, [r7, #56]	; 0x38
 800ca88:	415b      	adcs	r3, r3
 800ca8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ca90:	4641      	mov	r1, r8
 800ca92:	1851      	adds	r1, r2, r1
 800ca94:	6339      	str	r1, [r7, #48]	; 0x30
 800ca96:	4649      	mov	r1, r9
 800ca98:	414b      	adcs	r3, r1
 800ca9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ca9c:	f04f 0200 	mov.w	r2, #0
 800caa0:	f04f 0300 	mov.w	r3, #0
 800caa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800caa8:	4659      	mov	r1, fp
 800caaa:	00cb      	lsls	r3, r1, #3
 800caac:	4651      	mov	r1, sl
 800caae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cab2:	4651      	mov	r1, sl
 800cab4:	00ca      	lsls	r2, r1, #3
 800cab6:	4610      	mov	r0, r2
 800cab8:	4619      	mov	r1, r3
 800caba:	4603      	mov	r3, r0
 800cabc:	4642      	mov	r2, r8
 800cabe:	189b      	adds	r3, r3, r2
 800cac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cac4:	464b      	mov	r3, r9
 800cac6:	460a      	mov	r2, r1
 800cac8:	eb42 0303 	adc.w	r3, r2, r3
 800cacc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cadc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cae0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cae4:	460b      	mov	r3, r1
 800cae6:	18db      	adds	r3, r3, r3
 800cae8:	62bb      	str	r3, [r7, #40]	; 0x28
 800caea:	4613      	mov	r3, r2
 800caec:	eb42 0303 	adc.w	r3, r2, r3
 800caf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800caf2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800caf6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cafa:	f7f4 f807 	bl	8000b0c <__aeabi_uldivmod>
 800cafe:	4602      	mov	r2, r0
 800cb00:	460b      	mov	r3, r1
 800cb02:	4b0d      	ldr	r3, [pc, #52]	; (800cb38 <UART_SetConfig+0x2d4>)
 800cb04:	fba3 1302 	umull	r1, r3, r3, r2
 800cb08:	095b      	lsrs	r3, r3, #5
 800cb0a:	2164      	movs	r1, #100	; 0x64
 800cb0c:	fb01 f303 	mul.w	r3, r1, r3
 800cb10:	1ad3      	subs	r3, r2, r3
 800cb12:	00db      	lsls	r3, r3, #3
 800cb14:	3332      	adds	r3, #50	; 0x32
 800cb16:	4a08      	ldr	r2, [pc, #32]	; (800cb38 <UART_SetConfig+0x2d4>)
 800cb18:	fba2 2303 	umull	r2, r3, r2, r3
 800cb1c:	095b      	lsrs	r3, r3, #5
 800cb1e:	f003 0207 	and.w	r2, r3, #7
 800cb22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4422      	add	r2, r4
 800cb2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cb2c:	e105      	b.n	800cd3a <UART_SetConfig+0x4d6>
 800cb2e:	bf00      	nop
 800cb30:	40011000 	.word	0x40011000
 800cb34:	40011400 	.word	0x40011400
 800cb38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cb3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb40:	2200      	movs	r2, #0
 800cb42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cb46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800cb4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cb4e:	4642      	mov	r2, r8
 800cb50:	464b      	mov	r3, r9
 800cb52:	1891      	adds	r1, r2, r2
 800cb54:	6239      	str	r1, [r7, #32]
 800cb56:	415b      	adcs	r3, r3
 800cb58:	627b      	str	r3, [r7, #36]	; 0x24
 800cb5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cb5e:	4641      	mov	r1, r8
 800cb60:	1854      	adds	r4, r2, r1
 800cb62:	4649      	mov	r1, r9
 800cb64:	eb43 0501 	adc.w	r5, r3, r1
 800cb68:	f04f 0200 	mov.w	r2, #0
 800cb6c:	f04f 0300 	mov.w	r3, #0
 800cb70:	00eb      	lsls	r3, r5, #3
 800cb72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cb76:	00e2      	lsls	r2, r4, #3
 800cb78:	4614      	mov	r4, r2
 800cb7a:	461d      	mov	r5, r3
 800cb7c:	4643      	mov	r3, r8
 800cb7e:	18e3      	adds	r3, r4, r3
 800cb80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cb84:	464b      	mov	r3, r9
 800cb86:	eb45 0303 	adc.w	r3, r5, r3
 800cb8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cb8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cb9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cb9e:	f04f 0200 	mov.w	r2, #0
 800cba2:	f04f 0300 	mov.w	r3, #0
 800cba6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cbaa:	4629      	mov	r1, r5
 800cbac:	008b      	lsls	r3, r1, #2
 800cbae:	4621      	mov	r1, r4
 800cbb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cbb4:	4621      	mov	r1, r4
 800cbb6:	008a      	lsls	r2, r1, #2
 800cbb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cbbc:	f7f3 ffa6 	bl	8000b0c <__aeabi_uldivmod>
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	4b60      	ldr	r3, [pc, #384]	; (800cd48 <UART_SetConfig+0x4e4>)
 800cbc6:	fba3 2302 	umull	r2, r3, r3, r2
 800cbca:	095b      	lsrs	r3, r3, #5
 800cbcc:	011c      	lsls	r4, r3, #4
 800cbce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cbd8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cbdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cbe0:	4642      	mov	r2, r8
 800cbe2:	464b      	mov	r3, r9
 800cbe4:	1891      	adds	r1, r2, r2
 800cbe6:	61b9      	str	r1, [r7, #24]
 800cbe8:	415b      	adcs	r3, r3
 800cbea:	61fb      	str	r3, [r7, #28]
 800cbec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cbf0:	4641      	mov	r1, r8
 800cbf2:	1851      	adds	r1, r2, r1
 800cbf4:	6139      	str	r1, [r7, #16]
 800cbf6:	4649      	mov	r1, r9
 800cbf8:	414b      	adcs	r3, r1
 800cbfa:	617b      	str	r3, [r7, #20]
 800cbfc:	f04f 0200 	mov.w	r2, #0
 800cc00:	f04f 0300 	mov.w	r3, #0
 800cc04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cc08:	4659      	mov	r1, fp
 800cc0a:	00cb      	lsls	r3, r1, #3
 800cc0c:	4651      	mov	r1, sl
 800cc0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cc12:	4651      	mov	r1, sl
 800cc14:	00ca      	lsls	r2, r1, #3
 800cc16:	4610      	mov	r0, r2
 800cc18:	4619      	mov	r1, r3
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	4642      	mov	r2, r8
 800cc1e:	189b      	adds	r3, r3, r2
 800cc20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cc24:	464b      	mov	r3, r9
 800cc26:	460a      	mov	r2, r1
 800cc28:	eb42 0303 	adc.w	r3, r2, r3
 800cc2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cc30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	67bb      	str	r3, [r7, #120]	; 0x78
 800cc3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cc3c:	f04f 0200 	mov.w	r2, #0
 800cc40:	f04f 0300 	mov.w	r3, #0
 800cc44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cc48:	4649      	mov	r1, r9
 800cc4a:	008b      	lsls	r3, r1, #2
 800cc4c:	4641      	mov	r1, r8
 800cc4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cc52:	4641      	mov	r1, r8
 800cc54:	008a      	lsls	r2, r1, #2
 800cc56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cc5a:	f7f3 ff57 	bl	8000b0c <__aeabi_uldivmod>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	460b      	mov	r3, r1
 800cc62:	4b39      	ldr	r3, [pc, #228]	; (800cd48 <UART_SetConfig+0x4e4>)
 800cc64:	fba3 1302 	umull	r1, r3, r3, r2
 800cc68:	095b      	lsrs	r3, r3, #5
 800cc6a:	2164      	movs	r1, #100	; 0x64
 800cc6c:	fb01 f303 	mul.w	r3, r1, r3
 800cc70:	1ad3      	subs	r3, r2, r3
 800cc72:	011b      	lsls	r3, r3, #4
 800cc74:	3332      	adds	r3, #50	; 0x32
 800cc76:	4a34      	ldr	r2, [pc, #208]	; (800cd48 <UART_SetConfig+0x4e4>)
 800cc78:	fba2 2303 	umull	r2, r3, r2, r3
 800cc7c:	095b      	lsrs	r3, r3, #5
 800cc7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc82:	441c      	add	r4, r3
 800cc84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc88:	2200      	movs	r2, #0
 800cc8a:	673b      	str	r3, [r7, #112]	; 0x70
 800cc8c:	677a      	str	r2, [r7, #116]	; 0x74
 800cc8e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cc92:	4642      	mov	r2, r8
 800cc94:	464b      	mov	r3, r9
 800cc96:	1891      	adds	r1, r2, r2
 800cc98:	60b9      	str	r1, [r7, #8]
 800cc9a:	415b      	adcs	r3, r3
 800cc9c:	60fb      	str	r3, [r7, #12]
 800cc9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cca2:	4641      	mov	r1, r8
 800cca4:	1851      	adds	r1, r2, r1
 800cca6:	6039      	str	r1, [r7, #0]
 800cca8:	4649      	mov	r1, r9
 800ccaa:	414b      	adcs	r3, r1
 800ccac:	607b      	str	r3, [r7, #4]
 800ccae:	f04f 0200 	mov.w	r2, #0
 800ccb2:	f04f 0300 	mov.w	r3, #0
 800ccb6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ccba:	4659      	mov	r1, fp
 800ccbc:	00cb      	lsls	r3, r1, #3
 800ccbe:	4651      	mov	r1, sl
 800ccc0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ccc4:	4651      	mov	r1, sl
 800ccc6:	00ca      	lsls	r2, r1, #3
 800ccc8:	4610      	mov	r0, r2
 800ccca:	4619      	mov	r1, r3
 800cccc:	4603      	mov	r3, r0
 800ccce:	4642      	mov	r2, r8
 800ccd0:	189b      	adds	r3, r3, r2
 800ccd2:	66bb      	str	r3, [r7, #104]	; 0x68
 800ccd4:	464b      	mov	r3, r9
 800ccd6:	460a      	mov	r2, r1
 800ccd8:	eb42 0303 	adc.w	r3, r2, r3
 800ccdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ccde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	2200      	movs	r2, #0
 800cce6:	663b      	str	r3, [r7, #96]	; 0x60
 800cce8:	667a      	str	r2, [r7, #100]	; 0x64
 800ccea:	f04f 0200 	mov.w	r2, #0
 800ccee:	f04f 0300 	mov.w	r3, #0
 800ccf2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ccf6:	4649      	mov	r1, r9
 800ccf8:	008b      	lsls	r3, r1, #2
 800ccfa:	4641      	mov	r1, r8
 800ccfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cd00:	4641      	mov	r1, r8
 800cd02:	008a      	lsls	r2, r1, #2
 800cd04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cd08:	f7f3 ff00 	bl	8000b0c <__aeabi_uldivmod>
 800cd0c:	4602      	mov	r2, r0
 800cd0e:	460b      	mov	r3, r1
 800cd10:	4b0d      	ldr	r3, [pc, #52]	; (800cd48 <UART_SetConfig+0x4e4>)
 800cd12:	fba3 1302 	umull	r1, r3, r3, r2
 800cd16:	095b      	lsrs	r3, r3, #5
 800cd18:	2164      	movs	r1, #100	; 0x64
 800cd1a:	fb01 f303 	mul.w	r3, r1, r3
 800cd1e:	1ad3      	subs	r3, r2, r3
 800cd20:	011b      	lsls	r3, r3, #4
 800cd22:	3332      	adds	r3, #50	; 0x32
 800cd24:	4a08      	ldr	r2, [pc, #32]	; (800cd48 <UART_SetConfig+0x4e4>)
 800cd26:	fba2 2303 	umull	r2, r3, r2, r3
 800cd2a:	095b      	lsrs	r3, r3, #5
 800cd2c:	f003 020f 	and.w	r2, r3, #15
 800cd30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4422      	add	r2, r4
 800cd38:	609a      	str	r2, [r3, #8]
}
 800cd3a:	bf00      	nop
 800cd3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cd40:	46bd      	mov	sp, r7
 800cd42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cd46:	bf00      	nop
 800cd48:	51eb851f 	.word	0x51eb851f

0800cd4c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b083      	sub	sp, #12
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d123      	bne.n	800cda6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800cd66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cd6a:	683a      	ldr	r2, [r7, #0]
 800cd6c:	6851      	ldr	r1, [r2, #4]
 800cd6e:	683a      	ldr	r2, [r7, #0]
 800cd70:	6892      	ldr	r2, [r2, #8]
 800cd72:	4311      	orrs	r1, r2
 800cd74:	683a      	ldr	r2, [r7, #0]
 800cd76:	68d2      	ldr	r2, [r2, #12]
 800cd78:	4311      	orrs	r1, r2
 800cd7a:	683a      	ldr	r2, [r7, #0]
 800cd7c:	6912      	ldr	r2, [r2, #16]
 800cd7e:	4311      	orrs	r1, r2
 800cd80:	683a      	ldr	r2, [r7, #0]
 800cd82:	6952      	ldr	r2, [r2, #20]
 800cd84:	4311      	orrs	r1, r2
 800cd86:	683a      	ldr	r2, [r7, #0]
 800cd88:	6992      	ldr	r2, [r2, #24]
 800cd8a:	4311      	orrs	r1, r2
 800cd8c:	683a      	ldr	r2, [r7, #0]
 800cd8e:	69d2      	ldr	r2, [r2, #28]
 800cd90:	4311      	orrs	r1, r2
 800cd92:	683a      	ldr	r2, [r7, #0]
 800cd94:	6a12      	ldr	r2, [r2, #32]
 800cd96:	4311      	orrs	r1, r2
 800cd98:	683a      	ldr	r2, [r7, #0]
 800cd9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cd9c:	430a      	orrs	r2, r1
 800cd9e:	431a      	orrs	r2, r3
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	601a      	str	r2, [r3, #0]
 800cda4:	e028      	b.n	800cdf8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	69d9      	ldr	r1, [r3, #28]
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	6a1b      	ldr	r3, [r3, #32]
 800cdb6:	4319      	orrs	r1, r3
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdbc:	430b      	orrs	r3, r1
 800cdbe:	431a      	orrs	r2, r3
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800cdcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cdd0:	683a      	ldr	r2, [r7, #0]
 800cdd2:	6851      	ldr	r1, [r2, #4]
 800cdd4:	683a      	ldr	r2, [r7, #0]
 800cdd6:	6892      	ldr	r2, [r2, #8]
 800cdd8:	4311      	orrs	r1, r2
 800cdda:	683a      	ldr	r2, [r7, #0]
 800cddc:	68d2      	ldr	r2, [r2, #12]
 800cdde:	4311      	orrs	r1, r2
 800cde0:	683a      	ldr	r2, [r7, #0]
 800cde2:	6912      	ldr	r2, [r2, #16]
 800cde4:	4311      	orrs	r1, r2
 800cde6:	683a      	ldr	r2, [r7, #0]
 800cde8:	6952      	ldr	r2, [r2, #20]
 800cdea:	4311      	orrs	r1, r2
 800cdec:	683a      	ldr	r2, [r7, #0]
 800cdee:	6992      	ldr	r2, [r2, #24]
 800cdf0:	430a      	orrs	r2, r1
 800cdf2:	431a      	orrs	r2, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	370c      	adds	r7, #12
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr

0800ce06 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ce06:	b480      	push	{r7}
 800ce08:	b085      	sub	sp, #20
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	60f8      	str	r0, [r7, #12]
 800ce0e:	60b9      	str	r1, [r7, #8]
 800ce10:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d128      	bne.n	800ce6a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	1e59      	subs	r1, r3, #1
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	3b01      	subs	r3, #1
 800ce2c:	011b      	lsls	r3, r3, #4
 800ce2e:	4319      	orrs	r1, r3
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	3b01      	subs	r3, #1
 800ce36:	021b      	lsls	r3, r3, #8
 800ce38:	4319      	orrs	r1, r3
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	68db      	ldr	r3, [r3, #12]
 800ce3e:	3b01      	subs	r3, #1
 800ce40:	031b      	lsls	r3, r3, #12
 800ce42:	4319      	orrs	r1, r3
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	691b      	ldr	r3, [r3, #16]
 800ce48:	3b01      	subs	r3, #1
 800ce4a:	041b      	lsls	r3, r3, #16
 800ce4c:	4319      	orrs	r1, r3
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	695b      	ldr	r3, [r3, #20]
 800ce52:	3b01      	subs	r3, #1
 800ce54:	051b      	lsls	r3, r3, #20
 800ce56:	4319      	orrs	r1, r3
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	699b      	ldr	r3, [r3, #24]
 800ce5c:	3b01      	subs	r3, #1
 800ce5e:	061b      	lsls	r3, r3, #24
 800ce60:	430b      	orrs	r3, r1
 800ce62:	431a      	orrs	r2, r3
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	609a      	str	r2, [r3, #8]
 800ce68:	e02f      	b.n	800ceca <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	689b      	ldr	r3, [r3, #8]
 800ce6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ce72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce76:	68ba      	ldr	r2, [r7, #8]
 800ce78:	68d2      	ldr	r2, [r2, #12]
 800ce7a:	3a01      	subs	r2, #1
 800ce7c:	0311      	lsls	r1, r2, #12
 800ce7e:	68ba      	ldr	r2, [r7, #8]
 800ce80:	6952      	ldr	r2, [r2, #20]
 800ce82:	3a01      	subs	r2, #1
 800ce84:	0512      	lsls	r2, r2, #20
 800ce86:	430a      	orrs	r2, r1
 800ce88:	431a      	orrs	r2, r3
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	68db      	ldr	r3, [r3, #12]
 800ce92:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	1e59      	subs	r1, r3, #1
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	3b01      	subs	r3, #1
 800cea2:	011b      	lsls	r3, r3, #4
 800cea4:	4319      	orrs	r1, r3
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	689b      	ldr	r3, [r3, #8]
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	021b      	lsls	r3, r3, #8
 800ceae:	4319      	orrs	r1, r3
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	691b      	ldr	r3, [r3, #16]
 800ceb4:	3b01      	subs	r3, #1
 800ceb6:	041b      	lsls	r3, r3, #16
 800ceb8:	4319      	orrs	r1, r3
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	699b      	ldr	r3, [r3, #24]
 800cebe:	3b01      	subs	r3, #1
 800cec0:	061b      	lsls	r3, r3, #24
 800cec2:	430b      	orrs	r3, r1
 800cec4:	431a      	orrs	r2, r3
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800ceca:	2300      	movs	r3, #0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3714      	adds	r7, #20
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr

0800ced8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b086      	sub	sp, #24
 800cedc:	af00      	add	r7, sp, #0
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800cee4:	2300      	movs	r3, #0
 800cee6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	691b      	ldr	r3, [r3, #16]
 800ceec:	0d9b      	lsrs	r3, r3, #22
 800ceee:	059b      	lsls	r3, r3, #22
 800cef0:	68ba      	ldr	r2, [r7, #8]
 800cef2:	6811      	ldr	r1, [r2, #0]
 800cef4:	68ba      	ldr	r2, [r7, #8]
 800cef6:	6852      	ldr	r2, [r2, #4]
 800cef8:	4311      	orrs	r1, r2
 800cefa:	68ba      	ldr	r2, [r7, #8]
 800cefc:	6892      	ldr	r2, [r2, #8]
 800cefe:	3a01      	subs	r2, #1
 800cf00:	0152      	lsls	r2, r2, #5
 800cf02:	4311      	orrs	r1, r2
 800cf04:	68ba      	ldr	r2, [r7, #8]
 800cf06:	68d2      	ldr	r2, [r2, #12]
 800cf08:	0252      	lsls	r2, r2, #9
 800cf0a:	430a      	orrs	r2, r1
 800cf0c:	431a      	orrs	r2, r3
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800cf12:	f7f8 f8bd 	bl	8005090 <HAL_GetTick>
 800cf16:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800cf18:	e010      	b.n	800cf3c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf20:	d00c      	beq.n	800cf3c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d007      	beq.n	800cf38 <FMC_SDRAM_SendCommand+0x60>
 800cf28:	f7f8 f8b2 	bl	8005090 <HAL_GetTick>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	1ad3      	subs	r3, r2, r3
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d201      	bcs.n	800cf3c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800cf38:	2303      	movs	r3, #3
 800cf3a:	e006      	b.n	800cf4a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	699b      	ldr	r3, [r3, #24]
 800cf40:	f003 0320 	and.w	r3, r3, #32
 800cf44:	2b20      	cmp	r3, #32
 800cf46:	d0e8      	beq.n	800cf1a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800cf48:	2300      	movs	r3, #0
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3718      	adds	r7, #24
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800cf52:	b084      	sub	sp, #16
 800cf54:	b480      	push	{r7}
 800cf56:	b085      	sub	sp, #20
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	f107 001c 	add.w	r0, r7, #28
 800cf60:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cf64:	2300      	movs	r3, #0
 800cf66:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800cf68:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800cf6a:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cf6c:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800cf6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800cf70:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cf72:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800cf74:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cf76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800cf78:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cf7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800cf7c:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cf7e:	68fa      	ldr	r2, [r7, #12]
 800cf80:	4313      	orrs	r3, r2
 800cf82:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800cf8c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cf90:	68fa      	ldr	r2, [r7, #12]
 800cf92:	431a      	orrs	r2, r3
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cf98:	2300      	movs	r3, #0
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3714      	adds	r7, #20
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	b004      	add	sp, #16
 800cfa6:	4770      	bx	lr

0800cfa8 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	370c      	adds	r7, #12
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr

0800cfc2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800cfc2:	b480      	push	{r7}
 800cfc4:	b083      	sub	sp, #12
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2203      	movs	r2, #3
 800cfce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cfd0:	2300      	movs	r3, #0
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	370c      	adds	r7, #12
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr

0800cfde <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800cfde:	b480      	push	{r7}
 800cfe0:	b083      	sub	sp, #12
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f003 0303 	and.w	r3, r3, #3
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	370c      	adds	r7, #12
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr

0800cffa <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800cffa:	b480      	push	{r7}
 800cffc:	b085      	sub	sp, #20
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
 800d002:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d004:	2300      	movs	r3, #0
 800d006:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	681a      	ldr	r2, [r3, #0]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d018:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d01e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d024:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d026:	68fa      	ldr	r2, [r7, #12]
 800d028:	4313      	orrs	r3, r2
 800d02a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	68db      	ldr	r3, [r3, #12]
 800d030:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d034:	f023 030f 	bic.w	r3, r3, #15
 800d038:	68fa      	ldr	r2, [r7, #12]
 800d03a:	431a      	orrs	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d040:	2300      	movs	r3, #0
}
 800d042:	4618      	mov	r0, r3
 800d044:	3714      	adds	r7, #20
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr

0800d04e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d04e:	b480      	push	{r7}
 800d050:	b083      	sub	sp, #12
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	691b      	ldr	r3, [r3, #16]
 800d05a:	b2db      	uxtb	r3, r3
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d068:	b480      	push	{r7}
 800d06a:	b085      	sub	sp, #20
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	3314      	adds	r3, #20
 800d076:	461a      	mov	r2, r3
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	4413      	add	r3, r2
 800d07c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
}  
 800d082:	4618      	mov	r0, r3
 800d084:	3714      	adds	r7, #20
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr

0800d08e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d08e:	b480      	push	{r7}
 800d090:	b085      	sub	sp, #20
 800d092:	af00      	add	r7, sp, #0
 800d094:	6078      	str	r0, [r7, #4]
 800d096:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d098:	2300      	movs	r3, #0
 800d09a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	685a      	ldr	r2, [r3, #4]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d0b4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d0ba:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d0c0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d0c2:	68fa      	ldr	r2, [r7, #12]
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0cc:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	431a      	orrs	r2, r3
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d0d8:	2300      	movs	r3, #0

}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3714      	adds	r7, #20
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e4:	4770      	bx	lr

0800d0e6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b088      	sub	sp, #32
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
 800d0ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d0f4:	2310      	movs	r3, #16
 800d0f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d0f8:	2340      	movs	r3, #64	; 0x40
 800d0fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d104:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d106:	f107 0308 	add.w	r3, r7, #8
 800d10a:	4619      	mov	r1, r3
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f7ff ff74 	bl	800cffa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d112:	f241 3288 	movw	r2, #5000	; 0x1388
 800d116:	2110      	movs	r1, #16
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f000 fa19 	bl	800d550 <SDMMC_GetCmdResp1>
 800d11e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d120:	69fb      	ldr	r3, [r7, #28]
}
 800d122:	4618      	mov	r0, r3
 800d124:	3720      	adds	r7, #32
 800d126:	46bd      	mov	sp, r7
 800d128:	bd80      	pop	{r7, pc}

0800d12a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d12a:	b580      	push	{r7, lr}
 800d12c:	b088      	sub	sp, #32
 800d12e:	af00      	add	r7, sp, #0
 800d130:	6078      	str	r0, [r7, #4]
 800d132:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d138:	2311      	movs	r3, #17
 800d13a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d13c:	2340      	movs	r3, #64	; 0x40
 800d13e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d140:	2300      	movs	r3, #0
 800d142:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d148:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d14a:	f107 0308 	add.w	r3, r7, #8
 800d14e:	4619      	mov	r1, r3
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f7ff ff52 	bl	800cffa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d156:	f241 3288 	movw	r2, #5000	; 0x1388
 800d15a:	2111      	movs	r1, #17
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f000 f9f7 	bl	800d550 <SDMMC_GetCmdResp1>
 800d162:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d164:	69fb      	ldr	r3, [r7, #28]
}
 800d166:	4618      	mov	r0, r3
 800d168:	3720      	adds	r7, #32
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b088      	sub	sp, #32
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
 800d176:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d17c:	2312      	movs	r3, #18
 800d17e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d180:	2340      	movs	r3, #64	; 0x40
 800d182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d184:	2300      	movs	r3, #0
 800d186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d18c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d18e:	f107 0308 	add.w	r3, r7, #8
 800d192:	4619      	mov	r1, r3
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f7ff ff30 	bl	800cffa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d19a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d19e:	2112      	movs	r1, #18
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 f9d5 	bl	800d550 <SDMMC_GetCmdResp1>
 800d1a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1a8:	69fb      	ldr	r3, [r7, #28]
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3720      	adds	r7, #32
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}

0800d1b2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d1b2:	b580      	push	{r7, lr}
 800d1b4:	b088      	sub	sp, #32
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
 800d1ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d1c0:	2318      	movs	r3, #24
 800d1c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d1c4:	2340      	movs	r3, #64	; 0x40
 800d1c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d1cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d1d2:	f107 0308 	add.w	r3, r7, #8
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f7ff ff0e 	bl	800cffa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d1de:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1e2:	2118      	movs	r1, #24
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f000 f9b3 	bl	800d550 <SDMMC_GetCmdResp1>
 800d1ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1ec:	69fb      	ldr	r3, [r7, #28]
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3720      	adds	r7, #32
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}

0800d1f6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b088      	sub	sp, #32
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	6078      	str	r0, [r7, #4]
 800d1fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d204:	2319      	movs	r3, #25
 800d206:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d208:	2340      	movs	r3, #64	; 0x40
 800d20a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d20c:	2300      	movs	r3, #0
 800d20e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d214:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d216:	f107 0308 	add.w	r3, r7, #8
 800d21a:	4619      	mov	r1, r3
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f7ff feec 	bl	800cffa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d222:	f241 3288 	movw	r2, #5000	; 0x1388
 800d226:	2119      	movs	r1, #25
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 f991 	bl	800d550 <SDMMC_GetCmdResp1>
 800d22e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d230:	69fb      	ldr	r3, [r7, #28]
}
 800d232:	4618      	mov	r0, r3
 800d234:	3720      	adds	r7, #32
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
	...

0800d23c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b088      	sub	sp, #32
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d244:	2300      	movs	r3, #0
 800d246:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d248:	230c      	movs	r3, #12
 800d24a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d24c:	2340      	movs	r3, #64	; 0x40
 800d24e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d250:	2300      	movs	r3, #0
 800d252:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d258:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d25a:	f107 0308 	add.w	r3, r7, #8
 800d25e:	4619      	mov	r1, r3
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f7ff feca 	bl	800cffa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d266:	4a05      	ldr	r2, [pc, #20]	; (800d27c <SDMMC_CmdStopTransfer+0x40>)
 800d268:	210c      	movs	r1, #12
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 f970 	bl	800d550 <SDMMC_GetCmdResp1>
 800d270:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d272:	69fb      	ldr	r3, [r7, #28]
}
 800d274:	4618      	mov	r0, r3
 800d276:	3720      	adds	r7, #32
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	05f5e100 	.word	0x05f5e100

0800d280 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b08a      	sub	sp, #40	; 0x28
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d290:	2307      	movs	r3, #7
 800d292:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d294:	2340      	movs	r3, #64	; 0x40
 800d296:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d298:	2300      	movs	r3, #0
 800d29a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d29c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2a0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d2a2:	f107 0310 	add.w	r3, r7, #16
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	68f8      	ldr	r0, [r7, #12]
 800d2aa:	f7ff fea6 	bl	800cffa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d2ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2b2:	2107      	movs	r1, #7
 800d2b4:	68f8      	ldr	r0, [r7, #12]
 800d2b6:	f000 f94b 	bl	800d550 <SDMMC_GetCmdResp1>
 800d2ba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3728      	adds	r7, #40	; 0x28
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b088      	sub	sp, #32
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d2de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d2e4:	f107 0308 	add.w	r3, r7, #8
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f7ff fe85 	bl	800cffa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f000 fb65 	bl	800d9c0 <SDMMC_GetCmdError>
 800d2f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2f8:	69fb      	ldr	r3, [r7, #28]
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3720      	adds	r7, #32
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}

0800d302 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d302:	b580      	push	{r7, lr}
 800d304:	b088      	sub	sp, #32
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d30a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d30e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d310:	2308      	movs	r3, #8
 800d312:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d314:	2340      	movs	r3, #64	; 0x40
 800d316:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d318:	2300      	movs	r3, #0
 800d31a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d31c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d320:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d322:	f107 0308 	add.w	r3, r7, #8
 800d326:	4619      	mov	r1, r3
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f7ff fe66 	bl	800cffa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 faf8 	bl	800d924 <SDMMC_GetCmdResp7>
 800d334:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d336:	69fb      	ldr	r3, [r7, #28]
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3720      	adds	r7, #32
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b088      	sub	sp, #32
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d34e:	2337      	movs	r3, #55	; 0x37
 800d350:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d352:	2340      	movs	r3, #64	; 0x40
 800d354:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d356:	2300      	movs	r3, #0
 800d358:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d35a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d35e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d360:	f107 0308 	add.w	r3, r7, #8
 800d364:	4619      	mov	r1, r3
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f7ff fe47 	bl	800cffa <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d36c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d370:	2137      	movs	r1, #55	; 0x37
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f000 f8ec 	bl	800d550 <SDMMC_GetCmdResp1>
 800d378:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d37a:	69fb      	ldr	r3, [r7, #28]
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3720      	adds	r7, #32
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b088      	sub	sp, #32
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d394:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d398:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d39a:	2329      	movs	r3, #41	; 0x29
 800d39c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d39e:	2340      	movs	r3, #64	; 0x40
 800d3a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d3a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d3ac:	f107 0308 	add.w	r3, r7, #8
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f7ff fe21 	bl	800cffa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f000 f9ff 	bl	800d7bc <SDMMC_GetCmdResp3>
 800d3be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3c0:	69fb      	ldr	r3, [r7, #28]
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3720      	adds	r7, #32
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}

0800d3ca <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d3ca:	b580      	push	{r7, lr}
 800d3cc:	b088      	sub	sp, #32
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	6078      	str	r0, [r7, #4]
 800d3d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d3d8:	2306      	movs	r3, #6
 800d3da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d3dc:	2340      	movs	r3, #64	; 0x40
 800d3de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d3e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d3ea:	f107 0308 	add.w	r3, r7, #8
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f7ff fe02 	bl	800cffa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d3f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3fa:	2106      	movs	r1, #6
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 f8a7 	bl	800d550 <SDMMC_GetCmdResp1>
 800d402:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d404:	69fb      	ldr	r3, [r7, #28]
}
 800d406:	4618      	mov	r0, r3
 800d408:	3720      	adds	r7, #32
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}

0800d40e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d40e:	b580      	push	{r7, lr}
 800d410:	b088      	sub	sp, #32
 800d412:	af00      	add	r7, sp, #0
 800d414:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d416:	2300      	movs	r3, #0
 800d418:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d41a:	2333      	movs	r3, #51	; 0x33
 800d41c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d41e:	2340      	movs	r3, #64	; 0x40
 800d420:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d422:	2300      	movs	r3, #0
 800d424:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d42a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d42c:	f107 0308 	add.w	r3, r7, #8
 800d430:	4619      	mov	r1, r3
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f7ff fde1 	bl	800cffa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d438:	f241 3288 	movw	r2, #5000	; 0x1388
 800d43c:	2133      	movs	r1, #51	; 0x33
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 f886 	bl	800d550 <SDMMC_GetCmdResp1>
 800d444:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d446:	69fb      	ldr	r3, [r7, #28]
}
 800d448:	4618      	mov	r0, r3
 800d44a:	3720      	adds	r7, #32
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b088      	sub	sp, #32
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d458:	2300      	movs	r3, #0
 800d45a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d45c:	2302      	movs	r3, #2
 800d45e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d460:	23c0      	movs	r3, #192	; 0xc0
 800d462:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d464:	2300      	movs	r3, #0
 800d466:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d46c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d46e:	f107 0308 	add.w	r3, r7, #8
 800d472:	4619      	mov	r1, r3
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f7ff fdc0 	bl	800cffa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 f956 	bl	800d72c <SDMMC_GetCmdResp2>
 800d480:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d482:	69fb      	ldr	r3, [r7, #28]
}
 800d484:	4618      	mov	r0, r3
 800d486:	3720      	adds	r7, #32
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}

0800d48c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b088      	sub	sp, #32
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d49a:	2309      	movs	r3, #9
 800d49c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d49e:	23c0      	movs	r3, #192	; 0xc0
 800d4a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d4a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4ac:	f107 0308 	add.w	r3, r7, #8
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f7ff fda1 	bl	800cffa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 f937 	bl	800d72c <SDMMC_GetCmdResp2>
 800d4be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4c0:	69fb      	ldr	r3, [r7, #28]
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3720      	adds	r7, #32
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}

0800d4ca <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d4ca:	b580      	push	{r7, lr}
 800d4cc:	b088      	sub	sp, #32
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
 800d4d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d4d8:	2303      	movs	r3, #3
 800d4da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d4dc:	2340      	movs	r3, #64	; 0x40
 800d4de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d4e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4ea:	f107 0308 	add.w	r3, r7, #8
 800d4ee:	4619      	mov	r1, r3
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f7ff fd82 	bl	800cffa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d4f6:	683a      	ldr	r2, [r7, #0]
 800d4f8:	2103      	movs	r1, #3
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 f99c 	bl	800d838 <SDMMC_GetCmdResp6>
 800d500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d502:	69fb      	ldr	r3, [r7, #28]
}
 800d504:	4618      	mov	r0, r3
 800d506:	3720      	adds	r7, #32
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b088      	sub	sp, #32
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d51a:	230d      	movs	r3, #13
 800d51c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d51e:	2340      	movs	r3, #64	; 0x40
 800d520:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d522:	2300      	movs	r3, #0
 800d524:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d52a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d52c:	f107 0308 	add.w	r3, r7, #8
 800d530:	4619      	mov	r1, r3
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f7ff fd61 	bl	800cffa <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d538:	f241 3288 	movw	r2, #5000	; 0x1388
 800d53c:	210d      	movs	r1, #13
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f000 f806 	bl	800d550 <SDMMC_GetCmdResp1>
 800d544:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d546:	69fb      	ldr	r3, [r7, #28]
}
 800d548:	4618      	mov	r0, r3
 800d54a:	3720      	adds	r7, #32
 800d54c:	46bd      	mov	sp, r7
 800d54e:	bd80      	pop	{r7, pc}

0800d550 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b088      	sub	sp, #32
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	460b      	mov	r3, r1
 800d55a:	607a      	str	r2, [r7, #4]
 800d55c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d55e:	4b70      	ldr	r3, [pc, #448]	; (800d720 <SDMMC_GetCmdResp1+0x1d0>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	4a70      	ldr	r2, [pc, #448]	; (800d724 <SDMMC_GetCmdResp1+0x1d4>)
 800d564:	fba2 2303 	umull	r2, r3, r2, r3
 800d568:	0a5a      	lsrs	r2, r3, #9
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	fb02 f303 	mul.w	r3, r2, r3
 800d570:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	1e5a      	subs	r2, r3, #1
 800d576:	61fa      	str	r2, [r7, #28]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d102      	bne.n	800d582 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d57c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d580:	e0c9      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d586:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d588:	69bb      	ldr	r3, [r7, #24]
 800d58a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d0ef      	beq.n	800d572 <SDMMC_GetCmdResp1+0x22>
 800d592:	69bb      	ldr	r3, [r7, #24]
 800d594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d1ea      	bne.n	800d572 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5a0:	f003 0304 	and.w	r3, r3, #4
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d004      	beq.n	800d5b2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2204      	movs	r2, #4
 800d5ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5ae:	2304      	movs	r3, #4
 800d5b0:	e0b1      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b6:	f003 0301 	and.w	r3, r3, #1
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d004      	beq.n	800d5c8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	e0a6      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	22c5      	movs	r2, #197	; 0xc5
 800d5cc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d5ce:	68f8      	ldr	r0, [r7, #12]
 800d5d0:	f7ff fd3d 	bl	800d04e <SDIO_GetCommandResponse>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	7afb      	ldrb	r3, [r7, #11]
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d001      	beq.n	800d5e2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	e099      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d5e2:	2100      	movs	r1, #0
 800d5e4:	68f8      	ldr	r0, [r7, #12]
 800d5e6:	f7ff fd3f 	bl	800d068 <SDIO_GetResponse>
 800d5ea:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d5ec:	697a      	ldr	r2, [r7, #20]
 800d5ee:	4b4e      	ldr	r3, [pc, #312]	; (800d728 <SDMMC_GetCmdResp1+0x1d8>)
 800d5f0:	4013      	ands	r3, r2
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d101      	bne.n	800d5fa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	e08d      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	da02      	bge.n	800d606 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d600:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d604:	e087      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d001      	beq.n	800d614 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d610:	2340      	movs	r3, #64	; 0x40
 800d612:	e080      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d001      	beq.n	800d622 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d61e:	2380      	movs	r3, #128	; 0x80
 800d620:	e079      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d002      	beq.n	800d632 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d62c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d630:	e071      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d002      	beq.n	800d642 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d63c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d640:	e069      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d002      	beq.n	800d652 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d64c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d650:	e061      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d002      	beq.n	800d662 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d65c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d660:	e059      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d002      	beq.n	800d672 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d66c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d670:	e051      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d002      	beq.n	800d682 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d67c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d680:	e049      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d002      	beq.n	800d692 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d68c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d690:	e041      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d002      	beq.n	800d6a2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d69c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d6a0:	e039      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d002      	beq.n	800d6b2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d6ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d6b0:	e031      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d002      	beq.n	800d6c2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d6bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d6c0:	e029      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d002      	beq.n	800d6d2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d6cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d6d0:	e021      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d002      	beq.n	800d6e2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d6dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d6e0:	e019      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d002      	beq.n	800d6f2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d6ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d6f0:	e011      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d002      	beq.n	800d702 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d6fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d700:	e009      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	f003 0308 	and.w	r3, r3, #8
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d002      	beq.n	800d712 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d70c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d710:	e001      	b.n	800d716 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d716:	4618      	mov	r0, r3
 800d718:	3720      	adds	r7, #32
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	20000008 	.word	0x20000008
 800d724:	10624dd3 	.word	0x10624dd3
 800d728:	fdffe008 	.word	0xfdffe008

0800d72c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b085      	sub	sp, #20
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d734:	4b1f      	ldr	r3, [pc, #124]	; (800d7b4 <SDMMC_GetCmdResp2+0x88>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4a1f      	ldr	r2, [pc, #124]	; (800d7b8 <SDMMC_GetCmdResp2+0x8c>)
 800d73a:	fba2 2303 	umull	r2, r3, r2, r3
 800d73e:	0a5b      	lsrs	r3, r3, #9
 800d740:	f241 3288 	movw	r2, #5000	; 0x1388
 800d744:	fb02 f303 	mul.w	r3, r2, r3
 800d748:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	1e5a      	subs	r2, r3, #1
 800d74e:	60fa      	str	r2, [r7, #12]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d102      	bne.n	800d75a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d754:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d758:	e026      	b.n	800d7a8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d75e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d766:	2b00      	cmp	r3, #0
 800d768:	d0ef      	beq.n	800d74a <SDMMC_GetCmdResp2+0x1e>
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d770:	2b00      	cmp	r3, #0
 800d772:	d1ea      	bne.n	800d74a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d778:	f003 0304 	and.w	r3, r3, #4
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d004      	beq.n	800d78a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2204      	movs	r2, #4
 800d784:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d786:	2304      	movs	r3, #4
 800d788:	e00e      	b.n	800d7a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d78e:	f003 0301 	and.w	r3, r3, #1
 800d792:	2b00      	cmp	r3, #0
 800d794:	d004      	beq.n	800d7a0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2201      	movs	r2, #1
 800d79a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d79c:	2301      	movs	r3, #1
 800d79e:	e003      	b.n	800d7a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	22c5      	movs	r2, #197	; 0xc5
 800d7a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d7a6:	2300      	movs	r3, #0
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3714      	adds	r7, #20
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b2:	4770      	bx	lr
 800d7b4:	20000008 	.word	0x20000008
 800d7b8:	10624dd3 	.word	0x10624dd3

0800d7bc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b085      	sub	sp, #20
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d7c4:	4b1a      	ldr	r3, [pc, #104]	; (800d830 <SDMMC_GetCmdResp3+0x74>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4a1a      	ldr	r2, [pc, #104]	; (800d834 <SDMMC_GetCmdResp3+0x78>)
 800d7ca:	fba2 2303 	umull	r2, r3, r2, r3
 800d7ce:	0a5b      	lsrs	r3, r3, #9
 800d7d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7d4:	fb02 f303 	mul.w	r3, r2, r3
 800d7d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	1e5a      	subs	r2, r3, #1
 800d7de:	60fa      	str	r2, [r7, #12]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d102      	bne.n	800d7ea <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d7e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d7e8:	e01b      	b.n	800d822 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d0ef      	beq.n	800d7da <SDMMC_GetCmdResp3+0x1e>
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d800:	2b00      	cmp	r3, #0
 800d802:	d1ea      	bne.n	800d7da <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d808:	f003 0304 	and.w	r3, r3, #4
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d004      	beq.n	800d81a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2204      	movs	r2, #4
 800d814:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d816:	2304      	movs	r3, #4
 800d818:	e003      	b.n	800d822 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	22c5      	movs	r2, #197	; 0xc5
 800d81e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d820:	2300      	movs	r3, #0
}
 800d822:	4618      	mov	r0, r3
 800d824:	3714      	adds	r7, #20
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr
 800d82e:	bf00      	nop
 800d830:	20000008 	.word	0x20000008
 800d834:	10624dd3 	.word	0x10624dd3

0800d838 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b088      	sub	sp, #32
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	60f8      	str	r0, [r7, #12]
 800d840:	460b      	mov	r3, r1
 800d842:	607a      	str	r2, [r7, #4]
 800d844:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d846:	4b35      	ldr	r3, [pc, #212]	; (800d91c <SDMMC_GetCmdResp6+0xe4>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	4a35      	ldr	r2, [pc, #212]	; (800d920 <SDMMC_GetCmdResp6+0xe8>)
 800d84c:	fba2 2303 	umull	r2, r3, r2, r3
 800d850:	0a5b      	lsrs	r3, r3, #9
 800d852:	f241 3288 	movw	r2, #5000	; 0x1388
 800d856:	fb02 f303 	mul.w	r3, r2, r3
 800d85a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	1e5a      	subs	r2, r3, #1
 800d860:	61fa      	str	r2, [r7, #28]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d102      	bne.n	800d86c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d866:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d86a:	e052      	b.n	800d912 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d870:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d0ef      	beq.n	800d85c <SDMMC_GetCmdResp6+0x24>
 800d87c:	69bb      	ldr	r3, [r7, #24]
 800d87e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d882:	2b00      	cmp	r3, #0
 800d884:	d1ea      	bne.n	800d85c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d88a:	f003 0304 	and.w	r3, r3, #4
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d004      	beq.n	800d89c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2204      	movs	r2, #4
 800d896:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d898:	2304      	movs	r3, #4
 800d89a:	e03a      	b.n	800d912 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8a0:	f003 0301 	and.w	r3, r3, #1
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d004      	beq.n	800d8b2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	e02f      	b.n	800d912 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d8b2:	68f8      	ldr	r0, [r7, #12]
 800d8b4:	f7ff fbcb 	bl	800d04e <SDIO_GetCommandResponse>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	7afb      	ldrb	r3, [r7, #11]
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d001      	beq.n	800d8c6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	e025      	b.n	800d912 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	22c5      	movs	r2, #197	; 0xc5
 800d8ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d8cc:	2100      	movs	r1, #0
 800d8ce:	68f8      	ldr	r0, [r7, #12]
 800d8d0:	f7ff fbca 	bl	800d068 <SDIO_GetResponse>
 800d8d4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d106      	bne.n	800d8ee <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	0c1b      	lsrs	r3, r3, #16
 800d8e4:	b29a      	uxth	r2, r3
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	e011      	b.n	800d912 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d002      	beq.n	800d8fe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d8f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d8fc:	e009      	b.n	800d912 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d904:	2b00      	cmp	r3, #0
 800d906:	d002      	beq.n	800d90e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d90c:	e001      	b.n	800d912 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d90e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d912:	4618      	mov	r0, r3
 800d914:	3720      	adds	r7, #32
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	20000008 	.word	0x20000008
 800d920:	10624dd3 	.word	0x10624dd3

0800d924 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d92c:	4b22      	ldr	r3, [pc, #136]	; (800d9b8 <SDMMC_GetCmdResp7+0x94>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4a22      	ldr	r2, [pc, #136]	; (800d9bc <SDMMC_GetCmdResp7+0x98>)
 800d932:	fba2 2303 	umull	r2, r3, r2, r3
 800d936:	0a5b      	lsrs	r3, r3, #9
 800d938:	f241 3288 	movw	r2, #5000	; 0x1388
 800d93c:	fb02 f303 	mul.w	r3, r2, r3
 800d940:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	1e5a      	subs	r2, r3, #1
 800d946:	60fa      	str	r2, [r7, #12]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d102      	bne.n	800d952 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d94c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d950:	e02c      	b.n	800d9ac <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d956:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d0ef      	beq.n	800d942 <SDMMC_GetCmdResp7+0x1e>
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d1ea      	bne.n	800d942 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d970:	f003 0304 	and.w	r3, r3, #4
 800d974:	2b00      	cmp	r3, #0
 800d976:	d004      	beq.n	800d982 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2204      	movs	r2, #4
 800d97c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d97e:	2304      	movs	r3, #4
 800d980:	e014      	b.n	800d9ac <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d986:	f003 0301 	and.w	r3, r3, #1
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d004      	beq.n	800d998 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2201      	movs	r2, #1
 800d992:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d994:	2301      	movs	r3, #1
 800d996:	e009      	b.n	800d9ac <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d99c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d002      	beq.n	800d9aa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2240      	movs	r2, #64	; 0x40
 800d9a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d9aa:	2300      	movs	r3, #0
  
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3714      	adds	r7, #20
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr
 800d9b8:	20000008 	.word	0x20000008
 800d9bc:	10624dd3 	.word	0x10624dd3

0800d9c0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b085      	sub	sp, #20
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d9c8:	4b11      	ldr	r3, [pc, #68]	; (800da10 <SDMMC_GetCmdError+0x50>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4a11      	ldr	r2, [pc, #68]	; (800da14 <SDMMC_GetCmdError+0x54>)
 800d9ce:	fba2 2303 	umull	r2, r3, r2, r3
 800d9d2:	0a5b      	lsrs	r3, r3, #9
 800d9d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9d8:	fb02 f303 	mul.w	r3, r2, r3
 800d9dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	1e5a      	subs	r2, r3, #1
 800d9e2:	60fa      	str	r2, [r7, #12]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d102      	bne.n	800d9ee <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d9ec:	e009      	b.n	800da02 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d0f1      	beq.n	800d9de <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	22c5      	movs	r2, #197	; 0xc5
 800d9fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800da00:	2300      	movs	r3, #0
}
 800da02:	4618      	mov	r0, r3
 800da04:	3714      	adds	r7, #20
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr
 800da0e:	bf00      	nop
 800da10:	20000008 	.word	0x20000008
 800da14:	10624dd3 	.word	0x10624dd3

0800da18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800da18:	b084      	sub	sp, #16
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b084      	sub	sp, #16
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
 800da22:	f107 001c 	add.w	r0, r7, #28
 800da26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800da2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d122      	bne.n	800da76 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	68db      	ldr	r3, [r3, #12]
 800da40:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800da44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da48:	687a      	ldr	r2, [r7, #4]
 800da4a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	68db      	ldr	r3, [r3, #12]
 800da50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800da58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	d105      	bne.n	800da6a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 faa2 	bl	800dfb4 <USB_CoreReset>
 800da70:	4603      	mov	r3, r0
 800da72:	73fb      	strb	r3, [r7, #15]
 800da74:	e01a      	b.n	800daac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	68db      	ldr	r3, [r3, #12]
 800da7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 fa96 	bl	800dfb4 <USB_CoreReset>
 800da88:	4603      	mov	r3, r0
 800da8a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800da8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d106      	bne.n	800daa0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	639a      	str	r2, [r3, #56]	; 0x38
 800da9e:	e005      	b.n	800daac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800daac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d10b      	bne.n	800daca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	689b      	ldr	r3, [r3, #8]
 800dab6:	f043 0206 	orr.w	r2, r3, #6
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	689b      	ldr	r3, [r3, #8]
 800dac2:	f043 0220 	orr.w	r2, r3, #32
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800daca:	7bfb      	ldrb	r3, [r7, #15]
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3710      	adds	r7, #16
 800dad0:	46bd      	mov	sp, r7
 800dad2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dad6:	b004      	add	sp, #16
 800dad8:	4770      	bx	lr

0800dada <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dada:	b480      	push	{r7}
 800dadc:	b083      	sub	sp, #12
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	689b      	ldr	r3, [r3, #8]
 800dae6:	f023 0201 	bic.w	r2, r3, #1
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800daee:	2300      	movs	r3, #0
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	370c      	adds	r7, #12
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b084      	sub	sp, #16
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	460b      	mov	r3, r1
 800db06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800db08:	2300      	movs	r3, #0
 800db0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	68db      	ldr	r3, [r3, #12]
 800db10:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800db18:	78fb      	ldrb	r3, [r7, #3]
 800db1a:	2b01      	cmp	r3, #1
 800db1c:	d115      	bne.n	800db4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	68db      	ldr	r3, [r3, #12]
 800db22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800db2a:	2001      	movs	r0, #1
 800db2c:	f7f7 fabc 	bl	80050a8 <HAL_Delay>
      ms++;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	3301      	adds	r3, #1
 800db34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f000 fa2e 	bl	800df98 <USB_GetMode>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d01e      	beq.n	800db80 <USB_SetCurrentMode+0x84>
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2b31      	cmp	r3, #49	; 0x31
 800db46:	d9f0      	bls.n	800db2a <USB_SetCurrentMode+0x2e>
 800db48:	e01a      	b.n	800db80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800db4a:	78fb      	ldrb	r3, [r7, #3]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d115      	bne.n	800db7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	68db      	ldr	r3, [r3, #12]
 800db54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800db5c:	2001      	movs	r0, #1
 800db5e:	f7f7 faa3 	bl	80050a8 <HAL_Delay>
      ms++;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	3301      	adds	r3, #1
 800db66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f000 fa15 	bl	800df98 <USB_GetMode>
 800db6e:	4603      	mov	r3, r0
 800db70:	2b00      	cmp	r3, #0
 800db72:	d005      	beq.n	800db80 <USB_SetCurrentMode+0x84>
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2b31      	cmp	r3, #49	; 0x31
 800db78:	d9f0      	bls.n	800db5c <USB_SetCurrentMode+0x60>
 800db7a:	e001      	b.n	800db80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800db7c:	2301      	movs	r3, #1
 800db7e:	e005      	b.n	800db8c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	2b32      	cmp	r3, #50	; 0x32
 800db84:	d101      	bne.n	800db8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800db86:	2301      	movs	r3, #1
 800db88:	e000      	b.n	800db8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800db8a:	2300      	movs	r3, #0
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3710      	adds	r7, #16
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800db94:	b084      	sub	sp, #16
 800db96:	b580      	push	{r7, lr}
 800db98:	b086      	sub	sp, #24
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
 800db9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800dba2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dba6:	2300      	movs	r3, #0
 800dba8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800dbae:	2300      	movs	r3, #0
 800dbb0:	613b      	str	r3, [r7, #16]
 800dbb2:	e009      	b.n	800dbc8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800dbb4:	687a      	ldr	r2, [r7, #4]
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	3340      	adds	r3, #64	; 0x40
 800dbba:	009b      	lsls	r3, r3, #2
 800dbbc:	4413      	add	r3, r2
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	613b      	str	r3, [r7, #16]
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	2b0e      	cmp	r3, #14
 800dbcc:	d9f2      	bls.n	800dbb4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800dbce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d11c      	bne.n	800dc0e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	68fa      	ldr	r2, [r7, #12]
 800dbde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dbe2:	f043 0302 	orr.w	r3, r3, #2
 800dbe6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc04:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	639a      	str	r2, [r3, #56]	; 0x38
 800dc0c:	e00b      	b.n	800dc26 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc12:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	2300      	movs	r3, #0
 800dc30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc38:	4619      	mov	r1, r3
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc40:	461a      	mov	r2, r3
 800dc42:	680b      	ldr	r3, [r1, #0]
 800dc44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	d10c      	bne.n	800dc66 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d104      	bne.n	800dc5c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dc52:	2100      	movs	r1, #0
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 f965 	bl	800df24 <USB_SetDevSpeed>
 800dc5a:	e008      	b.n	800dc6e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dc5c:	2101      	movs	r1, #1
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f000 f960 	bl	800df24 <USB_SetDevSpeed>
 800dc64:	e003      	b.n	800dc6e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dc66:	2103      	movs	r1, #3
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f000 f95b 	bl	800df24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dc6e:	2110      	movs	r1, #16
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f000 f8f3 	bl	800de5c <USB_FlushTxFifo>
 800dc76:	4603      	mov	r3, r0
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d001      	beq.n	800dc80 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800dc7c:	2301      	movs	r3, #1
 800dc7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f000 f91f 	bl	800dec4 <USB_FlushRxFifo>
 800dc86:	4603      	mov	r3, r0
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d001      	beq.n	800dc90 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc96:	461a      	mov	r2, r3
 800dc98:	2300      	movs	r3, #0
 800dc9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dca2:	461a      	mov	r2, r3
 800dca4:	2300      	movs	r3, #0
 800dca6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcae:	461a      	mov	r2, r3
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	613b      	str	r3, [r7, #16]
 800dcb8:	e043      	b.n	800dd42 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	015a      	lsls	r2, r3, #5
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	4413      	add	r3, r2
 800dcc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dcd0:	d118      	bne.n	800dd04 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d10a      	bne.n	800dcee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	015a      	lsls	r2, r3, #5
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	4413      	add	r3, r2
 800dce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dce4:	461a      	mov	r2, r3
 800dce6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dcea:	6013      	str	r3, [r2, #0]
 800dcec:	e013      	b.n	800dd16 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	015a      	lsls	r2, r3, #5
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	4413      	add	r3, r2
 800dcf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dd00:	6013      	str	r3, [r2, #0]
 800dd02:	e008      	b.n	800dd16 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	015a      	lsls	r2, r3, #5
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	4413      	add	r3, r2
 800dd0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd10:	461a      	mov	r2, r3
 800dd12:	2300      	movs	r3, #0
 800dd14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	015a      	lsls	r2, r3, #5
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	4413      	add	r3, r2
 800dd1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd22:	461a      	mov	r2, r3
 800dd24:	2300      	movs	r3, #0
 800dd26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	015a      	lsls	r2, r3, #5
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	4413      	add	r3, r2
 800dd30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd34:	461a      	mov	r2, r3
 800dd36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dd3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	3301      	adds	r3, #1
 800dd40:	613b      	str	r3, [r7, #16]
 800dd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd44:	693a      	ldr	r2, [r7, #16]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d3b7      	bcc.n	800dcba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	613b      	str	r3, [r7, #16]
 800dd4e:	e043      	b.n	800ddd8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	015a      	lsls	r2, r3, #5
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	4413      	add	r3, r2
 800dd58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd66:	d118      	bne.n	800dd9a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d10a      	bne.n	800dd84 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	015a      	lsls	r2, r3, #5
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	4413      	add	r3, r2
 800dd76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dd80:	6013      	str	r3, [r2, #0]
 800dd82:	e013      	b.n	800ddac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	015a      	lsls	r2, r3, #5
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	4413      	add	r3, r2
 800dd8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd90:	461a      	mov	r2, r3
 800dd92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dd96:	6013      	str	r3, [r2, #0]
 800dd98:	e008      	b.n	800ddac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dd9a:	693b      	ldr	r3, [r7, #16]
 800dd9c:	015a      	lsls	r2, r3, #5
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	4413      	add	r3, r2
 800dda2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dda6:	461a      	mov	r2, r3
 800dda8:	2300      	movs	r3, #0
 800ddaa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	015a      	lsls	r2, r3, #5
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	4413      	add	r3, r2
 800ddb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddb8:	461a      	mov	r2, r3
 800ddba:	2300      	movs	r3, #0
 800ddbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	015a      	lsls	r2, r3, #5
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	4413      	add	r3, r2
 800ddc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddca:	461a      	mov	r2, r3
 800ddcc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ddd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	613b      	str	r3, [r7, #16]
 800ddd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddda:	693a      	ldr	r2, [r7, #16]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d3b7      	bcc.n	800dd50 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dde6:	691b      	ldr	r3, [r3, #16]
 800dde8:	68fa      	ldr	r2, [r7, #12]
 800ddea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ddee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ddf2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800de00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800de02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de04:	2b00      	cmp	r3, #0
 800de06:	d105      	bne.n	800de14 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	699b      	ldr	r3, [r3, #24]
 800de0c:	f043 0210 	orr.w	r2, r3, #16
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	699a      	ldr	r2, [r3, #24]
 800de18:	4b0f      	ldr	r3, [pc, #60]	; (800de58 <USB_DevInit+0x2c4>)
 800de1a:	4313      	orrs	r3, r2
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800de20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de22:	2b00      	cmp	r3, #0
 800de24:	d005      	beq.n	800de32 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	699b      	ldr	r3, [r3, #24]
 800de2a:	f043 0208 	orr.w	r2, r3, #8
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800de32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de34:	2b01      	cmp	r3, #1
 800de36:	d107      	bne.n	800de48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	699b      	ldr	r3, [r3, #24]
 800de3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de40:	f043 0304 	orr.w	r3, r3, #4
 800de44:	687a      	ldr	r2, [r7, #4]
 800de46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800de48:	7dfb      	ldrb	r3, [r7, #23]
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3718      	adds	r7, #24
 800de4e:	46bd      	mov	sp, r7
 800de50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de54:	b004      	add	sp, #16
 800de56:	4770      	bx	lr
 800de58:	803c3800 	.word	0x803c3800

0800de5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800de5c:	b480      	push	{r7}
 800de5e:	b085      	sub	sp, #20
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800de66:	2300      	movs	r3, #0
 800de68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	3301      	adds	r3, #1
 800de6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	4a13      	ldr	r2, [pc, #76]	; (800dec0 <USB_FlushTxFifo+0x64>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d901      	bls.n	800de7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800de78:	2303      	movs	r3, #3
 800de7a:	e01b      	b.n	800deb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	691b      	ldr	r3, [r3, #16]
 800de80:	2b00      	cmp	r3, #0
 800de82:	daf2      	bge.n	800de6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800de84:	2300      	movs	r3, #0
 800de86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	019b      	lsls	r3, r3, #6
 800de8c:	f043 0220 	orr.w	r2, r3, #32
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	3301      	adds	r3, #1
 800de98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	4a08      	ldr	r2, [pc, #32]	; (800dec0 <USB_FlushTxFifo+0x64>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d901      	bls.n	800dea6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800dea2:	2303      	movs	r3, #3
 800dea4:	e006      	b.n	800deb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	691b      	ldr	r3, [r3, #16]
 800deaa:	f003 0320 	and.w	r3, r3, #32
 800deae:	2b20      	cmp	r3, #32
 800deb0:	d0f0      	beq.n	800de94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800deb2:	2300      	movs	r3, #0
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3714      	adds	r7, #20
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr
 800dec0:	00030d40 	.word	0x00030d40

0800dec4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b085      	sub	sp, #20
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800decc:	2300      	movs	r3, #0
 800dece:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	3301      	adds	r3, #1
 800ded4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	4a11      	ldr	r2, [pc, #68]	; (800df20 <USB_FlushRxFifo+0x5c>)
 800deda:	4293      	cmp	r3, r2
 800dedc:	d901      	bls.n	800dee2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800dede:	2303      	movs	r3, #3
 800dee0:	e018      	b.n	800df14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	691b      	ldr	r3, [r3, #16]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	daf2      	bge.n	800ded0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800deea:	2300      	movs	r3, #0
 800deec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2210      	movs	r2, #16
 800def2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	3301      	adds	r3, #1
 800def8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	4a08      	ldr	r2, [pc, #32]	; (800df20 <USB_FlushRxFifo+0x5c>)
 800defe:	4293      	cmp	r3, r2
 800df00:	d901      	bls.n	800df06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800df02:	2303      	movs	r3, #3
 800df04:	e006      	b.n	800df14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	691b      	ldr	r3, [r3, #16]
 800df0a:	f003 0310 	and.w	r3, r3, #16
 800df0e:	2b10      	cmp	r3, #16
 800df10:	d0f0      	beq.n	800def4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800df12:	2300      	movs	r3, #0
}
 800df14:	4618      	mov	r0, r3
 800df16:	3714      	adds	r7, #20
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr
 800df20:	00030d40 	.word	0x00030d40

0800df24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800df24:	b480      	push	{r7}
 800df26:	b085      	sub	sp, #20
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	460b      	mov	r3, r1
 800df2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df3a:	681a      	ldr	r2, [r3, #0]
 800df3c:	78fb      	ldrb	r3, [r7, #3]
 800df3e:	68f9      	ldr	r1, [r7, #12]
 800df40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df44:	4313      	orrs	r3, r2
 800df46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800df48:	2300      	movs	r3, #0
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3714      	adds	r7, #20
 800df4e:	46bd      	mov	sp, r7
 800df50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df54:	4770      	bx	lr

0800df56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800df56:	b480      	push	{r7}
 800df58:	b085      	sub	sp, #20
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	68fa      	ldr	r2, [r7, #12]
 800df6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800df70:	f023 0303 	bic.w	r3, r3, #3
 800df74:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	68fa      	ldr	r2, [r7, #12]
 800df80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df84:	f043 0302 	orr.w	r3, r3, #2
 800df88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800df8a:	2300      	movs	r3, #0
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3714      	adds	r7, #20
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr

0800df98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800df98:	b480      	push	{r7}
 800df9a:	b083      	sub	sp, #12
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	695b      	ldr	r3, [r3, #20]
 800dfa4:	f003 0301 	and.w	r3, r3, #1
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	370c      	adds	r7, #12
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b085      	sub	sp, #20
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	4a13      	ldr	r2, [pc, #76]	; (800e018 <USB_CoreReset+0x64>)
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	d901      	bls.n	800dfd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dfce:	2303      	movs	r3, #3
 800dfd0:	e01b      	b.n	800e00a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	691b      	ldr	r3, [r3, #16]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	daf2      	bge.n	800dfc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	691b      	ldr	r3, [r3, #16]
 800dfe2:	f043 0201 	orr.w	r2, r3, #1
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	3301      	adds	r3, #1
 800dfee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	4a09      	ldr	r2, [pc, #36]	; (800e018 <USB_CoreReset+0x64>)
 800dff4:	4293      	cmp	r3, r2
 800dff6:	d901      	bls.n	800dffc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dff8:	2303      	movs	r3, #3
 800dffa:	e006      	b.n	800e00a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	691b      	ldr	r3, [r3, #16]
 800e000:	f003 0301 	and.w	r3, r3, #1
 800e004:	2b01      	cmp	r3, #1
 800e006:	d0f0      	beq.n	800dfea <USB_CoreReset+0x36>

  return HAL_OK;
 800e008:	2300      	movs	r3, #0
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3714      	adds	r7, #20
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr
 800e016:	bf00      	nop
 800e018:	00030d40 	.word	0x00030d40

0800e01c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e020:	4904      	ldr	r1, [pc, #16]	; (800e034 <MX_FATFS_Init+0x18>)
 800e022:	4805      	ldr	r0, [pc, #20]	; (800e038 <MX_FATFS_Init+0x1c>)
 800e024:	f000 fa8a 	bl	800e53c <FATFS_LinkDriver>
 800e028:	4603      	mov	r3, r0
 800e02a:	461a      	mov	r2, r3
 800e02c:	4b03      	ldr	r3, [pc, #12]	; (800e03c <MX_FATFS_Init+0x20>)
 800e02e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e030:	bf00      	nop
 800e032:	bd80      	pop	{r7, pc}
 800e034:	2000a850 	.word	0x2000a850
 800e038:	0802bb28 	.word	0x0802bb28
 800e03c:	2000a84c 	.word	0x2000a84c

0800e040 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e046:	2300      	movs	r3, #0
 800e048:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e04a:	f000 f87b 	bl	800e144 <BSP_SD_IsDetected>
 800e04e:	4603      	mov	r3, r0
 800e050:	2b01      	cmp	r3, #1
 800e052:	d001      	beq.n	800e058 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e054:	2301      	movs	r3, #1
 800e056:	e012      	b.n	800e07e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e058:	480b      	ldr	r0, [pc, #44]	; (800e088 <BSP_SD_Init+0x48>)
 800e05a:	f7fb ffa7 	bl	8009fac <HAL_SD_Init>
 800e05e:	4603      	mov	r3, r0
 800e060:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e062:	79fb      	ldrb	r3, [r7, #7]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d109      	bne.n	800e07c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800e068:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e06c:	4806      	ldr	r0, [pc, #24]	; (800e088 <BSP_SD_Init+0x48>)
 800e06e:	f7fc fbef 	bl	800a850 <HAL_SD_ConfigWideBusOperation>
 800e072:	4603      	mov	r3, r0
 800e074:	2b00      	cmp	r3, #0
 800e076:	d001      	beq.n	800e07c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e078:	2301      	movs	r3, #1
 800e07a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e07c:	79fb      	ldrb	r3, [r7, #7]
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3708      	adds	r7, #8
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	2000a694 	.word	0x2000a694

0800e08c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b086      	sub	sp, #24
 800e090:	af00      	add	r7, sp, #0
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e098:	2300      	movs	r3, #0
 800e09a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	68ba      	ldr	r2, [r7, #8]
 800e0a0:	68f9      	ldr	r1, [r7, #12]
 800e0a2:	4806      	ldr	r0, [pc, #24]	; (800e0bc <BSP_SD_ReadBlocks_DMA+0x30>)
 800e0a4:	f7fc f832 	bl	800a10c <HAL_SD_ReadBlocks_DMA>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d001      	beq.n	800e0b2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e0b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3718      	adds	r7, #24
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}
 800e0bc:	2000a694 	.word	0x2000a694

0800e0c0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b086      	sub	sp, #24
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	60f8      	str	r0, [r7, #12]
 800e0c8:	60b9      	str	r1, [r7, #8]
 800e0ca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	68ba      	ldr	r2, [r7, #8]
 800e0d4:	68f9      	ldr	r1, [r7, #12]
 800e0d6:	4806      	ldr	r0, [pc, #24]	; (800e0f0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e0d8:	f7fc f8fa 	bl	800a2d0 <HAL_SD_WriteBlocks_DMA>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d001      	beq.n	800e0e6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e0e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3718      	adds	r7, #24
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	2000a694 	.word	0x2000a694

0800e0f4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e0f8:	4805      	ldr	r0, [pc, #20]	; (800e110 <BSP_SD_GetCardState+0x1c>)
 800e0fa:	f7fc fc43 	bl	800a984 <HAL_SD_GetCardState>
 800e0fe:	4603      	mov	r3, r0
 800e100:	2b04      	cmp	r3, #4
 800e102:	bf14      	ite	ne
 800e104:	2301      	movne	r3, #1
 800e106:	2300      	moveq	r3, #0
 800e108:	b2db      	uxtb	r3, r3
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	bd80      	pop	{r7, pc}
 800e10e:	bf00      	nop
 800e110:	2000a694 	.word	0x2000a694

0800e114 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b082      	sub	sp, #8
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e11c:	6879      	ldr	r1, [r7, #4]
 800e11e:	4803      	ldr	r0, [pc, #12]	; (800e12c <BSP_SD_GetCardInfo+0x18>)
 800e120:	f7fc fb6a 	bl	800a7f8 <HAL_SD_GetCardInfo>
}
 800e124:	bf00      	nop
 800e126:	3708      	adds	r7, #8
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	2000a694 	.word	0x2000a694

0800e130 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b082      	sub	sp, #8
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e138:	f000 f9a2 	bl	800e480 <BSP_SD_ReadCpltCallback>
}
 800e13c:	bf00      	nop
 800e13e:	3708      	adds	r7, #8
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e14a:	2301      	movs	r3, #1
 800e14c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e14e:	f000 f80b 	bl	800e168 <BSP_PlatformIsDetected>
 800e152:	4603      	mov	r3, r0
 800e154:	2b00      	cmp	r3, #0
 800e156:	d101      	bne.n	800e15c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e158:	2300      	movs	r3, #0
 800e15a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e15c:	79fb      	ldrb	r3, [r7, #7]
 800e15e:	b2db      	uxtb	r3, r3
}
 800e160:	4618      	mov	r0, r3
 800e162:	3708      	adds	r7, #8
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e168:	b580      	push	{r7, lr}
 800e16a:	b082      	sub	sp, #8
 800e16c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e16e:	2301      	movs	r3, #1
 800e170:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e172:	2108      	movs	r1, #8
 800e174:	4806      	ldr	r0, [pc, #24]	; (800e190 <BSP_PlatformIsDetected+0x28>)
 800e176:	f7f9 fa15 	bl	80075a4 <HAL_GPIO_ReadPin>
 800e17a:	4603      	mov	r3, r0
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d001      	beq.n	800e184 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800e180:	2300      	movs	r3, #0
 800e182:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e184:	79fb      	ldrb	r3, [r7, #7]
}
 800e186:	4618      	mov	r0, r3
 800e188:	3708      	adds	r7, #8
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	40021800 	.word	0x40021800

0800e194 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b084      	sub	sp, #16
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800e19c:	f000 fa8e 	bl	800e6bc <osKernelGetTickCount>
 800e1a0:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800e1a2:	e006      	b.n	800e1b2 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e1a4:	f7ff ffa6 	bl	800e0f4 <BSP_SD_GetCardState>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d101      	bne.n	800e1b2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	e009      	b.n	800e1c6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800e1b2:	f000 fa83 	bl	800e6bc <osKernelGetTickCount>
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	1ad3      	subs	r3, r2, r3
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d8f0      	bhi.n	800e1a4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e1c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3710      	adds	r7, #16
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
	...

0800e1d0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e1da:	4b0b      	ldr	r3, [pc, #44]	; (800e208 <SD_CheckStatus+0x38>)
 800e1dc:	2201      	movs	r2, #1
 800e1de:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e1e0:	f7ff ff88 	bl	800e0f4 <BSP_SD_GetCardState>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d107      	bne.n	800e1fa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e1ea:	4b07      	ldr	r3, [pc, #28]	; (800e208 <SD_CheckStatus+0x38>)
 800e1ec:	781b      	ldrb	r3, [r3, #0]
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	f023 0301 	bic.w	r3, r3, #1
 800e1f4:	b2da      	uxtb	r2, r3
 800e1f6:	4b04      	ldr	r3, [pc, #16]	; (800e208 <SD_CheckStatus+0x38>)
 800e1f8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e1fa:	4b03      	ldr	r3, [pc, #12]	; (800e208 <SD_CheckStatus+0x38>)
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	b2db      	uxtb	r3, r3
}
 800e200:	4618      	mov	r0, r3
 800e202:	3708      	adds	r7, #8
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}
 800e208:	20000011 	.word	0x20000011

0800e20c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	4603      	mov	r3, r0
 800e214:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800e216:	4b1c      	ldr	r3, [pc, #112]	; (800e288 <SD_initialize+0x7c>)
 800e218:	2201      	movs	r2, #1
 800e21a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800e21c:	f000 fa06 	bl	800e62c <osKernelGetState>
 800e220:	4603      	mov	r3, r0
 800e222:	2b02      	cmp	r3, #2
 800e224:	d129      	bne.n	800e27a <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800e226:	f7ff ff0b 	bl	800e040 <BSP_SD_Init>
 800e22a:	4603      	mov	r3, r0
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d107      	bne.n	800e240 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800e230:	79fb      	ldrb	r3, [r7, #7]
 800e232:	4618      	mov	r0, r3
 800e234:	f7ff ffcc 	bl	800e1d0 <SD_CheckStatus>
 800e238:	4603      	mov	r3, r0
 800e23a:	461a      	mov	r2, r3
 800e23c:	4b12      	ldr	r3, [pc, #72]	; (800e288 <SD_initialize+0x7c>)
 800e23e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800e240:	4b11      	ldr	r3, [pc, #68]	; (800e288 <SD_initialize+0x7c>)
 800e242:	781b      	ldrb	r3, [r3, #0]
 800e244:	b2db      	uxtb	r3, r3
 800e246:	2b01      	cmp	r3, #1
 800e248:	d017      	beq.n	800e27a <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800e24a:	4b10      	ldr	r3, [pc, #64]	; (800e28c <SD_initialize+0x80>)
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d107      	bne.n	800e262 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800e252:	2200      	movs	r2, #0
 800e254:	2102      	movs	r1, #2
 800e256:	200a      	movs	r0, #10
 800e258:	f000 fc12 	bl	800ea80 <osMessageQueueNew>
 800e25c:	4603      	mov	r3, r0
 800e25e:	4a0b      	ldr	r2, [pc, #44]	; (800e28c <SD_initialize+0x80>)
 800e260:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800e262:	4b0a      	ldr	r3, [pc, #40]	; (800e28c <SD_initialize+0x80>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d107      	bne.n	800e27a <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800e26a:	4b07      	ldr	r3, [pc, #28]	; (800e288 <SD_initialize+0x7c>)
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	b2db      	uxtb	r3, r3
 800e270:	f043 0301 	orr.w	r3, r3, #1
 800e274:	b2da      	uxtb	r2, r3
 800e276:	4b04      	ldr	r3, [pc, #16]	; (800e288 <SD_initialize+0x7c>)
 800e278:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800e27a:	4b03      	ldr	r3, [pc, #12]	; (800e288 <SD_initialize+0x7c>)
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	b2db      	uxtb	r3, r3
}
 800e280:	4618      	mov	r0, r3
 800e282:	3708      	adds	r7, #8
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}
 800e288:	20000011 	.word	0x20000011
 800e28c:	2000017c 	.word	0x2000017c

0800e290 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	4603      	mov	r3, r0
 800e298:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e29a:	79fb      	ldrb	r3, [r7, #7]
 800e29c:	4618      	mov	r0, r3
 800e29e:	f7ff ff97 	bl	800e1d0 <SD_CheckStatus>
 800e2a2:	4603      	mov	r3, r0
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3708      	adds	r7, #8
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b088      	sub	sp, #32
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	60b9      	str	r1, [r7, #8]
 800e2b4:	607a      	str	r2, [r7, #4]
 800e2b6:	603b      	str	r3, [r7, #0]
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800e2bc:	2301      	movs	r3, #1
 800e2be:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e2c0:	f247 5030 	movw	r0, #30000	; 0x7530
 800e2c4:	f7ff ff66 	bl	800e194 <SD_CheckStatusWithTimeout>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	da01      	bge.n	800e2d2 <SD_read+0x26>
  {
    return res;
 800e2ce:	7ffb      	ldrb	r3, [r7, #31]
 800e2d0:	e02f      	b.n	800e332 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800e2d2:	683a      	ldr	r2, [r7, #0]
 800e2d4:	6879      	ldr	r1, [r7, #4]
 800e2d6:	68b8      	ldr	r0, [r7, #8]
 800e2d8:	f7ff fed8 	bl	800e08c <BSP_SD_ReadBlocks_DMA>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800e2e0:	7fbb      	ldrb	r3, [r7, #30]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d124      	bne.n	800e330 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800e2e6:	4b15      	ldr	r3, [pc, #84]	; (800e33c <SD_read+0x90>)
 800e2e8:	6818      	ldr	r0, [r3, #0]
 800e2ea:	f107 0112 	add.w	r1, r7, #18
 800e2ee:	f247 5330 	movw	r3, #30000	; 0x7530
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f000 fc98 	bl	800ec28 <osMessageQueueGet>
 800e2f8:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800e2fa:	69bb      	ldr	r3, [r7, #24]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d117      	bne.n	800e330 <SD_read+0x84>
 800e300:	8a7b      	ldrh	r3, [r7, #18]
 800e302:	2b01      	cmp	r3, #1
 800e304:	d114      	bne.n	800e330 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800e306:	f000 f9d9 	bl	800e6bc <osKernelGetTickCount>
 800e30a:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800e30c:	e007      	b.n	800e31e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e30e:	f7ff fef1 	bl	800e0f4 <BSP_SD_GetCardState>
 800e312:	4603      	mov	r3, r0
 800e314:	2b00      	cmp	r3, #0
 800e316:	d102      	bne.n	800e31e <SD_read+0x72>
              {
                res = RES_OK;
 800e318:	2300      	movs	r3, #0
 800e31a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800e31c:	e008      	b.n	800e330 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800e31e:	f000 f9cd 	bl	800e6bc <osKernelGetTickCount>
 800e322:	4602      	mov	r2, r0
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	1ad3      	subs	r3, r2, r3
 800e328:	f247 522f 	movw	r2, #29999	; 0x752f
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d9ee      	bls.n	800e30e <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800e330:	7ffb      	ldrb	r3, [r7, #31]
}
 800e332:	4618      	mov	r0, r3
 800e334:	3720      	adds	r7, #32
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	2000017c 	.word	0x2000017c

0800e340 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b088      	sub	sp, #32
 800e344:	af00      	add	r7, sp, #0
 800e346:	60b9      	str	r1, [r7, #8]
 800e348:	607a      	str	r2, [r7, #4]
 800e34a:	603b      	str	r3, [r7, #0]
 800e34c:	4603      	mov	r3, r0
 800e34e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e350:	2301      	movs	r3, #1
 800e352:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e354:	f247 5030 	movw	r0, #30000	; 0x7530
 800e358:	f7ff ff1c 	bl	800e194 <SD_CheckStatusWithTimeout>
 800e35c:	4603      	mov	r3, r0
 800e35e:	2b00      	cmp	r3, #0
 800e360:	da01      	bge.n	800e366 <SD_write+0x26>
  {
    return res;
 800e362:	7ffb      	ldrb	r3, [r7, #31]
 800e364:	e02d      	b.n	800e3c2 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e366:	683a      	ldr	r2, [r7, #0]
 800e368:	6879      	ldr	r1, [r7, #4]
 800e36a:	68b8      	ldr	r0, [r7, #8]
 800e36c:	f7ff fea8 	bl	800e0c0 <BSP_SD_WriteBlocks_DMA>
 800e370:	4603      	mov	r3, r0
 800e372:	2b00      	cmp	r3, #0
 800e374:	d124      	bne.n	800e3c0 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800e376:	4b15      	ldr	r3, [pc, #84]	; (800e3cc <SD_write+0x8c>)
 800e378:	6818      	ldr	r0, [r3, #0]
 800e37a:	f107 0112 	add.w	r1, r7, #18
 800e37e:	f247 5330 	movw	r3, #30000	; 0x7530
 800e382:	2200      	movs	r2, #0
 800e384:	f000 fc50 	bl	800ec28 <osMessageQueueGet>
 800e388:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800e38a:	69bb      	ldr	r3, [r7, #24]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d117      	bne.n	800e3c0 <SD_write+0x80>
 800e390:	8a7b      	ldrh	r3, [r7, #18]
 800e392:	2b02      	cmp	r3, #2
 800e394:	d114      	bne.n	800e3c0 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800e396:	f000 f991 	bl	800e6bc <osKernelGetTickCount>
 800e39a:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800e39c:	e007      	b.n	800e3ae <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e39e:	f7ff fea9 	bl	800e0f4 <BSP_SD_GetCardState>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d102      	bne.n	800e3ae <SD_write+0x6e>
          {
            res = RES_OK;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	77fb      	strb	r3, [r7, #31]
            break;
 800e3ac:	e008      	b.n	800e3c0 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800e3ae:	f000 f985 	bl	800e6bc <osKernelGetTickCount>
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	1ad3      	subs	r3, r2, r3
 800e3b8:	f247 522f 	movw	r2, #29999	; 0x752f
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d9ee      	bls.n	800e39e <SD_write+0x5e>
    }

  }
#endif

  return res;
 800e3c0:	7ffb      	ldrb	r3, [r7, #31]
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3720      	adds	r7, #32
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	2000017c 	.word	0x2000017c

0800e3d0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b08c      	sub	sp, #48	; 0x30
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	603a      	str	r2, [r7, #0]
 800e3da:	71fb      	strb	r3, [r7, #7]
 800e3dc:	460b      	mov	r3, r1
 800e3de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e3e6:	4b25      	ldr	r3, [pc, #148]	; (800e47c <SD_ioctl+0xac>)
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	b2db      	uxtb	r3, r3
 800e3ec:	f003 0301 	and.w	r3, r3, #1
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d001      	beq.n	800e3f8 <SD_ioctl+0x28>
 800e3f4:	2303      	movs	r3, #3
 800e3f6:	e03c      	b.n	800e472 <SD_ioctl+0xa2>

  switch (cmd)
 800e3f8:	79bb      	ldrb	r3, [r7, #6]
 800e3fa:	2b03      	cmp	r3, #3
 800e3fc:	d834      	bhi.n	800e468 <SD_ioctl+0x98>
 800e3fe:	a201      	add	r2, pc, #4	; (adr r2, 800e404 <SD_ioctl+0x34>)
 800e400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e404:	0800e415 	.word	0x0800e415
 800e408:	0800e41d 	.word	0x0800e41d
 800e40c:	0800e435 	.word	0x0800e435
 800e410:	0800e44f 	.word	0x0800e44f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e414:	2300      	movs	r3, #0
 800e416:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e41a:	e028      	b.n	800e46e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e41c:	f107 030c 	add.w	r3, r7, #12
 800e420:	4618      	mov	r0, r3
 800e422:	f7ff fe77 	bl	800e114 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e42c:	2300      	movs	r3, #0
 800e42e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e432:	e01c      	b.n	800e46e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e434:	f107 030c 	add.w	r3, r7, #12
 800e438:	4618      	mov	r0, r3
 800e43a:	f7ff fe6b 	bl	800e114 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e440:	b29a      	uxth	r2, r3
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e446:	2300      	movs	r3, #0
 800e448:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e44c:	e00f      	b.n	800e46e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e44e:	f107 030c 	add.w	r3, r7, #12
 800e452:	4618      	mov	r0, r3
 800e454:	f7ff fe5e 	bl	800e114 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45a:	0a5a      	lsrs	r2, r3, #9
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e460:	2300      	movs	r3, #0
 800e462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e466:	e002      	b.n	800e46e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e468:	2304      	movs	r3, #4
 800e46a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e46e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e472:	4618      	mov	r0, r3
 800e474:	3730      	adds	r7, #48	; 0x30
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
 800e47a:	bf00      	nop
 800e47c:	20000011 	.word	0x20000011

0800e480 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b082      	sub	sp, #8
 800e484:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800e486:	2301      	movs	r3, #1
 800e488:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800e48a:	4b05      	ldr	r3, [pc, #20]	; (800e4a0 <BSP_SD_ReadCpltCallback+0x20>)
 800e48c:	6818      	ldr	r0, [r3, #0]
 800e48e:	1db9      	adds	r1, r7, #6
 800e490:	2300      	movs	r3, #0
 800e492:	2200      	movs	r2, #0
 800e494:	f000 fb68 	bl	800eb68 <osMessageQueuePut>
#endif
}
 800e498:	bf00      	nop
 800e49a:	3708      	adds	r7, #8
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	2000017c 	.word	0x2000017c

0800e4a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b087      	sub	sp, #28
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	60f8      	str	r0, [r7, #12]
 800e4ac:	60b9      	str	r1, [r7, #8]
 800e4ae:	4613      	mov	r3, r2
 800e4b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e4ba:	4b1f      	ldr	r3, [pc, #124]	; (800e538 <FATFS_LinkDriverEx+0x94>)
 800e4bc:	7a5b      	ldrb	r3, [r3, #9]
 800e4be:	b2db      	uxtb	r3, r3
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d131      	bne.n	800e528 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e4c4:	4b1c      	ldr	r3, [pc, #112]	; (800e538 <FATFS_LinkDriverEx+0x94>)
 800e4c6:	7a5b      	ldrb	r3, [r3, #9]
 800e4c8:	b2db      	uxtb	r3, r3
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	4b1a      	ldr	r3, [pc, #104]	; (800e538 <FATFS_LinkDriverEx+0x94>)
 800e4ce:	2100      	movs	r1, #0
 800e4d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e4d2:	4b19      	ldr	r3, [pc, #100]	; (800e538 <FATFS_LinkDriverEx+0x94>)
 800e4d4:	7a5b      	ldrb	r3, [r3, #9]
 800e4d6:	b2db      	uxtb	r3, r3
 800e4d8:	4a17      	ldr	r2, [pc, #92]	; (800e538 <FATFS_LinkDriverEx+0x94>)
 800e4da:	009b      	lsls	r3, r3, #2
 800e4dc:	4413      	add	r3, r2
 800e4de:	68fa      	ldr	r2, [r7, #12]
 800e4e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e4e2:	4b15      	ldr	r3, [pc, #84]	; (800e538 <FATFS_LinkDriverEx+0x94>)
 800e4e4:	7a5b      	ldrb	r3, [r3, #9]
 800e4e6:	b2db      	uxtb	r3, r3
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	4b13      	ldr	r3, [pc, #76]	; (800e538 <FATFS_LinkDriverEx+0x94>)
 800e4ec:	4413      	add	r3, r2
 800e4ee:	79fa      	ldrb	r2, [r7, #7]
 800e4f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e4f2:	4b11      	ldr	r3, [pc, #68]	; (800e538 <FATFS_LinkDriverEx+0x94>)
 800e4f4:	7a5b      	ldrb	r3, [r3, #9]
 800e4f6:	b2db      	uxtb	r3, r3
 800e4f8:	1c5a      	adds	r2, r3, #1
 800e4fa:	b2d1      	uxtb	r1, r2
 800e4fc:	4a0e      	ldr	r2, [pc, #56]	; (800e538 <FATFS_LinkDriverEx+0x94>)
 800e4fe:	7251      	strb	r1, [r2, #9]
 800e500:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e502:	7dbb      	ldrb	r3, [r7, #22]
 800e504:	3330      	adds	r3, #48	; 0x30
 800e506:	b2da      	uxtb	r2, r3
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	3301      	adds	r3, #1
 800e510:	223a      	movs	r2, #58	; 0x3a
 800e512:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	3302      	adds	r3, #2
 800e518:	222f      	movs	r2, #47	; 0x2f
 800e51a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	3303      	adds	r3, #3
 800e520:	2200      	movs	r2, #0
 800e522:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e524:	2300      	movs	r3, #0
 800e526:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e528:	7dfb      	ldrb	r3, [r7, #23]
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	371c      	adds	r7, #28
 800e52e:	46bd      	mov	sp, r7
 800e530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e534:	4770      	bx	lr
 800e536:	bf00      	nop
 800e538:	20000180 	.word	0x20000180

0800e53c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
 800e544:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e546:	2200      	movs	r2, #0
 800e548:	6839      	ldr	r1, [r7, #0]
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f7ff ffaa 	bl	800e4a4 <FATFS_LinkDriverEx>
 800e550:	4603      	mov	r3, r0
}
 800e552:	4618      	mov	r0, r3
 800e554:	3708      	adds	r7, #8
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
	...

0800e55c <__NVIC_SetPriority>:
{
 800e55c:	b480      	push	{r7}
 800e55e:	b083      	sub	sp, #12
 800e560:	af00      	add	r7, sp, #0
 800e562:	4603      	mov	r3, r0
 800e564:	6039      	str	r1, [r7, #0]
 800e566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	db0a      	blt.n	800e586 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	b2da      	uxtb	r2, r3
 800e574:	490c      	ldr	r1, [pc, #48]	; (800e5a8 <__NVIC_SetPriority+0x4c>)
 800e576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e57a:	0112      	lsls	r2, r2, #4
 800e57c:	b2d2      	uxtb	r2, r2
 800e57e:	440b      	add	r3, r1
 800e580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e584:	e00a      	b.n	800e59c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	b2da      	uxtb	r2, r3
 800e58a:	4908      	ldr	r1, [pc, #32]	; (800e5ac <__NVIC_SetPriority+0x50>)
 800e58c:	79fb      	ldrb	r3, [r7, #7]
 800e58e:	f003 030f 	and.w	r3, r3, #15
 800e592:	3b04      	subs	r3, #4
 800e594:	0112      	lsls	r2, r2, #4
 800e596:	b2d2      	uxtb	r2, r2
 800e598:	440b      	add	r3, r1
 800e59a:	761a      	strb	r2, [r3, #24]
}
 800e59c:	bf00      	nop
 800e59e:	370c      	adds	r7, #12
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr
 800e5a8:	e000e100 	.word	0xe000e100
 800e5ac:	e000ed00 	.word	0xe000ed00

0800e5b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e5b4:	4b05      	ldr	r3, [pc, #20]	; (800e5cc <SysTick_Handler+0x1c>)
 800e5b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e5b8:	f002 fae4 	bl	8010b84 <xTaskGetSchedulerState>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d001      	beq.n	800e5c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e5c2:	f003 f9c9 	bl	8011958 <xPortSysTickHandler>
  }
}
 800e5c6:	bf00      	nop
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	e000e010 	.word	0xe000e010

0800e5d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e5d4:	2100      	movs	r1, #0
 800e5d6:	f06f 0004 	mvn.w	r0, #4
 800e5da:	f7ff ffbf 	bl	800e55c <__NVIC_SetPriority>
#endif
}
 800e5de:	bf00      	nop
 800e5e0:	bd80      	pop	{r7, pc}
	...

0800e5e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e5e4:	b480      	push	{r7}
 800e5e6:	b083      	sub	sp, #12
 800e5e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5ea:	f3ef 8305 	mrs	r3, IPSR
 800e5ee:	603b      	str	r3, [r7, #0]
  return(result);
 800e5f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d003      	beq.n	800e5fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e5f6:	f06f 0305 	mvn.w	r3, #5
 800e5fa:	607b      	str	r3, [r7, #4]
 800e5fc:	e00c      	b.n	800e618 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e5fe:	4b0a      	ldr	r3, [pc, #40]	; (800e628 <osKernelInitialize+0x44>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d105      	bne.n	800e612 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e606:	4b08      	ldr	r3, [pc, #32]	; (800e628 <osKernelInitialize+0x44>)
 800e608:	2201      	movs	r2, #1
 800e60a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e60c:	2300      	movs	r3, #0
 800e60e:	607b      	str	r3, [r7, #4]
 800e610:	e002      	b.n	800e618 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e612:	f04f 33ff 	mov.w	r3, #4294967295
 800e616:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e618:	687b      	ldr	r3, [r7, #4]
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	370c      	adds	r7, #12
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr
 800e626:	bf00      	nop
 800e628:	2000018c 	.word	0x2000018c

0800e62c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800e632:	f002 faa7 	bl	8010b84 <xTaskGetSchedulerState>
 800e636:	4603      	mov	r3, r0
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d004      	beq.n	800e646 <osKernelGetState+0x1a>
 800e63c:	2b02      	cmp	r3, #2
 800e63e:	d105      	bne.n	800e64c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800e640:	2302      	movs	r3, #2
 800e642:	607b      	str	r3, [r7, #4]
      break;
 800e644:	e00c      	b.n	800e660 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800e646:	2303      	movs	r3, #3
 800e648:	607b      	str	r3, [r7, #4]
      break;
 800e64a:	e009      	b.n	800e660 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800e64c:	4b07      	ldr	r3, [pc, #28]	; (800e66c <osKernelGetState+0x40>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2b01      	cmp	r3, #1
 800e652:	d102      	bne.n	800e65a <osKernelGetState+0x2e>
        state = osKernelReady;
 800e654:	2301      	movs	r3, #1
 800e656:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800e658:	e001      	b.n	800e65e <osKernelGetState+0x32>
        state = osKernelInactive;
 800e65a:	2300      	movs	r3, #0
 800e65c:	607b      	str	r3, [r7, #4]
      break;
 800e65e:	bf00      	nop
  }

  return (state);
 800e660:	687b      	ldr	r3, [r7, #4]
}
 800e662:	4618      	mov	r0, r3
 800e664:	3708      	adds	r7, #8
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	bf00      	nop
 800e66c:	2000018c 	.word	0x2000018c

0800e670 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e676:	f3ef 8305 	mrs	r3, IPSR
 800e67a:	603b      	str	r3, [r7, #0]
  return(result);
 800e67c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d003      	beq.n	800e68a <osKernelStart+0x1a>
    stat = osErrorISR;
 800e682:	f06f 0305 	mvn.w	r3, #5
 800e686:	607b      	str	r3, [r7, #4]
 800e688:	e010      	b.n	800e6ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e68a:	4b0b      	ldr	r3, [pc, #44]	; (800e6b8 <osKernelStart+0x48>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2b01      	cmp	r3, #1
 800e690:	d109      	bne.n	800e6a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e692:	f7ff ff9d 	bl	800e5d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e696:	4b08      	ldr	r3, [pc, #32]	; (800e6b8 <osKernelStart+0x48>)
 800e698:	2202      	movs	r2, #2
 800e69a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e69c:	f001 fe04 	bl	80102a8 <vTaskStartScheduler>
      stat = osOK;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	607b      	str	r3, [r7, #4]
 800e6a4:	e002      	b.n	800e6ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e6a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e6aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e6ac:	687b      	ldr	r3, [r7, #4]
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3708      	adds	r7, #8
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	2000018c 	.word	0x2000018c

0800e6bc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b082      	sub	sp, #8
 800e6c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6c2:	f3ef 8305 	mrs	r3, IPSR
 800e6c6:	603b      	str	r3, [r7, #0]
  return(result);
 800e6c8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d003      	beq.n	800e6d6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800e6ce:	f001 ff17 	bl	8010500 <xTaskGetTickCountFromISR>
 800e6d2:	6078      	str	r0, [r7, #4]
 800e6d4:	e002      	b.n	800e6dc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800e6d6:	f001 ff03 	bl	80104e0 <xTaskGetTickCount>
 800e6da:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800e6dc:	687b      	ldr	r3, [r7, #4]
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3708      	adds	r7, #8
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}

0800e6e6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e6e6:	b580      	push	{r7, lr}
 800e6e8:	b08e      	sub	sp, #56	; 0x38
 800e6ea:	af04      	add	r7, sp, #16
 800e6ec:	60f8      	str	r0, [r7, #12]
 800e6ee:	60b9      	str	r1, [r7, #8]
 800e6f0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6f6:	f3ef 8305 	mrs	r3, IPSR
 800e6fa:	617b      	str	r3, [r7, #20]
  return(result);
 800e6fc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d17e      	bne.n	800e800 <osThreadNew+0x11a>
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d07b      	beq.n	800e800 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e708:	2340      	movs	r3, #64	; 0x40
 800e70a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e70c:	2318      	movs	r3, #24
 800e70e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e710:	2300      	movs	r3, #0
 800e712:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e714:	f04f 33ff 	mov.w	r3, #4294967295
 800e718:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d045      	beq.n	800e7ac <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d002      	beq.n	800e72e <osThreadNew+0x48>
        name = attr->name;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	699b      	ldr	r3, [r3, #24]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d002      	beq.n	800e73c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	699b      	ldr	r3, [r3, #24]
 800e73a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e73c:	69fb      	ldr	r3, [r7, #28]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d008      	beq.n	800e754 <osThreadNew+0x6e>
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	2b38      	cmp	r3, #56	; 0x38
 800e746:	d805      	bhi.n	800e754 <osThreadNew+0x6e>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	f003 0301 	and.w	r3, r3, #1
 800e750:	2b00      	cmp	r3, #0
 800e752:	d001      	beq.n	800e758 <osThreadNew+0x72>
        return (NULL);
 800e754:	2300      	movs	r3, #0
 800e756:	e054      	b.n	800e802 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	695b      	ldr	r3, [r3, #20]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d003      	beq.n	800e768 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	695b      	ldr	r3, [r3, #20]
 800e764:	089b      	lsrs	r3, r3, #2
 800e766:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	689b      	ldr	r3, [r3, #8]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d00e      	beq.n	800e78e <osThreadNew+0xa8>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	68db      	ldr	r3, [r3, #12]
 800e774:	2bbb      	cmp	r3, #187	; 0xbb
 800e776:	d90a      	bls.n	800e78e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d006      	beq.n	800e78e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	695b      	ldr	r3, [r3, #20]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d002      	beq.n	800e78e <osThreadNew+0xa8>
        mem = 1;
 800e788:	2301      	movs	r3, #1
 800e78a:	61bb      	str	r3, [r7, #24]
 800e78c:	e010      	b.n	800e7b0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	689b      	ldr	r3, [r3, #8]
 800e792:	2b00      	cmp	r3, #0
 800e794:	d10c      	bne.n	800e7b0 <osThreadNew+0xca>
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	68db      	ldr	r3, [r3, #12]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d108      	bne.n	800e7b0 <osThreadNew+0xca>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	691b      	ldr	r3, [r3, #16]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d104      	bne.n	800e7b0 <osThreadNew+0xca>
          mem = 0;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	61bb      	str	r3, [r7, #24]
 800e7aa:	e001      	b.n	800e7b0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e7b0:	69bb      	ldr	r3, [r7, #24]
 800e7b2:	2b01      	cmp	r3, #1
 800e7b4:	d110      	bne.n	800e7d8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e7ba:	687a      	ldr	r2, [r7, #4]
 800e7bc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e7be:	9202      	str	r2, [sp, #8]
 800e7c0:	9301      	str	r3, [sp, #4]
 800e7c2:	69fb      	ldr	r3, [r7, #28]
 800e7c4:	9300      	str	r3, [sp, #0]
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	6a3a      	ldr	r2, [r7, #32]
 800e7ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e7cc:	68f8      	ldr	r0, [r7, #12]
 800e7ce:	f001 fb7f 	bl	800fed0 <xTaskCreateStatic>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	613b      	str	r3, [r7, #16]
 800e7d6:	e013      	b.n	800e800 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e7d8:	69bb      	ldr	r3, [r7, #24]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d110      	bne.n	800e800 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e7de:	6a3b      	ldr	r3, [r7, #32]
 800e7e0:	b29a      	uxth	r2, r3
 800e7e2:	f107 0310 	add.w	r3, r7, #16
 800e7e6:	9301      	str	r3, [sp, #4]
 800e7e8:	69fb      	ldr	r3, [r7, #28]
 800e7ea:	9300      	str	r3, [sp, #0]
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e7f0:	68f8      	ldr	r0, [r7, #12]
 800e7f2:	f001 fbca 	bl	800ff8a <xTaskCreate>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d001      	beq.n	800e800 <osThreadNew+0x11a>
            hTask = NULL;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e800:	693b      	ldr	r3, [r7, #16]
}
 800e802:	4618      	mov	r0, r3
 800e804:	3728      	adds	r7, #40	; 0x28
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}

0800e80a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e80a:	b580      	push	{r7, lr}
 800e80c:	b084      	sub	sp, #16
 800e80e:	af00      	add	r7, sp, #0
 800e810:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e812:	f3ef 8305 	mrs	r3, IPSR
 800e816:	60bb      	str	r3, [r7, #8]
  return(result);
 800e818:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d003      	beq.n	800e826 <osDelay+0x1c>
    stat = osErrorISR;
 800e81e:	f06f 0305 	mvn.w	r3, #5
 800e822:	60fb      	str	r3, [r7, #12]
 800e824:	e007      	b.n	800e836 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e826:	2300      	movs	r3, #0
 800e828:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d002      	beq.n	800e836 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f001 fd05 	bl	8010240 <vTaskDelay>
    }
  }

  return (stat);
 800e836:	68fb      	ldr	r3, [r7, #12]
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3710      	adds	r7, #16
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e840:	b580      	push	{r7, lr}
 800e842:	b08a      	sub	sp, #40	; 0x28
 800e844:	af02      	add	r7, sp, #8
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e84c:	2300      	movs	r3, #0
 800e84e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e850:	f3ef 8305 	mrs	r3, IPSR
 800e854:	613b      	str	r3, [r7, #16]
  return(result);
 800e856:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d175      	bne.n	800e948 <osSemaphoreNew+0x108>
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d072      	beq.n	800e948 <osSemaphoreNew+0x108>
 800e862:	68ba      	ldr	r2, [r7, #8]
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	429a      	cmp	r2, r3
 800e868:	d86e      	bhi.n	800e948 <osSemaphoreNew+0x108>
    mem = -1;
 800e86a:	f04f 33ff 	mov.w	r3, #4294967295
 800e86e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d015      	beq.n	800e8a2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	689b      	ldr	r3, [r3, #8]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d006      	beq.n	800e88c <osSemaphoreNew+0x4c>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	68db      	ldr	r3, [r3, #12]
 800e882:	2b4f      	cmp	r3, #79	; 0x4f
 800e884:	d902      	bls.n	800e88c <osSemaphoreNew+0x4c>
        mem = 1;
 800e886:	2301      	movs	r3, #1
 800e888:	61bb      	str	r3, [r7, #24]
 800e88a:	e00c      	b.n	800e8a6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	689b      	ldr	r3, [r3, #8]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d108      	bne.n	800e8a6 <osSemaphoreNew+0x66>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	68db      	ldr	r3, [r3, #12]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d104      	bne.n	800e8a6 <osSemaphoreNew+0x66>
          mem = 0;
 800e89c:	2300      	movs	r3, #0
 800e89e:	61bb      	str	r3, [r7, #24]
 800e8a0:	e001      	b.n	800e8a6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800e8a6:	69bb      	ldr	r3, [r7, #24]
 800e8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ac:	d04c      	beq.n	800e948 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	d128      	bne.n	800e906 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800e8b4:	69bb      	ldr	r3, [r7, #24]
 800e8b6:	2b01      	cmp	r3, #1
 800e8b8:	d10a      	bne.n	800e8d0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	689b      	ldr	r3, [r3, #8]
 800e8be:	2203      	movs	r2, #3
 800e8c0:	9200      	str	r2, [sp, #0]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	2100      	movs	r1, #0
 800e8c6:	2001      	movs	r0, #1
 800e8c8:	f000 fb5c 	bl	800ef84 <xQueueGenericCreateStatic>
 800e8cc:	61f8      	str	r0, [r7, #28]
 800e8ce:	e005      	b.n	800e8dc <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800e8d0:	2203      	movs	r2, #3
 800e8d2:	2100      	movs	r1, #0
 800e8d4:	2001      	movs	r0, #1
 800e8d6:	f000 fbcd 	bl	800f074 <xQueueGenericCreate>
 800e8da:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d022      	beq.n	800e928 <osSemaphoreNew+0xe8>
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d01f      	beq.n	800e928 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	2100      	movs	r1, #0
 800e8ee:	69f8      	ldr	r0, [r7, #28]
 800e8f0:	f000 fc88 	bl	800f204 <xQueueGenericSend>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	2b01      	cmp	r3, #1
 800e8f8:	d016      	beq.n	800e928 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800e8fa:	69f8      	ldr	r0, [r7, #28]
 800e8fc:	f001 f914 	bl	800fb28 <vQueueDelete>
            hSemaphore = NULL;
 800e900:	2300      	movs	r3, #0
 800e902:	61fb      	str	r3, [r7, #28]
 800e904:	e010      	b.n	800e928 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800e906:	69bb      	ldr	r3, [r7, #24]
 800e908:	2b01      	cmp	r3, #1
 800e90a:	d108      	bne.n	800e91e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	689b      	ldr	r3, [r3, #8]
 800e910:	461a      	mov	r2, r3
 800e912:	68b9      	ldr	r1, [r7, #8]
 800e914:	68f8      	ldr	r0, [r7, #12]
 800e916:	f000 fc0a 	bl	800f12e <xQueueCreateCountingSemaphoreStatic>
 800e91a:	61f8      	str	r0, [r7, #28]
 800e91c:	e004      	b.n	800e928 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e91e:	68b9      	ldr	r1, [r7, #8]
 800e920:	68f8      	ldr	r0, [r7, #12]
 800e922:	f000 fc3b 	bl	800f19c <xQueueCreateCountingSemaphore>
 800e926:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d00c      	beq.n	800e948 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d003      	beq.n	800e93c <osSemaphoreNew+0xfc>
          name = attr->name;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	617b      	str	r3, [r7, #20]
 800e93a:	e001      	b.n	800e940 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800e93c:	2300      	movs	r3, #0
 800e93e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e940:	6979      	ldr	r1, [r7, #20]
 800e942:	69f8      	ldr	r0, [r7, #28]
 800e944:	f001 fa3c 	bl	800fdc0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e948:	69fb      	ldr	r3, [r7, #28]
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3720      	adds	r7, #32
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}
	...

0800e954 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e954:	b580      	push	{r7, lr}
 800e956:	b086      	sub	sp, #24
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e962:	2300      	movs	r3, #0
 800e964:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d103      	bne.n	800e974 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e96c:	f06f 0303 	mvn.w	r3, #3
 800e970:	617b      	str	r3, [r7, #20]
 800e972:	e039      	b.n	800e9e8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e974:	f3ef 8305 	mrs	r3, IPSR
 800e978:	60fb      	str	r3, [r7, #12]
  return(result);
 800e97a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d022      	beq.n	800e9c6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d003      	beq.n	800e98e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800e986:	f06f 0303 	mvn.w	r3, #3
 800e98a:	617b      	str	r3, [r7, #20]
 800e98c:	e02c      	b.n	800e9e8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800e98e:	2300      	movs	r3, #0
 800e990:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e992:	f107 0308 	add.w	r3, r7, #8
 800e996:	461a      	mov	r2, r3
 800e998:	2100      	movs	r1, #0
 800e99a:	6938      	ldr	r0, [r7, #16]
 800e99c:	f001 f844 	bl	800fa28 <xQueueReceiveFromISR>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b01      	cmp	r3, #1
 800e9a4:	d003      	beq.n	800e9ae <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800e9a6:	f06f 0302 	mvn.w	r3, #2
 800e9aa:	617b      	str	r3, [r7, #20]
 800e9ac:	e01c      	b.n	800e9e8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d019      	beq.n	800e9e8 <osSemaphoreAcquire+0x94>
 800e9b4:	4b0f      	ldr	r3, [pc, #60]	; (800e9f4 <osSemaphoreAcquire+0xa0>)
 800e9b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9ba:	601a      	str	r2, [r3, #0]
 800e9bc:	f3bf 8f4f 	dsb	sy
 800e9c0:	f3bf 8f6f 	isb	sy
 800e9c4:	e010      	b.n	800e9e8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e9c6:	6839      	ldr	r1, [r7, #0]
 800e9c8:	6938      	ldr	r0, [r7, #16]
 800e9ca:	f000 ff21 	bl	800f810 <xQueueSemaphoreTake>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	d009      	beq.n	800e9e8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d003      	beq.n	800e9e2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800e9da:	f06f 0301 	mvn.w	r3, #1
 800e9de:	617b      	str	r3, [r7, #20]
 800e9e0:	e002      	b.n	800e9e8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800e9e2:	f06f 0302 	mvn.w	r3, #2
 800e9e6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800e9e8:	697b      	ldr	r3, [r7, #20]
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3718      	adds	r7, #24
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	e000ed04 	.word	0xe000ed04

0800e9f8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b086      	sub	sp, #24
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ea04:	2300      	movs	r3, #0
 800ea06:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d103      	bne.n	800ea16 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ea0e:	f06f 0303 	mvn.w	r3, #3
 800ea12:	617b      	str	r3, [r7, #20]
 800ea14:	e02c      	b.n	800ea70 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea16:	f3ef 8305 	mrs	r3, IPSR
 800ea1a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ea1c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d01a      	beq.n	800ea58 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ea22:	2300      	movs	r3, #0
 800ea24:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ea26:	f107 0308 	add.w	r3, r7, #8
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	6938      	ldr	r0, [r7, #16]
 800ea2e:	f000 fd82 	bl	800f536 <xQueueGiveFromISR>
 800ea32:	4603      	mov	r3, r0
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d003      	beq.n	800ea40 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ea38:	f06f 0302 	mvn.w	r3, #2
 800ea3c:	617b      	str	r3, [r7, #20]
 800ea3e:	e017      	b.n	800ea70 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d014      	beq.n	800ea70 <osSemaphoreRelease+0x78>
 800ea46:	4b0d      	ldr	r3, [pc, #52]	; (800ea7c <osSemaphoreRelease+0x84>)
 800ea48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea4c:	601a      	str	r2, [r3, #0]
 800ea4e:	f3bf 8f4f 	dsb	sy
 800ea52:	f3bf 8f6f 	isb	sy
 800ea56:	e00b      	b.n	800ea70 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ea58:	2300      	movs	r3, #0
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	2100      	movs	r1, #0
 800ea5e:	6938      	ldr	r0, [r7, #16]
 800ea60:	f000 fbd0 	bl	800f204 <xQueueGenericSend>
 800ea64:	4603      	mov	r3, r0
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d002      	beq.n	800ea70 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800ea6a:	f06f 0302 	mvn.w	r3, #2
 800ea6e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ea70:	697b      	ldr	r3, [r7, #20]
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3718      	adds	r7, #24
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}
 800ea7a:	bf00      	nop
 800ea7c:	e000ed04 	.word	0xe000ed04

0800ea80 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b08a      	sub	sp, #40	; 0x28
 800ea84:	af02      	add	r7, sp, #8
 800ea86:	60f8      	str	r0, [r7, #12]
 800ea88:	60b9      	str	r1, [r7, #8]
 800ea8a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea90:	f3ef 8305 	mrs	r3, IPSR
 800ea94:	613b      	str	r3, [r7, #16]
  return(result);
 800ea96:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d15f      	bne.n	800eb5c <osMessageQueueNew+0xdc>
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d05c      	beq.n	800eb5c <osMessageQueueNew+0xdc>
 800eaa2:	68bb      	ldr	r3, [r7, #8]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d059      	beq.n	800eb5c <osMessageQueueNew+0xdc>
    mem = -1;
 800eaa8:	f04f 33ff 	mov.w	r3, #4294967295
 800eaac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d029      	beq.n	800eb08 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	689b      	ldr	r3, [r3, #8]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d012      	beq.n	800eae2 <osMessageQueueNew+0x62>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	68db      	ldr	r3, [r3, #12]
 800eac0:	2b4f      	cmp	r3, #79	; 0x4f
 800eac2:	d90e      	bls.n	800eae2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d00a      	beq.n	800eae2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	695a      	ldr	r2, [r3, #20]
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	68b9      	ldr	r1, [r7, #8]
 800ead4:	fb01 f303 	mul.w	r3, r1, r3
 800ead8:	429a      	cmp	r2, r3
 800eada:	d302      	bcc.n	800eae2 <osMessageQueueNew+0x62>
        mem = 1;
 800eadc:	2301      	movs	r3, #1
 800eade:	61bb      	str	r3, [r7, #24]
 800eae0:	e014      	b.n	800eb0c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	689b      	ldr	r3, [r3, #8]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d110      	bne.n	800eb0c <osMessageQueueNew+0x8c>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	68db      	ldr	r3, [r3, #12]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d10c      	bne.n	800eb0c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d108      	bne.n	800eb0c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	695b      	ldr	r3, [r3, #20]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d104      	bne.n	800eb0c <osMessageQueueNew+0x8c>
          mem = 0;
 800eb02:	2300      	movs	r3, #0
 800eb04:	61bb      	str	r3, [r7, #24]
 800eb06:	e001      	b.n	800eb0c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800eb0c:	69bb      	ldr	r3, [r7, #24]
 800eb0e:	2b01      	cmp	r3, #1
 800eb10:	d10b      	bne.n	800eb2a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	691a      	ldr	r2, [r3, #16]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	689b      	ldr	r3, [r3, #8]
 800eb1a:	2100      	movs	r1, #0
 800eb1c:	9100      	str	r1, [sp, #0]
 800eb1e:	68b9      	ldr	r1, [r7, #8]
 800eb20:	68f8      	ldr	r0, [r7, #12]
 800eb22:	f000 fa2f 	bl	800ef84 <xQueueGenericCreateStatic>
 800eb26:	61f8      	str	r0, [r7, #28]
 800eb28:	e008      	b.n	800eb3c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d105      	bne.n	800eb3c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800eb30:	2200      	movs	r2, #0
 800eb32:	68b9      	ldr	r1, [r7, #8]
 800eb34:	68f8      	ldr	r0, [r7, #12]
 800eb36:	f000 fa9d 	bl	800f074 <xQueueGenericCreate>
 800eb3a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800eb3c:	69fb      	ldr	r3, [r7, #28]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d00c      	beq.n	800eb5c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d003      	beq.n	800eb50 <osMessageQueueNew+0xd0>
        name = attr->name;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	617b      	str	r3, [r7, #20]
 800eb4e:	e001      	b.n	800eb54 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800eb50:	2300      	movs	r3, #0
 800eb52:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800eb54:	6979      	ldr	r1, [r7, #20]
 800eb56:	69f8      	ldr	r0, [r7, #28]
 800eb58:	f001 f932 	bl	800fdc0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800eb5c:	69fb      	ldr	r3, [r7, #28]
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3720      	adds	r7, #32
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
	...

0800eb68 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b088      	sub	sp, #32
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60f8      	str	r0, [r7, #12]
 800eb70:	60b9      	str	r1, [r7, #8]
 800eb72:	603b      	str	r3, [r7, #0]
 800eb74:	4613      	mov	r3, r2
 800eb76:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb80:	f3ef 8305 	mrs	r3, IPSR
 800eb84:	617b      	str	r3, [r7, #20]
  return(result);
 800eb86:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d028      	beq.n	800ebde <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eb8c:	69bb      	ldr	r3, [r7, #24]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d005      	beq.n	800eb9e <osMessageQueuePut+0x36>
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d002      	beq.n	800eb9e <osMessageQueuePut+0x36>
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d003      	beq.n	800eba6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800eb9e:	f06f 0303 	mvn.w	r3, #3
 800eba2:	61fb      	str	r3, [r7, #28]
 800eba4:	e038      	b.n	800ec18 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800eba6:	2300      	movs	r3, #0
 800eba8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ebaa:	f107 0210 	add.w	r2, r7, #16
 800ebae:	2300      	movs	r3, #0
 800ebb0:	68b9      	ldr	r1, [r7, #8]
 800ebb2:	69b8      	ldr	r0, [r7, #24]
 800ebb4:	f000 fc24 	bl	800f400 <xQueueGenericSendFromISR>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	2b01      	cmp	r3, #1
 800ebbc:	d003      	beq.n	800ebc6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ebbe:	f06f 0302 	mvn.w	r3, #2
 800ebc2:	61fb      	str	r3, [r7, #28]
 800ebc4:	e028      	b.n	800ec18 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d025      	beq.n	800ec18 <osMessageQueuePut+0xb0>
 800ebcc:	4b15      	ldr	r3, [pc, #84]	; (800ec24 <osMessageQueuePut+0xbc>)
 800ebce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebd2:	601a      	str	r2, [r3, #0]
 800ebd4:	f3bf 8f4f 	dsb	sy
 800ebd8:	f3bf 8f6f 	isb	sy
 800ebdc:	e01c      	b.n	800ec18 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ebde:	69bb      	ldr	r3, [r7, #24]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d002      	beq.n	800ebea <osMessageQueuePut+0x82>
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d103      	bne.n	800ebf2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ebea:	f06f 0303 	mvn.w	r3, #3
 800ebee:	61fb      	str	r3, [r7, #28]
 800ebf0:	e012      	b.n	800ec18 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	683a      	ldr	r2, [r7, #0]
 800ebf6:	68b9      	ldr	r1, [r7, #8]
 800ebf8:	69b8      	ldr	r0, [r7, #24]
 800ebfa:	f000 fb03 	bl	800f204 <xQueueGenericSend>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	2b01      	cmp	r3, #1
 800ec02:	d009      	beq.n	800ec18 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d003      	beq.n	800ec12 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ec0a:	f06f 0301 	mvn.w	r3, #1
 800ec0e:	61fb      	str	r3, [r7, #28]
 800ec10:	e002      	b.n	800ec18 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ec12:	f06f 0302 	mvn.w	r3, #2
 800ec16:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ec18:	69fb      	ldr	r3, [r7, #28]
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3720      	adds	r7, #32
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
 800ec22:	bf00      	nop
 800ec24:	e000ed04 	.word	0xe000ed04

0800ec28 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b088      	sub	sp, #32
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	60f8      	str	r0, [r7, #12]
 800ec30:	60b9      	str	r1, [r7, #8]
 800ec32:	607a      	str	r2, [r7, #4]
 800ec34:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec3e:	f3ef 8305 	mrs	r3, IPSR
 800ec42:	617b      	str	r3, [r7, #20]
  return(result);
 800ec44:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d028      	beq.n	800ec9c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d005      	beq.n	800ec5c <osMessageQueueGet+0x34>
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d002      	beq.n	800ec5c <osMessageQueueGet+0x34>
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d003      	beq.n	800ec64 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ec5c:	f06f 0303 	mvn.w	r3, #3
 800ec60:	61fb      	str	r3, [r7, #28]
 800ec62:	e037      	b.n	800ecd4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ec64:	2300      	movs	r3, #0
 800ec66:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ec68:	f107 0310 	add.w	r3, r7, #16
 800ec6c:	461a      	mov	r2, r3
 800ec6e:	68b9      	ldr	r1, [r7, #8]
 800ec70:	69b8      	ldr	r0, [r7, #24]
 800ec72:	f000 fed9 	bl	800fa28 <xQueueReceiveFromISR>
 800ec76:	4603      	mov	r3, r0
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d003      	beq.n	800ec84 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ec7c:	f06f 0302 	mvn.w	r3, #2
 800ec80:	61fb      	str	r3, [r7, #28]
 800ec82:	e027      	b.n	800ecd4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d024      	beq.n	800ecd4 <osMessageQueueGet+0xac>
 800ec8a:	4b15      	ldr	r3, [pc, #84]	; (800ece0 <osMessageQueueGet+0xb8>)
 800ec8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec90:	601a      	str	r2, [r3, #0]
 800ec92:	f3bf 8f4f 	dsb	sy
 800ec96:	f3bf 8f6f 	isb	sy
 800ec9a:	e01b      	b.n	800ecd4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ec9c:	69bb      	ldr	r3, [r7, #24]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d002      	beq.n	800eca8 <osMessageQueueGet+0x80>
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d103      	bne.n	800ecb0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800eca8:	f06f 0303 	mvn.w	r3, #3
 800ecac:	61fb      	str	r3, [r7, #28]
 800ecae:	e011      	b.n	800ecd4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ecb0:	683a      	ldr	r2, [r7, #0]
 800ecb2:	68b9      	ldr	r1, [r7, #8]
 800ecb4:	69b8      	ldr	r0, [r7, #24]
 800ecb6:	f000 fccb 	bl	800f650 <xQueueReceive>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d009      	beq.n	800ecd4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d003      	beq.n	800ecce <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ecc6:	f06f 0301 	mvn.w	r3, #1
 800ecca:	61fb      	str	r3, [r7, #28]
 800eccc:	e002      	b.n	800ecd4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ecce:	f06f 0302 	mvn.w	r3, #2
 800ecd2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ecd4:	69fb      	ldr	r3, [r7, #28]
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3720      	adds	r7, #32
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	e000ed04 	.word	0xe000ed04

0800ece4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ece4:	b480      	push	{r7}
 800ece6:	b085      	sub	sp, #20
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	4a07      	ldr	r2, [pc, #28]	; (800ed10 <vApplicationGetIdleTaskMemory+0x2c>)
 800ecf4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	4a06      	ldr	r2, [pc, #24]	; (800ed14 <vApplicationGetIdleTaskMemory+0x30>)
 800ecfa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2240      	movs	r2, #64	; 0x40
 800ed00:	601a      	str	r2, [r3, #0]
}
 800ed02:	bf00      	nop
 800ed04:	3714      	adds	r7, #20
 800ed06:	46bd      	mov	sp, r7
 800ed08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0c:	4770      	bx	lr
 800ed0e:	bf00      	nop
 800ed10:	20000190 	.word	0x20000190
 800ed14:	2000024c 	.word	0x2000024c

0800ed18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ed18:	b480      	push	{r7}
 800ed1a:	b085      	sub	sp, #20
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	60f8      	str	r0, [r7, #12]
 800ed20:	60b9      	str	r1, [r7, #8]
 800ed22:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	4a07      	ldr	r2, [pc, #28]	; (800ed44 <vApplicationGetTimerTaskMemory+0x2c>)
 800ed28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	4a06      	ldr	r2, [pc, #24]	; (800ed48 <vApplicationGetTimerTaskMemory+0x30>)
 800ed2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2280      	movs	r2, #128	; 0x80
 800ed34:	601a      	str	r2, [r3, #0]
}
 800ed36:	bf00      	nop
 800ed38:	3714      	adds	r7, #20
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop
 800ed44:	2000034c 	.word	0x2000034c
 800ed48:	20000408 	.word	0x20000408

0800ed4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f103 0208 	add.w	r2, r3, #8
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f04f 32ff 	mov.w	r2, #4294967295
 800ed64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f103 0208 	add.w	r2, r3, #8
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f103 0208 	add.w	r2, r3, #8
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ed80:	bf00      	nop
 800ed82:	370c      	adds	r7, #12
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr

0800ed8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	b083      	sub	sp, #12
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2200      	movs	r2, #0
 800ed98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ed9a:	bf00      	nop
 800ed9c:	370c      	adds	r7, #12
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda4:	4770      	bx	lr

0800eda6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eda6:	b480      	push	{r7}
 800eda8:	b085      	sub	sp, #20
 800edaa:	af00      	add	r7, sp, #0
 800edac:	6078      	str	r0, [r7, #4]
 800edae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	68fa      	ldr	r2, [r7, #12]
 800edba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	689a      	ldr	r2, [r3, #8]
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	689b      	ldr	r3, [r3, #8]
 800edc8:	683a      	ldr	r2, [r7, #0]
 800edca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	683a      	ldr	r2, [r7, #0]
 800edd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	687a      	ldr	r2, [r7, #4]
 800edd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	1c5a      	adds	r2, r3, #1
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	601a      	str	r2, [r3, #0]
}
 800ede2:	bf00      	nop
 800ede4:	3714      	adds	r7, #20
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr

0800edee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800edee:	b480      	push	{r7}
 800edf0:	b085      	sub	sp, #20
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
 800edf6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee04:	d103      	bne.n	800ee0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	691b      	ldr	r3, [r3, #16]
 800ee0a:	60fb      	str	r3, [r7, #12]
 800ee0c:	e00c      	b.n	800ee28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	3308      	adds	r3, #8
 800ee12:	60fb      	str	r3, [r7, #12]
 800ee14:	e002      	b.n	800ee1c <vListInsert+0x2e>
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	60fb      	str	r3, [r7, #12]
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	68ba      	ldr	r2, [r7, #8]
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d2f6      	bcs.n	800ee16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	685a      	ldr	r2, [r3, #4]
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	683a      	ldr	r2, [r7, #0]
 800ee36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	68fa      	ldr	r2, [r7, #12]
 800ee3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	683a      	ldr	r2, [r7, #0]
 800ee42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	687a      	ldr	r2, [r7, #4]
 800ee48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	1c5a      	adds	r2, r3, #1
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	601a      	str	r2, [r3, #0]
}
 800ee54:	bf00      	nop
 800ee56:	3714      	adds	r7, #20
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr

0800ee60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ee60:	b480      	push	{r7}
 800ee62:	b085      	sub	sp, #20
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	691b      	ldr	r3, [r3, #16]
 800ee6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	687a      	ldr	r2, [r7, #4]
 800ee74:	6892      	ldr	r2, [r2, #8]
 800ee76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	689b      	ldr	r3, [r3, #8]
 800ee7c:	687a      	ldr	r2, [r7, #4]
 800ee7e:	6852      	ldr	r2, [r2, #4]
 800ee80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	685b      	ldr	r3, [r3, #4]
 800ee86:	687a      	ldr	r2, [r7, #4]
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d103      	bne.n	800ee94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	689a      	ldr	r2, [r3, #8]
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2200      	movs	r2, #0
 800ee98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	1e5a      	subs	r2, r3, #1
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	681b      	ldr	r3, [r3, #0]
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3714      	adds	r7, #20
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr

0800eeb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b084      	sub	sp, #16
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d10a      	bne.n	800eede <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800eec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eecc:	f383 8811 	msr	BASEPRI, r3
 800eed0:	f3bf 8f6f 	isb	sy
 800eed4:	f3bf 8f4f 	dsb	sy
 800eed8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800eeda:	bf00      	nop
 800eedc:	e7fe      	b.n	800eedc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800eede:	f002 fca9 	bl	8011834 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681a      	ldr	r2, [r3, #0]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eeea:	68f9      	ldr	r1, [r7, #12]
 800eeec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eeee:	fb01 f303 	mul.w	r3, r1, r3
 800eef2:	441a      	add	r2, r3
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	2200      	movs	r2, #0
 800eefc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	681a      	ldr	r2, [r3, #0]
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681a      	ldr	r2, [r3, #0]
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef0e:	3b01      	subs	r3, #1
 800ef10:	68f9      	ldr	r1, [r7, #12]
 800ef12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ef14:	fb01 f303 	mul.w	r3, r1, r3
 800ef18:	441a      	add	r2, r3
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	22ff      	movs	r2, #255	; 0xff
 800ef22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	22ff      	movs	r2, #255	; 0xff
 800ef2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d114      	bne.n	800ef5e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	691b      	ldr	r3, [r3, #16]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d01a      	beq.n	800ef72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	3310      	adds	r3, #16
 800ef40:	4618      	mov	r0, r3
 800ef42:	f001 fc5d 	bl	8010800 <xTaskRemoveFromEventList>
 800ef46:	4603      	mov	r3, r0
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d012      	beq.n	800ef72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ef4c:	4b0c      	ldr	r3, [pc, #48]	; (800ef80 <xQueueGenericReset+0xcc>)
 800ef4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef52:	601a      	str	r2, [r3, #0]
 800ef54:	f3bf 8f4f 	dsb	sy
 800ef58:	f3bf 8f6f 	isb	sy
 800ef5c:	e009      	b.n	800ef72 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	3310      	adds	r3, #16
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7ff fef2 	bl	800ed4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	3324      	adds	r3, #36	; 0x24
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f7ff feed 	bl	800ed4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ef72:	f002 fc8f 	bl	8011894 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ef76:	2301      	movs	r3, #1
}
 800ef78:	4618      	mov	r0, r3
 800ef7a:	3710      	adds	r7, #16
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}
 800ef80:	e000ed04 	.word	0xe000ed04

0800ef84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b08e      	sub	sp, #56	; 0x38
 800ef88:	af02      	add	r7, sp, #8
 800ef8a:	60f8      	str	r0, [r7, #12]
 800ef8c:	60b9      	str	r1, [r7, #8]
 800ef8e:	607a      	str	r2, [r7, #4]
 800ef90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d10a      	bne.n	800efae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ef98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef9c:	f383 8811 	msr	BASEPRI, r3
 800efa0:	f3bf 8f6f 	isb	sy
 800efa4:	f3bf 8f4f 	dsb	sy
 800efa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800efaa:	bf00      	nop
 800efac:	e7fe      	b.n	800efac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d10a      	bne.n	800efca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800efb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb8:	f383 8811 	msr	BASEPRI, r3
 800efbc:	f3bf 8f6f 	isb	sy
 800efc0:	f3bf 8f4f 	dsb	sy
 800efc4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800efc6:	bf00      	nop
 800efc8:	e7fe      	b.n	800efc8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d002      	beq.n	800efd6 <xQueueGenericCreateStatic+0x52>
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d001      	beq.n	800efda <xQueueGenericCreateStatic+0x56>
 800efd6:	2301      	movs	r3, #1
 800efd8:	e000      	b.n	800efdc <xQueueGenericCreateStatic+0x58>
 800efda:	2300      	movs	r3, #0
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d10a      	bne.n	800eff6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800efe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efe4:	f383 8811 	msr	BASEPRI, r3
 800efe8:	f3bf 8f6f 	isb	sy
 800efec:	f3bf 8f4f 	dsb	sy
 800eff0:	623b      	str	r3, [r7, #32]
}
 800eff2:	bf00      	nop
 800eff4:	e7fe      	b.n	800eff4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d102      	bne.n	800f002 <xQueueGenericCreateStatic+0x7e>
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d101      	bne.n	800f006 <xQueueGenericCreateStatic+0x82>
 800f002:	2301      	movs	r3, #1
 800f004:	e000      	b.n	800f008 <xQueueGenericCreateStatic+0x84>
 800f006:	2300      	movs	r3, #0
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d10a      	bne.n	800f022 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f010:	f383 8811 	msr	BASEPRI, r3
 800f014:	f3bf 8f6f 	isb	sy
 800f018:	f3bf 8f4f 	dsb	sy
 800f01c:	61fb      	str	r3, [r7, #28]
}
 800f01e:	bf00      	nop
 800f020:	e7fe      	b.n	800f020 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f022:	2350      	movs	r3, #80	; 0x50
 800f024:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	2b50      	cmp	r3, #80	; 0x50
 800f02a:	d00a      	beq.n	800f042 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f030:	f383 8811 	msr	BASEPRI, r3
 800f034:	f3bf 8f6f 	isb	sy
 800f038:	f3bf 8f4f 	dsb	sy
 800f03c:	61bb      	str	r3, [r7, #24]
}
 800f03e:	bf00      	nop
 800f040:	e7fe      	b.n	800f040 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f042:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d00d      	beq.n	800f06a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f050:	2201      	movs	r2, #1
 800f052:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f056:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05c:	9300      	str	r3, [sp, #0]
 800f05e:	4613      	mov	r3, r2
 800f060:	687a      	ldr	r2, [r7, #4]
 800f062:	68b9      	ldr	r1, [r7, #8]
 800f064:	68f8      	ldr	r0, [r7, #12]
 800f066:	f000 f83f 	bl	800f0e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f06c:	4618      	mov	r0, r3
 800f06e:	3730      	adds	r7, #48	; 0x30
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f074:	b580      	push	{r7, lr}
 800f076:	b08a      	sub	sp, #40	; 0x28
 800f078:	af02      	add	r7, sp, #8
 800f07a:	60f8      	str	r0, [r7, #12]
 800f07c:	60b9      	str	r1, [r7, #8]
 800f07e:	4613      	mov	r3, r2
 800f080:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d10a      	bne.n	800f09e <xQueueGenericCreate+0x2a>
	__asm volatile
 800f088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f08c:	f383 8811 	msr	BASEPRI, r3
 800f090:	f3bf 8f6f 	isb	sy
 800f094:	f3bf 8f4f 	dsb	sy
 800f098:	613b      	str	r3, [r7, #16]
}
 800f09a:	bf00      	nop
 800f09c:	e7fe      	b.n	800f09c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	68ba      	ldr	r2, [r7, #8]
 800f0a2:	fb02 f303 	mul.w	r3, r2, r3
 800f0a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f0a8:	69fb      	ldr	r3, [r7, #28]
 800f0aa:	3350      	adds	r3, #80	; 0x50
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f002 fce3 	bl	8011a78 <pvPortMalloc>
 800f0b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f0b4:	69bb      	ldr	r3, [r7, #24]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d011      	beq.n	800f0de <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f0ba:	69bb      	ldr	r3, [r7, #24]
 800f0bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	3350      	adds	r3, #80	; 0x50
 800f0c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f0c4:	69bb      	ldr	r3, [r7, #24]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f0cc:	79fa      	ldrb	r2, [r7, #7]
 800f0ce:	69bb      	ldr	r3, [r7, #24]
 800f0d0:	9300      	str	r3, [sp, #0]
 800f0d2:	4613      	mov	r3, r2
 800f0d4:	697a      	ldr	r2, [r7, #20]
 800f0d6:	68b9      	ldr	r1, [r7, #8]
 800f0d8:	68f8      	ldr	r0, [r7, #12]
 800f0da:	f000 f805 	bl	800f0e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f0de:	69bb      	ldr	r3, [r7, #24]
	}
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	3720      	adds	r7, #32
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	bd80      	pop	{r7, pc}

0800f0e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b084      	sub	sp, #16
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	60f8      	str	r0, [r7, #12]
 800f0f0:	60b9      	str	r1, [r7, #8]
 800f0f2:	607a      	str	r2, [r7, #4]
 800f0f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d103      	bne.n	800f104 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f0fc:	69bb      	ldr	r3, [r7, #24]
 800f0fe:	69ba      	ldr	r2, [r7, #24]
 800f100:	601a      	str	r2, [r3, #0]
 800f102:	e002      	b.n	800f10a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f104:	69bb      	ldr	r3, [r7, #24]
 800f106:	687a      	ldr	r2, [r7, #4]
 800f108:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f10a:	69bb      	ldr	r3, [r7, #24]
 800f10c:	68fa      	ldr	r2, [r7, #12]
 800f10e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f110:	69bb      	ldr	r3, [r7, #24]
 800f112:	68ba      	ldr	r2, [r7, #8]
 800f114:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f116:	2101      	movs	r1, #1
 800f118:	69b8      	ldr	r0, [r7, #24]
 800f11a:	f7ff fecb 	bl	800eeb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f11e:	69bb      	ldr	r3, [r7, #24]
 800f120:	78fa      	ldrb	r2, [r7, #3]
 800f122:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f126:	bf00      	nop
 800f128:	3710      	adds	r7, #16
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}

0800f12e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f12e:	b580      	push	{r7, lr}
 800f130:	b08a      	sub	sp, #40	; 0x28
 800f132:	af02      	add	r7, sp, #8
 800f134:	60f8      	str	r0, [r7, #12]
 800f136:	60b9      	str	r1, [r7, #8]
 800f138:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d10a      	bne.n	800f156 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800f140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f144:	f383 8811 	msr	BASEPRI, r3
 800f148:	f3bf 8f6f 	isb	sy
 800f14c:	f3bf 8f4f 	dsb	sy
 800f150:	61bb      	str	r3, [r7, #24]
}
 800f152:	bf00      	nop
 800f154:	e7fe      	b.n	800f154 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f156:	68ba      	ldr	r2, [r7, #8]
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d90a      	bls.n	800f174 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800f15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f162:	f383 8811 	msr	BASEPRI, r3
 800f166:	f3bf 8f6f 	isb	sy
 800f16a:	f3bf 8f4f 	dsb	sy
 800f16e:	617b      	str	r3, [r7, #20]
}
 800f170:	bf00      	nop
 800f172:	e7fe      	b.n	800f172 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f174:	2302      	movs	r3, #2
 800f176:	9300      	str	r3, [sp, #0]
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2200      	movs	r2, #0
 800f17c:	2100      	movs	r1, #0
 800f17e:	68f8      	ldr	r0, [r7, #12]
 800f180:	f7ff ff00 	bl	800ef84 <xQueueGenericCreateStatic>
 800f184:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f186:	69fb      	ldr	r3, [r7, #28]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d002      	beq.n	800f192 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f18c:	69fb      	ldr	r3, [r7, #28]
 800f18e:	68ba      	ldr	r2, [r7, #8]
 800f190:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f192:	69fb      	ldr	r3, [r7, #28]
	}
 800f194:	4618      	mov	r0, r3
 800f196:	3720      	adds	r7, #32
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}

0800f19c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b086      	sub	sp, #24
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
 800f1a4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d10a      	bne.n	800f1c2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800f1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b0:	f383 8811 	msr	BASEPRI, r3
 800f1b4:	f3bf 8f6f 	isb	sy
 800f1b8:	f3bf 8f4f 	dsb	sy
 800f1bc:	613b      	str	r3, [r7, #16]
}
 800f1be:	bf00      	nop
 800f1c0:	e7fe      	b.n	800f1c0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f1c2:	683a      	ldr	r2, [r7, #0]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d90a      	bls.n	800f1e0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800f1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ce:	f383 8811 	msr	BASEPRI, r3
 800f1d2:	f3bf 8f6f 	isb	sy
 800f1d6:	f3bf 8f4f 	dsb	sy
 800f1da:	60fb      	str	r3, [r7, #12]
}
 800f1dc:	bf00      	nop
 800f1de:	e7fe      	b.n	800f1de <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f1e0:	2202      	movs	r2, #2
 800f1e2:	2100      	movs	r1, #0
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f7ff ff45 	bl	800f074 <xQueueGenericCreate>
 800f1ea:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d002      	beq.n	800f1f8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	683a      	ldr	r2, [r7, #0]
 800f1f6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f1f8:	697b      	ldr	r3, [r7, #20]
	}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3718      	adds	r7, #24
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
	...

0800f204 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b08e      	sub	sp, #56	; 0x38
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	60b9      	str	r1, [r7, #8]
 800f20e:	607a      	str	r2, [r7, #4]
 800f210:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f212:	2300      	movs	r3, #0
 800f214:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d10a      	bne.n	800f236 <xQueueGenericSend+0x32>
	__asm volatile
 800f220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f224:	f383 8811 	msr	BASEPRI, r3
 800f228:	f3bf 8f6f 	isb	sy
 800f22c:	f3bf 8f4f 	dsb	sy
 800f230:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f232:	bf00      	nop
 800f234:	e7fe      	b.n	800f234 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d103      	bne.n	800f244 <xQueueGenericSend+0x40>
 800f23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f240:	2b00      	cmp	r3, #0
 800f242:	d101      	bne.n	800f248 <xQueueGenericSend+0x44>
 800f244:	2301      	movs	r3, #1
 800f246:	e000      	b.n	800f24a <xQueueGenericSend+0x46>
 800f248:	2300      	movs	r3, #0
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d10a      	bne.n	800f264 <xQueueGenericSend+0x60>
	__asm volatile
 800f24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f252:	f383 8811 	msr	BASEPRI, r3
 800f256:	f3bf 8f6f 	isb	sy
 800f25a:	f3bf 8f4f 	dsb	sy
 800f25e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f260:	bf00      	nop
 800f262:	e7fe      	b.n	800f262 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	2b02      	cmp	r3, #2
 800f268:	d103      	bne.n	800f272 <xQueueGenericSend+0x6e>
 800f26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f26c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f26e:	2b01      	cmp	r3, #1
 800f270:	d101      	bne.n	800f276 <xQueueGenericSend+0x72>
 800f272:	2301      	movs	r3, #1
 800f274:	e000      	b.n	800f278 <xQueueGenericSend+0x74>
 800f276:	2300      	movs	r3, #0
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d10a      	bne.n	800f292 <xQueueGenericSend+0x8e>
	__asm volatile
 800f27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f280:	f383 8811 	msr	BASEPRI, r3
 800f284:	f3bf 8f6f 	isb	sy
 800f288:	f3bf 8f4f 	dsb	sy
 800f28c:	623b      	str	r3, [r7, #32]
}
 800f28e:	bf00      	nop
 800f290:	e7fe      	b.n	800f290 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f292:	f001 fc77 	bl	8010b84 <xTaskGetSchedulerState>
 800f296:	4603      	mov	r3, r0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d102      	bne.n	800f2a2 <xQueueGenericSend+0x9e>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d101      	bne.n	800f2a6 <xQueueGenericSend+0xa2>
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	e000      	b.n	800f2a8 <xQueueGenericSend+0xa4>
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d10a      	bne.n	800f2c2 <xQueueGenericSend+0xbe>
	__asm volatile
 800f2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2b0:	f383 8811 	msr	BASEPRI, r3
 800f2b4:	f3bf 8f6f 	isb	sy
 800f2b8:	f3bf 8f4f 	dsb	sy
 800f2bc:	61fb      	str	r3, [r7, #28]
}
 800f2be:	bf00      	nop
 800f2c0:	e7fe      	b.n	800f2c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f2c2:	f002 fab7 	bl	8011834 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	d302      	bcc.n	800f2d8 <xQueueGenericSend+0xd4>
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	2b02      	cmp	r3, #2
 800f2d6:	d129      	bne.n	800f32c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f2d8:	683a      	ldr	r2, [r7, #0]
 800f2da:	68b9      	ldr	r1, [r7, #8]
 800f2dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2de:	f000 fc5e 	bl	800fb9e <prvCopyDataToQueue>
 800f2e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d010      	beq.n	800f30e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ee:	3324      	adds	r3, #36	; 0x24
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f001 fa85 	bl	8010800 <xTaskRemoveFromEventList>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d013      	beq.n	800f324 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f2fc:	4b3f      	ldr	r3, [pc, #252]	; (800f3fc <xQueueGenericSend+0x1f8>)
 800f2fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f302:	601a      	str	r2, [r3, #0]
 800f304:	f3bf 8f4f 	dsb	sy
 800f308:	f3bf 8f6f 	isb	sy
 800f30c:	e00a      	b.n	800f324 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f310:	2b00      	cmp	r3, #0
 800f312:	d007      	beq.n	800f324 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f314:	4b39      	ldr	r3, [pc, #228]	; (800f3fc <xQueueGenericSend+0x1f8>)
 800f316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f31a:	601a      	str	r2, [r3, #0]
 800f31c:	f3bf 8f4f 	dsb	sy
 800f320:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f324:	f002 fab6 	bl	8011894 <vPortExitCritical>
				return pdPASS;
 800f328:	2301      	movs	r3, #1
 800f32a:	e063      	b.n	800f3f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d103      	bne.n	800f33a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f332:	f002 faaf 	bl	8011894 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f336:	2300      	movs	r3, #0
 800f338:	e05c      	b.n	800f3f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f33a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d106      	bne.n	800f34e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f340:	f107 0314 	add.w	r3, r7, #20
 800f344:	4618      	mov	r0, r3
 800f346:	f001 fabf 	bl	80108c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f34a:	2301      	movs	r3, #1
 800f34c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f34e:	f002 faa1 	bl	8011894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f352:	f001 f819 	bl	8010388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f356:	f002 fa6d 	bl	8011834 <vPortEnterCritical>
 800f35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f35c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f360:	b25b      	sxtb	r3, r3
 800f362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f366:	d103      	bne.n	800f370 <xQueueGenericSend+0x16c>
 800f368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f36a:	2200      	movs	r2, #0
 800f36c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f372:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f376:	b25b      	sxtb	r3, r3
 800f378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f37c:	d103      	bne.n	800f386 <xQueueGenericSend+0x182>
 800f37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f380:	2200      	movs	r2, #0
 800f382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f386:	f002 fa85 	bl	8011894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f38a:	1d3a      	adds	r2, r7, #4
 800f38c:	f107 0314 	add.w	r3, r7, #20
 800f390:	4611      	mov	r1, r2
 800f392:	4618      	mov	r0, r3
 800f394:	f001 faae 	bl	80108f4 <xTaskCheckForTimeOut>
 800f398:	4603      	mov	r3, r0
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d124      	bne.n	800f3e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f39e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3a0:	f000 fcf5 	bl	800fd8e <prvIsQueueFull>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d018      	beq.n	800f3dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ac:	3310      	adds	r3, #16
 800f3ae:	687a      	ldr	r2, [r7, #4]
 800f3b0:	4611      	mov	r1, r2
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f001 f9d4 	bl	8010760 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f3b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3ba:	f000 fc80 	bl	800fcbe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f3be:	f000 fff1 	bl	80103a4 <xTaskResumeAll>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	f47f af7c 	bne.w	800f2c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f3ca:	4b0c      	ldr	r3, [pc, #48]	; (800f3fc <xQueueGenericSend+0x1f8>)
 800f3cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3d0:	601a      	str	r2, [r3, #0]
 800f3d2:	f3bf 8f4f 	dsb	sy
 800f3d6:	f3bf 8f6f 	isb	sy
 800f3da:	e772      	b.n	800f2c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f3dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3de:	f000 fc6e 	bl	800fcbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f3e2:	f000 ffdf 	bl	80103a4 <xTaskResumeAll>
 800f3e6:	e76c      	b.n	800f2c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f3e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3ea:	f000 fc68 	bl	800fcbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f3ee:	f000 ffd9 	bl	80103a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f3f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3738      	adds	r7, #56	; 0x38
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}
 800f3fc:	e000ed04 	.word	0xe000ed04

0800f400 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b090      	sub	sp, #64	; 0x40
 800f404:	af00      	add	r7, sp, #0
 800f406:	60f8      	str	r0, [r7, #12]
 800f408:	60b9      	str	r1, [r7, #8]
 800f40a:	607a      	str	r2, [r7, #4]
 800f40c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f414:	2b00      	cmp	r3, #0
 800f416:	d10a      	bne.n	800f42e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f41c:	f383 8811 	msr	BASEPRI, r3
 800f420:	f3bf 8f6f 	isb	sy
 800f424:	f3bf 8f4f 	dsb	sy
 800f428:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f42a:	bf00      	nop
 800f42c:	e7fe      	b.n	800f42c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d103      	bne.n	800f43c <xQueueGenericSendFromISR+0x3c>
 800f434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d101      	bne.n	800f440 <xQueueGenericSendFromISR+0x40>
 800f43c:	2301      	movs	r3, #1
 800f43e:	e000      	b.n	800f442 <xQueueGenericSendFromISR+0x42>
 800f440:	2300      	movs	r3, #0
 800f442:	2b00      	cmp	r3, #0
 800f444:	d10a      	bne.n	800f45c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f44a:	f383 8811 	msr	BASEPRI, r3
 800f44e:	f3bf 8f6f 	isb	sy
 800f452:	f3bf 8f4f 	dsb	sy
 800f456:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f458:	bf00      	nop
 800f45a:	e7fe      	b.n	800f45a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	2b02      	cmp	r3, #2
 800f460:	d103      	bne.n	800f46a <xQueueGenericSendFromISR+0x6a>
 800f462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f466:	2b01      	cmp	r3, #1
 800f468:	d101      	bne.n	800f46e <xQueueGenericSendFromISR+0x6e>
 800f46a:	2301      	movs	r3, #1
 800f46c:	e000      	b.n	800f470 <xQueueGenericSendFromISR+0x70>
 800f46e:	2300      	movs	r3, #0
 800f470:	2b00      	cmp	r3, #0
 800f472:	d10a      	bne.n	800f48a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f478:	f383 8811 	msr	BASEPRI, r3
 800f47c:	f3bf 8f6f 	isb	sy
 800f480:	f3bf 8f4f 	dsb	sy
 800f484:	623b      	str	r3, [r7, #32]
}
 800f486:	bf00      	nop
 800f488:	e7fe      	b.n	800f488 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f48a:	f002 fab5 	bl	80119f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f48e:	f3ef 8211 	mrs	r2, BASEPRI
 800f492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f496:	f383 8811 	msr	BASEPRI, r3
 800f49a:	f3bf 8f6f 	isb	sy
 800f49e:	f3bf 8f4f 	dsb	sy
 800f4a2:	61fa      	str	r2, [r7, #28]
 800f4a4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f4a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f4a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d302      	bcc.n	800f4bc <xQueueGenericSendFromISR+0xbc>
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	2b02      	cmp	r3, #2
 800f4ba:	d12f      	bne.n	800f51c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f4cc:	683a      	ldr	r2, [r7, #0]
 800f4ce:	68b9      	ldr	r1, [r7, #8]
 800f4d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f4d2:	f000 fb64 	bl	800fb9e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f4d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4de:	d112      	bne.n	800f506 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d016      	beq.n	800f516 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ea:	3324      	adds	r3, #36	; 0x24
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f001 f987 	bl	8010800 <xTaskRemoveFromEventList>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d00e      	beq.n	800f516 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d00b      	beq.n	800f516 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2201      	movs	r2, #1
 800f502:	601a      	str	r2, [r3, #0]
 800f504:	e007      	b.n	800f516 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f506:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f50a:	3301      	adds	r3, #1
 800f50c:	b2db      	uxtb	r3, r3
 800f50e:	b25a      	sxtb	r2, r3
 800f510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f516:	2301      	movs	r3, #1
 800f518:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f51a:	e001      	b.n	800f520 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f51c:	2300      	movs	r3, #0
 800f51e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f522:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f52a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f52e:	4618      	mov	r0, r3
 800f530:	3740      	adds	r7, #64	; 0x40
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}

0800f536 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f536:	b580      	push	{r7, lr}
 800f538:	b08e      	sub	sp, #56	; 0x38
 800f53a:	af00      	add	r7, sp, #0
 800f53c:	6078      	str	r0, [r7, #4]
 800f53e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f546:	2b00      	cmp	r3, #0
 800f548:	d10a      	bne.n	800f560 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800f54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f54e:	f383 8811 	msr	BASEPRI, r3
 800f552:	f3bf 8f6f 	isb	sy
 800f556:	f3bf 8f4f 	dsb	sy
 800f55a:	623b      	str	r3, [r7, #32]
}
 800f55c:	bf00      	nop
 800f55e:	e7fe      	b.n	800f55e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f564:	2b00      	cmp	r3, #0
 800f566:	d00a      	beq.n	800f57e <xQueueGiveFromISR+0x48>
	__asm volatile
 800f568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f56c:	f383 8811 	msr	BASEPRI, r3
 800f570:	f3bf 8f6f 	isb	sy
 800f574:	f3bf 8f4f 	dsb	sy
 800f578:	61fb      	str	r3, [r7, #28]
}
 800f57a:	bf00      	nop
 800f57c:	e7fe      	b.n	800f57c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d103      	bne.n	800f58e <xQueueGiveFromISR+0x58>
 800f586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f588:	689b      	ldr	r3, [r3, #8]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d101      	bne.n	800f592 <xQueueGiveFromISR+0x5c>
 800f58e:	2301      	movs	r3, #1
 800f590:	e000      	b.n	800f594 <xQueueGiveFromISR+0x5e>
 800f592:	2300      	movs	r3, #0
 800f594:	2b00      	cmp	r3, #0
 800f596:	d10a      	bne.n	800f5ae <xQueueGiveFromISR+0x78>
	__asm volatile
 800f598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f59c:	f383 8811 	msr	BASEPRI, r3
 800f5a0:	f3bf 8f6f 	isb	sy
 800f5a4:	f3bf 8f4f 	dsb	sy
 800f5a8:	61bb      	str	r3, [r7, #24]
}
 800f5aa:	bf00      	nop
 800f5ac:	e7fe      	b.n	800f5ac <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f5ae:	f002 fa23 	bl	80119f8 <vPortValidateInterruptPriority>
	__asm volatile
 800f5b2:	f3ef 8211 	mrs	r2, BASEPRI
 800f5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ba:	f383 8811 	msr	BASEPRI, r3
 800f5be:	f3bf 8f6f 	isb	sy
 800f5c2:	f3bf 8f4f 	dsb	sy
 800f5c6:	617a      	str	r2, [r7, #20]
 800f5c8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f5ca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f5cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d22b      	bcs.n	800f636 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f5e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ea:	1c5a      	adds	r2, r3, #1
 800f5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f5f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5f8:	d112      	bne.n	800f620 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d016      	beq.n	800f630 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f604:	3324      	adds	r3, #36	; 0x24
 800f606:	4618      	mov	r0, r3
 800f608:	f001 f8fa 	bl	8010800 <xTaskRemoveFromEventList>
 800f60c:	4603      	mov	r3, r0
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d00e      	beq.n	800f630 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d00b      	beq.n	800f630 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	2201      	movs	r2, #1
 800f61c:	601a      	str	r2, [r3, #0]
 800f61e:	e007      	b.n	800f630 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f624:	3301      	adds	r3, #1
 800f626:	b2db      	uxtb	r3, r3
 800f628:	b25a      	sxtb	r2, r3
 800f62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f630:	2301      	movs	r3, #1
 800f632:	637b      	str	r3, [r7, #52]	; 0x34
 800f634:	e001      	b.n	800f63a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f636:	2300      	movs	r3, #0
 800f638:	637b      	str	r3, [r7, #52]	; 0x34
 800f63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f63c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	f383 8811 	msr	BASEPRI, r3
}
 800f644:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3738      	adds	r7, #56	; 0x38
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}

0800f650 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b08c      	sub	sp, #48	; 0x30
 800f654:	af00      	add	r7, sp, #0
 800f656:	60f8      	str	r0, [r7, #12]
 800f658:	60b9      	str	r1, [r7, #8]
 800f65a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f65c:	2300      	movs	r3, #0
 800f65e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f666:	2b00      	cmp	r3, #0
 800f668:	d10a      	bne.n	800f680 <xQueueReceive+0x30>
	__asm volatile
 800f66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f66e:	f383 8811 	msr	BASEPRI, r3
 800f672:	f3bf 8f6f 	isb	sy
 800f676:	f3bf 8f4f 	dsb	sy
 800f67a:	623b      	str	r3, [r7, #32]
}
 800f67c:	bf00      	nop
 800f67e:	e7fe      	b.n	800f67e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d103      	bne.n	800f68e <xQueueReceive+0x3e>
 800f686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d101      	bne.n	800f692 <xQueueReceive+0x42>
 800f68e:	2301      	movs	r3, #1
 800f690:	e000      	b.n	800f694 <xQueueReceive+0x44>
 800f692:	2300      	movs	r3, #0
 800f694:	2b00      	cmp	r3, #0
 800f696:	d10a      	bne.n	800f6ae <xQueueReceive+0x5e>
	__asm volatile
 800f698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f69c:	f383 8811 	msr	BASEPRI, r3
 800f6a0:	f3bf 8f6f 	isb	sy
 800f6a4:	f3bf 8f4f 	dsb	sy
 800f6a8:	61fb      	str	r3, [r7, #28]
}
 800f6aa:	bf00      	nop
 800f6ac:	e7fe      	b.n	800f6ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f6ae:	f001 fa69 	bl	8010b84 <xTaskGetSchedulerState>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d102      	bne.n	800f6be <xQueueReceive+0x6e>
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d101      	bne.n	800f6c2 <xQueueReceive+0x72>
 800f6be:	2301      	movs	r3, #1
 800f6c0:	e000      	b.n	800f6c4 <xQueueReceive+0x74>
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d10a      	bne.n	800f6de <xQueueReceive+0x8e>
	__asm volatile
 800f6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6cc:	f383 8811 	msr	BASEPRI, r3
 800f6d0:	f3bf 8f6f 	isb	sy
 800f6d4:	f3bf 8f4f 	dsb	sy
 800f6d8:	61bb      	str	r3, [r7, #24]
}
 800f6da:	bf00      	nop
 800f6dc:	e7fe      	b.n	800f6dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f6de:	f002 f8a9 	bl	8011834 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d01f      	beq.n	800f72e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f6ee:	68b9      	ldr	r1, [r7, #8]
 800f6f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6f2:	f000 fabe 	bl	800fc72 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f8:	1e5a      	subs	r2, r3, #1
 800f6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f700:	691b      	ldr	r3, [r3, #16]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00f      	beq.n	800f726 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f708:	3310      	adds	r3, #16
 800f70a:	4618      	mov	r0, r3
 800f70c:	f001 f878 	bl	8010800 <xTaskRemoveFromEventList>
 800f710:	4603      	mov	r3, r0
 800f712:	2b00      	cmp	r3, #0
 800f714:	d007      	beq.n	800f726 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f716:	4b3d      	ldr	r3, [pc, #244]	; (800f80c <xQueueReceive+0x1bc>)
 800f718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f71c:	601a      	str	r2, [r3, #0]
 800f71e:	f3bf 8f4f 	dsb	sy
 800f722:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f726:	f002 f8b5 	bl	8011894 <vPortExitCritical>
				return pdPASS;
 800f72a:	2301      	movs	r3, #1
 800f72c:	e069      	b.n	800f802 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d103      	bne.n	800f73c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f734:	f002 f8ae 	bl	8011894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f738:	2300      	movs	r3, #0
 800f73a:	e062      	b.n	800f802 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d106      	bne.n	800f750 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f742:	f107 0310 	add.w	r3, r7, #16
 800f746:	4618      	mov	r0, r3
 800f748:	f001 f8be 	bl	80108c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f74c:	2301      	movs	r3, #1
 800f74e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f750:	f002 f8a0 	bl	8011894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f754:	f000 fe18 	bl	8010388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f758:	f002 f86c 	bl	8011834 <vPortEnterCritical>
 800f75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f75e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f762:	b25b      	sxtb	r3, r3
 800f764:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f768:	d103      	bne.n	800f772 <xQueueReceive+0x122>
 800f76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f76c:	2200      	movs	r2, #0
 800f76e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f774:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f778:	b25b      	sxtb	r3, r3
 800f77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f77e:	d103      	bne.n	800f788 <xQueueReceive+0x138>
 800f780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f782:	2200      	movs	r2, #0
 800f784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f788:	f002 f884 	bl	8011894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f78c:	1d3a      	adds	r2, r7, #4
 800f78e:	f107 0310 	add.w	r3, r7, #16
 800f792:	4611      	mov	r1, r2
 800f794:	4618      	mov	r0, r3
 800f796:	f001 f8ad 	bl	80108f4 <xTaskCheckForTimeOut>
 800f79a:	4603      	mov	r3, r0
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d123      	bne.n	800f7e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f7a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7a2:	f000 fade 	bl	800fd62 <prvIsQueueEmpty>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d017      	beq.n	800f7dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ae:	3324      	adds	r3, #36	; 0x24
 800f7b0:	687a      	ldr	r2, [r7, #4]
 800f7b2:	4611      	mov	r1, r2
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f000 ffd3 	bl	8010760 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f7ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7bc:	f000 fa7f 	bl	800fcbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f7c0:	f000 fdf0 	bl	80103a4 <xTaskResumeAll>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d189      	bne.n	800f6de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f7ca:	4b10      	ldr	r3, [pc, #64]	; (800f80c <xQueueReceive+0x1bc>)
 800f7cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7d0:	601a      	str	r2, [r3, #0]
 800f7d2:	f3bf 8f4f 	dsb	sy
 800f7d6:	f3bf 8f6f 	isb	sy
 800f7da:	e780      	b.n	800f6de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f7dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7de:	f000 fa6e 	bl	800fcbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f7e2:	f000 fddf 	bl	80103a4 <xTaskResumeAll>
 800f7e6:	e77a      	b.n	800f6de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f7e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7ea:	f000 fa68 	bl	800fcbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f7ee:	f000 fdd9 	bl	80103a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f7f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7f4:	f000 fab5 	bl	800fd62 <prvIsQueueEmpty>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	f43f af6f 	beq.w	800f6de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f800:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f802:	4618      	mov	r0, r3
 800f804:	3730      	adds	r7, #48	; 0x30
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}
 800f80a:	bf00      	nop
 800f80c:	e000ed04 	.word	0xe000ed04

0800f810 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b08e      	sub	sp, #56	; 0x38
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f81a:	2300      	movs	r3, #0
 800f81c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f822:	2300      	movs	r3, #0
 800f824:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d10a      	bne.n	800f842 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f830:	f383 8811 	msr	BASEPRI, r3
 800f834:	f3bf 8f6f 	isb	sy
 800f838:	f3bf 8f4f 	dsb	sy
 800f83c:	623b      	str	r3, [r7, #32]
}
 800f83e:	bf00      	nop
 800f840:	e7fe      	b.n	800f840 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f846:	2b00      	cmp	r3, #0
 800f848:	d00a      	beq.n	800f860 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f84e:	f383 8811 	msr	BASEPRI, r3
 800f852:	f3bf 8f6f 	isb	sy
 800f856:	f3bf 8f4f 	dsb	sy
 800f85a:	61fb      	str	r3, [r7, #28]
}
 800f85c:	bf00      	nop
 800f85e:	e7fe      	b.n	800f85e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f860:	f001 f990 	bl	8010b84 <xTaskGetSchedulerState>
 800f864:	4603      	mov	r3, r0
 800f866:	2b00      	cmp	r3, #0
 800f868:	d102      	bne.n	800f870 <xQueueSemaphoreTake+0x60>
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d101      	bne.n	800f874 <xQueueSemaphoreTake+0x64>
 800f870:	2301      	movs	r3, #1
 800f872:	e000      	b.n	800f876 <xQueueSemaphoreTake+0x66>
 800f874:	2300      	movs	r3, #0
 800f876:	2b00      	cmp	r3, #0
 800f878:	d10a      	bne.n	800f890 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f87e:	f383 8811 	msr	BASEPRI, r3
 800f882:	f3bf 8f6f 	isb	sy
 800f886:	f3bf 8f4f 	dsb	sy
 800f88a:	61bb      	str	r3, [r7, #24]
}
 800f88c:	bf00      	nop
 800f88e:	e7fe      	b.n	800f88e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f890:	f001 ffd0 	bl	8011834 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f898:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d024      	beq.n	800f8ea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8a2:	1e5a      	subs	r2, r3, #1
 800f8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d104      	bne.n	800f8ba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f8b0:	f001 fade 	bl	8010e70 <pvTaskIncrementMutexHeldCount>
 800f8b4:	4602      	mov	r2, r0
 800f8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8bc:	691b      	ldr	r3, [r3, #16]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d00f      	beq.n	800f8e2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c4:	3310      	adds	r3, #16
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	f000 ff9a 	bl	8010800 <xTaskRemoveFromEventList>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d007      	beq.n	800f8e2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f8d2:	4b54      	ldr	r3, [pc, #336]	; (800fa24 <xQueueSemaphoreTake+0x214>)
 800f8d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8d8:	601a      	str	r2, [r3, #0]
 800f8da:	f3bf 8f4f 	dsb	sy
 800f8de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f8e2:	f001 ffd7 	bl	8011894 <vPortExitCritical>
				return pdPASS;
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	e097      	b.n	800fa1a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f8ea:	683b      	ldr	r3, [r7, #0]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d111      	bne.n	800f914 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d00a      	beq.n	800f90c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8fa:	f383 8811 	msr	BASEPRI, r3
 800f8fe:	f3bf 8f6f 	isb	sy
 800f902:	f3bf 8f4f 	dsb	sy
 800f906:	617b      	str	r3, [r7, #20]
}
 800f908:	bf00      	nop
 800f90a:	e7fe      	b.n	800f90a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f90c:	f001 ffc2 	bl	8011894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f910:	2300      	movs	r3, #0
 800f912:	e082      	b.n	800fa1a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f916:	2b00      	cmp	r3, #0
 800f918:	d106      	bne.n	800f928 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f91a:	f107 030c 	add.w	r3, r7, #12
 800f91e:	4618      	mov	r0, r3
 800f920:	f000 ffd2 	bl	80108c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f924:	2301      	movs	r3, #1
 800f926:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f928:	f001 ffb4 	bl	8011894 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f92c:	f000 fd2c 	bl	8010388 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f930:	f001 ff80 	bl	8011834 <vPortEnterCritical>
 800f934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f936:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f93a:	b25b      	sxtb	r3, r3
 800f93c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f940:	d103      	bne.n	800f94a <xQueueSemaphoreTake+0x13a>
 800f942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f944:	2200      	movs	r2, #0
 800f946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f94c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f950:	b25b      	sxtb	r3, r3
 800f952:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f956:	d103      	bne.n	800f960 <xQueueSemaphoreTake+0x150>
 800f958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f95a:	2200      	movs	r2, #0
 800f95c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f960:	f001 ff98 	bl	8011894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f964:	463a      	mov	r2, r7
 800f966:	f107 030c 	add.w	r3, r7, #12
 800f96a:	4611      	mov	r1, r2
 800f96c:	4618      	mov	r0, r3
 800f96e:	f000 ffc1 	bl	80108f4 <xTaskCheckForTimeOut>
 800f972:	4603      	mov	r3, r0
 800f974:	2b00      	cmp	r3, #0
 800f976:	d132      	bne.n	800f9de <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f978:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f97a:	f000 f9f2 	bl	800fd62 <prvIsQueueEmpty>
 800f97e:	4603      	mov	r3, r0
 800f980:	2b00      	cmp	r3, #0
 800f982:	d026      	beq.n	800f9d2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d109      	bne.n	800f9a0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f98c:	f001 ff52 	bl	8011834 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f992:	689b      	ldr	r3, [r3, #8]
 800f994:	4618      	mov	r0, r3
 800f996:	f001 f913 	bl	8010bc0 <xTaskPriorityInherit>
 800f99a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f99c:	f001 ff7a 	bl	8011894 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a2:	3324      	adds	r3, #36	; 0x24
 800f9a4:	683a      	ldr	r2, [r7, #0]
 800f9a6:	4611      	mov	r1, r2
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f000 fed9 	bl	8010760 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f9ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9b0:	f000 f985 	bl	800fcbe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f9b4:	f000 fcf6 	bl	80103a4 <xTaskResumeAll>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	f47f af68 	bne.w	800f890 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f9c0:	4b18      	ldr	r3, [pc, #96]	; (800fa24 <xQueueSemaphoreTake+0x214>)
 800f9c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9c6:	601a      	str	r2, [r3, #0]
 800f9c8:	f3bf 8f4f 	dsb	sy
 800f9cc:	f3bf 8f6f 	isb	sy
 800f9d0:	e75e      	b.n	800f890 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f9d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9d4:	f000 f973 	bl	800fcbe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f9d8:	f000 fce4 	bl	80103a4 <xTaskResumeAll>
 800f9dc:	e758      	b.n	800f890 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f9de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9e0:	f000 f96d 	bl	800fcbe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f9e4:	f000 fcde 	bl	80103a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f9e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9ea:	f000 f9ba 	bl	800fd62 <prvIsQueueEmpty>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	f43f af4d 	beq.w	800f890 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d00d      	beq.n	800fa18 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f9fc:	f001 ff1a 	bl	8011834 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fa00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa02:	f000 f8b4 	bl	800fb6e <prvGetDisinheritPriorityAfterTimeout>
 800fa06:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fa08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa0a:	689b      	ldr	r3, [r3, #8]
 800fa0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f001 f9ac 	bl	8010d6c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fa14:	f001 ff3e 	bl	8011894 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fa18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3738      	adds	r7, #56	; 0x38
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}
 800fa22:	bf00      	nop
 800fa24:	e000ed04 	.word	0xe000ed04

0800fa28 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b08e      	sub	sp, #56	; 0x38
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fa38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d10a      	bne.n	800fa54 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800fa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa42:	f383 8811 	msr	BASEPRI, r3
 800fa46:	f3bf 8f6f 	isb	sy
 800fa4a:	f3bf 8f4f 	dsb	sy
 800fa4e:	623b      	str	r3, [r7, #32]
}
 800fa50:	bf00      	nop
 800fa52:	e7fe      	b.n	800fa52 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d103      	bne.n	800fa62 <xQueueReceiveFromISR+0x3a>
 800fa5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d101      	bne.n	800fa66 <xQueueReceiveFromISR+0x3e>
 800fa62:	2301      	movs	r3, #1
 800fa64:	e000      	b.n	800fa68 <xQueueReceiveFromISR+0x40>
 800fa66:	2300      	movs	r3, #0
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d10a      	bne.n	800fa82 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800fa6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa70:	f383 8811 	msr	BASEPRI, r3
 800fa74:	f3bf 8f6f 	isb	sy
 800fa78:	f3bf 8f4f 	dsb	sy
 800fa7c:	61fb      	str	r3, [r7, #28]
}
 800fa7e:	bf00      	nop
 800fa80:	e7fe      	b.n	800fa80 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fa82:	f001 ffb9 	bl	80119f8 <vPortValidateInterruptPriority>
	__asm volatile
 800fa86:	f3ef 8211 	mrs	r2, BASEPRI
 800fa8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa8e:	f383 8811 	msr	BASEPRI, r3
 800fa92:	f3bf 8f6f 	isb	sy
 800fa96:	f3bf 8f4f 	dsb	sy
 800fa9a:	61ba      	str	r2, [r7, #24]
 800fa9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fa9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800faa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800faa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faa6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800faa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d02f      	beq.n	800fb0e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800faae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fab0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fab8:	68b9      	ldr	r1, [r7, #8]
 800faba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fabc:	f000 f8d9 	bl	800fc72 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac2:	1e5a      	subs	r2, r3, #1
 800fac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fac6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fac8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800facc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fad0:	d112      	bne.n	800faf8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad4:	691b      	ldr	r3, [r3, #16]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d016      	beq.n	800fb08 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fadc:	3310      	adds	r3, #16
 800fade:	4618      	mov	r0, r3
 800fae0:	f000 fe8e 	bl	8010800 <xTaskRemoveFromEventList>
 800fae4:	4603      	mov	r3, r0
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d00e      	beq.n	800fb08 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d00b      	beq.n	800fb08 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2201      	movs	r2, #1
 800faf4:	601a      	str	r2, [r3, #0]
 800faf6:	e007      	b.n	800fb08 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800faf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fafc:	3301      	adds	r3, #1
 800fafe:	b2db      	uxtb	r3, r3
 800fb00:	b25a      	sxtb	r2, r3
 800fb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800fb08:	2301      	movs	r3, #1
 800fb0a:	637b      	str	r3, [r7, #52]	; 0x34
 800fb0c:	e001      	b.n	800fb12 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	637b      	str	r3, [r7, #52]	; 0x34
 800fb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb14:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	f383 8811 	msr	BASEPRI, r3
}
 800fb1c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fb1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3738      	adds	r7, #56	; 0x38
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d10a      	bne.n	800fb50 <vQueueDelete+0x28>
	__asm volatile
 800fb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb3e:	f383 8811 	msr	BASEPRI, r3
 800fb42:	f3bf 8f6f 	isb	sy
 800fb46:	f3bf 8f4f 	dsb	sy
 800fb4a:	60bb      	str	r3, [r7, #8]
}
 800fb4c:	bf00      	nop
 800fb4e:	e7fe      	b.n	800fb4e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800fb50:	68f8      	ldr	r0, [r7, #12]
 800fb52:	f000 f95f 	bl	800fe14 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d102      	bne.n	800fb66 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800fb60:	68f8      	ldr	r0, [r7, #12]
 800fb62:	f002 f855 	bl	8011c10 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800fb66:	bf00      	nop
 800fb68:	3710      	adds	r7, #16
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}

0800fb6e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fb6e:	b480      	push	{r7}
 800fb70:	b085      	sub	sp, #20
 800fb72:	af00      	add	r7, sp, #0
 800fb74:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d006      	beq.n	800fb8c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800fb88:	60fb      	str	r3, [r7, #12]
 800fb8a:	e001      	b.n	800fb90 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fb90:	68fb      	ldr	r3, [r7, #12]
	}
 800fb92:	4618      	mov	r0, r3
 800fb94:	3714      	adds	r7, #20
 800fb96:	46bd      	mov	sp, r7
 800fb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9c:	4770      	bx	lr

0800fb9e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fb9e:	b580      	push	{r7, lr}
 800fba0:	b086      	sub	sp, #24
 800fba2:	af00      	add	r7, sp, #0
 800fba4:	60f8      	str	r0, [r7, #12]
 800fba6:	60b9      	str	r1, [r7, #8]
 800fba8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbb2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d10d      	bne.n	800fbd8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d14d      	bne.n	800fc60 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	689b      	ldr	r3, [r3, #8]
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f001 f861 	bl	8010c90 <xTaskPriorityDisinherit>
 800fbce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	609a      	str	r2, [r3, #8]
 800fbd6:	e043      	b.n	800fc60 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d119      	bne.n	800fc12 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	6858      	ldr	r0, [r3, #4]
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbe6:	461a      	mov	r2, r3
 800fbe8:	68b9      	ldr	r1, [r7, #8]
 800fbea:	f019 ff8b 	bl	8029b04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	685a      	ldr	r2, [r3, #4]
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbf6:	441a      	add	r2, r3
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	685a      	ldr	r2, [r3, #4]
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	689b      	ldr	r3, [r3, #8]
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d32b      	bcc.n	800fc60 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	681a      	ldr	r2, [r3, #0]
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	605a      	str	r2, [r3, #4]
 800fc10:	e026      	b.n	800fc60 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	68d8      	ldr	r0, [r3, #12]
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	68b9      	ldr	r1, [r7, #8]
 800fc1e:	f019 ff71 	bl	8029b04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	68da      	ldr	r2, [r3, #12]
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc2a:	425b      	negs	r3, r3
 800fc2c:	441a      	add	r2, r3
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	68da      	ldr	r2, [r3, #12]
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d207      	bcs.n	800fc4e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	689a      	ldr	r2, [r3, #8]
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc46:	425b      	negs	r3, r3
 800fc48:	441a      	add	r2, r3
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2b02      	cmp	r3, #2
 800fc52:	d105      	bne.n	800fc60 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fc54:	693b      	ldr	r3, [r7, #16]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d002      	beq.n	800fc60 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	3b01      	subs	r3, #1
 800fc5e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fc60:	693b      	ldr	r3, [r7, #16]
 800fc62:	1c5a      	adds	r2, r3, #1
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fc68:	697b      	ldr	r3, [r7, #20]
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	3718      	adds	r7, #24
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}

0800fc72 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fc72:	b580      	push	{r7, lr}
 800fc74:	b082      	sub	sp, #8
 800fc76:	af00      	add	r7, sp, #0
 800fc78:	6078      	str	r0, [r7, #4]
 800fc7a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d018      	beq.n	800fcb6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	68da      	ldr	r2, [r3, #12]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc8c:	441a      	add	r2, r3
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	68da      	ldr	r2, [r3, #12]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	689b      	ldr	r3, [r3, #8]
 800fc9a:	429a      	cmp	r2, r3
 800fc9c:	d303      	bcc.n	800fca6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681a      	ldr	r2, [r3, #0]
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	68d9      	ldr	r1, [r3, #12]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcae:	461a      	mov	r2, r3
 800fcb0:	6838      	ldr	r0, [r7, #0]
 800fcb2:	f019 ff27 	bl	8029b04 <memcpy>
	}
}
 800fcb6:	bf00      	nop
 800fcb8:	3708      	adds	r7, #8
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}

0800fcbe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fcbe:	b580      	push	{r7, lr}
 800fcc0:	b084      	sub	sp, #16
 800fcc2:	af00      	add	r7, sp, #0
 800fcc4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fcc6:	f001 fdb5 	bl	8011834 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fcd0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fcd2:	e011      	b.n	800fcf8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d012      	beq.n	800fd02 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	3324      	adds	r3, #36	; 0x24
 800fce0:	4618      	mov	r0, r3
 800fce2:	f000 fd8d 	bl	8010800 <xTaskRemoveFromEventList>
 800fce6:	4603      	mov	r3, r0
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d001      	beq.n	800fcf0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fcec:	f000 fe64 	bl	80109b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fcf0:	7bfb      	ldrb	r3, [r7, #15]
 800fcf2:	3b01      	subs	r3, #1
 800fcf4:	b2db      	uxtb	r3, r3
 800fcf6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fcf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	dce9      	bgt.n	800fcd4 <prvUnlockQueue+0x16>
 800fd00:	e000      	b.n	800fd04 <prvUnlockQueue+0x46>
					break;
 800fd02:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	22ff      	movs	r2, #255	; 0xff
 800fd08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fd0c:	f001 fdc2 	bl	8011894 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fd10:	f001 fd90 	bl	8011834 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd1a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fd1c:	e011      	b.n	800fd42 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	691b      	ldr	r3, [r3, #16]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d012      	beq.n	800fd4c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	3310      	adds	r3, #16
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f000 fd68 	bl	8010800 <xTaskRemoveFromEventList>
 800fd30:	4603      	mov	r3, r0
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d001      	beq.n	800fd3a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fd36:	f000 fe3f 	bl	80109b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fd3a:	7bbb      	ldrb	r3, [r7, #14]
 800fd3c:	3b01      	subs	r3, #1
 800fd3e:	b2db      	uxtb	r3, r3
 800fd40:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fd42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	dce9      	bgt.n	800fd1e <prvUnlockQueue+0x60>
 800fd4a:	e000      	b.n	800fd4e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fd4c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	22ff      	movs	r2, #255	; 0xff
 800fd52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fd56:	f001 fd9d 	bl	8011894 <vPortExitCritical>
}
 800fd5a:	bf00      	nop
 800fd5c:	3710      	adds	r7, #16
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}

0800fd62 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fd62:	b580      	push	{r7, lr}
 800fd64:	b084      	sub	sp, #16
 800fd66:	af00      	add	r7, sp, #0
 800fd68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fd6a:	f001 fd63 	bl	8011834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d102      	bne.n	800fd7c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fd76:	2301      	movs	r3, #1
 800fd78:	60fb      	str	r3, [r7, #12]
 800fd7a:	e001      	b.n	800fd80 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fd80:	f001 fd88 	bl	8011894 <vPortExitCritical>

	return xReturn;
 800fd84:	68fb      	ldr	r3, [r7, #12]
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3710      	adds	r7, #16
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}

0800fd8e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fd8e:	b580      	push	{r7, lr}
 800fd90:	b084      	sub	sp, #16
 800fd92:	af00      	add	r7, sp, #0
 800fd94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fd96:	f001 fd4d 	bl	8011834 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d102      	bne.n	800fdac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fda6:	2301      	movs	r3, #1
 800fda8:	60fb      	str	r3, [r7, #12]
 800fdaa:	e001      	b.n	800fdb0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fdac:	2300      	movs	r3, #0
 800fdae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fdb0:	f001 fd70 	bl	8011894 <vPortExitCritical>

	return xReturn;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3710      	adds	r7, #16
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
	...

0800fdc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fdc0:	b480      	push	{r7}
 800fdc2:	b085      	sub	sp, #20
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
 800fdc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fdca:	2300      	movs	r3, #0
 800fdcc:	60fb      	str	r3, [r7, #12]
 800fdce:	e014      	b.n	800fdfa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fdd0:	4a0f      	ldr	r2, [pc, #60]	; (800fe10 <vQueueAddToRegistry+0x50>)
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d10b      	bne.n	800fdf4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fddc:	490c      	ldr	r1, [pc, #48]	; (800fe10 <vQueueAddToRegistry+0x50>)
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	683a      	ldr	r2, [r7, #0]
 800fde2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fde6:	4a0a      	ldr	r2, [pc, #40]	; (800fe10 <vQueueAddToRegistry+0x50>)
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	00db      	lsls	r3, r3, #3
 800fdec:	4413      	add	r3, r2
 800fdee:	687a      	ldr	r2, [r7, #4]
 800fdf0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fdf2:	e006      	b.n	800fe02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	3301      	adds	r3, #1
 800fdf8:	60fb      	str	r3, [r7, #12]
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	2b07      	cmp	r3, #7
 800fdfe:	d9e7      	bls.n	800fdd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fe00:	bf00      	nop
 800fe02:	bf00      	nop
 800fe04:	3714      	adds	r7, #20
 800fe06:	46bd      	mov	sp, r7
 800fe08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0c:	4770      	bx	lr
 800fe0e:	bf00      	nop
 800fe10:	2000acb8 	.word	0x2000acb8

0800fe14 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800fe14:	b480      	push	{r7}
 800fe16:	b085      	sub	sp, #20
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	60fb      	str	r3, [r7, #12]
 800fe20:	e016      	b.n	800fe50 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800fe22:	4a10      	ldr	r2, [pc, #64]	; (800fe64 <vQueueUnregisterQueue+0x50>)
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	00db      	lsls	r3, r3, #3
 800fe28:	4413      	add	r3, r2
 800fe2a:	685b      	ldr	r3, [r3, #4]
 800fe2c:	687a      	ldr	r2, [r7, #4]
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	d10b      	bne.n	800fe4a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800fe32:	4a0c      	ldr	r2, [pc, #48]	; (800fe64 <vQueueUnregisterQueue+0x50>)
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	2100      	movs	r1, #0
 800fe38:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800fe3c:	4a09      	ldr	r2, [pc, #36]	; (800fe64 <vQueueUnregisterQueue+0x50>)
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	00db      	lsls	r3, r3, #3
 800fe42:	4413      	add	r3, r2
 800fe44:	2200      	movs	r2, #0
 800fe46:	605a      	str	r2, [r3, #4]
				break;
 800fe48:	e006      	b.n	800fe58 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	60fb      	str	r3, [r7, #12]
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	2b07      	cmp	r3, #7
 800fe54:	d9e5      	bls.n	800fe22 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800fe56:	bf00      	nop
 800fe58:	bf00      	nop
 800fe5a:	3714      	adds	r7, #20
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe62:	4770      	bx	lr
 800fe64:	2000acb8 	.word	0x2000acb8

0800fe68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b086      	sub	sp, #24
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	60f8      	str	r0, [r7, #12]
 800fe70:	60b9      	str	r1, [r7, #8]
 800fe72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fe78:	f001 fcdc 	bl	8011834 <vPortEnterCritical>
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fe82:	b25b      	sxtb	r3, r3
 800fe84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe88:	d103      	bne.n	800fe92 <vQueueWaitForMessageRestricted+0x2a>
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe98:	b25b      	sxtb	r3, r3
 800fe9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe9e:	d103      	bne.n	800fea8 <vQueueWaitForMessageRestricted+0x40>
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	2200      	movs	r2, #0
 800fea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fea8:	f001 fcf4 	bl	8011894 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800feac:	697b      	ldr	r3, [r7, #20]
 800feae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d106      	bne.n	800fec2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	3324      	adds	r3, #36	; 0x24
 800feb8:	687a      	ldr	r2, [r7, #4]
 800feba:	68b9      	ldr	r1, [r7, #8]
 800febc:	4618      	mov	r0, r3
 800febe:	f000 fc73 	bl	80107a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fec2:	6978      	ldr	r0, [r7, #20]
 800fec4:	f7ff fefb 	bl	800fcbe <prvUnlockQueue>
	}
 800fec8:	bf00      	nop
 800feca:	3718      	adds	r7, #24
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}

0800fed0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b08e      	sub	sp, #56	; 0x38
 800fed4:	af04      	add	r7, sp, #16
 800fed6:	60f8      	str	r0, [r7, #12]
 800fed8:	60b9      	str	r1, [r7, #8]
 800feda:	607a      	str	r2, [r7, #4]
 800fedc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d10a      	bne.n	800fefa <xTaskCreateStatic+0x2a>
	__asm volatile
 800fee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fee8:	f383 8811 	msr	BASEPRI, r3
 800feec:	f3bf 8f6f 	isb	sy
 800fef0:	f3bf 8f4f 	dsb	sy
 800fef4:	623b      	str	r3, [r7, #32]
}
 800fef6:	bf00      	nop
 800fef8:	e7fe      	b.n	800fef8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d10a      	bne.n	800ff16 <xTaskCreateStatic+0x46>
	__asm volatile
 800ff00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff04:	f383 8811 	msr	BASEPRI, r3
 800ff08:	f3bf 8f6f 	isb	sy
 800ff0c:	f3bf 8f4f 	dsb	sy
 800ff10:	61fb      	str	r3, [r7, #28]
}
 800ff12:	bf00      	nop
 800ff14:	e7fe      	b.n	800ff14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ff16:	23bc      	movs	r3, #188	; 0xbc
 800ff18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ff1a:	693b      	ldr	r3, [r7, #16]
 800ff1c:	2bbc      	cmp	r3, #188	; 0xbc
 800ff1e:	d00a      	beq.n	800ff36 <xTaskCreateStatic+0x66>
	__asm volatile
 800ff20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff24:	f383 8811 	msr	BASEPRI, r3
 800ff28:	f3bf 8f6f 	isb	sy
 800ff2c:	f3bf 8f4f 	dsb	sy
 800ff30:	61bb      	str	r3, [r7, #24]
}
 800ff32:	bf00      	nop
 800ff34:	e7fe      	b.n	800ff34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ff36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ff38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d01e      	beq.n	800ff7c <xTaskCreateStatic+0xac>
 800ff3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d01b      	beq.n	800ff7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ff44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ff48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ff4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff50:	2202      	movs	r2, #2
 800ff52:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ff56:	2300      	movs	r3, #0
 800ff58:	9303      	str	r3, [sp, #12]
 800ff5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff5c:	9302      	str	r3, [sp, #8]
 800ff5e:	f107 0314 	add.w	r3, r7, #20
 800ff62:	9301      	str	r3, [sp, #4]
 800ff64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff66:	9300      	str	r3, [sp, #0]
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	687a      	ldr	r2, [r7, #4]
 800ff6c:	68b9      	ldr	r1, [r7, #8]
 800ff6e:	68f8      	ldr	r0, [r7, #12]
 800ff70:	f000 f850 	bl	8010014 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ff74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff76:	f000 f8f3 	bl	8010160 <prvAddNewTaskToReadyList>
 800ff7a:	e001      	b.n	800ff80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ff80:	697b      	ldr	r3, [r7, #20]
	}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3728      	adds	r7, #40	; 0x28
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}

0800ff8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ff8a:	b580      	push	{r7, lr}
 800ff8c:	b08c      	sub	sp, #48	; 0x30
 800ff8e:	af04      	add	r7, sp, #16
 800ff90:	60f8      	str	r0, [r7, #12]
 800ff92:	60b9      	str	r1, [r7, #8]
 800ff94:	603b      	str	r3, [r7, #0]
 800ff96:	4613      	mov	r3, r2
 800ff98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ff9a:	88fb      	ldrh	r3, [r7, #6]
 800ff9c:	009b      	lsls	r3, r3, #2
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f001 fd6a 	bl	8011a78 <pvPortMalloc>
 800ffa4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d00e      	beq.n	800ffca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ffac:	20bc      	movs	r0, #188	; 0xbc
 800ffae:	f001 fd63 	bl	8011a78 <pvPortMalloc>
 800ffb2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ffb4:	69fb      	ldr	r3, [r7, #28]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d003      	beq.n	800ffc2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ffba:	69fb      	ldr	r3, [r7, #28]
 800ffbc:	697a      	ldr	r2, [r7, #20]
 800ffbe:	631a      	str	r2, [r3, #48]	; 0x30
 800ffc0:	e005      	b.n	800ffce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ffc2:	6978      	ldr	r0, [r7, #20]
 800ffc4:	f001 fe24 	bl	8011c10 <vPortFree>
 800ffc8:	e001      	b.n	800ffce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ffce:	69fb      	ldr	r3, [r7, #28]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d017      	beq.n	8010004 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ffdc:	88fa      	ldrh	r2, [r7, #6]
 800ffde:	2300      	movs	r3, #0
 800ffe0:	9303      	str	r3, [sp, #12]
 800ffe2:	69fb      	ldr	r3, [r7, #28]
 800ffe4:	9302      	str	r3, [sp, #8]
 800ffe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe8:	9301      	str	r3, [sp, #4]
 800ffea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffec:	9300      	str	r3, [sp, #0]
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	68b9      	ldr	r1, [r7, #8]
 800fff2:	68f8      	ldr	r0, [r7, #12]
 800fff4:	f000 f80e 	bl	8010014 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fff8:	69f8      	ldr	r0, [r7, #28]
 800fffa:	f000 f8b1 	bl	8010160 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fffe:	2301      	movs	r3, #1
 8010000:	61bb      	str	r3, [r7, #24]
 8010002:	e002      	b.n	801000a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010004:	f04f 33ff 	mov.w	r3, #4294967295
 8010008:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801000a:	69bb      	ldr	r3, [r7, #24]
	}
 801000c:	4618      	mov	r0, r3
 801000e:	3720      	adds	r7, #32
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}

08010014 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b088      	sub	sp, #32
 8010018:	af00      	add	r7, sp, #0
 801001a:	60f8      	str	r0, [r7, #12]
 801001c:	60b9      	str	r1, [r7, #8]
 801001e:	607a      	str	r2, [r7, #4]
 8010020:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010024:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	009b      	lsls	r3, r3, #2
 801002a:	461a      	mov	r2, r3
 801002c:	21a5      	movs	r1, #165	; 0xa5
 801002e:	f019 fd77 	bl	8029b20 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801003c:	3b01      	subs	r3, #1
 801003e:	009b      	lsls	r3, r3, #2
 8010040:	4413      	add	r3, r2
 8010042:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010044:	69bb      	ldr	r3, [r7, #24]
 8010046:	f023 0307 	bic.w	r3, r3, #7
 801004a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801004c:	69bb      	ldr	r3, [r7, #24]
 801004e:	f003 0307 	and.w	r3, r3, #7
 8010052:	2b00      	cmp	r3, #0
 8010054:	d00a      	beq.n	801006c <prvInitialiseNewTask+0x58>
	__asm volatile
 8010056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005a:	f383 8811 	msr	BASEPRI, r3
 801005e:	f3bf 8f6f 	isb	sy
 8010062:	f3bf 8f4f 	dsb	sy
 8010066:	617b      	str	r3, [r7, #20]
}
 8010068:	bf00      	nop
 801006a:	e7fe      	b.n	801006a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d01f      	beq.n	80100b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010072:	2300      	movs	r3, #0
 8010074:	61fb      	str	r3, [r7, #28]
 8010076:	e012      	b.n	801009e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010078:	68ba      	ldr	r2, [r7, #8]
 801007a:	69fb      	ldr	r3, [r7, #28]
 801007c:	4413      	add	r3, r2
 801007e:	7819      	ldrb	r1, [r3, #0]
 8010080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010082:	69fb      	ldr	r3, [r7, #28]
 8010084:	4413      	add	r3, r2
 8010086:	3334      	adds	r3, #52	; 0x34
 8010088:	460a      	mov	r2, r1
 801008a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801008c:	68ba      	ldr	r2, [r7, #8]
 801008e:	69fb      	ldr	r3, [r7, #28]
 8010090:	4413      	add	r3, r2
 8010092:	781b      	ldrb	r3, [r3, #0]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d006      	beq.n	80100a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010098:	69fb      	ldr	r3, [r7, #28]
 801009a:	3301      	adds	r3, #1
 801009c:	61fb      	str	r3, [r7, #28]
 801009e:	69fb      	ldr	r3, [r7, #28]
 80100a0:	2b0f      	cmp	r3, #15
 80100a2:	d9e9      	bls.n	8010078 <prvInitialiseNewTask+0x64>
 80100a4:	e000      	b.n	80100a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80100a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80100a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100aa:	2200      	movs	r2, #0
 80100ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80100b0:	e003      	b.n	80100ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80100b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b4:	2200      	movs	r2, #0
 80100b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80100ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100bc:	2b37      	cmp	r3, #55	; 0x37
 80100be:	d901      	bls.n	80100c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80100c0:	2337      	movs	r3, #55	; 0x37
 80100c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80100c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80100ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80100d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d2:	2200      	movs	r2, #0
 80100d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80100d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d8:	3304      	adds	r3, #4
 80100da:	4618      	mov	r0, r3
 80100dc:	f7fe fe56 	bl	800ed8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80100e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100e2:	3318      	adds	r3, #24
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7fe fe51 	bl	800ed8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80100ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80100f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80100fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010102:	2200      	movs	r2, #0
 8010104:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801010a:	2200      	movs	r2, #0
 801010c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010112:	3354      	adds	r3, #84	; 0x54
 8010114:	2260      	movs	r2, #96	; 0x60
 8010116:	2100      	movs	r1, #0
 8010118:	4618      	mov	r0, r3
 801011a:	f019 fd01 	bl	8029b20 <memset>
 801011e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010120:	4a0c      	ldr	r2, [pc, #48]	; (8010154 <prvInitialiseNewTask+0x140>)
 8010122:	659a      	str	r2, [r3, #88]	; 0x58
 8010124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010126:	4a0c      	ldr	r2, [pc, #48]	; (8010158 <prvInitialiseNewTask+0x144>)
 8010128:	65da      	str	r2, [r3, #92]	; 0x5c
 801012a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801012c:	4a0b      	ldr	r2, [pc, #44]	; (801015c <prvInitialiseNewTask+0x148>)
 801012e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010130:	683a      	ldr	r2, [r7, #0]
 8010132:	68f9      	ldr	r1, [r7, #12]
 8010134:	69b8      	ldr	r0, [r7, #24]
 8010136:	f001 fa51 	bl	80115dc <pxPortInitialiseStack>
 801013a:	4602      	mov	r2, r0
 801013c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010142:	2b00      	cmp	r3, #0
 8010144:	d002      	beq.n	801014c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801014a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801014c:	bf00      	nop
 801014e:	3720      	adds	r7, #32
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}
 8010154:	0802cfa0 	.word	0x0802cfa0
 8010158:	0802cfc0 	.word	0x0802cfc0
 801015c:	0802cf80 	.word	0x0802cf80

08010160 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010168:	f001 fb64 	bl	8011834 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801016c:	4b2d      	ldr	r3, [pc, #180]	; (8010224 <prvAddNewTaskToReadyList+0xc4>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	3301      	adds	r3, #1
 8010172:	4a2c      	ldr	r2, [pc, #176]	; (8010224 <prvAddNewTaskToReadyList+0xc4>)
 8010174:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010176:	4b2c      	ldr	r3, [pc, #176]	; (8010228 <prvAddNewTaskToReadyList+0xc8>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d109      	bne.n	8010192 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801017e:	4a2a      	ldr	r2, [pc, #168]	; (8010228 <prvAddNewTaskToReadyList+0xc8>)
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010184:	4b27      	ldr	r3, [pc, #156]	; (8010224 <prvAddNewTaskToReadyList+0xc4>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	2b01      	cmp	r3, #1
 801018a:	d110      	bne.n	80101ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801018c:	f000 fc38 	bl	8010a00 <prvInitialiseTaskLists>
 8010190:	e00d      	b.n	80101ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010192:	4b26      	ldr	r3, [pc, #152]	; (801022c <prvAddNewTaskToReadyList+0xcc>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d109      	bne.n	80101ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801019a:	4b23      	ldr	r3, [pc, #140]	; (8010228 <prvAddNewTaskToReadyList+0xc8>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d802      	bhi.n	80101ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80101a8:	4a1f      	ldr	r2, [pc, #124]	; (8010228 <prvAddNewTaskToReadyList+0xc8>)
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80101ae:	4b20      	ldr	r3, [pc, #128]	; (8010230 <prvAddNewTaskToReadyList+0xd0>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	3301      	adds	r3, #1
 80101b4:	4a1e      	ldr	r2, [pc, #120]	; (8010230 <prvAddNewTaskToReadyList+0xd0>)
 80101b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80101b8:	4b1d      	ldr	r3, [pc, #116]	; (8010230 <prvAddNewTaskToReadyList+0xd0>)
 80101ba:	681a      	ldr	r2, [r3, #0]
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101c4:	4b1b      	ldr	r3, [pc, #108]	; (8010234 <prvAddNewTaskToReadyList+0xd4>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d903      	bls.n	80101d4 <prvAddNewTaskToReadyList+0x74>
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101d0:	4a18      	ldr	r2, [pc, #96]	; (8010234 <prvAddNewTaskToReadyList+0xd4>)
 80101d2:	6013      	str	r3, [r2, #0]
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101d8:	4613      	mov	r3, r2
 80101da:	009b      	lsls	r3, r3, #2
 80101dc:	4413      	add	r3, r2
 80101de:	009b      	lsls	r3, r3, #2
 80101e0:	4a15      	ldr	r2, [pc, #84]	; (8010238 <prvAddNewTaskToReadyList+0xd8>)
 80101e2:	441a      	add	r2, r3
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	3304      	adds	r3, #4
 80101e8:	4619      	mov	r1, r3
 80101ea:	4610      	mov	r0, r2
 80101ec:	f7fe fddb 	bl	800eda6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80101f0:	f001 fb50 	bl	8011894 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80101f4:	4b0d      	ldr	r3, [pc, #52]	; (801022c <prvAddNewTaskToReadyList+0xcc>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d00e      	beq.n	801021a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80101fc:	4b0a      	ldr	r3, [pc, #40]	; (8010228 <prvAddNewTaskToReadyList+0xc8>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010206:	429a      	cmp	r2, r3
 8010208:	d207      	bcs.n	801021a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801020a:	4b0c      	ldr	r3, [pc, #48]	; (801023c <prvAddNewTaskToReadyList+0xdc>)
 801020c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010210:	601a      	str	r2, [r3, #0]
 8010212:	f3bf 8f4f 	dsb	sy
 8010216:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801021a:	bf00      	nop
 801021c:	3708      	adds	r7, #8
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
 8010222:	bf00      	nop
 8010224:	20000adc 	.word	0x20000adc
 8010228:	20000608 	.word	0x20000608
 801022c:	20000ae8 	.word	0x20000ae8
 8010230:	20000af8 	.word	0x20000af8
 8010234:	20000ae4 	.word	0x20000ae4
 8010238:	2000060c 	.word	0x2000060c
 801023c:	e000ed04 	.word	0xe000ed04

08010240 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010240:	b580      	push	{r7, lr}
 8010242:	b084      	sub	sp, #16
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010248:	2300      	movs	r3, #0
 801024a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d017      	beq.n	8010282 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010252:	4b13      	ldr	r3, [pc, #76]	; (80102a0 <vTaskDelay+0x60>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d00a      	beq.n	8010270 <vTaskDelay+0x30>
	__asm volatile
 801025a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801025e:	f383 8811 	msr	BASEPRI, r3
 8010262:	f3bf 8f6f 	isb	sy
 8010266:	f3bf 8f4f 	dsb	sy
 801026a:	60bb      	str	r3, [r7, #8]
}
 801026c:	bf00      	nop
 801026e:	e7fe      	b.n	801026e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010270:	f000 f88a 	bl	8010388 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010274:	2100      	movs	r1, #0
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f000 fe0e 	bl	8010e98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801027c:	f000 f892 	bl	80103a4 <xTaskResumeAll>
 8010280:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d107      	bne.n	8010298 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010288:	4b06      	ldr	r3, [pc, #24]	; (80102a4 <vTaskDelay+0x64>)
 801028a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801028e:	601a      	str	r2, [r3, #0]
 8010290:	f3bf 8f4f 	dsb	sy
 8010294:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010298:	bf00      	nop
 801029a:	3710      	adds	r7, #16
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}
 80102a0:	20000b04 	.word	0x20000b04
 80102a4:	e000ed04 	.word	0xe000ed04

080102a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b08a      	sub	sp, #40	; 0x28
 80102ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80102ae:	2300      	movs	r3, #0
 80102b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80102b2:	2300      	movs	r3, #0
 80102b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80102b6:	463a      	mov	r2, r7
 80102b8:	1d39      	adds	r1, r7, #4
 80102ba:	f107 0308 	add.w	r3, r7, #8
 80102be:	4618      	mov	r0, r3
 80102c0:	f7fe fd10 	bl	800ece4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80102c4:	6839      	ldr	r1, [r7, #0]
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	68ba      	ldr	r2, [r7, #8]
 80102ca:	9202      	str	r2, [sp, #8]
 80102cc:	9301      	str	r3, [sp, #4]
 80102ce:	2300      	movs	r3, #0
 80102d0:	9300      	str	r3, [sp, #0]
 80102d2:	2300      	movs	r3, #0
 80102d4:	460a      	mov	r2, r1
 80102d6:	4924      	ldr	r1, [pc, #144]	; (8010368 <vTaskStartScheduler+0xc0>)
 80102d8:	4824      	ldr	r0, [pc, #144]	; (801036c <vTaskStartScheduler+0xc4>)
 80102da:	f7ff fdf9 	bl	800fed0 <xTaskCreateStatic>
 80102de:	4603      	mov	r3, r0
 80102e0:	4a23      	ldr	r2, [pc, #140]	; (8010370 <vTaskStartScheduler+0xc8>)
 80102e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80102e4:	4b22      	ldr	r3, [pc, #136]	; (8010370 <vTaskStartScheduler+0xc8>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d002      	beq.n	80102f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80102ec:	2301      	movs	r3, #1
 80102ee:	617b      	str	r3, [r7, #20]
 80102f0:	e001      	b.n	80102f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80102f2:	2300      	movs	r3, #0
 80102f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80102f6:	697b      	ldr	r3, [r7, #20]
 80102f8:	2b01      	cmp	r3, #1
 80102fa:	d102      	bne.n	8010302 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80102fc:	f000 fe20 	bl	8010f40 <xTimerCreateTimerTask>
 8010300:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	2b01      	cmp	r3, #1
 8010306:	d11b      	bne.n	8010340 <vTaskStartScheduler+0x98>
	__asm volatile
 8010308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801030c:	f383 8811 	msr	BASEPRI, r3
 8010310:	f3bf 8f6f 	isb	sy
 8010314:	f3bf 8f4f 	dsb	sy
 8010318:	613b      	str	r3, [r7, #16]
}
 801031a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801031c:	4b15      	ldr	r3, [pc, #84]	; (8010374 <vTaskStartScheduler+0xcc>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	3354      	adds	r3, #84	; 0x54
 8010322:	4a15      	ldr	r2, [pc, #84]	; (8010378 <vTaskStartScheduler+0xd0>)
 8010324:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010326:	4b15      	ldr	r3, [pc, #84]	; (801037c <vTaskStartScheduler+0xd4>)
 8010328:	f04f 32ff 	mov.w	r2, #4294967295
 801032c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801032e:	4b14      	ldr	r3, [pc, #80]	; (8010380 <vTaskStartScheduler+0xd8>)
 8010330:	2201      	movs	r2, #1
 8010332:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010334:	4b13      	ldr	r3, [pc, #76]	; (8010384 <vTaskStartScheduler+0xdc>)
 8010336:	2200      	movs	r2, #0
 8010338:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801033a:	f001 f9d9 	bl	80116f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801033e:	e00e      	b.n	801035e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010346:	d10a      	bne.n	801035e <vTaskStartScheduler+0xb6>
	__asm volatile
 8010348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801034c:	f383 8811 	msr	BASEPRI, r3
 8010350:	f3bf 8f6f 	isb	sy
 8010354:	f3bf 8f4f 	dsb	sy
 8010358:	60fb      	str	r3, [r7, #12]
}
 801035a:	bf00      	nop
 801035c:	e7fe      	b.n	801035c <vTaskStartScheduler+0xb4>
}
 801035e:	bf00      	nop
 8010360:	3718      	adds	r7, #24
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
 8010366:	bf00      	nop
 8010368:	0802ab80 	.word	0x0802ab80
 801036c:	080109d1 	.word	0x080109d1
 8010370:	20000b00 	.word	0x20000b00
 8010374:	20000608 	.word	0x20000608
 8010378:	20000098 	.word	0x20000098
 801037c:	20000afc 	.word	0x20000afc
 8010380:	20000ae8 	.word	0x20000ae8
 8010384:	20000ae0 	.word	0x20000ae0

08010388 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010388:	b480      	push	{r7}
 801038a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801038c:	4b04      	ldr	r3, [pc, #16]	; (80103a0 <vTaskSuspendAll+0x18>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	3301      	adds	r3, #1
 8010392:	4a03      	ldr	r2, [pc, #12]	; (80103a0 <vTaskSuspendAll+0x18>)
 8010394:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010396:	bf00      	nop
 8010398:	46bd      	mov	sp, r7
 801039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039e:	4770      	bx	lr
 80103a0:	20000b04 	.word	0x20000b04

080103a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b084      	sub	sp, #16
 80103a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80103aa:	2300      	movs	r3, #0
 80103ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80103ae:	2300      	movs	r3, #0
 80103b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80103b2:	4b42      	ldr	r3, [pc, #264]	; (80104bc <xTaskResumeAll+0x118>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d10a      	bne.n	80103d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80103ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103be:	f383 8811 	msr	BASEPRI, r3
 80103c2:	f3bf 8f6f 	isb	sy
 80103c6:	f3bf 8f4f 	dsb	sy
 80103ca:	603b      	str	r3, [r7, #0]
}
 80103cc:	bf00      	nop
 80103ce:	e7fe      	b.n	80103ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80103d0:	f001 fa30 	bl	8011834 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80103d4:	4b39      	ldr	r3, [pc, #228]	; (80104bc <xTaskResumeAll+0x118>)
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	3b01      	subs	r3, #1
 80103da:	4a38      	ldr	r2, [pc, #224]	; (80104bc <xTaskResumeAll+0x118>)
 80103dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80103de:	4b37      	ldr	r3, [pc, #220]	; (80104bc <xTaskResumeAll+0x118>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d162      	bne.n	80104ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80103e6:	4b36      	ldr	r3, [pc, #216]	; (80104c0 <xTaskResumeAll+0x11c>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d05e      	beq.n	80104ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80103ee:	e02f      	b.n	8010450 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103f0:	4b34      	ldr	r3, [pc, #208]	; (80104c4 <xTaskResumeAll+0x120>)
 80103f2:	68db      	ldr	r3, [r3, #12]
 80103f4:	68db      	ldr	r3, [r3, #12]
 80103f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	3318      	adds	r3, #24
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7fe fd2f 	bl	800ee60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	3304      	adds	r3, #4
 8010406:	4618      	mov	r0, r3
 8010408:	f7fe fd2a 	bl	800ee60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010410:	4b2d      	ldr	r3, [pc, #180]	; (80104c8 <xTaskResumeAll+0x124>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	429a      	cmp	r2, r3
 8010416:	d903      	bls.n	8010420 <xTaskResumeAll+0x7c>
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801041c:	4a2a      	ldr	r2, [pc, #168]	; (80104c8 <xTaskResumeAll+0x124>)
 801041e:	6013      	str	r3, [r2, #0]
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010424:	4613      	mov	r3, r2
 8010426:	009b      	lsls	r3, r3, #2
 8010428:	4413      	add	r3, r2
 801042a:	009b      	lsls	r3, r3, #2
 801042c:	4a27      	ldr	r2, [pc, #156]	; (80104cc <xTaskResumeAll+0x128>)
 801042e:	441a      	add	r2, r3
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	3304      	adds	r3, #4
 8010434:	4619      	mov	r1, r3
 8010436:	4610      	mov	r0, r2
 8010438:	f7fe fcb5 	bl	800eda6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010440:	4b23      	ldr	r3, [pc, #140]	; (80104d0 <xTaskResumeAll+0x12c>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010446:	429a      	cmp	r2, r3
 8010448:	d302      	bcc.n	8010450 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801044a:	4b22      	ldr	r3, [pc, #136]	; (80104d4 <xTaskResumeAll+0x130>)
 801044c:	2201      	movs	r2, #1
 801044e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010450:	4b1c      	ldr	r3, [pc, #112]	; (80104c4 <xTaskResumeAll+0x120>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d1cb      	bne.n	80103f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d001      	beq.n	8010462 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801045e:	f000 fb71 	bl	8010b44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010462:	4b1d      	ldr	r3, [pc, #116]	; (80104d8 <xTaskResumeAll+0x134>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d010      	beq.n	8010490 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801046e:	f000 f859 	bl	8010524 <xTaskIncrementTick>
 8010472:	4603      	mov	r3, r0
 8010474:	2b00      	cmp	r3, #0
 8010476:	d002      	beq.n	801047e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010478:	4b16      	ldr	r3, [pc, #88]	; (80104d4 <xTaskResumeAll+0x130>)
 801047a:	2201      	movs	r2, #1
 801047c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	3b01      	subs	r3, #1
 8010482:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d1f1      	bne.n	801046e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801048a:	4b13      	ldr	r3, [pc, #76]	; (80104d8 <xTaskResumeAll+0x134>)
 801048c:	2200      	movs	r2, #0
 801048e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010490:	4b10      	ldr	r3, [pc, #64]	; (80104d4 <xTaskResumeAll+0x130>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d009      	beq.n	80104ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010498:	2301      	movs	r3, #1
 801049a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801049c:	4b0f      	ldr	r3, [pc, #60]	; (80104dc <xTaskResumeAll+0x138>)
 801049e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104a2:	601a      	str	r2, [r3, #0]
 80104a4:	f3bf 8f4f 	dsb	sy
 80104a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80104ac:	f001 f9f2 	bl	8011894 <vPortExitCritical>

	return xAlreadyYielded;
 80104b0:	68bb      	ldr	r3, [r7, #8]
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3710      	adds	r7, #16
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}
 80104ba:	bf00      	nop
 80104bc:	20000b04 	.word	0x20000b04
 80104c0:	20000adc 	.word	0x20000adc
 80104c4:	20000a9c 	.word	0x20000a9c
 80104c8:	20000ae4 	.word	0x20000ae4
 80104cc:	2000060c 	.word	0x2000060c
 80104d0:	20000608 	.word	0x20000608
 80104d4:	20000af0 	.word	0x20000af0
 80104d8:	20000aec 	.word	0x20000aec
 80104dc:	e000ed04 	.word	0xe000ed04

080104e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80104e0:	b480      	push	{r7}
 80104e2:	b083      	sub	sp, #12
 80104e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80104e6:	4b05      	ldr	r3, [pc, #20]	; (80104fc <xTaskGetTickCount+0x1c>)
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80104ec:	687b      	ldr	r3, [r7, #4]
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	370c      	adds	r7, #12
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop
 80104fc:	20000ae0 	.word	0x20000ae0

08010500 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b082      	sub	sp, #8
 8010504:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010506:	f001 fa77 	bl	80119f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801050a:	2300      	movs	r3, #0
 801050c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801050e:	4b04      	ldr	r3, [pc, #16]	; (8010520 <xTaskGetTickCountFromISR+0x20>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010514:	683b      	ldr	r3, [r7, #0]
}
 8010516:	4618      	mov	r0, r3
 8010518:	3708      	adds	r7, #8
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}
 801051e:	bf00      	nop
 8010520:	20000ae0 	.word	0x20000ae0

08010524 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b086      	sub	sp, #24
 8010528:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801052a:	2300      	movs	r3, #0
 801052c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801052e:	4b4f      	ldr	r3, [pc, #316]	; (801066c <xTaskIncrementTick+0x148>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	2b00      	cmp	r3, #0
 8010534:	f040 808f 	bne.w	8010656 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010538:	4b4d      	ldr	r3, [pc, #308]	; (8010670 <xTaskIncrementTick+0x14c>)
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	3301      	adds	r3, #1
 801053e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010540:	4a4b      	ldr	r2, [pc, #300]	; (8010670 <xTaskIncrementTick+0x14c>)
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d120      	bne.n	801058e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801054c:	4b49      	ldr	r3, [pc, #292]	; (8010674 <xTaskIncrementTick+0x150>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d00a      	beq.n	801056c <xTaskIncrementTick+0x48>
	__asm volatile
 8010556:	f04f 0350 	mov.w	r3, #80	; 0x50
 801055a:	f383 8811 	msr	BASEPRI, r3
 801055e:	f3bf 8f6f 	isb	sy
 8010562:	f3bf 8f4f 	dsb	sy
 8010566:	603b      	str	r3, [r7, #0]
}
 8010568:	bf00      	nop
 801056a:	e7fe      	b.n	801056a <xTaskIncrementTick+0x46>
 801056c:	4b41      	ldr	r3, [pc, #260]	; (8010674 <xTaskIncrementTick+0x150>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	60fb      	str	r3, [r7, #12]
 8010572:	4b41      	ldr	r3, [pc, #260]	; (8010678 <xTaskIncrementTick+0x154>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	4a3f      	ldr	r2, [pc, #252]	; (8010674 <xTaskIncrementTick+0x150>)
 8010578:	6013      	str	r3, [r2, #0]
 801057a:	4a3f      	ldr	r2, [pc, #252]	; (8010678 <xTaskIncrementTick+0x154>)
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	6013      	str	r3, [r2, #0]
 8010580:	4b3e      	ldr	r3, [pc, #248]	; (801067c <xTaskIncrementTick+0x158>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	3301      	adds	r3, #1
 8010586:	4a3d      	ldr	r2, [pc, #244]	; (801067c <xTaskIncrementTick+0x158>)
 8010588:	6013      	str	r3, [r2, #0]
 801058a:	f000 fadb 	bl	8010b44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801058e:	4b3c      	ldr	r3, [pc, #240]	; (8010680 <xTaskIncrementTick+0x15c>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	693a      	ldr	r2, [r7, #16]
 8010594:	429a      	cmp	r2, r3
 8010596:	d349      	bcc.n	801062c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010598:	4b36      	ldr	r3, [pc, #216]	; (8010674 <xTaskIncrementTick+0x150>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d104      	bne.n	80105ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105a2:	4b37      	ldr	r3, [pc, #220]	; (8010680 <xTaskIncrementTick+0x15c>)
 80105a4:	f04f 32ff 	mov.w	r2, #4294967295
 80105a8:	601a      	str	r2, [r3, #0]
					break;
 80105aa:	e03f      	b.n	801062c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105ac:	4b31      	ldr	r3, [pc, #196]	; (8010674 <xTaskIncrementTick+0x150>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	68db      	ldr	r3, [r3, #12]
 80105b2:	68db      	ldr	r3, [r3, #12]
 80105b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	685b      	ldr	r3, [r3, #4]
 80105ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80105bc:	693a      	ldr	r2, [r7, #16]
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d203      	bcs.n	80105cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80105c4:	4a2e      	ldr	r2, [pc, #184]	; (8010680 <xTaskIncrementTick+0x15c>)
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80105ca:	e02f      	b.n	801062c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	3304      	adds	r3, #4
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7fe fc45 	bl	800ee60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d004      	beq.n	80105e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	3318      	adds	r3, #24
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7fe fc3c 	bl	800ee60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105ec:	4b25      	ldr	r3, [pc, #148]	; (8010684 <xTaskIncrementTick+0x160>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d903      	bls.n	80105fc <xTaskIncrementTick+0xd8>
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105f8:	4a22      	ldr	r2, [pc, #136]	; (8010684 <xTaskIncrementTick+0x160>)
 80105fa:	6013      	str	r3, [r2, #0]
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010600:	4613      	mov	r3, r2
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	4413      	add	r3, r2
 8010606:	009b      	lsls	r3, r3, #2
 8010608:	4a1f      	ldr	r2, [pc, #124]	; (8010688 <xTaskIncrementTick+0x164>)
 801060a:	441a      	add	r2, r3
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	3304      	adds	r3, #4
 8010610:	4619      	mov	r1, r3
 8010612:	4610      	mov	r0, r2
 8010614:	f7fe fbc7 	bl	800eda6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801061c:	4b1b      	ldr	r3, [pc, #108]	; (801068c <xTaskIncrementTick+0x168>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010622:	429a      	cmp	r2, r3
 8010624:	d3b8      	bcc.n	8010598 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010626:	2301      	movs	r3, #1
 8010628:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801062a:	e7b5      	b.n	8010598 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801062c:	4b17      	ldr	r3, [pc, #92]	; (801068c <xTaskIncrementTick+0x168>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010632:	4915      	ldr	r1, [pc, #84]	; (8010688 <xTaskIncrementTick+0x164>)
 8010634:	4613      	mov	r3, r2
 8010636:	009b      	lsls	r3, r3, #2
 8010638:	4413      	add	r3, r2
 801063a:	009b      	lsls	r3, r3, #2
 801063c:	440b      	add	r3, r1
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	2b01      	cmp	r3, #1
 8010642:	d901      	bls.n	8010648 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010644:	2301      	movs	r3, #1
 8010646:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010648:	4b11      	ldr	r3, [pc, #68]	; (8010690 <xTaskIncrementTick+0x16c>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d007      	beq.n	8010660 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010650:	2301      	movs	r3, #1
 8010652:	617b      	str	r3, [r7, #20]
 8010654:	e004      	b.n	8010660 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010656:	4b0f      	ldr	r3, [pc, #60]	; (8010694 <xTaskIncrementTick+0x170>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	3301      	adds	r3, #1
 801065c:	4a0d      	ldr	r2, [pc, #52]	; (8010694 <xTaskIncrementTick+0x170>)
 801065e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010660:	697b      	ldr	r3, [r7, #20]
}
 8010662:	4618      	mov	r0, r3
 8010664:	3718      	adds	r7, #24
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}
 801066a:	bf00      	nop
 801066c:	20000b04 	.word	0x20000b04
 8010670:	20000ae0 	.word	0x20000ae0
 8010674:	20000a94 	.word	0x20000a94
 8010678:	20000a98 	.word	0x20000a98
 801067c:	20000af4 	.word	0x20000af4
 8010680:	20000afc 	.word	0x20000afc
 8010684:	20000ae4 	.word	0x20000ae4
 8010688:	2000060c 	.word	0x2000060c
 801068c:	20000608 	.word	0x20000608
 8010690:	20000af0 	.word	0x20000af0
 8010694:	20000aec 	.word	0x20000aec

08010698 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010698:	b480      	push	{r7}
 801069a:	b085      	sub	sp, #20
 801069c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801069e:	4b2a      	ldr	r3, [pc, #168]	; (8010748 <vTaskSwitchContext+0xb0>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d003      	beq.n	80106ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80106a6:	4b29      	ldr	r3, [pc, #164]	; (801074c <vTaskSwitchContext+0xb4>)
 80106a8:	2201      	movs	r2, #1
 80106aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80106ac:	e046      	b.n	801073c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80106ae:	4b27      	ldr	r3, [pc, #156]	; (801074c <vTaskSwitchContext+0xb4>)
 80106b0:	2200      	movs	r2, #0
 80106b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106b4:	4b26      	ldr	r3, [pc, #152]	; (8010750 <vTaskSwitchContext+0xb8>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	60fb      	str	r3, [r7, #12]
 80106ba:	e010      	b.n	80106de <vTaskSwitchContext+0x46>
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d10a      	bne.n	80106d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80106c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c6:	f383 8811 	msr	BASEPRI, r3
 80106ca:	f3bf 8f6f 	isb	sy
 80106ce:	f3bf 8f4f 	dsb	sy
 80106d2:	607b      	str	r3, [r7, #4]
}
 80106d4:	bf00      	nop
 80106d6:	e7fe      	b.n	80106d6 <vTaskSwitchContext+0x3e>
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	3b01      	subs	r3, #1
 80106dc:	60fb      	str	r3, [r7, #12]
 80106de:	491d      	ldr	r1, [pc, #116]	; (8010754 <vTaskSwitchContext+0xbc>)
 80106e0:	68fa      	ldr	r2, [r7, #12]
 80106e2:	4613      	mov	r3, r2
 80106e4:	009b      	lsls	r3, r3, #2
 80106e6:	4413      	add	r3, r2
 80106e8:	009b      	lsls	r3, r3, #2
 80106ea:	440b      	add	r3, r1
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d0e4      	beq.n	80106bc <vTaskSwitchContext+0x24>
 80106f2:	68fa      	ldr	r2, [r7, #12]
 80106f4:	4613      	mov	r3, r2
 80106f6:	009b      	lsls	r3, r3, #2
 80106f8:	4413      	add	r3, r2
 80106fa:	009b      	lsls	r3, r3, #2
 80106fc:	4a15      	ldr	r2, [pc, #84]	; (8010754 <vTaskSwitchContext+0xbc>)
 80106fe:	4413      	add	r3, r2
 8010700:	60bb      	str	r3, [r7, #8]
 8010702:	68bb      	ldr	r3, [r7, #8]
 8010704:	685b      	ldr	r3, [r3, #4]
 8010706:	685a      	ldr	r2, [r3, #4]
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	605a      	str	r2, [r3, #4]
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	685a      	ldr	r2, [r3, #4]
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	3308      	adds	r3, #8
 8010714:	429a      	cmp	r2, r3
 8010716:	d104      	bne.n	8010722 <vTaskSwitchContext+0x8a>
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	685b      	ldr	r3, [r3, #4]
 801071c:	685a      	ldr	r2, [r3, #4]
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	605a      	str	r2, [r3, #4]
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	685b      	ldr	r3, [r3, #4]
 8010726:	68db      	ldr	r3, [r3, #12]
 8010728:	4a0b      	ldr	r2, [pc, #44]	; (8010758 <vTaskSwitchContext+0xc0>)
 801072a:	6013      	str	r3, [r2, #0]
 801072c:	4a08      	ldr	r2, [pc, #32]	; (8010750 <vTaskSwitchContext+0xb8>)
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010732:	4b09      	ldr	r3, [pc, #36]	; (8010758 <vTaskSwitchContext+0xc0>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	3354      	adds	r3, #84	; 0x54
 8010738:	4a08      	ldr	r2, [pc, #32]	; (801075c <vTaskSwitchContext+0xc4>)
 801073a:	6013      	str	r3, [r2, #0]
}
 801073c:	bf00      	nop
 801073e:	3714      	adds	r7, #20
 8010740:	46bd      	mov	sp, r7
 8010742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010746:	4770      	bx	lr
 8010748:	20000b04 	.word	0x20000b04
 801074c:	20000af0 	.word	0x20000af0
 8010750:	20000ae4 	.word	0x20000ae4
 8010754:	2000060c 	.word	0x2000060c
 8010758:	20000608 	.word	0x20000608
 801075c:	20000098 	.word	0x20000098

08010760 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d10a      	bne.n	8010786 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010774:	f383 8811 	msr	BASEPRI, r3
 8010778:	f3bf 8f6f 	isb	sy
 801077c:	f3bf 8f4f 	dsb	sy
 8010780:	60fb      	str	r3, [r7, #12]
}
 8010782:	bf00      	nop
 8010784:	e7fe      	b.n	8010784 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010786:	4b07      	ldr	r3, [pc, #28]	; (80107a4 <vTaskPlaceOnEventList+0x44>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	3318      	adds	r3, #24
 801078c:	4619      	mov	r1, r3
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f7fe fb2d 	bl	800edee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010794:	2101      	movs	r1, #1
 8010796:	6838      	ldr	r0, [r7, #0]
 8010798:	f000 fb7e 	bl	8010e98 <prvAddCurrentTaskToDelayedList>
}
 801079c:	bf00      	nop
 801079e:	3710      	adds	r7, #16
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}
 80107a4:	20000608 	.word	0x20000608

080107a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b086      	sub	sp, #24
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	60f8      	str	r0, [r7, #12]
 80107b0:	60b9      	str	r1, [r7, #8]
 80107b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d10a      	bne.n	80107d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80107ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107be:	f383 8811 	msr	BASEPRI, r3
 80107c2:	f3bf 8f6f 	isb	sy
 80107c6:	f3bf 8f4f 	dsb	sy
 80107ca:	617b      	str	r3, [r7, #20]
}
 80107cc:	bf00      	nop
 80107ce:	e7fe      	b.n	80107ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80107d0:	4b0a      	ldr	r3, [pc, #40]	; (80107fc <vTaskPlaceOnEventListRestricted+0x54>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	3318      	adds	r3, #24
 80107d6:	4619      	mov	r1, r3
 80107d8:	68f8      	ldr	r0, [r7, #12]
 80107da:	f7fe fae4 	bl	800eda6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d002      	beq.n	80107ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80107e4:	f04f 33ff 	mov.w	r3, #4294967295
 80107e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80107ea:	6879      	ldr	r1, [r7, #4]
 80107ec:	68b8      	ldr	r0, [r7, #8]
 80107ee:	f000 fb53 	bl	8010e98 <prvAddCurrentTaskToDelayedList>
	}
 80107f2:	bf00      	nop
 80107f4:	3718      	adds	r7, #24
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}
 80107fa:	bf00      	nop
 80107fc:	20000608 	.word	0x20000608

08010800 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b086      	sub	sp, #24
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	68db      	ldr	r3, [r3, #12]
 801080c:	68db      	ldr	r3, [r3, #12]
 801080e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d10a      	bne.n	801082c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010816:	f04f 0350 	mov.w	r3, #80	; 0x50
 801081a:	f383 8811 	msr	BASEPRI, r3
 801081e:	f3bf 8f6f 	isb	sy
 8010822:	f3bf 8f4f 	dsb	sy
 8010826:	60fb      	str	r3, [r7, #12]
}
 8010828:	bf00      	nop
 801082a:	e7fe      	b.n	801082a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801082c:	693b      	ldr	r3, [r7, #16]
 801082e:	3318      	adds	r3, #24
 8010830:	4618      	mov	r0, r3
 8010832:	f7fe fb15 	bl	800ee60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010836:	4b1e      	ldr	r3, [pc, #120]	; (80108b0 <xTaskRemoveFromEventList+0xb0>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d11d      	bne.n	801087a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	3304      	adds	r3, #4
 8010842:	4618      	mov	r0, r3
 8010844:	f7fe fb0c 	bl	800ee60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801084c:	4b19      	ldr	r3, [pc, #100]	; (80108b4 <xTaskRemoveFromEventList+0xb4>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	429a      	cmp	r2, r3
 8010852:	d903      	bls.n	801085c <xTaskRemoveFromEventList+0x5c>
 8010854:	693b      	ldr	r3, [r7, #16]
 8010856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010858:	4a16      	ldr	r2, [pc, #88]	; (80108b4 <xTaskRemoveFromEventList+0xb4>)
 801085a:	6013      	str	r3, [r2, #0]
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010860:	4613      	mov	r3, r2
 8010862:	009b      	lsls	r3, r3, #2
 8010864:	4413      	add	r3, r2
 8010866:	009b      	lsls	r3, r3, #2
 8010868:	4a13      	ldr	r2, [pc, #76]	; (80108b8 <xTaskRemoveFromEventList+0xb8>)
 801086a:	441a      	add	r2, r3
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	3304      	adds	r3, #4
 8010870:	4619      	mov	r1, r3
 8010872:	4610      	mov	r0, r2
 8010874:	f7fe fa97 	bl	800eda6 <vListInsertEnd>
 8010878:	e005      	b.n	8010886 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801087a:	693b      	ldr	r3, [r7, #16]
 801087c:	3318      	adds	r3, #24
 801087e:	4619      	mov	r1, r3
 8010880:	480e      	ldr	r0, [pc, #56]	; (80108bc <xTaskRemoveFromEventList+0xbc>)
 8010882:	f7fe fa90 	bl	800eda6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010886:	693b      	ldr	r3, [r7, #16]
 8010888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801088a:	4b0d      	ldr	r3, [pc, #52]	; (80108c0 <xTaskRemoveFromEventList+0xc0>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010890:	429a      	cmp	r2, r3
 8010892:	d905      	bls.n	80108a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010894:	2301      	movs	r3, #1
 8010896:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010898:	4b0a      	ldr	r3, [pc, #40]	; (80108c4 <xTaskRemoveFromEventList+0xc4>)
 801089a:	2201      	movs	r2, #1
 801089c:	601a      	str	r2, [r3, #0]
 801089e:	e001      	b.n	80108a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80108a0:	2300      	movs	r3, #0
 80108a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80108a4:	697b      	ldr	r3, [r7, #20]
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3718      	adds	r7, #24
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}
 80108ae:	bf00      	nop
 80108b0:	20000b04 	.word	0x20000b04
 80108b4:	20000ae4 	.word	0x20000ae4
 80108b8:	2000060c 	.word	0x2000060c
 80108bc:	20000a9c 	.word	0x20000a9c
 80108c0:	20000608 	.word	0x20000608
 80108c4:	20000af0 	.word	0x20000af0

080108c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80108c8:	b480      	push	{r7}
 80108ca:	b083      	sub	sp, #12
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80108d0:	4b06      	ldr	r3, [pc, #24]	; (80108ec <vTaskInternalSetTimeOutState+0x24>)
 80108d2:	681a      	ldr	r2, [r3, #0]
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80108d8:	4b05      	ldr	r3, [pc, #20]	; (80108f0 <vTaskInternalSetTimeOutState+0x28>)
 80108da:	681a      	ldr	r2, [r3, #0]
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	605a      	str	r2, [r3, #4]
}
 80108e0:	bf00      	nop
 80108e2:	370c      	adds	r7, #12
 80108e4:	46bd      	mov	sp, r7
 80108e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ea:	4770      	bx	lr
 80108ec:	20000af4 	.word	0x20000af4
 80108f0:	20000ae0 	.word	0x20000ae0

080108f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b088      	sub	sp, #32
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2b00      	cmp	r3, #0
 8010902:	d10a      	bne.n	801091a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010908:	f383 8811 	msr	BASEPRI, r3
 801090c:	f3bf 8f6f 	isb	sy
 8010910:	f3bf 8f4f 	dsb	sy
 8010914:	613b      	str	r3, [r7, #16]
}
 8010916:	bf00      	nop
 8010918:	e7fe      	b.n	8010918 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d10a      	bne.n	8010936 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010924:	f383 8811 	msr	BASEPRI, r3
 8010928:	f3bf 8f6f 	isb	sy
 801092c:	f3bf 8f4f 	dsb	sy
 8010930:	60fb      	str	r3, [r7, #12]
}
 8010932:	bf00      	nop
 8010934:	e7fe      	b.n	8010934 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010936:	f000 ff7d 	bl	8011834 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801093a:	4b1d      	ldr	r3, [pc, #116]	; (80109b0 <xTaskCheckForTimeOut+0xbc>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	69ba      	ldr	r2, [r7, #24]
 8010946:	1ad3      	subs	r3, r2, r3
 8010948:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801094a:	683b      	ldr	r3, [r7, #0]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010952:	d102      	bne.n	801095a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010954:	2300      	movs	r3, #0
 8010956:	61fb      	str	r3, [r7, #28]
 8010958:	e023      	b.n	80109a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681a      	ldr	r2, [r3, #0]
 801095e:	4b15      	ldr	r3, [pc, #84]	; (80109b4 <xTaskCheckForTimeOut+0xc0>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	429a      	cmp	r2, r3
 8010964:	d007      	beq.n	8010976 <xTaskCheckForTimeOut+0x82>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	685b      	ldr	r3, [r3, #4]
 801096a:	69ba      	ldr	r2, [r7, #24]
 801096c:	429a      	cmp	r2, r3
 801096e:	d302      	bcc.n	8010976 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010970:	2301      	movs	r3, #1
 8010972:	61fb      	str	r3, [r7, #28]
 8010974:	e015      	b.n	80109a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	697a      	ldr	r2, [r7, #20]
 801097c:	429a      	cmp	r2, r3
 801097e:	d20b      	bcs.n	8010998 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	681a      	ldr	r2, [r3, #0]
 8010984:	697b      	ldr	r3, [r7, #20]
 8010986:	1ad2      	subs	r2, r2, r3
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f7ff ff9b 	bl	80108c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010992:	2300      	movs	r3, #0
 8010994:	61fb      	str	r3, [r7, #28]
 8010996:	e004      	b.n	80109a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	2200      	movs	r2, #0
 801099c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801099e:	2301      	movs	r3, #1
 80109a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80109a2:	f000 ff77 	bl	8011894 <vPortExitCritical>

	return xReturn;
 80109a6:	69fb      	ldr	r3, [r7, #28]
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3720      	adds	r7, #32
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}
 80109b0:	20000ae0 	.word	0x20000ae0
 80109b4:	20000af4 	.word	0x20000af4

080109b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80109b8:	b480      	push	{r7}
 80109ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80109bc:	4b03      	ldr	r3, [pc, #12]	; (80109cc <vTaskMissedYield+0x14>)
 80109be:	2201      	movs	r2, #1
 80109c0:	601a      	str	r2, [r3, #0]
}
 80109c2:	bf00      	nop
 80109c4:	46bd      	mov	sp, r7
 80109c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ca:	4770      	bx	lr
 80109cc:	20000af0 	.word	0x20000af0

080109d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b082      	sub	sp, #8
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80109d8:	f000 f852 	bl	8010a80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80109dc:	4b06      	ldr	r3, [pc, #24]	; (80109f8 <prvIdleTask+0x28>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	d9f9      	bls.n	80109d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80109e4:	4b05      	ldr	r3, [pc, #20]	; (80109fc <prvIdleTask+0x2c>)
 80109e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109ea:	601a      	str	r2, [r3, #0]
 80109ec:	f3bf 8f4f 	dsb	sy
 80109f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80109f4:	e7f0      	b.n	80109d8 <prvIdleTask+0x8>
 80109f6:	bf00      	nop
 80109f8:	2000060c 	.word	0x2000060c
 80109fc:	e000ed04 	.word	0xe000ed04

08010a00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b082      	sub	sp, #8
 8010a04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010a06:	2300      	movs	r3, #0
 8010a08:	607b      	str	r3, [r7, #4]
 8010a0a:	e00c      	b.n	8010a26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010a0c:	687a      	ldr	r2, [r7, #4]
 8010a0e:	4613      	mov	r3, r2
 8010a10:	009b      	lsls	r3, r3, #2
 8010a12:	4413      	add	r3, r2
 8010a14:	009b      	lsls	r3, r3, #2
 8010a16:	4a12      	ldr	r2, [pc, #72]	; (8010a60 <prvInitialiseTaskLists+0x60>)
 8010a18:	4413      	add	r3, r2
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f7fe f996 	bl	800ed4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	3301      	adds	r3, #1
 8010a24:	607b      	str	r3, [r7, #4]
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2b37      	cmp	r3, #55	; 0x37
 8010a2a:	d9ef      	bls.n	8010a0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010a2c:	480d      	ldr	r0, [pc, #52]	; (8010a64 <prvInitialiseTaskLists+0x64>)
 8010a2e:	f7fe f98d 	bl	800ed4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010a32:	480d      	ldr	r0, [pc, #52]	; (8010a68 <prvInitialiseTaskLists+0x68>)
 8010a34:	f7fe f98a 	bl	800ed4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010a38:	480c      	ldr	r0, [pc, #48]	; (8010a6c <prvInitialiseTaskLists+0x6c>)
 8010a3a:	f7fe f987 	bl	800ed4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010a3e:	480c      	ldr	r0, [pc, #48]	; (8010a70 <prvInitialiseTaskLists+0x70>)
 8010a40:	f7fe f984 	bl	800ed4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010a44:	480b      	ldr	r0, [pc, #44]	; (8010a74 <prvInitialiseTaskLists+0x74>)
 8010a46:	f7fe f981 	bl	800ed4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010a4a:	4b0b      	ldr	r3, [pc, #44]	; (8010a78 <prvInitialiseTaskLists+0x78>)
 8010a4c:	4a05      	ldr	r2, [pc, #20]	; (8010a64 <prvInitialiseTaskLists+0x64>)
 8010a4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010a50:	4b0a      	ldr	r3, [pc, #40]	; (8010a7c <prvInitialiseTaskLists+0x7c>)
 8010a52:	4a05      	ldr	r2, [pc, #20]	; (8010a68 <prvInitialiseTaskLists+0x68>)
 8010a54:	601a      	str	r2, [r3, #0]
}
 8010a56:	bf00      	nop
 8010a58:	3708      	adds	r7, #8
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}
 8010a5e:	bf00      	nop
 8010a60:	2000060c 	.word	0x2000060c
 8010a64:	20000a6c 	.word	0x20000a6c
 8010a68:	20000a80 	.word	0x20000a80
 8010a6c:	20000a9c 	.word	0x20000a9c
 8010a70:	20000ab0 	.word	0x20000ab0
 8010a74:	20000ac8 	.word	0x20000ac8
 8010a78:	20000a94 	.word	0x20000a94
 8010a7c:	20000a98 	.word	0x20000a98

08010a80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010a86:	e019      	b.n	8010abc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010a88:	f000 fed4 	bl	8011834 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a8c:	4b10      	ldr	r3, [pc, #64]	; (8010ad0 <prvCheckTasksWaitingTermination+0x50>)
 8010a8e:	68db      	ldr	r3, [r3, #12]
 8010a90:	68db      	ldr	r3, [r3, #12]
 8010a92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	3304      	adds	r3, #4
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7fe f9e1 	bl	800ee60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010a9e:	4b0d      	ldr	r3, [pc, #52]	; (8010ad4 <prvCheckTasksWaitingTermination+0x54>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	3b01      	subs	r3, #1
 8010aa4:	4a0b      	ldr	r2, [pc, #44]	; (8010ad4 <prvCheckTasksWaitingTermination+0x54>)
 8010aa6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010aa8:	4b0b      	ldr	r3, [pc, #44]	; (8010ad8 <prvCheckTasksWaitingTermination+0x58>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	3b01      	subs	r3, #1
 8010aae:	4a0a      	ldr	r2, [pc, #40]	; (8010ad8 <prvCheckTasksWaitingTermination+0x58>)
 8010ab0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010ab2:	f000 feef 	bl	8011894 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f000 f810 	bl	8010adc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010abc:	4b06      	ldr	r3, [pc, #24]	; (8010ad8 <prvCheckTasksWaitingTermination+0x58>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d1e1      	bne.n	8010a88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010ac4:	bf00      	nop
 8010ac6:	bf00      	nop
 8010ac8:	3708      	adds	r7, #8
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}
 8010ace:	bf00      	nop
 8010ad0:	20000ab0 	.word	0x20000ab0
 8010ad4:	20000adc 	.word	0x20000adc
 8010ad8:	20000ac4 	.word	0x20000ac4

08010adc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b084      	sub	sp, #16
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	3354      	adds	r3, #84	; 0x54
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f019 fbfd 	bl	802a2e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d108      	bne.n	8010b0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010afc:	4618      	mov	r0, r3
 8010afe:	f001 f887 	bl	8011c10 <vPortFree>
				vPortFree( pxTCB );
 8010b02:	6878      	ldr	r0, [r7, #4]
 8010b04:	f001 f884 	bl	8011c10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010b08:	e018      	b.n	8010b3c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010b10:	2b01      	cmp	r3, #1
 8010b12:	d103      	bne.n	8010b1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f001 f87b 	bl	8011c10 <vPortFree>
	}
 8010b1a:	e00f      	b.n	8010b3c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8010b22:	2b02      	cmp	r3, #2
 8010b24:	d00a      	beq.n	8010b3c <prvDeleteTCB+0x60>
	__asm volatile
 8010b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b2a:	f383 8811 	msr	BASEPRI, r3
 8010b2e:	f3bf 8f6f 	isb	sy
 8010b32:	f3bf 8f4f 	dsb	sy
 8010b36:	60fb      	str	r3, [r7, #12]
}
 8010b38:	bf00      	nop
 8010b3a:	e7fe      	b.n	8010b3a <prvDeleteTCB+0x5e>
	}
 8010b3c:	bf00      	nop
 8010b3e:	3710      	adds	r7, #16
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}

08010b44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010b44:	b480      	push	{r7}
 8010b46:	b083      	sub	sp, #12
 8010b48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010b4a:	4b0c      	ldr	r3, [pc, #48]	; (8010b7c <prvResetNextTaskUnblockTime+0x38>)
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d104      	bne.n	8010b5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010b54:	4b0a      	ldr	r3, [pc, #40]	; (8010b80 <prvResetNextTaskUnblockTime+0x3c>)
 8010b56:	f04f 32ff 	mov.w	r2, #4294967295
 8010b5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010b5c:	e008      	b.n	8010b70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010b5e:	4b07      	ldr	r3, [pc, #28]	; (8010b7c <prvResetNextTaskUnblockTime+0x38>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	68db      	ldr	r3, [r3, #12]
 8010b64:	68db      	ldr	r3, [r3, #12]
 8010b66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	685b      	ldr	r3, [r3, #4]
 8010b6c:	4a04      	ldr	r2, [pc, #16]	; (8010b80 <prvResetNextTaskUnblockTime+0x3c>)
 8010b6e:	6013      	str	r3, [r2, #0]
}
 8010b70:	bf00      	nop
 8010b72:	370c      	adds	r7, #12
 8010b74:	46bd      	mov	sp, r7
 8010b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7a:	4770      	bx	lr
 8010b7c:	20000a94 	.word	0x20000a94
 8010b80:	20000afc 	.word	0x20000afc

08010b84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010b84:	b480      	push	{r7}
 8010b86:	b083      	sub	sp, #12
 8010b88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010b8a:	4b0b      	ldr	r3, [pc, #44]	; (8010bb8 <xTaskGetSchedulerState+0x34>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d102      	bne.n	8010b98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010b92:	2301      	movs	r3, #1
 8010b94:	607b      	str	r3, [r7, #4]
 8010b96:	e008      	b.n	8010baa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b98:	4b08      	ldr	r3, [pc, #32]	; (8010bbc <xTaskGetSchedulerState+0x38>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d102      	bne.n	8010ba6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010ba0:	2302      	movs	r3, #2
 8010ba2:	607b      	str	r3, [r7, #4]
 8010ba4:	e001      	b.n	8010baa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010baa:	687b      	ldr	r3, [r7, #4]
	}
 8010bac:	4618      	mov	r0, r3
 8010bae:	370c      	adds	r7, #12
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb6:	4770      	bx	lr
 8010bb8:	20000ae8 	.word	0x20000ae8
 8010bbc:	20000b04 	.word	0x20000b04

08010bc0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b084      	sub	sp, #16
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d051      	beq.n	8010c7a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bda:	4b2a      	ldr	r3, [pc, #168]	; (8010c84 <xTaskPriorityInherit+0xc4>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d241      	bcs.n	8010c68 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010be4:	68bb      	ldr	r3, [r7, #8]
 8010be6:	699b      	ldr	r3, [r3, #24]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	db06      	blt.n	8010bfa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010bec:	4b25      	ldr	r3, [pc, #148]	; (8010c84 <xTaskPriorityInherit+0xc4>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bf2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	6959      	ldr	r1, [r3, #20]
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c02:	4613      	mov	r3, r2
 8010c04:	009b      	lsls	r3, r3, #2
 8010c06:	4413      	add	r3, r2
 8010c08:	009b      	lsls	r3, r3, #2
 8010c0a:	4a1f      	ldr	r2, [pc, #124]	; (8010c88 <xTaskPriorityInherit+0xc8>)
 8010c0c:	4413      	add	r3, r2
 8010c0e:	4299      	cmp	r1, r3
 8010c10:	d122      	bne.n	8010c58 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010c12:	68bb      	ldr	r3, [r7, #8]
 8010c14:	3304      	adds	r3, #4
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7fe f922 	bl	800ee60 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010c1c:	4b19      	ldr	r3, [pc, #100]	; (8010c84 <xTaskPriorityInherit+0xc4>)
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c2a:	4b18      	ldr	r3, [pc, #96]	; (8010c8c <xTaskPriorityInherit+0xcc>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d903      	bls.n	8010c3a <xTaskPriorityInherit+0x7a>
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c36:	4a15      	ldr	r2, [pc, #84]	; (8010c8c <xTaskPriorityInherit+0xcc>)
 8010c38:	6013      	str	r3, [r2, #0]
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c3e:	4613      	mov	r3, r2
 8010c40:	009b      	lsls	r3, r3, #2
 8010c42:	4413      	add	r3, r2
 8010c44:	009b      	lsls	r3, r3, #2
 8010c46:	4a10      	ldr	r2, [pc, #64]	; (8010c88 <xTaskPriorityInherit+0xc8>)
 8010c48:	441a      	add	r2, r3
 8010c4a:	68bb      	ldr	r3, [r7, #8]
 8010c4c:	3304      	adds	r3, #4
 8010c4e:	4619      	mov	r1, r3
 8010c50:	4610      	mov	r0, r2
 8010c52:	f7fe f8a8 	bl	800eda6 <vListInsertEnd>
 8010c56:	e004      	b.n	8010c62 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010c58:	4b0a      	ldr	r3, [pc, #40]	; (8010c84 <xTaskPriorityInherit+0xc4>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010c62:	2301      	movs	r3, #1
 8010c64:	60fb      	str	r3, [r7, #12]
 8010c66:	e008      	b.n	8010c7a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010c6c:	4b05      	ldr	r3, [pc, #20]	; (8010c84 <xTaskPriorityInherit+0xc4>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c72:	429a      	cmp	r2, r3
 8010c74:	d201      	bcs.n	8010c7a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010c76:	2301      	movs	r3, #1
 8010c78:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
	}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3710      	adds	r7, #16
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}
 8010c84:	20000608 	.word	0x20000608
 8010c88:	2000060c 	.word	0x2000060c
 8010c8c:	20000ae4 	.word	0x20000ae4

08010c90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b086      	sub	sp, #24
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d056      	beq.n	8010d54 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010ca6:	4b2e      	ldr	r3, [pc, #184]	; (8010d60 <xTaskPriorityDisinherit+0xd0>)
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	693a      	ldr	r2, [r7, #16]
 8010cac:	429a      	cmp	r2, r3
 8010cae:	d00a      	beq.n	8010cc6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb4:	f383 8811 	msr	BASEPRI, r3
 8010cb8:	f3bf 8f6f 	isb	sy
 8010cbc:	f3bf 8f4f 	dsb	sy
 8010cc0:	60fb      	str	r3, [r7, #12]
}
 8010cc2:	bf00      	nop
 8010cc4:	e7fe      	b.n	8010cc4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010cc6:	693b      	ldr	r3, [r7, #16]
 8010cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d10a      	bne.n	8010ce4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd2:	f383 8811 	msr	BASEPRI, r3
 8010cd6:	f3bf 8f6f 	isb	sy
 8010cda:	f3bf 8f4f 	dsb	sy
 8010cde:	60bb      	str	r3, [r7, #8]
}
 8010ce0:	bf00      	nop
 8010ce2:	e7fe      	b.n	8010ce2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010ce4:	693b      	ldr	r3, [r7, #16]
 8010ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ce8:	1e5a      	subs	r2, r3, #1
 8010cea:	693b      	ldr	r3, [r7, #16]
 8010cec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cf2:	693b      	ldr	r3, [r7, #16]
 8010cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d02c      	beq.n	8010d54 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010cfa:	693b      	ldr	r3, [r7, #16]
 8010cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d128      	bne.n	8010d54 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010d02:	693b      	ldr	r3, [r7, #16]
 8010d04:	3304      	adds	r3, #4
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7fe f8aa 	bl	800ee60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010d1c:	693b      	ldr	r3, [r7, #16]
 8010d1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d24:	4b0f      	ldr	r3, [pc, #60]	; (8010d64 <xTaskPriorityDisinherit+0xd4>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	429a      	cmp	r2, r3
 8010d2a:	d903      	bls.n	8010d34 <xTaskPriorityDisinherit+0xa4>
 8010d2c:	693b      	ldr	r3, [r7, #16]
 8010d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d30:	4a0c      	ldr	r2, [pc, #48]	; (8010d64 <xTaskPriorityDisinherit+0xd4>)
 8010d32:	6013      	str	r3, [r2, #0]
 8010d34:	693b      	ldr	r3, [r7, #16]
 8010d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d38:	4613      	mov	r3, r2
 8010d3a:	009b      	lsls	r3, r3, #2
 8010d3c:	4413      	add	r3, r2
 8010d3e:	009b      	lsls	r3, r3, #2
 8010d40:	4a09      	ldr	r2, [pc, #36]	; (8010d68 <xTaskPriorityDisinherit+0xd8>)
 8010d42:	441a      	add	r2, r3
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	3304      	adds	r3, #4
 8010d48:	4619      	mov	r1, r3
 8010d4a:	4610      	mov	r0, r2
 8010d4c:	f7fe f82b 	bl	800eda6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010d50:	2301      	movs	r3, #1
 8010d52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010d54:	697b      	ldr	r3, [r7, #20]
	}
 8010d56:	4618      	mov	r0, r3
 8010d58:	3718      	adds	r7, #24
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}
 8010d5e:	bf00      	nop
 8010d60:	20000608 	.word	0x20000608
 8010d64:	20000ae4 	.word	0x20000ae4
 8010d68:	2000060c 	.word	0x2000060c

08010d6c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b088      	sub	sp, #32
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010d7a:	2301      	movs	r3, #1
 8010d7c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d06a      	beq.n	8010e5a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010d84:	69bb      	ldr	r3, [r7, #24]
 8010d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d10a      	bne.n	8010da2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d90:	f383 8811 	msr	BASEPRI, r3
 8010d94:	f3bf 8f6f 	isb	sy
 8010d98:	f3bf 8f4f 	dsb	sy
 8010d9c:	60fb      	str	r3, [r7, #12]
}
 8010d9e:	bf00      	nop
 8010da0:	e7fe      	b.n	8010da0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010da2:	69bb      	ldr	r3, [r7, #24]
 8010da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010da6:	683a      	ldr	r2, [r7, #0]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d902      	bls.n	8010db2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	61fb      	str	r3, [r7, #28]
 8010db0:	e002      	b.n	8010db8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010db2:	69bb      	ldr	r3, [r7, #24]
 8010db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010db6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010db8:	69bb      	ldr	r3, [r7, #24]
 8010dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dbc:	69fa      	ldr	r2, [r7, #28]
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d04b      	beq.n	8010e5a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010dc2:	69bb      	ldr	r3, [r7, #24]
 8010dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010dc6:	697a      	ldr	r2, [r7, #20]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d146      	bne.n	8010e5a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010dcc:	4b25      	ldr	r3, [pc, #148]	; (8010e64 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	69ba      	ldr	r2, [r7, #24]
 8010dd2:	429a      	cmp	r2, r3
 8010dd4:	d10a      	bne.n	8010dec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8010dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dda:	f383 8811 	msr	BASEPRI, r3
 8010dde:	f3bf 8f6f 	isb	sy
 8010de2:	f3bf 8f4f 	dsb	sy
 8010de6:	60bb      	str	r3, [r7, #8]
}
 8010de8:	bf00      	nop
 8010dea:	e7fe      	b.n	8010dea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010dec:	69bb      	ldr	r3, [r7, #24]
 8010dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010df0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010df2:	69bb      	ldr	r3, [r7, #24]
 8010df4:	69fa      	ldr	r2, [r7, #28]
 8010df6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010df8:	69bb      	ldr	r3, [r7, #24]
 8010dfa:	699b      	ldr	r3, [r3, #24]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	db04      	blt.n	8010e0a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e00:	69fb      	ldr	r3, [r7, #28]
 8010e02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010e06:	69bb      	ldr	r3, [r7, #24]
 8010e08:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010e0a:	69bb      	ldr	r3, [r7, #24]
 8010e0c:	6959      	ldr	r1, [r3, #20]
 8010e0e:	693a      	ldr	r2, [r7, #16]
 8010e10:	4613      	mov	r3, r2
 8010e12:	009b      	lsls	r3, r3, #2
 8010e14:	4413      	add	r3, r2
 8010e16:	009b      	lsls	r3, r3, #2
 8010e18:	4a13      	ldr	r2, [pc, #76]	; (8010e68 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010e1a:	4413      	add	r3, r2
 8010e1c:	4299      	cmp	r1, r3
 8010e1e:	d11c      	bne.n	8010e5a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e20:	69bb      	ldr	r3, [r7, #24]
 8010e22:	3304      	adds	r3, #4
 8010e24:	4618      	mov	r0, r3
 8010e26:	f7fe f81b 	bl	800ee60 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010e2a:	69bb      	ldr	r3, [r7, #24]
 8010e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e2e:	4b0f      	ldr	r3, [pc, #60]	; (8010e6c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	429a      	cmp	r2, r3
 8010e34:	d903      	bls.n	8010e3e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8010e36:	69bb      	ldr	r3, [r7, #24]
 8010e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e3a:	4a0c      	ldr	r2, [pc, #48]	; (8010e6c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010e3c:	6013      	str	r3, [r2, #0]
 8010e3e:	69bb      	ldr	r3, [r7, #24]
 8010e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e42:	4613      	mov	r3, r2
 8010e44:	009b      	lsls	r3, r3, #2
 8010e46:	4413      	add	r3, r2
 8010e48:	009b      	lsls	r3, r3, #2
 8010e4a:	4a07      	ldr	r2, [pc, #28]	; (8010e68 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010e4c:	441a      	add	r2, r3
 8010e4e:	69bb      	ldr	r3, [r7, #24]
 8010e50:	3304      	adds	r3, #4
 8010e52:	4619      	mov	r1, r3
 8010e54:	4610      	mov	r0, r2
 8010e56:	f7fd ffa6 	bl	800eda6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010e5a:	bf00      	nop
 8010e5c:	3720      	adds	r7, #32
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	bf00      	nop
 8010e64:	20000608 	.word	0x20000608
 8010e68:	2000060c 	.word	0x2000060c
 8010e6c:	20000ae4 	.word	0x20000ae4

08010e70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010e70:	b480      	push	{r7}
 8010e72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010e74:	4b07      	ldr	r3, [pc, #28]	; (8010e94 <pvTaskIncrementMutexHeldCount+0x24>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d004      	beq.n	8010e86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010e7c:	4b05      	ldr	r3, [pc, #20]	; (8010e94 <pvTaskIncrementMutexHeldCount+0x24>)
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010e82:	3201      	adds	r2, #1
 8010e84:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010e86:	4b03      	ldr	r3, [pc, #12]	; (8010e94 <pvTaskIncrementMutexHeldCount+0x24>)
 8010e88:	681b      	ldr	r3, [r3, #0]
	}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	4770      	bx	lr
 8010e94:	20000608 	.word	0x20000608

08010e98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b084      	sub	sp, #16
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
 8010ea0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010ea2:	4b21      	ldr	r3, [pc, #132]	; (8010f28 <prvAddCurrentTaskToDelayedList+0x90>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010ea8:	4b20      	ldr	r3, [pc, #128]	; (8010f2c <prvAddCurrentTaskToDelayedList+0x94>)
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	3304      	adds	r3, #4
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f7fd ffd6 	bl	800ee60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eba:	d10a      	bne.n	8010ed2 <prvAddCurrentTaskToDelayedList+0x3a>
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d007      	beq.n	8010ed2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010ec2:	4b1a      	ldr	r3, [pc, #104]	; (8010f2c <prvAddCurrentTaskToDelayedList+0x94>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	3304      	adds	r3, #4
 8010ec8:	4619      	mov	r1, r3
 8010eca:	4819      	ldr	r0, [pc, #100]	; (8010f30 <prvAddCurrentTaskToDelayedList+0x98>)
 8010ecc:	f7fd ff6b 	bl	800eda6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010ed0:	e026      	b.n	8010f20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010ed2:	68fa      	ldr	r2, [r7, #12]
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	4413      	add	r3, r2
 8010ed8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010eda:	4b14      	ldr	r3, [pc, #80]	; (8010f2c <prvAddCurrentTaskToDelayedList+0x94>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	68ba      	ldr	r2, [r7, #8]
 8010ee0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010ee2:	68ba      	ldr	r2, [r7, #8]
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	429a      	cmp	r2, r3
 8010ee8:	d209      	bcs.n	8010efe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010eea:	4b12      	ldr	r3, [pc, #72]	; (8010f34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010eec:	681a      	ldr	r2, [r3, #0]
 8010eee:	4b0f      	ldr	r3, [pc, #60]	; (8010f2c <prvAddCurrentTaskToDelayedList+0x94>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	3304      	adds	r3, #4
 8010ef4:	4619      	mov	r1, r3
 8010ef6:	4610      	mov	r0, r2
 8010ef8:	f7fd ff79 	bl	800edee <vListInsert>
}
 8010efc:	e010      	b.n	8010f20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010efe:	4b0e      	ldr	r3, [pc, #56]	; (8010f38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010f00:	681a      	ldr	r2, [r3, #0]
 8010f02:	4b0a      	ldr	r3, [pc, #40]	; (8010f2c <prvAddCurrentTaskToDelayedList+0x94>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	3304      	adds	r3, #4
 8010f08:	4619      	mov	r1, r3
 8010f0a:	4610      	mov	r0, r2
 8010f0c:	f7fd ff6f 	bl	800edee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010f10:	4b0a      	ldr	r3, [pc, #40]	; (8010f3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	68ba      	ldr	r2, [r7, #8]
 8010f16:	429a      	cmp	r2, r3
 8010f18:	d202      	bcs.n	8010f20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010f1a:	4a08      	ldr	r2, [pc, #32]	; (8010f3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	6013      	str	r3, [r2, #0]
}
 8010f20:	bf00      	nop
 8010f22:	3710      	adds	r7, #16
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	20000ae0 	.word	0x20000ae0
 8010f2c:	20000608 	.word	0x20000608
 8010f30:	20000ac8 	.word	0x20000ac8
 8010f34:	20000a98 	.word	0x20000a98
 8010f38:	20000a94 	.word	0x20000a94
 8010f3c:	20000afc 	.word	0x20000afc

08010f40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b08a      	sub	sp, #40	; 0x28
 8010f44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010f46:	2300      	movs	r3, #0
 8010f48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010f4a:	f000 fb07 	bl	801155c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010f4e:	4b1c      	ldr	r3, [pc, #112]	; (8010fc0 <xTimerCreateTimerTask+0x80>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d021      	beq.n	8010f9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010f56:	2300      	movs	r3, #0
 8010f58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010f5a:	2300      	movs	r3, #0
 8010f5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010f5e:	1d3a      	adds	r2, r7, #4
 8010f60:	f107 0108 	add.w	r1, r7, #8
 8010f64:	f107 030c 	add.w	r3, r7, #12
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f7fd fed5 	bl	800ed18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010f6e:	6879      	ldr	r1, [r7, #4]
 8010f70:	68bb      	ldr	r3, [r7, #8]
 8010f72:	68fa      	ldr	r2, [r7, #12]
 8010f74:	9202      	str	r2, [sp, #8]
 8010f76:	9301      	str	r3, [sp, #4]
 8010f78:	2302      	movs	r3, #2
 8010f7a:	9300      	str	r3, [sp, #0]
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	460a      	mov	r2, r1
 8010f80:	4910      	ldr	r1, [pc, #64]	; (8010fc4 <xTimerCreateTimerTask+0x84>)
 8010f82:	4811      	ldr	r0, [pc, #68]	; (8010fc8 <xTimerCreateTimerTask+0x88>)
 8010f84:	f7fe ffa4 	bl	800fed0 <xTaskCreateStatic>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	4a10      	ldr	r2, [pc, #64]	; (8010fcc <xTimerCreateTimerTask+0x8c>)
 8010f8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010f8e:	4b0f      	ldr	r3, [pc, #60]	; (8010fcc <xTimerCreateTimerTask+0x8c>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d001      	beq.n	8010f9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010f96:	2301      	movs	r3, #1
 8010f98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d10a      	bne.n	8010fb6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa4:	f383 8811 	msr	BASEPRI, r3
 8010fa8:	f3bf 8f6f 	isb	sy
 8010fac:	f3bf 8f4f 	dsb	sy
 8010fb0:	613b      	str	r3, [r7, #16]
}
 8010fb2:	bf00      	nop
 8010fb4:	e7fe      	b.n	8010fb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010fb6:	697b      	ldr	r3, [r7, #20]
}
 8010fb8:	4618      	mov	r0, r3
 8010fba:	3718      	adds	r7, #24
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	bd80      	pop	{r7, pc}
 8010fc0:	20000b38 	.word	0x20000b38
 8010fc4:	0802ab88 	.word	0x0802ab88
 8010fc8:	08011105 	.word	0x08011105
 8010fcc:	20000b3c 	.word	0x20000b3c

08010fd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b08a      	sub	sp, #40	; 0x28
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	60f8      	str	r0, [r7, #12]
 8010fd8:	60b9      	str	r1, [r7, #8]
 8010fda:	607a      	str	r2, [r7, #4]
 8010fdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d10a      	bne.n	8010ffe <xTimerGenericCommand+0x2e>
	__asm volatile
 8010fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fec:	f383 8811 	msr	BASEPRI, r3
 8010ff0:	f3bf 8f6f 	isb	sy
 8010ff4:	f3bf 8f4f 	dsb	sy
 8010ff8:	623b      	str	r3, [r7, #32]
}
 8010ffa:	bf00      	nop
 8010ffc:	e7fe      	b.n	8010ffc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010ffe:	4b1a      	ldr	r3, [pc, #104]	; (8011068 <xTimerGenericCommand+0x98>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d02a      	beq.n	801105c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011006:	68bb      	ldr	r3, [r7, #8]
 8011008:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	2b05      	cmp	r3, #5
 8011016:	dc18      	bgt.n	801104a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011018:	f7ff fdb4 	bl	8010b84 <xTaskGetSchedulerState>
 801101c:	4603      	mov	r3, r0
 801101e:	2b02      	cmp	r3, #2
 8011020:	d109      	bne.n	8011036 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011022:	4b11      	ldr	r3, [pc, #68]	; (8011068 <xTimerGenericCommand+0x98>)
 8011024:	6818      	ldr	r0, [r3, #0]
 8011026:	f107 0110 	add.w	r1, r7, #16
 801102a:	2300      	movs	r3, #0
 801102c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801102e:	f7fe f8e9 	bl	800f204 <xQueueGenericSend>
 8011032:	6278      	str	r0, [r7, #36]	; 0x24
 8011034:	e012      	b.n	801105c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011036:	4b0c      	ldr	r3, [pc, #48]	; (8011068 <xTimerGenericCommand+0x98>)
 8011038:	6818      	ldr	r0, [r3, #0]
 801103a:	f107 0110 	add.w	r1, r7, #16
 801103e:	2300      	movs	r3, #0
 8011040:	2200      	movs	r2, #0
 8011042:	f7fe f8df 	bl	800f204 <xQueueGenericSend>
 8011046:	6278      	str	r0, [r7, #36]	; 0x24
 8011048:	e008      	b.n	801105c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801104a:	4b07      	ldr	r3, [pc, #28]	; (8011068 <xTimerGenericCommand+0x98>)
 801104c:	6818      	ldr	r0, [r3, #0]
 801104e:	f107 0110 	add.w	r1, r7, #16
 8011052:	2300      	movs	r3, #0
 8011054:	683a      	ldr	r2, [r7, #0]
 8011056:	f7fe f9d3 	bl	800f400 <xQueueGenericSendFromISR>
 801105a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801105e:	4618      	mov	r0, r3
 8011060:	3728      	adds	r7, #40	; 0x28
 8011062:	46bd      	mov	sp, r7
 8011064:	bd80      	pop	{r7, pc}
 8011066:	bf00      	nop
 8011068:	20000b38 	.word	0x20000b38

0801106c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b088      	sub	sp, #32
 8011070:	af02      	add	r7, sp, #8
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011076:	4b22      	ldr	r3, [pc, #136]	; (8011100 <prvProcessExpiredTimer+0x94>)
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	68db      	ldr	r3, [r3, #12]
 801107c:	68db      	ldr	r3, [r3, #12]
 801107e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011080:	697b      	ldr	r3, [r7, #20]
 8011082:	3304      	adds	r3, #4
 8011084:	4618      	mov	r0, r3
 8011086:	f7fd feeb 	bl	800ee60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801108a:	697b      	ldr	r3, [r7, #20]
 801108c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011090:	f003 0304 	and.w	r3, r3, #4
 8011094:	2b00      	cmp	r3, #0
 8011096:	d022      	beq.n	80110de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	699a      	ldr	r2, [r3, #24]
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	18d1      	adds	r1, r2, r3
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	683a      	ldr	r2, [r7, #0]
 80110a4:	6978      	ldr	r0, [r7, #20]
 80110a6:	f000 f8d1 	bl	801124c <prvInsertTimerInActiveList>
 80110aa:	4603      	mov	r3, r0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d01f      	beq.n	80110f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80110b0:	2300      	movs	r3, #0
 80110b2:	9300      	str	r3, [sp, #0]
 80110b4:	2300      	movs	r3, #0
 80110b6:	687a      	ldr	r2, [r7, #4]
 80110b8:	2100      	movs	r1, #0
 80110ba:	6978      	ldr	r0, [r7, #20]
 80110bc:	f7ff ff88 	bl	8010fd0 <xTimerGenericCommand>
 80110c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d113      	bne.n	80110f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80110c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110cc:	f383 8811 	msr	BASEPRI, r3
 80110d0:	f3bf 8f6f 	isb	sy
 80110d4:	f3bf 8f4f 	dsb	sy
 80110d8:	60fb      	str	r3, [r7, #12]
}
 80110da:	bf00      	nop
 80110dc:	e7fe      	b.n	80110dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80110e4:	f023 0301 	bic.w	r3, r3, #1
 80110e8:	b2da      	uxtb	r2, r3
 80110ea:	697b      	ldr	r3, [r7, #20]
 80110ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	6a1b      	ldr	r3, [r3, #32]
 80110f4:	6978      	ldr	r0, [r7, #20]
 80110f6:	4798      	blx	r3
}
 80110f8:	bf00      	nop
 80110fa:	3718      	adds	r7, #24
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}
 8011100:	20000b30 	.word	0x20000b30

08011104 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b084      	sub	sp, #16
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801110c:	f107 0308 	add.w	r3, r7, #8
 8011110:	4618      	mov	r0, r3
 8011112:	f000 f857 	bl	80111c4 <prvGetNextExpireTime>
 8011116:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	4619      	mov	r1, r3
 801111c:	68f8      	ldr	r0, [r7, #12]
 801111e:	f000 f803 	bl	8011128 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011122:	f000 f8d5 	bl	80112d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011126:	e7f1      	b.n	801110c <prvTimerTask+0x8>

08011128 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b084      	sub	sp, #16
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011132:	f7ff f929 	bl	8010388 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011136:	f107 0308 	add.w	r3, r7, #8
 801113a:	4618      	mov	r0, r3
 801113c:	f000 f866 	bl	801120c <prvSampleTimeNow>
 8011140:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d130      	bne.n	80111aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d10a      	bne.n	8011164 <prvProcessTimerOrBlockTask+0x3c>
 801114e:	687a      	ldr	r2, [r7, #4]
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	429a      	cmp	r2, r3
 8011154:	d806      	bhi.n	8011164 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011156:	f7ff f925 	bl	80103a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801115a:	68f9      	ldr	r1, [r7, #12]
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f7ff ff85 	bl	801106c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011162:	e024      	b.n	80111ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011164:	683b      	ldr	r3, [r7, #0]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d008      	beq.n	801117c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801116a:	4b13      	ldr	r3, [pc, #76]	; (80111b8 <prvProcessTimerOrBlockTask+0x90>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d101      	bne.n	8011178 <prvProcessTimerOrBlockTask+0x50>
 8011174:	2301      	movs	r3, #1
 8011176:	e000      	b.n	801117a <prvProcessTimerOrBlockTask+0x52>
 8011178:	2300      	movs	r3, #0
 801117a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801117c:	4b0f      	ldr	r3, [pc, #60]	; (80111bc <prvProcessTimerOrBlockTask+0x94>)
 801117e:	6818      	ldr	r0, [r3, #0]
 8011180:	687a      	ldr	r2, [r7, #4]
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	1ad3      	subs	r3, r2, r3
 8011186:	683a      	ldr	r2, [r7, #0]
 8011188:	4619      	mov	r1, r3
 801118a:	f7fe fe6d 	bl	800fe68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801118e:	f7ff f909 	bl	80103a4 <xTaskResumeAll>
 8011192:	4603      	mov	r3, r0
 8011194:	2b00      	cmp	r3, #0
 8011196:	d10a      	bne.n	80111ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011198:	4b09      	ldr	r3, [pc, #36]	; (80111c0 <prvProcessTimerOrBlockTask+0x98>)
 801119a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801119e:	601a      	str	r2, [r3, #0]
 80111a0:	f3bf 8f4f 	dsb	sy
 80111a4:	f3bf 8f6f 	isb	sy
}
 80111a8:	e001      	b.n	80111ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80111aa:	f7ff f8fb 	bl	80103a4 <xTaskResumeAll>
}
 80111ae:	bf00      	nop
 80111b0:	3710      	adds	r7, #16
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bd80      	pop	{r7, pc}
 80111b6:	bf00      	nop
 80111b8:	20000b34 	.word	0x20000b34
 80111bc:	20000b38 	.word	0x20000b38
 80111c0:	e000ed04 	.word	0xe000ed04

080111c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80111c4:	b480      	push	{r7}
 80111c6:	b085      	sub	sp, #20
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80111cc:	4b0e      	ldr	r3, [pc, #56]	; (8011208 <prvGetNextExpireTime+0x44>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d101      	bne.n	80111da <prvGetNextExpireTime+0x16>
 80111d6:	2201      	movs	r2, #1
 80111d8:	e000      	b.n	80111dc <prvGetNextExpireTime+0x18>
 80111da:	2200      	movs	r2, #0
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d105      	bne.n	80111f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80111e8:	4b07      	ldr	r3, [pc, #28]	; (8011208 <prvGetNextExpireTime+0x44>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	68db      	ldr	r3, [r3, #12]
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	60fb      	str	r3, [r7, #12]
 80111f2:	e001      	b.n	80111f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80111f4:	2300      	movs	r3, #0
 80111f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80111f8:	68fb      	ldr	r3, [r7, #12]
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3714      	adds	r7, #20
 80111fe:	46bd      	mov	sp, r7
 8011200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011204:	4770      	bx	lr
 8011206:	bf00      	nop
 8011208:	20000b30 	.word	0x20000b30

0801120c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b084      	sub	sp, #16
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011214:	f7ff f964 	bl	80104e0 <xTaskGetTickCount>
 8011218:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801121a:	4b0b      	ldr	r3, [pc, #44]	; (8011248 <prvSampleTimeNow+0x3c>)
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	68fa      	ldr	r2, [r7, #12]
 8011220:	429a      	cmp	r2, r3
 8011222:	d205      	bcs.n	8011230 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011224:	f000 f936 	bl	8011494 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2201      	movs	r2, #1
 801122c:	601a      	str	r2, [r3, #0]
 801122e:	e002      	b.n	8011236 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2200      	movs	r2, #0
 8011234:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011236:	4a04      	ldr	r2, [pc, #16]	; (8011248 <prvSampleTimeNow+0x3c>)
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801123c:	68fb      	ldr	r3, [r7, #12]
}
 801123e:	4618      	mov	r0, r3
 8011240:	3710      	adds	r7, #16
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}
 8011246:	bf00      	nop
 8011248:	20000b40 	.word	0x20000b40

0801124c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b086      	sub	sp, #24
 8011250:	af00      	add	r7, sp, #0
 8011252:	60f8      	str	r0, [r7, #12]
 8011254:	60b9      	str	r1, [r7, #8]
 8011256:	607a      	str	r2, [r7, #4]
 8011258:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801125a:	2300      	movs	r3, #0
 801125c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	68ba      	ldr	r2, [r7, #8]
 8011262:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	68fa      	ldr	r2, [r7, #12]
 8011268:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801126a:	68ba      	ldr	r2, [r7, #8]
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	429a      	cmp	r2, r3
 8011270:	d812      	bhi.n	8011298 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011272:	687a      	ldr	r2, [r7, #4]
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	1ad2      	subs	r2, r2, r3
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	699b      	ldr	r3, [r3, #24]
 801127c:	429a      	cmp	r2, r3
 801127e:	d302      	bcc.n	8011286 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011280:	2301      	movs	r3, #1
 8011282:	617b      	str	r3, [r7, #20]
 8011284:	e01b      	b.n	80112be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011286:	4b10      	ldr	r3, [pc, #64]	; (80112c8 <prvInsertTimerInActiveList+0x7c>)
 8011288:	681a      	ldr	r2, [r3, #0]
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	3304      	adds	r3, #4
 801128e:	4619      	mov	r1, r3
 8011290:	4610      	mov	r0, r2
 8011292:	f7fd fdac 	bl	800edee <vListInsert>
 8011296:	e012      	b.n	80112be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011298:	687a      	ldr	r2, [r7, #4]
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	429a      	cmp	r2, r3
 801129e:	d206      	bcs.n	80112ae <prvInsertTimerInActiveList+0x62>
 80112a0:	68ba      	ldr	r2, [r7, #8]
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d302      	bcc.n	80112ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80112a8:	2301      	movs	r3, #1
 80112aa:	617b      	str	r3, [r7, #20]
 80112ac:	e007      	b.n	80112be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80112ae:	4b07      	ldr	r3, [pc, #28]	; (80112cc <prvInsertTimerInActiveList+0x80>)
 80112b0:	681a      	ldr	r2, [r3, #0]
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	3304      	adds	r3, #4
 80112b6:	4619      	mov	r1, r3
 80112b8:	4610      	mov	r0, r2
 80112ba:	f7fd fd98 	bl	800edee <vListInsert>
		}
	}

	return xProcessTimerNow;
 80112be:	697b      	ldr	r3, [r7, #20]
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	3718      	adds	r7, #24
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}
 80112c8:	20000b34 	.word	0x20000b34
 80112cc:	20000b30 	.word	0x20000b30

080112d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b08e      	sub	sp, #56	; 0x38
 80112d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80112d6:	e0ca      	b.n	801146e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	da18      	bge.n	8011310 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80112de:	1d3b      	adds	r3, r7, #4
 80112e0:	3304      	adds	r3, #4
 80112e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80112e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d10a      	bne.n	8011300 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80112ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ee:	f383 8811 	msr	BASEPRI, r3
 80112f2:	f3bf 8f6f 	isb	sy
 80112f6:	f3bf 8f4f 	dsb	sy
 80112fa:	61fb      	str	r3, [r7, #28]
}
 80112fc:	bf00      	nop
 80112fe:	e7fe      	b.n	80112fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011306:	6850      	ldr	r0, [r2, #4]
 8011308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801130a:	6892      	ldr	r2, [r2, #8]
 801130c:	4611      	mov	r1, r2
 801130e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	2b00      	cmp	r3, #0
 8011314:	f2c0 80aa 	blt.w	801146c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801131c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801131e:	695b      	ldr	r3, [r3, #20]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d004      	beq.n	801132e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011326:	3304      	adds	r3, #4
 8011328:	4618      	mov	r0, r3
 801132a:	f7fd fd99 	bl	800ee60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801132e:	463b      	mov	r3, r7
 8011330:	4618      	mov	r0, r3
 8011332:	f7ff ff6b 	bl	801120c <prvSampleTimeNow>
 8011336:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2b09      	cmp	r3, #9
 801133c:	f200 8097 	bhi.w	801146e <prvProcessReceivedCommands+0x19e>
 8011340:	a201      	add	r2, pc, #4	; (adr r2, 8011348 <prvProcessReceivedCommands+0x78>)
 8011342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011346:	bf00      	nop
 8011348:	08011371 	.word	0x08011371
 801134c:	08011371 	.word	0x08011371
 8011350:	08011371 	.word	0x08011371
 8011354:	080113e5 	.word	0x080113e5
 8011358:	080113f9 	.word	0x080113f9
 801135c:	08011443 	.word	0x08011443
 8011360:	08011371 	.word	0x08011371
 8011364:	08011371 	.word	0x08011371
 8011368:	080113e5 	.word	0x080113e5
 801136c:	080113f9 	.word	0x080113f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011372:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011376:	f043 0301 	orr.w	r3, r3, #1
 801137a:	b2da      	uxtb	r2, r3
 801137c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801137e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011382:	68ba      	ldr	r2, [r7, #8]
 8011384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011386:	699b      	ldr	r3, [r3, #24]
 8011388:	18d1      	adds	r1, r2, r3
 801138a:	68bb      	ldr	r3, [r7, #8]
 801138c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801138e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011390:	f7ff ff5c 	bl	801124c <prvInsertTimerInActiveList>
 8011394:	4603      	mov	r3, r0
 8011396:	2b00      	cmp	r3, #0
 8011398:	d069      	beq.n	801146e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801139a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801139c:	6a1b      	ldr	r3, [r3, #32]
 801139e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80113a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80113a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80113a8:	f003 0304 	and.w	r3, r3, #4
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d05e      	beq.n	801146e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80113b0:	68ba      	ldr	r2, [r7, #8]
 80113b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b4:	699b      	ldr	r3, [r3, #24]
 80113b6:	441a      	add	r2, r3
 80113b8:	2300      	movs	r3, #0
 80113ba:	9300      	str	r3, [sp, #0]
 80113bc:	2300      	movs	r3, #0
 80113be:	2100      	movs	r1, #0
 80113c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80113c2:	f7ff fe05 	bl	8010fd0 <xTimerGenericCommand>
 80113c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80113c8:	6a3b      	ldr	r3, [r7, #32]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d14f      	bne.n	801146e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80113ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113d2:	f383 8811 	msr	BASEPRI, r3
 80113d6:	f3bf 8f6f 	isb	sy
 80113da:	f3bf 8f4f 	dsb	sy
 80113de:	61bb      	str	r3, [r7, #24]
}
 80113e0:	bf00      	nop
 80113e2:	e7fe      	b.n	80113e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80113e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80113ea:	f023 0301 	bic.w	r3, r3, #1
 80113ee:	b2da      	uxtb	r2, r3
 80113f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80113f6:	e03a      	b.n	801146e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80113f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80113fe:	f043 0301 	orr.w	r3, r3, #1
 8011402:	b2da      	uxtb	r2, r3
 8011404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011406:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801140a:	68ba      	ldr	r2, [r7, #8]
 801140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011412:	699b      	ldr	r3, [r3, #24]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d10a      	bne.n	801142e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8011418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801141c:	f383 8811 	msr	BASEPRI, r3
 8011420:	f3bf 8f6f 	isb	sy
 8011424:	f3bf 8f4f 	dsb	sy
 8011428:	617b      	str	r3, [r7, #20]
}
 801142a:	bf00      	nop
 801142c:	e7fe      	b.n	801142c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801142e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011430:	699a      	ldr	r2, [r3, #24]
 8011432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011434:	18d1      	adds	r1, r2, r3
 8011436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801143a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801143c:	f7ff ff06 	bl	801124c <prvInsertTimerInActiveList>
					break;
 8011440:	e015      	b.n	801146e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011448:	f003 0302 	and.w	r3, r3, #2
 801144c:	2b00      	cmp	r3, #0
 801144e:	d103      	bne.n	8011458 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8011450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011452:	f000 fbdd 	bl	8011c10 <vPortFree>
 8011456:	e00a      	b.n	801146e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801145e:	f023 0301 	bic.w	r3, r3, #1
 8011462:	b2da      	uxtb	r2, r3
 8011464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011466:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801146a:	e000      	b.n	801146e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801146c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801146e:	4b08      	ldr	r3, [pc, #32]	; (8011490 <prvProcessReceivedCommands+0x1c0>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	1d39      	adds	r1, r7, #4
 8011474:	2200      	movs	r2, #0
 8011476:	4618      	mov	r0, r3
 8011478:	f7fe f8ea 	bl	800f650 <xQueueReceive>
 801147c:	4603      	mov	r3, r0
 801147e:	2b00      	cmp	r3, #0
 8011480:	f47f af2a 	bne.w	80112d8 <prvProcessReceivedCommands+0x8>
	}
}
 8011484:	bf00      	nop
 8011486:	bf00      	nop
 8011488:	3730      	adds	r7, #48	; 0x30
 801148a:	46bd      	mov	sp, r7
 801148c:	bd80      	pop	{r7, pc}
 801148e:	bf00      	nop
 8011490:	20000b38 	.word	0x20000b38

08011494 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b088      	sub	sp, #32
 8011498:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801149a:	e048      	b.n	801152e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801149c:	4b2d      	ldr	r3, [pc, #180]	; (8011554 <prvSwitchTimerLists+0xc0>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	68db      	ldr	r3, [r3, #12]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114a6:	4b2b      	ldr	r3, [pc, #172]	; (8011554 <prvSwitchTimerLists+0xc0>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	68db      	ldr	r3, [r3, #12]
 80114ac:	68db      	ldr	r3, [r3, #12]
 80114ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	3304      	adds	r3, #4
 80114b4:	4618      	mov	r0, r3
 80114b6:	f7fd fcd3 	bl	800ee60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	6a1b      	ldr	r3, [r3, #32]
 80114be:	68f8      	ldr	r0, [r7, #12]
 80114c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80114c8:	f003 0304 	and.w	r3, r3, #4
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d02e      	beq.n	801152e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	699b      	ldr	r3, [r3, #24]
 80114d4:	693a      	ldr	r2, [r7, #16]
 80114d6:	4413      	add	r3, r2
 80114d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80114da:	68ba      	ldr	r2, [r7, #8]
 80114dc:	693b      	ldr	r3, [r7, #16]
 80114de:	429a      	cmp	r2, r3
 80114e0:	d90e      	bls.n	8011500 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	68ba      	ldr	r2, [r7, #8]
 80114e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	68fa      	ldr	r2, [r7, #12]
 80114ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80114ee:	4b19      	ldr	r3, [pc, #100]	; (8011554 <prvSwitchTimerLists+0xc0>)
 80114f0:	681a      	ldr	r2, [r3, #0]
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	3304      	adds	r3, #4
 80114f6:	4619      	mov	r1, r3
 80114f8:	4610      	mov	r0, r2
 80114fa:	f7fd fc78 	bl	800edee <vListInsert>
 80114fe:	e016      	b.n	801152e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011500:	2300      	movs	r3, #0
 8011502:	9300      	str	r3, [sp, #0]
 8011504:	2300      	movs	r3, #0
 8011506:	693a      	ldr	r2, [r7, #16]
 8011508:	2100      	movs	r1, #0
 801150a:	68f8      	ldr	r0, [r7, #12]
 801150c:	f7ff fd60 	bl	8010fd0 <xTimerGenericCommand>
 8011510:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d10a      	bne.n	801152e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8011518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801151c:	f383 8811 	msr	BASEPRI, r3
 8011520:	f3bf 8f6f 	isb	sy
 8011524:	f3bf 8f4f 	dsb	sy
 8011528:	603b      	str	r3, [r7, #0]
}
 801152a:	bf00      	nop
 801152c:	e7fe      	b.n	801152c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801152e:	4b09      	ldr	r3, [pc, #36]	; (8011554 <prvSwitchTimerLists+0xc0>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d1b1      	bne.n	801149c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8011538:	4b06      	ldr	r3, [pc, #24]	; (8011554 <prvSwitchTimerLists+0xc0>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801153e:	4b06      	ldr	r3, [pc, #24]	; (8011558 <prvSwitchTimerLists+0xc4>)
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	4a04      	ldr	r2, [pc, #16]	; (8011554 <prvSwitchTimerLists+0xc0>)
 8011544:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8011546:	4a04      	ldr	r2, [pc, #16]	; (8011558 <prvSwitchTimerLists+0xc4>)
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	6013      	str	r3, [r2, #0]
}
 801154c:	bf00      	nop
 801154e:	3718      	adds	r7, #24
 8011550:	46bd      	mov	sp, r7
 8011552:	bd80      	pop	{r7, pc}
 8011554:	20000b30 	.word	0x20000b30
 8011558:	20000b34 	.word	0x20000b34

0801155c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b082      	sub	sp, #8
 8011560:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011562:	f000 f967 	bl	8011834 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011566:	4b15      	ldr	r3, [pc, #84]	; (80115bc <prvCheckForValidListAndQueue+0x60>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d120      	bne.n	80115b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801156e:	4814      	ldr	r0, [pc, #80]	; (80115c0 <prvCheckForValidListAndQueue+0x64>)
 8011570:	f7fd fbec 	bl	800ed4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011574:	4813      	ldr	r0, [pc, #76]	; (80115c4 <prvCheckForValidListAndQueue+0x68>)
 8011576:	f7fd fbe9 	bl	800ed4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801157a:	4b13      	ldr	r3, [pc, #76]	; (80115c8 <prvCheckForValidListAndQueue+0x6c>)
 801157c:	4a10      	ldr	r2, [pc, #64]	; (80115c0 <prvCheckForValidListAndQueue+0x64>)
 801157e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011580:	4b12      	ldr	r3, [pc, #72]	; (80115cc <prvCheckForValidListAndQueue+0x70>)
 8011582:	4a10      	ldr	r2, [pc, #64]	; (80115c4 <prvCheckForValidListAndQueue+0x68>)
 8011584:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011586:	2300      	movs	r3, #0
 8011588:	9300      	str	r3, [sp, #0]
 801158a:	4b11      	ldr	r3, [pc, #68]	; (80115d0 <prvCheckForValidListAndQueue+0x74>)
 801158c:	4a11      	ldr	r2, [pc, #68]	; (80115d4 <prvCheckForValidListAndQueue+0x78>)
 801158e:	2110      	movs	r1, #16
 8011590:	200a      	movs	r0, #10
 8011592:	f7fd fcf7 	bl	800ef84 <xQueueGenericCreateStatic>
 8011596:	4603      	mov	r3, r0
 8011598:	4a08      	ldr	r2, [pc, #32]	; (80115bc <prvCheckForValidListAndQueue+0x60>)
 801159a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801159c:	4b07      	ldr	r3, [pc, #28]	; (80115bc <prvCheckForValidListAndQueue+0x60>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d005      	beq.n	80115b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80115a4:	4b05      	ldr	r3, [pc, #20]	; (80115bc <prvCheckForValidListAndQueue+0x60>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	490b      	ldr	r1, [pc, #44]	; (80115d8 <prvCheckForValidListAndQueue+0x7c>)
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7fe fc08 	bl	800fdc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80115b0:	f000 f970 	bl	8011894 <vPortExitCritical>
}
 80115b4:	bf00      	nop
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd80      	pop	{r7, pc}
 80115ba:	bf00      	nop
 80115bc:	20000b38 	.word	0x20000b38
 80115c0:	20000b08 	.word	0x20000b08
 80115c4:	20000b1c 	.word	0x20000b1c
 80115c8:	20000b30 	.word	0x20000b30
 80115cc:	20000b34 	.word	0x20000b34
 80115d0:	20000be4 	.word	0x20000be4
 80115d4:	20000b44 	.word	0x20000b44
 80115d8:	0802ab90 	.word	0x0802ab90

080115dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80115dc:	b480      	push	{r7}
 80115de:	b085      	sub	sp, #20
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	60f8      	str	r0, [r7, #12]
 80115e4:	60b9      	str	r1, [r7, #8]
 80115e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	3b04      	subs	r3, #4
 80115ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80115f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	3b04      	subs	r3, #4
 80115fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	f023 0201 	bic.w	r2, r3, #1
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	3b04      	subs	r3, #4
 801160a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801160c:	4a0c      	ldr	r2, [pc, #48]	; (8011640 <pxPortInitialiseStack+0x64>)
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	3b14      	subs	r3, #20
 8011616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011618:	687a      	ldr	r2, [r7, #4]
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	3b04      	subs	r3, #4
 8011622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	f06f 0202 	mvn.w	r2, #2
 801162a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	3b20      	subs	r3, #32
 8011630:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011632:	68fb      	ldr	r3, [r7, #12]
}
 8011634:	4618      	mov	r0, r3
 8011636:	3714      	adds	r7, #20
 8011638:	46bd      	mov	sp, r7
 801163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163e:	4770      	bx	lr
 8011640:	08011645 	.word	0x08011645

08011644 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011644:	b480      	push	{r7}
 8011646:	b085      	sub	sp, #20
 8011648:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801164a:	2300      	movs	r3, #0
 801164c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801164e:	4b12      	ldr	r3, [pc, #72]	; (8011698 <prvTaskExitError+0x54>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011656:	d00a      	beq.n	801166e <prvTaskExitError+0x2a>
	__asm volatile
 8011658:	f04f 0350 	mov.w	r3, #80	; 0x50
 801165c:	f383 8811 	msr	BASEPRI, r3
 8011660:	f3bf 8f6f 	isb	sy
 8011664:	f3bf 8f4f 	dsb	sy
 8011668:	60fb      	str	r3, [r7, #12]
}
 801166a:	bf00      	nop
 801166c:	e7fe      	b.n	801166c <prvTaskExitError+0x28>
	__asm volatile
 801166e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011672:	f383 8811 	msr	BASEPRI, r3
 8011676:	f3bf 8f6f 	isb	sy
 801167a:	f3bf 8f4f 	dsb	sy
 801167e:	60bb      	str	r3, [r7, #8]
}
 8011680:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011682:	bf00      	nop
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d0fc      	beq.n	8011684 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801168a:	bf00      	nop
 801168c:	bf00      	nop
 801168e:	3714      	adds	r7, #20
 8011690:	46bd      	mov	sp, r7
 8011692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011696:	4770      	bx	lr
 8011698:	20000014 	.word	0x20000014
 801169c:	00000000 	.word	0x00000000

080116a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80116a0:	4b07      	ldr	r3, [pc, #28]	; (80116c0 <pxCurrentTCBConst2>)
 80116a2:	6819      	ldr	r1, [r3, #0]
 80116a4:	6808      	ldr	r0, [r1, #0]
 80116a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116aa:	f380 8809 	msr	PSP, r0
 80116ae:	f3bf 8f6f 	isb	sy
 80116b2:	f04f 0000 	mov.w	r0, #0
 80116b6:	f380 8811 	msr	BASEPRI, r0
 80116ba:	4770      	bx	lr
 80116bc:	f3af 8000 	nop.w

080116c0 <pxCurrentTCBConst2>:
 80116c0:	20000608 	.word	0x20000608
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80116c4:	bf00      	nop
 80116c6:	bf00      	nop

080116c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80116c8:	4808      	ldr	r0, [pc, #32]	; (80116ec <prvPortStartFirstTask+0x24>)
 80116ca:	6800      	ldr	r0, [r0, #0]
 80116cc:	6800      	ldr	r0, [r0, #0]
 80116ce:	f380 8808 	msr	MSP, r0
 80116d2:	f04f 0000 	mov.w	r0, #0
 80116d6:	f380 8814 	msr	CONTROL, r0
 80116da:	b662      	cpsie	i
 80116dc:	b661      	cpsie	f
 80116de:	f3bf 8f4f 	dsb	sy
 80116e2:	f3bf 8f6f 	isb	sy
 80116e6:	df00      	svc	0
 80116e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80116ea:	bf00      	nop
 80116ec:	e000ed08 	.word	0xe000ed08

080116f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b086      	sub	sp, #24
 80116f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80116f6:	4b46      	ldr	r3, [pc, #280]	; (8011810 <xPortStartScheduler+0x120>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	4a46      	ldr	r2, [pc, #280]	; (8011814 <xPortStartScheduler+0x124>)
 80116fc:	4293      	cmp	r3, r2
 80116fe:	d10a      	bne.n	8011716 <xPortStartScheduler+0x26>
	__asm volatile
 8011700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011704:	f383 8811 	msr	BASEPRI, r3
 8011708:	f3bf 8f6f 	isb	sy
 801170c:	f3bf 8f4f 	dsb	sy
 8011710:	613b      	str	r3, [r7, #16]
}
 8011712:	bf00      	nop
 8011714:	e7fe      	b.n	8011714 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011716:	4b3e      	ldr	r3, [pc, #248]	; (8011810 <xPortStartScheduler+0x120>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	4a3f      	ldr	r2, [pc, #252]	; (8011818 <xPortStartScheduler+0x128>)
 801171c:	4293      	cmp	r3, r2
 801171e:	d10a      	bne.n	8011736 <xPortStartScheduler+0x46>
	__asm volatile
 8011720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011724:	f383 8811 	msr	BASEPRI, r3
 8011728:	f3bf 8f6f 	isb	sy
 801172c:	f3bf 8f4f 	dsb	sy
 8011730:	60fb      	str	r3, [r7, #12]
}
 8011732:	bf00      	nop
 8011734:	e7fe      	b.n	8011734 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011736:	4b39      	ldr	r3, [pc, #228]	; (801181c <xPortStartScheduler+0x12c>)
 8011738:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801173a:	697b      	ldr	r3, [r7, #20]
 801173c:	781b      	ldrb	r3, [r3, #0]
 801173e:	b2db      	uxtb	r3, r3
 8011740:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	22ff      	movs	r2, #255	; 0xff
 8011746:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011748:	697b      	ldr	r3, [r7, #20]
 801174a:	781b      	ldrb	r3, [r3, #0]
 801174c:	b2db      	uxtb	r3, r3
 801174e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011750:	78fb      	ldrb	r3, [r7, #3]
 8011752:	b2db      	uxtb	r3, r3
 8011754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011758:	b2da      	uxtb	r2, r3
 801175a:	4b31      	ldr	r3, [pc, #196]	; (8011820 <xPortStartScheduler+0x130>)
 801175c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801175e:	4b31      	ldr	r3, [pc, #196]	; (8011824 <xPortStartScheduler+0x134>)
 8011760:	2207      	movs	r2, #7
 8011762:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011764:	e009      	b.n	801177a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011766:	4b2f      	ldr	r3, [pc, #188]	; (8011824 <xPortStartScheduler+0x134>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	3b01      	subs	r3, #1
 801176c:	4a2d      	ldr	r2, [pc, #180]	; (8011824 <xPortStartScheduler+0x134>)
 801176e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011770:	78fb      	ldrb	r3, [r7, #3]
 8011772:	b2db      	uxtb	r3, r3
 8011774:	005b      	lsls	r3, r3, #1
 8011776:	b2db      	uxtb	r3, r3
 8011778:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801177a:	78fb      	ldrb	r3, [r7, #3]
 801177c:	b2db      	uxtb	r3, r3
 801177e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011782:	2b80      	cmp	r3, #128	; 0x80
 8011784:	d0ef      	beq.n	8011766 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011786:	4b27      	ldr	r3, [pc, #156]	; (8011824 <xPortStartScheduler+0x134>)
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	f1c3 0307 	rsb	r3, r3, #7
 801178e:	2b04      	cmp	r3, #4
 8011790:	d00a      	beq.n	80117a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8011792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011796:	f383 8811 	msr	BASEPRI, r3
 801179a:	f3bf 8f6f 	isb	sy
 801179e:	f3bf 8f4f 	dsb	sy
 80117a2:	60bb      	str	r3, [r7, #8]
}
 80117a4:	bf00      	nop
 80117a6:	e7fe      	b.n	80117a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80117a8:	4b1e      	ldr	r3, [pc, #120]	; (8011824 <xPortStartScheduler+0x134>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	021b      	lsls	r3, r3, #8
 80117ae:	4a1d      	ldr	r2, [pc, #116]	; (8011824 <xPortStartScheduler+0x134>)
 80117b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80117b2:	4b1c      	ldr	r3, [pc, #112]	; (8011824 <xPortStartScheduler+0x134>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80117ba:	4a1a      	ldr	r2, [pc, #104]	; (8011824 <xPortStartScheduler+0x134>)
 80117bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	b2da      	uxtb	r2, r3
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80117c6:	4b18      	ldr	r3, [pc, #96]	; (8011828 <xPortStartScheduler+0x138>)
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	4a17      	ldr	r2, [pc, #92]	; (8011828 <xPortStartScheduler+0x138>)
 80117cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80117d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80117d2:	4b15      	ldr	r3, [pc, #84]	; (8011828 <xPortStartScheduler+0x138>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	4a14      	ldr	r2, [pc, #80]	; (8011828 <xPortStartScheduler+0x138>)
 80117d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80117dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80117de:	f000 f8dd 	bl	801199c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80117e2:	4b12      	ldr	r3, [pc, #72]	; (801182c <xPortStartScheduler+0x13c>)
 80117e4:	2200      	movs	r2, #0
 80117e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80117e8:	f000 f8fc 	bl	80119e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80117ec:	4b10      	ldr	r3, [pc, #64]	; (8011830 <xPortStartScheduler+0x140>)
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	4a0f      	ldr	r2, [pc, #60]	; (8011830 <xPortStartScheduler+0x140>)
 80117f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80117f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80117f8:	f7ff ff66 	bl	80116c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80117fc:	f7fe ff4c 	bl	8010698 <vTaskSwitchContext>
	prvTaskExitError();
 8011800:	f7ff ff20 	bl	8011644 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011804:	2300      	movs	r3, #0
}
 8011806:	4618      	mov	r0, r3
 8011808:	3718      	adds	r7, #24
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}
 801180e:	bf00      	nop
 8011810:	e000ed00 	.word	0xe000ed00
 8011814:	410fc271 	.word	0x410fc271
 8011818:	410fc270 	.word	0x410fc270
 801181c:	e000e400 	.word	0xe000e400
 8011820:	20000c34 	.word	0x20000c34
 8011824:	20000c38 	.word	0x20000c38
 8011828:	e000ed20 	.word	0xe000ed20
 801182c:	20000014 	.word	0x20000014
 8011830:	e000ef34 	.word	0xe000ef34

08011834 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011834:	b480      	push	{r7}
 8011836:	b083      	sub	sp, #12
 8011838:	af00      	add	r7, sp, #0
	__asm volatile
 801183a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801183e:	f383 8811 	msr	BASEPRI, r3
 8011842:	f3bf 8f6f 	isb	sy
 8011846:	f3bf 8f4f 	dsb	sy
 801184a:	607b      	str	r3, [r7, #4]
}
 801184c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801184e:	4b0f      	ldr	r3, [pc, #60]	; (801188c <vPortEnterCritical+0x58>)
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	3301      	adds	r3, #1
 8011854:	4a0d      	ldr	r2, [pc, #52]	; (801188c <vPortEnterCritical+0x58>)
 8011856:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011858:	4b0c      	ldr	r3, [pc, #48]	; (801188c <vPortEnterCritical+0x58>)
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	2b01      	cmp	r3, #1
 801185e:	d10f      	bne.n	8011880 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011860:	4b0b      	ldr	r3, [pc, #44]	; (8011890 <vPortEnterCritical+0x5c>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	b2db      	uxtb	r3, r3
 8011866:	2b00      	cmp	r3, #0
 8011868:	d00a      	beq.n	8011880 <vPortEnterCritical+0x4c>
	__asm volatile
 801186a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801186e:	f383 8811 	msr	BASEPRI, r3
 8011872:	f3bf 8f6f 	isb	sy
 8011876:	f3bf 8f4f 	dsb	sy
 801187a:	603b      	str	r3, [r7, #0]
}
 801187c:	bf00      	nop
 801187e:	e7fe      	b.n	801187e <vPortEnterCritical+0x4a>
	}
}
 8011880:	bf00      	nop
 8011882:	370c      	adds	r7, #12
 8011884:	46bd      	mov	sp, r7
 8011886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188a:	4770      	bx	lr
 801188c:	20000014 	.word	0x20000014
 8011890:	e000ed04 	.word	0xe000ed04

08011894 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011894:	b480      	push	{r7}
 8011896:	b083      	sub	sp, #12
 8011898:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801189a:	4b12      	ldr	r3, [pc, #72]	; (80118e4 <vPortExitCritical+0x50>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d10a      	bne.n	80118b8 <vPortExitCritical+0x24>
	__asm volatile
 80118a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a6:	f383 8811 	msr	BASEPRI, r3
 80118aa:	f3bf 8f6f 	isb	sy
 80118ae:	f3bf 8f4f 	dsb	sy
 80118b2:	607b      	str	r3, [r7, #4]
}
 80118b4:	bf00      	nop
 80118b6:	e7fe      	b.n	80118b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80118b8:	4b0a      	ldr	r3, [pc, #40]	; (80118e4 <vPortExitCritical+0x50>)
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	3b01      	subs	r3, #1
 80118be:	4a09      	ldr	r2, [pc, #36]	; (80118e4 <vPortExitCritical+0x50>)
 80118c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80118c2:	4b08      	ldr	r3, [pc, #32]	; (80118e4 <vPortExitCritical+0x50>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d105      	bne.n	80118d6 <vPortExitCritical+0x42>
 80118ca:	2300      	movs	r3, #0
 80118cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	f383 8811 	msr	BASEPRI, r3
}
 80118d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80118d6:	bf00      	nop
 80118d8:	370c      	adds	r7, #12
 80118da:	46bd      	mov	sp, r7
 80118dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e0:	4770      	bx	lr
 80118e2:	bf00      	nop
 80118e4:	20000014 	.word	0x20000014
	...

080118f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80118f0:	f3ef 8009 	mrs	r0, PSP
 80118f4:	f3bf 8f6f 	isb	sy
 80118f8:	4b15      	ldr	r3, [pc, #84]	; (8011950 <pxCurrentTCBConst>)
 80118fa:	681a      	ldr	r2, [r3, #0]
 80118fc:	f01e 0f10 	tst.w	lr, #16
 8011900:	bf08      	it	eq
 8011902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801190a:	6010      	str	r0, [r2, #0]
 801190c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011910:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011914:	f380 8811 	msr	BASEPRI, r0
 8011918:	f3bf 8f4f 	dsb	sy
 801191c:	f3bf 8f6f 	isb	sy
 8011920:	f7fe feba 	bl	8010698 <vTaskSwitchContext>
 8011924:	f04f 0000 	mov.w	r0, #0
 8011928:	f380 8811 	msr	BASEPRI, r0
 801192c:	bc09      	pop	{r0, r3}
 801192e:	6819      	ldr	r1, [r3, #0]
 8011930:	6808      	ldr	r0, [r1, #0]
 8011932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011936:	f01e 0f10 	tst.w	lr, #16
 801193a:	bf08      	it	eq
 801193c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011940:	f380 8809 	msr	PSP, r0
 8011944:	f3bf 8f6f 	isb	sy
 8011948:	4770      	bx	lr
 801194a:	bf00      	nop
 801194c:	f3af 8000 	nop.w

08011950 <pxCurrentTCBConst>:
 8011950:	20000608 	.word	0x20000608
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011954:	bf00      	nop
 8011956:	bf00      	nop

08011958 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b082      	sub	sp, #8
 801195c:	af00      	add	r7, sp, #0
	__asm volatile
 801195e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011962:	f383 8811 	msr	BASEPRI, r3
 8011966:	f3bf 8f6f 	isb	sy
 801196a:	f3bf 8f4f 	dsb	sy
 801196e:	607b      	str	r3, [r7, #4]
}
 8011970:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011972:	f7fe fdd7 	bl	8010524 <xTaskIncrementTick>
 8011976:	4603      	mov	r3, r0
 8011978:	2b00      	cmp	r3, #0
 801197a:	d003      	beq.n	8011984 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801197c:	4b06      	ldr	r3, [pc, #24]	; (8011998 <xPortSysTickHandler+0x40>)
 801197e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011982:	601a      	str	r2, [r3, #0]
 8011984:	2300      	movs	r3, #0
 8011986:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	f383 8811 	msr	BASEPRI, r3
}
 801198e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011990:	bf00      	nop
 8011992:	3708      	adds	r7, #8
 8011994:	46bd      	mov	sp, r7
 8011996:	bd80      	pop	{r7, pc}
 8011998:	e000ed04 	.word	0xe000ed04

0801199c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801199c:	b480      	push	{r7}
 801199e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80119a0:	4b0b      	ldr	r3, [pc, #44]	; (80119d0 <vPortSetupTimerInterrupt+0x34>)
 80119a2:	2200      	movs	r2, #0
 80119a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80119a6:	4b0b      	ldr	r3, [pc, #44]	; (80119d4 <vPortSetupTimerInterrupt+0x38>)
 80119a8:	2200      	movs	r2, #0
 80119aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80119ac:	4b0a      	ldr	r3, [pc, #40]	; (80119d8 <vPortSetupTimerInterrupt+0x3c>)
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	4a0a      	ldr	r2, [pc, #40]	; (80119dc <vPortSetupTimerInterrupt+0x40>)
 80119b2:	fba2 2303 	umull	r2, r3, r2, r3
 80119b6:	099b      	lsrs	r3, r3, #6
 80119b8:	4a09      	ldr	r2, [pc, #36]	; (80119e0 <vPortSetupTimerInterrupt+0x44>)
 80119ba:	3b01      	subs	r3, #1
 80119bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80119be:	4b04      	ldr	r3, [pc, #16]	; (80119d0 <vPortSetupTimerInterrupt+0x34>)
 80119c0:	2207      	movs	r2, #7
 80119c2:	601a      	str	r2, [r3, #0]
}
 80119c4:	bf00      	nop
 80119c6:	46bd      	mov	sp, r7
 80119c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119cc:	4770      	bx	lr
 80119ce:	bf00      	nop
 80119d0:	e000e010 	.word	0xe000e010
 80119d4:	e000e018 	.word	0xe000e018
 80119d8:	20000008 	.word	0x20000008
 80119dc:	10624dd3 	.word	0x10624dd3
 80119e0:	e000e014 	.word	0xe000e014

080119e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80119e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80119f4 <vPortEnableVFP+0x10>
 80119e8:	6801      	ldr	r1, [r0, #0]
 80119ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80119ee:	6001      	str	r1, [r0, #0]
 80119f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80119f2:	bf00      	nop
 80119f4:	e000ed88 	.word	0xe000ed88

080119f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80119f8:	b480      	push	{r7}
 80119fa:	b085      	sub	sp, #20
 80119fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80119fe:	f3ef 8305 	mrs	r3, IPSR
 8011a02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	2b0f      	cmp	r3, #15
 8011a08:	d914      	bls.n	8011a34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011a0a:	4a17      	ldr	r2, [pc, #92]	; (8011a68 <vPortValidateInterruptPriority+0x70>)
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	4413      	add	r3, r2
 8011a10:	781b      	ldrb	r3, [r3, #0]
 8011a12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011a14:	4b15      	ldr	r3, [pc, #84]	; (8011a6c <vPortValidateInterruptPriority+0x74>)
 8011a16:	781b      	ldrb	r3, [r3, #0]
 8011a18:	7afa      	ldrb	r2, [r7, #11]
 8011a1a:	429a      	cmp	r2, r3
 8011a1c:	d20a      	bcs.n	8011a34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8011a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a22:	f383 8811 	msr	BASEPRI, r3
 8011a26:	f3bf 8f6f 	isb	sy
 8011a2a:	f3bf 8f4f 	dsb	sy
 8011a2e:	607b      	str	r3, [r7, #4]
}
 8011a30:	bf00      	nop
 8011a32:	e7fe      	b.n	8011a32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011a34:	4b0e      	ldr	r3, [pc, #56]	; (8011a70 <vPortValidateInterruptPriority+0x78>)
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011a3c:	4b0d      	ldr	r3, [pc, #52]	; (8011a74 <vPortValidateInterruptPriority+0x7c>)
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d90a      	bls.n	8011a5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a48:	f383 8811 	msr	BASEPRI, r3
 8011a4c:	f3bf 8f6f 	isb	sy
 8011a50:	f3bf 8f4f 	dsb	sy
 8011a54:	603b      	str	r3, [r7, #0]
}
 8011a56:	bf00      	nop
 8011a58:	e7fe      	b.n	8011a58 <vPortValidateInterruptPriority+0x60>
	}
 8011a5a:	bf00      	nop
 8011a5c:	3714      	adds	r7, #20
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a64:	4770      	bx	lr
 8011a66:	bf00      	nop
 8011a68:	e000e3f0 	.word	0xe000e3f0
 8011a6c:	20000c34 	.word	0x20000c34
 8011a70:	e000ed0c 	.word	0xe000ed0c
 8011a74:	20000c38 	.word	0x20000c38

08011a78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b08a      	sub	sp, #40	; 0x28
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011a80:	2300      	movs	r3, #0
 8011a82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011a84:	f7fe fc80 	bl	8010388 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011a88:	4b5b      	ldr	r3, [pc, #364]	; (8011bf8 <pvPortMalloc+0x180>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d101      	bne.n	8011a94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011a90:	f000 f920 	bl	8011cd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011a94:	4b59      	ldr	r3, [pc, #356]	; (8011bfc <pvPortMalloc+0x184>)
 8011a96:	681a      	ldr	r2, [r3, #0]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	4013      	ands	r3, r2
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	f040 8093 	bne.w	8011bc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d01d      	beq.n	8011ae4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011aa8:	2208      	movs	r2, #8
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	4413      	add	r3, r2
 8011aae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f003 0307 	and.w	r3, r3, #7
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d014      	beq.n	8011ae4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f023 0307 	bic.w	r3, r3, #7
 8011ac0:	3308      	adds	r3, #8
 8011ac2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f003 0307 	and.w	r3, r3, #7
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d00a      	beq.n	8011ae4 <pvPortMalloc+0x6c>
	__asm volatile
 8011ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ad2:	f383 8811 	msr	BASEPRI, r3
 8011ad6:	f3bf 8f6f 	isb	sy
 8011ada:	f3bf 8f4f 	dsb	sy
 8011ade:	617b      	str	r3, [r7, #20]
}
 8011ae0:	bf00      	nop
 8011ae2:	e7fe      	b.n	8011ae2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d06e      	beq.n	8011bc8 <pvPortMalloc+0x150>
 8011aea:	4b45      	ldr	r3, [pc, #276]	; (8011c00 <pvPortMalloc+0x188>)
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	687a      	ldr	r2, [r7, #4]
 8011af0:	429a      	cmp	r2, r3
 8011af2:	d869      	bhi.n	8011bc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011af4:	4b43      	ldr	r3, [pc, #268]	; (8011c04 <pvPortMalloc+0x18c>)
 8011af6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011af8:	4b42      	ldr	r3, [pc, #264]	; (8011c04 <pvPortMalloc+0x18c>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011afe:	e004      	b.n	8011b0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	687a      	ldr	r2, [r7, #4]
 8011b10:	429a      	cmp	r2, r3
 8011b12:	d903      	bls.n	8011b1c <pvPortMalloc+0xa4>
 8011b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d1f1      	bne.n	8011b00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011b1c:	4b36      	ldr	r3, [pc, #216]	; (8011bf8 <pvPortMalloc+0x180>)
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b22:	429a      	cmp	r2, r3
 8011b24:	d050      	beq.n	8011bc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011b26:	6a3b      	ldr	r3, [r7, #32]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	2208      	movs	r2, #8
 8011b2c:	4413      	add	r3, r2
 8011b2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b32:	681a      	ldr	r2, [r3, #0]
 8011b34:	6a3b      	ldr	r3, [r7, #32]
 8011b36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3a:	685a      	ldr	r2, [r3, #4]
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	1ad2      	subs	r2, r2, r3
 8011b40:	2308      	movs	r3, #8
 8011b42:	005b      	lsls	r3, r3, #1
 8011b44:	429a      	cmp	r2, r3
 8011b46:	d91f      	bls.n	8011b88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	4413      	add	r3, r2
 8011b4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b50:	69bb      	ldr	r3, [r7, #24]
 8011b52:	f003 0307 	and.w	r3, r3, #7
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d00a      	beq.n	8011b70 <pvPortMalloc+0xf8>
	__asm volatile
 8011b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b5e:	f383 8811 	msr	BASEPRI, r3
 8011b62:	f3bf 8f6f 	isb	sy
 8011b66:	f3bf 8f4f 	dsb	sy
 8011b6a:	613b      	str	r3, [r7, #16]
}
 8011b6c:	bf00      	nop
 8011b6e:	e7fe      	b.n	8011b6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b72:	685a      	ldr	r2, [r3, #4]
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	1ad2      	subs	r2, r2, r3
 8011b78:	69bb      	ldr	r3, [r7, #24]
 8011b7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7e:	687a      	ldr	r2, [r7, #4]
 8011b80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011b82:	69b8      	ldr	r0, [r7, #24]
 8011b84:	f000 f908 	bl	8011d98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011b88:	4b1d      	ldr	r3, [pc, #116]	; (8011c00 <pvPortMalloc+0x188>)
 8011b8a:	681a      	ldr	r2, [r3, #0]
 8011b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8e:	685b      	ldr	r3, [r3, #4]
 8011b90:	1ad3      	subs	r3, r2, r3
 8011b92:	4a1b      	ldr	r2, [pc, #108]	; (8011c00 <pvPortMalloc+0x188>)
 8011b94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011b96:	4b1a      	ldr	r3, [pc, #104]	; (8011c00 <pvPortMalloc+0x188>)
 8011b98:	681a      	ldr	r2, [r3, #0]
 8011b9a:	4b1b      	ldr	r3, [pc, #108]	; (8011c08 <pvPortMalloc+0x190>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d203      	bcs.n	8011baa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011ba2:	4b17      	ldr	r3, [pc, #92]	; (8011c00 <pvPortMalloc+0x188>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	4a18      	ldr	r2, [pc, #96]	; (8011c08 <pvPortMalloc+0x190>)
 8011ba8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bac:	685a      	ldr	r2, [r3, #4]
 8011bae:	4b13      	ldr	r3, [pc, #76]	; (8011bfc <pvPortMalloc+0x184>)
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	431a      	orrs	r2, r3
 8011bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bba:	2200      	movs	r2, #0
 8011bbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011bbe:	4b13      	ldr	r3, [pc, #76]	; (8011c0c <pvPortMalloc+0x194>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	4a11      	ldr	r2, [pc, #68]	; (8011c0c <pvPortMalloc+0x194>)
 8011bc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011bc8:	f7fe fbec 	bl	80103a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011bcc:	69fb      	ldr	r3, [r7, #28]
 8011bce:	f003 0307 	and.w	r3, r3, #7
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d00a      	beq.n	8011bec <pvPortMalloc+0x174>
	__asm volatile
 8011bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bda:	f383 8811 	msr	BASEPRI, r3
 8011bde:	f3bf 8f6f 	isb	sy
 8011be2:	f3bf 8f4f 	dsb	sy
 8011be6:	60fb      	str	r3, [r7, #12]
}
 8011be8:	bf00      	nop
 8011bea:	e7fe      	b.n	8011bea <pvPortMalloc+0x172>
	return pvReturn;
 8011bec:	69fb      	ldr	r3, [r7, #28]
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	3728      	adds	r7, #40	; 0x28
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bd80      	pop	{r7, pc}
 8011bf6:	bf00      	nop
 8011bf8:	20007b0c 	.word	0x20007b0c
 8011bfc:	20007b20 	.word	0x20007b20
 8011c00:	20007b10 	.word	0x20007b10
 8011c04:	20007b04 	.word	0x20007b04
 8011c08:	20007b14 	.word	0x20007b14
 8011c0c:	20007b18 	.word	0x20007b18

08011c10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b086      	sub	sp, #24
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d04d      	beq.n	8011cbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011c22:	2308      	movs	r3, #8
 8011c24:	425b      	negs	r3, r3
 8011c26:	697a      	ldr	r2, [r7, #20]
 8011c28:	4413      	add	r3, r2
 8011c2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	685a      	ldr	r2, [r3, #4]
 8011c34:	4b24      	ldr	r3, [pc, #144]	; (8011cc8 <vPortFree+0xb8>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	4013      	ands	r3, r2
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d10a      	bne.n	8011c54 <vPortFree+0x44>
	__asm volatile
 8011c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c42:	f383 8811 	msr	BASEPRI, r3
 8011c46:	f3bf 8f6f 	isb	sy
 8011c4a:	f3bf 8f4f 	dsb	sy
 8011c4e:	60fb      	str	r3, [r7, #12]
}
 8011c50:	bf00      	nop
 8011c52:	e7fe      	b.n	8011c52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d00a      	beq.n	8011c72 <vPortFree+0x62>
	__asm volatile
 8011c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c60:	f383 8811 	msr	BASEPRI, r3
 8011c64:	f3bf 8f6f 	isb	sy
 8011c68:	f3bf 8f4f 	dsb	sy
 8011c6c:	60bb      	str	r3, [r7, #8]
}
 8011c6e:	bf00      	nop
 8011c70:	e7fe      	b.n	8011c70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	685a      	ldr	r2, [r3, #4]
 8011c76:	4b14      	ldr	r3, [pc, #80]	; (8011cc8 <vPortFree+0xb8>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	4013      	ands	r3, r2
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d01e      	beq.n	8011cbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011c80:	693b      	ldr	r3, [r7, #16]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d11a      	bne.n	8011cbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011c88:	693b      	ldr	r3, [r7, #16]
 8011c8a:	685a      	ldr	r2, [r3, #4]
 8011c8c:	4b0e      	ldr	r3, [pc, #56]	; (8011cc8 <vPortFree+0xb8>)
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	43db      	mvns	r3, r3
 8011c92:	401a      	ands	r2, r3
 8011c94:	693b      	ldr	r3, [r7, #16]
 8011c96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011c98:	f7fe fb76 	bl	8010388 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011c9c:	693b      	ldr	r3, [r7, #16]
 8011c9e:	685a      	ldr	r2, [r3, #4]
 8011ca0:	4b0a      	ldr	r3, [pc, #40]	; (8011ccc <vPortFree+0xbc>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	4413      	add	r3, r2
 8011ca6:	4a09      	ldr	r2, [pc, #36]	; (8011ccc <vPortFree+0xbc>)
 8011ca8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011caa:	6938      	ldr	r0, [r7, #16]
 8011cac:	f000 f874 	bl	8011d98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011cb0:	4b07      	ldr	r3, [pc, #28]	; (8011cd0 <vPortFree+0xc0>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	3301      	adds	r3, #1
 8011cb6:	4a06      	ldr	r2, [pc, #24]	; (8011cd0 <vPortFree+0xc0>)
 8011cb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011cba:	f7fe fb73 	bl	80103a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011cbe:	bf00      	nop
 8011cc0:	3718      	adds	r7, #24
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd80      	pop	{r7, pc}
 8011cc6:	bf00      	nop
 8011cc8:	20007b20 	.word	0x20007b20
 8011ccc:	20007b10 	.word	0x20007b10
 8011cd0:	20007b1c 	.word	0x20007b1c

08011cd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011cd4:	b480      	push	{r7}
 8011cd6:	b085      	sub	sp, #20
 8011cd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011cda:	f646 63c8 	movw	r3, #28360	; 0x6ec8
 8011cde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011ce0:	4b27      	ldr	r3, [pc, #156]	; (8011d80 <prvHeapInit+0xac>)
 8011ce2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	f003 0307 	and.w	r3, r3, #7
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d00c      	beq.n	8011d08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	3307      	adds	r3, #7
 8011cf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	f023 0307 	bic.w	r3, r3, #7
 8011cfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011cfc:	68ba      	ldr	r2, [r7, #8]
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	1ad3      	subs	r3, r2, r3
 8011d02:	4a1f      	ldr	r2, [pc, #124]	; (8011d80 <prvHeapInit+0xac>)
 8011d04:	4413      	add	r3, r2
 8011d06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011d0c:	4a1d      	ldr	r2, [pc, #116]	; (8011d84 <prvHeapInit+0xb0>)
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011d12:	4b1c      	ldr	r3, [pc, #112]	; (8011d84 <prvHeapInit+0xb0>)
 8011d14:	2200      	movs	r2, #0
 8011d16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	68ba      	ldr	r2, [r7, #8]
 8011d1c:	4413      	add	r3, r2
 8011d1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011d20:	2208      	movs	r2, #8
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	1a9b      	subs	r3, r3, r2
 8011d26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	f023 0307 	bic.w	r3, r3, #7
 8011d2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	4a15      	ldr	r2, [pc, #84]	; (8011d88 <prvHeapInit+0xb4>)
 8011d34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011d36:	4b14      	ldr	r3, [pc, #80]	; (8011d88 <prvHeapInit+0xb4>)
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011d3e:	4b12      	ldr	r3, [pc, #72]	; (8011d88 <prvHeapInit+0xb4>)
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	2200      	movs	r2, #0
 8011d44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	68fa      	ldr	r2, [r7, #12]
 8011d4e:	1ad2      	subs	r2, r2, r3
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011d54:	4b0c      	ldr	r3, [pc, #48]	; (8011d88 <prvHeapInit+0xb4>)
 8011d56:	681a      	ldr	r2, [r3, #0]
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011d5c:	683b      	ldr	r3, [r7, #0]
 8011d5e:	685b      	ldr	r3, [r3, #4]
 8011d60:	4a0a      	ldr	r2, [pc, #40]	; (8011d8c <prvHeapInit+0xb8>)
 8011d62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011d64:	683b      	ldr	r3, [r7, #0]
 8011d66:	685b      	ldr	r3, [r3, #4]
 8011d68:	4a09      	ldr	r2, [pc, #36]	; (8011d90 <prvHeapInit+0xbc>)
 8011d6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011d6c:	4b09      	ldr	r3, [pc, #36]	; (8011d94 <prvHeapInit+0xc0>)
 8011d6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011d72:	601a      	str	r2, [r3, #0]
}
 8011d74:	bf00      	nop
 8011d76:	3714      	adds	r7, #20
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7e:	4770      	bx	lr
 8011d80:	20000c3c 	.word	0x20000c3c
 8011d84:	20007b04 	.word	0x20007b04
 8011d88:	20007b0c 	.word	0x20007b0c
 8011d8c:	20007b14 	.word	0x20007b14
 8011d90:	20007b10 	.word	0x20007b10
 8011d94:	20007b20 	.word	0x20007b20

08011d98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011d98:	b480      	push	{r7}
 8011d9a:	b085      	sub	sp, #20
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011da0:	4b28      	ldr	r3, [pc, #160]	; (8011e44 <prvInsertBlockIntoFreeList+0xac>)
 8011da2:	60fb      	str	r3, [r7, #12]
 8011da4:	e002      	b.n	8011dac <prvInsertBlockIntoFreeList+0x14>
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	60fb      	str	r3, [r7, #12]
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	687a      	ldr	r2, [r7, #4]
 8011db2:	429a      	cmp	r2, r3
 8011db4:	d8f7      	bhi.n	8011da6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	685b      	ldr	r3, [r3, #4]
 8011dbe:	68ba      	ldr	r2, [r7, #8]
 8011dc0:	4413      	add	r3, r2
 8011dc2:	687a      	ldr	r2, [r7, #4]
 8011dc4:	429a      	cmp	r2, r3
 8011dc6:	d108      	bne.n	8011dda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	685a      	ldr	r2, [r3, #4]
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	685b      	ldr	r3, [r3, #4]
 8011dd0:	441a      	add	r2, r3
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	685b      	ldr	r3, [r3, #4]
 8011de2:	68ba      	ldr	r2, [r7, #8]
 8011de4:	441a      	add	r2, r3
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d118      	bne.n	8011e20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	681a      	ldr	r2, [r3, #0]
 8011df2:	4b15      	ldr	r3, [pc, #84]	; (8011e48 <prvInsertBlockIntoFreeList+0xb0>)
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	429a      	cmp	r2, r3
 8011df8:	d00d      	beq.n	8011e16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	685a      	ldr	r2, [r3, #4]
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	685b      	ldr	r3, [r3, #4]
 8011e04:	441a      	add	r2, r3
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	681a      	ldr	r2, [r3, #0]
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	601a      	str	r2, [r3, #0]
 8011e14:	e008      	b.n	8011e28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011e16:	4b0c      	ldr	r3, [pc, #48]	; (8011e48 <prvInsertBlockIntoFreeList+0xb0>)
 8011e18:	681a      	ldr	r2, [r3, #0]
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	601a      	str	r2, [r3, #0]
 8011e1e:	e003      	b.n	8011e28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	681a      	ldr	r2, [r3, #0]
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011e28:	68fa      	ldr	r2, [r7, #12]
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	429a      	cmp	r2, r3
 8011e2e:	d002      	beq.n	8011e36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	687a      	ldr	r2, [r7, #4]
 8011e34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011e36:	bf00      	nop
 8011e38:	3714      	adds	r7, #20
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e40:	4770      	bx	lr
 8011e42:	bf00      	nop
 8011e44:	20007b04 	.word	0x20007b04
 8011e48:	20007b0c 	.word	0x20007b0c

08011e4c <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8011e4c:	b480      	push	{r7}
 8011e4e:	af00      	add	r7, sp, #0
}
 8011e50:	bf00      	nop
 8011e52:	46bd      	mov	sp, r7
 8011e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e58:	4770      	bx	lr

08011e5a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8011e5a:	b580      	push	{r7, lr}
 8011e5c:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 8011e5e:	f005 fd45 	bl	80178ec <touchgfx_init>
}
 8011e62:	bf00      	nop
 8011e64:	bd80      	pop	{r7, pc}

08011e66 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 8011e66:	b580      	push	{r7, lr}
 8011e68:	b082      	sub	sp, #8
 8011e6a:	af00      	add	r7, sp, #0
 8011e6c:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8011e6e:	f005 fd67 	bl	8017940 <touchgfx_taskEntry>
}
 8011e72:	bf00      	nop
 8011e74:	3708      	adds	r7, #8
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
	...

08011e7c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8011e7c:	b480      	push	{r7}
 8011e7e:	b083      	sub	sp, #12
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
    {
 8011e84:	4a04      	ldr	r2, [pc, #16]	; (8011e98 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	601a      	str	r2, [r3, #0]
    }
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	370c      	adds	r7, #12
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr
 8011e98:	0802bb58 	.word	0x0802bb58

08011e9c <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	b082      	sub	sp, #8
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
    }
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	f7ff ffe9 	bl	8011e7c <_ZN8touchgfx12FontProviderD1Ev>
 8011eaa:	2104      	movs	r1, #4
 8011eac:	6878      	ldr	r0, [r7, #4]
 8011eae:	f017 fc88 	bl	80297c2 <_ZdlPvj>
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	3708      	adds	r7, #8
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd80      	pop	{r7, pc}

08011ebc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b082      	sub	sp, #8
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
 8011ec4:	460b      	mov	r3, r1
 8011ec6:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8011ec8:	887b      	ldrh	r3, [r7, #2]
 8011eca:	2b02      	cmp	r3, #2
 8011ecc:	d010      	beq.n	8011ef0 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8011ece:	2b02      	cmp	r3, #2
 8011ed0:	dc13      	bgt.n	8011efa <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d002      	beq.n	8011edc <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8011ed6:	2b01      	cmp	r3, #1
 8011ed8:	d005      	beq.n	8011ee6 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8011eda:	e00e      	b.n	8011efa <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::SENSOR_LABEL:
        // bahnschrift_25_2bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8011edc:	f004 f81a 	bl	8015f14 <_ZN17TypedTextDatabase8getFontsEv>
 8011ee0:	4603      	mov	r3, r0
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	e00a      	b.n	8011efc <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SENSOR_UNIT:
        // bahnschrift_25_2bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8011ee6:	f004 f815 	bl	8015f14 <_ZN17TypedTextDatabase8getFontsEv>
 8011eea:	4603      	mov	r3, r0
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	e005      	b.n	8011efc <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SENSOR_VALUES:
        // bahnschrift_80_2bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8011ef0:	f004 f810 	bl	8015f14 <_ZN17TypedTextDatabase8getFontsEv>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	685b      	ldr	r3, [r3, #4]
 8011ef8:	e000      	b.n	8011efc <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8011efa:	2300      	movs	r3, #0
    }
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	3708      	adds	r7, #8
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}

08011f04 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SENSOR_UNIT = 0;   // bahnschrift_25_2bpp
    static const touchgfx::FontId SENSOR_VALUES = 1; // bahnschrift_80_2bpp
    static const uint16_t NUMBER_OF_FONTS = 2;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b082      	sub	sp, #8
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
 8011f0c:	4a05      	ldr	r2, [pc, #20]	; (8011f24 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	601a      	str	r2, [r3, #0]
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	4618      	mov	r0, r3
 8011f16:	f7ff ffb1 	bl	8011e7c <_ZN8touchgfx12FontProviderD1Ev>
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	3708      	adds	r7, #8
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bd80      	pop	{r7, pc}
 8011f24:	0802bb44 	.word	0x0802bb44

08011f28 <_ZN23ApplicationFontProviderD0Ev>:
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b082      	sub	sp, #8
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
 8011f30:	6878      	ldr	r0, [r7, #4]
 8011f32:	f7ff ffe7 	bl	8011f04 <_ZN23ApplicationFontProviderD1Ev>
 8011f36:	2104      	movs	r1, #4
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f017 fc42 	bl	80297c2 <_ZdlPvj>
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	4618      	mov	r0, r3
 8011f42:	3708      	adds	r7, #8
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}

08011f48 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8011f48:	b480      	push	{r7}
 8011f4a:	b083      	sub	sp, #12
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
    {
 8011f50:	4a04      	ldr	r2, [pc, #16]	; (8011f64 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	601a      	str	r2, [r3, #0]
    }
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	4618      	mov	r0, r3
 8011f5a:	370c      	adds	r7, #12
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f62:	4770      	bx	lr
 8011f64:	0802c118 	.word	0x0802c118

08011f68 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b082      	sub	sp, #8
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
    }
 8011f70:	6878      	ldr	r0, [r7, #4]
 8011f72:	f7ff ffe9 	bl	8011f48 <_ZN8touchgfx4FontD1Ev>
 8011f76:	2110      	movs	r1, #16
 8011f78:	6878      	ldr	r0, [r7, #4]
 8011f7a:	f017 fc22 	bl	80297c2 <_ZdlPvj>
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	4618      	mov	r0, r3
 8011f82:	3708      	adds	r7, #8
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}

08011f88 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8011f88:	b590      	push	{r4, r7, lr}
 8011f8a:	b087      	sub	sp, #28
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	460b      	mov	r3, r1
 8011f92:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8011f94:	887b      	ldrh	r3, [r7, #2]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d101      	bne.n	8011f9e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	e010      	b.n	8011fc0 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	3308      	adds	r3, #8
 8011fac:	681c      	ldr	r4, [r3, #0]
 8011fae:	f107 030f 	add.w	r3, r7, #15
 8011fb2:	f107 0210 	add.w	r2, r7, #16
 8011fb6:	8879      	ldrh	r1, [r7, #2]
 8011fb8:	6878      	ldr	r0, [r7, #4]
 8011fba:	47a0      	blx	r4
 8011fbc:	6178      	str	r0, [r7, #20]
        return glyph;
 8011fbe:	697b      	ldr	r3, [r7, #20]
    }
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	371c      	adds	r7, #28
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd90      	pop	{r4, r7, pc}

08011fc8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8011fc8:	b480      	push	{r7}
 8011fca:	b083      	sub	sp, #12
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	895b      	ldrh	r3, [r3, #10]
    }
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	370c      	adds	r7, #12
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fde:	4770      	bx	lr

08011fe0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8011fe0:	b480      	push	{r7}
 8011fe2:	b083      	sub	sp, #12
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	899b      	ldrh	r3, [r3, #12]
    }
 8011fec:	4618      	mov	r0, r3
 8011fee:	370c      	adds	r7, #12
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff6:	4770      	bx	lr

08011ff8 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8011ff8:	b480      	push	{r7}
 8011ffa:	b083      	sub	sp, #12
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	889b      	ldrh	r3, [r3, #4]
    }
 8012004:	4618      	mov	r0, r3
 8012006:	370c      	adds	r7, #12
 8012008:	46bd      	mov	sp, r7
 801200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200e:	4770      	bx	lr

08012010 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8012010:	b480      	push	{r7}
 8012012:	b083      	sub	sp, #12
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	889a      	ldrh	r2, [r3, #4]
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	799b      	ldrb	r3, [r3, #6]
 8012020:	b29b      	uxth	r3, r3
 8012022:	4413      	add	r3, r2
 8012024:	b29b      	uxth	r3, r3
    }
 8012026:	4618      	mov	r0, r3
 8012028:	370c      	adds	r7, #12
 801202a:	46bd      	mov	sp, r7
 801202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012030:	4770      	bx	lr

08012032 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8012032:	b480      	push	{r7}
 8012034:	b083      	sub	sp, #12
 8012036:	af00      	add	r7, sp, #0
 8012038:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	79db      	ldrb	r3, [r3, #7]
 801203e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8012042:	b2db      	uxtb	r3, r3
    }
 8012044:	4618      	mov	r0, r3
 8012046:	370c      	adds	r7, #12
 8012048:	46bd      	mov	sp, r7
 801204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801204e:	4770      	bx	lr

08012050 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8012050:	b480      	push	{r7}
 8012052:	b083      	sub	sp, #12
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	79db      	ldrb	r3, [r3, #7]
 801205c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012060:	b2db      	uxtb	r3, r3
    }
 8012062:	4618      	mov	r0, r3
 8012064:	370c      	adds	r7, #12
 8012066:	46bd      	mov	sp, r7
 8012068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206c:	4770      	bx	lr
	...

08012070 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8012070:	b580      	push	{r7, lr}
 8012072:	b082      	sub	sp, #8
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
 8012078:	4a05      	ldr	r2, [pc, #20]	; (8012090 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	601a      	str	r2, [r3, #0]
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	4618      	mov	r0, r3
 8012082:	f7ff ff61 	bl	8011f48 <_ZN8touchgfx4FontD1Ev>
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	4618      	mov	r0, r3
 801208a:	3708      	adds	r7, #8
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}
 8012090:	0802cbfc 	.word	0x0802cbfc

08012094 <_ZN8touchgfx9ConstFontD0Ev>:
 8012094:	b580      	push	{r7, lr}
 8012096:	b082      	sub	sp, #8
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6878      	ldr	r0, [r7, #4]
 801209e:	f7ff ffe7 	bl	8012070 <_ZN8touchgfx9ConstFontD1Ev>
 80120a2:	2118      	movs	r1, #24
 80120a4:	6878      	ldr	r0, [r7, #4]
 80120a6:	f017 fb8c 	bl	80297c2 <_ZdlPvj>
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	4618      	mov	r0, r3
 80120ae:	3708      	adds	r7, #8
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd80      	pop	{r7, pc}

080120b4 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b082      	sub	sp, #8
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
 80120bc:	4a05      	ldr	r2, [pc, #20]	; (80120d4 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	601a      	str	r2, [r3, #0]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	4618      	mov	r0, r3
 80120c6:	f7ff ffd3 	bl	8012070 <_ZN8touchgfx9ConstFontD1Ev>
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	4618      	mov	r0, r3
 80120ce:	3708      	adds	r7, #8
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd80      	pop	{r7, pc}
 80120d4:	0802bb7c 	.word	0x0802bb7c

080120d8 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80120d8:	b580      	push	{r7, lr}
 80120da:	b082      	sub	sp, #8
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f7ff ffe7 	bl	80120b4 <_ZN8touchgfx13GeneratedFontD1Ev>
 80120e6:	2128      	movs	r1, #40	; 0x28
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f017 fb6a 	bl	80297c2 <_ZdlPvj>
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	4618      	mov	r0, r3
 80120f2:	3708      	adds	r7, #8
 80120f4:	46bd      	mov	sp, r7
 80120f6:	bd80      	pop	{r7, pc}

080120f8 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 80120f8:	b480      	push	{r7}
 80120fa:	b083      	sub	sp, #12
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
    {
 8012100:	4a04      	ldr	r2, [pc, #16]	; (8012114 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	601a      	str	r2, [r3, #0]
    }
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	4618      	mov	r0, r3
 801210a:	370c      	adds	r7, #12
 801210c:	46bd      	mov	sp, r7
 801210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012112:	4770      	bx	lr
 8012114:	0802bb6c 	.word	0x0802bb6c

08012118 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8012118:	b580      	push	{r7, lr}
 801211a:	b082      	sub	sp, #8
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
    }
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f7ff ffe9 	bl	80120f8 <_ZN8touchgfx9TypedTextD1Ev>
 8012126:	2108      	movs	r1, #8
 8012128:	6878      	ldr	r0, [r7, #4]
 801212a:	f017 fb4a 	bl	80297c2 <_ZdlPvj>
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	4618      	mov	r0, r3
 8012132:	3708      	adds	r7, #8
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}

08012138 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8012138:	b480      	push	{r7}
 801213a:	b083      	sub	sp, #12
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	6a1b      	ldr	r3, [r3, #32]
    }
 8012144:	4618      	mov	r0, r3
 8012146:	370c      	adds	r7, #12
 8012148:	46bd      	mov	sp, r7
 801214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214e:	4770      	bx	lr

08012150 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8012150:	b480      	push	{r7}
 8012152:	b083      	sub	sp, #12
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 801215c:	4618      	mov	r0, r3
 801215e:	370c      	adds	r7, #12
 8012160:	46bd      	mov	sp, r7
 8012162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012166:	4770      	bx	lr

08012168 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8012168:	b580      	push	{r7, lr}
 801216a:	b08c      	sub	sp, #48	; 0x30
 801216c:	af08      	add	r7, sp, #32
 801216e:	60f8      	str	r0, [r7, #12]
 8012170:	60b9      	str	r1, [r7, #8]
 8012172:	4611      	mov	r1, r2
 8012174:	461a      	mov	r2, r3
 8012176:	460b      	mov	r3, r1
 8012178:	80fb      	strh	r3, [r7, #6]
 801217a:	4613      	mov	r3, r2
 801217c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 801217e:	68f8      	ldr	r0, [r7, #12]
 8012180:	88b9      	ldrh	r1, [r7, #4]
 8012182:	88fa      	ldrh	r2, [r7, #6]
 8012184:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012186:	9306      	str	r3, [sp, #24]
 8012188:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801218a:	9305      	str	r3, [sp, #20]
 801218c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012190:	9304      	str	r3, [sp, #16]
 8012192:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012196:	9303      	str	r3, [sp, #12]
 8012198:	f897 3020 	ldrb.w	r3, [r7, #32]
 801219c:	9302      	str	r3, [sp, #8]
 801219e:	7f3b      	ldrb	r3, [r7, #28]
 80121a0:	9301      	str	r3, [sp, #4]
 80121a2:	7e3b      	ldrb	r3, [r7, #24]
 80121a4:	9300      	str	r3, [sp, #0]
 80121a6:	460b      	mov	r3, r1
 80121a8:	68b9      	ldr	r1, [r7, #8]
 80121aa:	f00a f973 	bl	801c494 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80121ae:	4a0a      	ldr	r2, [pc, #40]	; (80121d8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	601a      	str	r2, [r3, #0]
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121b8:	619a      	str	r2, [r3, #24]
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121be:	61da      	str	r2, [r3, #28]
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80121c4:	621a      	str	r2, [r3, #32]
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80121ca:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	4618      	mov	r0, r3
 80121d0:	3710      	adds	r7, #16
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}
 80121d6:	bf00      	nop
 80121d8:	0802bb7c 	.word	0x0802bb7c

080121dc <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 80121dc:	b480      	push	{r7}
 80121de:	b085      	sub	sp, #20
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
 80121e4:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	699b      	ldr	r3, [r3, #24]
 80121ea:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80121ec:	683b      	ldr	r3, [r7, #0]
 80121ee:	889b      	ldrh	r3, [r3, #4]
 80121f0:	0adb      	lsrs	r3, r3, #11
 80121f2:	b29b      	uxth	r3, r3
 80121f4:	009b      	lsls	r3, r3, #2
 80121f6:	68fa      	ldr	r2, [r7, #12]
 80121f8:	4413      	add	r3, r2
 80121fa:	681a      	ldr	r2, [r3, #0]
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	4413      	add	r3, r2
}
 8012202:	4618      	mov	r0, r3
 8012204:	3714      	adds	r7, #20
 8012206:	46bd      	mov	sp, r7
 8012208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220c:	4770      	bx	lr

0801220e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 801220e:	b480      	push	{r7}
 8012210:	b089      	sub	sp, #36	; 0x24
 8012212:	af00      	add	r7, sp, #0
 8012214:	60f8      	str	r0, [r7, #12]
 8012216:	460b      	mov	r3, r1
 8012218:	607a      	str	r2, [r7, #4]
 801221a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d003      	beq.n	801222a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	7b1b      	ldrb	r3, [r3, #12]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d101      	bne.n	801222e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 801222a:	2300      	movs	r3, #0
 801222c:	e030      	b.n	8012290 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	69da      	ldr	r2, [r3, #28]
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8012236:	697b      	ldr	r3, [r7, #20]
 8012238:	7b5b      	ldrb	r3, [r3, #13]
 801223a:	021b      	lsls	r3, r3, #8
 801223c:	b21b      	sxth	r3, r3
 801223e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012242:	b219      	sxth	r1, r3
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	7adb      	ldrb	r3, [r3, #11]
 8012248:	b21b      	sxth	r3, r3
 801224a:	430b      	orrs	r3, r1
 801224c:	b21b      	sxth	r3, r3
 801224e:	b29b      	uxth	r3, r3
 8012250:	009b      	lsls	r3, r3, #2
 8012252:	4413      	add	r3, r2
 8012254:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	7b1b      	ldrb	r3, [r3, #12]
 801225a:	837b      	strh	r3, [r7, #26]
 801225c:	8b7b      	ldrh	r3, [r7, #26]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d015      	beq.n	801228e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8012262:	69fb      	ldr	r3, [r7, #28]
 8012264:	881b      	ldrh	r3, [r3, #0]
 8012266:	897a      	ldrh	r2, [r7, #10]
 8012268:	429a      	cmp	r2, r3
 801226a:	d103      	bne.n	8012274 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 801226c:	69fb      	ldr	r3, [r7, #28]
 801226e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8012272:	e00d      	b.n	8012290 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8012274:	69fb      	ldr	r3, [r7, #28]
 8012276:	881b      	ldrh	r3, [r3, #0]
 8012278:	897a      	ldrh	r2, [r7, #10]
 801227a:	429a      	cmp	r2, r3
 801227c:	d306      	bcc.n	801228c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 801227e:	8b7b      	ldrh	r3, [r7, #26]
 8012280:	3b01      	subs	r3, #1
 8012282:	837b      	strh	r3, [r7, #26]
 8012284:	69fb      	ldr	r3, [r7, #28]
 8012286:	3304      	adds	r3, #4
 8012288:	61fb      	str	r3, [r7, #28]
 801228a:	e7e7      	b.n	801225c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 801228c:	bf00      	nop
        }
    }
    return 0;
 801228e:	2300      	movs	r3, #0
}
 8012290:	4618      	mov	r0, r3
 8012292:	3724      	adds	r7, #36	; 0x24
 8012294:	46bd      	mov	sp, r7
 8012296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229a:	4770      	bx	lr

0801229c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_bahnschrift_25_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_bahnschrift_25_2bpp();

touchgfx::GeneratedFont& getFont_bahnschrift_25_2bpp()
{
    static touchgfx::GeneratedFont bahnschrift_25_2bpp(glyphs_bahnschrift_25_2bpp, 70, 25, 5, 2, 0, 1, 1, unicodes_bahnschrift_25_2bpp, kerning_bahnschrift_25_2bpp, 0, 0, 0, 0);
 801229c:	b580      	push	{r7, lr}
 801229e:	af00      	add	r7, sp, #0
 80122a0:	4801      	ldr	r0, [pc, #4]	; (80122a8 <__tcf_0+0xc>)
 80122a2:	f7ff ff07 	bl	80120b4 <_ZN8touchgfx13GeneratedFontD1Ev>
 80122a6:	bd80      	pop	{r7, pc}
 80122a8:	20007b24 	.word	0x20007b24

080122ac <_Z27getFont_bahnschrift_25_2bppv>:
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b08c      	sub	sp, #48	; 0x30
 80122b0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont bahnschrift_25_2bpp(glyphs_bahnschrift_25_2bpp, 70, 25, 5, 2, 0, 1, 1, unicodes_bahnschrift_25_2bpp, kerning_bahnschrift_25_2bpp, 0, 0, 0, 0);
 80122b2:	4b1f      	ldr	r3, [pc, #124]	; (8012330 <_Z27getFont_bahnschrift_25_2bppv+0x84>)
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	f3bf 8f5b 	dmb	ish
 80122ba:	b2db      	uxtb	r3, r3
 80122bc:	f003 0301 	and.w	r3, r3, #1
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	bf0c      	ite	eq
 80122c4:	2301      	moveq	r3, #1
 80122c6:	2300      	movne	r3, #0
 80122c8:	b2db      	uxtb	r3, r3
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d02c      	beq.n	8012328 <_Z27getFont_bahnschrift_25_2bppv+0x7c>
 80122ce:	4818      	ldr	r0, [pc, #96]	; (8012330 <_Z27getFont_bahnschrift_25_2bppv+0x84>)
 80122d0:	f017 fa79 	bl	80297c6 <__cxa_guard_acquire>
 80122d4:	4603      	mov	r3, r0
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	bf14      	ite	ne
 80122da:	2301      	movne	r3, #1
 80122dc:	2300      	moveq	r3, #0
 80122de:	b2db      	uxtb	r3, r3
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d021      	beq.n	8012328 <_Z27getFont_bahnschrift_25_2bppv+0x7c>
 80122e4:	2300      	movs	r3, #0
 80122e6:	930a      	str	r3, [sp, #40]	; 0x28
 80122e8:	2300      	movs	r3, #0
 80122ea:	9309      	str	r3, [sp, #36]	; 0x24
 80122ec:	2300      	movs	r3, #0
 80122ee:	9308      	str	r3, [sp, #32]
 80122f0:	2300      	movs	r3, #0
 80122f2:	9307      	str	r3, [sp, #28]
 80122f4:	4b0f      	ldr	r3, [pc, #60]	; (8012334 <_Z27getFont_bahnschrift_25_2bppv+0x88>)
 80122f6:	9306      	str	r3, [sp, #24]
 80122f8:	4b0f      	ldr	r3, [pc, #60]	; (8012338 <_Z27getFont_bahnschrift_25_2bppv+0x8c>)
 80122fa:	9305      	str	r3, [sp, #20]
 80122fc:	2301      	movs	r3, #1
 80122fe:	9304      	str	r3, [sp, #16]
 8012300:	2301      	movs	r3, #1
 8012302:	9303      	str	r3, [sp, #12]
 8012304:	2300      	movs	r3, #0
 8012306:	9302      	str	r3, [sp, #8]
 8012308:	2302      	movs	r3, #2
 801230a:	9301      	str	r3, [sp, #4]
 801230c:	2305      	movs	r3, #5
 801230e:	9300      	str	r3, [sp, #0]
 8012310:	2319      	movs	r3, #25
 8012312:	2246      	movs	r2, #70	; 0x46
 8012314:	4909      	ldr	r1, [pc, #36]	; (801233c <_Z27getFont_bahnschrift_25_2bppv+0x90>)
 8012316:	480a      	ldr	r0, [pc, #40]	; (8012340 <_Z27getFont_bahnschrift_25_2bppv+0x94>)
 8012318:	f7ff ff26 	bl	8012168 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 801231c:	4809      	ldr	r0, [pc, #36]	; (8012344 <_Z27getFont_bahnschrift_25_2bppv+0x98>)
 801231e:	f017 fa9d 	bl	802985c <atexit>
 8012322:	4803      	ldr	r0, [pc, #12]	; (8012330 <_Z27getFont_bahnschrift_25_2bppv+0x84>)
 8012324:	f017 fa5b 	bl	80297de <__cxa_guard_release>
    return bahnschrift_25_2bpp;
 8012328:	4b05      	ldr	r3, [pc, #20]	; (8012340 <_Z27getFont_bahnschrift_25_2bppv+0x94>)
}
 801232a:	4618      	mov	r0, r3
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}
 8012330:	20007b4c 	.word	0x20007b4c
 8012334:	08035fe4 	.word	0x08035fe4
 8012338:	08035fec 	.word	0x08035fec
 801233c:	0803583c 	.word	0x0803583c
 8012340:	20007b24 	.word	0x20007b24
 8012344:	0801229d 	.word	0x0801229d

08012348 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_bahnschrift_80_2bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_bahnschrift_80_2bpp();

touchgfx::GeneratedFont& getFont_bahnschrift_80_2bpp()
{
    static touchgfx::GeneratedFont bahnschrift_80_2bpp(glyphs_bahnschrift_80_2bpp, 70, 80, 16, 2, 0, 1, 1, unicodes_bahnschrift_80_2bpp, kerning_bahnschrift_80_2bpp, 0, 0, 0, 0);
 8012348:	b580      	push	{r7, lr}
 801234a:	af00      	add	r7, sp, #0
 801234c:	4801      	ldr	r0, [pc, #4]	; (8012354 <__tcf_0+0xc>)
 801234e:	f7ff feb1 	bl	80120b4 <_ZN8touchgfx13GeneratedFontD1Ev>
 8012352:	bd80      	pop	{r7, pc}
 8012354:	20007b50 	.word	0x20007b50

08012358 <_Z27getFont_bahnschrift_80_2bppv>:
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b08c      	sub	sp, #48	; 0x30
 801235c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont bahnschrift_80_2bpp(glyphs_bahnschrift_80_2bpp, 70, 80, 16, 2, 0, 1, 1, unicodes_bahnschrift_80_2bpp, kerning_bahnschrift_80_2bpp, 0, 0, 0, 0);
 801235e:	4b1f      	ldr	r3, [pc, #124]	; (80123dc <_Z27getFont_bahnschrift_80_2bppv+0x84>)
 8012360:	781b      	ldrb	r3, [r3, #0]
 8012362:	f3bf 8f5b 	dmb	ish
 8012366:	b2db      	uxtb	r3, r3
 8012368:	f003 0301 	and.w	r3, r3, #1
 801236c:	2b00      	cmp	r3, #0
 801236e:	bf0c      	ite	eq
 8012370:	2301      	moveq	r3, #1
 8012372:	2300      	movne	r3, #0
 8012374:	b2db      	uxtb	r3, r3
 8012376:	2b00      	cmp	r3, #0
 8012378:	d02c      	beq.n	80123d4 <_Z27getFont_bahnschrift_80_2bppv+0x7c>
 801237a:	4818      	ldr	r0, [pc, #96]	; (80123dc <_Z27getFont_bahnschrift_80_2bppv+0x84>)
 801237c:	f017 fa23 	bl	80297c6 <__cxa_guard_acquire>
 8012380:	4603      	mov	r3, r0
 8012382:	2b00      	cmp	r3, #0
 8012384:	bf14      	ite	ne
 8012386:	2301      	movne	r3, #1
 8012388:	2300      	moveq	r3, #0
 801238a:	b2db      	uxtb	r3, r3
 801238c:	2b00      	cmp	r3, #0
 801238e:	d021      	beq.n	80123d4 <_Z27getFont_bahnschrift_80_2bppv+0x7c>
 8012390:	2300      	movs	r3, #0
 8012392:	930a      	str	r3, [sp, #40]	; 0x28
 8012394:	2300      	movs	r3, #0
 8012396:	9309      	str	r3, [sp, #36]	; 0x24
 8012398:	2300      	movs	r3, #0
 801239a:	9308      	str	r3, [sp, #32]
 801239c:	2300      	movs	r3, #0
 801239e:	9307      	str	r3, [sp, #28]
 80123a0:	4b0f      	ldr	r3, [pc, #60]	; (80123e0 <_Z27getFont_bahnschrift_80_2bppv+0x88>)
 80123a2:	9306      	str	r3, [sp, #24]
 80123a4:	4b0f      	ldr	r3, [pc, #60]	; (80123e4 <_Z27getFont_bahnschrift_80_2bppv+0x8c>)
 80123a6:	9305      	str	r3, [sp, #20]
 80123a8:	2301      	movs	r3, #1
 80123aa:	9304      	str	r3, [sp, #16]
 80123ac:	2301      	movs	r3, #1
 80123ae:	9303      	str	r3, [sp, #12]
 80123b0:	2300      	movs	r3, #0
 80123b2:	9302      	str	r3, [sp, #8]
 80123b4:	2302      	movs	r3, #2
 80123b6:	9301      	str	r3, [sp, #4]
 80123b8:	2310      	movs	r3, #16
 80123ba:	9300      	str	r3, [sp, #0]
 80123bc:	2350      	movs	r3, #80	; 0x50
 80123be:	2246      	movs	r2, #70	; 0x46
 80123c0:	4909      	ldr	r1, [pc, #36]	; (80123e8 <_Z27getFont_bahnschrift_80_2bppv+0x90>)
 80123c2:	480a      	ldr	r0, [pc, #40]	; (80123ec <_Z27getFont_bahnschrift_80_2bppv+0x94>)
 80123c4:	f7ff fed0 	bl	8012168 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80123c8:	4809      	ldr	r0, [pc, #36]	; (80123f0 <_Z27getFont_bahnschrift_80_2bppv+0x98>)
 80123ca:	f017 fa47 	bl	802985c <atexit>
 80123ce:	4803      	ldr	r0, [pc, #12]	; (80123dc <_Z27getFont_bahnschrift_80_2bppv+0x84>)
 80123d0:	f017 fa05 	bl	80297de <__cxa_guard_release>
    return bahnschrift_80_2bpp;
 80123d4:	4b05      	ldr	r3, [pc, #20]	; (80123ec <_Z27getFont_bahnschrift_80_2bppv+0x94>)
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	46bd      	mov	sp, r7
 80123da:	bd80      	pop	{r7, pc}
 80123dc:	20007b78 	.word	0x20007b78
 80123e0:	08035fe8 	.word	0x08035fe8
 80123e4:	08035ff0 	.word	0x08035ff0
 80123e8:	08035c10 	.word	0x08035c10
 80123ec:	20007b50 	.word	0x20007b50
 80123f0:	08012349 	.word	0x08012349

080123f4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80123f4:	b480      	push	{r7}
 80123f6:	b083      	sub	sp, #12
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
 80123fc:	6039      	str	r1, [r7, #0]
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	4618      	mov	r0, r3
 8012402:	370c      	adds	r7, #12
 8012404:	46bd      	mov	sp, r7
 8012406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240a:	4770      	bx	lr

0801240c <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 801240c:	b480      	push	{r7}
 801240e:	b083      	sub	sp, #12
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2200      	movs	r2, #0
 8012418:	801a      	strh	r2, [r3, #0]
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2200      	movs	r2, #0
 801241e:	805a      	strh	r2, [r3, #2]
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	2200      	movs	r2, #0
 8012424:	809a      	strh	r2, [r3, #4]
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2200      	movs	r2, #0
 801242a:	80da      	strh	r2, [r3, #6]
    {
    }
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	4618      	mov	r0, r3
 8012430:	370c      	adds	r7, #12
 8012432:	46bd      	mov	sp, r7
 8012434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012438:	4770      	bx	lr

0801243a <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 801243a:	b480      	push	{r7}
 801243c:	b085      	sub	sp, #20
 801243e:	af00      	add	r7, sp, #0
 8012440:	60f8      	str	r0, [r7, #12]
 8012442:	4608      	mov	r0, r1
 8012444:	4611      	mov	r1, r2
 8012446:	461a      	mov	r2, r3
 8012448:	4603      	mov	r3, r0
 801244a:	817b      	strh	r3, [r7, #10]
 801244c:	460b      	mov	r3, r1
 801244e:	813b      	strh	r3, [r7, #8]
 8012450:	4613      	mov	r3, r2
 8012452:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	897a      	ldrh	r2, [r7, #10]
 8012458:	801a      	strh	r2, [r3, #0]
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	893a      	ldrh	r2, [r7, #8]
 801245e:	805a      	strh	r2, [r3, #2]
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	88fa      	ldrh	r2, [r7, #6]
 8012464:	809a      	strh	r2, [r3, #4]
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	8b3a      	ldrh	r2, [r7, #24]
 801246a:	80da      	strh	r2, [r3, #6]
    {
    }
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	4618      	mov	r0, r3
 8012470:	3714      	adds	r7, #20
 8012472:	46bd      	mov	sp, r7
 8012474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012478:	4770      	bx	lr

0801247a <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 801247a:	b480      	push	{r7}
 801247c:	b083      	sub	sp, #12
 801247e:	af00      	add	r7, sp, #0
 8012480:	6078      	str	r0, [r7, #4]
 8012482:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8012484:	bf00      	nop
 8012486:	370c      	adds	r7, #12
 8012488:	46bd      	mov	sp, r7
 801248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248e:	4770      	bx	lr

08012490 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8012490:	b480      	push	{r7}
 8012492:	b083      	sub	sp, #12
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
 8012498:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 801249a:	bf00      	nop
 801249c:	370c      	adds	r7, #12
 801249e:	46bd      	mov	sp, r7
 80124a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a4:	4770      	bx	lr

080124a6 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 80124a6:	b480      	push	{r7}
 80124a8:	b083      	sub	sp, #12
 80124aa:	af00      	add	r7, sp, #0
 80124ac:	6078      	str	r0, [r7, #4]
 80124ae:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80124b0:	bf00      	nop
 80124b2:	370c      	adds	r7, #12
 80124b4:	46bd      	mov	sp, r7
 80124b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ba:	4770      	bx	lr

080124bc <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 80124bc:	b480      	push	{r7}
 80124be:	b083      	sub	sp, #12
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
 80124c4:	460b      	mov	r3, r1
 80124c6:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 80124c8:	bf00      	nop
 80124ca:	370c      	adds	r7, #12
 80124cc:	46bd      	mov	sp, r7
 80124ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d2:	4770      	bx	lr

080124d4 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80124d4:	b480      	push	{r7}
 80124d6:	b083      	sub	sp, #12
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
    {
    }
 80124dc:	bf00      	nop
 80124de:	370c      	adds	r7, #12
 80124e0:	46bd      	mov	sp, r7
 80124e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e6:	4770      	bx	lr

080124e8 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 80124e8:	b480      	push	{r7}
 80124ea:	b083      	sub	sp, #12
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
    {
    }
 80124f0:	bf00      	nop
 80124f2:	370c      	adds	r7, #12
 80124f4:	46bd      	mov	sp, r7
 80124f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fa:	4770      	bx	lr

080124fc <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 80124fc:	b480      	push	{r7}
 80124fe:	b083      	sub	sp, #12
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
    {
 8012504:	4a04      	ldr	r2, [pc, #16]	; (8012518 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	601a      	str	r2, [r3, #0]
    }
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	4618      	mov	r0, r3
 801250e:	370c      	adds	r7, #12
 8012510:	46bd      	mov	sp, r7
 8012512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012516:	4770      	bx	lr
 8012518:	0802be9c 	.word	0x0802be9c

0801251c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 801251c:	b580      	push	{r7, lr}
 801251e:	b082      	sub	sp, #8
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
    }
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f7ff ffe9 	bl	80124fc <_ZN8touchgfx15UIEventListenerD1Ev>
 801252a:	2104      	movs	r1, #4
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f017 f948 	bl	80297c2 <_ZdlPvj>
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	4618      	mov	r0, r3
 8012536:	3708      	adds	r7, #8
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}

0801253c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 801253c:	b480      	push	{r7}
 801253e:	b083      	sub	sp, #12
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
    {
    }
 8012544:	bf00      	nop
 8012546:	370c      	adds	r7, #12
 8012548:	46bd      	mov	sp, r7
 801254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254e:	4770      	bx	lr

08012550 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8012550:	b480      	push	{r7}
 8012552:	b083      	sub	sp, #12
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
 8012558:	460b      	mov	r3, r1
 801255a:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 801255c:	bf00      	nop
 801255e:	370c      	adds	r7, #12
 8012560:	46bd      	mov	sp, r7
 8012562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012566:	4770      	bx	lr

08012568 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8012568:	b480      	push	{r7}
 801256a:	b083      	sub	sp, #12
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	683a      	ldr	r2, [r7, #0]
 8012576:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 801257a:	6810      	ldr	r0, [r2, #0]
 801257c:	6851      	ldr	r1, [r2, #4]
 801257e:	c303      	stmia	r3!, {r0, r1}
    }
 8012580:	bf00      	nop
 8012582:	370c      	adds	r7, #12
 8012584:	46bd      	mov	sp, r7
 8012586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258a:	4770      	bx	lr

0801258c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 801258c:	b480      	push	{r7}
 801258e:	b083      	sub	sp, #12
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
    {
 8012594:	4a04      	ldr	r2, [pc, #16]	; (80125a8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	601a      	str	r2, [r3, #0]
    }
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	4618      	mov	r0, r3
 801259e:	370c      	adds	r7, #12
 80125a0:	46bd      	mov	sp, r7
 80125a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a6:	4770      	bx	lr
 80125a8:	0802be84 	.word	0x0802be84

080125ac <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b082      	sub	sp, #8
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
    }
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f7ff ffe9 	bl	801258c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80125ba:	2104      	movs	r1, #4
 80125bc:	6878      	ldr	r0, [r7, #4]
 80125be:	f017 f900 	bl	80297c2 <_ZdlPvj>
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	4618      	mov	r0, r3
 80125c6:	3708      	adds	r7, #8
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd80      	pop	{r7, pc}

080125cc <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b082      	sub	sp, #8
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 80125d4:	4a14      	ldr	r2, [pc, #80]	; (8012628 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	601a      	str	r2, [r3, #0]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	3304      	adds	r3, #4
 80125de:	4618      	mov	r0, r3
 80125e0:	f7ff ff14 	bl	801240c <_ZN8touchgfx4RectC1Ev>
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	330c      	adds	r3, #12
 80125e8:	4618      	mov	r0, r3
 80125ea:	f7ff ff0f 	bl	801240c <_ZN8touchgfx4RectC1Ev>
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	2200      	movs	r2, #0
 80125f2:	615a      	str	r2, [r3, #20]
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2200      	movs	r2, #0
 80125f8:	619a      	str	r2, [r3, #24]
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	2200      	movs	r2, #0
 80125fe:	61da      	str	r2, [r3, #28]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	2200      	movs	r2, #0
 8012604:	841a      	strh	r2, [r3, #32]
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	2200      	movs	r2, #0
 801260a:	845a      	strh	r2, [r3, #34]	; 0x22
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	2200      	movs	r2, #0
 8012610:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	2201      	movs	r2, #1
 8012618:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	4618      	mov	r0, r3
 8012620:	3708      	adds	r7, #8
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}
 8012626:	bf00      	nop
 8012628:	0802cb94 	.word	0x0802cb94

0801262c <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 801262c:	b480      	push	{r7}
 801262e:	b083      	sub	sp, #12
 8012630:	af00      	add	r7, sp, #0
 8012632:	6078      	str	r0, [r7, #4]
    {
 8012634:	4a04      	ldr	r2, [pc, #16]	; (8012648 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	601a      	str	r2, [r3, #0]
    }
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	4618      	mov	r0, r3
 801263e:	370c      	adds	r7, #12
 8012640:	46bd      	mov	sp, r7
 8012642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012646:	4770      	bx	lr
 8012648:	0802cb94 	.word	0x0802cb94

0801264c <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 801264c:	b580      	push	{r7, lr}
 801264e:	b082      	sub	sp, #8
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
    }
 8012654:	6878      	ldr	r0, [r7, #4]
 8012656:	f7ff ffe9 	bl	801262c <_ZN8touchgfx8DrawableD1Ev>
 801265a:	2128      	movs	r1, #40	; 0x28
 801265c:	6878      	ldr	r0, [r7, #4]
 801265e:	f017 f8b0 	bl	80297c2 <_ZdlPvj>
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	4618      	mov	r0, r3
 8012666:	3708      	adds	r7, #8
 8012668:	46bd      	mov	sp, r7
 801266a:	bd80      	pop	{r7, pc}

0801266c <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 801266c:	b580      	push	{r7, lr}
 801266e:	b082      	sub	sp, #8
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801267a:	2b00      	cmp	r3, #0
 801267c:	d005      	beq.n	801268a <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	3314      	adds	r3, #20
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	4798      	blx	r3
        }
    }
 801268a:	bf00      	nop
 801268c:	3708      	adds	r7, #8
 801268e:	46bd      	mov	sp, r7
 8012690:	bd80      	pop	{r7, pc}

08012692 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8012692:	b480      	push	{r7}
 8012694:	b083      	sub	sp, #12
 8012696:	af00      	add	r7, sp, #0
 8012698:	6078      	str	r0, [r7, #4]
    {
        return 0;
 801269a:	2300      	movs	r3, #0
    }
 801269c:	4618      	mov	r0, r3
 801269e:	370c      	adds	r7, #12
 80126a0:	46bd      	mov	sp, r7
 80126a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a6:	4770      	bx	lr

080126a8 <_ZNK8touchgfx8Drawable7getRectEv>:
     * @return The rectangle this Drawable covers expressed in coordinates relative to its
     *         parent.
     *
     * @see getAbsoluteRect
     */
    const Rect& getRect() const
 80126a8:	b480      	push	{r7}
 80126aa:	b083      	sub	sp, #12
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
    {
        return rect;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	3304      	adds	r3, #4
    }
 80126b4:	4618      	mov	r0, r3
 80126b6:	370c      	adds	r7, #12
 80126b8:	46bd      	mov	sp, r7
 80126ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126be:	4770      	bx	lr

080126c0 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b084      	sub	sp, #16
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	60f8      	str	r0, [r7, #12]
 80126c8:	4608      	mov	r0, r1
 80126ca:	4611      	mov	r1, r2
 80126cc:	461a      	mov	r2, r3
 80126ce:	4603      	mov	r3, r0
 80126d0:	817b      	strh	r3, [r7, #10]
 80126d2:	460b      	mov	r3, r1
 80126d4:	813b      	strh	r3, [r7, #8]
 80126d6:	4613      	mov	r3, r2
 80126d8:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 80126da:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80126de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80126e2:	4619      	mov	r1, r3
 80126e4:	68f8      	ldr	r0, [r7, #12]
 80126e6:	f000 f851 	bl	801278c <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 80126ea:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80126ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126f2:	4619      	mov	r1, r3
 80126f4:	68f8      	ldr	r0, [r7, #12]
 80126f6:	f000 f8a5 	bl	8012844 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80126fa:	bf00      	nop
 80126fc:	3710      	adds	r7, #16
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}

08012702 <_ZNK8touchgfx8Drawable4getXEv>:
    /**
     * Gets the x coordinate of this Drawable, relative to its parent.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 8012702:	b480      	push	{r7}
 8012704:	b083      	sub	sp, #12
 8012706:	af00      	add	r7, sp, #0
 8012708:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 8012710:	4618      	mov	r0, r3
 8012712:	370c      	adds	r7, #12
 8012714:	46bd      	mov	sp, r7
 8012716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271a:	4770      	bx	lr

0801271c <_ZNK8touchgfx8Drawable8getWidthEv>:
    /**
     * Gets the width of this Drawable.
     *
     * @return The width of this Drawable.
     */
    int16_t getWidth() const
 801271c:	b480      	push	{r7}
 801271e:	b083      	sub	sp, #12
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
    {
        return rect.width;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 801272a:	4618      	mov	r0, r3
 801272c:	370c      	adds	r7, #12
 801272e:	46bd      	mov	sp, r7
 8012730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012734:	4770      	bx	lr

08012736 <_ZNK8touchgfx8Drawable9getHeightEv>:
    /**
     * Gets the height of this Drawable.
     *
     * @return The height of this Drawable.
     */
    int16_t getHeight() const
 8012736:	b480      	push	{r7}
 8012738:	b083      	sub	sp, #12
 801273a:	af00      	add	r7, sp, #0
 801273c:	6078      	str	r0, [r7, #4]
    {
        return rect.height;
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 8012744:	4618      	mov	r0, r3
 8012746:	370c      	adds	r7, #12
 8012748:	46bd      	mov	sp, r7
 801274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274e:	4770      	bx	lr

08012750 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8012750:	b480      	push	{r7}
 8012752:	b083      	sub	sp, #12
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
 8012758:	460b      	mov	r3, r1
 801275a:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	887a      	ldrh	r2, [r7, #2]
 8012760:	809a      	strh	r2, [r3, #4]
    }
 8012762:	bf00      	nop
 8012764:	370c      	adds	r7, #12
 8012766:	46bd      	mov	sp, r7
 8012768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276c:	4770      	bx	lr

0801276e <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 801276e:	b480      	push	{r7}
 8012770:	b083      	sub	sp, #12
 8012772:	af00      	add	r7, sp, #0
 8012774:	6078      	str	r0, [r7, #4]
 8012776:	460b      	mov	r3, r1
 8012778:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	887a      	ldrh	r2, [r7, #2]
 801277e:	80da      	strh	r2, [r3, #6]
    }
 8012780:	bf00      	nop
 8012782:	370c      	adds	r7, #12
 8012784:	46bd      	mov	sp, r7
 8012786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278a:	4770      	bx	lr

0801278c <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 801278c:	b580      	push	{r7, lr}
 801278e:	b082      	sub	sp, #8
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
 8012794:	460b      	mov	r3, r1
 8012796:	807b      	strh	r3, [r7, #2]
 8012798:	4613      	mov	r3, r2
 801279a:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	3330      	adds	r3, #48	; 0x30
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80127a8:	4611      	mov	r1, r2
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	4798      	blx	r3
        setY(y);
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	3334      	adds	r3, #52	; 0x34
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80127ba:	4611      	mov	r1, r2
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	4798      	blx	r3
    }
 80127c0:	bf00      	nop
 80127c2:	3708      	adds	r7, #8
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}

080127c8 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 80127c8:	b480      	push	{r7}
 80127ca:	b083      	sub	sp, #12
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
 80127d0:	460b      	mov	r3, r1
 80127d2:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	887a      	ldrh	r2, [r7, #2]
 80127d8:	811a      	strh	r2, [r3, #8]
    }
 80127da:	bf00      	nop
 80127dc:	370c      	adds	r7, #12
 80127de:	46bd      	mov	sp, r7
 80127e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e4:	4770      	bx	lr

080127e6 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 80127e6:	b480      	push	{r7}
 80127e8:	b083      	sub	sp, #12
 80127ea:	af00      	add	r7, sp, #0
 80127ec:	6078      	str	r0, [r7, #4]
 80127ee:	460b      	mov	r3, r1
 80127f0:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	887a      	ldrh	r2, [r7, #2]
 80127f6:	815a      	strh	r2, [r3, #10]
    }
 80127f8:	bf00      	nop
 80127fa:	370c      	adds	r7, #12
 80127fc:	46bd      	mov	sp, r7
 80127fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012802:	4770      	bx	lr

08012804 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8012804:	b480      	push	{r7}
 8012806:	b083      	sub	sp, #12
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
    {
    }
 801280c:	bf00      	nop
 801280e:	370c      	adds	r7, #12
 8012810:	46bd      	mov	sp, r7
 8012812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012816:	4770      	bx	lr

08012818 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8012818:	b480      	push	{r7}
 801281a:	b083      	sub	sp, #12
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8012822:	bf00      	nop
 8012824:	370c      	adds	r7, #12
 8012826:	46bd      	mov	sp, r7
 8012828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282c:	4770      	bx	lr

0801282e <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 801282e:	b480      	push	{r7}
 8012830:	b083      	sub	sp, #12
 8012832:	af00      	add	r7, sp, #0
 8012834:	6078      	str	r0, [r7, #4]
 8012836:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8012838:	bf00      	nop
 801283a:	370c      	adds	r7, #12
 801283c:	46bd      	mov	sp, r7
 801283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012842:	4770      	bx	lr

08012844 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8012844:	b580      	push	{r7, lr}
 8012846:	b082      	sub	sp, #8
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
 801284c:	460b      	mov	r3, r1
 801284e:	807b      	strh	r3, [r7, #2]
 8012850:	4613      	mov	r3, r2
 8012852:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	3338      	adds	r3, #56	; 0x38
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012860:	4611      	mov	r1, r2
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	4798      	blx	r3
        setHeight(height);
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	333c      	adds	r3, #60	; 0x3c
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8012872:	4611      	mov	r1, r2
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	4798      	blx	r3
    }
 8012878:	bf00      	nop
 801287a:	3708      	adds	r7, #8
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}

08012880 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8012880:	b480      	push	{r7}
 8012882:	b083      	sub	sp, #12
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
 8012888:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 801288a:	bf00      	nop
 801288c:	370c      	adds	r7, #12
 801288e:	46bd      	mov	sp, r7
 8012890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012894:	4770      	bx	lr

08012896 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8012896:	b480      	push	{r7}
 8012898:	b083      	sub	sp, #12
 801289a:	af00      	add	r7, sp, #0
 801289c:	6078      	str	r0, [r7, #4]
    {
    }
 801289e:	bf00      	nop
 80128a0:	370c      	adds	r7, #12
 80128a2:	46bd      	mov	sp, r7
 80128a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a8:	4770      	bx	lr

080128aa <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 80128aa:	b480      	push	{r7}
 80128ac:	b083      	sub	sp, #12
 80128ae:	af00      	add	r7, sp, #0
 80128b0:	6078      	str	r0, [r7, #4]
    {
        return visible;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 80128b8:	4618      	mov	r0, r3
 80128ba:	370c      	adds	r7, #12
 80128bc:	46bd      	mov	sp, r7
 80128be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c2:	4770      	bx	lr

080128c4 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 80128c4:	b480      	push	{r7}
 80128c6:	b083      	sub	sp, #12
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 80128d2:	4618      	mov	r0, r3
 80128d4:	370c      	adds	r7, #12
 80128d6:	46bd      	mov	sp, r7
 80128d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128dc:	4770      	bx	lr

080128de <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80128de:	b580      	push	{r7, lr}
 80128e0:	b082      	sub	sp, #8
 80128e2:	af00      	add	r7, sp, #0
 80128e4:	6078      	str	r0, [r7, #4]
 80128e6:	460b      	mov	r3, r1
 80128e8:	807b      	strh	r3, [r7, #2]
 80128ea:	4613      	mov	r3, r2
 80128ec:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	3354      	adds	r3, #84	; 0x54
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	8879      	ldrh	r1, [r7, #2]
 80128f8:	687a      	ldr	r2, [r7, #4]
 80128fa:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80128fe:	b292      	uxth	r2, r2
 8012900:	1a8a      	subs	r2, r1, r2
 8012902:	b292      	uxth	r2, r2
 8012904:	b210      	sxth	r0, r2
 8012906:	8839      	ldrh	r1, [r7, #0]
 8012908:	687a      	ldr	r2, [r7, #4]
 801290a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 801290e:	b292      	uxth	r2, r2
 8012910:	1a8a      	subs	r2, r1, r2
 8012912:	b292      	uxth	r2, r2
 8012914:	b212      	sxth	r2, r2
 8012916:	4601      	mov	r1, r0
 8012918:	6878      	ldr	r0, [r7, #4]
 801291a:	4798      	blx	r3
    }
 801291c:	bf00      	nop
 801291e:	3708      	adds	r7, #8
 8012920:	46bd      	mov	sp, r7
 8012922:	bd80      	pop	{r7, pc}

08012924 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8012924:	b480      	push	{r7}
 8012926:	b083      	sub	sp, #12
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012932:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801293a:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012942:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8012944:	bf00      	nop
 8012946:	370c      	adds	r7, #12
 8012948:	46bd      	mov	sp, r7
 801294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294e:	4770      	bx	lr

08012950 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8012950:	b580      	push	{r7, lr}
 8012952:	b084      	sub	sp, #16
 8012954:	af00      	add	r7, sp, #0
 8012956:	60f8      	str	r0, [r7, #12]
 8012958:	60b9      	str	r1, [r7, #8]
 801295a:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 801295c:	68f8      	ldr	r0, [r7, #12]
 801295e:	f7ff ffe1 	bl	8012924 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681a      	ldr	r2, [r3, #0]
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	68fa      	ldr	r2, [r7, #12]
 801296e:	601a      	str	r2, [r3, #0]
    }
 8012970:	bf00      	nop
 8012972:	3710      	adds	r7, #16
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}

08012978 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8012978:	b480      	push	{r7}
 801297a:	af00      	add	r7, sp, #0
    {
        return instance;
 801297c:	4b03      	ldr	r3, [pc, #12]	; (801298c <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 801297e:	681b      	ldr	r3, [r3, #0]
    }
 8012980:	4618      	mov	r0, r3
 8012982:	46bd      	mov	sp, r7
 8012984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012988:	4770      	bx	lr
 801298a:	bf00      	nop
 801298c:	20008e30 	.word	0x20008e30

08012990 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8012990:	b480      	push	{r7}
 8012992:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8012994:	4b0b      	ldr	r3, [pc, #44]	; (80129c4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 801299c:	2b00      	cmp	r3, #0
 801299e:	d008      	beq.n	80129b2 <_ZN8touchgfx3HAL3lcdEv+0x22>
 80129a0:	4b08      	ldr	r3, [pc, #32]	; (80129c4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d003      	beq.n	80129b2 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 80129aa:	4b06      	ldr	r3, [pc, #24]	; (80129c4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80129b0:	e002      	b.n	80129b8 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 80129b2:	4b04      	ldr	r3, [pc, #16]	; (80129c4 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	689b      	ldr	r3, [r3, #8]
    }
 80129b8:	4618      	mov	r0, r3
 80129ba:	46bd      	mov	sp, r7
 80129bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c0:	4770      	bx	lr
 80129c2:	bf00      	nop
 80129c4:	20008e30 	.word	0x20008e30

080129c8 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 80129c8:	b480      	push	{r7}
 80129ca:	b083      	sub	sp, #12
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 80129d0:	4a07      	ldr	r2, [pc, #28]	; (80129f0 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	601a      	str	r2, [r3, #0]
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	2200      	movs	r2, #0
 80129da:	605a      	str	r2, [r3, #4]
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2200      	movs	r2, #0
 80129e0:	721a      	strb	r2, [r3, #8]
    {
    }
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	4618      	mov	r0, r3
 80129e6:	370c      	adds	r7, #12
 80129e8:	46bd      	mov	sp, r7
 80129ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ee:	4770      	bx	lr
 80129f0:	0802be60 	.word	0x0802be60

080129f4 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 80129f4:	b480      	push	{r7}
 80129f6:	b083      	sub	sp, #12
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
    {
 80129fc:	4a04      	ldr	r2, [pc, #16]	; (8012a10 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	601a      	str	r2, [r3, #0]
    }
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	4618      	mov	r0, r3
 8012a06:	370c      	adds	r7, #12
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0e:	4770      	bx	lr
 8012a10:	0802be60 	.word	0x0802be60

08012a14 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b082      	sub	sp, #8
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
    }
 8012a1c:	6878      	ldr	r0, [r7, #4]
 8012a1e:	f7ff ffe9 	bl	80129f4 <_ZN8touchgfx10TransitionD1Ev>
 8012a22:	210c      	movs	r1, #12
 8012a24:	6878      	ldr	r0, [r7, #4]
 8012a26:	f016 fecc 	bl	80297c2 <_ZdlPvj>
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	3708      	adds	r7, #8
 8012a30:	46bd      	mov	sp, r7
 8012a32:	bd80      	pop	{r7, pc}

08012a34 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8012a34:	b480      	push	{r7}
 8012a36:	b083      	sub	sp, #12
 8012a38:	af00      	add	r7, sp, #0
 8012a3a:	6078      	str	r0, [r7, #4]
    {
    }
 8012a3c:	bf00      	nop
 8012a3e:	370c      	adds	r7, #12
 8012a40:	46bd      	mov	sp, r7
 8012a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a46:	4770      	bx	lr

08012a48 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8012a48:	b480      	push	{r7}
 8012a4a:	b083      	sub	sp, #12
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
    {
    }
 8012a50:	bf00      	nop
 8012a52:	370c      	adds	r7, #12
 8012a54:	46bd      	mov	sp, r7
 8012a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5a:	4770      	bx	lr

08012a5c <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8012a5c:	b480      	push	{r7}
 8012a5e:	b083      	sub	sp, #12
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
    {
    }
 8012a64:	bf00      	nop
 8012a66:	370c      	adds	r7, #12
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6e:	4770      	bx	lr

08012a70 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b082      	sub	sp, #8
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 8012a78:	f008 fcc8 	bl	801b40c <_ZN8touchgfx11Application11getInstanceEv>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f009 f868 	bl	801bb54 <_ZN8touchgfx11Application10invalidateEv>
    }
 8012a84:	bf00      	nop
 8012a86:	3708      	adds	r7, #8
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bd80      	pop	{r7, pc}

08012a8c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8012a8c:	b480      	push	{r7}
 8012a8e:	b083      	sub	sp, #12
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
 8012a94:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	683a      	ldr	r2, [r7, #0]
 8012a9a:	605a      	str	r2, [r3, #4]
    }
 8012a9c:	bf00      	nop
 8012a9e:	370c      	adds	r7, #12
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa6:	4770      	bx	lr

08012aa8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b082      	sub	sp, #8
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
 8012ab0:	4a05      	ldr	r2, [pc, #20]	; (8012ac8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	601a      	str	r2, [r3, #0]
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	4618      	mov	r0, r3
 8012aba:	f7ff fd1f 	bl	80124fc <_ZN8touchgfx15UIEventListenerD1Ev>
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	3708      	adds	r7, #8
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bd80      	pop	{r7, pc}
 8012ac8:	0802cb48 	.word	0x0802cb48

08012acc <_ZN8touchgfx11ApplicationD0Ev>:
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b082      	sub	sp, #8
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
 8012ad4:	6878      	ldr	r0, [r7, #4]
 8012ad6:	f7ff ffe7 	bl	8012aa8 <_ZN8touchgfx11ApplicationD1Ev>
 8012ada:	f44f 719c 	mov.w	r1, #312	; 0x138
 8012ade:	6878      	ldr	r0, [r7, #4]
 8012ae0:	f016 fe6f 	bl	80297c2 <_ZdlPvj>
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	3708      	adds	r7, #8
 8012aea:	46bd      	mov	sp, r7
 8012aec:	bd80      	pop	{r7, pc}
	...

08012af0 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b082      	sub	sp, #8
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	4618      	mov	r0, r3
 8012afc:	f008 fca6 	bl	801b44c <_ZN8touchgfx11ApplicationC1Ev>
 8012b00:	4a09      	ldr	r2, [pc, #36]	; (8012b28 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	601a      	str	r2, [r3, #0]
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	2200      	movs	r2, #0
 8012b0a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	2200      	movs	r2, #0
 8012b12:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	4a04      	ldr	r2, [pc, #16]	; (8012b2c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8012b1a:	6013      	str	r3, [r2, #0]
    }
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	4618      	mov	r0, r3
 8012b20:	3708      	adds	r7, #8
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bd80      	pop	{r7, pc}
 8012b26:	bf00      	nop
 8012b28:	0802be14 	.word	0x0802be14
 8012b2c:	20008e7c 	.word	0x20008e7c

08012b30 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b082      	sub	sp, #8
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f000 f804 	bl	8012b46 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8012b3e:	bf00      	nop
 8012b40:	3708      	adds	r7, #8
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}

08012b46 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8012b46:	b580      	push	{r7, lr}
 8012b48:	b082      	sub	sp, #8
 8012b4a:	af00      	add	r7, sp, #0
 8012b4c:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d00f      	beq.n	8012b78 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	330c      	adds	r3, #12
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	4610      	mov	r0, r2
 8012b6c:	4798      	blx	r3
 8012b6e:	4603      	mov	r3, r0
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d001      	beq.n	8012b78 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8012b74:	2301      	movs	r3, #1
 8012b76:	e000      	b.n	8012b7a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8012b78:	2300      	movs	r3, #0
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d00e      	beq.n	8012b9c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	3308      	adds	r3, #8
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	4610      	mov	r0, r2
 8012b92:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2200      	movs	r2, #0
 8012b98:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8012b9c:	bf00      	nop
 8012b9e:	3708      	adds	r7, #8
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}

08012ba4 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8012ba4:	b480      	push	{r7}
 8012ba6:	b083      	sub	sp, #12
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
 8012bac:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	683a      	ldr	r2, [r7, #0]
 8012bb2:	601a      	str	r2, [r3, #0]
    }
 8012bb4:	bf00      	nop
 8012bb6:	370c      	adds	r7, #12
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbe:	4770      	bx	lr

08012bc0 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b082      	sub	sp, #8
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
 8012bc8:	4a05      	ldr	r2, [pc, #20]	; (8012be0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	601a      	str	r2, [r3, #0]
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f7ff ff69 	bl	8012aa8 <_ZN8touchgfx11ApplicationD1Ev>
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3708      	adds	r7, #8
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}
 8012be0:	0802be14 	.word	0x0802be14

08012be4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b082      	sub	sp, #8
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f7ff ffe7 	bl	8012bc0 <_ZN8touchgfx14MVPApplicationD1Ev>
 8012bf2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012bf6:	6878      	ldr	r0, [r7, #4]
 8012bf8:	f016 fde3 	bl	80297c2 <_ZdlPvj>
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	4618      	mov	r0, r3
 8012c00:	3708      	adds	r7, #8
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}
	...

08012c08 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b082      	sub	sp, #8
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
 8012c10:	4a08      	ldr	r2, [pc, #32]	; (8012c34 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	601a      	str	r2, [r3, #0]
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f001 f81f 	bl	8013c60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	4618      	mov	r0, r3
 8012c26:	f7ff ffcb 	bl	8012bc0 <_ZN8touchgfx14MVPApplicationD1Ev>
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	4618      	mov	r0, r3
 8012c2e:	3708      	adds	r7, #8
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}
 8012c34:	0802bdb0 	.word	0x0802bdb0

08012c38 <_ZN23FrontendApplicationBaseD0Ev>:
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b082      	sub	sp, #8
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
 8012c40:	6878      	ldr	r0, [r7, #4]
 8012c42:	f7ff ffe1 	bl	8012c08 <_ZN23FrontendApplicationBaseD1Ev>
 8012c46:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8012c4a:	6878      	ldr	r0, [r7, #4]
 8012c4c:	f016 fdb9 	bl	80297c2 <_ZdlPvj>
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	4618      	mov	r0, r3
 8012c54:	3708      	adds	r7, #8
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bd80      	pop	{r7, pc}

08012c5a <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8012c5a:	b580      	push	{r7, lr}
 8012c5c:	b082      	sub	sp, #8
 8012c5e:	af00      	add	r7, sp, #0
 8012c60:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 8012c62:	6878      	ldr	r0, [r7, #4]
 8012c64:	f000 f8d2 	bl	8012e0c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8012c68:	bf00      	nop
 8012c6a:	3708      	adds	r7, #8
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bd80      	pop	{r7, pc}

08012c70 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8012c70:	b480      	push	{r7}
 8012c72:	b083      	sub	sp, #12
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	2201      	movs	r2, #1
 8012c7c:	721a      	strb	r2, [r3, #8]
    }
 8012c7e:	bf00      	nop
 8012c80:	370c      	adds	r7, #12
 8012c82:	46bd      	mov	sp, r7
 8012c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c88:	4770      	bx	lr

08012c8a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 8012c8a:	b580      	push	{r7, lr}
 8012c8c:	b084      	sub	sp, #16
 8012c8e:	af00      	add	r7, sp, #0
 8012c90:	60f8      	str	r0, [r7, #12]
 8012c92:	607b      	str	r3, [r7, #4]
 8012c94:	460b      	mov	r3, r1
 8012c96:	817b      	strh	r3, [r7, #10]
 8012c98:	4613      	mov	r3, r2
 8012c9a:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	f7ff fe03 	bl	80128aa <_ZNK8touchgfx8Drawable9isVisibleEv>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d008      	beq.n	8012cbc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	4618      	mov	r0, r3
 8012cae:	f7ff fe09 	bl	80128c4 <_ZNK8touchgfx8Drawable11isTouchableEv>
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d001      	beq.n	8012cbc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 8012cb8:	2301      	movs	r3, #1
 8012cba:	e000      	b.n	8012cbe <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d002      	beq.n	8012cc8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8012cc2:	68fa      	ldr	r2, [r7, #12]
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	601a      	str	r2, [r3, #0]
        }
    }
 8012cc8:	bf00      	nop
 8012cca:	3710      	adds	r7, #16
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	bd80      	pop	{r7, pc}

08012cd0 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8012cd0:	b480      	push	{r7}
 8012cd2:	b083      	sub	sp, #12
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
 8012cd8:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	683a      	ldr	r2, [r7, #0]
 8012cde:	605a      	str	r2, [r3, #4]
    }
 8012ce0:	bf00      	nop
 8012ce2:	370c      	adds	r7, #12
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cea:	4770      	bx	lr

08012cec <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b082      	sub	sp, #8
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f7ff fc68 	bl	80125cc <_ZN8touchgfx8DrawableC1Ev>
 8012cfc:	4a03      	ldr	r2, [pc, #12]	; (8012d0c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	601a      	str	r2, [r3, #0]
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	4618      	mov	r0, r3
 8012d06:	3708      	adds	r7, #8
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	bd80      	pop	{r7, pc}
 8012d0c:	0802bd24 	.word	0x0802bd24

08012d10 <_ZN8touchgfx6WidgetD1Ev>:
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b082      	sub	sp, #8
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
 8012d18:	4a05      	ldr	r2, [pc, #20]	; (8012d30 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	601a      	str	r2, [r3, #0]
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	4618      	mov	r0, r3
 8012d22:	f7ff fc83 	bl	801262c <_ZN8touchgfx8DrawableD1Ev>
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	4618      	mov	r0, r3
 8012d2a:	3708      	adds	r7, #8
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bd80      	pop	{r7, pc}
 8012d30:	0802bd24 	.word	0x0802bd24

08012d34 <_ZN8touchgfx6WidgetD0Ev>:
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b082      	sub	sp, #8
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
 8012d3c:	6878      	ldr	r0, [r7, #4]
 8012d3e:	f7ff ffe7 	bl	8012d10 <_ZN8touchgfx6WidgetD1Ev>
 8012d42:	2128      	movs	r1, #40	; 0x28
 8012d44:	6878      	ldr	r0, [r7, #4]
 8012d46:	f016 fd3c 	bl	80297c2 <_ZdlPvj>
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	4618      	mov	r0, r3
 8012d4e:	3708      	adds	r7, #8
 8012d50:	46bd      	mov	sp, r7
 8012d52:	bd80      	pop	{r7, pc}

08012d54 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b084      	sub	sp, #16
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	60f8      	str	r0, [r7, #12]
 8012d5c:	60b9      	str	r1, [r7, #8]
 8012d5e:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7ff fec4 	bl	8012af0 <_ZN8touchgfx14MVPApplicationC1Ev>
 8012d68:	4a13      	ldr	r2, [pc, #76]	; (8012db8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	601a      	str	r2, [r3, #0]
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012d74:	4618      	mov	r0, r3
 8012d76:	f000 f92b 	bl	8012fd0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	687a      	ldr	r2, [r7, #4]
 8012d7e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	68ba      	ldr	r2, [r7, #8]
 8012d86:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 8012d8a:	f7ff fdf5 	bl	8012978 <_ZN8touchgfx3HAL11getInstanceEv>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	681a      	ldr	r2, [r3, #0]
 8012d92:	3208      	adds	r2, #8
 8012d94:	6812      	ldr	r2, [r2, #0]
 8012d96:	2101      	movs	r1, #1
 8012d98:	4618      	mov	r0, r3
 8012d9a:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8012d9c:	2000      	movs	r0, #0
 8012d9e:	f003 f841 	bl	8015e24 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8012da2:	f7ff fdf5 	bl	8012990 <_ZN8touchgfx3HAL3lcdEv>
 8012da6:	4603      	mov	r3, r0
 8012da8:	4618      	mov	r0, r3
 8012daa:	f00f fe0e 	bl	80229ca <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	4618      	mov	r0, r3
 8012db2:	3710      	adds	r7, #16
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}
 8012db8:	0802bdb0 	.word	0x0802bdb0

08012dbc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8012dbc:	b480      	push	{r7}
 8012dbe:	b083      	sub	sp, #12
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
 8012dc4:	6039      	str	r1, [r7, #0]
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	4618      	mov	r0, r3
 8012dca:	370c      	adds	r7, #12
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd2:	4770      	bx	lr

08012dd4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b082      	sub	sp, #8
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
 8012ddc:	6039      	str	r1, [r7, #0]
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	683a      	ldr	r2, [r7, #0]
 8012de2:	4611      	mov	r1, r2
 8012de4:	4618      	mov	r0, r3
 8012de6:	f7ff ffe9 	bl	8012dbc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	685a      	ldr	r2, [r3, #4]
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	605a      	str	r2, [r3, #4]
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	683a      	ldr	r2, [r7, #0]
 8012df6:	3308      	adds	r3, #8
 8012df8:	3208      	adds	r2, #8
 8012dfa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012dfe:	e883 0003 	stmia.w	r3, {r0, r1}
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	4618      	mov	r0, r3
 8012e06:	3708      	adds	r7, #8
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}

08012e0c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8012e0c:	b590      	push	{r4, r7, lr}
 8012e0e:	b089      	sub	sp, #36	; 0x24
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8012e1a:	4b10      	ldr	r3, [pc, #64]	; (8012e5c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8012e1c:	61bb      	str	r3, [r7, #24]
 8012e1e:	2300      	movs	r3, #0
 8012e20:	61fb      	str	r3, [r7, #28]
 8012e22:	f107 0008 	add.w	r0, r7, #8
 8012e26:	f107 0318 	add.w	r3, r7, #24
 8012e2a:	cb0c      	ldmia	r3, {r2, r3}
 8012e2c:	6879      	ldr	r1, [r7, #4]
 8012e2e:	f000 f8eb 	bl	8013008 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8012e32:	f107 0308 	add.w	r3, r7, #8
 8012e36:	4619      	mov	r1, r3
 8012e38:	4620      	mov	r0, r4
 8012e3a:	f7ff ffcb 	bl	8012dd4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8012e3e:	f107 0308 	add.w	r3, r7, #8
 8012e42:	4618      	mov	r0, r3
 8012e44:	f000 ff0c 	bl	8013c60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8012e54:	bf00      	nop
 8012e56:	3724      	adds	r7, #36	; 0x24
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	bd90      	pop	{r4, r7, pc}
 8012e5c:	08012e61 	.word	0x08012e61

08012e60 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b084      	sub	sp, #16
 8012e64:	af02      	add	r7, sp, #8
 8012e66:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8012e74:	461a      	mov	r2, r3
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8012e7c:	9300      	str	r3, [sp, #0]
 8012e7e:	4b04      	ldr	r3, [pc, #16]	; (8012e90 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 8012e80:	4804      	ldr	r0, [pc, #16]	; (8012e94 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 8012e82:	f000 f8f3 	bl	801306c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8012e86:	bf00      	nop
 8012e88:	3708      	adds	r7, #8
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}
 8012e8e:	bf00      	nop
 8012e90:	20008e70 	.word	0x20008e70
 8012e94:	20008e6c 	.word	0x20008e6c

08012e98 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionWestEv>:

void FrontendApplicationBase::gotoScreen1ScreenWipeTransitionWest()
{
 8012e98:	b590      	push	{r4, r7, lr}
 8012e9a:	b089      	sub	sp, #36	; 0x24
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenWipeTransitionWestImpl);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8012ea6:	4b10      	ldr	r3, [pc, #64]	; (8012ee8 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionWestEv+0x50>)
 8012ea8:	61bb      	str	r3, [r7, #24]
 8012eaa:	2300      	movs	r3, #0
 8012eac:	61fb      	str	r3, [r7, #28]
 8012eae:	f107 0008 	add.w	r0, r7, #8
 8012eb2:	f107 0318 	add.w	r3, r7, #24
 8012eb6:	cb0c      	ldmia	r3, {r2, r3}
 8012eb8:	6879      	ldr	r1, [r7, #4]
 8012eba:	f000 f8a5 	bl	8013008 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8012ebe:	f107 0308 	add.w	r3, r7, #8
 8012ec2:	4619      	mov	r1, r3
 8012ec4:	4620      	mov	r0, r4
 8012ec6:	f7ff ff85 	bl	8012dd4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8012eca:	f107 0308 	add.w	r3, r7, #8
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f000 fec6 	bl	8013c60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8012ee0:	bf00      	nop
 8012ee2:	3724      	adds	r7, #36	; 0x24
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	bd90      	pop	{r4, r7, pc}
 8012ee8:	08012eed 	.word	0x08012eed

08012eec <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionWestImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenWipeTransitionWestImpl()
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b084      	sub	sp, #16
 8012ef0:	af02      	add	r7, sp, #8
 8012ef2:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::WipeTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8012f00:	461a      	mov	r2, r3
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8012f08:	9300      	str	r3, [sp, #0]
 8012f0a:	4b04      	ldr	r3, [pc, #16]	; (8012f1c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionWestImplEv+0x30>)
 8012f0c:	4804      	ldr	r0, [pc, #16]	; (8012f20 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionWestImplEv+0x34>)
 8012f0e:	f000 f9c9 	bl	80132a4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8012f12:	bf00      	nop
 8012f14:	3708      	adds	r7, #8
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
 8012f1a:	bf00      	nop
 8012f1c:	20008e70 	.word	0x20008e70
 8012f20:	20008e6c 	.word	0x20008e6c

08012f24 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEast()
{
 8012f24:	b590      	push	{r4, r7, lr}
 8012f26:	b089      	sub	sp, #36	; 0x24
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenCoverTransitionEastImpl);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8012f32:	4b10      	ldr	r3, [pc, #64]	; (8012f74 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv+0x50>)
 8012f34:	61bb      	str	r3, [r7, #24]
 8012f36:	2300      	movs	r3, #0
 8012f38:	61fb      	str	r3, [r7, #28]
 8012f3a:	f107 0008 	add.w	r0, r7, #8
 8012f3e:	f107 0318 	add.w	r3, r7, #24
 8012f42:	cb0c      	ldmia	r3, {r2, r3}
 8012f44:	6879      	ldr	r1, [r7, #4]
 8012f46:	f000 f85f 	bl	8013008 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8012f4a:	f107 0308 	add.w	r3, r7, #8
 8012f4e:	4619      	mov	r1, r3
 8012f50:	4620      	mov	r0, r4
 8012f52:	f7ff ff3f 	bl	8012dd4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8012f56:	f107 0308 	add.w	r3, r7, #8
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	f000 fe80 	bl	8013c60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8012f6c:	bf00      	nop
 8012f6e:	3724      	adds	r7, #36	; 0x24
 8012f70:	46bd      	mov	sp, r7
 8012f72:	bd90      	pop	{r4, r7, pc}
 8012f74:	08012f79 	.word	0x08012f79

08012f78 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenCoverTransitionEastImpl()
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b084      	sub	sp, #16
 8012f7c:	af02      	add	r7, sp, #8
 8012f7e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::CoverTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8012f8c:	461a      	mov	r2, r3
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8012f94:	9300      	str	r3, [sp, #0]
 8012f96:	4b04      	ldr	r3, [pc, #16]	; (8012fa8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x30>)
 8012f98:	4804      	ldr	r0, [pc, #16]	; (8012fac <_ZN23FrontendApplicationBase40gotoScreen2ScreenCoverTransitionEastImplEv+0x34>)
 8012f9a:	f000 faa1 	bl	80134e0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8012f9e:	bf00      	nop
 8012fa0:	3708      	adds	r7, #8
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	bd80      	pop	{r7, pc}
 8012fa6:	bf00      	nop
 8012fa8:	20008e70 	.word	0x20008e70
 8012fac:	20008e6c 	.word	0x20008e6c

08012fb0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8012fb0:	b480      	push	{r7}
 8012fb2:	b083      	sub	sp, #12
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
 8012fb8:	4a04      	ldr	r2, [pc, #16]	; (8012fcc <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	601a      	str	r2, [r3, #0]
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	370c      	adds	r7, #12
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fca:	4770      	bx	lr
 8012fcc:	0802be84 	.word	0x0802be84

08012fd0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b082      	sub	sp, #8
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f7ff ffe8 	bl	8012fb0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8012fe0:	4a08      	ldr	r2, [pc, #32]	; (8013004 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	601a      	str	r2, [r3, #0]
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	2200      	movs	r2, #0
 8012fea:	605a      	str	r2, [r3, #4]
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	2200      	movs	r2, #0
 8012ff0:	609a      	str	r2, [r3, #8]
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	60da      	str	r2, [r3, #12]
    {
    }
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	3708      	adds	r7, #8
 8012ffe:	46bd      	mov	sp, r7
 8013000:	bd80      	pop	{r7, pc}
 8013002:	bf00      	nop
 8013004:	0802bdfc 	.word	0x0802bdfc

08013008 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8013008:	b580      	push	{r7, lr}
 801300a:	b084      	sub	sp, #16
 801300c:	af00      	add	r7, sp, #0
 801300e:	60f8      	str	r0, [r7, #12]
 8013010:	60b9      	str	r1, [r7, #8]
 8013012:	4639      	mov	r1, r7
 8013014:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	4618      	mov	r0, r3
 801301c:	f7ff ffc8 	bl	8012fb0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8013020:	4a08      	ldr	r2, [pc, #32]	; (8013044 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	601a      	str	r2, [r3, #0]
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	68ba      	ldr	r2, [r7, #8]
 801302a:	605a      	str	r2, [r3, #4]
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	3308      	adds	r3, #8
 8013030:	463a      	mov	r2, r7
 8013032:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013036:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	4618      	mov	r0, r3
 801303e:	3710      	adds	r7, #16
 8013040:	46bd      	mov	sp, r7
 8013042:	bd80      	pop	{r7, pc}
 8013044:	0802bdfc 	.word	0x0802bdfc

08013048 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8013048:	b580      	push	{r7, lr}
 801304a:	b082      	sub	sp, #8
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	4618      	mov	r0, r3
 8013054:	f7ff fcb8 	bl	80129c8 <_ZN8touchgfx10TransitionC1Ev>
 8013058:	4a03      	ldr	r2, [pc, #12]	; (8013068 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	601a      	str	r2, [r3, #0]
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	4618      	mov	r0, r3
 8013062:	3708      	adds	r7, #8
 8013064:	46bd      	mov	sp, r7
 8013066:	bd80      	pop	{r7, pc}
 8013068:	0802bd8c 	.word	0x0802bd8c

0801306c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801306c:	b590      	push	{r4, r7, lr}
 801306e:	b08f      	sub	sp, #60	; 0x3c
 8013070:	af00      	add	r7, sp, #0
 8013072:	60f8      	str	r0, [r7, #12]
 8013074:	60b9      	str	r1, [r7, #8]
 8013076:	607a      	str	r2, [r7, #4]
 8013078:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	689a      	ldr	r2, [r3, #8]
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	689b      	ldr	r3, [r3, #8]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	3320      	adds	r3, #32
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	4610      	mov	r0, r2
 801308a:	4798      	blx	r3
 801308c:	4603      	mov	r3, r0
 801308e:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 8013092:	d205      	bcs.n	80130a0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8013094:	4b7e      	ldr	r3, [pc, #504]	; (8013290 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8013096:	4a7f      	ldr	r2, [pc, #508]	; (8013294 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8013098:	21a3      	movs	r1, #163	; 0xa3
 801309a:	487f      	ldr	r0, [pc, #508]	; (8013298 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 801309c:	f016 fbc0 	bl	8029820 <__assert_func>
 80130a0:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	685a      	ldr	r2, [r3, #4]
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	685b      	ldr	r3, [r3, #4]
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	3320      	adds	r3, #32
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	4610      	mov	r0, r2
 80130b2:	4798      	blx	r3
 80130b4:	4603      	mov	r3, r0
 80130b6:	2b0f      	cmp	r3, #15
 80130b8:	d805      	bhi.n	80130c6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80130ba:	4b78      	ldr	r3, [pc, #480]	; (801329c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80130bc:	4a75      	ldr	r2, [pc, #468]	; (8013294 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80130be:	21a4      	movs	r1, #164	; 0xa4
 80130c0:	4875      	ldr	r0, [pc, #468]	; (8013298 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80130c2:	f016 fbad 	bl	8029820 <__assert_func>
 80130c6:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	68da      	ldr	r2, [r3, #12]
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	68db      	ldr	r3, [r3, #12]
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	3320      	adds	r3, #32
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	4610      	mov	r0, r2
 80130d8:	4798      	blx	r3
 80130da:	4603      	mov	r3, r0
 80130dc:	2b0b      	cmp	r3, #11
 80130de:	d805      	bhi.n	80130ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 80130e0:	4b6f      	ldr	r3, [pc, #444]	; (80132a0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 80130e2:	4a6c      	ldr	r2, [pc, #432]	; (8013294 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80130e4:	21a5      	movs	r1, #165	; 0xa5
 80130e6:	486c      	ldr	r0, [pc, #432]	; (8013298 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80130e8:	f016 fb9a 	bl	8029820 <__assert_func>
 80130ec:	bf00      	nop
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80130f2:	68bb      	ldr	r3, [r7, #8]
 80130f4:	627b      	str	r3, [r7, #36]	; 0x24
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80130fa:	f008 f987 	bl	801b40c <_ZN8touchgfx11Application11getInstanceEv>
 80130fe:	4603      	mov	r3, r0
 8013100:	4618      	mov	r0, r3
 8013102:	f008 f989 	bl	801b418 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8013106:	6a3b      	ldr	r3, [r7, #32]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d008      	beq.n	8013120 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 801310e:	6a3b      	ldr	r3, [r7, #32]
 8013110:	681a      	ldr	r2, [r3, #0]
 8013112:	6a3b      	ldr	r3, [r7, #32]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	330c      	adds	r3, #12
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	4610      	mov	r0, r2
 801311e:	4798      	blx	r3
    if (*currentTrans)
 8013120:	6a3b      	ldr	r3, [r7, #32]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d007      	beq.n	8013138 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8013128:	6a3b      	ldr	r3, [r7, #32]
 801312a:	681a      	ldr	r2, [r3, #0]
 801312c:	6a3b      	ldr	r3, [r7, #32]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	4610      	mov	r0, r2
 8013136:	4798      	blx	r3
    if (*currentScreen)
 8013138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d008      	beq.n	8013152 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8013140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013142:	681a      	ldr	r2, [r3, #0]
 8013144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	3314      	adds	r3, #20
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	4610      	mov	r0, r2
 8013150:	4798      	blx	r3
    if (*currentPresenter)
 8013152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d008      	beq.n	801316c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 801315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315c:	681a      	ldr	r2, [r3, #0]
 801315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	3304      	adds	r3, #4
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	4610      	mov	r0, r2
 801316a:	4798      	blx	r3
    if (*currentScreen)
 801316c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d007      	beq.n	8013184 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 8013174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013176:	681a      	ldr	r2, [r3, #0]
 8013178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	4610      	mov	r0, r2
 8013182:	4798      	blx	r3
    if (*currentPresenter)
 8013184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d008      	beq.n	801319e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 801318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801318e:	681a      	ldr	r2, [r3, #0]
 8013190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	3308      	adds	r3, #8
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	4610      	mov	r0, r2
 801319c:	4798      	blx	r3
}
 801319e:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	68db      	ldr	r3, [r3, #12]
 80131a4:	2100      	movs	r1, #0
 80131a6:	4618      	mov	r0, r3
 80131a8:	f000 fab8 	bl	801371c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80131ac:	4603      	mov	r3, r0
 80131ae:	4619      	mov	r1, r3
 80131b0:	200c      	movs	r0, #12
 80131b2:	f7ff f91f 	bl	80123f4 <_ZnwjPv>
 80131b6:	4604      	mov	r4, r0
 80131b8:	4620      	mov	r0, r4
 80131ba:	f7ff ff45 	bl	8013048 <_ZN8touchgfx12NoTransitionC1Ev>
 80131be:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	689b      	ldr	r3, [r3, #8]
 80131c4:	2100      	movs	r1, #0
 80131c6:	4618      	mov	r0, r3
 80131c8:	f000 fabb 	bl	8013742 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 80131cc:	4603      	mov	r3, r0
 80131ce:	4619      	mov	r1, r3
 80131d0:	f44f 70fe 	mov.w	r0, #508	; 0x1fc
 80131d4:	f7ff f90e 	bl	80123f4 <_ZnwjPv>
 80131d8:	4604      	mov	r4, r0
 80131da:	4620      	mov	r0, r4
 80131dc:	f003 f832 	bl	8016244 <_ZN11Screen1ViewC1Ev>
 80131e0:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	685b      	ldr	r3, [r3, #4]
 80131e6:	2100      	movs	r1, #0
 80131e8:	4618      	mov	r0, r3
 80131ea:	f000 fabd 	bl	8013768 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 80131ee:	4603      	mov	r3, r0
 80131f0:	4619      	mov	r1, r3
 80131f2:	2010      	movs	r0, #16
 80131f4:	f7ff f8fe 	bl	80123f4 <_ZnwjPv>
 80131f8:	4604      	mov	r4, r0
 80131fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80131fc:	4620      	mov	r0, r4
 80131fe:	f002 ffc9 	bl	8016194 <_ZN16Screen1PresenterC1ER11Screen1View>
 8013202:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013208:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801320a:	68bb      	ldr	r3, [r7, #8]
 801320c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801320e:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013214:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8013216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013218:	2b00      	cmp	r3, #0
 801321a:	d002      	beq.n	8013222 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b6>
 801321c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801321e:	3304      	adds	r3, #4
 8013220:	e000      	b.n	8013224 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8013222:	2300      	movs	r3, #0
 8013224:	4619      	mov	r1, r3
 8013226:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8013228:	f7ff fcbc 	bl	8012ba4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801322e:	3304      	adds	r3, #4
 8013230:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8013232:	4618      	mov	r0, r3
 8013234:	f7ff fd4c 	bl	8012cd0 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8013238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801323a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801323c:	4618      	mov	r0, r3
 801323e:	f000 faa6 	bl	801378e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8013242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013244:	61fb      	str	r3, [r7, #28]
 8013246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013248:	61bb      	str	r3, [r7, #24]
 801324a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801324c:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 801324e:	69fb      	ldr	r3, [r7, #28]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	330c      	adds	r3, #12
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	69f8      	ldr	r0, [r7, #28]
 8013258:	4798      	blx	r3
    newPresenter->activate();
 801325a:	69bb      	ldr	r3, [r7, #24]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	69b8      	ldr	r0, [r7, #24]
 8013262:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8013264:	6979      	ldr	r1, [r7, #20]
 8013266:	69f8      	ldr	r0, [r7, #28]
 8013268:	f009 fcac 	bl	801cbc4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 801326c:	697b      	ldr	r3, [r7, #20]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	3310      	adds	r3, #16
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	6978      	ldr	r0, [r7, #20]
 8013276:	4798      	blx	r3
    newTransition->invalidate();
 8013278:	697b      	ldr	r3, [r7, #20]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	3314      	adds	r3, #20
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	6978      	ldr	r0, [r7, #20]
 8013282:	4798      	blx	r3
}
 8013284:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 8013286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013288:	4618      	mov	r0, r3
 801328a:	373c      	adds	r7, #60	; 0x3c
 801328c:	46bd      	mov	sp, r7
 801328e:	bd90      	pop	{r4, r7, pc}
 8013290:	0802ab98 	.word	0x0802ab98
 8013294:	0802ac28 	.word	0x0802ac28
 8013298:	0802ad2c 	.word	0x0802ad2c
 801329c:	0802ad70 	.word	0x0802ad70
 80132a0:	0802ae14 	.word	0x0802ae14

080132a4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80132a4:	b590      	push	{r4, r7, lr}
 80132a6:	b08f      	sub	sp, #60	; 0x3c
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	60f8      	str	r0, [r7, #12]
 80132ac:	60b9      	str	r1, [r7, #8]
 80132ae:	607a      	str	r2, [r7, #4]
 80132b0:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	689a      	ldr	r2, [r3, #8]
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	689b      	ldr	r3, [r3, #8]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	3320      	adds	r3, #32
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	4610      	mov	r0, r2
 80132c2:	4798      	blx	r3
 80132c4:	4603      	mov	r3, r0
 80132c6:	f5b3 7ffe 	cmp.w	r3, #508	; 0x1fc
 80132ca:	d205      	bcs.n	80132d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 80132cc:	4b7f      	ldr	r3, [pc, #508]	; (80134cc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80132ce:	4a80      	ldr	r2, [pc, #512]	; (80134d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80132d0:	21a3      	movs	r1, #163	; 0xa3
 80132d2:	4880      	ldr	r0, [pc, #512]	; (80134d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80132d4:	f016 faa4 	bl	8029820 <__assert_func>
 80132d8:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	685a      	ldr	r2, [r3, #4]
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	685b      	ldr	r3, [r3, #4]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	3320      	adds	r3, #32
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	4610      	mov	r0, r2
 80132ea:	4798      	blx	r3
 80132ec:	4603      	mov	r3, r0
 80132ee:	2b0f      	cmp	r3, #15
 80132f0:	d805      	bhi.n	80132fe <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 80132f2:	4b79      	ldr	r3, [pc, #484]	; (80134d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 80132f4:	4a76      	ldr	r2, [pc, #472]	; (80134d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 80132f6:	21a4      	movs	r1, #164	; 0xa4
 80132f8:	4876      	ldr	r0, [pc, #472]	; (80134d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 80132fa:	f016 fa91 	bl	8029820 <__assert_func>
 80132fe:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	68da      	ldr	r2, [r3, #12]
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	68db      	ldr	r3, [r3, #12]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	3320      	adds	r3, #32
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	4610      	mov	r0, r2
 8013310:	4798      	blx	r3
 8013312:	4603      	mov	r3, r0
 8013314:	2b37      	cmp	r3, #55	; 0x37
 8013316:	d805      	bhi.n	8013324 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8013318:	4b70      	ldr	r3, [pc, #448]	; (80134dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 801331a:	4a6d      	ldr	r2, [pc, #436]	; (80134d0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 801331c:	21a5      	movs	r1, #165	; 0xa5
 801331e:	486d      	ldr	r0, [pc, #436]	; (80134d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8013320:	f016 fa7e 	bl	8029820 <__assert_func>
 8013324:	bf00      	nop
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	62bb      	str	r3, [r7, #40]	; 0x28
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	627b      	str	r3, [r7, #36]	; 0x24
 801332e:	683b      	ldr	r3, [r7, #0]
 8013330:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8013332:	f008 f86b 	bl	801b40c <_ZN8touchgfx11Application11getInstanceEv>
 8013336:	4603      	mov	r3, r0
 8013338:	4618      	mov	r0, r3
 801333a:	f008 f86d 	bl	801b418 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 801333e:	6a3b      	ldr	r3, [r7, #32]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d008      	beq.n	8013358 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8013346:	6a3b      	ldr	r3, [r7, #32]
 8013348:	681a      	ldr	r2, [r3, #0]
 801334a:	6a3b      	ldr	r3, [r7, #32]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	330c      	adds	r3, #12
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	4610      	mov	r0, r2
 8013356:	4798      	blx	r3
    if (*currentTrans)
 8013358:	6a3b      	ldr	r3, [r7, #32]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d007      	beq.n	8013370 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 8013360:	6a3b      	ldr	r3, [r7, #32]
 8013362:	681a      	ldr	r2, [r3, #0]
 8013364:	6a3b      	ldr	r3, [r7, #32]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	4610      	mov	r0, r2
 801336e:	4798      	blx	r3
    if (*currentScreen)
 8013370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d008      	beq.n	801338a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 8013378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801337a:	681a      	ldr	r2, [r3, #0]
 801337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	3314      	adds	r3, #20
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	4610      	mov	r0, r2
 8013388:	4798      	blx	r3
    if (*currentPresenter)
 801338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d008      	beq.n	80133a4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 8013392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013394:	681a      	ldr	r2, [r3, #0]
 8013396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	3304      	adds	r3, #4
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	4610      	mov	r0, r2
 80133a2:	4798      	blx	r3
    if (*currentScreen)
 80133a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d007      	beq.n	80133bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 80133ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ae:	681a      	ldr	r2, [r3, #0]
 80133b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	4610      	mov	r0, r2
 80133ba:	4798      	blx	r3
    if (*currentPresenter)
 80133bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d008      	beq.n	80133d6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 80133c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c6:	681a      	ldr	r2, [r3, #0]
 80133c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	3308      	adds	r3, #8
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	4610      	mov	r0, r2
 80133d4:	4798      	blx	r3
}
 80133d6:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	68db      	ldr	r3, [r3, #12]
 80133dc:	2100      	movs	r1, #0
 80133de:	4618      	mov	r0, r3
 80133e0:	f000 f9e3 	bl	80137aa <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE3EEEEERT_t>
 80133e4:	4603      	mov	r3, r0
 80133e6:	4619      	mov	r1, r3
 80133e8:	2038      	movs	r0, #56	; 0x38
 80133ea:	f7ff f803 	bl	80123f4 <_ZnwjPv>
 80133ee:	4604      	mov	r4, r0
 80133f0:	2114      	movs	r1, #20
 80133f2:	4620      	mov	r0, r4
 80133f4:	f000 fa20 	bl	8013838 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh>
 80133f8:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	689b      	ldr	r3, [r3, #8]
 80133fe:	2100      	movs	r1, #0
 8013400:	4618      	mov	r0, r3
 8013402:	f000 f99e 	bl	8013742 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8013406:	4603      	mov	r3, r0
 8013408:	4619      	mov	r1, r3
 801340a:	f44f 70fe 	mov.w	r0, #508	; 0x1fc
 801340e:	f7fe fff1 	bl	80123f4 <_ZnwjPv>
 8013412:	4604      	mov	r4, r0
 8013414:	4620      	mov	r0, r4
 8013416:	f002 ff15 	bl	8016244 <_ZN11Screen1ViewC1Ev>
 801341a:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	685b      	ldr	r3, [r3, #4]
 8013420:	2100      	movs	r1, #0
 8013422:	4618      	mov	r0, r3
 8013424:	f000 f9a0 	bl	8013768 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8013428:	4603      	mov	r3, r0
 801342a:	4619      	mov	r1, r3
 801342c:	2010      	movs	r0, #16
 801342e:	f7fe ffe1 	bl	80123f4 <_ZnwjPv>
 8013432:	4604      	mov	r4, r0
 8013434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013436:	4620      	mov	r0, r4
 8013438:	f002 feac 	bl	8016194 <_ZN16Screen1PresenterC1ER11Screen1View>
 801343c:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013442:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8013444:	68bb      	ldr	r3, [r7, #8]
 8013446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013448:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801344e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8013450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013452:	2b00      	cmp	r3, #0
 8013454:	d002      	beq.n	801345c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8013456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013458:	3304      	adds	r3, #4
 801345a:	e000      	b.n	801345e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_14WipeTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 801345c:	2300      	movs	r3, #0
 801345e:	4619      	mov	r1, r3
 8013460:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8013462:	f7ff fb9f 	bl	8012ba4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8013466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013468:	3304      	adds	r3, #4
 801346a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801346c:	4618      	mov	r0, r3
 801346e:	f7ff fc2f 	bl	8012cd0 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8013472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013474:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013476:	4618      	mov	r0, r3
 8013478:	f000 f989 	bl	801378e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 801347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801347e:	61fb      	str	r3, [r7, #28]
 8013480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013482:	61bb      	str	r3, [r7, #24]
 8013484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013486:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8013488:	69fb      	ldr	r3, [r7, #28]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	330c      	adds	r3, #12
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	69f8      	ldr	r0, [r7, #28]
 8013492:	4798      	blx	r3
    newPresenter->activate();
 8013494:	69bb      	ldr	r3, [r7, #24]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	69b8      	ldr	r0, [r7, #24]
 801349c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 801349e:	6979      	ldr	r1, [r7, #20]
 80134a0:	69f8      	ldr	r0, [r7, #28]
 80134a2:	f009 fb8f 	bl	801cbc4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80134a6:	697b      	ldr	r3, [r7, #20]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	3310      	adds	r3, #16
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	6978      	ldr	r0, [r7, #20]
 80134b0:	4798      	blx	r3
    newTransition->invalidate();
 80134b2:	697b      	ldr	r3, [r7, #20]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	3314      	adds	r3, #20
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	6978      	ldr	r0, [r7, #20]
 80134bc:	4798      	blx	r3
}
 80134be:	bf00      	nop
    return newPresenter;
 80134c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80134c2:	4618      	mov	r0, r3
 80134c4:	373c      	adds	r7, #60	; 0x3c
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd90      	pop	{r4, r7, pc}
 80134ca:	bf00      	nop
 80134cc:	0802ab98 	.word	0x0802ab98
 80134d0:	0802aeb8 	.word	0x0802aeb8
 80134d4:	0802ad2c 	.word	0x0802ad2c
 80134d8:	0802ad70 	.word	0x0802ad70
 80134dc:	0802ae14 	.word	0x0802ae14

080134e0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80134e0:	b590      	push	{r4, r7, lr}
 80134e2:	b08f      	sub	sp, #60	; 0x3c
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	60f8      	str	r0, [r7, #12]
 80134e8:	60b9      	str	r1, [r7, #8]
 80134ea:	607a      	str	r2, [r7, #4]
 80134ec:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	689a      	ldr	r2, [r3, #8]
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	689b      	ldr	r3, [r3, #8]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	3320      	adds	r3, #32
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	4610      	mov	r0, r2
 80134fe:	4798      	blx	r3
 8013500:	4603      	mov	r3, r0
 8013502:	f5b3 7fc6 	cmp.w	r3, #396	; 0x18c
 8013506:	d205      	bcs.n	8013514 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8013508:	4b7f      	ldr	r3, [pc, #508]	; (8013708 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 801350a:	4a80      	ldr	r2, [pc, #512]	; (801370c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 801350c:	21a3      	movs	r1, #163	; 0xa3
 801350e:	4880      	ldr	r0, [pc, #512]	; (8013710 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8013510:	f016 f986 	bl	8029820 <__assert_func>
 8013514:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	685a      	ldr	r2, [r3, #4]
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	685b      	ldr	r3, [r3, #4]
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	3320      	adds	r3, #32
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	4610      	mov	r0, r2
 8013526:	4798      	blx	r3
 8013528:	4603      	mov	r3, r0
 801352a:	2b0f      	cmp	r3, #15
 801352c:	d805      	bhi.n	801353a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 801352e:	4b79      	ldr	r3, [pc, #484]	; (8013714 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 8013530:	4a76      	ldr	r2, [pc, #472]	; (801370c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8013532:	21a4      	movs	r1, #164	; 0xa4
 8013534:	4876      	ldr	r0, [pc, #472]	; (8013710 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8013536:	f016 f973 	bl	8029820 <__assert_func>
 801353a:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	68da      	ldr	r2, [r3, #12]
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	68db      	ldr	r3, [r3, #12]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	3320      	adds	r3, #32
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	4610      	mov	r0, r2
 801354c:	4798      	blx	r3
 801354e:	4603      	mov	r3, r0
 8013550:	2b4b      	cmp	r3, #75	; 0x4b
 8013552:	d805      	bhi.n	8013560 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 8013554:	4b70      	ldr	r3, [pc, #448]	; (8013718 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 8013556:	4a6d      	ldr	r2, [pc, #436]	; (801370c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8013558:	21a5      	movs	r1, #165	; 0xa5
 801355a:	486d      	ldr	r0, [pc, #436]	; (8013710 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 801355c:	f016 f960 	bl	8029820 <__assert_func>
 8013560:	bf00      	nop
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	62bb      	str	r3, [r7, #40]	; 0x28
 8013566:	68bb      	ldr	r3, [r7, #8]
 8013568:	627b      	str	r3, [r7, #36]	; 0x24
 801356a:	683b      	ldr	r3, [r7, #0]
 801356c:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 801356e:	f007 ff4d 	bl	801b40c <_ZN8touchgfx11Application11getInstanceEv>
 8013572:	4603      	mov	r3, r0
 8013574:	4618      	mov	r0, r3
 8013576:	f007 ff4f 	bl	801b418 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 801357a:	6a3b      	ldr	r3, [r7, #32]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d008      	beq.n	8013594 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
        (*currentTrans)->tearDown();
 8013582:	6a3b      	ldr	r3, [r7, #32]
 8013584:	681a      	ldr	r2, [r3, #0]
 8013586:	6a3b      	ldr	r3, [r7, #32]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	330c      	adds	r3, #12
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	4610      	mov	r0, r2
 8013592:	4798      	blx	r3
    if (*currentTrans)
 8013594:	6a3b      	ldr	r3, [r7, #32]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d007      	beq.n	80135ac <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xcc>
        (*currentTrans)->~Transition();
 801359c:	6a3b      	ldr	r3, [r7, #32]
 801359e:	681a      	ldr	r2, [r3, #0]
 80135a0:	6a3b      	ldr	r3, [r7, #32]
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	4610      	mov	r0, r2
 80135aa:	4798      	blx	r3
    if (*currentScreen)
 80135ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d008      	beq.n	80135c6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe6>
        (*currentScreen)->tearDownScreen();
 80135b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135b6:	681a      	ldr	r2, [r3, #0]
 80135b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	3314      	adds	r3, #20
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	4610      	mov	r0, r2
 80135c4:	4798      	blx	r3
    if (*currentPresenter)
 80135c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d008      	beq.n	80135e0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x100>
        (*currentPresenter)->deactivate();
 80135ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135d0:	681a      	ldr	r2, [r3, #0]
 80135d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	3304      	adds	r3, #4
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	4610      	mov	r0, r2
 80135de:	4798      	blx	r3
    if (*currentScreen)
 80135e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d007      	beq.n	80135f8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x118>
        (*currentScreen)->~Screen();
 80135e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ea:	681a      	ldr	r2, [r3, #0]
 80135ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	4610      	mov	r0, r2
 80135f6:	4798      	blx	r3
    if (*currentPresenter)
 80135f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d008      	beq.n	8013612 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x132>
        (*currentPresenter)->~Presenter();
 8013600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013602:	681a      	ldr	r2, [r3, #0]
 8013604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	3308      	adds	r3, #8
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	4610      	mov	r0, r2
 8013610:	4798      	blx	r3
}
 8013612:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	68db      	ldr	r3, [r3, #12]
 8013618:	2100      	movs	r1, #0
 801361a:	4618      	mov	r0, r3
 801361c:	f000 f94e 	bl	80138bc <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>
 8013620:	4603      	mov	r3, r0
 8013622:	4619      	mov	r1, r3
 8013624:	204c      	movs	r0, #76	; 0x4c
 8013626:	f7fe fee5 	bl	80123f4 <_ZnwjPv>
 801362a:	4604      	mov	r4, r0
 801362c:	2114      	movs	r1, #20
 801362e:	4620      	mov	r0, r4
 8013630:	f000 f9ae 	bl	8013990 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>
 8013634:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	689b      	ldr	r3, [r3, #8]
 801363a:	2100      	movs	r1, #0
 801363c:	4618      	mov	r0, r3
 801363e:	f000 fa01 	bl	8013a44 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 8013642:	4603      	mov	r3, r0
 8013644:	4619      	mov	r1, r3
 8013646:	f44f 70c6 	mov.w	r0, #396	; 0x18c
 801364a:	f7fe fed3 	bl	80123f4 <_ZnwjPv>
 801364e:	4604      	mov	r4, r0
 8013650:	4620      	mov	r0, r4
 8013652:	f002 feb7 	bl	80163c4 <_ZN11Screen2ViewC1Ev>
 8013656:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	685b      	ldr	r3, [r3, #4]
 801365c:	2100      	movs	r1, #0
 801365e:	4618      	mov	r0, r3
 8013660:	f000 fa03 	bl	8013a6a <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 8013664:	4603      	mov	r3, r0
 8013666:	4619      	mov	r1, r3
 8013668:	2010      	movs	r0, #16
 801366a:	f7fe fec3 	bl	80123f4 <_ZnwjPv>
 801366e:	4604      	mov	r4, r0
 8013670:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013672:	4620      	mov	r0, r4
 8013674:	f002 fe4e 	bl	8016314 <_ZN16Screen2PresenterC1ER11Screen2View>
 8013678:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801367e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8013680:	68bb      	ldr	r3, [r7, #8]
 8013682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013684:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801368a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801368c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801368e:	2b00      	cmp	r3, #0
 8013690:	d002      	beq.n	8013698 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 8013692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013694:	3304      	adds	r3, #4
 8013696:	e000      	b.n	801369a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15CoverTransitionILNS_9DirectionE2EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 8013698:	2300      	movs	r3, #0
 801369a:	4619      	mov	r1, r3
 801369c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801369e:	f7ff fa81 	bl	8012ba4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80136a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a4:	3304      	adds	r3, #4
 80136a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7ff fb11 	bl	8012cd0 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80136ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80136b2:	4618      	mov	r0, r3
 80136b4:	f000 f9ec 	bl	8013a90 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 80136b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ba:	61fb      	str	r3, [r7, #28]
 80136bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136be:	61bb      	str	r3, [r7, #24]
 80136c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136c2:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80136c4:	69fb      	ldr	r3, [r7, #28]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	330c      	adds	r3, #12
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	69f8      	ldr	r0, [r7, #28]
 80136ce:	4798      	blx	r3
    newPresenter->activate();
 80136d0:	69bb      	ldr	r3, [r7, #24]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	69b8      	ldr	r0, [r7, #24]
 80136d8:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80136da:	6979      	ldr	r1, [r7, #20]
 80136dc:	69f8      	ldr	r0, [r7, #28]
 80136de:	f009 fa71 	bl	801cbc4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80136e2:	697b      	ldr	r3, [r7, #20]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	3310      	adds	r3, #16
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	6978      	ldr	r0, [r7, #20]
 80136ec:	4798      	blx	r3
    newTransition->invalidate();
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	3314      	adds	r3, #20
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	6978      	ldr	r0, [r7, #20]
 80136f8:	4798      	blx	r3
}
 80136fa:	bf00      	nop
    return newPresenter;
 80136fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80136fe:	4618      	mov	r0, r3
 8013700:	373c      	adds	r7, #60	; 0x3c
 8013702:	46bd      	mov	sp, r7
 8013704:	bd90      	pop	{r4, r7, pc}
 8013706:	bf00      	nop
 8013708:	0802ab98 	.word	0x0802ab98
 801370c:	0802afd0 	.word	0x0802afd0
 8013710:	0802ad2c 	.word	0x0802ad2c
 8013714:	0802ad70 	.word	0x0802ad70
 8013718:	0802ae14 	.word	0x0802ae14

0801371c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 801371c:	b580      	push	{r7, lr}
 801371e:	b082      	sub	sp, #8
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
 8013724:	460b      	mov	r3, r1
 8013726:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	3324      	adds	r3, #36	; 0x24
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	887a      	ldrh	r2, [r7, #2]
 8013732:	4611      	mov	r1, r2
 8013734:	6878      	ldr	r0, [r7, #4]
 8013736:	4798      	blx	r3
 8013738:	4603      	mov	r3, r0
    }
 801373a:	4618      	mov	r0, r3
 801373c:	3708      	adds	r7, #8
 801373e:	46bd      	mov	sp, r7
 8013740:	bd80      	pop	{r7, pc}

08013742 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8013742:	b580      	push	{r7, lr}
 8013744:	b082      	sub	sp, #8
 8013746:	af00      	add	r7, sp, #0
 8013748:	6078      	str	r0, [r7, #4]
 801374a:	460b      	mov	r3, r1
 801374c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	3324      	adds	r3, #36	; 0x24
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	887a      	ldrh	r2, [r7, #2]
 8013758:	4611      	mov	r1, r2
 801375a:	6878      	ldr	r0, [r7, #4]
 801375c:	4798      	blx	r3
 801375e:	4603      	mov	r3, r0
    }
 8013760:	4618      	mov	r0, r3
 8013762:	3708      	adds	r7, #8
 8013764:	46bd      	mov	sp, r7
 8013766:	bd80      	pop	{r7, pc}

08013768 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 8013768:	b580      	push	{r7, lr}
 801376a:	b082      	sub	sp, #8
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
 8013770:	460b      	mov	r3, r1
 8013772:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	3324      	adds	r3, #36	; 0x24
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	887a      	ldrh	r2, [r7, #2]
 801377e:	4611      	mov	r1, r2
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	4798      	blx	r3
 8013784:	4603      	mov	r3, r0
    }
 8013786:	4618      	mov	r0, r3
 8013788:	3708      	adds	r7, #8
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}

0801378e <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 801378e:	b480      	push	{r7}
 8013790:	b083      	sub	sp, #12
 8013792:	af00      	add	r7, sp, #0
 8013794:	6078      	str	r0, [r7, #4]
 8013796:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	683a      	ldr	r2, [r7, #0]
 801379c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801379e:	bf00      	nop
 80137a0:	370c      	adds	r7, #12
 80137a2:	46bd      	mov	sp, r7
 80137a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a8:	4770      	bx	lr

080137aa <_ZN8touchgfx17AbstractPartition2atINS_14WipeTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 80137aa:	b580      	push	{r7, lr}
 80137ac:	b082      	sub	sp, #8
 80137ae:	af00      	add	r7, sp, #0
 80137b0:	6078      	str	r0, [r7, #4]
 80137b2:	460b      	mov	r3, r1
 80137b4:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	3324      	adds	r3, #36	; 0x24
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	887a      	ldrh	r2, [r7, #2]
 80137c0:	4611      	mov	r1, r2
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	4798      	blx	r3
 80137c6:	4603      	mov	r3, r0
    }
 80137c8:	4618      	mov	r0, r3
 80137ca:	3708      	adds	r7, #8
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bd80      	pop	{r7, pc}

080137d0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectC1Ev>:
{
public:
    /**
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b082      	sub	sp, #8
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	4618      	mov	r0, r3
 80137dc:	f7ff fa86 	bl	8012cec <_ZN8touchgfx6WidgetC1Ev>
 80137e0:	4a03      	ldr	r2, [pc, #12]	; (80137f0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectC1Ev+0x20>)
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	601a      	str	r2, [r3, #0]
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	4618      	mov	r0, r3
 80137ea:	3708      	adds	r7, #8
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bd80      	pop	{r7, pc}
 80137f0:	0802bbf8 	.word	0x0802bbf8

080137f4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectD1Ev>:
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b082      	sub	sp, #8
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
 80137fc:	4a05      	ldr	r2, [pc, #20]	; (8013814 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectD1Ev+0x20>)
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	601a      	str	r2, [r3, #0]
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	4618      	mov	r0, r3
 8013806:	f7ff fa83 	bl	8012d10 <_ZN8touchgfx6WidgetD1Ev>
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	4618      	mov	r0, r3
 801380e:	3708      	adds	r7, #8
 8013810:	46bd      	mov	sp, r7
 8013812:	bd80      	pop	{r7, pc}
 8013814:	0802bbf8 	.word	0x0802bbf8

08013818 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectD0Ev>:
 8013818:	b580      	push	{r7, lr}
 801381a:	b082      	sub	sp, #8
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
 8013820:	6878      	ldr	r0, [r7, #4]
 8013822:	f7ff ffe7 	bl	80137f4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectD1Ev>
 8013826:	2128      	movs	r1, #40	; 0x28
 8013828:	6878      	ldr	r0, [r7, #4]
 801382a:	f015 ffca 	bl	80297c2 <_ZdlPvj>
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	4618      	mov	r0, r3
 8013832:	3708      	adds	r7, #8
 8013834:	46bd      	mov	sp, r7
 8013836:	bd80      	pop	{r7, pc}

08013838 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh>:
    /**
     * Initializes a new instance of the WipeTransition class.
     *
     * @param  transitionSteps (Optional) Number of steps in the transition animation.
     */
    WipeTransition(const uint8_t transitionSteps = 20)
 8013838:	b580      	push	{r7, lr}
 801383a:	b084      	sub	sp, #16
 801383c:	af02      	add	r7, sp, #8
 801383e:	6078      	str	r0, [r7, #4]
 8013840:	460b      	mov	r3, r1
 8013842:	70fb      	strb	r3, [r7, #3]
        : Transition(),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0),
          solid()
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	4618      	mov	r0, r3
 8013848:	f7ff f8be 	bl	80129c8 <_ZN8touchgfx10TransitionC1Ev>
 801384c:	4a18      	ldr	r2, [pc, #96]	; (80138b0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x78>)
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	601a      	str	r2, [r3, #0]
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	78fa      	ldrb	r2, [r7, #3]
 8013856:	725a      	strb	r2, [r3, #9]
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	2200      	movs	r2, #0
 801385c:	729a      	strb	r2, [r3, #10]
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	2200      	movs	r2, #0
 8013862:	81da      	strh	r2, [r3, #14]
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	3310      	adds	r3, #16
 8013868:	2228      	movs	r2, #40	; 0x28
 801386a:	2100      	movs	r1, #0
 801386c:	4618      	mov	r0, r3
 801386e:	f016 f957 	bl	8029b20 <memset>
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	3310      	adds	r3, #16
 8013876:	4618      	mov	r0, r3
 8013878:	f7ff ffaa 	bl	80137d0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectC1Ev>
    {
        switch (templateDirection)
        {
        case EAST:
        case WEST:
            targetValue = HAL::DISPLAY_WIDTH;
 801387c:	4b0d      	ldr	r3, [pc, #52]	; (80138b4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x7c>)
 801387e:	881b      	ldrh	r3, [r3, #0]
 8013880:	b21a      	sxth	r2, r3
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	819a      	strh	r2, [r3, #12]
            break;
 8013886:	bf00      	nop
            targetValue = HAL::DISPLAY_HEIGHT;
            break;
        }

        // Ensure that the solid area covers the entire screen
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	f103 0010 	add.w	r0, r3, #16
 801388e:	4b09      	ldr	r3, [pc, #36]	; (80138b4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x7c>)
 8013890:	881b      	ldrh	r3, [r3, #0]
 8013892:	b21a      	sxth	r2, r3
 8013894:	4b08      	ldr	r3, [pc, #32]	; (80138b8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EEC1Eh+0x80>)
 8013896:	881b      	ldrh	r3, [r3, #0]
 8013898:	b21b      	sxth	r3, r3
 801389a:	9300      	str	r3, [sp, #0]
 801389c:	4613      	mov	r3, r2
 801389e:	2200      	movs	r2, #0
 80138a0:	2100      	movs	r1, #0
 80138a2:	f7fe ff0d 	bl	80126c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	4618      	mov	r0, r3
 80138aa:	3708      	adds	r7, #8
 80138ac:	46bd      	mov	sp, r7
 80138ae:	bd80      	pop	{r7, pc}
 80138b0:	0802bbd4 	.word	0x0802bbd4
 80138b4:	20008e22 	.word	0x20008e22
 80138b8:	20008e24 	.word	0x20008e24

080138bc <_ZN8touchgfx17AbstractPartition2atINS_15CoverTransitionILNS_9DirectionE2EEEEERT_t>:
    T& at(const uint16_t index)
 80138bc:	b580      	push	{r7, lr}
 80138be:	b082      	sub	sp, #8
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
 80138c4:	460b      	mov	r3, r1
 80138c6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	3324      	adds	r3, #36	; 0x24
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	887a      	ldrh	r2, [r7, #2]
 80138d2:	4611      	mov	r1, r2
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	4798      	blx	r3
 80138d8:	4603      	mov	r3, r0
    }
 80138da:	4618      	mov	r0, r3
 80138dc:	3708      	adds	r7, #8
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}
	...

080138e4 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b082      	sub	sp, #8
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
 80138ec:	4a05      	ldr	r2, [pc, #20]	; (8013904 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev+0x20>)
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	601a      	str	r2, [r3, #0]
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	4618      	mov	r0, r3
 80138f6:	f000 f91d 	bl	8013b34 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	4618      	mov	r0, r3
 80138fe:	3708      	adds	r7, #8
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}
 8013904:	0802bcf4 	.word	0x0802bcf4

08013908 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED0Ev>:
 8013908:	b580      	push	{r7, lr}
 801390a:	b082      	sub	sp, #8
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
 8013910:	6878      	ldr	r0, [r7, #4]
 8013912:	f7ff ffe7 	bl	80138e4 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8013916:	2110      	movs	r1, #16
 8013918:	6878      	ldr	r0, [r7, #4]
 801391a:	f015 ff52 	bl	80297c2 <_ZdlPvj>
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	4618      	mov	r0, r3
 8013922:	3708      	adds	r7, #8
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}

08013928 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>:
            break;
        }
    }

private:
    class FullSolidRect : public Widget
 8013928:	b580      	push	{r7, lr}
 801392a:	b082      	sub	sp, #8
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	4618      	mov	r0, r3
 8013934:	f7ff f9da 	bl	8012cec <_ZN8touchgfx6WidgetC1Ev>
 8013938:	4a03      	ldr	r2, [pc, #12]	; (8013948 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev+0x20>)
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	601a      	str	r2, [r3, #0]
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	4618      	mov	r0, r3
 8013942:	3708      	adds	r7, #8
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}
 8013948:	0802bc8c 	.word	0x0802bc8c

0801394c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>:
 801394c:	b580      	push	{r7, lr}
 801394e:	b082      	sub	sp, #8
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
 8013954:	4a05      	ldr	r2, [pc, #20]	; (801396c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev+0x20>)
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	601a      	str	r2, [r3, #0]
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	4618      	mov	r0, r3
 801395e:	f7ff f9d7 	bl	8012d10 <_ZN8touchgfx6WidgetD1Ev>
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	4618      	mov	r0, r3
 8013966:	3708      	adds	r7, #8
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}
 801396c:	0802bc8c 	.word	0x0802bc8c

08013970 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD0Ev>:
 8013970:	b580      	push	{r7, lr}
 8013972:	b082      	sub	sp, #8
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
 8013978:	6878      	ldr	r0, [r7, #4]
 801397a:	f7ff ffe7 	bl	801394c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 801397e:	2128      	movs	r1, #40	; 0x28
 8013980:	6878      	ldr	r0, [r7, #4]
 8013982:	f015 ff1e 	bl	80297c2 <_ZdlPvj>
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	4618      	mov	r0, r3
 801398a:	3708      	adds	r7, #8
 801398c:	46bd      	mov	sp, r7
 801398e:	bd80      	pop	{r7, pc}

08013990 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh>:
    CoverTransition(const uint8_t transitionSteps = 20)
 8013990:	b590      	push	{r4, r7, lr}
 8013992:	b087      	sub	sp, #28
 8013994:	af02      	add	r7, sp, #8
 8013996:	6078      	str	r0, [r7, #4]
 8013998:	460b      	mov	r3, r1
 801399a:	70fb      	strb	r3, [r7, #3]
          solid()
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	4618      	mov	r0, r3
 80139a0:	f7ff f812 	bl	80129c8 <_ZN8touchgfx10TransitionC1Ev>
 80139a4:	4a23      	ldr	r2, [pc, #140]	; (8013a34 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xa4>)
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	601a      	str	r2, [r3, #0]
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	f103 040c 	add.w	r4, r3, #12
 80139b0:	4a21      	ldr	r2, [pc, #132]	; (8013a38 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xa8>)
 80139b2:	f107 0308 	add.w	r3, r7, #8
 80139b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80139ba:	e883 0003 	stmia.w	r3, {r0, r1}
 80139be:	f107 0308 	add.w	r3, r7, #8
 80139c2:	cb0c      	ldmia	r3, {r2, r3}
 80139c4:	6879      	ldr	r1, [r7, #4]
 80139c6:	4620      	mov	r0, r4
 80139c8:	f000 f894 	bl	8013af4 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	78fa      	ldrb	r2, [r7, #3]
 80139d0:	771a      	strb	r2, [r3, #28]
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	2200      	movs	r2, #0
 80139d6:	775a      	strb	r2, [r3, #29]
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	2200      	movs	r2, #0
 80139dc:	841a      	strh	r2, [r3, #32]
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	2200      	movs	r2, #0
 80139e2:	845a      	strh	r2, [r3, #34]	; 0x22
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	3324      	adds	r3, #36	; 0x24
 80139e8:	2228      	movs	r2, #40	; 0x28
 80139ea:	2100      	movs	r1, #0
 80139ec:	4618      	mov	r0, r3
 80139ee:	f016 f897 	bl	8029b20 <memset>
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	3324      	adds	r3, #36	; 0x24
 80139f6:	4618      	mov	r0, r3
 80139f8:	f7ff ff96 	bl	8013928 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectC1Ev>
            targetValue = -HAL::DISPLAY_WIDTH;
 80139fc:	4b0f      	ldr	r3, [pc, #60]	; (8013a3c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xac>)
 80139fe:	881b      	ldrh	r3, [r3, #0]
 8013a00:	425b      	negs	r3, r3
 8013a02:	b29b      	uxth	r3, r3
 8013a04:	b21a      	sxth	r2, r3
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	83da      	strh	r2, [r3, #30]
            break;
 8013a0a:	bf00      	nop
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8013a12:	4b0a      	ldr	r3, [pc, #40]	; (8013a3c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xac>)
 8013a14:	881b      	ldrh	r3, [r3, #0]
 8013a16:	b21a      	sxth	r2, r3
 8013a18:	4b09      	ldr	r3, [pc, #36]	; (8013a40 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EEC1Eh+0xb0>)
 8013a1a:	881b      	ldrh	r3, [r3, #0]
 8013a1c:	b21b      	sxth	r3, r3
 8013a1e:	9300      	str	r3, [sp, #0]
 8013a20:	4613      	mov	r3, r2
 8013a22:	2200      	movs	r2, #0
 8013a24:	2100      	movs	r1, #0
 8013a26:	f7fe fe4b 	bl	80126c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	3714      	adds	r7, #20
 8013a30:	46bd      	mov	sp, r7
 8013a32:	bd90      	pop	{r4, r7, pc}
 8013a34:	0802bc60 	.word	0x0802bc60
 8013a38:	0802b0e8 	.word	0x0802b0e8
 8013a3c:	20008e22 	.word	0x20008e22
 8013a40:	20008e24 	.word	0x20008e24

08013a44 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 8013a44:	b580      	push	{r7, lr}
 8013a46:	b082      	sub	sp, #8
 8013a48:	af00      	add	r7, sp, #0
 8013a4a:	6078      	str	r0, [r7, #4]
 8013a4c:	460b      	mov	r3, r1
 8013a4e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	3324      	adds	r3, #36	; 0x24
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	887a      	ldrh	r2, [r7, #2]
 8013a5a:	4611      	mov	r1, r2
 8013a5c:	6878      	ldr	r0, [r7, #4]
 8013a5e:	4798      	blx	r3
 8013a60:	4603      	mov	r3, r0
    }
 8013a62:	4618      	mov	r0, r3
 8013a64:	3708      	adds	r7, #8
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}

08013a6a <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 8013a6a:	b580      	push	{r7, lr}
 8013a6c:	b082      	sub	sp, #8
 8013a6e:	af00      	add	r7, sp, #0
 8013a70:	6078      	str	r0, [r7, #4]
 8013a72:	460b      	mov	r3, r1
 8013a74:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	3324      	adds	r3, #36	; 0x24
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	887a      	ldrh	r2, [r7, #2]
 8013a80:	4611      	mov	r1, r2
 8013a82:	6878      	ldr	r0, [r7, #4]
 8013a84:	4798      	blx	r3
 8013a86:	4603      	mov	r3, r0
    }
 8013a88:	4618      	mov	r0, r3
 8013a8a:	3708      	adds	r7, #8
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bd80      	pop	{r7, pc}

08013a90 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 8013a90:	b480      	push	{r7}
 8013a92:	b083      	sub	sp, #12
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
 8013a98:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	683a      	ldr	r2, [r7, #0]
 8013a9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8013aa0:	bf00      	nop
 8013aa2:	370c      	adds	r7, #12
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aaa:	4770      	bx	lr

08013aac <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16tickMoveDrawableERNS_8DrawableE>:
    virtual void tickMoveDrawable(Drawable& d)
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b082      	sub	sp, #8
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
 8013ab4:	6039      	str	r1, [r7, #0]
            d.moveRelative(calculatedValue, 0);
 8013ab6:	683b      	ldr	r3, [r7, #0]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	3354      	adds	r3, #84	; 0x54
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	687a      	ldr	r2, [r7, #4]
 8013ac0:	f9b2 1020 	ldrsh.w	r1, [r2, #32]
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	6838      	ldr	r0, [r7, #0]
 8013ac8:	4798      	blx	r3
            break;
 8013aca:	bf00      	nop
    }
 8013acc:	bf00      	nop
 8013ace:	3708      	adds	r7, #8
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}

08013ad4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8013ad4:	b480      	push	{r7}
 8013ad6:	b083      	sub	sp, #12
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
 8013adc:	4a04      	ldr	r2, [pc, #16]	; (8013af0 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	601a      	str	r2, [r3, #0]
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	370c      	adds	r7, #12
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aee:	4770      	bx	lr
 8013af0:	0802bd0c 	.word	0x0802bd0c

08013af4 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b084      	sub	sp, #16
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	60f8      	str	r0, [r7, #12]
 8013afc:	60b9      	str	r1, [r7, #8]
 8013afe:	4639      	mov	r1, r7
 8013b00:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7ff ffe4 	bl	8013ad4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 8013b0c:	4a08      	ldr	r2, [pc, #32]	; (8013b30 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	601a      	str	r2, [r3, #0]
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	68ba      	ldr	r2, [r7, #8]
 8013b16:	605a      	str	r2, [r3, #4]
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	3308      	adds	r3, #8
 8013b1c:	463a      	mov	r2, r7
 8013b1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013b22:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	4618      	mov	r0, r3
 8013b2a:	3710      	adds	r7, #16
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}
 8013b30:	0802bcf4 	.word	0x0802bcf4

08013b34 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
    virtual ~GenericCallback()
 8013b34:	b480      	push	{r7}
 8013b36:	b083      	sub	sp, #12
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
    }
 8013b3c:	4a04      	ldr	r2, [pc, #16]	; (8013b50 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	601a      	str	r2, [r3, #0]
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	4618      	mov	r0, r3
 8013b46:	370c      	adds	r7, #12
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4e:	4770      	bx	lr
 8013b50:	0802bd0c 	.word	0x0802bd0c

08013b54 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b082      	sub	sp, #8
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
    }
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f7ff ffe9 	bl	8013b34 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 8013b62:	2104      	movs	r1, #4
 8013b64:	6878      	ldr	r0, [r7, #4]
 8013b66:	f015 fe2c 	bl	80297c2 <_ZdlPvj>
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	3708      	adds	r7, #8
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd80      	pop	{r7, pc}

08013b74 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED1Ev>:
class WipeTransition : public Transition
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b082      	sub	sp, #8
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
 8013b7c:	4a08      	ldr	r2, [pc, #32]	; (8013ba0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED1Ev+0x2c>)
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	601a      	str	r2, [r3, #0]
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	3310      	adds	r3, #16
 8013b86:	4618      	mov	r0, r3
 8013b88:	f7ff fe34 	bl	80137f4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRectD1Ev>
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	4618      	mov	r0, r3
 8013b90:	f7fe ff30 	bl	80129f4 <_ZN8touchgfx10TransitionD1Ev>
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	4618      	mov	r0, r3
 8013b98:	3708      	adds	r7, #8
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	bd80      	pop	{r7, pc}
 8013b9e:	bf00      	nop
 8013ba0:	0802bbd4 	.word	0x0802bbd4

08013ba4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED0Ev>:
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b082      	sub	sp, #8
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	6878      	ldr	r0, [r7, #4]
 8013bae:	f7ff ffe1 	bl	8013b74 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EED1Ev>
 8013bb2:	2138      	movs	r1, #56	; 0x38
 8013bb4:	6878      	ldr	r0, [r7, #4]
 8013bb6:	f015 fe04 	bl	80297c2 <_ZdlPvj>
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	3708      	adds	r7, #8
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}

08013bc4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>:
class CoverTransition : public Transition
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b082      	sub	sp, #8
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
 8013bcc:	4a0a      	ldr	r2, [pc, #40]	; (8013bf8 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev+0x34>)
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	601a      	str	r2, [r3, #0]
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	3324      	adds	r3, #36	; 0x24
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f7ff feb8 	bl	801394c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRectD1Ev>
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	330c      	adds	r3, #12
 8013be0:	4618      	mov	r0, r3
 8013be2:	f7ff fe7f 	bl	80138e4 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	4618      	mov	r0, r3
 8013bea:	f7fe ff03 	bl	80129f4 <_ZN8touchgfx10TransitionD1Ev>
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	3708      	adds	r7, #8
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}
 8013bf8:	0802bc60 	.word	0x0802bc60

08013bfc <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED0Ev>:
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b082      	sub	sp, #8
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
 8013c04:	6878      	ldr	r0, [r7, #4]
 8013c06:	f7ff ffdd 	bl	8013bc4 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EED1Ev>
 8013c0a:	214c      	movs	r1, #76	; 0x4c
 8013c0c:	6878      	ldr	r0, [r7, #4]
 8013c0e:	f015 fdd8 	bl	80297c2 <_ZdlPvj>
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	4618      	mov	r0, r3
 8013c16:	3708      	adds	r7, #8
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}

08013c1c <_ZN8touchgfx12NoTransitionD1Ev>:
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b082      	sub	sp, #8
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
 8013c24:	4a05      	ldr	r2, [pc, #20]	; (8013c3c <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	601a      	str	r2, [r3, #0]
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f7fe fee1 	bl	80129f4 <_ZN8touchgfx10TransitionD1Ev>
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	4618      	mov	r0, r3
 8013c36:	3708      	adds	r7, #8
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}
 8013c3c:	0802bd8c 	.word	0x0802bd8c

08013c40 <_ZN8touchgfx12NoTransitionD0Ev>:
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b082      	sub	sp, #8
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
 8013c48:	6878      	ldr	r0, [r7, #4]
 8013c4a:	f7ff ffe7 	bl	8013c1c <_ZN8touchgfx12NoTransitionD1Ev>
 8013c4e:	210c      	movs	r1, #12
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f015 fdb6 	bl	80297c2 <_ZdlPvj>
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	4618      	mov	r0, r3
 8013c5a:	3708      	adds	r7, #8
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}

08013c60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b082      	sub	sp, #8
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
 8013c68:	4a05      	ldr	r2, [pc, #20]	; (8013c80 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	601a      	str	r2, [r3, #0]
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7fe fc8b 	bl	801258c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	4618      	mov	r0, r3
 8013c7a:	3708      	adds	r7, #8
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bd80      	pop	{r7, pc}
 8013c80:	0802bdfc 	.word	0x0802bdfc

08013c84 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b082      	sub	sp, #8
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
 8013c8c:	6878      	ldr	r0, [r7, #4]
 8013c8e:	f7ff ffe7 	bl	8013c60 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8013c92:	2110      	movs	r1, #16
 8013c94:	6878      	ldr	r0, [r7, #4]
 8013c96:	f015 fd94 	bl	80297c2 <_ZdlPvj>
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	3708      	adds	r7, #8
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}

08013ca4 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv>:

    /**
     * Handles the tick event when transitioning. It uncovers and
     * invalidates increasing parts of the new screen elements.
     */
    virtual void handleTickEvent()
 8013ca4:	b590      	push	{r4, r7, lr}
 8013ca6:	b093      	sub	sp, #76	; 0x4c
 8013ca8:	af02      	add	r7, sp, #8
 8013caa:	6078      	str	r0, [r7, #4]
    {
        Transition::handleTickEvent();
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f7fe fec0 	bl	8012a34 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	7a9b      	ldrb	r3, [r3, #10]
 8013cb8:	3301      	adds	r3, #1
 8013cba:	b2da      	uxtb	r2, r3
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	729a      	strb	r2, [r3, #10]

        // Calculate new position or stop animation
        if (animationCounter <= (animationSteps))
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	7a9a      	ldrb	r2, [r3, #10]
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	7a5b      	ldrb	r3, [r3, #9]
 8013cc8:	429a      	cmp	r2, r3
 8013cca:	d82b      	bhi.n	8013d24 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x80>
        {
            // Calculate value in [0;targetValue]
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	7a9b      	ldrb	r3, [r3, #10]
 8013cd0:	b298      	uxth	r0, r3
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	7a5b      	ldrb	r3, [r3, #9]
 8013cdc:	b29b      	uxth	r3, r3
 8013cde:	2100      	movs	r1, #0
 8013ce0:	f008 ff76 	bl	801cbd0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	461a      	mov	r2, r3
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	81da      	strh	r2, [r3, #14]

            // Note: Result of "calculatedValue & 1" is compiler dependent for negative values of calculatedValue
            if (calculatedValue % 2)
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013cf2:	b29b      	uxth	r3, r3
 8013cf4:	f003 0301 	and.w	r3, r3, #1
 8013cf8:	b29b      	uxth	r3, r3
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d019      	beq.n	8013d32 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x8e>
            {
                // Optimization: calculatedValue is odd, add 1/-1 to move drawables modulo 32 bits in framebuffer
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013d04:	b29b      	uxth	r3, r3
 8013d06:	687a      	ldr	r2, [r7, #4]
 8013d08:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8013d0c:	2a00      	cmp	r2, #0
 8013d0e:	dd01      	ble.n	8013d14 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x70>
 8013d10:	2201      	movs	r2, #1
 8013d12:	e001      	b.n	8013d18 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x74>
 8013d14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d18:	4413      	add	r3, r2
 8013d1a:	b29b      	uxth	r3, r3
 8013d1c:	b21a      	sxth	r2, r3
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	81da      	strh	r2, [r3, #14]
 8013d22:	e006      	b.n	8013d32 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x8e>
            }
        }
        else
        {
            // Final step: stop the animation
            done = true;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	2201      	movs	r2, #1
 8013d28:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	729a      	strb	r2, [r3, #10]
            return;
 8013d30:	e07f      	b.n	8013e32 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x18e>
                break;
            }
        case WEST:
            {
                // Cover must have width of remaining part and start after uncovered
                const uint16_t prevSolidPos = solid.getX();
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	3310      	adds	r3, #16
 8013d36:	4618      	mov	r0, r3
 8013d38:	f7fe fce3 	bl	8012702 <_ZNK8touchgfx8Drawable4getXEv>
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	877b      	strh	r3, [r7, #58]	; 0x3a
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	f103 0010 	add.w	r0, r3, #16
 8013d46:	4b3c      	ldr	r3, [pc, #240]	; (8013e38 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x194>)
 8013d48:	881a      	ldrh	r2, [r3, #0]
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013d50:	b29b      	uxth	r3, r3
 8013d52:	1ad3      	subs	r3, r2, r3
 8013d54:	b29b      	uxth	r3, r3
 8013d56:	b21b      	sxth	r3, r3
 8013d58:	4619      	mov	r1, r3
 8013d5a:	f7fe fd35 	bl	80127c8 <_ZN8touchgfx8Drawable8setWidthEs>
                solid.setX(calculatedValue);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	f103 0210 	add.w	r2, r3, #16
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013d6a:	4619      	mov	r1, r3
 8013d6c:	4610      	mov	r0, r2
 8013d6e:	f7fe fcef 	bl	8012750 <_ZN8touchgfx8Drawable4setXEs>

                // Invalidate the uncovered part
                const uint16_t delta = calculatedValue - prevSolidPos;
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013d78:	b29a      	uxth	r2, r3
 8013d7a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013d7c:	1ad3      	subs	r3, r2, r3
 8013d7e:	873b      	strh	r3, [r7, #56]	; 0x38
                Rect r(prevSolidPos, 0, delta, HAL::DISPLAY_HEIGHT);
 8013d80:	f9b7 103a 	ldrsh.w	r1, [r7, #58]	; 0x3a
 8013d84:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8013d88:	4b2c      	ldr	r3, [pc, #176]	; (8013e3c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x198>)
 8013d8a:	881b      	ldrh	r3, [r3, #0]
 8013d8c:	b21b      	sxth	r3, r3
 8013d8e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8013d92:	9300      	str	r3, [sp, #0]
 8013d94:	4613      	mov	r3, r2
 8013d96:	2200      	movs	r2, #0
 8013d98:	f7fe fb4f 	bl	801243a <_ZN8touchgfx4RectC1Essss>
                screenContainer->invalidateRect(r);
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	685b      	ldr	r3, [r3, #4]
 8013da0:	4618      	mov	r0, r3
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	685b      	ldr	r3, [r3, #4]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	3310      	adds	r3, #16
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013db0:	4611      	mov	r1, r2
 8013db2:	4798      	blx	r3
                break;
 8013db4:	bf00      	nop
        //
        // In the first tick WipeTransition cover "calculatedValue"
        // pixels vertically or horizontally depending on the speed of
        // the transition, so there's no need to transfer that. The
        // solid Widget covers the rest, so we copy those pixels.
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	7a9b      	ldrb	r3, [r3, #10]
 8013dba:	2b01      	cmp	r3, #1
 8013dbc:	d139      	bne.n	8013e32 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x18e>
 8013dbe:	4b20      	ldr	r3, [pc, #128]	; (8013e40 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x19c>)
 8013dc0:	781b      	ldrb	r3, [r3, #0]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d035      	beq.n	8013e32 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x18e>
        {
            Rect rect = solid.getRect(); // Part to copy between buffers
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	3310      	adds	r3, #16
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7fe fc6c 	bl	80126a8 <_ZNK8touchgfx8Drawable7getRectEv>
 8013dd0:	4602      	mov	r2, r0
 8013dd2:	f107 0310 	add.w	r3, r7, #16
 8013dd6:	6810      	ldr	r0, [r2, #0]
 8013dd8:	6851      	ldr	r1, [r2, #4]
 8013dda:	c303      	stmia	r3!, {r0, r1}

            // Get the currently displayed framebuffer
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 8013ddc:	f7fe fdcc 	bl	8012978 <_ZN8touchgfx3HAL11getInstanceEv>
 8013de0:	4603      	mov	r3, r0
 8013de2:	681a      	ldr	r2, [r3, #0]
 8013de4:	3230      	adds	r2, #48	; 0x30
 8013de6:	6812      	ldr	r2, [r2, #0]
 8013de8:	4618      	mov	r0, r3
 8013dea:	4790      	blx	r2
 8013dec:	63f8      	str	r0, [r7, #60]	; 0x3c

            Rect source;
 8013dee:	f107 0308 	add.w	r3, r7, #8
 8013df2:	4618      	mov	r0, r3
 8013df4:	f7fe fb0a 	bl	801240c <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 8013df8:	2300      	movs	r3, #0
 8013dfa:	813b      	strh	r3, [r7, #8]
            source.y = 0;
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	817b      	strh	r3, [r7, #10]
            source.width = HAL::DISPLAY_WIDTH;
 8013e00:	4b0d      	ldr	r3, [pc, #52]	; (8013e38 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x194>)
 8013e02:	881b      	ldrh	r3, [r3, #0]
 8013e04:	b21b      	sxth	r3, r3
 8013e06:	81bb      	strh	r3, [r7, #12]
            source.height = HAL::DISPLAY_HEIGHT;
 8013e08:	4b0c      	ldr	r3, [pc, #48]	; (8013e3c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE15handleTickEventEv+0x198>)
 8013e0a:	881b      	ldrh	r3, [r3, #0]
 8013e0c:	b21b      	sxth	r3, r3
 8013e0e:	81fb      	strh	r3, [r7, #14]

            // Copy rect from tft to client framebuffer
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 8013e10:	f7fe fdb2 	bl	8012978 <_ZN8touchgfx3HAL11getInstanceEv>
 8013e14:	f7fe fdbc 	bl	8012990 <_ZN8touchgfx3HAL3lcdEv>
 8013e18:	6803      	ldr	r3, [r0, #0]
 8013e1a:	330c      	adds	r3, #12
 8013e1c:	681c      	ldr	r4, [r3, #0]
 8013e1e:	f107 0310 	add.w	r3, r7, #16
 8013e22:	f107 0208 	add.w	r2, r7, #8
 8013e26:	2100      	movs	r1, #0
 8013e28:	9101      	str	r1, [sp, #4]
 8013e2a:	21ff      	movs	r1, #255	; 0xff
 8013e2c:	9100      	str	r1, [sp, #0]
 8013e2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013e30:	47a0      	blx	r4
        }
    }
 8013e32:	3744      	adds	r7, #68	; 0x44
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd90      	pop	{r4, r7, pc}
 8013e38:	20008e22 	.word	0x20008e22
 8013e3c:	20008e24 	.word	0x20008e24
 8013e40:	20008e2c 	.word	0x20008e2c

08013e44 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE8tearDownEv>:

    virtual void tearDown()
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b082      	sub	sp, #8
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
    {
        screenContainer->remove(solid);
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	6858      	ldr	r0, [r3, #4]
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	685b      	ldr	r3, [r3, #4]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	3364      	adds	r3, #100	; 0x64
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	687a      	ldr	r2, [r7, #4]
 8013e5c:	3210      	adds	r2, #16
 8013e5e:	4611      	mov	r1, r2
 8013e60:	4798      	blx	r3
    }
 8013e62:	bf00      	nop
 8013e64:	3708      	adds	r7, #8
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd80      	pop	{r7, pc}

08013e6a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE4initEv>:

    virtual void init()
 8013e6a:	b580      	push	{r7, lr}
 8013e6c:	b082      	sub	sp, #8
 8013e6e:	af00      	add	r7, sp, #0
 8013e70:	6078      	str	r0, [r7, #4]
    {
        Transition::init();
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	4618      	mov	r0, r3
 8013e76:	f7fe fdf1 	bl	8012a5c <_ZN8touchgfx10Transition4initEv>
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	6858      	ldr	r0, [r3, #4]
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	685b      	ldr	r3, [r3, #4]
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	3360      	adds	r3, #96	; 0x60
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	687a      	ldr	r2, [r7, #4]
 8013e8a:	3210      	adds	r2, #16
 8013e8c:	4611      	mov	r1, r2
 8013e8e:	4798      	blx	r3
    }
 8013e90:	bf00      	nop
 8013e92:	3708      	adds	r7, #8
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}

08013e98 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE3EE10invalidateEv>:

    /**
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
 8013e98:	b480      	push	{r7}
 8013e9a:	b083      	sub	sp, #12
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	6078      	str	r0, [r7, #4]
    {
    }
 8013ea0:	bf00      	nop
 8013ea2:	370c      	adds	r7, #12
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eaa:	4770      	bx	lr

08013eac <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRect4drawERKNS_4RectE>:
        virtual void draw(const Rect& area) const
 8013eac:	b480      	push	{r7}
 8013eae:	b083      	sub	sp, #12
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
 8013eb4:	6039      	str	r1, [r7, #0]
        }
 8013eb6:	bf00      	nop
 8013eb8:	370c      	adds	r7, #12
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec0:	4770      	bx	lr

08013ec2 <_ZNK8touchgfx14WipeTransitionILNS_9DirectionE3EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 8013ec2:	b580      	push	{r7, lr}
 8013ec4:	b084      	sub	sp, #16
 8013ec6:	af02      	add	r7, sp, #8
 8013ec8:	6078      	str	r0, [r7, #4]
 8013eca:	6039      	str	r1, [r7, #0]
            return Rect(0U, 0U, rect.width, rect.height);
 8013ecc:	683b      	ldr	r3, [r7, #0]
 8013ece:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8013ed2:	683b      	ldr	r3, [r7, #0]
 8013ed4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8013ed8:	9300      	str	r3, [sp, #0]
 8013eda:	4613      	mov	r3, r2
 8013edc:	2200      	movs	r2, #0
 8013ede:	2100      	movs	r1, #0
 8013ee0:	6878      	ldr	r0, [r7, #4]
 8013ee2:	f7fe faaa 	bl	801243a <_ZN8touchgfx4RectC1Essss>
        }
 8013ee6:	6878      	ldr	r0, [r7, #4]
 8013ee8:	3708      	adds	r7, #8
 8013eea:	46bd      	mov	sp, r7
 8013eec:	bd80      	pop	{r7, pc}
	...

08013ef0 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8013ef0:	b590      	push	{r4, r7, lr}
 8013ef2:	b08b      	sub	sp, #44	; 0x2c
 8013ef4:	af02      	add	r7, sp, #8
 8013ef6:	6078      	str	r0, [r7, #4]
        Transition::handleTickEvent();
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	4618      	mov	r0, r3
 8013efc:	f7fe fd9a 	bl	8012a34 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	7f5b      	ldrb	r3, [r3, #29]
 8013f04:	3301      	adds	r3, #1
 8013f06:	b2da      	uxtb	r2, r3
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	775a      	strb	r2, [r3, #29]
        if (animationCounter <= animationSteps)
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	7f5a      	ldrb	r2, [r3, #29]
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	7f1b      	ldrb	r3, [r3, #28]
 8013f14:	429a      	cmp	r2, r3
 8013f16:	d82b      	bhi.n	8013f70 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x80>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	7f5b      	ldrb	r3, [r3, #29]
 8013f1c:	b298      	uxth	r0, r3
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	7f1b      	ldrb	r3, [r3, #28]
 8013f28:	b29b      	uxth	r3, r3
 8013f2a:	2100      	movs	r1, #0
 8013f2c:	f008 fe50 	bl	801cbd0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 8013f30:	4603      	mov	r3, r0
 8013f32:	461a      	mov	r2, r3
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	841a      	strh	r2, [r3, #32]
            if (calculatedValue % 2)
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8013f3e:	b29b      	uxth	r3, r3
 8013f40:	f003 0301 	and.w	r3, r3, #1
 8013f44:	b29b      	uxth	r3, r3
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d019      	beq.n	8013f7e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8013f50:	b29b      	uxth	r3, r3
 8013f52:	687a      	ldr	r2, [r7, #4]
 8013f54:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 8013f58:	2a00      	cmp	r2, #0
 8013f5a:	dd01      	ble.n	8013f60 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x70>
 8013f5c:	2201      	movs	r2, #1
 8013f5e:	e001      	b.n	8013f64 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x74>
 8013f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f64:	4413      	add	r3, r2
 8013f66:	b29b      	uxth	r3, r3
 8013f68:	b21a      	sxth	r2, r3
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	841a      	strh	r2, [r3, #32]
 8013f6e:	e006      	b.n	8013f7e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8e>
            done = true;
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	2201      	movs	r2, #1
 8013f74:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	2200      	movs	r2, #0
 8013f7a:	775a      	strb	r2, [r3, #29]
            return;
 8013f7c:	e06f      	b.n	801405e <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x16e>
        calculatedValue -= movedToPos;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8013f84:	b29a      	uxth	r2, r3
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8013f8c:	b29b      	uxth	r3, r3
 8013f8e:	1ad3      	subs	r3, r2, r3
 8013f90:	b29b      	uxth	r3, r3
 8013f92:	b21a      	sxth	r2, r3
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	841a      	strh	r2, [r3, #32]
        movedToPos += calculatedValue;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8013f9e:	b29a      	uxth	r2, r3
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8013fa6:	b29b      	uxth	r3, r3
 8013fa8:	4413      	add	r3, r2
 8013faa:	b29b      	uxth	r3, r3
 8013fac:	b21a      	sxth	r2, r3
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	845a      	strh	r2, [r3, #34]	; 0x22
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	7f5b      	ldrb	r3, [r3, #29]
 8013fb6:	2b01      	cmp	r3, #1
 8013fb8:	d146      	bne.n	8014048 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x158>
 8013fba:	4b2a      	ldr	r3, [pc, #168]	; (8014064 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x174>)
 8013fbc:	781b      	ldrb	r3, [r3, #0]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d042      	beq.n	8014048 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x158>
            Rect rect;
 8013fc2:	f107 0314 	add.w	r3, r7, #20
 8013fc6:	4618      	mov	r0, r3
 8013fc8:	f7fe fa20 	bl	801240c <_ZN8touchgfx4RectC1Ev>
                rect.x = 0;
 8013fcc:	2300      	movs	r3, #0
 8013fce:	82bb      	strh	r3, [r7, #20]
                rect.y = 0;
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	82fb      	strh	r3, [r7, #22]
                rect.width = HAL::DISPLAY_WIDTH + calculatedValue;
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8013fda:	b29a      	uxth	r2, r3
 8013fdc:	4b22      	ldr	r3, [pc, #136]	; (8014068 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x178>)
 8013fde:	881b      	ldrh	r3, [r3, #0]
 8013fe0:	4413      	add	r3, r2
 8013fe2:	b29b      	uxth	r3, r3
 8013fe4:	b21b      	sxth	r3, r3
 8013fe6:	833b      	strh	r3, [r7, #24]
                rect.height = HAL::DISPLAY_HEIGHT;
 8013fe8:	4b20      	ldr	r3, [pc, #128]	; (801406c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x17c>)
 8013fea:	881b      	ldrh	r3, [r3, #0]
 8013fec:	b21b      	sxth	r3, r3
 8013fee:	837b      	strh	r3, [r7, #26]
                break;
 8013ff0:	bf00      	nop
            uint16_t* tftFb = HAL::getInstance()->getTFTFrameBuffer();
 8013ff2:	f7fe fcc1 	bl	8012978 <_ZN8touchgfx3HAL11getInstanceEv>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	681a      	ldr	r2, [r3, #0]
 8013ffa:	3230      	adds	r2, #48	; 0x30
 8013ffc:	6812      	ldr	r2, [r2, #0]
 8013ffe:	4618      	mov	r0, r3
 8014000:	4790      	blx	r2
 8014002:	61f8      	str	r0, [r7, #28]
            Rect source;
 8014004:	f107 030c 	add.w	r3, r7, #12
 8014008:	4618      	mov	r0, r3
 801400a:	f7fe f9ff 	bl	801240c <_ZN8touchgfx4RectC1Ev>
            source.x = 0;
 801400e:	2300      	movs	r3, #0
 8014010:	81bb      	strh	r3, [r7, #12]
            source.y = 0;
 8014012:	2300      	movs	r3, #0
 8014014:	81fb      	strh	r3, [r7, #14]
            source.width = HAL::DISPLAY_WIDTH;
 8014016:	4b14      	ldr	r3, [pc, #80]	; (8014068 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x178>)
 8014018:	881b      	ldrh	r3, [r3, #0]
 801401a:	b21b      	sxth	r3, r3
 801401c:	823b      	strh	r3, [r7, #16]
            source.height = HAL::DISPLAY_HEIGHT;
 801401e:	4b13      	ldr	r3, [pc, #76]	; (801406c <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE15handleTickEventEv+0x17c>)
 8014020:	881b      	ldrh	r3, [r3, #0]
 8014022:	b21b      	sxth	r3, r3
 8014024:	827b      	strh	r3, [r7, #18]
            HAL::getInstance()->lcd().blitCopy((const uint16_t*)tftFb, source, rect, 255, false);
 8014026:	f7fe fca7 	bl	8012978 <_ZN8touchgfx3HAL11getInstanceEv>
 801402a:	f7fe fcb1 	bl	8012990 <_ZN8touchgfx3HAL3lcdEv>
 801402e:	6803      	ldr	r3, [r0, #0]
 8014030:	330c      	adds	r3, #12
 8014032:	681c      	ldr	r4, [r3, #0]
 8014034:	f107 0314 	add.w	r3, r7, #20
 8014038:	f107 020c 	add.w	r2, r7, #12
 801403c:	2100      	movs	r1, #0
 801403e:	9101      	str	r1, [sp, #4]
 8014040:	21ff      	movs	r1, #255	; 0xff
 8014042:	9100      	str	r1, [sp, #0]
 8014044:	69f9      	ldr	r1, [r7, #28]
 8014046:	47a0      	blx	r4
        screenContainer->forEachChild(&handleTickCallback);
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	6858      	ldr	r0, [r3, #4]
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	685b      	ldr	r3, [r3, #4]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	337c      	adds	r3, #124	; 0x7c
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	687a      	ldr	r2, [r7, #4]
 8014058:	320c      	adds	r2, #12
 801405a:	4611      	mov	r1, r2
 801405c:	4798      	blx	r3
    }
 801405e:	3724      	adds	r7, #36	; 0x24
 8014060:	46bd      	mov	sp, r7
 8014062:	bd90      	pop	{r4, r7, pc}
 8014064:	20008e2c 	.word	0x20008e2c
 8014068:	20008e22 	.word	0x20008e22
 801406c:	20008e24 	.word	0x20008e24

08014070 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE8tearDownEv>:
    virtual void tearDown()
 8014070:	b580      	push	{r7, lr}
 8014072:	b082      	sub	sp, #8
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
        screenContainer->remove(solid);
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	6858      	ldr	r0, [r3, #4]
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	685b      	ldr	r3, [r3, #4]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	3364      	adds	r3, #100	; 0x64
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	687a      	ldr	r2, [r7, #4]
 8014088:	3224      	adds	r2, #36	; 0x24
 801408a:	4611      	mov	r1, r2
 801408c:	4798      	blx	r3
    }
 801408e:	bf00      	nop
 8014090:	3708      	adds	r7, #8
 8014092:	46bd      	mov	sp, r7
 8014094:	bd80      	pop	{r7, pc}
	...

08014098 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv>:
    virtual void init()
 8014098:	b580      	push	{r7, lr}
 801409a:	b088      	sub	sp, #32
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
        Transition::init();
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	4618      	mov	r0, r3
 80140a4:	f7fe fcda 	bl	8012a5c <_ZN8touchgfx10Transition4initEv>
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 80140a8:	4a16      	ldr	r2, [pc, #88]	; (8014104 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE4initEv+0x6c>)
 80140aa:	f107 0318 	add.w	r3, r7, #24
 80140ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80140b2:	e883 0003 	stmia.w	r3, {r0, r1}
 80140b6:	f107 0008 	add.w	r0, r7, #8
 80140ba:	f107 0318 	add.w	r3, r7, #24
 80140be:	cb0c      	ldmia	r3, {r2, r3}
 80140c0:	6879      	ldr	r1, [r7, #4]
 80140c2:	f7ff fd17 	bl	8013af4 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
        screenContainer->forEachChild(&initCallback);
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	685a      	ldr	r2, [r3, #4]
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	685b      	ldr	r3, [r3, #4]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	337c      	adds	r3, #124	; 0x7c
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	f107 0108 	add.w	r1, r7, #8
 80140d8:	4610      	mov	r0, r2
 80140da:	4798      	blx	r3
        screenContainer->add(solid);
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	6858      	ldr	r0, [r3, #4]
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	685b      	ldr	r3, [r3, #4]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	3360      	adds	r3, #96	; 0x60
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	687a      	ldr	r2, [r7, #4]
 80140ec:	3224      	adds	r2, #36	; 0x24
 80140ee:	4611      	mov	r1, r2
 80140f0:	4798      	blx	r3
        Callback<CoverTransition, Drawable&> initCallback(this, &CoverTransition::initMoveDrawable);
 80140f2:	f107 0308 	add.w	r3, r7, #8
 80140f6:	4618      	mov	r0, r3
 80140f8:	f7ff fbf4 	bl	80138e4 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvED1Ev>
    }
 80140fc:	bf00      	nop
 80140fe:	3720      	adds	r7, #32
 8014100:	46bd      	mov	sp, r7
 8014102:	bd80      	pop	{r7, pc}
 8014104:	0802b0f0 	.word	0x0802b0f0

08014108 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 8014108:	b580      	push	{r7, lr}
 801410a:	b082      	sub	sp, #8
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
 8014110:	6039      	str	r1, [r7, #0]
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	3354      	adds	r3, #84	; 0x54
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	4a05      	ldr	r2, [pc, #20]	; (8014130 <_ZN8touchgfx15CoverTransitionILNS_9DirectionE2EE16initMoveDrawableERNS_8DrawableE+0x28>)
 801411c:	8812      	ldrh	r2, [r2, #0]
 801411e:	b211      	sxth	r1, r2
 8014120:	2200      	movs	r2, #0
 8014122:	6838      	ldr	r0, [r7, #0]
 8014124:	4798      	blx	r3
            break;
 8014126:	bf00      	nop
    }
 8014128:	bf00      	nop
 801412a:	3708      	adds	r7, #8
 801412c:	46bd      	mov	sp, r7
 801412e:	bd80      	pop	{r7, pc}
 8014130:	20008e22 	.word	0x20008e22

08014134 <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect4drawERKNS_4RectE>:
        virtual Rect getSolidRect() const
        {
            return Rect(0, 0, getWidth(), getHeight());
        }

        virtual void draw(const Rect& area) const
 8014134:	b480      	push	{r7}
 8014136:	b083      	sub	sp, #12
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
 801413c:	6039      	str	r1, [r7, #0]
        {
        }
 801413e:	bf00      	nop
 8014140:	370c      	adds	r7, #12
 8014142:	46bd      	mov	sp, r7
 8014144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014148:	4770      	bx	lr

0801414a <_ZNK8touchgfx15CoverTransitionILNS_9DirectionE2EE13FullSolidRect12getSolidRectEv>:
        virtual Rect getSolidRect() const
 801414a:	b590      	push	{r4, r7, lr}
 801414c:	b085      	sub	sp, #20
 801414e:	af02      	add	r7, sp, #8
 8014150:	6078      	str	r0, [r7, #4]
 8014152:	6039      	str	r1, [r7, #0]
            return Rect(0, 0, getWidth(), getHeight());
 8014154:	683b      	ldr	r3, [r7, #0]
 8014156:	4618      	mov	r0, r3
 8014158:	f7fe fae0 	bl	801271c <_ZNK8touchgfx8Drawable8getWidthEv>
 801415c:	4603      	mov	r3, r0
 801415e:	461c      	mov	r4, r3
 8014160:	683b      	ldr	r3, [r7, #0]
 8014162:	4618      	mov	r0, r3
 8014164:	f7fe fae7 	bl	8012736 <_ZNK8touchgfx8Drawable9getHeightEv>
 8014168:	4603      	mov	r3, r0
 801416a:	9300      	str	r3, [sp, #0]
 801416c:	4623      	mov	r3, r4
 801416e:	2200      	movs	r2, #0
 8014170:	2100      	movs	r1, #0
 8014172:	6878      	ldr	r0, [r7, #4]
 8014174:	f7fe f961 	bl	801243a <_ZN8touchgfx4RectC1Essss>
        }
 8014178:	6878      	ldr	r0, [r7, #4]
 801417a:	370c      	adds	r7, #12
 801417c:	46bd      	mov	sp, r7
 801417e:	bd90      	pop	{r4, r7, pc}

08014180 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8014180:	b580      	push	{r7, lr}
 8014182:	b082      	sub	sp, #8
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]
 8014188:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	685b      	ldr	r3, [r3, #4]
 801418e:	687a      	ldr	r2, [r7, #4]
 8014190:	68d2      	ldr	r2, [r2, #12]
 8014192:	1052      	asrs	r2, r2, #1
 8014194:	1898      	adds	r0, r3, r2
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	68db      	ldr	r3, [r3, #12]
 801419a:	f003 0301 	and.w	r3, r3, #1
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d102      	bne.n	80141a8 <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x28>
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	689b      	ldr	r3, [r3, #8]
 80141a6:	e00a      	b.n	80141be <_ZN8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7executeES5_+0x3e>
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	685b      	ldr	r3, [r3, #4]
 80141ac:	687a      	ldr	r2, [r7, #4]
 80141ae:	68d2      	ldr	r2, [r2, #12]
 80141b0:	1052      	asrs	r2, r2, #1
 80141b2:	4413      	add	r3, r2
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	687a      	ldr	r2, [r7, #4]
 80141b8:	6892      	ldr	r2, [r2, #8]
 80141ba:	4413      	add	r3, r2
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	6839      	ldr	r1, [r7, #0]
 80141c0:	4798      	blx	r3
    }
 80141c2:	bf00      	nop
 80141c4:	3708      	adds	r7, #8
 80141c6:	46bd      	mov	sp, r7
 80141c8:	bd80      	pop	{r7, pc}

080141ca <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 80141ca:	b480      	push	{r7}
 80141cc:	b083      	sub	sp, #12
 80141ce:	af00      	add	r7, sp, #0
 80141d0:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	685b      	ldr	r3, [r3, #4]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d010      	beq.n	80141fc <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	689b      	ldr	r3, [r3, #8]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d107      	bne.n	80141f2 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	68db      	ldr	r3, [r3, #12]
 80141e6:	f003 0301 	and.w	r3, r3, #1
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d101      	bne.n	80141f2 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x28>
 80141ee:	2301      	movs	r3, #1
 80141f0:	e000      	b.n	80141f4 <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x2a>
 80141f2:	2300      	movs	r3, #0
 80141f4:	2b01      	cmp	r3, #1
 80141f6:	d001      	beq.n	80141fc <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x32>
 80141f8:	2301      	movs	r3, #1
 80141fa:	e000      	b.n	80141fe <_ZNK8touchgfx8CallbackINS_15CoverTransitionILNS_9DirectionE2EEERNS_8DrawableEvvE7isValidEv+0x34>
 80141fc:	2300      	movs	r3, #0
    }
 80141fe:	4618      	mov	r0, r3
 8014200:	370c      	adds	r7, #12
 8014202:	46bd      	mov	sp, r7
 8014204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014208:	4770      	bx	lr

0801420a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 801420a:	b580      	push	{r7, lr}
 801420c:	b082      	sub	sp, #8
 801420e:	af00      	add	r7, sp, #0
 8014210:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	685b      	ldr	r3, [r3, #4]
 8014216:	687a      	ldr	r2, [r7, #4]
 8014218:	68d2      	ldr	r2, [r2, #12]
 801421a:	1052      	asrs	r2, r2, #1
 801421c:	1899      	adds	r1, r3, r2
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	68db      	ldr	r3, [r3, #12]
 8014222:	f003 0301 	and.w	r3, r3, #1
 8014226:	2b00      	cmp	r3, #0
 8014228:	d102      	bne.n	8014230 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	689b      	ldr	r3, [r3, #8]
 801422e:	e00a      	b.n	8014246 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	685b      	ldr	r3, [r3, #4]
 8014234:	687a      	ldr	r2, [r7, #4]
 8014236:	68d2      	ldr	r2, [r2, #12]
 8014238:	1052      	asrs	r2, r2, #1
 801423a:	4413      	add	r3, r2
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	687a      	ldr	r2, [r7, #4]
 8014240:	6892      	ldr	r2, [r2, #8]
 8014242:	4413      	add	r3, r2
 8014244:	681b      	ldr	r3, [r3, #0]
 8014246:	4608      	mov	r0, r1
 8014248:	4798      	blx	r3
    }
 801424a:	bf00      	nop
 801424c:	3708      	adds	r7, #8
 801424e:	46bd      	mov	sp, r7
 8014250:	bd80      	pop	{r7, pc}

08014252 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8014252:	b480      	push	{r7}
 8014254:	b083      	sub	sp, #12
 8014256:	af00      	add	r7, sp, #0
 8014258:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	685b      	ldr	r3, [r3, #4]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d010      	beq.n	8014284 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	689b      	ldr	r3, [r3, #8]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d107      	bne.n	801427a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	68db      	ldr	r3, [r3, #12]
 801426e:	f003 0301 	and.w	r3, r3, #1
 8014272:	2b00      	cmp	r3, #0
 8014274:	d101      	bne.n	801427a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8014276:	2301      	movs	r3, #1
 8014278:	e000      	b.n	801427c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 801427a:	2300      	movs	r3, #0
 801427c:	2b01      	cmp	r3, #1
 801427e:	d001      	beq.n	8014284 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8014280:	2301      	movs	r3, #1
 8014282:	e000      	b.n	8014286 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8014284:	2300      	movs	r3, #0
    }
 8014286:	4618      	mov	r0, r3
 8014288:	370c      	adds	r7, #12
 801428a:	46bd      	mov	sp, r7
 801428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014290:	4770      	bx	lr

08014292 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8014292:	b480      	push	{r7}
 8014294:	b083      	sub	sp, #12
 8014296:	af00      	add	r7, sp, #0
 8014298:	6078      	str	r0, [r7, #4]
 801429a:	6039      	str	r1, [r7, #0]
        : color(col)
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	683a      	ldr	r2, [r7, #0]
 80142a0:	601a      	str	r2, [r3, #0]
    }
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	4618      	mov	r0, r3
 80142a6:	370c      	adds	r7, #12
 80142a8:	46bd      	mov	sp, r7
 80142aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ae:	4770      	bx	lr

080142b0 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 80142b0:	b480      	push	{r7}
 80142b2:	b083      	sub	sp, #12
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
 80142b8:	460b      	mov	r3, r1
 80142ba:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	887a      	ldrh	r2, [r7, #2]
 80142c0:	801a      	strh	r2, [r3, #0]
    {
    }
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	4618      	mov	r0, r3
 80142c6:	370c      	adds	r7, #12
 80142c8:	46bd      	mov	sp, r7
 80142ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ce:	4770      	bx	lr

080142d0 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 80142d0:	b480      	push	{r7}
 80142d2:	b083      	sub	sp, #12
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	6078      	str	r0, [r7, #4]
 80142d8:	460b      	mov	r3, r1
 80142da:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	78fa      	ldrb	r2, [r7, #3]
 80142e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 80142e4:	bf00      	nop
 80142e6:	370c      	adds	r7, #12
 80142e8:	46bd      	mov	sp, r7
 80142ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ee:	4770      	bx	lr

080142f0 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b082      	sub	sp, #8
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
    {
 80142f8:	4a06      	ldr	r2, [pc, #24]	; (8014314 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	601a      	str	r2, [r3, #0]
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	3304      	adds	r3, #4
 8014302:	4618      	mov	r0, r3
 8014304:	f000 ff7e 	bl	8015204 <_ZN8touchgfx9ContainerD1Ev>
    }
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	4618      	mov	r0, r3
 801430c:	3708      	adds	r7, #8
 801430e:	46bd      	mov	sp, r7
 8014310:	bd80      	pop	{r7, pc}
 8014312:	bf00      	nop
 8014314:	0802cc90 	.word	0x0802cc90

08014318 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8014318:	b580      	push	{r7, lr}
 801431a:	b082      	sub	sp, #8
 801431c:	af00      	add	r7, sp, #0
 801431e:	6078      	str	r0, [r7, #4]
    }
 8014320:	6878      	ldr	r0, [r7, #4]
 8014322:	f7ff ffe5 	bl	80142f0 <_ZN8touchgfx6ScreenD1Ev>
 8014326:	213c      	movs	r1, #60	; 0x3c
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f015 fa4a 	bl	80297c2 <_ZdlPvj>
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	4618      	mov	r0, r3
 8014332:	3708      	adds	r7, #8
 8014334:	46bd      	mov	sp, r7
 8014336:	bd80      	pop	{r7, pc}

08014338 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8014338:	b480      	push	{r7}
 801433a:	b083      	sub	sp, #12
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
    {
    }
 8014340:	bf00      	nop
 8014342:	370c      	adds	r7, #12
 8014344:	46bd      	mov	sp, r7
 8014346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801434a:	4770      	bx	lr

0801434c <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 801434c:	b480      	push	{r7}
 801434e:	b083      	sub	sp, #12
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
    {
    }
 8014354:	bf00      	nop
 8014356:	370c      	adds	r7, #12
 8014358:	46bd      	mov	sp, r7
 801435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801435e:	4770      	bx	lr

08014360 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8014360:	b480      	push	{r7}
 8014362:	b083      	sub	sp, #12
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]
    {
    }
 8014368:	bf00      	nop
 801436a:	370c      	adds	r7, #12
 801436c:	46bd      	mov	sp, r7
 801436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014372:	4770      	bx	lr

08014374 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8014374:	b480      	push	{r7}
 8014376:	b083      	sub	sp, #12
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
    {
    }
 801437c:	bf00      	nop
 801437e:	370c      	adds	r7, #12
 8014380:	46bd      	mov	sp, r7
 8014382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014386:	4770      	bx	lr

08014388 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8014388:	b480      	push	{r7}
 801438a:	b083      	sub	sp, #12
 801438c:	af00      	add	r7, sp, #0
 801438e:	6078      	str	r0, [r7, #4]
 8014390:	460b      	mov	r3, r1
 8014392:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8014394:	bf00      	nop
 8014396:	370c      	adds	r7, #12
 8014398:	46bd      	mov	sp, r7
 801439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801439e:	4770      	bx	lr

080143a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b082      	sub	sp, #8
 80143a4:	af00      	add	r7, sp, #0
 80143a6:	6078      	str	r0, [r7, #4]
 80143a8:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	3304      	adds	r3, #4
 80143ae:	6839      	ldr	r1, [r7, #0]
 80143b0:	4618      	mov	r0, r3
 80143b2:	f003 fe95 	bl	80180e0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80143b6:	bf00      	nop
 80143b8:	3708      	adds	r7, #8
 80143ba:	46bd      	mov	sp, r7
 80143bc:	bd80      	pop	{r7, pc}
	...

080143c0 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b082      	sub	sp, #8
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	4618      	mov	r0, r3
 80143cc:	2326      	movs	r3, #38	; 0x26
 80143ce:	461a      	mov	r2, r3
 80143d0:	2100      	movs	r1, #0
 80143d2:	f015 fba5 	bl	8029b20 <memset>
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	4618      	mov	r0, r3
 80143da:	f7fe fc87 	bl	8012cec <_ZN8touchgfx6WidgetC1Ev>
 80143de:	4a09      	ldr	r2, [pc, #36]	; (8014404 <_ZN8touchgfx3BoxC1Ev+0x44>)
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	601a      	str	r2, [r3, #0]
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	22ff      	movs	r2, #255	; 0xff
 80143e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	3328      	adds	r3, #40	; 0x28
 80143f0:	2100      	movs	r1, #0
 80143f2:	4618      	mov	r0, r3
 80143f4:	f7ff ff4d 	bl	8014292 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	4618      	mov	r0, r3
 80143fc:	3708      	adds	r7, #8
 80143fe:	46bd      	mov	sp, r7
 8014400:	bd80      	pop	{r7, pc}
 8014402:	bf00      	nop
 8014404:	0802c8c0 	.word	0x0802c8c0

08014408 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 8014408:	b480      	push	{r7}
 801440a:	b083      	sub	sp, #12
 801440c:	af00      	add	r7, sp, #0
 801440e:	6078      	str	r0, [r7, #4]
 8014410:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	683a      	ldr	r2, [r7, #0]
 8014416:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8014418:	bf00      	nop
 801441a:	370c      	adds	r7, #12
 801441c:	46bd      	mov	sp, r7
 801441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014422:	4770      	bx	lr

08014424 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 8014424:	b580      	push	{r7, lr}
 8014426:	b082      	sub	sp, #8
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	4618      	mov	r0, r3
 8014430:	2326      	movs	r3, #38	; 0x26
 8014432:	461a      	mov	r2, r3
 8014434:	2100      	movs	r1, #0
 8014436:	f015 fb73 	bl	8029b20 <memset>
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	4618      	mov	r0, r3
 801443e:	f7fe fc55 	bl	8012cec <_ZN8touchgfx6WidgetC1Ev>
 8014442:	4a0a      	ldr	r2, [pc, #40]	; (801446c <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	601a      	str	r2, [r3, #0]
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	2200      	movs	r2, #0
 801444c:	629a      	str	r2, [r3, #40]	; 0x28
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	2200      	movs	r2, #0
 8014452:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	2101      	movs	r1, #1
 801445a:	4618      	mov	r0, r3
 801445c:	f7ff ff38 	bl	80142d0 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	4618      	mov	r0, r3
 8014464:	3708      	adds	r7, #8
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}
 801446a:	bf00      	nop
 801446c:	0802c7dc 	.word	0x0802c7dc

08014470 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 8014470:	b480      	push	{r7}
 8014472:	b083      	sub	sp, #12
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
 8014478:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	683a      	ldr	r2, [r7, #0]
 801447e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8014480:	bf00      	nop
 8014482:	370c      	adds	r7, #12
 8014484:	46bd      	mov	sp, r7
 8014486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801448a:	4770      	bx	lr

0801448c <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 801448c:	b580      	push	{r7, lr}
 801448e:	b082      	sub	sp, #8
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
 8014494:	4a05      	ldr	r2, [pc, #20]	; (80144ac <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	601a      	str	r2, [r3, #0]
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	4618      	mov	r0, r3
 801449e:	f7fe fc37 	bl	8012d10 <_ZN8touchgfx6WidgetD1Ev>
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	4618      	mov	r0, r3
 80144a6:	3708      	adds	r7, #8
 80144a8:	46bd      	mov	sp, r7
 80144aa:	bd80      	pop	{r7, pc}
 80144ac:	0802c7dc 	.word	0x0802c7dc

080144b0 <_ZN8touchgfx14AbstractButtonD0Ev>:
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b082      	sub	sp, #8
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
 80144b8:	6878      	ldr	r0, [r7, #4]
 80144ba:	f7ff ffe7 	bl	801448c <_ZN8touchgfx14AbstractButtonD1Ev>
 80144be:	2130      	movs	r1, #48	; 0x30
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	f015 f97e 	bl	80297c2 <_ZdlPvj>
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	4618      	mov	r0, r3
 80144ca:	3708      	adds	r7, #8
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bd80      	pop	{r7, pc}

080144d0 <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b082      	sub	sp, #8
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	4618      	mov	r0, r3
 80144dc:	f7ff ffa2 	bl	8014424 <_ZN8touchgfx14AbstractButtonC1Ev>
 80144e0:	4a0c      	ldr	r2, [pc, #48]	; (8014514 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	601a      	str	r2, [r3, #0]
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	332e      	adds	r3, #46	; 0x2e
 80144ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80144ee:	4618      	mov	r0, r3
 80144f0:	f7ff fede 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	3330      	adds	r3, #48	; 0x30
 80144f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80144fc:	4618      	mov	r0, r3
 80144fe:	f7ff fed7 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	22ff      	movs	r2, #255	; 0xff
 8014506:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	4618      	mov	r0, r3
 801450e:	3708      	adds	r7, #8
 8014510:	46bd      	mov	sp, r7
 8014512:	bd80      	pop	{r7, pc}
 8014514:	0802c928 	.word	0x0802c928

08014518 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>:
 * when it is subsequently pressed, it will pop back out.
 */
class ToggleButton : public Button
{
public:
    virtual void setBitmaps(const Bitmap& bitmapReleased, const Bitmap& bitmapPressed)
 8014518:	b580      	push	{r7, lr}
 801451a:	b084      	sub	sp, #16
 801451c:	af00      	add	r7, sp, #0
 801451e:	60f8      	str	r0, [r7, #12]
 8014520:	60b9      	str	r1, [r7, #8]
 8014522:	607a      	str	r2, [r7, #4]
    {
        originalPressed = bitmapPressed;
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	687a      	ldr	r2, [r7, #4]
 8014528:	8812      	ldrh	r2, [r2, #0]
 801452a:	869a      	strh	r2, [r3, #52]	; 0x34
        Button::setBitmaps(bitmapReleased, bitmapPressed);
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	687a      	ldr	r2, [r7, #4]
 8014530:	68b9      	ldr	r1, [r7, #8]
 8014532:	4618      	mov	r0, r3
 8014534:	f004 ffce 	bl	80194d4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    }
 8014538:	bf00      	nop
 801453a:	3710      	adds	r7, #16
 801453c:	46bd      	mov	sp, r7
 801453e:	bd80      	pop	{r7, pc}

08014540 <_ZN8touchgfx11RadioButtonC1Ev>:
 * @see RadioButtonGroup
 */
class RadioButton : public AbstractButton
{
public:
    RadioButton()
 8014540:	b580      	push	{r7, lr}
 8014542:	b082      	sub	sp, #8
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
        : AbstractButton(), bitmapUnselected(), bitmapUnselectedPressed(), bitmapSelected(), bitmapSelectedPressed(), alpha(255), selected(false), deselectionEnabled(false), deselectedAction(0)
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	4618      	mov	r0, r3
 801454c:	f7ff ff6a 	bl	8014424 <_ZN8touchgfx14AbstractButtonC1Ev>
 8014550:	4a19      	ldr	r2, [pc, #100]	; (80145b8 <_ZN8touchgfx11RadioButtonC1Ev+0x78>)
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	601a      	str	r2, [r3, #0]
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	332e      	adds	r3, #46	; 0x2e
 801455a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801455e:	4618      	mov	r0, r3
 8014560:	f7ff fea6 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	3330      	adds	r3, #48	; 0x30
 8014568:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801456c:	4618      	mov	r0, r3
 801456e:	f7ff fe9f 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	3332      	adds	r3, #50	; 0x32
 8014576:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801457a:	4618      	mov	r0, r3
 801457c:	f7ff fe98 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	3334      	adds	r3, #52	; 0x34
 8014584:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014588:	4618      	mov	r0, r3
 801458a:	f7ff fe91 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	22ff      	movs	r2, #255	; 0xff
 8014592:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	2200      	movs	r2, #0
 801459a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	2200      	movs	r2, #0
 80145a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	2200      	movs	r2, #0
 80145aa:	63da      	str	r2, [r3, #60]	; 0x3c
    {
    }
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	4618      	mov	r0, r3
 80145b0:	3708      	adds	r7, #8
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}
 80145b6:	bf00      	nop
 80145b8:	0802ca7c 	.word	0x0802ca7c

080145bc <_ZN8touchgfx11RadioButton19setDeselectedActionERNS_15GenericCallbackIRKNS_14AbstractButtonEvvEE>:
     *                  to the AbstractButton.
     *
     * @note The action performed when the RadioButton is selected, is set using
     *       setAction().
     */
    void setDeselectedAction(GenericCallback<const AbstractButton&>& callback)
 80145bc:	b480      	push	{r7}
 80145be:	b083      	sub	sp, #12
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
 80145c4:	6039      	str	r1, [r7, #0]
    {
        deselectedAction = &callback;
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	683a      	ldr	r2, [r7, #0]
 80145ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80145cc:	bf00      	nop
 80145ce:	370c      	adds	r7, #12
 80145d0:	46bd      	mov	sp, r7
 80145d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d6:	4770      	bx	lr

080145d8 <_ZN8touchgfx11RadioButton21setDeselectionEnabledEb>:
     *
     * @param  state true if it should be possible to deselect by click. Default is false.
     *
     * @see getDeselectionEnabled
     */
    void setDeselectionEnabled(bool state)
 80145d8:	b480      	push	{r7}
 80145da:	b083      	sub	sp, #12
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
 80145e0:	460b      	mov	r3, r1
 80145e2:	70fb      	strb	r3, [r7, #3]
    {
        deselectionEnabled = state;
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	78fa      	ldrb	r2, [r7, #3]
 80145e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
 80145ec:	bf00      	nop
 80145ee:	370c      	adds	r7, #12
 80145f0:	46bd      	mov	sp, r7
 80145f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f6:	4770      	bx	lr

080145f8 <_ZNK8touchgfx11RadioButton21getDeselectionEnabledEv>:
     *
     * @return The current deselectionEnabled state.
     *
     * @see setDeselectionEnabled
     */
    bool getDeselectionEnabled() const
 80145f8:	b480      	push	{r7}
 80145fa:	b083      	sub	sp, #12
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	6078      	str	r0, [r7, #4]
    {
        return deselectionEnabled;
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    }
 8014606:	4618      	mov	r0, r3
 8014608:	370c      	adds	r7, #12
 801460a:	46bd      	mov	sp, r7
 801460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014610:	4770      	bx	lr

08014612 <_ZNK8touchgfx11RadioButton11getSelectedEv>:
    /**
     * Gets the current selected state.
     *
     * @return The current selected state.
     */
    bool getSelected() const
 8014612:	b480      	push	{r7}
 8014614:	b083      	sub	sp, #12
 8014616:	af00      	add	r7, sp, #0
 8014618:	6078      	str	r0, [r7, #4]
    {
        return selected;
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    }
 8014620:	4618      	mov	r0, r3
 8014622:	370c      	adds	r7, #12
 8014624:	46bd      	mov	sp, r7
 8014626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801462a:	4770      	bx	lr

0801462c <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 801462c:	b480      	push	{r7}
 801462e:	b083      	sub	sp, #12
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
 8014634:	460b      	mov	r3, r1
 8014636:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 8014638:	4a06      	ldr	r2, [pc, #24]	; (8014654 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	601a      	str	r2, [r3, #0]
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	887a      	ldrh	r2, [r7, #2]
 8014642:	809a      	strh	r2, [r3, #4]
    }
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	4618      	mov	r0, r3
 8014648:	370c      	adds	r7, #12
 801464a:	46bd      	mov	sp, r7
 801464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014650:	4770      	bx	lr
 8014652:	bf00      	nop
 8014654:	0802bb6c 	.word	0x0802bb6c

08014658 <_ZN8touchgfx9TypedTextaSERKS0_>:
class TypedText
 8014658:	b480      	push	{r7}
 801465a:	b083      	sub	sp, #12
 801465c:	af00      	add	r7, sp, #0
 801465e:	6078      	str	r0, [r7, #4]
 8014660:	6039      	str	r1, [r7, #0]
 8014662:	683b      	ldr	r3, [r7, #0]
 8014664:	889a      	ldrh	r2, [r3, #4]
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	809a      	strh	r2, [r3, #4]
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	4618      	mov	r0, r3
 801466e:	370c      	adds	r7, #12
 8014670:	46bd      	mov	sp, r7
 8014672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014676:	4770      	bx	lr

08014678 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
     *
     * @param  t The text to display.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelText(TypedText t)
 8014678:	b580      	push	{r7, lr}
 801467a:	b082      	sub	sp, #8
 801467c:	af00      	add	r7, sp, #0
 801467e:	6078      	str	r0, [r7, #4]
 8014680:	6039      	str	r1, [r7, #0]
    {
        typedText = t;
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	3334      	adds	r3, #52	; 0x34
 8014686:	6839      	ldr	r1, [r7, #0]
 8014688:	4618      	mov	r0, r3
 801468a:	f7ff ffe5 	bl	8014658 <_ZN8touchgfx9TypedTextaSERKS0_>
        updateTextPosition();
 801468e:	6878      	ldr	r0, [r7, #4]
 8014690:	f000 f820 	bl	80146d4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 8014694:	bf00      	nop
 8014696:	3708      	adds	r7, #8
 8014698:	46bd      	mov	sp, r7
 801469a:	bd80      	pop	{r7, pc}

0801469c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>:
     *
     * @note If the button is currently in the normal, released state, the button should be forced
     *       to redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColor(colortype col)
 801469c:	b480      	push	{r7}
 801469e:	b083      	sub	sp, #12
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
 80146a4:	6039      	str	r1, [r7, #0]
    {
        color = col;
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	683a      	ldr	r2, [r7, #0]
 80146aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80146ac:	bf00      	nop
 80146ae:	370c      	adds	r7, #12
 80146b0:	46bd      	mov	sp, r7
 80146b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b6:	4770      	bx	lr

080146b8 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>:
     *
     * @note If the button is currently in the pressed state, the button should be forced to
     *       redraw itself. This is done by calling invalidate() on the ButtonWithLabel.
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void setLabelColorPressed(colortype col)
 80146b8:	b480      	push	{r7}
 80146ba:	b083      	sub	sp, #12
 80146bc:	af00      	add	r7, sp, #0
 80146be:	6078      	str	r0, [r7, #4]
 80146c0:	6039      	str	r1, [r7, #0]
    {
        colorPressed = col;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	683a      	ldr	r2, [r7, #0]
 80146c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
 80146c8:	bf00      	nop
 80146ca:	370c      	adds	r7, #12
 80146cc:	46bd      	mov	sp, r7
 80146ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d2:	4770      	bx	lr

080146d4 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 80146d4:	b590      	push	{r4, r7, lr}
 80146d6:	b08b      	sub	sp, #44	; 0x2c
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
    {
        if (typedText.hasValidId())
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	3334      	adds	r3, #52	; 0x34
 80146e0:	61fb      	str	r3, [r7, #28]
     *
     * @return Is the id valid.
     */
    FORCE_INLINE_FUNCTION bool hasValidId() const
    {
        return typedTextId < numberOfTypedTexts;
 80146e2:	69fb      	ldr	r3, [r7, #28]
 80146e4:	889a      	ldrh	r2, [r3, #4]
 80146e6:	4b47      	ldr	r3, [pc, #284]	; (8014804 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 80146e8:	881b      	ldrh	r3, [r3, #0]
 80146ea:	429a      	cmp	r2, r3
 80146ec:	bf34      	ite	cc
 80146ee:	2301      	movcc	r3, #1
 80146f0:	2300      	movcs	r3, #0
 80146f2:	b2db      	uxtb	r3, r3
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d07c      	beq.n	80147f2 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x11e>
        {
            const Font* f = typedText.getFont();
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	3334      	adds	r3, #52	; 0x34
 80146fc:	613b      	str	r3, [r7, #16]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80146fe:	4b42      	ldr	r3, [pc, #264]	; (8014808 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x134>)
 8014700:	681b      	ldr	r3, [r3, #0]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d105      	bne.n	8014712 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x3e>
 8014706:	4b41      	ldr	r3, [pc, #260]	; (801480c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x138>)
 8014708:	4a41      	ldr	r2, [pc, #260]	; (8014810 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x13c>)
 801470a:	216c      	movs	r1, #108	; 0x6c
 801470c:	4841      	ldr	r0, [pc, #260]	; (8014814 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x140>)
 801470e:	f015 f887 	bl	8029820 <__assert_func>
 8014712:	693b      	ldr	r3, [r7, #16]
 8014714:	60fb      	str	r3, [r7, #12]
        return typedTextId < numberOfTypedTexts;
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	889a      	ldrh	r2, [r3, #4]
 801471a:	4b3a      	ldr	r3, [pc, #232]	; (8014804 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 801471c:	881b      	ldrh	r3, [r3, #0]
 801471e:	429a      	cmp	r2, r3
 8014720:	bf34      	ite	cc
 8014722:	2301      	movcc	r3, #1
 8014724:	2300      	movcs	r3, #0
 8014726:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8014728:	2b00      	cmp	r3, #0
 801472a:	d105      	bne.n	8014738 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>
 801472c:	4b3a      	ldr	r3, [pc, #232]	; (8014818 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x144>)
 801472e:	4a38      	ldr	r2, [pc, #224]	; (8014810 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x13c>)
 8014730:	216d      	movs	r1, #109	; 0x6d
 8014732:	4838      	ldr	r0, [pc, #224]	; (8014814 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x140>)
 8014734:	f015 f874 	bl	8029820 <__assert_func>
 8014738:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 801473a:	4b38      	ldr	r3, [pc, #224]	; (801481c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x148>)
 801473c:	681a      	ldr	r2, [r3, #0]
 801473e:	4b32      	ldr	r3, [pc, #200]	; (8014808 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x134>)
 8014740:	6819      	ldr	r1, [r3, #0]
 8014742:	693b      	ldr	r3, [r7, #16]
 8014744:	889b      	ldrh	r3, [r3, #4]
 8014746:	005b      	lsls	r3, r3, #1
 8014748:	440b      	add	r3, r1
 801474a:	781b      	ldrb	r3, [r3, #0]
 801474c:	009b      	lsls	r3, r3, #2
 801474e:	4413      	add	r3, r2
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	627b      	str	r3, [r7, #36]	; 0x24
            const Unicode::UnicodeChar* s = typedText.getText();
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	3334      	adds	r3, #52	; 0x34
 8014758:	61bb      	str	r3, [r7, #24]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801475a:	4b2b      	ldr	r3, [pc, #172]	; (8014808 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x134>)
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d105      	bne.n	801476e <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x9a>
 8014762:	4b2a      	ldr	r3, [pc, #168]	; (801480c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x138>)
 8014764:	4a2e      	ldr	r2, [pc, #184]	; (8014820 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x14c>)
 8014766:	2160      	movs	r1, #96	; 0x60
 8014768:	482a      	ldr	r0, [pc, #168]	; (8014814 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x140>)
 801476a:	f015 f859 	bl	8029820 <__assert_func>
 801476e:	69bb      	ldr	r3, [r7, #24]
 8014770:	617b      	str	r3, [r7, #20]
        return typedTextId < numberOfTypedTexts;
 8014772:	697b      	ldr	r3, [r7, #20]
 8014774:	889a      	ldrh	r2, [r3, #4]
 8014776:	4b23      	ldr	r3, [pc, #140]	; (8014804 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x130>)
 8014778:	881b      	ldrh	r3, [r3, #0]
 801477a:	429a      	cmp	r2, r3
 801477c:	bf34      	ite	cc
 801477e:	2301      	movcc	r3, #1
 8014780:	2300      	movcs	r3, #0
 8014782:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8014784:	2b00      	cmp	r3, #0
 8014786:	d105      	bne.n	8014794 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0xc0>
 8014788:	4b23      	ldr	r3, [pc, #140]	; (8014818 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x144>)
 801478a:	4a25      	ldr	r2, [pc, #148]	; (8014820 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x14c>)
 801478c:	2161      	movs	r1, #97	; 0x61
 801478e:	4821      	ldr	r0, [pc, #132]	; (8014814 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x140>)
 8014790:	f015 f846 	bl	8029820 <__assert_func>
 8014794:	bf00      	nop
        return texts->getText(typedTextId);
 8014796:	4b23      	ldr	r3, [pc, #140]	; (8014824 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x150>)
 8014798:	681a      	ldr	r2, [r3, #0]
 801479a:	69bb      	ldr	r3, [r7, #24]
 801479c:	889b      	ldrh	r3, [r3, #4]
 801479e:	4619      	mov	r1, r3
 80147a0:	4610      	mov	r0, r2
 80147a2:	f001 fb95 	bl	8015ed0 <_ZNK8touchgfx5Texts7getTextEt>
 80147a6:	4603      	mov	r3, r0
 80147a8:	bf00      	nop
 80147aa:	623b      	str	r3, [r7, #32]
            textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 80147ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	3328      	adds	r3, #40	; 0x28
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	6a39      	ldr	r1, [r7, #32]
 80147b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147b8:	4798      	blx	r3
 80147ba:	4603      	mov	r3, r0
 80147bc:	b2dc      	uxtb	r4, r3
 80147be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	3340      	adds	r3, #64	; 0x40
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	6a39      	ldr	r1, [r7, #32]
 80147c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147ca:	4798      	blx	r3
 80147cc:	4603      	mov	r3, r0
 80147ce:	b2db      	uxtb	r3, r3
 80147d0:	fb14 f303 	smulbb	r3, r4, r3
 80147d4:	b2dc      	uxtb	r4, r3
 80147d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	3324      	adds	r3, #36	; 0x24
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	6a39      	ldr	r1, [r7, #32]
 80147e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147e2:	4798      	blx	r3
 80147e4:	4603      	mov	r3, r0
 80147e6:	4423      	add	r3, r4
 80147e8:	b2da      	uxtb	r2, r3
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 80147f0:	e003      	b.n	80147fa <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x126>
            textHeightIncludingSpacing = 0;
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	2200      	movs	r2, #0
 80147f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 80147fa:	bf00      	nop
 80147fc:	372c      	adds	r7, #44	; 0x2c
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd90      	pop	{r4, r7, pc}
 8014802:	bf00      	nop
 8014804:	20008e84 	.word	0x20008e84
 8014808:	20008e80 	.word	0x20008e80
 801480c:	0802b0f8 	.word	0x0802b0f8
 8014810:	0802b13c 	.word	0x0802b13c
 8014814:	0802b178 	.word	0x0802b178
 8014818:	0802b1bc 	.word	0x0802b1bc
 801481c:	20008e88 	.word	0x20008e88
 8014820:	0802b1fc 	.word	0x0802b1fc
 8014824:	20008e8c 	.word	0x20008e8c

08014828 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	4618      	mov	r0, r3
 8014836:	2326      	movs	r3, #38	; 0x26
 8014838:	461a      	mov	r2, r3
 801483a:	2100      	movs	r1, #0
 801483c:	f015 f970 	bl	8029b20 <memset>
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	4618      	mov	r0, r3
 8014844:	f7fe fa52 	bl	8012cec <_ZN8touchgfx6WidgetC1Ev>
 8014848:	4a09      	ldr	r2, [pc, #36]	; (8014870 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	601a      	str	r2, [r3, #0]
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	683a      	ldr	r2, [r7, #0]
 8014852:	8812      	ldrh	r2, [r2, #0]
 8014854:	84da      	strh	r2, [r3, #38]	; 0x26
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	22ff      	movs	r2, #255	; 0xff
 801485a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 801485e:	6839      	ldr	r1, [r7, #0]
 8014860:	6878      	ldr	r0, [r7, #4]
 8014862:	f004 fee1 	bl	8019628 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	4618      	mov	r0, r3
 801486a:	3708      	adds	r7, #8
 801486c:	46bd      	mov	sp, r7
 801486e:	bd80      	pop	{r7, pc}
 8014870:	0802c99c 	.word	0x0802c99c

08014874 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8014874:	b580      	push	{r7, lr}
 8014876:	b082      	sub	sp, #8
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
 801487c:	4a05      	ldr	r2, [pc, #20]	; (8014894 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	601a      	str	r2, [r3, #0]
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	4618      	mov	r0, r3
 8014886:	f7ff fd33 	bl	80142f0 <_ZN8touchgfx6ScreenD1Ev>
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	4618      	mov	r0, r3
 801488e:	3708      	adds	r7, #8
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}
 8014894:	0802bf5c 	.word	0x0802bf5c

08014898 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 8014898:	b580      	push	{r7, lr}
 801489a:	b082      	sub	sp, #8
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f7ff ffe7 	bl	8014874 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80148a6:	2140      	movs	r1, #64	; 0x40
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f014 ff8a 	bl	80297c2 <_ZdlPvj>
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	4618      	mov	r0, r3
 80148b2:	3708      	adds	r7, #8
 80148b4:	46bd      	mov	sp, r7
 80148b6:	bd80      	pop	{r7, pc}

080148b8 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b082      	sub	sp, #8
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
 80148c0:	4a1e      	ldr	r2, [pc, #120]	; (801493c <_ZN15Screen1ViewBaseD1Ev+0x84>)
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	601a      	str	r2, [r3, #0]
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80148cc:	4618      	mov	r0, r3
 80148ce:	f000 fc77 	bl	80151c0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80148d8:	4618      	mov	r0, r3
 80148da:	f000 fadb 	bl	8014e94 <_ZN8touchgfx16RadioButtonGroupILt1EED1Ev>
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80148e4:	4618      	mov	r0, r3
 80148e6:	f000 fd3d 	bl	8015364 <_ZN8touchgfx5ImageD1Ev>
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80148f0:	4618      	mov	r0, r3
 80148f2:	f000 fd0f 	bl	8015314 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80148fc:	4618      	mov	r0, r3
 80148fe:	f000 fce7 	bl	80152d0 <_ZN8touchgfx11RadioButtonD1Ev>
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	33cc      	adds	r3, #204	; 0xcc
 8014906:	4618      	mov	r0, r3
 8014908:	f000 fcc0 	bl	801528c <_ZN8touchgfx12ToggleButtonD1Ev>
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	3398      	adds	r3, #152	; 0x98
 8014910:	4618      	mov	r0, r3
 8014912:	f000 f831 	bl	8014978 <_ZN8touchgfx6ButtonD1Ev>
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	336c      	adds	r3, #108	; 0x6c
 801491a:	4618      	mov	r0, r3
 801491c:	f000 fc94 	bl	8015248 <_ZN8touchgfx3BoxD1Ev>
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	3340      	adds	r3, #64	; 0x40
 8014924:	4618      	mov	r0, r3
 8014926:	f000 fc8f 	bl	8015248 <_ZN8touchgfx3BoxD1Ev>
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	4618      	mov	r0, r3
 801492e:	f7ff ffa1 	bl	8014874 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	4618      	mov	r0, r3
 8014936:	3708      	adds	r7, #8
 8014938:	46bd      	mov	sp, r7
 801493a:	bd80      	pop	{r7, pc}
 801493c:	0802bec4 	.word	0x0802bec4

08014940 <_ZN15Screen1ViewBaseD0Ev>:
 8014940:	b580      	push	{r7, lr}
 8014942:	b082      	sub	sp, #8
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
 8014948:	6878      	ldr	r0, [r7, #4]
 801494a:	f7ff ffb5 	bl	80148b8 <_ZN15Screen1ViewBaseD1Ev>
 801494e:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8014952:	6878      	ldr	r0, [r7, #4]
 8014954:	f014 ff35 	bl	80297c2 <_ZdlPvj>
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	4618      	mov	r0, r3
 801495c:	3708      	adds	r7, #8
 801495e:	46bd      	mov	sp, r7
 8014960:	bd80      	pop	{r7, pc}

08014962 <_ZN15Screen1ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8014962:	b580      	push	{r7, lr}
 8014964:	b082      	sub	sp, #8
 8014966:	af00      	add	r7, sp, #0
 8014968:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 801496a:	f006 fd4f 	bl	801b40c <_ZN8touchgfx11Application11getInstanceEv>
 801496e:	4603      	mov	r3, r0
    }
 8014970:	4618      	mov	r0, r3
 8014972:	3708      	adds	r7, #8
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}

08014978 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8014978:	b580      	push	{r7, lr}
 801497a:	b082      	sub	sp, #8
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
 8014980:	4a05      	ldr	r2, [pc, #20]	; (8014998 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	601a      	str	r2, [r3, #0]
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	4618      	mov	r0, r3
 801498a:	f7ff fd7f 	bl	801448c <_ZN8touchgfx14AbstractButtonD1Ev>
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	4618      	mov	r0, r3
 8014992:	3708      	adds	r7, #8
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}
 8014998:	0802c928 	.word	0x0802c928

0801499c <_ZN8touchgfx6ButtonD0Ev>:
 801499c:	b580      	push	{r7, lr}
 801499e:	b082      	sub	sp, #8
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
 80149a4:	6878      	ldr	r0, [r7, #4]
 80149a6:	f7ff ffe7 	bl	8014978 <_ZN8touchgfx6ButtonD1Ev>
 80149aa:	2134      	movs	r1, #52	; 0x34
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f014 ff08 	bl	80297c2 <_ZdlPvj>
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	4618      	mov	r0, r3
 80149b6:	3708      	adds	r7, #8
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}

080149bc <_ZN8touchgfx12ToggleButtonC1Ev>:
class ToggleButton : public Button
 80149bc:	b580      	push	{r7, lr}
 80149be:	b082      	sub	sp, #8
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	4618      	mov	r0, r3
 80149c8:	f7ff fd82 	bl	80144d0 <_ZN8touchgfx6ButtonC1Ev>
 80149cc:	4a07      	ldr	r2, [pc, #28]	; (80149ec <_ZN8touchgfx12ToggleButtonC1Ev+0x30>)
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	601a      	str	r2, [r3, #0]
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	3334      	adds	r3, #52	; 0x34
 80149d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80149da:	4618      	mov	r0, r3
 80149dc:	f7ff fc68 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	4618      	mov	r0, r3
 80149e4:	3708      	adds	r7, #8
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}
 80149ea:	bf00      	nop
 80149ec:	0802c84c 	.word	0x0802c84c

080149f0 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
 80149f0:	b590      	push	{r4, r7, lr}
 80149f2:	b09d      	sub	sp, #116	; 0x74
 80149f4:	af02      	add	r7, sp, #8
 80149f6:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	4618      	mov	r0, r3
 80149fc:	f000 fa72 	bl	8014ee4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8014a00:	4ae5      	ldr	r2, [pc, #916]	; (8014d98 <_ZN15Screen1ViewBaseC1Ev+0x3a8>)
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	601a      	str	r2, [r3, #0]
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	3340      	adds	r3, #64	; 0x40
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	f7ff fcd8 	bl	80143c0 <_ZN8touchgfx3BoxC1Ev>
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	336c      	adds	r3, #108	; 0x6c
 8014a14:	4618      	mov	r0, r3
 8014a16:	f7ff fcd3 	bl	80143c0 <_ZN8touchgfx3BoxC1Ev>
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	3398      	adds	r3, #152	; 0x98
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f7ff fd56 	bl	80144d0 <_ZN8touchgfx6ButtonC1Ev>
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	33cc      	adds	r3, #204	; 0xcc
 8014a28:	4618      	mov	r0, r3
 8014a2a:	f7ff ffc7 	bl	80149bc <_ZN8touchgfx12ToggleButtonC1Ev>
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8014a34:	4618      	mov	r0, r3
 8014a36:	f7ff fd83 	bl	8014540 <_ZN8touchgfx11RadioButtonC1Ev>
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014a40:	4618      	mov	r0, r3
 8014a42:	f004 ff13 	bl	801986c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
 8014a4c:	f107 030c 	add.w	r3, r7, #12
 8014a50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014a54:	4618      	mov	r0, r3
 8014a56:	f7ff fc2b 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8014a5a:	f107 030c 	add.w	r3, r7, #12
 8014a5e:	4619      	mov	r1, r3
 8014a60:	4620      	mov	r0, r4
 8014a62:	f7ff fee1 	bl	8014828 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	f000 fa4f 	bl	8014f10 <_ZN8touchgfx16RadioButtonGroupILt1EEC1Ev>
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	f503 70f6 	add.w	r0, r3, #492	; 0x1ec
 8014a78:	4bc8      	ldr	r3, [pc, #800]	; (8014d9c <_ZN15Screen1ViewBaseC1Ev+0x3ac>)
 8014a7a:	613b      	str	r3, [r7, #16]
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	617b      	str	r3, [r7, #20]
 8014a80:	f107 0310 	add.w	r3, r7, #16
 8014a84:	cb0c      	ldmia	r3, {r2, r3}
 8014a86:	6879      	ldr	r1, [r7, #4]
 8014a88:	f000 fa90 	bl	8014fac <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 800);
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8014a92:	f44f 7348 	mov.w	r3, #800	; 0x320
 8014a96:	9300      	str	r3, [sp, #0]
 8014a98:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	2100      	movs	r1, #0
 8014aa0:	f7fd fe0e 	bl	80126c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8014aaa:	2300      	movs	r3, #0
 8014aac:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8014abc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8014ac0:	041b      	lsls	r3, r3, #16
 8014ac2:	461a      	mov	r2, r3
 8014ac4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8014ac8:	021b      	lsls	r3, r3, #8
 8014aca:	431a      	orrs	r2, r3
 8014acc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8014ad0:	4313      	orrs	r3, r2
 8014ad2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8014ad6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014ada:	4611      	mov	r1, r2
 8014adc:	4618      	mov	r0, r3
 8014ade:	f7ff fbd8 	bl	8014292 <_ZN8touchgfx9colortypeC1Em>
 8014ae2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014ae4:	4619      	mov	r1, r3
 8014ae6:	4620      	mov	r0, r4
 8014ae8:	f7ff fc8e 	bl	8014408 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 480, 800);
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8014af2:	f44f 7348 	mov.w	r3, #800	; 0x320
 8014af6:	9300      	str	r3, [sp, #0]
 8014af8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8014afc:	2200      	movs	r2, #0
 8014afe:	2100      	movs	r1, #0
 8014b00:	f7fd fdde 	bl	80126c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(4, 15, 61));
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8014b0a:	2304      	movs	r3, #4
 8014b0c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8014b10:	230f      	movs	r3, #15
 8014b12:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8014b16:	233d      	movs	r3, #61	; 0x3d
 8014b18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8014b1c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8014b20:	041b      	lsls	r3, r3, #16
 8014b22:	461a      	mov	r2, r3
 8014b24:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8014b28:	021b      	lsls	r3, r3, #8
 8014b2a:	431a      	orrs	r2, r3
 8014b2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8014b30:	4313      	orrs	r3, r2
 8014b32:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8014b36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8014b3a:	4611      	mov	r1, r2
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	f7ff fba8 	bl	8014292 <_ZN8touchgfx9colortypeC1Em>
 8014b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b44:	4619      	mov	r1, r3
 8014b46:	4620      	mov	r0, r4
 8014b48:	f7ff fc5e 	bl	8014408 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(155, 370);
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	3398      	adds	r3, #152	; 0x98
 8014b50:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8014b54:	219b      	movs	r1, #155	; 0x9b
 8014b56:	4618      	mov	r0, r3
 8014b58:	f7fd fe18 	bl	801278c <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8014b62:	f107 0318 	add.w	r3, r7, #24
 8014b66:	2101      	movs	r1, #1
 8014b68:	4618      	mov	r0, r3
 8014b6a:	f7ff fba1 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8014b6e:	f107 031c 	add.w	r3, r7, #28
 8014b72:	2102      	movs	r1, #2
 8014b74:	4618      	mov	r0, r3
 8014b76:	f7ff fb9b 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8014b7a:	f107 021c 	add.w	r2, r7, #28
 8014b7e:	f107 0318 	add.w	r3, r7, #24
 8014b82:	4619      	mov	r1, r3
 8014b84:	4620      	mov	r0, r4
 8014b86:	f004 fca5 	bl	80194d4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014b96:	4619      	mov	r1, r3
 8014b98:	4610      	mov	r0, r2
 8014b9a:	f7ff fc69 	bl	8014470 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    toggleButton1.setXY(176, 142);
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	33cc      	adds	r3, #204	; 0xcc
 8014ba2:	228e      	movs	r2, #142	; 0x8e
 8014ba4:	21b0      	movs	r1, #176	; 0xb0
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7fd fdf0 	bl	801278c <_ZN8touchgfx8Drawable5setXYEss>
    toggleButton1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_ON_ID));
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 8014bb2:	f107 0320 	add.w	r3, r7, #32
 8014bb6:	2107      	movs	r1, #7
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f7ff fb79 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8014bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014bc2:	2108      	movs	r1, #8
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7ff fb73 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8014bca:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014bce:	f107 0320 	add.w	r3, r7, #32
 8014bd2:	4619      	mov	r1, r3
 8014bd4:	4620      	mov	r0, r4
 8014bd6:	f7ff fc9f 	bl	8014518 <_ZN8touchgfx12ToggleButton10setBitmapsERKNS_6BitmapES3_>

    radioButton1.setXY(218, 42);
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8014be0:	222a      	movs	r2, #42	; 0x2a
 8014be2:	21da      	movs	r1, #218	; 0xda
 8014be4:	4618      	mov	r0, r3
 8014be6:	f7fd fdd1 	bl	801278c <_ZN8touchgfx8Drawable5setXYEss>
    radioButton1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_MARK_INACTIVE_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_MARK_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_MARK_ACTIVE_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_MARK_NORMAL_ID));
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	f503 7482 	add.w	r4, r3, #260	; 0x104
 8014bf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014bf4:	2104      	movs	r1, #4
 8014bf6:	4618      	mov	r0, r3
 8014bf8:	f7ff fb5a 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8014bfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014c00:	2106      	movs	r1, #6
 8014c02:	4618      	mov	r0, r3
 8014c04:	f7ff fb54 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8014c08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014c0c:	2103      	movs	r1, #3
 8014c0e:	4618      	mov	r0, r3
 8014c10:	f7ff fb4e 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8014c14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014c18:	2105      	movs	r1, #5
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	f7ff fb48 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8014c20:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8014c24:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8014c28:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8014c2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8014c30:	9300      	str	r3, [sp, #0]
 8014c32:	4603      	mov	r3, r0
 8014c34:	4620      	mov	r0, r4
 8014c36:	f004 fe47 	bl	80198c8 <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>
    radioButton1.setSelected(false);
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8014c40:	2100      	movs	r1, #0
 8014c42:	4618      	mov	r0, r3
 8014c44:	f004 feda 	bl	80199fc <_ZN8touchgfx11RadioButton11setSelectedEb>
    radioButton1.setDeselectionEnabled(false);
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8014c4e:	2100      	movs	r1, #0
 8014c50:	4618      	mov	r0, r3
 8014c52:	f7ff fcc1 	bl	80145d8 <_ZN8touchgfx11RadioButton21setDeselectionEnabledEb>

    buttonWithLabel1.setXY(155, 242);
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014c5c:	22f2      	movs	r2, #242	; 0xf2
 8014c5e:	219b      	movs	r1, #155	; 0x9b
 8014c60:	4618      	mov	r0, r3
 8014c62:	f7fd fd93 	bl	801278c <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8014c6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014c70:	2101      	movs	r1, #1
 8014c72:	4618      	mov	r0, r3
 8014c74:	f7ff fb1c 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8014c78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8014c7c:	2102      	movs	r1, #2
 8014c7e:	4618      	mov	r0, r3
 8014c80:	f7ff fb16 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8014c84:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8014c88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014c8c:	4619      	mov	r1, r3
 8014c8e:	4620      	mov	r0, r4
 8014c90:	f004 fc20 	bl	80194d4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(touchgfx::TypedText(T___SINGLEUSE_WIRK));
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8014c9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014c9e:	2100      	movs	r1, #0
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f7ff fcc3 	bl	801462c <_ZN8touchgfx9TypedTextC1Et>
 8014ca6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014caa:	4619      	mov	r1, r3
 8014cac:	4620      	mov	r0, r4
 8014cae:	f7ff fce3 	bl	8014678 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
 8014cb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f7fd fa1e 	bl	80120f8 <_ZN8touchgfx9TypedTextD1Ev>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8014cc2:	23ff      	movs	r3, #255	; 0xff
 8014cc4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8014cc8:	23ff      	movs	r3, #255	; 0xff
 8014cca:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8014cce:	23ff      	movs	r3, #255	; 0xff
 8014cd0:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8014cd4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8014cd8:	041b      	lsls	r3, r3, #16
 8014cda:	461a      	mov	r2, r3
 8014cdc:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8014ce0:	021b      	lsls	r3, r3, #8
 8014ce2:	431a      	orrs	r2, r3
 8014ce4:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8014ce8:	4313      	orrs	r3, r2
 8014cea:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8014cee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8014cf2:	4611      	mov	r1, r2
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	f7ff facc 	bl	8014292 <_ZN8touchgfx9colortypeC1Em>
 8014cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cfc:	4619      	mov	r1, r3
 8014cfe:	4620      	mov	r0, r4
 8014d00:	f7ff fccc 	bl	801469c <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeE>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8014d0a:	23ff      	movs	r3, #255	; 0xff
 8014d0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014d10:	23ff      	movs	r3, #255	; 0xff
 8014d12:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8014d16:	23ff      	movs	r3, #255	; 0xff
 8014d18:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8014d1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014d20:	041b      	lsls	r3, r3, #16
 8014d22:	461a      	mov	r2, r3
 8014d24:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8014d28:	021b      	lsls	r3, r3, #8
 8014d2a:	431a      	orrs	r2, r3
 8014d2c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8014d30:	4313      	orrs	r3, r2
 8014d32:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8014d36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8014d3a:	4611      	mov	r1, r2
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f7ff faa8 	bl	8014292 <_ZN8touchgfx9colortypeC1Em>
 8014d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d44:	4619      	mov	r1, r3
 8014d46:	4620      	mov	r0, r4
 8014d48:	f7ff fcb6 	bl	80146b8 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeE>

    image1.setXY(190, 473);
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8014d52:	f240 12d9 	movw	r2, #473	; 0x1d9
 8014d56:	21be      	movs	r1, #190	; 0xbe
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f7fd fd17 	bl	801278c <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_INVERTER_ID));
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	f503 74c6 	add.w	r4, r3, #396	; 0x18c
 8014d64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014d68:	210b      	movs	r1, #11
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	f7ff faa0 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8014d70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014d74:	4619      	mov	r1, r3
 8014d76:	4620      	mov	r0, r4
 8014d78:	f004 fc56 	bl	8019628 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    add(__background);
 8014d7c:	687a      	ldr	r2, [r7, #4]
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	3340      	adds	r3, #64	; 0x40
 8014d82:	4619      	mov	r1, r3
 8014d84:	4610      	mov	r0, r2
 8014d86:	f7ff fb0b 	bl	80143a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8014d8a:	687a      	ldr	r2, [r7, #4]
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	336c      	adds	r3, #108	; 0x6c
 8014d90:	4619      	mov	r1, r3
 8014d92:	4610      	mov	r0, r2
 8014d94:	e004      	b.n	8014da0 <_ZN15Screen1ViewBaseC1Ev+0x3b0>
 8014d96:	bf00      	nop
 8014d98:	0802bec4 	.word	0x0802bec4
 8014d9c:	08014e25 	.word	0x08014e25
 8014da0:	f7ff fafe 	bl	80143a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 8014da4:	687a      	ldr	r2, [r7, #4]
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	3398      	adds	r3, #152	; 0x98
 8014daa:	4619      	mov	r1, r3
 8014dac:	4610      	mov	r0, r2
 8014dae:	f7ff faf7 	bl	80143a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(toggleButton1);
 8014db2:	687a      	ldr	r2, [r7, #4]
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	33cc      	adds	r3, #204	; 0xcc
 8014db8:	4619      	mov	r1, r3
 8014dba:	4610      	mov	r0, r2
 8014dbc:	f7ff faf0 	bl	80143a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(radioButton1);
 8014dc0:	687a      	ldr	r2, [r7, #4]
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8014dc8:	4619      	mov	r1, r3
 8014dca:	4610      	mov	r0, r2
 8014dcc:	f7ff fae8 	bl	80143a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 8014dd0:	687a      	ldr	r2, [r7, #4]
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8014dd8:	4619      	mov	r1, r3
 8014dda:	4610      	mov	r0, r2
 8014ddc:	f7ff fae0 	bl	80143a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image1);
 8014de0:	687a      	ldr	r2, [r7, #4]
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8014de8:	4619      	mov	r1, r3
 8014dea:	4610      	mov	r0, r2
 8014dec:	f7ff fad8 	bl	80143a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    radioButtonGroup1.add(radioButton1);
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8014dfc:	4619      	mov	r1, r3
 8014dfe:	4610      	mov	r0, r2
 8014e00:	f000 f8f4 	bl	8014fec <_ZN8touchgfx16RadioButtonGroupILt1EE3addERNS_11RadioButtonE>
}
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	4618      	mov	r0, r3
 8014e08:	376c      	adds	r7, #108	; 0x6c
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	bd90      	pop	{r4, r7, pc}
 8014e0e:	bf00      	nop

08014e10 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 8014e10:	b480      	push	{r7}
 8014e12:	b083      	sub	sp, #12
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]

}
 8014e18:	bf00      	nop
 8014e1a:	370c      	adds	r7, #12
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e22:	4770      	bx	lr

08014e24 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b082      	sub	sp, #8
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
 8014e2c:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	3398      	adds	r3, #152	; 0x98
 8014e32:	683a      	ldr	r2, [r7, #0]
 8014e34:	429a      	cmp	r2, r3
 8014e36:	d106      	bne.n	8014e46 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards East
        application().gotoScreen2ScreenCoverTransitionEast();
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	f7ff fd92 	bl	8014962 <_ZN15Screen1ViewBase11applicationEv>
 8014e3e:	4603      	mov	r3, r0
 8014e40:	4618      	mov	r0, r3
 8014e42:	f7fe f86f 	bl	8012f24 <_ZN23FrontendApplicationBase36gotoScreen2ScreenCoverTransitionEastEv>
    }
}
 8014e46:	bf00      	nop
 8014e48:	3708      	adds	r7, #8
 8014e4a:	46bd      	mov	sp, r7
 8014e4c:	bd80      	pop	{r7, pc}
	...

08014e50 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b082      	sub	sp, #8
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
 8014e58:	4a05      	ldr	r2, [pc, #20]	; (8014e70 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvED1Ev+0x20>)
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	601a      	str	r2, [r3, #0]
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	4618      	mov	r0, r3
 8014e62:	f000 f8f5 	bl	8015050 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	4618      	mov	r0, r3
 8014e6a:	3708      	adds	r7, #8
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	bd80      	pop	{r7, pc}
 8014e70:	0802bf44 	.word	0x0802bf44

08014e74 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvED0Ev>:
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b082      	sub	sp, #8
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	f7ff ffe7 	bl	8014e50 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvED1Ev>
 8014e82:	2110      	movs	r1, #16
 8014e84:	6878      	ldr	r0, [r7, #4]
 8014e86:	f014 fc9c 	bl	80297c2 <_ZdlPvj>
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	3708      	adds	r7, #8
 8014e90:	46bd      	mov	sp, r7
 8014e92:	bd80      	pop	{r7, pc}

08014e94 <_ZN8touchgfx16RadioButtonGroupILt1EED1Ev>:
          radioButtonDeselectedCallback(0)
    {
    }

    /** Finalizes an instance of the RadioButtonGroup class. */
    virtual ~RadioButtonGroup()
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b082      	sub	sp, #8
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
    {
    }
 8014e9c:	4a08      	ldr	r2, [pc, #32]	; (8014ec0 <_ZN8touchgfx16RadioButtonGroupILt1EED1Ev+0x2c>)
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	601a      	str	r2, [r3, #0]
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	331c      	adds	r3, #28
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	f7ff ffd2 	bl	8014e50 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvED1Ev>
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	330c      	adds	r3, #12
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7ff ffcd 	bl	8014e50 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvED1Ev>
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	4618      	mov	r0, r3
 8014eba:	3708      	adds	r7, #8
 8014ebc:	46bd      	mov	sp, r7
 8014ebe:	bd80      	pop	{r7, pc}
 8014ec0:	0802bf10 	.word	0x0802bf10

08014ec4 <_ZN8touchgfx16RadioButtonGroupILt1EED0Ev>:
    virtual ~RadioButtonGroup()
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	b082      	sub	sp, #8
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	6078      	str	r0, [r7, #4]
    }
 8014ecc:	6878      	ldr	r0, [r7, #4]
 8014ece:	f7ff ffe1 	bl	8014e94 <_ZN8touchgfx16RadioButtonGroupILt1EED1Ev>
 8014ed2:	2134      	movs	r1, #52	; 0x34
 8014ed4:	6878      	ldr	r0, [r7, #4]
 8014ed6:	f014 fc74 	bl	80297c2 <_ZdlPvj>
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	4618      	mov	r0, r3
 8014ede:	3708      	adds	r7, #8
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	bd80      	pop	{r7, pc}

08014ee4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b082      	sub	sp, #8
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f007 fcbc 	bl	801c86c <_ZN8touchgfx6ScreenC1Ev>
 8014ef4:	4a05      	ldr	r2, [pc, #20]	; (8014f0c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	601a      	str	r2, [r3, #0]
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	2200      	movs	r2, #0
 8014efe:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	4618      	mov	r0, r3
 8014f04:	3708      	adds	r7, #8
 8014f06:	46bd      	mov	sp, r7
 8014f08:	bd80      	pop	{r7, pc}
 8014f0a:	bf00      	nop
 8014f0c:	0802bf5c 	.word	0x0802bf5c

08014f10 <_ZN8touchgfx16RadioButtonGroupILt1EEC1Ev>:
    RadioButtonGroup()
 8014f10:	b590      	push	{r4, r7, lr}
 8014f12:	b087      	sub	sp, #28
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
          radioButtonDeselectedCallback(0)
 8014f18:	4a19      	ldr	r2, [pc, #100]	; (8014f80 <_ZN8touchgfx16RadioButtonGroupILt1EEC1Ev+0x70>)
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	601a      	str	r2, [r3, #0]
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	2200      	movs	r2, #0
 8014f22:	811a      	strh	r2, [r3, #8]
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	f103 040c 	add.w	r4, r3, #12
 8014f2a:	4a16      	ldr	r2, [pc, #88]	; (8014f84 <_ZN8touchgfx16RadioButtonGroupILt1EEC1Ev+0x74>)
 8014f2c:	f107 0308 	add.w	r3, r7, #8
 8014f30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f34:	e883 0003 	stmia.w	r3, {r0, r1}
 8014f38:	f107 0308 	add.w	r3, r7, #8
 8014f3c:	cb0c      	ldmia	r3, {r2, r3}
 8014f3e:	6879      	ldr	r1, [r7, #4]
 8014f40:	4620      	mov	r0, r4
 8014f42:	f000 f91d 	bl	8015180 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvEC1EPS2_MS2_FvS5_E>
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	f103 041c 	add.w	r4, r3, #28
 8014f4c:	4a0e      	ldr	r2, [pc, #56]	; (8014f88 <_ZN8touchgfx16RadioButtonGroupILt1EEC1Ev+0x78>)
 8014f4e:	f107 0310 	add.w	r3, r7, #16
 8014f52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f56:	e883 0003 	stmia.w	r3, {r0, r1}
 8014f5a:	f107 0310 	add.w	r3, r7, #16
 8014f5e:	cb0c      	ldmia	r3, {r2, r3}
 8014f60:	6879      	ldr	r1, [r7, #4]
 8014f62:	4620      	mov	r0, r4
 8014f64:	f000 f90c 	bl	8015180 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvEC1EPS2_MS2_FvS5_E>
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	2200      	movs	r2, #0
 8014f6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	2200      	movs	r2, #0
 8014f72:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	4618      	mov	r0, r3
 8014f78:	371c      	adds	r7, #28
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	bd90      	pop	{r4, r7, pc}
 8014f7e:	bf00      	nop
 8014f80:	0802bf10 	.word	0x0802bf10
 8014f84:	0802b234 	.word	0x0802b234
 8014f88:	0802b23c 	.word	0x0802b23c

08014f8c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8014f8c:	b480      	push	{r7}
 8014f8e:	b083      	sub	sp, #12
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	6078      	str	r0, [r7, #4]
 8014f94:	4a04      	ldr	r2, [pc, #16]	; (8014fa8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	601a      	str	r2, [r3, #0]
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	370c      	adds	r7, #12
 8014fa0:	46bd      	mov	sp, r7
 8014fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa6:	4770      	bx	lr
 8014fa8:	0802bf90 	.word	0x0802bf90

08014fac <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8014fac:	b580      	push	{r7, lr}
 8014fae:	b084      	sub	sp, #16
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	60f8      	str	r0, [r7, #12]
 8014fb4:	60b9      	str	r1, [r7, #8]
 8014fb6:	4639      	mov	r1, r7
 8014fb8:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	f7ff ffe4 	bl	8014f8c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8014fc4:	4a08      	ldr	r2, [pc, #32]	; (8014fe8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	601a      	str	r2, [r3, #0]
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	68ba      	ldr	r2, [r7, #8]
 8014fce:	605a      	str	r2, [r3, #4]
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	3308      	adds	r3, #8
 8014fd4:	463a      	mov	r2, r7
 8014fd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014fda:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	3710      	adds	r7, #16
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd80      	pop	{r7, pc}
 8014fe8:	0802bef8 	.word	0x0802bef8

08014fec <_ZN8touchgfx16RadioButtonGroupILt1EE3addERNS_11RadioButtonE>:
     * Add the RadioButton to the RadioButtonGroup. Adding more radio buttons than the
     * \a CAPACITY of the RadioButtonGroup raises an assert.
     *
     * @param [in] radioButton The RadioButton to add.
     */
    virtual void add(RadioButton& radioButton)
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b082      	sub	sp, #8
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
 8014ff4:	6039      	str	r1, [r7, #0]
    {
        assert(size < CAPACITY && "RadioButtonGroup capacity exceeded!");
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	891b      	ldrh	r3, [r3, #8]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d005      	beq.n	801500a <_ZN8touchgfx16RadioButtonGroupILt1EE3addERNS_11RadioButtonE+0x1e>
 8014ffe:	4b11      	ldr	r3, [pc, #68]	; (8015044 <_ZN8touchgfx16RadioButtonGroupILt1EE3addERNS_11RadioButtonE+0x58>)
 8015000:	4a11      	ldr	r2, [pc, #68]	; (8015048 <_ZN8touchgfx16RadioButtonGroupILt1EE3addERNS_11RadioButtonE+0x5c>)
 8015002:	2141      	movs	r1, #65	; 0x41
 8015004:	4811      	ldr	r0, [pc, #68]	; (801504c <_ZN8touchgfx16RadioButtonGroupILt1EE3addERNS_11RadioButtonE+0x60>)
 8015006:	f014 fc0b 	bl	8029820 <__assert_func>
        radioButton.setAction(radioButtonClicked);
 801500a:	683a      	ldr	r2, [r7, #0]
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	330c      	adds	r3, #12
 8015010:	4619      	mov	r1, r3
 8015012:	4610      	mov	r0, r2
 8015014:	f7ff fa2c 	bl	8014470 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>
        radioButton.setDeselectedAction(radioButtonUnselected);
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	331c      	adds	r3, #28
 801501c:	4619      	mov	r1, r3
 801501e:	6838      	ldr	r0, [r7, #0]
 8015020:	f7ff facc 	bl	80145bc <_ZN8touchgfx11RadioButton19setDeselectedActionERNS_15GenericCallbackIRKNS_14AbstractButtonEvvEE>
        radioButtons[size++] = &radioButton;
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	891b      	ldrh	r3, [r3, #8]
 8015028:	1c5a      	adds	r2, r3, #1
 801502a:	b291      	uxth	r1, r2
 801502c:	687a      	ldr	r2, [r7, #4]
 801502e:	8111      	strh	r1, [r2, #8]
 8015030:	687a      	ldr	r2, [r7, #4]
 8015032:	009b      	lsls	r3, r3, #2
 8015034:	4413      	add	r3, r2
 8015036:	683a      	ldr	r2, [r7, #0]
 8015038:	605a      	str	r2, [r3, #4]
    }
 801503a:	bf00      	nop
 801503c:	3708      	adds	r7, #8
 801503e:	46bd      	mov	sp, r7
 8015040:	bd80      	pop	{r7, pc}
 8015042:	bf00      	nop
 8015044:	0802b244 	.word	0x0802b244
 8015048:	0802b280 	.word	0x0802b280
 801504c:	0802b2f0 	.word	0x0802b2f0

08015050 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8015050:	b480      	push	{r7}
 8015052:	b083      	sub	sp, #12
 8015054:	af00      	add	r7, sp, #0
 8015056:	6078      	str	r0, [r7, #4]
    }
 8015058:	4a04      	ldr	r2, [pc, #16]	; (801506c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	601a      	str	r2, [r3, #0]
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	4618      	mov	r0, r3
 8015062:	370c      	adds	r7, #12
 8015064:	46bd      	mov	sp, r7
 8015066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506a:	4770      	bx	lr
 801506c:	0802bf90 	.word	0x0802bf90

08015070 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8015070:	b580      	push	{r7, lr}
 8015072:	b082      	sub	sp, #8
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
    }
 8015078:	6878      	ldr	r0, [r7, #4]
 801507a:	f7ff ffe9 	bl	8015050 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801507e:	2104      	movs	r1, #4
 8015080:	6878      	ldr	r0, [r7, #4]
 8015082:	f014 fb9e 	bl	80297c2 <_ZdlPvj>
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	4618      	mov	r0, r3
 801508a:	3708      	adds	r7, #8
 801508c:	46bd      	mov	sp, r7
 801508e:	bd80      	pop	{r7, pc}

08015090 <_ZN8touchgfx16RadioButtonGroupILt1EE25radioButtonClickedHandlerERKNS_14AbstractButtonE>:
     * Handles the event that a RadioButton has been selected. deselects all other
     * RadioButtons.
     *
     * @param  radioButton the RadioButton that has been selected.
     */
    virtual void radioButtonClickedHandler(const AbstractButton& radioButton)
 8015090:	b580      	push	{r7, lr}
 8015092:	b084      	sub	sp, #16
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
 8015098:	6039      	str	r1, [r7, #0]
    {
        // Deselect other radio buttons
        for (uint16_t i = 0; i < size; i++)
 801509a:	2300      	movs	r3, #0
 801509c:	81fb      	strh	r3, [r7, #14]
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	891b      	ldrh	r3, [r3, #8]
 80150a2:	89fa      	ldrh	r2, [r7, #14]
 80150a4:	429a      	cmp	r2, r3
 80150a6:	d21f      	bcs.n	80150e8 <_ZN8touchgfx16RadioButtonGroupILt1EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x58>
        {
            if (radioButtons[i] != &radioButton)
 80150a8:	89fb      	ldrh	r3, [r7, #14]
 80150aa:	687a      	ldr	r2, [r7, #4]
 80150ac:	009b      	lsls	r3, r3, #2
 80150ae:	4413      	add	r3, r2
 80150b0:	685b      	ldr	r3, [r3, #4]
 80150b2:	683a      	ldr	r2, [r7, #0]
 80150b4:	429a      	cmp	r2, r3
 80150b6:	d013      	beq.n	80150e0 <_ZN8touchgfx16RadioButtonGroupILt1EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x50>
            {
                if (radioButtons[i]->getSelected())
 80150b8:	89fb      	ldrh	r3, [r7, #14]
 80150ba:	687a      	ldr	r2, [r7, #4]
 80150bc:	009b      	lsls	r3, r3, #2
 80150be:	4413      	add	r3, r2
 80150c0:	685b      	ldr	r3, [r3, #4]
 80150c2:	4618      	mov	r0, r3
 80150c4:	f7ff faa5 	bl	8014612 <_ZNK8touchgfx11RadioButton11getSelectedEv>
 80150c8:	4603      	mov	r3, r0
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d008      	beq.n	80150e0 <_ZN8touchgfx16RadioButtonGroupILt1EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x50>
                {
                    radioButtons[i]->setSelected(false);
 80150ce:	89fb      	ldrh	r3, [r7, #14]
 80150d0:	687a      	ldr	r2, [r7, #4]
 80150d2:	009b      	lsls	r3, r3, #2
 80150d4:	4413      	add	r3, r2
 80150d6:	685b      	ldr	r3, [r3, #4]
 80150d8:	2100      	movs	r1, #0
 80150da:	4618      	mov	r0, r3
 80150dc:	f004 fc8e 	bl	80199fc <_ZN8touchgfx11RadioButton11setSelectedEb>
        for (uint16_t i = 0; i < size; i++)
 80150e0:	89fb      	ldrh	r3, [r7, #14]
 80150e2:	3301      	adds	r3, #1
 80150e4:	81fb      	strh	r3, [r7, #14]
 80150e6:	e7da      	b.n	801509e <_ZN8touchgfx16RadioButtonGroupILt1EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0xe>
                }
            }
        }

        if (radioButtonSelectedCallback && radioButtonSelectedCallback->isValid())
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d00d      	beq.n	801510c <_ZN8touchgfx16RadioButtonGroupILt1EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x7c>
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	330c      	adds	r3, #12
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	4610      	mov	r0, r2
 8015100:	4798      	blx	r3
 8015102:	4603      	mov	r3, r0
 8015104:	2b00      	cmp	r3, #0
 8015106:	d001      	beq.n	801510c <_ZN8touchgfx16RadioButtonGroupILt1EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x7c>
 8015108:	2301      	movs	r3, #1
 801510a:	e000      	b.n	801510e <_ZN8touchgfx16RadioButtonGroupILt1EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x7e>
 801510c:	2300      	movs	r3, #0
 801510e:	2b00      	cmp	r3, #0
 8015110:	d009      	beq.n	8015126 <_ZN8touchgfx16RadioButtonGroupILt1EE25radioButtonClickedHandlerERKNS_14AbstractButtonE+0x96>
        {
            radioButtonSelectedCallback->execute(radioButton);
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	3308      	adds	r3, #8
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	6839      	ldr	r1, [r7, #0]
 8015122:	4610      	mov	r0, r2
 8015124:	4798      	blx	r3
        }
    }
 8015126:	bf00      	nop
 8015128:	3710      	adds	r7, #16
 801512a:	46bd      	mov	sp, r7
 801512c:	bd80      	pop	{r7, pc}

0801512e <_ZN8touchgfx16RadioButtonGroupILt1EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE>:
    /**
     * Handles the event that a RadioButton has been deselected.
     *
     * @param  radioButton the RadioButton that has been deselected.
     */
    virtual void radioButtonDeselectedHandler(const AbstractButton& radioButton)
 801512e:	b580      	push	{r7, lr}
 8015130:	b082      	sub	sp, #8
 8015132:	af00      	add	r7, sp, #0
 8015134:	6078      	str	r0, [r7, #4]
 8015136:	6039      	str	r1, [r7, #0]
    {
        if (radioButtonDeselectedCallback && radioButtonDeselectedCallback->isValid())
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801513c:	2b00      	cmp	r3, #0
 801513e:	d00d      	beq.n	801515c <_ZN8touchgfx16RadioButtonGroupILt1EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x2e>
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	330c      	adds	r3, #12
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	4610      	mov	r0, r2
 8015150:	4798      	blx	r3
 8015152:	4603      	mov	r3, r0
 8015154:	2b00      	cmp	r3, #0
 8015156:	d001      	beq.n	801515c <_ZN8touchgfx16RadioButtonGroupILt1EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x2e>
 8015158:	2301      	movs	r3, #1
 801515a:	e000      	b.n	801515e <_ZN8touchgfx16RadioButtonGroupILt1EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x30>
 801515c:	2300      	movs	r3, #0
 801515e:	2b00      	cmp	r3, #0
 8015160:	d009      	beq.n	8015176 <_ZN8touchgfx16RadioButtonGroupILt1EE28radioButtonDeselectedHandlerERKNS_14AbstractButtonE+0x48>
        {
            radioButtonDeselectedCallback->execute(radioButton);
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	3308      	adds	r3, #8
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	6839      	ldr	r1, [r7, #0]
 8015172:	4610      	mov	r0, r2
 8015174:	4798      	blx	r3
        }
    }
 8015176:	bf00      	nop
 8015178:	3708      	adds	r7, #8
 801517a:	46bd      	mov	sp, r7
 801517c:	bd80      	pop	{r7, pc}
	...

08015180 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvEC1EPS2_MS2_FvS5_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8015180:	b580      	push	{r7, lr}
 8015182:	b084      	sub	sp, #16
 8015184:	af00      	add	r7, sp, #0
 8015186:	60f8      	str	r0, [r7, #12]
 8015188:	60b9      	str	r1, [r7, #8]
 801518a:	4639      	mov	r1, r7
 801518c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	4618      	mov	r0, r3
 8015194:	f7ff fefa 	bl	8014f8c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8015198:	4a08      	ldr	r2, [pc, #32]	; (80151bc <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvEC1EPS2_MS2_FvS5_E+0x3c>)
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	601a      	str	r2, [r3, #0]
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	68ba      	ldr	r2, [r7, #8]
 80151a2:	605a      	str	r2, [r3, #4]
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	3308      	adds	r3, #8
 80151a8:	463a      	mov	r2, r7
 80151aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80151ae:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	4618      	mov	r0, r3
 80151b6:	3710      	adds	r7, #16
 80151b8:	46bd      	mov	sp, r7
 80151ba:	bd80      	pop	{r7, pc}
 80151bc:	0802bf44 	.word	0x0802bf44

080151c0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b082      	sub	sp, #8
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
 80151c8:	4a05      	ldr	r2, [pc, #20]	; (80151e0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	601a      	str	r2, [r3, #0]
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	4618      	mov	r0, r3
 80151d2:	f7ff ff3d 	bl	8015050 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	4618      	mov	r0, r3
 80151da:	3708      	adds	r7, #8
 80151dc:	46bd      	mov	sp, r7
 80151de:	bd80      	pop	{r7, pc}
 80151e0:	0802bef8 	.word	0x0802bef8

080151e4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b082      	sub	sp, #8
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
 80151ec:	6878      	ldr	r0, [r7, #4]
 80151ee:	f7ff ffe7 	bl	80151c0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80151f2:	2110      	movs	r1, #16
 80151f4:	6878      	ldr	r0, [r7, #4]
 80151f6:	f014 fae4 	bl	80297c2 <_ZdlPvj>
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	4618      	mov	r0, r3
 80151fe:	3708      	adds	r7, #8
 8015200:	46bd      	mov	sp, r7
 8015202:	bd80      	pop	{r7, pc}

08015204 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 8015204:	b580      	push	{r7, lr}
 8015206:	b082      	sub	sp, #8
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
 801520c:	4a05      	ldr	r2, [pc, #20]	; (8015224 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	601a      	str	r2, [r3, #0]
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	4618      	mov	r0, r3
 8015216:	f7fd fa09 	bl	801262c <_ZN8touchgfx8DrawableD1Ev>
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	4618      	mov	r0, r3
 801521e:	3708      	adds	r7, #8
 8015220:	46bd      	mov	sp, r7
 8015222:	bd80      	pop	{r7, pc}
 8015224:	0802c5f4 	.word	0x0802c5f4

08015228 <_ZN8touchgfx9ContainerD0Ev>:
 8015228:	b580      	push	{r7, lr}
 801522a:	b082      	sub	sp, #8
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
 8015230:	6878      	ldr	r0, [r7, #4]
 8015232:	f7ff ffe7 	bl	8015204 <_ZN8touchgfx9ContainerD1Ev>
 8015236:	212c      	movs	r1, #44	; 0x2c
 8015238:	6878      	ldr	r0, [r7, #4]
 801523a:	f014 fac2 	bl	80297c2 <_ZdlPvj>
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	4618      	mov	r0, r3
 8015242:	3708      	adds	r7, #8
 8015244:	46bd      	mov	sp, r7
 8015246:	bd80      	pop	{r7, pc}

08015248 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 8015248:	b580      	push	{r7, lr}
 801524a:	b082      	sub	sp, #8
 801524c:	af00      	add	r7, sp, #0
 801524e:	6078      	str	r0, [r7, #4]
 8015250:	4a05      	ldr	r2, [pc, #20]	; (8015268 <_ZN8touchgfx3BoxD1Ev+0x20>)
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	601a      	str	r2, [r3, #0]
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	4618      	mov	r0, r3
 801525a:	f7fd fd59 	bl	8012d10 <_ZN8touchgfx6WidgetD1Ev>
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	4618      	mov	r0, r3
 8015262:	3708      	adds	r7, #8
 8015264:	46bd      	mov	sp, r7
 8015266:	bd80      	pop	{r7, pc}
 8015268:	0802c8c0 	.word	0x0802c8c0

0801526c <_ZN8touchgfx3BoxD0Ev>:
 801526c:	b580      	push	{r7, lr}
 801526e:	b082      	sub	sp, #8
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
 8015274:	6878      	ldr	r0, [r7, #4]
 8015276:	f7ff ffe7 	bl	8015248 <_ZN8touchgfx3BoxD1Ev>
 801527a:	212c      	movs	r1, #44	; 0x2c
 801527c:	6878      	ldr	r0, [r7, #4]
 801527e:	f014 faa0 	bl	80297c2 <_ZdlPvj>
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	4618      	mov	r0, r3
 8015286:	3708      	adds	r7, #8
 8015288:	46bd      	mov	sp, r7
 801528a:	bd80      	pop	{r7, pc}

0801528c <_ZN8touchgfx12ToggleButtonD1Ev>:
 801528c:	b580      	push	{r7, lr}
 801528e:	b082      	sub	sp, #8
 8015290:	af00      	add	r7, sp, #0
 8015292:	6078      	str	r0, [r7, #4]
 8015294:	4a05      	ldr	r2, [pc, #20]	; (80152ac <_ZN8touchgfx12ToggleButtonD1Ev+0x20>)
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	601a      	str	r2, [r3, #0]
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	4618      	mov	r0, r3
 801529e:	f7ff fb6b 	bl	8014978 <_ZN8touchgfx6ButtonD1Ev>
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	4618      	mov	r0, r3
 80152a6:	3708      	adds	r7, #8
 80152a8:	46bd      	mov	sp, r7
 80152aa:	bd80      	pop	{r7, pc}
 80152ac:	0802c84c 	.word	0x0802c84c

080152b0 <_ZN8touchgfx12ToggleButtonD0Ev>:
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b082      	sub	sp, #8
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
 80152b8:	6878      	ldr	r0, [r7, #4]
 80152ba:	f7ff ffe7 	bl	801528c <_ZN8touchgfx12ToggleButtonD1Ev>
 80152be:	2138      	movs	r1, #56	; 0x38
 80152c0:	6878      	ldr	r0, [r7, #4]
 80152c2:	f014 fa7e 	bl	80297c2 <_ZdlPvj>
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	4618      	mov	r0, r3
 80152ca:	3708      	adds	r7, #8
 80152cc:	46bd      	mov	sp, r7
 80152ce:	bd80      	pop	{r7, pc}

080152d0 <_ZN8touchgfx11RadioButtonD1Ev>:
class RadioButton : public AbstractButton
 80152d0:	b580      	push	{r7, lr}
 80152d2:	b082      	sub	sp, #8
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
 80152d8:	4a05      	ldr	r2, [pc, #20]	; (80152f0 <_ZN8touchgfx11RadioButtonD1Ev+0x20>)
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	601a      	str	r2, [r3, #0]
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	4618      	mov	r0, r3
 80152e2:	f7ff f8d3 	bl	801448c <_ZN8touchgfx14AbstractButtonD1Ev>
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	4618      	mov	r0, r3
 80152ea:	3708      	adds	r7, #8
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bd80      	pop	{r7, pc}
 80152f0:	0802ca7c 	.word	0x0802ca7c

080152f4 <_ZN8touchgfx11RadioButtonD0Ev>:
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b082      	sub	sp, #8
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
 80152fc:	6878      	ldr	r0, [r7, #4]
 80152fe:	f7ff ffe7 	bl	80152d0 <_ZN8touchgfx11RadioButtonD1Ev>
 8015302:	2140      	movs	r1, #64	; 0x40
 8015304:	6878      	ldr	r0, [r7, #4]
 8015306:	f014 fa5c 	bl	80297c2 <_ZdlPvj>
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	4618      	mov	r0, r3
 801530e:	3708      	adds	r7, #8
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}

08015314 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 8015314:	b580      	push	{r7, lr}
 8015316:	b082      	sub	sp, #8
 8015318:	af00      	add	r7, sp, #0
 801531a:	6078      	str	r0, [r7, #4]
 801531c:	4a08      	ldr	r2, [pc, #32]	; (8015340 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x2c>)
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	601a      	str	r2, [r3, #0]
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	3334      	adds	r3, #52	; 0x34
 8015326:	4618      	mov	r0, r3
 8015328:	f7fc fee6 	bl	80120f8 <_ZN8touchgfx9TypedTextD1Ev>
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	4618      	mov	r0, r3
 8015330:	f7ff fb22 	bl	8014978 <_ZN8touchgfx6ButtonD1Ev>
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	4618      	mov	r0, r3
 8015338:	3708      	adds	r7, #8
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}
 801533e:	bf00      	nop
 8015340:	0802ca08 	.word	0x0802ca08

08015344 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 8015344:	b580      	push	{r7, lr}
 8015346:	b082      	sub	sp, #8
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
 801534c:	6878      	ldr	r0, [r7, #4]
 801534e:	f7ff ffe1 	bl	8015314 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 8015352:	2148      	movs	r1, #72	; 0x48
 8015354:	6878      	ldr	r0, [r7, #4]
 8015356:	f014 fa34 	bl	80297c2 <_ZdlPvj>
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	4618      	mov	r0, r3
 801535e:	3708      	adds	r7, #8
 8015360:	46bd      	mov	sp, r7
 8015362:	bd80      	pop	{r7, pc}

08015364 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 8015364:	b580      	push	{r7, lr}
 8015366:	b082      	sub	sp, #8
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
 801536c:	4a05      	ldr	r2, [pc, #20]	; (8015384 <_ZN8touchgfx5ImageD1Ev+0x20>)
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	601a      	str	r2, [r3, #0]
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	4618      	mov	r0, r3
 8015376:	f7fd fccb 	bl	8012d10 <_ZN8touchgfx6WidgetD1Ev>
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	4618      	mov	r0, r3
 801537e:	3708      	adds	r7, #8
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}
 8015384:	0802c99c 	.word	0x0802c99c

08015388 <_ZN8touchgfx5ImageD0Ev>:
 8015388:	b580      	push	{r7, lr}
 801538a:	b082      	sub	sp, #8
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
 8015390:	6878      	ldr	r0, [r7, #4]
 8015392:	f7ff ffe7 	bl	8015364 <_ZN8touchgfx5ImageD1Ev>
 8015396:	212c      	movs	r1, #44	; 0x2c
 8015398:	6878      	ldr	r0, [r7, #4]
 801539a:	f014 fa12 	bl	80297c2 <_ZdlPvj>
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	4618      	mov	r0, r3
 80153a2:	3708      	adds	r7, #8
 80153a4:	46bd      	mov	sp, r7
 80153a6:	bd80      	pop	{r7, pc}

080153a8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b082      	sub	sp, #8
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
 80153b0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	685b      	ldr	r3, [r3, #4]
 80153b6:	687a      	ldr	r2, [r7, #4]
 80153b8:	68d2      	ldr	r2, [r2, #12]
 80153ba:	1052      	asrs	r2, r2, #1
 80153bc:	1898      	adds	r0, r3, r2
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	68db      	ldr	r3, [r3, #12]
 80153c2:	f003 0301 	and.w	r3, r3, #1
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d102      	bne.n	80153d0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	689b      	ldr	r3, [r3, #8]
 80153ce:	e00a      	b.n	80153e6 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	685b      	ldr	r3, [r3, #4]
 80153d4:	687a      	ldr	r2, [r7, #4]
 80153d6:	68d2      	ldr	r2, [r2, #12]
 80153d8:	1052      	asrs	r2, r2, #1
 80153da:	4413      	add	r3, r2
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	687a      	ldr	r2, [r7, #4]
 80153e0:	6892      	ldr	r2, [r2, #8]
 80153e2:	4413      	add	r3, r2
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	6839      	ldr	r1, [r7, #0]
 80153e8:	4798      	blx	r3
    }
 80153ea:	bf00      	nop
 80153ec:	3708      	adds	r7, #8
 80153ee:	46bd      	mov	sp, r7
 80153f0:	bd80      	pop	{r7, pc}

080153f2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80153f2:	b480      	push	{r7}
 80153f4:	b083      	sub	sp, #12
 80153f6:	af00      	add	r7, sp, #0
 80153f8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	685b      	ldr	r3, [r3, #4]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d010      	beq.n	8015424 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	689b      	ldr	r3, [r3, #8]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d107      	bne.n	801541a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	68db      	ldr	r3, [r3, #12]
 801540e:	f003 0301 	and.w	r3, r3, #1
 8015412:	2b00      	cmp	r3, #0
 8015414:	d101      	bne.n	801541a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8015416:	2301      	movs	r3, #1
 8015418:	e000      	b.n	801541c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801541a:	2300      	movs	r3, #0
 801541c:	2b01      	cmp	r3, #1
 801541e:	d001      	beq.n	8015424 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8015420:	2301      	movs	r3, #1
 8015422:	e000      	b.n	8015426 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8015424:	2300      	movs	r3, #0
    }
 8015426:	4618      	mov	r0, r3
 8015428:	370c      	adds	r7, #12
 801542a:	46bd      	mov	sp, r7
 801542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015430:	4770      	bx	lr

08015432 <_ZNK8touchgfx16RadioButtonGroupILt1EE14getRadioButtonEt>:
    virtual RadioButton* getRadioButton(uint16_t index) const
 8015432:	b480      	push	{r7}
 8015434:	b083      	sub	sp, #12
 8015436:	af00      	add	r7, sp, #0
 8015438:	6078      	str	r0, [r7, #4]
 801543a:	460b      	mov	r3, r1
 801543c:	807b      	strh	r3, [r7, #2]
        return (size > index) ? radioButtons[index] : 0;
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	891b      	ldrh	r3, [r3, #8]
 8015442:	887a      	ldrh	r2, [r7, #2]
 8015444:	429a      	cmp	r2, r3
 8015446:	d205      	bcs.n	8015454 <_ZNK8touchgfx16RadioButtonGroupILt1EE14getRadioButtonEt+0x22>
 8015448:	887b      	ldrh	r3, [r7, #2]
 801544a:	687a      	ldr	r2, [r7, #4]
 801544c:	009b      	lsls	r3, r3, #2
 801544e:	4413      	add	r3, r2
 8015450:	685b      	ldr	r3, [r3, #4]
 8015452:	e000      	b.n	8015456 <_ZNK8touchgfx16RadioButtonGroupILt1EE14getRadioButtonEt+0x24>
 8015454:	2300      	movs	r3, #0
    }
 8015456:	4618      	mov	r0, r3
 8015458:	370c      	adds	r7, #12
 801545a:	46bd      	mov	sp, r7
 801545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015460:	4770      	bx	lr

08015462 <_ZNK8touchgfx16RadioButtonGroupILt1EE27getSelectedRadioButtonIndexEv>:
    virtual int32_t getSelectedRadioButtonIndex() const
 8015462:	b580      	push	{r7, lr}
 8015464:	b084      	sub	sp, #16
 8015466:	af00      	add	r7, sp, #0
 8015468:	6078      	str	r0, [r7, #4]
        for (uint16_t i = 0; i < size; i++)
 801546a:	2300      	movs	r3, #0
 801546c:	81fb      	strh	r3, [r7, #14]
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	891b      	ldrh	r3, [r3, #8]
 8015472:	89fa      	ldrh	r2, [r7, #14]
 8015474:	429a      	cmp	r2, r3
 8015476:	d210      	bcs.n	801549a <_ZNK8touchgfx16RadioButtonGroupILt1EE27getSelectedRadioButtonIndexEv+0x38>
            if (radioButtons[i]->getSelected())
 8015478:	89fb      	ldrh	r3, [r7, #14]
 801547a:	687a      	ldr	r2, [r7, #4]
 801547c:	009b      	lsls	r3, r3, #2
 801547e:	4413      	add	r3, r2
 8015480:	685b      	ldr	r3, [r3, #4]
 8015482:	4618      	mov	r0, r3
 8015484:	f7ff f8c5 	bl	8014612 <_ZNK8touchgfx11RadioButton11getSelectedEv>
 8015488:	4603      	mov	r3, r0
 801548a:	2b00      	cmp	r3, #0
 801548c:	d001      	beq.n	8015492 <_ZNK8touchgfx16RadioButtonGroupILt1EE27getSelectedRadioButtonIndexEv+0x30>
                return i;
 801548e:	89fb      	ldrh	r3, [r7, #14]
 8015490:	e005      	b.n	801549e <_ZNK8touchgfx16RadioButtonGroupILt1EE27getSelectedRadioButtonIndexEv+0x3c>
        for (uint16_t i = 0; i < size; i++)
 8015492:	89fb      	ldrh	r3, [r7, #14]
 8015494:	3301      	adds	r3, #1
 8015496:	81fb      	strh	r3, [r7, #14]
 8015498:	e7e9      	b.n	801546e <_ZNK8touchgfx16RadioButtonGroupILt1EE27getSelectedRadioButtonIndexEv+0xc>
        return -1;
 801549a:	f04f 33ff 	mov.w	r3, #4294967295
    }
 801549e:	4618      	mov	r0, r3
 80154a0:	3710      	adds	r7, #16
 80154a2:	46bd      	mov	sp, r7
 80154a4:	bd80      	pop	{r7, pc}

080154a6 <_ZNK8touchgfx16RadioButtonGroupILt1EE22getSelectedRadioButtonEv>:
    virtual RadioButton* getSelectedRadioButton() const
 80154a6:	b580      	push	{r7, lr}
 80154a8:	b084      	sub	sp, #16
 80154aa:	af00      	add	r7, sp, #0
 80154ac:	6078      	str	r0, [r7, #4]
        int32_t index = getSelectedRadioButtonIndex();
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	3310      	adds	r3, #16
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	6878      	ldr	r0, [r7, #4]
 80154b8:	4798      	blx	r3
 80154ba:	60f8      	str	r0, [r7, #12]
        return (index < 0) ? 0 : getRadioButton(index);
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	db0a      	blt.n	80154d8 <_ZNK8touchgfx16RadioButtonGroupILt1EE22getSelectedRadioButtonEv+0x32>
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	330c      	adds	r3, #12
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	68fa      	ldr	r2, [r7, #12]
 80154cc:	b292      	uxth	r2, r2
 80154ce:	4611      	mov	r1, r2
 80154d0:	6878      	ldr	r0, [r7, #4]
 80154d2:	4798      	blx	r3
 80154d4:	4603      	mov	r3, r0
 80154d6:	e000      	b.n	80154da <_ZNK8touchgfx16RadioButtonGroupILt1EE22getSelectedRadioButtonEv+0x34>
 80154d8:	2300      	movs	r3, #0
    }
 80154da:	4618      	mov	r0, r3
 80154dc:	3710      	adds	r7, #16
 80154de:	46bd      	mov	sp, r7
 80154e0:	bd80      	pop	{r7, pc}

080154e2 <_ZN8touchgfx16RadioButtonGroupILt1EE11setSelectedERNS_11RadioButtonE>:
    virtual void setSelected(RadioButton& radioButton)
 80154e2:	b580      	push	{r7, lr}
 80154e4:	b082      	sub	sp, #8
 80154e6:	af00      	add	r7, sp, #0
 80154e8:	6078      	str	r0, [r7, #4]
 80154ea:	6039      	str	r1, [r7, #0]
        radioButton.setSelected(true);
 80154ec:	2101      	movs	r1, #1
 80154ee:	6838      	ldr	r0, [r7, #0]
 80154f0:	f004 fa84 	bl	80199fc <_ZN8touchgfx11RadioButton11setSelectedEb>
        radioButtonClickedHandler(radioButton);
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	3324      	adds	r3, #36	; 0x24
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	683a      	ldr	r2, [r7, #0]
 80154fe:	4611      	mov	r1, r2
 8015500:	6878      	ldr	r0, [r7, #4]
 8015502:	4798      	blx	r3
    }
 8015504:	bf00      	nop
 8015506:	3708      	adds	r7, #8
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}

0801550c <_ZN8touchgfx16RadioButtonGroupILt1EE21setDeselectionEnabledEb>:
    virtual void setDeselectionEnabled(bool deselectionEnabled)
 801550c:	b580      	push	{r7, lr}
 801550e:	b084      	sub	sp, #16
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
 8015514:	460b      	mov	r3, r1
 8015516:	70fb      	strb	r3, [r7, #3]
        for (uint16_t i = 0; i < size; i++)
 8015518:	2300      	movs	r3, #0
 801551a:	81fb      	strh	r3, [r7, #14]
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	891b      	ldrh	r3, [r3, #8]
 8015520:	89fa      	ldrh	r2, [r7, #14]
 8015522:	429a      	cmp	r2, r3
 8015524:	d20d      	bcs.n	8015542 <_ZN8touchgfx16RadioButtonGroupILt1EE21setDeselectionEnabledEb+0x36>
            radioButtons[i]->setDeselectionEnabled(deselectionEnabled);
 8015526:	89fb      	ldrh	r3, [r7, #14]
 8015528:	687a      	ldr	r2, [r7, #4]
 801552a:	009b      	lsls	r3, r3, #2
 801552c:	4413      	add	r3, r2
 801552e:	685b      	ldr	r3, [r3, #4]
 8015530:	78fa      	ldrb	r2, [r7, #3]
 8015532:	4611      	mov	r1, r2
 8015534:	4618      	mov	r0, r3
 8015536:	f7ff f84f 	bl	80145d8 <_ZN8touchgfx11RadioButton21setDeselectionEnabledEb>
        for (uint16_t i = 0; i < size; i++)
 801553a:	89fb      	ldrh	r3, [r7, #14]
 801553c:	3301      	adds	r3, #1
 801553e:	81fb      	strh	r3, [r7, #14]
 8015540:	e7ec      	b.n	801551c <_ZN8touchgfx16RadioButtonGroupILt1EE21setDeselectionEnabledEb+0x10>
    }
 8015542:	bf00      	nop
 8015544:	3710      	adds	r7, #16
 8015546:	46bd      	mov	sp, r7
 8015548:	bd80      	pop	{r7, pc}

0801554a <_ZNK8touchgfx16RadioButtonGroupILt1EE21getDeselectionEnabledEv>:
    virtual bool getDeselectionEnabled() const
 801554a:	b580      	push	{r7, lr}
 801554c:	b082      	sub	sp, #8
 801554e:	af00      	add	r7, sp, #0
 8015550:	6078      	str	r0, [r7, #4]
        return (size > 0) ? radioButtons[0]->getDeselectionEnabled() : false;
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	891b      	ldrh	r3, [r3, #8]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d009      	beq.n	801556e <_ZNK8touchgfx16RadioButtonGroupILt1EE21getDeselectionEnabledEv+0x24>
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	685b      	ldr	r3, [r3, #4]
 801555e:	4618      	mov	r0, r3
 8015560:	f7ff f84a 	bl	80145f8 <_ZNK8touchgfx11RadioButton21getDeselectionEnabledEv>
 8015564:	4603      	mov	r3, r0
 8015566:	2b00      	cmp	r3, #0
 8015568:	d001      	beq.n	801556e <_ZNK8touchgfx16RadioButtonGroupILt1EE21getDeselectionEnabledEv+0x24>
 801556a:	2301      	movs	r3, #1
 801556c:	e000      	b.n	8015570 <_ZNK8touchgfx16RadioButtonGroupILt1EE21getDeselectionEnabledEv+0x26>
 801556e:	2300      	movs	r3, #0
    }
 8015570:	4618      	mov	r0, r3
 8015572:	3708      	adds	r7, #8
 8015574:	46bd      	mov	sp, r7
 8015576:	bd80      	pop	{r7, pc}

08015578 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvE7executeES5_>:
    virtual void execute(T1 t1)
 8015578:	b580      	push	{r7, lr}
 801557a:	b082      	sub	sp, #8
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
 8015580:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	685b      	ldr	r3, [r3, #4]
 8015586:	687a      	ldr	r2, [r7, #4]
 8015588:	68d2      	ldr	r2, [r2, #12]
 801558a:	1052      	asrs	r2, r2, #1
 801558c:	1898      	adds	r0, r3, r2
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	68db      	ldr	r3, [r3, #12]
 8015592:	f003 0301 	and.w	r3, r3, #1
 8015596:	2b00      	cmp	r3, #0
 8015598:	d102      	bne.n	80155a0 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvE7executeES5_+0x28>
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	689b      	ldr	r3, [r3, #8]
 801559e:	e00a      	b.n	80155b6 <_ZN8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvE7executeES5_+0x3e>
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	685b      	ldr	r3, [r3, #4]
 80155a4:	687a      	ldr	r2, [r7, #4]
 80155a6:	68d2      	ldr	r2, [r2, #12]
 80155a8:	1052      	asrs	r2, r2, #1
 80155aa:	4413      	add	r3, r2
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	687a      	ldr	r2, [r7, #4]
 80155b0:	6892      	ldr	r2, [r2, #8]
 80155b2:	4413      	add	r3, r2
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	6839      	ldr	r1, [r7, #0]
 80155b8:	4798      	blx	r3
    }
 80155ba:	bf00      	nop
 80155bc:	3708      	adds	r7, #8
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}

080155c2 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80155c2:	b480      	push	{r7}
 80155c4:	b083      	sub	sp, #12
 80155c6:	af00      	add	r7, sp, #0
 80155c8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	685b      	ldr	r3, [r3, #4]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d010      	beq.n	80155f4 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	689b      	ldr	r3, [r3, #8]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d107      	bne.n	80155ea <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	68db      	ldr	r3, [r3, #12]
 80155de:	f003 0301 	and.w	r3, r3, #1
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d101      	bne.n	80155ea <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvE7isValidEv+0x28>
 80155e6:	2301      	movs	r3, #1
 80155e8:	e000      	b.n	80155ec <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 80155ea:	2300      	movs	r3, #0
 80155ec:	2b01      	cmp	r3, #1
 80155ee:	d001      	beq.n	80155f4 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvE7isValidEv+0x32>
 80155f0:	2301      	movs	r3, #1
 80155f2:	e000      	b.n	80155f6 <_ZNK8touchgfx8CallbackINS_16RadioButtonGroupILt1EEERKNS_14AbstractButtonEvvE7isValidEv+0x34>
 80155f4:	2300      	movs	r3, #0
    }
 80155f6:	4618      	mov	r0, r3
 80155f8:	370c      	adds	r7, #12
 80155fa:	46bd      	mov	sp, r7
 80155fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015600:	4770      	bx	lr
	...

08015604 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 8015604:	b580      	push	{r7, lr}
 8015606:	b082      	sub	sp, #8
 8015608:	af00      	add	r7, sp, #0
 801560a:	6078      	str	r0, [r7, #4]
 801560c:	4a05      	ldr	r2, [pc, #20]	; (8015624 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	601a      	str	r2, [r3, #0]
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	4618      	mov	r0, r3
 8015616:	f7fe fe6b 	bl	80142f0 <_ZN8touchgfx6ScreenD1Ev>
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	4618      	mov	r0, r3
 801561e:	3708      	adds	r7, #8
 8015620:	46bd      	mov	sp, r7
 8015622:	bd80      	pop	{r7, pc}
 8015624:	0802bff4 	.word	0x0802bff4

08015628 <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 8015628:	b580      	push	{r7, lr}
 801562a:	b082      	sub	sp, #8
 801562c:	af00      	add	r7, sp, #0
 801562e:	6078      	str	r0, [r7, #4]
 8015630:	6878      	ldr	r0, [r7, #4]
 8015632:	f7ff ffe7 	bl	8015604 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8015636:	2140      	movs	r1, #64	; 0x40
 8015638:	6878      	ldr	r0, [r7, #4]
 801563a:	f014 f8c2 	bl	80297c2 <_ZdlPvj>
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	4618      	mov	r0, r3
 8015642:	3708      	adds	r7, #8
 8015644:	46bd      	mov	sp, r7
 8015646:	bd80      	pop	{r7, pc}

08015648 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8015648:	b580      	push	{r7, lr}
 801564a:	b082      	sub	sp, #8
 801564c:	af00      	add	r7, sp, #0
 801564e:	6078      	str	r0, [r7, #4]
 8015650:	4a1b      	ldr	r2, [pc, #108]	; (80156c0 <_ZN15Screen2ViewBaseD1Ev+0x78>)
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	601a      	str	r2, [r3, #0]
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801565c:	4618      	mov	r0, r3
 801565e:	f000 fa2b 	bl	8015ab8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015668:	4618      	mov	r0, r3
 801566a:	f7ff fe7b 	bl	8015364 <_ZN8touchgfx5ImageD1Ev>
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8015674:	4618      	mov	r0, r3
 8015676:	f7ff fe75 	bl	8015364 <_ZN8touchgfx5ImageD1Ev>
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	33f8      	adds	r3, #248	; 0xf8
 801567e:	4618      	mov	r0, r3
 8015680:	f7ff fe70 	bl	8015364 <_ZN8touchgfx5ImageD1Ev>
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	33cc      	adds	r3, #204	; 0xcc
 8015688:	4618      	mov	r0, r3
 801568a:	f7ff fe6b 	bl	8015364 <_ZN8touchgfx5ImageD1Ev>
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	3398      	adds	r3, #152	; 0x98
 8015692:	4618      	mov	r0, r3
 8015694:	f7ff f970 	bl	8014978 <_ZN8touchgfx6ButtonD1Ev>
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	336c      	adds	r3, #108	; 0x6c
 801569c:	4618      	mov	r0, r3
 801569e:	f7ff fdd3 	bl	8015248 <_ZN8touchgfx3BoxD1Ev>
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	3340      	adds	r3, #64	; 0x40
 80156a6:	4618      	mov	r0, r3
 80156a8:	f7ff fdce 	bl	8015248 <_ZN8touchgfx3BoxD1Ev>
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	4618      	mov	r0, r3
 80156b0:	f7ff ffa8 	bl	8015604 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	4618      	mov	r0, r3
 80156b8:	3708      	adds	r7, #8
 80156ba:	46bd      	mov	sp, r7
 80156bc:	bd80      	pop	{r7, pc}
 80156be:	bf00      	nop
 80156c0:	0802bfa8 	.word	0x0802bfa8

080156c4 <_ZN15Screen2ViewBaseD0Ev>:
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b082      	sub	sp, #8
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
 80156cc:	6878      	ldr	r0, [r7, #4]
 80156ce:	f7ff ffbb 	bl	8015648 <_ZN15Screen2ViewBaseD1Ev>
 80156d2:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80156d6:	6878      	ldr	r0, [r7, #4]
 80156d8:	f014 f873 	bl	80297c2 <_ZdlPvj>
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	4618      	mov	r0, r3
 80156e0:	3708      	adds	r7, #8
 80156e2:	46bd      	mov	sp, r7
 80156e4:	bd80      	pop	{r7, pc}

080156e6 <_ZN15Screen2ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80156e6:	b580      	push	{r7, lr}
 80156e8:	b082      	sub	sp, #8
 80156ea:	af00      	add	r7, sp, #0
 80156ec:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 80156ee:	f005 fe8d 	bl	801b40c <_ZN8touchgfx11Application11getInstanceEv>
 80156f2:	4603      	mov	r3, r0
    }
 80156f4:	4618      	mov	r0, r3
 80156f6:	3708      	adds	r7, #8
 80156f8:	46bd      	mov	sp, r7
 80156fa:	bd80      	pop	{r7, pc}

080156fc <_ZN15Screen2ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>

Screen2ViewBase::Screen2ViewBase() :
 80156fc:	b590      	push	{r4, r7, lr}
 80156fe:	b095      	sub	sp, #84	; 0x54
 8015700:	af02      	add	r7, sp, #8
 8015702:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	4618      	mov	r0, r3
 8015708:	f000 f9a0 	bl	8015a4c <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 801570c:	4abd      	ldr	r2, [pc, #756]	; (8015a04 <_ZN15Screen2ViewBaseC1Ev+0x308>)
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	601a      	str	r2, [r3, #0]
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	3340      	adds	r3, #64	; 0x40
 8015716:	4618      	mov	r0, r3
 8015718:	f7fe fe52 	bl	80143c0 <_ZN8touchgfx3BoxC1Ev>
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	336c      	adds	r3, #108	; 0x6c
 8015720:	4618      	mov	r0, r3
 8015722:	f7fe fe4d 	bl	80143c0 <_ZN8touchgfx3BoxC1Ev>
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	3398      	adds	r3, #152	; 0x98
 801572a:	4618      	mov	r0, r3
 801572c:	f7fe fed0 	bl	80144d0 <_ZN8touchgfx6ButtonC1Ev>
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 8015736:	f107 0308 	add.w	r3, r7, #8
 801573a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801573e:	4618      	mov	r0, r3
 8015740:	f7fe fdb6 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8015744:	f107 0308 	add.w	r3, r7, #8
 8015748:	4619      	mov	r1, r3
 801574a:	4620      	mov	r0, r4
 801574c:	f7ff f86c 	bl	8014828 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	f103 04f8 	add.w	r4, r3, #248	; 0xf8
 8015756:	f107 030c 	add.w	r3, r7, #12
 801575a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801575e:	4618      	mov	r0, r3
 8015760:	f7fe fda6 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8015764:	f107 030c 	add.w	r3, r7, #12
 8015768:	4619      	mov	r1, r3
 801576a:	4620      	mov	r0, r4
 801576c:	f7ff f85c 	bl	8014828 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	f503 7492 	add.w	r4, r3, #292	; 0x124
 8015776:	f107 0310 	add.w	r3, r7, #16
 801577a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801577e:	4618      	mov	r0, r3
 8015780:	f7fe fd96 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8015784:	f107 0310 	add.w	r3, r7, #16
 8015788:	4619      	mov	r1, r3
 801578a:	4620      	mov	r0, r4
 801578c:	f7ff f84c 	bl	8014828 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 8015796:	f107 0314 	add.w	r3, r7, #20
 801579a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801579e:	4618      	mov	r0, r3
 80157a0:	f7fe fd86 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 80157a4:	f107 0314 	add.w	r3, r7, #20
 80157a8:	4619      	mov	r1, r3
 80157aa:	4620      	mov	r0, r4
 80157ac:	f7ff f83c 	bl	8014828 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	f503 70be 	add.w	r0, r3, #380	; 0x17c
 80157b6:	4b94      	ldr	r3, [pc, #592]	; (8015a08 <_ZN15Screen2ViewBaseC1Ev+0x30c>)
 80157b8:	61bb      	str	r3, [r7, #24]
 80157ba:	2300      	movs	r3, #0
 80157bc:	61fb      	str	r3, [r7, #28]
 80157be:	f107 0318 	add.w	r3, r7, #24
 80157c2:	cb0c      	ldmia	r3, {r2, r3}
 80157c4:	6879      	ldr	r1, [r7, #4]
 80157c6:	f000 f957 	bl	8015a78 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 800);
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80157d0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80157d4:	9300      	str	r3, [sp, #0]
 80157d6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80157da:	2200      	movs	r2, #0
 80157dc:	2100      	movs	r1, #0
 80157de:	f7fc ff6f 	bl	80126c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80157e8:	2300      	movs	r3, #0
 80157ea:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80157ee:	2300      	movs	r3, #0
 80157f0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157f4:	2300      	movs	r3, #0
 80157f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80157fa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80157fe:	041b      	lsls	r3, r3, #16
 8015800:	461a      	mov	r2, r3
 8015802:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015806:	021b      	lsls	r3, r3, #8
 8015808:	431a      	orrs	r2, r3
 801580a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801580e:	4313      	orrs	r3, r2
 8015810:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8015814:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8015818:	4611      	mov	r1, r2
 801581a:	4618      	mov	r0, r3
 801581c:	f7fe fd39 	bl	8014292 <_ZN8touchgfx9colortypeC1Em>
 8015820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015822:	4619      	mov	r1, r3
 8015824:	4620      	mov	r0, r4
 8015826:	f7fe fdef 	bl	8014408 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 480, 800);
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8015830:	f44f 7348 	mov.w	r3, #800	; 0x320
 8015834:	9300      	str	r3, [sp, #0]
 8015836:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801583a:	2200      	movs	r2, #0
 801583c:	2100      	movs	r1, #0
 801583e:	f7fc ff3f 	bl	80126c0 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8015848:	23ff      	movs	r3, #255	; 0xff
 801584a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801584e:	23ff      	movs	r3, #255	; 0xff
 8015850:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8015854:	23ff      	movs	r3, #255	; 0xff
 8015856:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801585a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801585e:	041b      	lsls	r3, r3, #16
 8015860:	461a      	mov	r2, r3
 8015862:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8015866:	021b      	lsls	r3, r3, #8
 8015868:	431a      	orrs	r2, r3
 801586a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801586e:	4313      	orrs	r3, r2
 8015870:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8015874:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015878:	4611      	mov	r1, r2
 801587a:	4618      	mov	r0, r3
 801587c:	f7fe fd09 	bl	8014292 <_ZN8touchgfx9colortypeC1Em>
 8015880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015882:	4619      	mov	r1, r3
 8015884:	4620      	mov	r0, r4
 8015886:	f7fe fdbf 	bl	8014408 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(155, 370);
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	3398      	adds	r3, #152	; 0x98
 801588e:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8015892:	219b      	movs	r1, #155	; 0x9b
 8015894:	4618      	mov	r0, r3
 8015896:	f7fc ff79 	bl	801278c <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80158a0:	f107 0320 	add.w	r3, r7, #32
 80158a4:	2101      	movs	r1, #1
 80158a6:	4618      	mov	r0, r3
 80158a8:	f7fe fd02 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 80158ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80158b0:	2102      	movs	r1, #2
 80158b2:	4618      	mov	r0, r3
 80158b4:	f7fe fcfc 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 80158b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80158bc:	f107 0320 	add.w	r3, r7, #32
 80158c0:	4619      	mov	r1, r3
 80158c2:	4620      	mov	r0, r4
 80158c4:	f003 fe06 	bl	80194d4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	f103 0298 	add.w	r2, r3, #152	; 0x98
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80158d4:	4619      	mov	r1, r3
 80158d6:	4610      	mov	r0, r2
 80158d8:	f7fe fdca 	bl	8014470 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    image2.setXY(0, 0);
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	33cc      	adds	r3, #204	; 0xcc
 80158e0:	2200      	movs	r2, #0
 80158e2:	2100      	movs	r1, #0
 80158e4:	4618      	mov	r0, r3
 80158e6:	f7fc ff51 	bl	801278c <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_GREEN_100X100_ID));
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	f103 04cc 	add.w	r4, r3, #204	; 0xcc
 80158f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80158f4:	210a      	movs	r1, #10
 80158f6:	4618      	mov	r0, r3
 80158f8:	f7fe fcda 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 80158fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015900:	4619      	mov	r1, r3
 8015902:	4620      	mov	r0, r4
 8015904:	f003 fe90 	bl	8019628 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    image3.setXY(160, 20);
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	33f8      	adds	r3, #248	; 0xf8
 801590c:	2214      	movs	r2, #20
 801590e:	21a0      	movs	r1, #160	; 0xa0
 8015910:	4618      	mov	r0, r3
 8015912:	f7fc ff3b 	bl	801278c <_ZN8touchgfx8Drawable5setXYEss>
    image3.setBitmap(touchgfx::Bitmap(BITMAP_GRAY_100X100PNG_ID));
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	f103 04f8 	add.w	r4, r3, #248	; 0xf8
 801591c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015920:	2109      	movs	r1, #9
 8015922:	4618      	mov	r0, r3
 8015924:	f7fe fcc4 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8015928:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801592c:	4619      	mov	r1, r3
 801592e:	4620      	mov	r0, r4
 8015930:	f003 fe7a 	bl	8019628 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    image4.setXY(260, 188);
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	f503 7392 	add.w	r3, r3, #292	; 0x124
 801593a:	22bc      	movs	r2, #188	; 0xbc
 801593c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8015940:	4618      	mov	r0, r3
 8015942:	f7fc ff23 	bl	801278c <_ZN8touchgfx8Drawable5setXYEss>
    image4.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_100X100_ID));
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	f503 7492 	add.w	r4, r3, #292	; 0x124
 801594c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015950:	2100      	movs	r1, #0
 8015952:	4618      	mov	r0, r3
 8015954:	f7fe fcac 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8015958:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801595c:	4619      	mov	r1, r3
 801595e:	4620      	mov	r0, r4
 8015960:	f003 fe62 	bl	8019628 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    image5.setXY(200, 507);
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801596a:	f240 12fb 	movw	r2, #507	; 0x1fb
 801596e:	21c8      	movs	r1, #200	; 0xc8
 8015970:	4618      	mov	r0, r3
 8015972:	f7fc ff0b 	bl	801278c <_ZN8touchgfx8Drawable5setXYEss>
    image5.setBitmap(touchgfx::Bitmap(BITMAP_INVERTER_ID));
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	f503 74a8 	add.w	r4, r3, #336	; 0x150
 801597c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015980:	210b      	movs	r1, #11
 8015982:	4618      	mov	r0, r3
 8015984:	f7fe fc94 	bl	80142b0 <_ZN8touchgfx6BitmapC1Et>
 8015988:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801598c:	4619      	mov	r1, r3
 801598e:	4620      	mov	r0, r4
 8015990:	f003 fe4a 	bl	8019628 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

    add(__background);
 8015994:	687a      	ldr	r2, [r7, #4]
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	3340      	adds	r3, #64	; 0x40
 801599a:	4619      	mov	r1, r3
 801599c:	4610      	mov	r0, r2
 801599e:	f7fe fcff 	bl	80143a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 80159a2:	687a      	ldr	r2, [r7, #4]
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	336c      	adds	r3, #108	; 0x6c
 80159a8:	4619      	mov	r1, r3
 80159aa:	4610      	mov	r0, r2
 80159ac:	f7fe fcf8 	bl	80143a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 80159b0:	687a      	ldr	r2, [r7, #4]
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	3398      	adds	r3, #152	; 0x98
 80159b6:	4619      	mov	r1, r3
 80159b8:	4610      	mov	r0, r2
 80159ba:	f7fe fcf1 	bl	80143a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image2);
 80159be:	687a      	ldr	r2, [r7, #4]
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	33cc      	adds	r3, #204	; 0xcc
 80159c4:	4619      	mov	r1, r3
 80159c6:	4610      	mov	r0, r2
 80159c8:	f7fe fcea 	bl	80143a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image3);
 80159cc:	687a      	ldr	r2, [r7, #4]
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	33f8      	adds	r3, #248	; 0xf8
 80159d2:	4619      	mov	r1, r3
 80159d4:	4610      	mov	r0, r2
 80159d6:	f7fe fce3 	bl	80143a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image4);
 80159da:	687a      	ldr	r2, [r7, #4]
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80159e2:	4619      	mov	r1, r3
 80159e4:	4610      	mov	r0, r2
 80159e6:	f7fe fcdb 	bl	80143a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(image5);
 80159ea:	687a      	ldr	r2, [r7, #4]
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80159f2:	4619      	mov	r1, r3
 80159f4:	4610      	mov	r0, r2
 80159f6:	f7fe fcd3 	bl	80143a0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	4618      	mov	r0, r3
 80159fe:	374c      	adds	r7, #76	; 0x4c
 8015a00:	46bd      	mov	sp, r7
 8015a02:	bd90      	pop	{r4, r7, pc}
 8015a04:	0802bfa8 	.word	0x0802bfa8
 8015a08:	08015a21 	.word	0x08015a21

08015a0c <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 8015a0c:	b480      	push	{r7}
 8015a0e:	b083      	sub	sp, #12
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]

}
 8015a14:	bf00      	nop
 8015a16:	370c      	adds	r7, #12
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a1e:	4770      	bx	lr

08015a20 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b082      	sub	sp, #8
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	6078      	str	r0, [r7, #4]
 8015a28:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	3398      	adds	r3, #152	; 0x98
 8015a2e:	683a      	ldr	r2, [r7, #0]
 8015a30:	429a      	cmp	r2, r3
 8015a32:	d106      	bne.n	8015a42 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenWipeTransitionWest();
 8015a34:	6878      	ldr	r0, [r7, #4]
 8015a36:	f7ff fe56 	bl	80156e6 <_ZN15Screen2ViewBase11applicationEv>
 8015a3a:	4603      	mov	r3, r0
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	f7fd fa2b 	bl	8012e98 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionWestEv>
    }
}
 8015a42:	bf00      	nop
 8015a44:	3708      	adds	r7, #8
 8015a46:	46bd      	mov	sp, r7
 8015a48:	bd80      	pop	{r7, pc}
	...

08015a4c <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	b082      	sub	sp, #8
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	4618      	mov	r0, r3
 8015a58:	f006 ff08 	bl	801c86c <_ZN8touchgfx6ScreenC1Ev>
 8015a5c:	4a05      	ldr	r2, [pc, #20]	; (8015a74 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	601a      	str	r2, [r3, #0]
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	2200      	movs	r2, #0
 8015a66:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	3708      	adds	r7, #8
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	bd80      	pop	{r7, pc}
 8015a72:	bf00      	nop
 8015a74:	0802bff4 	.word	0x0802bff4

08015a78 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b084      	sub	sp, #16
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	60f8      	str	r0, [r7, #12]
 8015a80:	60b9      	str	r1, [r7, #8]
 8015a82:	4639      	mov	r1, r7
 8015a84:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	f7ff fa7e 	bl	8014f8c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8015a90:	4a08      	ldr	r2, [pc, #32]	; (8015ab4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	601a      	str	r2, [r3, #0]
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	68ba      	ldr	r2, [r7, #8]
 8015a9a:	605a      	str	r2, [r3, #4]
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	3308      	adds	r3, #8
 8015aa0:	463a      	mov	r2, r7
 8015aa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015aa6:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	4618      	mov	r0, r3
 8015aae:	3710      	adds	r7, #16
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd80      	pop	{r7, pc}
 8015ab4:	0802bfdc 	.word	0x0802bfdc

08015ab8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8015ab8:	b580      	push	{r7, lr}
 8015aba:	b082      	sub	sp, #8
 8015abc:	af00      	add	r7, sp, #0
 8015abe:	6078      	str	r0, [r7, #4]
 8015ac0:	4a05      	ldr	r2, [pc, #20]	; (8015ad8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	601a      	str	r2, [r3, #0]
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	4618      	mov	r0, r3
 8015aca:	f7ff fac1 	bl	8015050 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	3708      	adds	r7, #8
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	bd80      	pop	{r7, pc}
 8015ad8:	0802bfdc 	.word	0x0802bfdc

08015adc <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b082      	sub	sp, #8
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]
 8015ae4:	6878      	ldr	r0, [r7, #4]
 8015ae6:	f7ff ffe7 	bl	8015ab8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8015aea:	2110      	movs	r1, #16
 8015aec:	6878      	ldr	r0, [r7, #4]
 8015aee:	f013 fe68 	bl	80297c2 <_ZdlPvj>
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	4618      	mov	r0, r3
 8015af6:	3708      	adds	r7, #8
 8015af8:	46bd      	mov	sp, r7
 8015afa:	bd80      	pop	{r7, pc}

08015afc <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b082      	sub	sp, #8
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
 8015b04:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	685b      	ldr	r3, [r3, #4]
 8015b0a:	687a      	ldr	r2, [r7, #4]
 8015b0c:	68d2      	ldr	r2, [r2, #12]
 8015b0e:	1052      	asrs	r2, r2, #1
 8015b10:	1898      	adds	r0, r3, r2
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	68db      	ldr	r3, [r3, #12]
 8015b16:	f003 0301 	and.w	r3, r3, #1
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d102      	bne.n	8015b24 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	689b      	ldr	r3, [r3, #8]
 8015b22:	e00a      	b.n	8015b3a <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	685b      	ldr	r3, [r3, #4]
 8015b28:	687a      	ldr	r2, [r7, #4]
 8015b2a:	68d2      	ldr	r2, [r2, #12]
 8015b2c:	1052      	asrs	r2, r2, #1
 8015b2e:	4413      	add	r3, r2
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	687a      	ldr	r2, [r7, #4]
 8015b34:	6892      	ldr	r2, [r2, #8]
 8015b36:	4413      	add	r3, r2
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	6839      	ldr	r1, [r7, #0]
 8015b3c:	4798      	blx	r3
    }
 8015b3e:	bf00      	nop
 8015b40:	3708      	adds	r7, #8
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}

08015b46 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8015b46:	b480      	push	{r7}
 8015b48:	b083      	sub	sp, #12
 8015b4a:	af00      	add	r7, sp, #0
 8015b4c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	685b      	ldr	r3, [r3, #4]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d010      	beq.n	8015b78 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	689b      	ldr	r3, [r3, #8]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d107      	bne.n	8015b6e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	68db      	ldr	r3, [r3, #12]
 8015b62:	f003 0301 	and.w	r3, r3, #1
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d101      	bne.n	8015b6e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8015b6a:	2301      	movs	r3, #1
 8015b6c:	e000      	b.n	8015b70 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8015b6e:	2300      	movs	r3, #0
 8015b70:	2b01      	cmp	r3, #1
 8015b72:	d001      	beq.n	8015b78 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8015b74:	2301      	movs	r3, #1
 8015b76:	e000      	b.n	8015b7a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8015b78:	2300      	movs	r3, #0
    }
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	370c      	adds	r7, #12
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b84:	4770      	bx	lr
	...

08015b88 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8015b88:	b480      	push	{r7}
 8015b8a:	af00      	add	r7, sp, #0
    return bitmap_database;
 8015b8c:	4b02      	ldr	r3, [pc, #8]	; (8015b98 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8015b8e:	4618      	mov	r0, r3
 8015b90:	46bd      	mov	sp, r7
 8015b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b96:	4770      	bx	lr
 8015b98:	0802c020 	.word	0x0802c020

08015b9c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8015b9c:	b480      	push	{r7}
 8015b9e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8015ba0:	230c      	movs	r3, #12
}
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015baa:	4770      	bx	lr

08015bac <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8015bac:	b480      	push	{r7}
 8015bae:	b085      	sub	sp, #20
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	60f8      	str	r0, [r7, #12]
 8015bb4:	460b      	mov	r3, r1
 8015bb6:	607a      	str	r2, [r7, #4]
 8015bb8:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 8015bba:	2300      	movs	r3, #0
    }
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	3714      	adds	r7, #20
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc6:	4770      	bx	lr

08015bc8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8015bc8:	b480      	push	{r7}
 8015bca:	b083      	sub	sp, #12
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8015bd0:	2300      	movs	r3, #0
    }
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	370c      	adds	r7, #12
 8015bd6:	46bd      	mov	sp, r7
 8015bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bdc:	4770      	bx	lr

08015bde <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8015bde:	b480      	push	{r7}
 8015be0:	b083      	sub	sp, #12
 8015be2:	af00      	add	r7, sp, #0
 8015be4:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8015be6:	2300      	movs	r3, #0
    }
 8015be8:	4618      	mov	r0, r3
 8015bea:	370c      	adds	r7, #12
 8015bec:	46bd      	mov	sp, r7
 8015bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf2:	4770      	bx	lr

08015bf4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8015bf4:	b480      	push	{r7}
 8015bf6:	b085      	sub	sp, #20
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	60f8      	str	r0, [r7, #12]
 8015bfc:	60b9      	str	r1, [r7, #8]
 8015bfe:	4613      	mov	r3, r2
 8015c00:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8015c02:	4a07      	ldr	r2, [pc, #28]	; (8015c20 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	6013      	str	r3, [r2, #0]
        fonts = f;
 8015c08:	4a06      	ldr	r2, [pc, #24]	; (8015c24 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8015c0a:	68bb      	ldr	r3, [r7, #8]
 8015c0c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8015c0e:	4a06      	ldr	r2, [pc, #24]	; (8015c28 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8015c10:	88fb      	ldrh	r3, [r7, #6]
 8015c12:	8013      	strh	r3, [r2, #0]
    }
 8015c14:	bf00      	nop
 8015c16:	3714      	adds	r7, #20
 8015c18:	46bd      	mov	sp, r7
 8015c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c1e:	4770      	bx	lr
 8015c20:	20008e80 	.word	0x20008e80
 8015c24:	20008e88 	.word	0x20008e88
 8015c28:	20008e84 	.word	0x20008e84

08015c2c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8015c2c:	b40e      	push	{r1, r2, r3}
 8015c2e:	b580      	push	{r7, lr}
 8015c30:	b085      	sub	sp, #20
 8015c32:	af00      	add	r7, sp, #0
 8015c34:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8015c36:	f107 0320 	add.w	r3, r7, #32
 8015c3a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8015c3c:	68bb      	ldr	r3, [r7, #8]
 8015c3e:	69fa      	ldr	r2, [r7, #28]
 8015c40:	2100      	movs	r1, #0
 8015c42:	6878      	ldr	r0, [r7, #4]
 8015c44:	f006 fa58 	bl	801c0f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8015c48:	4603      	mov	r3, r0
 8015c4a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8015c4c:	89fb      	ldrh	r3, [r7, #14]
}
 8015c4e:	4618      	mov	r0, r3
 8015c50:	3714      	adds	r7, #20
 8015c52:	46bd      	mov	sp, r7
 8015c54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015c58:	b003      	add	sp, #12
 8015c5a:	4770      	bx	lr

08015c5c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8015c5c:	b40c      	push	{r2, r3}
 8015c5e:	b580      	push	{r7, lr}
 8015c60:	b084      	sub	sp, #16
 8015c62:	af00      	add	r7, sp, #0
 8015c64:	6078      	str	r0, [r7, #4]
 8015c66:	460b      	mov	r3, r1
 8015c68:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8015c6a:	f107 031c 	add.w	r3, r7, #28
 8015c6e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8015c70:	78f9      	ldrb	r1, [r7, #3]
 8015c72:	68bb      	ldr	r3, [r7, #8]
 8015c74:	69ba      	ldr	r2, [r7, #24]
 8015c76:	6878      	ldr	r0, [r7, #4]
 8015c78:	f006 fa3e 	bl	801c0f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8015c7c:	4603      	mov	r3, r0
 8015c7e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8015c80:	89fb      	ldrh	r3, [r7, #14]
}
 8015c82:	4618      	mov	r0, r3
 8015c84:	3710      	adds	r7, #16
 8015c86:	46bd      	mov	sp, r7
 8015c88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015c8c:	b002      	add	sp, #8
 8015c8e:	4770      	bx	lr

08015c90 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8015c90:	b580      	push	{r7, lr}
 8015c92:	b08a      	sub	sp, #40	; 0x28
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
 8015c98:	460b      	mov	r3, r1
 8015c9a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d016      	beq.n	8015cd2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	3322      	adds	r3, #34	; 0x22
 8015ca8:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8015caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cac:	8adb      	ldrh	r3, [r3, #22]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d105      	bne.n	8015cbe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8015cb2:	4b43      	ldr	r3, [pc, #268]	; (8015dc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8015cb4:	4a43      	ldr	r2, [pc, #268]	; (8015dc4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8015cb6:	21c0      	movs	r1, #192	; 0xc0
 8015cb8:	4843      	ldr	r0, [pc, #268]	; (8015dc8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8015cba:	f013 fdb1 	bl	8029820 <__assert_func>
            return buffer[pos];
 8015cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cc0:	8a9b      	ldrh	r3, [r3, #20]
 8015cc2:	461a      	mov	r2, r3
 8015cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cc6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d001      	beq.n	8015cd2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8015cce:	2301      	movs	r3, #1
 8015cd0:	e000      	b.n	8015cd4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d06a      	beq.n	8015dae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8015cd8:	6878      	ldr	r0, [r7, #4]
 8015cda:	f007 fcbc 	bl	801d656 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	3322      	adds	r3, #34	; 0x22
 8015ce2:	623b      	str	r3, [r7, #32]
 8015ce4:	2301      	movs	r3, #1
 8015ce6:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8015ce8:	6a3b      	ldr	r3, [r7, #32]
 8015cea:	8adb      	ldrh	r3, [r3, #22]
 8015cec:	8bfa      	ldrh	r2, [r7, #30]
 8015cee:	429a      	cmp	r2, r3
 8015cf0:	d305      	bcc.n	8015cfe <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8015cf2:	4b36      	ldr	r3, [pc, #216]	; (8015dcc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8015cf4:	4a36      	ldr	r2, [pc, #216]	; (8015dd0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8015cf6:	21c5      	movs	r1, #197	; 0xc5
 8015cf8:	4833      	ldr	r0, [pc, #204]	; (8015dc8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8015cfa:	f013 fd91 	bl	8029820 <__assert_func>
            const uint16_t index = pos + offset;
 8015cfe:	6a3b      	ldr	r3, [r7, #32]
 8015d00:	8a9a      	ldrh	r2, [r3, #20]
 8015d02:	8bfb      	ldrh	r3, [r7, #30]
 8015d04:	4413      	add	r3, r2
 8015d06:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8015d08:	8bbb      	ldrh	r3, [r7, #28]
 8015d0a:	2b09      	cmp	r3, #9
 8015d0c:	d801      	bhi.n	8015d12 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8015d0e:	8bbb      	ldrh	r3, [r7, #28]
 8015d10:	e001      	b.n	8015d16 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8015d12:	8bbb      	ldrh	r3, [r7, #28]
 8015d14:	3b0a      	subs	r3, #10
 8015d16:	6a3a      	ldr	r2, [r7, #32]
 8015d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015d1c:	f640 123f 	movw	r2, #2367	; 0x93f
 8015d20:	4293      	cmp	r3, r2
 8015d22:	bf0c      	ite	eq
 8015d24:	2301      	moveq	r3, #1
 8015d26:	2300      	movne	r3, #0
 8015d28:	b2db      	uxtb	r3, r3
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d03f      	beq.n	8015dae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	3322      	adds	r3, #34	; 0x22
 8015d32:	687a      	ldr	r2, [r7, #4]
 8015d34:	3222      	adds	r2, #34	; 0x22
 8015d36:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8015d38:	68ba      	ldr	r2, [r7, #8]
 8015d3a:	8ad2      	ldrh	r2, [r2, #22]
 8015d3c:	2a00      	cmp	r2, #0
 8015d3e:	d105      	bne.n	8015d4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8015d40:	4b1f      	ldr	r3, [pc, #124]	; (8015dc0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8015d42:	4a20      	ldr	r2, [pc, #128]	; (8015dc4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8015d44:	21c0      	movs	r1, #192	; 0xc0
 8015d46:	4820      	ldr	r0, [pc, #128]	; (8015dc8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8015d48:	f013 fd6a 	bl	8029820 <__assert_func>
            return buffer[pos];
 8015d4c:	68ba      	ldr	r2, [r7, #8]
 8015d4e:	8a92      	ldrh	r2, [r2, #20]
 8015d50:	4611      	mov	r1, r2
 8015d52:	68ba      	ldr	r2, [r7, #8]
 8015d54:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8015d58:	613b      	str	r3, [r7, #16]
 8015d5a:	4613      	mov	r3, r2
 8015d5c:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8015d5e:	693b      	ldr	r3, [r7, #16]
 8015d60:	8adb      	ldrh	r3, [r3, #22]
 8015d62:	2b01      	cmp	r3, #1
 8015d64:	d806      	bhi.n	8015d74 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8015d66:	4b1b      	ldr	r3, [pc, #108]	; (8015dd4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8015d68:	4a1b      	ldr	r2, [pc, #108]	; (8015dd8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8015d6a:	f240 110d 	movw	r1, #269	; 0x10d
 8015d6e:	4816      	ldr	r0, [pc, #88]	; (8015dc8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8015d70:	f013 fd56 	bl	8029820 <__assert_func>
            const uint16_t index = pos + 1;
 8015d74:	693b      	ldr	r3, [r7, #16]
 8015d76:	8a9b      	ldrh	r3, [r3, #20]
 8015d78:	3301      	adds	r3, #1
 8015d7a:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8015d7c:	89bb      	ldrh	r3, [r7, #12]
 8015d7e:	2b09      	cmp	r3, #9
 8015d80:	d801      	bhi.n	8015d86 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8015d82:	89bb      	ldrh	r3, [r7, #12]
 8015d84:	e000      	b.n	8015d88 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8015d86:	2300      	movs	r3, #0
 8015d88:	693a      	ldr	r2, [r7, #16]
 8015d8a:	89f9      	ldrh	r1, [r7, #14]
 8015d8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8015d90:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	3322      	adds	r3, #34	; 0x22
 8015d96:	61bb      	str	r3, [r7, #24]
 8015d98:	f640 133f 	movw	r3, #2367	; 0x93f
 8015d9c:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8015d9e:	69bb      	ldr	r3, [r7, #24]
 8015da0:	8a9b      	ldrh	r3, [r3, #20]
 8015da2:	4619      	mov	r1, r3
 8015da4:	69bb      	ldr	r3, [r7, #24]
 8015da6:	8afa      	ldrh	r2, [r7, #22]
 8015da8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8015dac:	bf00      	nop
        }
    }
    return getNextChar();
 8015dae:	6878      	ldr	r0, [r7, #4]
 8015db0:	f007 fb54 	bl	801d45c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015db4:	4603      	mov	r3, r0
}
 8015db6:	4618      	mov	r0, r3
 8015db8:	3728      	adds	r7, #40	; 0x28
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bd80      	pop	{r7, pc}
 8015dbe:	bf00      	nop
 8015dc0:	0802b344 	.word	0x0802b344
 8015dc4:	0802b350 	.word	0x0802b350
 8015dc8:	0802b3fc 	.word	0x0802b3fc
 8015dcc:	0802b444 	.word	0x0802b444
 8015dd0:	0802b454 	.word	0x0802b454
 8015dd4:	0802b528 	.word	0x0802b528
 8015dd8:	0802b534 	.word	0x0802b534

08015ddc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b082      	sub	sp, #8
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8015de4:	6878      	ldr	r0, [r7, #4]
 8015de6:	f007 fb00 	bl	801d3ea <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8015dea:	bf00      	nop
 8015dec:	3708      	adds	r7, #8
 8015dee:	46bd      	mov	sp, r7
 8015df0:	bd80      	pop	{r7, pc}

08015df2 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8015df2:	b580      	push	{r7, lr}
 8015df4:	b088      	sub	sp, #32
 8015df6:	af02      	add	r7, sp, #8
 8015df8:	60f8      	str	r0, [r7, #12]
 8015dfa:	1d38      	adds	r0, r7, #4
 8015dfc:	e880 0006 	stmia.w	r0, {r1, r2}
 8015e00:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8015e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015e06:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8015e08:	1d39      	adds	r1, r7, #4
 8015e0a:	697b      	ldr	r3, [r7, #20]
 8015e0c:	9301      	str	r3, [sp, #4]
 8015e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e10:	9300      	str	r3, [sp, #0]
 8015e12:	6a3b      	ldr	r3, [r7, #32]
 8015e14:	683a      	ldr	r2, [r7, #0]
 8015e16:	68f8      	ldr	r0, [r7, #12]
 8015e18:	f004 fe38 	bl	801aa8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8015e1c:	bf00      	nop
 8015e1e:	3718      	adds	r7, #24
 8015e20:	46bd      	mov	sp, r7
 8015e22:	bd80      	pop	{r7, pc}

08015e24 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8015e24:	b590      	push	{r4, r7, lr}
 8015e26:	b085      	sub	sp, #20
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	4603      	mov	r3, r0
 8015e2c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8015e2e:	2300      	movs	r3, #0
 8015e30:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8015e32:	88fb      	ldrh	r3, [r7, #6]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d127      	bne.n	8015e88 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8015e38:	88fb      	ldrh	r3, [r7, #6]
 8015e3a:	4a1e      	ldr	r2, [pc, #120]	; (8015eb4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8015e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d016      	beq.n	8015e72 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8015e44:	88fb      	ldrh	r3, [r7, #6]
 8015e46:	4a1b      	ldr	r2, [pc, #108]	; (8015eb4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8015e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e4c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8015e4e:	68bb      	ldr	r3, [r7, #8]
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	68ba      	ldr	r2, [r7, #8]
 8015e54:	4413      	add	r3, r2
 8015e56:	4a18      	ldr	r2, [pc, #96]	; (8015eb8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8015e58:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8015e5a:	68bb      	ldr	r3, [r7, #8]
 8015e5c:	685b      	ldr	r3, [r3, #4]
 8015e5e:	68ba      	ldr	r2, [r7, #8]
 8015e60:	4413      	add	r3, r2
 8015e62:	4a16      	ldr	r2, [pc, #88]	; (8015ebc <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8015e64:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8015e66:	68bb      	ldr	r3, [r7, #8]
 8015e68:	689b      	ldr	r3, [r3, #8]
 8015e6a:	68ba      	ldr	r2, [r7, #8]
 8015e6c:	4413      	add	r3, r2
 8015e6e:	60fb      	str	r3, [r7, #12]
 8015e70:	e00a      	b.n	8015e88 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8015e72:	4b11      	ldr	r3, [pc, #68]	; (8015eb8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8015e74:	4a12      	ldr	r2, [pc, #72]	; (8015ec0 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8015e76:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8015e78:	4a12      	ldr	r2, [pc, #72]	; (8015ec4 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8015e7a:	4b10      	ldr	r3, [pc, #64]	; (8015ebc <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8015e7c:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8015e7e:	88fb      	ldrh	r3, [r7, #6]
 8015e80:	4a11      	ldr	r2, [pc, #68]	; (8015ec8 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8015e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e86:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d00d      	beq.n	8015eaa <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8015e8e:	4a0f      	ldr	r2, [pc, #60]	; (8015ecc <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8015e90:	88fb      	ldrh	r3, [r7, #6]
 8015e92:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8015e94:	f000 f83e 	bl	8015f14 <_ZN17TypedTextDatabase8getFontsEv>
 8015e98:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8015e9a:	f000 f833 	bl	8015f04 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	461a      	mov	r2, r3
 8015ea2:	4621      	mov	r1, r4
 8015ea4:	68f8      	ldr	r0, [r7, #12]
 8015ea6:	f7ff fea5 	bl	8015bf4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8015eaa:	bf00      	nop
 8015eac:	3714      	adds	r7, #20
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bd90      	pop	{r4, r7, pc}
 8015eb2:	bf00      	nop
 8015eb4:	20007b7c 	.word	0x20007b7c
 8015eb8:	20007b84 	.word	0x20007b84
 8015ebc:	20007b88 	.word	0x20007b88
 8015ec0:	0804a720 	.word	0x0804a720
 8015ec4:	0804a71c 	.word	0x0804a71c
 8015ec8:	0804a738 	.word	0x0804a738
 8015ecc:	20007b80 	.word	0x20007b80

08015ed0 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8015ed0:	b480      	push	{r7}
 8015ed2:	b083      	sub	sp, #12
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	6078      	str	r0, [r7, #4]
 8015ed8:	460b      	mov	r3, r1
 8015eda:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8015edc:	4b07      	ldr	r3, [pc, #28]	; (8015efc <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8015ede:	681a      	ldr	r2, [r3, #0]
 8015ee0:	4b07      	ldr	r3, [pc, #28]	; (8015f00 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8015ee2:	6819      	ldr	r1, [r3, #0]
 8015ee4:	887b      	ldrh	r3, [r7, #2]
 8015ee6:	009b      	lsls	r3, r3, #2
 8015ee8:	440b      	add	r3, r1
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	005b      	lsls	r3, r3, #1
 8015eee:	4413      	add	r3, r2
}
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	370c      	adds	r7, #12
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015efa:	4770      	bx	lr
 8015efc:	20007b84 	.word	0x20007b84
 8015f00:	20007b88 	.word	0x20007b88

08015f04 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8015f04:	b480      	push	{r7}
 8015f06:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8015f08:	2301      	movs	r3, #1
}
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f12:	4770      	bx	lr

08015f14 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8015f14:	b480      	push	{r7}
 8015f16:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8015f18:	4b02      	ldr	r3, [pc, #8]	; (8015f24 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	46bd      	mov	sp, r7
 8015f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f22:	4770      	bx	lr
 8015f24:	20007b8c 	.word	0x20007b8c

08015f28 <_Z41__static_initialization_and_destruction_0ii>:
    case 1:
        touchgfx_fonts[1] = &(getFont_bahnschrift_80_2bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b082      	sub	sp, #8
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
 8015f30:	6039      	str	r1, [r7, #0]
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	2b01      	cmp	r3, #1
 8015f36:	d10e      	bne.n	8015f56 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8015f38:	683b      	ldr	r3, [r7, #0]
 8015f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015f3e:	4293      	cmp	r3, r2
 8015f40:	d109      	bne.n	8015f56 <_Z41__static_initialization_and_destruction_0ii+0x2e>
    &(getFont_bahnschrift_25_2bpp()),
 8015f42:	f7fc f9b3 	bl	80122ac <_Z27getFont_bahnschrift_25_2bppv>
 8015f46:	4603      	mov	r3, r0
};
 8015f48:	4a05      	ldr	r2, [pc, #20]	; (8015f60 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8015f4a:	6013      	str	r3, [r2, #0]
    &(getFont_bahnschrift_80_2bpp())
 8015f4c:	f7fc fa04 	bl	8012358 <_Z27getFont_bahnschrift_80_2bppv>
 8015f50:	4603      	mov	r3, r0
};
 8015f52:	4a03      	ldr	r2, [pc, #12]	; (8015f60 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8015f54:	6053      	str	r3, [r2, #4]
} // namespace TypedTextDatabase
 8015f56:	bf00      	nop
 8015f58:	3708      	adds	r7, #8
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	bd80      	pop	{r7, pc}
 8015f5e:	bf00      	nop
 8015f60:	20007b8c 	.word	0x20007b8c

08015f64 <_GLOBAL__sub_I_touchgfx_fonts>:
 8015f64:	b580      	push	{r7, lr}
 8015f66:	af00      	add	r7, sp, #0
 8015f68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015f6c:	2001      	movs	r0, #1
 8015f6e:	f7ff ffdb 	bl	8015f28 <_Z41__static_initialization_and_destruction_0ii>
 8015f72:	bd80      	pop	{r7, pc}

08015f74 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b082      	sub	sp, #8
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
 8015f7c:	4a05      	ldr	r2, [pc, #20]	; (8015f94 <_ZN19FrontendApplicationD1Ev+0x20>)
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	601a      	str	r2, [r3, #0]
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	4618      	mov	r0, r3
 8015f86:	f7fc fe3f 	bl	8012c08 <_ZN23FrontendApplicationBaseD1Ev>
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	3708      	adds	r7, #8
 8015f90:	46bd      	mov	sp, r7
 8015f92:	bd80      	pop	{r7, pc}
 8015f94:	0802c16c 	.word	0x0802c16c

08015f98 <_ZN19FrontendApplicationD0Ev>:
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b082      	sub	sp, #8
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
 8015fa0:	6878      	ldr	r0, [r7, #4]
 8015fa2:	f7ff ffe7 	bl	8015f74 <_ZN19FrontendApplicationD1Ev>
 8015fa6:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8015faa:	6878      	ldr	r0, [r7, #4]
 8015fac:	f013 fc09 	bl	80297c2 <_ZdlPvj>
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	3708      	adds	r7, #8
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	bd80      	pop	{r7, pc}

08015fba <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8015fba:	b580      	push	{r7, lr}
 8015fbc:	b082      	sub	sp, #8
 8015fbe:	af00      	add	r7, sp, #0
 8015fc0:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8015fc8:	4618      	mov	r0, r3
 8015fca:	f000 f82d 	bl	8016028 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	f005 f8d3 	bl	801b17c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8015fd6:	bf00      	nop
 8015fd8:	3708      	adds	r7, #8
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	bd80      	pop	{r7, pc}
	...

08015fe0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b084      	sub	sp, #16
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	60f8      	str	r0, [r7, #12]
 8015fe8:	60b9      	str	r1, [r7, #8]
 8015fea:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	687a      	ldr	r2, [r7, #4]
 8015ff0:	68b9      	ldr	r1, [r7, #8]
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	f7fc feae 	bl	8012d54 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8015ff8:	4a03      	ldr	r2, [pc, #12]	; (8016008 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	601a      	str	r2, [r3, #0]
{

}
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	4618      	mov	r0, r3
 8016002:	3710      	adds	r7, #16
 8016004:	46bd      	mov	sp, r7
 8016006:	bd80      	pop	{r7, pc}
 8016008:	0802c16c 	.word	0x0802c16c

0801600c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 801600c:	b480      	push	{r7}
 801600e:	b083      	sub	sp, #12
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	2200      	movs	r2, #0
 8016018:	601a      	str	r2, [r3, #0]
{

}
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	4618      	mov	r0, r3
 801601e:	370c      	adds	r7, #12
 8016020:	46bd      	mov	sp, r7
 8016022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016026:	4770      	bx	lr

08016028 <_ZN5Model4tickEv>:

void Model::tick()
{
 8016028:	b480      	push	{r7}
 801602a:	b083      	sub	sp, #12
 801602c:	af00      	add	r7, sp, #0
 801602e:	6078      	str	r0, [r7, #4]

}
 8016030:	bf00      	nop
 8016032:	370c      	adds	r7, #12
 8016034:	46bd      	mov	sp, r7
 8016036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603a:	4770      	bx	lr

0801603c <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 801603c:	b480      	push	{r7}
 801603e:	b083      	sub	sp, #12
 8016040:	af00      	add	r7, sp, #0
 8016042:	6078      	str	r0, [r7, #4]
    {
    }
 8016044:	bf00      	nop
 8016046:	370c      	adds	r7, #12
 8016048:	46bd      	mov	sp, r7
 801604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604e:	4770      	bx	lr

08016050 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8016050:	b480      	push	{r7}
 8016052:	b083      	sub	sp, #12
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
    {
    }
 8016058:	bf00      	nop
 801605a:	370c      	adds	r7, #12
 801605c:	46bd      	mov	sp, r7
 801605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016062:	4770      	bx	lr

08016064 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8016064:	b480      	push	{r7}
 8016066:	b083      	sub	sp, #12
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]
    {
 801606c:	4a04      	ldr	r2, [pc, #16]	; (8016080 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	601a      	str	r2, [r3, #0]
    }
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	4618      	mov	r0, r3
 8016076:	370c      	adds	r7, #12
 8016078:	46bd      	mov	sp, r7
 801607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801607e:	4770      	bx	lr
 8016080:	0802c1f0 	.word	0x0802c1f0

08016084 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8016084:	b580      	push	{r7, lr}
 8016086:	b082      	sub	sp, #8
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
    }
 801608c:	6878      	ldr	r0, [r7, #4]
 801608e:	f7ff ffe9 	bl	8016064 <_ZN8touchgfx9PresenterD1Ev>
 8016092:	2104      	movs	r1, #4
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f013 fb94 	bl	80297c2 <_ZdlPvj>
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	4618      	mov	r0, r3
 801609e:	3708      	adds	r7, #8
 80160a0:	46bd      	mov	sp, r7
 80160a2:	bd80      	pop	{r7, pc}

080160a4 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80160a4:	b480      	push	{r7}
 80160a6:	b083      	sub	sp, #12
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
    {
 80160ac:	4a04      	ldr	r2, [pc, #16]	; (80160c0 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	601a      	str	r2, [r3, #0]
    }
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	4618      	mov	r0, r3
 80160b6:	370c      	adds	r7, #12
 80160b8:	46bd      	mov	sp, r7
 80160ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160be:	4770      	bx	lr
 80160c0:	0802c1f0 	.word	0x0802c1f0

080160c4 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80160c4:	b480      	push	{r7}
 80160c6:	b083      	sub	sp, #12
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	6078      	str	r0, [r7, #4]
 80160cc:	4a06      	ldr	r2, [pc, #24]	; (80160e8 <_ZN13ModelListenerC1Ev+0x24>)
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	601a      	str	r2, [r3, #0]
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	2200      	movs	r2, #0
 80160d6:	605a      	str	r2, [r3, #4]
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	4618      	mov	r0, r3
 80160dc:	370c      	adds	r7, #12
 80160de:	46bd      	mov	sp, r7
 80160e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e4:	4770      	bx	lr
 80160e6:	bf00      	nop
 80160e8:	0802c1e0 	.word	0x0802c1e0

080160ec <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80160ec:	b480      	push	{r7}
 80160ee:	b083      	sub	sp, #12
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
 80160f4:	4a04      	ldr	r2, [pc, #16]	; (8016108 <_ZN13ModelListenerD1Ev+0x1c>)
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	601a      	str	r2, [r3, #0]
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	4618      	mov	r0, r3
 80160fe:	370c      	adds	r7, #12
 8016100:	46bd      	mov	sp, r7
 8016102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016106:	4770      	bx	lr
 8016108:	0802c1e0 	.word	0x0802c1e0

0801610c <_ZN13ModelListenerD0Ev>:
 801610c:	b580      	push	{r7, lr}
 801610e:	b082      	sub	sp, #8
 8016110:	af00      	add	r7, sp, #0
 8016112:	6078      	str	r0, [r7, #4]
 8016114:	6878      	ldr	r0, [r7, #4]
 8016116:	f7ff ffe9 	bl	80160ec <_ZN13ModelListenerD1Ev>
 801611a:	2108      	movs	r1, #8
 801611c:	6878      	ldr	r0, [r7, #4]
 801611e:	f013 fb50 	bl	80297c2 <_ZdlPvj>
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	4618      	mov	r0, r3
 8016126:	3708      	adds	r7, #8
 8016128:	46bd      	mov	sp, r7
 801612a:	bd80      	pop	{r7, pc}

0801612c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 801612c:	b580      	push	{r7, lr}
 801612e:	b082      	sub	sp, #8
 8016130:	af00      	add	r7, sp, #0
 8016132:	6078      	str	r0, [r7, #4]
 8016134:	4a09      	ldr	r2, [pc, #36]	; (801615c <_ZN16Screen1PresenterD1Ev+0x30>)
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	601a      	str	r2, [r3, #0]
 801613a:	4a09      	ldr	r2, [pc, #36]	; (8016160 <_ZN16Screen1PresenterD1Ev+0x34>)
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	605a      	str	r2, [r3, #4]
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	3304      	adds	r3, #4
 8016144:	4618      	mov	r0, r3
 8016146:	f7ff ffd1 	bl	80160ec <_ZN13ModelListenerD1Ev>
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	4618      	mov	r0, r3
 801614e:	f7ff ff89 	bl	8016064 <_ZN8touchgfx9PresenterD1Ev>
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	4618      	mov	r0, r3
 8016156:	3708      	adds	r7, #8
 8016158:	46bd      	mov	sp, r7
 801615a:	bd80      	pop	{r7, pc}
 801615c:	0802c1b8 	.word	0x0802c1b8
 8016160:	0802c1d0 	.word	0x0802c1d0

08016164 <_ZThn4_N16Screen1PresenterD1Ev>:
 8016164:	f1a0 0004 	sub.w	r0, r0, #4
 8016168:	e7e0      	b.n	801612c <_ZN16Screen1PresenterD1Ev>
 801616a:	bf00      	nop

0801616c <_ZN16Screen1PresenterD0Ev>:
 801616c:	b580      	push	{r7, lr}
 801616e:	b082      	sub	sp, #8
 8016170:	af00      	add	r7, sp, #0
 8016172:	6078      	str	r0, [r7, #4]
 8016174:	6878      	ldr	r0, [r7, #4]
 8016176:	f7ff ffd9 	bl	801612c <_ZN16Screen1PresenterD1Ev>
 801617a:	2110      	movs	r1, #16
 801617c:	6878      	ldr	r0, [r7, #4]
 801617e:	f013 fb20 	bl	80297c2 <_ZdlPvj>
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	4618      	mov	r0, r3
 8016186:	3708      	adds	r7, #8
 8016188:	46bd      	mov	sp, r7
 801618a:	bd80      	pop	{r7, pc}

0801618c <_ZThn4_N16Screen1PresenterD0Ev>:
 801618c:	f1a0 0004 	sub.w	r0, r0, #4
 8016190:	e7ec      	b.n	801616c <_ZN16Screen1PresenterD0Ev>
	...

08016194 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8016194:	b580      	push	{r7, lr}
 8016196:	b082      	sub	sp, #8
 8016198:	af00      	add	r7, sp, #0
 801619a:	6078      	str	r0, [r7, #4]
 801619c:	6039      	str	r1, [r7, #0]
    : view(v)
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	4618      	mov	r0, r3
 80161a2:	f7ff ff7f 	bl	80160a4 <_ZN8touchgfx9PresenterC1Ev>
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	3304      	adds	r3, #4
 80161aa:	4618      	mov	r0, r3
 80161ac:	f7ff ff8a 	bl	80160c4 <_ZN13ModelListenerC1Ev>
 80161b0:	4a06      	ldr	r2, [pc, #24]	; (80161cc <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	601a      	str	r2, [r3, #0]
 80161b6:	4a06      	ldr	r2, [pc, #24]	; (80161d0 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	605a      	str	r2, [r3, #4]
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	683a      	ldr	r2, [r7, #0]
 80161c0:	60da      	str	r2, [r3, #12]
{

}
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	4618      	mov	r0, r3
 80161c6:	3708      	adds	r7, #8
 80161c8:	46bd      	mov	sp, r7
 80161ca:	bd80      	pop	{r7, pc}
 80161cc:	0802c1b8 	.word	0x0802c1b8
 80161d0:	0802c1d0 	.word	0x0802c1d0

080161d4 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 80161d4:	b480      	push	{r7}
 80161d6:	b083      	sub	sp, #12
 80161d8:	af00      	add	r7, sp, #0
 80161da:	6078      	str	r0, [r7, #4]

}
 80161dc:	bf00      	nop
 80161de:	370c      	adds	r7, #12
 80161e0:	46bd      	mov	sp, r7
 80161e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e6:	4770      	bx	lr

080161e8 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 80161e8:	b480      	push	{r7}
 80161ea:	b083      	sub	sp, #12
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	6078      	str	r0, [r7, #4]

}
 80161f0:	bf00      	nop
 80161f2:	370c      	adds	r7, #12
 80161f4:	46bd      	mov	sp, r7
 80161f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161fa:	4770      	bx	lr

080161fc <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80161fc:	b580      	push	{r7, lr}
 80161fe:	b082      	sub	sp, #8
 8016200:	af00      	add	r7, sp, #0
 8016202:	6078      	str	r0, [r7, #4]
 8016204:	4a05      	ldr	r2, [pc, #20]	; (801621c <_ZN11Screen1ViewD1Ev+0x20>)
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	601a      	str	r2, [r3, #0]
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	4618      	mov	r0, r3
 801620e:	f7fe fb53 	bl	80148b8 <_ZN15Screen1ViewBaseD1Ev>
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	4618      	mov	r0, r3
 8016216:	3708      	adds	r7, #8
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}
 801621c:	0802c208 	.word	0x0802c208

08016220 <_ZN11Screen1ViewD0Ev>:
 8016220:	b580      	push	{r7, lr}
 8016222:	b082      	sub	sp, #8
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]
 8016228:	6878      	ldr	r0, [r7, #4]
 801622a:	f7ff ffe7 	bl	80161fc <_ZN11Screen1ViewD1Ev>
 801622e:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
 8016232:	6878      	ldr	r0, [r7, #4]
 8016234:	f013 fac5 	bl	80297c2 <_ZdlPvj>
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	4618      	mov	r0, r3
 801623c:	3708      	adds	r7, #8
 801623e:	46bd      	mov	sp, r7
 8016240:	bd80      	pop	{r7, pc}
	...

08016244 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

#include "main.h"
#include "extern.h"

Screen1View::Screen1View() {
 8016244:	b580      	push	{r7, lr}
 8016246:	b082      	sub	sp, #8
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	4618      	mov	r0, r3
 8016250:	f7fe fbce 	bl	80149f0 <_ZN15Screen1ViewBaseC1Ev>
 8016254:	4a03      	ldr	r2, [pc, #12]	; (8016264 <_ZN11Screen1ViewC1Ev+0x20>)
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	601a      	str	r2, [r3, #0]

}
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	4618      	mov	r0, r3
 801625e:	3708      	adds	r7, #8
 8016260:	46bd      	mov	sp, r7
 8016262:	bd80      	pop	{r7, pc}
 8016264:	0802c208 	.word	0x0802c208

08016268 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen() {
 8016268:	b580      	push	{r7, lr}
 801626a:	b088      	sub	sp, #32
 801626c:	af00      	add	r7, sp, #0
 801626e:	6078      	str	r0, [r7, #4]
	Screen1ViewBase::setupScreen();
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	4618      	mov	r0, r3
 8016274:	f7fe fdcc 	bl	8014e10 <_ZN15Screen1ViewBase11setupScreenEv>
//	Unicode::strncpy(buffer, "TPS", 10);
//	Unicode::snprintf(tps_labelBuffer, 10, "%s", buffer);
//	fuelp_units.resizeToCurrentTextWithAlignment();
//	fuelp_units.invalidate();

}
 8016278:	bf00      	nop
 801627a:	3720      	adds	r7, #32
 801627c:	46bd      	mov	sp, r7
 801627e:	bd80      	pop	{r7, pc}

08016280 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen() {
 8016280:	b580      	push	{r7, lr}
 8016282:	b082      	sub	sp, #8
 8016284:	af00      	add	r7, sp, #0
 8016286:	6078      	str	r0, [r7, #4]
	Screen1ViewBase::tearDownScreen();
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	4618      	mov	r0, r3
 801628c:	f7fe f868 	bl	8014360 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8016290:	bf00      	nop
 8016292:	3708      	adds	r7, #8
 8016294:	46bd      	mov	sp, r7
 8016296:	bd80      	pop	{r7, pc}

08016298 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent() {
 8016298:	b480      	push	{r7}
 801629a:	b08b      	sub	sp, #44	; 0x2c
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
//	indRight.invalidate();
//	gauge1.updateValue(Current_Status.RPM, 0);
//	//gauge1.set
//	//gauge1.invalidate();

}
 80162a0:	bf00      	nop
 80162a2:	372c      	adds	r7, #44	; 0x2c
 80162a4:	46bd      	mov	sp, r7
 80162a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162aa:	4770      	bx	lr

080162ac <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b082      	sub	sp, #8
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
 80162b4:	4a09      	ldr	r2, [pc, #36]	; (80162dc <_ZN16Screen2PresenterD1Ev+0x30>)
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	601a      	str	r2, [r3, #0]
 80162ba:	4a09      	ldr	r2, [pc, #36]	; (80162e0 <_ZN16Screen2PresenterD1Ev+0x34>)
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	605a      	str	r2, [r3, #4]
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	3304      	adds	r3, #4
 80162c4:	4618      	mov	r0, r3
 80162c6:	f7ff ff11 	bl	80160ec <_ZN13ModelListenerD1Ev>
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	4618      	mov	r0, r3
 80162ce:	f7ff fec9 	bl	8016064 <_ZN8touchgfx9PresenterD1Ev>
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	4618      	mov	r0, r3
 80162d6:	3708      	adds	r7, #8
 80162d8:	46bd      	mov	sp, r7
 80162da:	bd80      	pop	{r7, pc}
 80162dc:	0802c23c 	.word	0x0802c23c
 80162e0:	0802c254 	.word	0x0802c254

080162e4 <_ZThn4_N16Screen2PresenterD1Ev>:
 80162e4:	f1a0 0004 	sub.w	r0, r0, #4
 80162e8:	e7e0      	b.n	80162ac <_ZN16Screen2PresenterD1Ev>
 80162ea:	bf00      	nop

080162ec <_ZN16Screen2PresenterD0Ev>:
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b082      	sub	sp, #8
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	6078      	str	r0, [r7, #4]
 80162f4:	6878      	ldr	r0, [r7, #4]
 80162f6:	f7ff ffd9 	bl	80162ac <_ZN16Screen2PresenterD1Ev>
 80162fa:	2110      	movs	r1, #16
 80162fc:	6878      	ldr	r0, [r7, #4]
 80162fe:	f013 fa60 	bl	80297c2 <_ZdlPvj>
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	4618      	mov	r0, r3
 8016306:	3708      	adds	r7, #8
 8016308:	46bd      	mov	sp, r7
 801630a:	bd80      	pop	{r7, pc}

0801630c <_ZThn4_N16Screen2PresenterD0Ev>:
 801630c:	f1a0 0004 	sub.w	r0, r0, #4
 8016310:	e7ec      	b.n	80162ec <_ZN16Screen2PresenterD0Ev>
	...

08016314 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 8016314:	b580      	push	{r7, lr}
 8016316:	b082      	sub	sp, #8
 8016318:	af00      	add	r7, sp, #0
 801631a:	6078      	str	r0, [r7, #4]
 801631c:	6039      	str	r1, [r7, #0]
    : view(v)
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	4618      	mov	r0, r3
 8016322:	f7ff febf 	bl	80160a4 <_ZN8touchgfx9PresenterC1Ev>
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	3304      	adds	r3, #4
 801632a:	4618      	mov	r0, r3
 801632c:	f7ff feca 	bl	80160c4 <_ZN13ModelListenerC1Ev>
 8016330:	4a06      	ldr	r2, [pc, #24]	; (801634c <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	601a      	str	r2, [r3, #0]
 8016336:	4a06      	ldr	r2, [pc, #24]	; (8016350 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	605a      	str	r2, [r3, #4]
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	683a      	ldr	r2, [r7, #0]
 8016340:	60da      	str	r2, [r3, #12]
{

}
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	4618      	mov	r0, r3
 8016346:	3708      	adds	r7, #8
 8016348:	46bd      	mov	sp, r7
 801634a:	bd80      	pop	{r7, pc}
 801634c:	0802c23c 	.word	0x0802c23c
 8016350:	0802c254 	.word	0x0802c254

08016354 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 8016354:	b480      	push	{r7}
 8016356:	b083      	sub	sp, #12
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]

}
 801635c:	bf00      	nop
 801635e:	370c      	adds	r7, #12
 8016360:	46bd      	mov	sp, r7
 8016362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016366:	4770      	bx	lr

08016368 <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 8016368:	b480      	push	{r7}
 801636a:	b083      	sub	sp, #12
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]

}
 8016370:	bf00      	nop
 8016372:	370c      	adds	r7, #12
 8016374:	46bd      	mov	sp, r7
 8016376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801637a:	4770      	bx	lr

0801637c <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 801637c:	b580      	push	{r7, lr}
 801637e:	b082      	sub	sp, #8
 8016380:	af00      	add	r7, sp, #0
 8016382:	6078      	str	r0, [r7, #4]
 8016384:	4a05      	ldr	r2, [pc, #20]	; (801639c <_ZN11Screen2ViewD1Ev+0x20>)
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	601a      	str	r2, [r3, #0]
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	4618      	mov	r0, r3
 801638e:	f7ff f95b 	bl	8015648 <_ZN15Screen2ViewBaseD1Ev>
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	4618      	mov	r0, r3
 8016396:	3708      	adds	r7, #8
 8016398:	46bd      	mov	sp, r7
 801639a:	bd80      	pop	{r7, pc}
 801639c:	0802c264 	.word	0x0802c264

080163a0 <_ZN11Screen2ViewD0Ev>:
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b082      	sub	sp, #8
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
 80163a8:	6878      	ldr	r0, [r7, #4]
 80163aa:	f7ff ffe7 	bl	801637c <_ZN11Screen2ViewD1Ev>
 80163ae:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80163b2:	6878      	ldr	r0, [r7, #4]
 80163b4:	f013 fa05 	bl	80297c2 <_ZdlPvj>
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	4618      	mov	r0, r3
 80163bc:	3708      	adds	r7, #8
 80163be:	46bd      	mov	sp, r7
 80163c0:	bd80      	pop	{r7, pc}
	...

080163c4 <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b082      	sub	sp, #8
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	4618      	mov	r0, r3
 80163d0:	f7ff f994 	bl	80156fc <_ZN15Screen2ViewBaseC1Ev>
 80163d4:	4a03      	ldr	r2, [pc, #12]	; (80163e4 <_ZN11Screen2ViewC1Ev+0x20>)
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	601a      	str	r2, [r3, #0]
{

}
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	4618      	mov	r0, r3
 80163de:	3708      	adds	r7, #8
 80163e0:	46bd      	mov	sp, r7
 80163e2:	bd80      	pop	{r7, pc}
 80163e4:	0802c264 	.word	0x0802c264

080163e8 <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 80163e8:	b580      	push	{r7, lr}
 80163ea:	b082      	sub	sp, #8
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	4618      	mov	r0, r3
 80163f4:	f7ff fb0a 	bl	8015a0c <_ZN15Screen2ViewBase11setupScreenEv>
}
 80163f8:	bf00      	nop
 80163fa:	3708      	adds	r7, #8
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd80      	pop	{r7, pc}

08016400 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b082      	sub	sp, #8
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	4618      	mov	r0, r3
 801640c:	f7fd ffa8 	bl	8014360 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8016410:	bf00      	nop
 8016412:	3708      	adds	r7, #8
 8016414:	46bd      	mov	sp, r7
 8016416:	bd80      	pop	{r7, pc}

08016418 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8016418:	b480      	push	{r7}
 801641a:	b083      	sub	sp, #12
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
    {
 8016420:	4a04      	ldr	r2, [pc, #16]	; (8016434 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	601a      	str	r2, [r3, #0]
    }
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	4618      	mov	r0, r3
 801642a:	370c      	adds	r7, #12
 801642c:	46bd      	mov	sp, r7
 801642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016432:	4770      	bx	lr
 8016434:	0802c2b0 	.word	0x0802c2b0

08016438 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8016438:	b580      	push	{r7, lr}
 801643a:	b082      	sub	sp, #8
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
    }
 8016440:	6878      	ldr	r0, [r7, #4]
 8016442:	f7ff ffe9 	bl	8016418 <_ZN8touchgfx15TouchControllerD1Ev>
 8016446:	2104      	movs	r1, #4
 8016448:	6878      	ldr	r0, [r7, #4]
 801644a:	f013 f9ba 	bl	80297c2 <_ZdlPvj>
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	4618      	mov	r0, r3
 8016452:	3708      	adds	r7, #8
 8016454:	46bd      	mov	sp, r7
 8016456:	bd80      	pop	{r7, pc}

08016458 <_ZN20STM32TouchController4initEv>:
#include <TargetTouch.h>
#include <Globals.h>
}

void STM32TouchController::init()
{
 8016458:	b580      	push	{r7, lr}
 801645a:	b082      	sub	sp, #8
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
	TOUCH_Init();
 8016460:	f7ea fd74 	bl	8000f4c <TOUCH_Init>
}
 8016464:	bf00      	nop
 8016466:	3708      	adds	r7, #8
 8016468:	46bd      	mov	sp, r7
 801646a:	bd80      	pop	{r7, pc}

0801646c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b086      	sub	sp, #24
 8016470:	af00      	add	r7, sp, #0
 8016472:	60f8      	str	r0, [r7, #12]
 8016474:	60b9      	str	r1, [r7, #8]
 8016476:	607a      	str	r2, [r7, #4]
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */

	if(TOUCH_IsPressed())	//can be omitted -> controller continuously read touch data via i2c
 8016478:	f7ea fd7e 	bl	8000f78 <TOUCH_IsPressed>
 801647c:	4603      	mov	r3, r0
 801647e:	2b00      	cmp	r3, #0
 8016480:	bf14      	ite	ne
 8016482:	2301      	movne	r3, #1
 8016484:	2300      	moveq	r3, #0
 8016486:	b2db      	uxtb	r3, r3
 8016488:	2b00      	cmp	r3, #0
 801648a:	d010      	beq.n	80164ae <_ZN20STM32TouchController11sampleTouchERlS0_+0x42>
	{
		TOUCH_Reset();		//can be omitted
 801648c:	f7ea fd8c 	bl	8000fa8 <TOUCH_Reset>
		TOUCH_Data td=TOUCH_GetData();
 8016490:	f107 0310 	add.w	r3, r7, #16
 8016494:	4618      	mov	r0, r3
 8016496:	f7ea fd9b 	bl	8000fd0 <TOUCH_GetData>

		x=td.x;
 801649a:	8a3b      	ldrh	r3, [r7, #16]
 801649c:	461a      	mov	r2, r3
 801649e:	68bb      	ldr	r3, [r7, #8]
 80164a0:	601a      	str	r2, [r3, #0]
		y=td.y;
 80164a2:	8a7b      	ldrh	r3, [r7, #18]
 80164a4:	461a      	mov	r2, r3
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	601a      	str	r2, [r3, #0]

		return true;
 80164aa:	2301      	movs	r3, #1
 80164ac:	e000      	b.n	80164b0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x44>
//		if(td.p>TP_MIN_PRESSURE)
//		{
//		}
	}
	return false;
 80164ae:	2300      	movs	r3, #0
}
 80164b0:	4618      	mov	r0, r3
 80164b2:	3718      	adds	r7, #24
 80164b4:	46bd      	mov	sp, r7
 80164b6:	bd80      	pop	{r7, pc}

080164b8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b082      	sub	sp, #8
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
 80164c0:	4a05      	ldr	r2, [pc, #20]	; (80164d8 <_ZN20STM32TouchControllerD1Ev+0x20>)
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	601a      	str	r2, [r3, #0]
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	4618      	mov	r0, r3
 80164ca:	f7ff ffa5 	bl	8016418 <_ZN8touchgfx15TouchControllerD1Ev>
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	4618      	mov	r0, r3
 80164d2:	3708      	adds	r7, #8
 80164d4:	46bd      	mov	sp, r7
 80164d6:	bd80      	pop	{r7, pc}
 80164d8:	0802c298 	.word	0x0802c298

080164dc <_ZN20STM32TouchControllerD0Ev>:
 80164dc:	b580      	push	{r7, lr}
 80164de:	b082      	sub	sp, #8
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	6078      	str	r0, [r7, #4]
 80164e4:	6878      	ldr	r0, [r7, #4]
 80164e6:	f7ff ffe7 	bl	80164b8 <_ZN20STM32TouchControllerD1Ev>
 80164ea:	2104      	movs	r1, #4
 80164ec:	6878      	ldr	r0, [r7, #4]
 80164ee:	f013 f968 	bl	80297c2 <_ZdlPvj>
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	4618      	mov	r0, r3
 80164f6:	3708      	adds	r7, #8
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bd80      	pop	{r7, pc}

080164fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80164fc:	b480      	push	{r7}
 80164fe:	b083      	sub	sp, #12
 8016500:	af00      	add	r7, sp, #0
 8016502:	4603      	mov	r3, r0
 8016504:	71fb      	strb	r3, [r7, #7]

}
 8016506:	bf00      	nop
 8016508:	370c      	adds	r7, #12
 801650a:	46bd      	mov	sp, r7
 801650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016510:	4770      	bx	lr

08016512 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8016512:	b480      	push	{r7}
 8016514:	b083      	sub	sp, #12
 8016516:	af00      	add	r7, sp, #0
 8016518:	4603      	mov	r3, r0
 801651a:	71fb      	strb	r3, [r7, #7]

}
 801651c:	bf00      	nop
 801651e:	370c      	adds	r7, #12
 8016520:	46bd      	mov	sp, r7
 8016522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016526:	4770      	bx	lr

08016528 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8016528:	b480      	push	{r7}
 801652a:	b083      	sub	sp, #12
 801652c:	af00      	add	r7, sp, #0
 801652e:	4603      	mov	r3, r0
 8016530:	71fb      	strb	r3, [r7, #7]

}
 8016532:	bf00      	nop
 8016534:	370c      	adds	r7, #12
 8016536:	46bd      	mov	sp, r7
 8016538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801653c:	4770      	bx	lr
	...

08016540 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8016540:	b480      	push	{r7}
 8016542:	b083      	sub	sp, #12
 8016544:	af00      	add	r7, sp, #0
 8016546:	6078      	str	r0, [r7, #4]
    {
 8016548:	4a04      	ldr	r2, [pc, #16]	; (801655c <_ZN8touchgfx3HALD1Ev+0x1c>)
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	601a      	str	r2, [r3, #0]
    }
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	4618      	mov	r0, r3
 8016552:	370c      	adds	r7, #12
 8016554:	46bd      	mov	sp, r7
 8016556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801655a:	4770      	bx	lr
 801655c:	0802c690 	.word	0x0802c690

08016560 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8016560:	b580      	push	{r7, lr}
 8016562:	b082      	sub	sp, #8
 8016564:	af00      	add	r7, sp, #0
 8016566:	6078      	str	r0, [r7, #4]
    }
 8016568:	6878      	ldr	r0, [r7, #4]
 801656a:	f7ff ffe9 	bl	8016540 <_ZN8touchgfx3HALD1Ev>
 801656e:	217c      	movs	r1, #124	; 0x7c
 8016570:	6878      	ldr	r0, [r7, #4]
 8016572:	f013 f926 	bl	80297c2 <_ZdlPvj>
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	4618      	mov	r0, r3
 801657a:	3708      	adds	r7, #8
 801657c:	46bd      	mov	sp, r7
 801657e:	bd80      	pop	{r7, pc}

08016580 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8016580:	b480      	push	{r7}
 8016582:	b083      	sub	sp, #12
 8016584:	af00      	add	r7, sp, #0
 8016586:	6078      	str	r0, [r7, #4]
 8016588:	460b      	mov	r3, r1
 801658a:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	78fa      	ldrb	r2, [r7, #3]
 8016590:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	2201      	movs	r2, #1
 8016598:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 801659c:	bf00      	nop
 801659e:	370c      	adds	r7, #12
 80165a0:	46bd      	mov	sp, r7
 80165a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a6:	4770      	bx	lr

080165a8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b082      	sub	sp, #8
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
 80165b0:	460b      	mov	r3, r1
 80165b2:	807b      	strh	r3, [r7, #2]
 80165b4:	4613      	mov	r3, r2
 80165b6:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80165b8:	4b0c      	ldr	r3, [pc, #48]	; (80165ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 80165ba:	881b      	ldrh	r3, [r3, #0]
 80165bc:	887a      	ldrh	r2, [r7, #2]
 80165be:	429a      	cmp	r2, r3
 80165c0:	d304      	bcc.n	80165cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 80165c2:	4b0b      	ldr	r3, [pc, #44]	; (80165f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 80165c4:	881b      	ldrh	r3, [r3, #0]
 80165c6:	883a      	ldrh	r2, [r7, #0]
 80165c8:	429a      	cmp	r2, r3
 80165ca:	d205      	bcs.n	80165d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 80165cc:	4b09      	ldr	r3, [pc, #36]	; (80165f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 80165ce:	4a0a      	ldr	r2, [pc, #40]	; (80165f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 80165d0:	219e      	movs	r1, #158	; 0x9e
 80165d2:	480a      	ldr	r0, [pc, #40]	; (80165fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 80165d4:	f013 f924 	bl	8029820 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80165d8:	4a09      	ldr	r2, [pc, #36]	; (8016600 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 80165da:	887b      	ldrh	r3, [r7, #2]
 80165dc:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 80165de:	4a09      	ldr	r2, [pc, #36]	; (8016604 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 80165e0:	883b      	ldrh	r3, [r7, #0]
 80165e2:	8013      	strh	r3, [r2, #0]
    }
 80165e4:	bf00      	nop
 80165e6:	3708      	adds	r7, #8
 80165e8:	46bd      	mov	sp, r7
 80165ea:	bd80      	pop	{r7, pc}
 80165ec:	20008e22 	.word	0x20008e22
 80165f0:	20008e24 	.word	0x20008e24
 80165f4:	0802b5e8 	.word	0x0802b5e8
 80165f8:	0802b64c 	.word	0x0802b64c
 80165fc:	0802b690 	.word	0x0802b690
 8016600:	20008e28 	.word	0x20008e28
 8016604:	20008e2a 	.word	0x20008e2a

08016608 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8016608:	b580      	push	{r7, lr}
 801660a:	b082      	sub	sp, #8
 801660c:	af00      	add	r7, sp, #0
 801660e:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8016616:	2b00      	cmp	r3, #0
 8016618:	d009      	beq.n	801662e <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	685a      	ldr	r2, [r3, #4]
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	685b      	ldr	r3, [r3, #4]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	4610      	mov	r0, r2
 8016628:	4798      	blx	r3
 801662a:	4603      	mov	r3, r0
 801662c:	e000      	b.n	8016630 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 801662e:	2300      	movs	r3, #0
    }
 8016630:	4618      	mov	r0, r3
 8016632:	3708      	adds	r7, #8
 8016634:	46bd      	mov	sp, r7
 8016636:	bd80      	pop	{r7, pc}

08016638 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8016638:	b580      	push	{r7, lr}
 801663a:	b082      	sub	sp, #8
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8016640:	6878      	ldr	r0, [r7, #4]
 8016642:	f002 fd7f 	bl	8019144 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	33ac      	adds	r3, #172	; 0xac
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	6878      	ldr	r0, [r7, #4]
 8016650:	4798      	blx	r3
    }
 8016652:	bf00      	nop
 8016654:	3708      	adds	r7, #8
 8016656:	46bd      	mov	sp, r7
 8016658:	bd80      	pop	{r7, pc}

0801665a <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 801665a:	b480      	push	{r7}
 801665c:	b083      	sub	sp, #12
 801665e:	af00      	add	r7, sp, #0
 8016660:	6078      	str	r0, [r7, #4]
 8016662:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8016664:	2300      	movs	r3, #0
    }
 8016666:	4618      	mov	r0, r3
 8016668:	370c      	adds	r7, #12
 801666a:	46bd      	mov	sp, r7
 801666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016670:	4770      	bx	lr
	...

08016674 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8016674:	b580      	push	{r7, lr}
 8016676:	b084      	sub	sp, #16
 8016678:	af00      	add	r7, sp, #0
 801667a:	60f8      	str	r0, [r7, #12]
 801667c:	60b9      	str	r1, [r7, #8]
 801667e:	607a      	str	r2, [r7, #4]
 8016680:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8016682:	68bb      	ldr	r3, [r7, #8]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d106      	bne.n	8016696 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8016688:	4b0f      	ldr	r3, [pc, #60]	; (80166c8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 801668a:	4a10      	ldr	r2, [pc, #64]	; (80166cc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 801668c:	f240 21d2 	movw	r1, #722	; 0x2d2
 8016690:	480f      	ldr	r0, [pc, #60]	; (80166d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8016692:	f013 f8c5 	bl	8029820 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	68ba      	ldr	r2, [r7, #8]
 801669a:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	687a      	ldr	r2, [r7, #4]
 80166a0:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	bf14      	ite	ne
 80166a8:	2301      	movne	r3, #1
 80166aa:	2300      	moveq	r3, #0
 80166ac:	b2da      	uxtb	r2, r3
 80166ae:	4b09      	ldr	r3, [pc, #36]	; (80166d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80166b0:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	338c      	adds	r3, #140	; 0x8c
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	6839      	ldr	r1, [r7, #0]
 80166bc:	68f8      	ldr	r0, [r7, #12]
 80166be:	4798      	blx	r3
    }
 80166c0:	bf00      	nop
 80166c2:	3710      	adds	r7, #16
 80166c4:	46bd      	mov	sp, r7
 80166c6:	bd80      	pop	{r7, pc}
 80166c8:	0802b6d4 	.word	0x0802b6d4
 80166cc:	0802b70c 	.word	0x0802b70c
 80166d0:	0802b690 	.word	0x0802b690
 80166d4:	20008e2c 	.word	0x20008e2c

080166d8 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 80166d8:	b480      	push	{r7}
 80166da:	b083      	sub	sp, #12
 80166dc:	af00      	add	r7, sp, #0
 80166de:	6078      	str	r0, [r7, #4]
 80166e0:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	683a      	ldr	r2, [r7, #0]
 80166e6:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80166e8:	683b      	ldr	r3, [r7, #0]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	bf14      	ite	ne
 80166ee:	2301      	movne	r3, #1
 80166f0:	2300      	moveq	r3, #0
 80166f2:	b2da      	uxtb	r2, r3
 80166f4:	4b03      	ldr	r3, [pc, #12]	; (8016704 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 80166f6:	701a      	strb	r2, [r3, #0]
    }
 80166f8:	bf00      	nop
 80166fa:	370c      	adds	r7, #12
 80166fc:	46bd      	mov	sp, r7
 80166fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016702:	4770      	bx	lr
 8016704:	20008e2d 	.word	0x20008e2d

08016708 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8016708:	b480      	push	{r7}
 801670a:	b083      	sub	sp, #12
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8016710:	2300      	movs	r3, #0
    }
 8016712:	4618      	mov	r0, r3
 8016714:	370c      	adds	r7, #12
 8016716:	46bd      	mov	sp, r7
 8016718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801671c:	4770      	bx	lr

0801671e <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 801671e:	b580      	push	{r7, lr}
 8016720:	b082      	sub	sp, #8
 8016722:	af00      	add	r7, sp, #0
 8016724:	6078      	str	r0, [r7, #4]
 8016726:	460b      	mov	r3, r1
 8016728:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801672e:	2b00      	cmp	r3, #0
 8016730:	d004      	beq.n	801673c <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016736:	887a      	ldrh	r2, [r7, #2]
 8016738:	4610      	mov	r0, r2
 801673a:	4798      	blx	r3
        }
    }
 801673c:	bf00      	nop
 801673e:	3708      	adds	r7, #8
 8016740:	46bd      	mov	sp, r7
 8016742:	bd80      	pop	{r7, pc}

08016744 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8016744:	b480      	push	{r7}
 8016746:	b083      	sub	sp, #12
 8016748:	af00      	add	r7, sp, #0
 801674a:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 801674c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8016750:	4618      	mov	r0, r3
 8016752:	370c      	adds	r7, #12
 8016754:	46bd      	mov	sp, r7
 8016756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801675a:	4770      	bx	lr

0801675c <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 801675c:	b580      	push	{r7, lr}
 801675e:	b082      	sub	sp, #8
 8016760:	af00      	add	r7, sp, #0
 8016762:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	685a      	ldr	r2, [r3, #4]
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	685b      	ldr	r3, [r3, #4]
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	3318      	adds	r3, #24
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	4610      	mov	r0, r2
 8016774:	4798      	blx	r3
 8016776:	4603      	mov	r3, r0
    }
 8016778:	4618      	mov	r0, r3
 801677a:	3708      	adds	r7, #8
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}

08016780 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8016780:	b480      	push	{r7}
 8016782:	b085      	sub	sp, #20
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016794:	429a      	cmp	r2, r3
 8016796:	d011      	beq.n	80167bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8016798:	4b14      	ldr	r3, [pc, #80]	; (80167ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801679a:	781b      	ldrb	r3, [r3, #0]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d11e      	bne.n	80167de <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80167a0:	4b13      	ldr	r3, [pc, #76]	; (80167f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80167a2:	881b      	ldrh	r3, [r3, #0]
 80167a4:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80167a6:	4b13      	ldr	r3, [pc, #76]	; (80167f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80167a8:	881a      	ldrh	r2, [r3, #0]
 80167aa:	4b11      	ldr	r3, [pc, #68]	; (80167f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80167ac:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 80167ae:	4a11      	ldr	r2, [pc, #68]	; (80167f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80167b0:	89bb      	ldrh	r3, [r7, #12]
 80167b2:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80167b4:	4b0d      	ldr	r3, [pc, #52]	; (80167ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80167b6:	2201      	movs	r2, #1
 80167b8:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80167ba:	e010      	b.n	80167de <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 80167bc:	4b0b      	ldr	r3, [pc, #44]	; (80167ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80167be:	781b      	ldrb	r3, [r3, #0]
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d00c      	beq.n	80167de <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 80167c4:	4b0a      	ldr	r3, [pc, #40]	; (80167f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80167c6:	881b      	ldrh	r3, [r3, #0]
 80167c8:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80167ca:	4b0a      	ldr	r3, [pc, #40]	; (80167f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80167cc:	881a      	ldrh	r2, [r3, #0]
 80167ce:	4b08      	ldr	r3, [pc, #32]	; (80167f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80167d0:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 80167d2:	4a08      	ldr	r2, [pc, #32]	; (80167f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80167d4:	89fb      	ldrh	r3, [r7, #14]
 80167d6:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80167d8:	4b04      	ldr	r3, [pc, #16]	; (80167ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80167da:	2200      	movs	r2, #0
 80167dc:	701a      	strb	r2, [r3, #0]
    }
 80167de:	bf00      	nop
 80167e0:	3714      	adds	r7, #20
 80167e2:	46bd      	mov	sp, r7
 80167e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167e8:	4770      	bx	lr
 80167ea:	bf00      	nop
 80167ec:	20008e26 	.word	0x20008e26
 80167f0:	20008e24 	.word	0x20008e24
 80167f4:	20008e22 	.word	0x20008e22

080167f8 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 80167f8:	b480      	push	{r7}
 80167fa:	b083      	sub	sp, #12
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]
    {
    }
 8016800:	bf00      	nop
 8016802:	370c      	adds	r7, #12
 8016804:	46bd      	mov	sp, r7
 8016806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801680a:	4770      	bx	lr

0801680c <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 801680c:	b480      	push	{r7}
 801680e:	b083      	sub	sp, #12
 8016810:	af00      	add	r7, sp, #0
 8016812:	6078      	str	r0, [r7, #4]
    {
    }
 8016814:	bf00      	nop
 8016816:	370c      	adds	r7, #12
 8016818:	46bd      	mov	sp, r7
 801681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681e:	4770      	bx	lr

08016820 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8016820:	b580      	push	{r7, lr}
 8016822:	b082      	sub	sp, #8
 8016824:	af00      	add	r7, sp, #0
 8016826:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	4618      	mov	r0, r3
 801682c:	f001 fef0 	bl	8018610 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8016830:	bf00      	nop
 8016832:	3708      	adds	r7, #8
 8016834:	46bd      	mov	sp, r7
 8016836:	bd80      	pop	{r7, pc}

08016838 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8016838:	b580      	push	{r7, lr}
 801683a:	b082      	sub	sp, #8
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
 8016840:	4a05      	ldr	r2, [pc, #20]	; (8016858 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	601a      	str	r2, [r3, #0]
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	4618      	mov	r0, r3
 801684a:	f7ff fe79 	bl	8016540 <_ZN8touchgfx3HALD1Ev>
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	4618      	mov	r0, r3
 8016852:	3708      	adds	r7, #8
 8016854:	46bd      	mov	sp, r7
 8016856:	bd80      	pop	{r7, pc}
 8016858:	0802c4e8 	.word	0x0802c4e8

0801685c <_ZN20TouchGFXGeneratedHALD0Ev>:
 801685c:	b580      	push	{r7, lr}
 801685e:	b082      	sub	sp, #8
 8016860:	af00      	add	r7, sp, #0
 8016862:	6078      	str	r0, [r7, #4]
 8016864:	6878      	ldr	r0, [r7, #4]
 8016866:	f7ff ffe7 	bl	8016838 <_ZN20TouchGFXGeneratedHALD1Ev>
 801686a:	217c      	movs	r1, #124	; 0x7c
 801686c:	6878      	ldr	r0, [r7, #4]
 801686e:	f012 ffa8 	bl	80297c2 <_ZdlPvj>
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	4618      	mov	r0, r3
 8016876:	3708      	adds	r7, #8
 8016878:	46bd      	mov	sp, r7
 801687a:	bd80      	pop	{r7, pc}

0801687c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801687c:	b580      	push	{r7, lr}
 801687e:	b082      	sub	sp, #8
 8016880:	af00      	add	r7, sp, #0
 8016882:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	4618      	mov	r0, r3
 8016888:	f7ff ffca 	bl	8016820 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 801688c:	bf00      	nop
 801688e:	3708      	adds	r7, #8
 8016890:	46bd      	mov	sp, r7
 8016892:	bd80      	pop	{r7, pc}

08016894 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b082      	sub	sp, #8
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	4618      	mov	r0, r3
 80168a0:	f001 fab4 	bl	8017e0c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80168a4:	bf00      	nop
 80168a6:	3708      	adds	r7, #8
 80168a8:	46bd      	mov	sp, r7
 80168aa:	bd80      	pop	{r7, pc}

080168ac <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b082      	sub	sp, #8
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	4618      	mov	r0, r3
 80168b8:	f001 fb4a 	bl	8017f50 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80168bc:	4603      	mov	r3, r0
}
 80168be:	4618      	mov	r0, r3
 80168c0:	3708      	adds	r7, #8
 80168c2:	46bd      	mov	sp, r7
 80168c4:	bd80      	pop	{r7, pc}

080168c6 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80168c6:	b580      	push	{r7, lr}
 80168c8:	b082      	sub	sp, #8
 80168ca:	af00      	add	r7, sp, #0
 80168cc:	6078      	str	r0, [r7, #4]
 80168ce:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	6839      	ldr	r1, [r7, #0]
 80168d4:	4618      	mov	r0, r3
 80168d6:	f001 fb49 	bl	8017f6c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80168da:	bf00      	nop
 80168dc:	3708      	adds	r7, #8
 80168de:	46bd      	mov	sp, r7
 80168e0:	bd80      	pop	{r7, pc}

080168e2 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80168e2:	b580      	push	{r7, lr}
 80168e4:	b082      	sub	sp, #8
 80168e6:	af00      	add	r7, sp, #0
 80168e8:	6078      	str	r0, [r7, #4]
 80168ea:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	6839      	ldr	r1, [r7, #0]
 80168f0:	4618      	mov	r0, r3
 80168f2:	f001 fb51 	bl	8017f98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 80168f6:	bf00      	nop
 80168f8:	3708      	adds	r7, #8
 80168fa:	46bd      	mov	sp, r7
 80168fc:	bd80      	pop	{r7, pc}

080168fe <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80168fe:	b580      	push	{r7, lr}
 8016900:	b084      	sub	sp, #16
 8016902:	af00      	add	r7, sp, #0
 8016904:	60f8      	str	r0, [r7, #12]
 8016906:	60b9      	str	r1, [r7, #8]
 8016908:	607a      	str	r2, [r7, #4]
 801690a:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 801690c:	68f8      	ldr	r0, [r7, #12]
 801690e:	683b      	ldr	r3, [r7, #0]
 8016910:	687a      	ldr	r2, [r7, #4]
 8016912:	68b9      	ldr	r1, [r7, #8]
 8016914:	f001 fb4e 	bl	8017fb4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8016918:	4603      	mov	r3, r0
}
 801691a:	4618      	mov	r0, r3
 801691c:	3710      	adds	r7, #16
 801691e:	46bd      	mov	sp, r7
 8016920:	bd80      	pop	{r7, pc}

08016922 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8016922:	b580      	push	{r7, lr}
 8016924:	b082      	sub	sp, #8
 8016926:	af00      	add	r7, sp, #0
 8016928:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	4618      	mov	r0, r3
 801692e:	f001 fa91 	bl	8017e54 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8016932:	bf00      	nop
 8016934:	3708      	adds	r7, #8
 8016936:	46bd      	mov	sp, r7
 8016938:	bd80      	pop	{r7, pc}

0801693a <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 801693a:	b580      	push	{r7, lr}
 801693c:	b082      	sub	sp, #8
 801693e:	af00      	add	r7, sp, #0
 8016940:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	4618      	mov	r0, r3
 8016946:	f001 fa95 	bl	8017e74 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 801694a:	bf00      	nop
 801694c:	3708      	adds	r7, #8
 801694e:	46bd      	mov	sp, r7
 8016950:	bd80      	pop	{r7, pc}

08016952 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8016952:	b580      	push	{r7, lr}
 8016954:	b082      	sub	sp, #8
 8016956:	af00      	add	r7, sp, #0
 8016958:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	4618      	mov	r0, r3
 801695e:	f001 fa97 	bl	8017e90 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8016962:	bf00      	nop
 8016964:	3708      	adds	r7, #8
 8016966:	46bd      	mov	sp, r7
 8016968:	bd80      	pop	{r7, pc}

0801696a <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 801696a:	b580      	push	{r7, lr}
 801696c:	b082      	sub	sp, #8
 801696e:	af00      	add	r7, sp, #0
 8016970:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	4618      	mov	r0, r3
 8016976:	f001 fa99 	bl	8017eac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 801697a:	bf00      	nop
 801697c:	3708      	adds	r7, #8
 801697e:	46bd      	mov	sp, r7
 8016980:	bd80      	pop	{r7, pc}

08016982 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 8016982:	b580      	push	{r7, lr}
 8016984:	b082      	sub	sp, #8
 8016986:	af00      	add	r7, sp, #0
 8016988:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	4618      	mov	r0, r3
 801698e:	f001 fabb 	bl	8017f08 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 8016992:	4603      	mov	r3, r0
}
 8016994:	4618      	mov	r0, r3
 8016996:	3708      	adds	r7, #8
 8016998:	46bd      	mov	sp, r7
 801699a:	bd80      	pop	{r7, pc}

0801699c <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b082      	sub	sp, #8
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	4618      	mov	r0, r3
 80169a8:	f001 fabc 	bl	8017f24 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 80169ac:	bf00      	nop
 80169ae:	3708      	adds	r7, #8
 80169b0:	46bd      	mov	sp, r7
 80169b2:	bd80      	pop	{r7, pc}

080169b4 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b082      	sub	sp, #8
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	6078      	str	r0, [r7, #4]
 80169bc:	4a05      	ldr	r2, [pc, #20]	; (80169d4 <_ZN11TouchGFXHALD1Ev+0x20>)
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	601a      	str	r2, [r3, #0]
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	4618      	mov	r0, r3
 80169c6:	f7ff ff37 	bl	8016838 <_ZN20TouchGFXGeneratedHALD1Ev>
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	4618      	mov	r0, r3
 80169ce:	3708      	adds	r7, #8
 80169d0:	46bd      	mov	sp, r7
 80169d2:	bd80      	pop	{r7, pc}
 80169d4:	0802c2c8 	.word	0x0802c2c8

080169d8 <_ZN11TouchGFXHALD0Ev>:
 80169d8:	b580      	push	{r7, lr}
 80169da:	b082      	sub	sp, #8
 80169dc:	af00      	add	r7, sp, #0
 80169de:	6078      	str	r0, [r7, #4]
 80169e0:	6878      	ldr	r0, [r7, #4]
 80169e2:	f7ff ffe7 	bl	80169b4 <_ZN11TouchGFXHALD1Ev>
 80169e6:	217c      	movs	r1, #124	; 0x7c
 80169e8:	6878      	ldr	r0, [r7, #4]
 80169ea:	f012 feea 	bl	80297c2 <_ZdlPvj>
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	4618      	mov	r0, r3
 80169f2:	3708      	adds	r7, #8
 80169f4:	46bd      	mov	sp, r7
 80169f6:	bd80      	pop	{r7, pc}

080169f8 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80169fc:	2200      	movs	r2, #0
 80169fe:	2101      	movs	r1, #1
 8016a00:	2001      	movs	r0, #1
 8016a02:	f7f7 ff1d 	bl	800e840 <osSemaphoreNew>
 8016a06:	4603      	mov	r3, r0
 8016a08:	4a0f      	ldr	r2, [pc, #60]	; (8016a48 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8016a0a:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8016a0c:	4b0e      	ldr	r3, [pc, #56]	; (8016a48 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d105      	bne.n	8016a20 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8016a14:	4b0d      	ldr	r3, [pc, #52]	; (8016a4c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8016a16:	4a0e      	ldr	r2, [pc, #56]	; (8016a50 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8016a18:	2128      	movs	r1, #40	; 0x28
 8016a1a:	480e      	ldr	r0, [pc, #56]	; (8016a54 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8016a1c:	f012 ff00 	bl	8029820 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8016a20:	2200      	movs	r2, #0
 8016a22:	2104      	movs	r1, #4
 8016a24:	2001      	movs	r0, #1
 8016a26:	f7f8 f82b 	bl	800ea80 <osMessageQueueNew>
 8016a2a:	4603      	mov	r3, r0
 8016a2c:	4a0a      	ldr	r2, [pc, #40]	; (8016a58 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8016a2e:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8016a30:	4b09      	ldr	r3, [pc, #36]	; (8016a58 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d105      	bne.n	8016a44 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8016a38:	4b08      	ldr	r3, [pc, #32]	; (8016a5c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8016a3a:	4a05      	ldr	r2, [pc, #20]	; (8016a50 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8016a3c:	212c      	movs	r1, #44	; 0x2c
 8016a3e:	4805      	ldr	r0, [pc, #20]	; (8016a54 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8016a40:	f012 feee 	bl	8029820 <__assert_func>
}
 8016a44:	bf00      	nop
 8016a46:	bd80      	pop	{r7, pc}
 8016a48:	20007b94 	.word	0x20007b94
 8016a4c:	0802b75c 	.word	0x0802b75c
 8016a50:	0802b7a8 	.word	0x0802b7a8
 8016a54:	0802b7d8 	.word	0x0802b7d8
 8016a58:	20007b98 	.word	0x20007b98
 8016a5c:	0802b804 	.word	0x0802b804

08016a60 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8016a60:	b580      	push	{r7, lr}
 8016a62:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8016a64:	4b04      	ldr	r3, [pc, #16]	; (8016a78 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	f04f 31ff 	mov.w	r1, #4294967295
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	f7f7 ff71 	bl	800e954 <osSemaphoreAcquire>
}
 8016a72:	bf00      	nop
 8016a74:	bd80      	pop	{r7, pc}
 8016a76:	bf00      	nop
 8016a78:	20007b94 	.word	0x20007b94

08016a7c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8016a7c:	b580      	push	{r7, lr}
 8016a7e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8016a80:	4b03      	ldr	r3, [pc, #12]	; (8016a90 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	4618      	mov	r0, r3
 8016a86:	f7f7 ffb7 	bl	800e9f8 <osSemaphoreRelease>
}
 8016a8a:	bf00      	nop
 8016a8c:	bd80      	pop	{r7, pc}
 8016a8e:	bf00      	nop
 8016a90:	20007b94 	.word	0x20007b94

08016a94 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8016a98:	4b03      	ldr	r3, [pc, #12]	; (8016aa8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	2100      	movs	r1, #0
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	f7f7 ff58 	bl	800e954 <osSemaphoreAcquire>
}
 8016aa4:	bf00      	nop
 8016aa6:	bd80      	pop	{r7, pc}
 8016aa8:	20007b94 	.word	0x20007b94

08016aac <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8016ab0:	4b03      	ldr	r3, [pc, #12]	; (8016ac0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	f7f7 ff9f 	bl	800e9f8 <osSemaphoreRelease>
}
 8016aba:	bf00      	nop
 8016abc:	bd80      	pop	{r7, pc}
 8016abe:	bf00      	nop
 8016ac0:	20007b94 	.word	0x20007b94

08016ac4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8016ac4:	b580      	push	{r7, lr}
 8016ac6:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8016ac8:	4b04      	ldr	r3, [pc, #16]	; (8016adc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8016aca:	6818      	ldr	r0, [r3, #0]
 8016acc:	2300      	movs	r3, #0
 8016ace:	2200      	movs	r2, #0
 8016ad0:	4903      	ldr	r1, [pc, #12]	; (8016ae0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8016ad2:	f7f8 f849 	bl	800eb68 <osMessageQueuePut>
}
 8016ad6:	bf00      	nop
 8016ad8:	bd80      	pop	{r7, pc}
 8016ada:	bf00      	nop
 8016adc:	20007b98 	.word	0x20007b98
 8016ae0:	20000018 	.word	0x20000018

08016ae4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b082      	sub	sp, #8
 8016ae8:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8016aea:	4b09      	ldr	r3, [pc, #36]	; (8016b10 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8016aec:	6818      	ldr	r0, [r3, #0]
 8016aee:	1d39      	adds	r1, r7, #4
 8016af0:	2300      	movs	r3, #0
 8016af2:	2200      	movs	r2, #0
 8016af4:	f7f8 f898 	bl	800ec28 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8016af8:	4b05      	ldr	r3, [pc, #20]	; (8016b10 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8016afa:	6818      	ldr	r0, [r3, #0]
 8016afc:	1d39      	adds	r1, r7, #4
 8016afe:	f04f 33ff 	mov.w	r3, #4294967295
 8016b02:	2200      	movs	r2, #0
 8016b04:	f7f8 f890 	bl	800ec28 <osMessageQueueGet>
}
 8016b08:	bf00      	nop
 8016b0a:	3708      	adds	r7, #8
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	bd80      	pop	{r7, pc}
 8016b10:	20007b98 	.word	0x20007b98

08016b14 <__NVIC_EnableIRQ>:
{
 8016b14:	b480      	push	{r7}
 8016b16:	b083      	sub	sp, #12
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	4603      	mov	r3, r0
 8016b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	db0b      	blt.n	8016b3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016b26:	79fb      	ldrb	r3, [r7, #7]
 8016b28:	f003 021f 	and.w	r2, r3, #31
 8016b2c:	4907      	ldr	r1, [pc, #28]	; (8016b4c <__NVIC_EnableIRQ+0x38>)
 8016b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016b32:	095b      	lsrs	r3, r3, #5
 8016b34:	2001      	movs	r0, #1
 8016b36:	fa00 f202 	lsl.w	r2, r0, r2
 8016b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016b3e:	bf00      	nop
 8016b40:	370c      	adds	r7, #12
 8016b42:	46bd      	mov	sp, r7
 8016b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b48:	4770      	bx	lr
 8016b4a:	bf00      	nop
 8016b4c:	e000e100 	.word	0xe000e100

08016b50 <__NVIC_DisableIRQ>:
{
 8016b50:	b480      	push	{r7}
 8016b52:	b083      	sub	sp, #12
 8016b54:	af00      	add	r7, sp, #0
 8016b56:	4603      	mov	r3, r0
 8016b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	db12      	blt.n	8016b88 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016b62:	79fb      	ldrb	r3, [r7, #7]
 8016b64:	f003 021f 	and.w	r2, r3, #31
 8016b68:	490a      	ldr	r1, [pc, #40]	; (8016b94 <__NVIC_DisableIRQ+0x44>)
 8016b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016b6e:	095b      	lsrs	r3, r3, #5
 8016b70:	2001      	movs	r0, #1
 8016b72:	fa00 f202 	lsl.w	r2, r0, r2
 8016b76:	3320      	adds	r3, #32
 8016b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8016b7c:	f3bf 8f4f 	dsb	sy
}
 8016b80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016b82:	f3bf 8f6f 	isb	sy
}
 8016b86:	bf00      	nop
}
 8016b88:	bf00      	nop
 8016b8a:	370c      	adds	r7, #12
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b92:	4770      	bx	lr
 8016b94:	e000e100 	.word	0xe000e100

08016b98 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8016b98:	b480      	push	{r7}
 8016b9a:	b083      	sub	sp, #12
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	6078      	str	r0, [r7, #4]
        : color(0)
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	601a      	str	r2, [r3, #0]
    }
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	4618      	mov	r0, r3
 8016baa:	370c      	adds	r7, #12
 8016bac:	46bd      	mov	sp, r7
 8016bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb2:	4770      	bx	lr

08016bb4 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 8016bb4:	b480      	push	{r7}
 8016bb6:	b083      	sub	sp, #12
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	6078      	str	r0, [r7, #4]
        return color;
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	681b      	ldr	r3, [r3, #0]
    }
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	370c      	adds	r7, #12
 8016bc4:	46bd      	mov	sp, r7
 8016bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bca:	4770      	bx	lr

08016bcc <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8016bcc:	b480      	push	{r7}
 8016bce:	b083      	sub	sp, #12
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	6078      	str	r0, [r7, #4]
    {
 8016bd4:	4a04      	ldr	r2, [pc, #16]	; (8016be8 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	601a      	str	r2, [r3, #0]
    }
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	4618      	mov	r0, r3
 8016bde:	370c      	adds	r7, #12
 8016be0:	46bd      	mov	sp, r7
 8016be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016be6:	4770      	bx	lr
 8016be8:	0802c3f0 	.word	0x0802c3f0

08016bec <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8016bec:	b580      	push	{r7, lr}
 8016bee:	b082      	sub	sp, #8
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	6078      	str	r0, [r7, #4]
    }
 8016bf4:	6878      	ldr	r0, [r7, #4]
 8016bf6:	f7ff ffe9 	bl	8016bcc <_ZN8touchgfx9DMA_QueueD1Ev>
 8016bfa:	2104      	movs	r1, #4
 8016bfc:	6878      	ldr	r0, [r7, #4]
 8016bfe:	f012 fde0 	bl	80297c2 <_ZdlPvj>
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	4618      	mov	r0, r3
 8016c06:	3708      	adds	r7, #8
 8016c08:	46bd      	mov	sp, r7
 8016c0a:	bd80      	pop	{r7, pc}

08016c0c <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8016c0c:	b580      	push	{r7, lr}
 8016c0e:	b082      	sub	sp, #8
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	3344      	adds	r3, #68	; 0x44
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	6878      	ldr	r0, [r7, #4]
 8016c1e:	4798      	blx	r3
    }
 8016c20:	bf00      	nop
 8016c22:	3708      	adds	r7, #8
 8016c24:	46bd      	mov	sp, r7
 8016c26:	bd80      	pop	{r7, pc}

08016c28 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8016c28:	b480      	push	{r7}
 8016c2a:	b083      	sub	sp, #12
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	6078      	str	r0, [r7, #4]
    {
 8016c30:	4a04      	ldr	r2, [pc, #16]	; (8016c44 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	601a      	str	r2, [r3, #0]
    }
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	4618      	mov	r0, r3
 8016c3a:	370c      	adds	r7, #12
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c42:	4770      	bx	lr
 8016c44:	0802c768 	.word	0x0802c768

08016c48 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8016c48:	b580      	push	{r7, lr}
 8016c4a:	b082      	sub	sp, #8
 8016c4c:	af00      	add	r7, sp, #0
 8016c4e:	6078      	str	r0, [r7, #4]
    }
 8016c50:	6878      	ldr	r0, [r7, #4]
 8016c52:	f7ff ffe9 	bl	8016c28 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8016c56:	210c      	movs	r1, #12
 8016c58:	6878      	ldr	r0, [r7, #4]
 8016c5a:	f012 fdb2 	bl	80297c2 <_ZdlPvj>
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	4618      	mov	r0, r3
 8016c62:	3708      	adds	r7, #8
 8016c64:	46bd      	mov	sp, r7
 8016c66:	bd80      	pop	{r7, pc}

08016c68 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8016c68:	b480      	push	{r7}
 8016c6a:	b083      	sub	sp, #12
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]
 8016c70:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8016c72:	4a09      	ldr	r2, [pc, #36]	; (8016c98 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	601a      	str	r2, [r3, #0]
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	683a      	ldr	r2, [r7, #0]
 8016c7c:	605a      	str	r2, [r3, #4]
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	2200      	movs	r2, #0
 8016c82:	721a      	strb	r2, [r3, #8]
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	2200      	movs	r2, #0
 8016c88:	725a      	strb	r2, [r3, #9]
    {
    }
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	370c      	adds	r7, #12
 8016c90:	46bd      	mov	sp, r7
 8016c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c96:	4770      	bx	lr
 8016c98:	0802c768 	.word	0x0802c768

08016c9c <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8016c9c:	b480      	push	{r7}
 8016c9e:	b083      	sub	sp, #12
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8016ca4:	2301      	movs	r3, #1
    }
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	370c      	adds	r7, #12
 8016caa:	46bd      	mov	sp, r7
 8016cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb0:	4770      	bx	lr

08016cb2 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8016cb2:	b580      	push	{r7, lr}
 8016cb4:	b082      	sub	sp, #8
 8016cb6:	af00      	add	r7, sp, #0
 8016cb8:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8016cba:	687a      	ldr	r2, [r7, #4]
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	3328      	adds	r3, #40	; 0x28
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	4610      	mov	r0, r2
 8016cc6:	4798      	blx	r3
    }
 8016cc8:	bf00      	nop
 8016cca:	3708      	adds	r7, #8
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	bd80      	pop	{r7, pc}

08016cd0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b082      	sub	sp, #8
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	685a      	ldr	r2, [r3, #4]
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	685b      	ldr	r3, [r3, #4]
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	3314      	adds	r3, #20
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	4610      	mov	r0, r2
 8016ce8:	4798      	blx	r3
    }
 8016cea:	bf00      	nop
 8016cec:	3708      	adds	r7, #8
 8016cee:	46bd      	mov	sp, r7
 8016cf0:	bd80      	pop	{r7, pc}

08016cf2 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 8016cf2:	b580      	push	{r7, lr}
 8016cf4:	b082      	sub	sp, #8
 8016cf6:	af00      	add	r7, sp, #0
 8016cf8:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 8016cfa:	f7fb fe3d 	bl	8012978 <_ZN8touchgfx3HAL11getInstanceEv>
 8016cfe:	4603      	mov	r3, r0
 8016d00:	4618      	mov	r0, r3
 8016d02:	f7ff ffe5 	bl	8016cd0 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 8016d06:	bf00      	nop
 8016d08:	3708      	adds	r7, #8
 8016d0a:	46bd      	mov	sp, r7
 8016d0c:	bd80      	pop	{r7, pc}

08016d0e <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8016d0e:	b580      	push	{r7, lr}
 8016d10:	b082      	sub	sp, #8
 8016d12:	af00      	add	r7, sp, #0
 8016d14:	6078      	str	r0, [r7, #4]
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	330c      	adds	r3, #12
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	f7ff ff3c 	bl	8016b98 <_ZN8touchgfx9colortypeC1Ev>
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	4618      	mov	r0, r3
 8016d24:	3708      	adds	r7, #8
 8016d26:	46bd      	mov	sp, r7
 8016d28:	bd80      	pop	{r7, pc}
	...

08016d2c <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8016d2c:	b5b0      	push	{r4, r5, r7, lr}
 8016d2e:	b082      	sub	sp, #8
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8016d34:	687a      	ldr	r2, [r7, #4]
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	330c      	adds	r3, #12
 8016d3a:	4619      	mov	r1, r3
 8016d3c:	4610      	mov	r0, r2
 8016d3e:	f7ff ff93 	bl	8016c68 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8016d42:	4a0e      	ldr	r2, [pc, #56]	; (8016d7c <_ZN8STM32DMAC1Ev+0x50>)
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	601a      	str	r2, [r3, #0]
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	f103 000c 	add.w	r0, r3, #12
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	3320      	adds	r3, #32
 8016d52:	2260      	movs	r2, #96	; 0x60
 8016d54:	4619      	mov	r1, r3
 8016d56:	f002 fb2f 	bl	80193b8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	3320      	adds	r3, #32
 8016d5e:	245f      	movs	r4, #95	; 0x5f
 8016d60:	461d      	mov	r5, r3
 8016d62:	2c00      	cmp	r4, #0
 8016d64:	db05      	blt.n	8016d72 <_ZN8STM32DMAC1Ev+0x46>
 8016d66:	4628      	mov	r0, r5
 8016d68:	f7ff ffd1 	bl	8016d0e <_ZN8touchgfx6BlitOpC1Ev>
 8016d6c:	3524      	adds	r5, #36	; 0x24
 8016d6e:	3c01      	subs	r4, #1
 8016d70:	e7f7      	b.n	8016d62 <_ZN8STM32DMAC1Ev+0x36>
{
}
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	4618      	mov	r0, r3
 8016d76:	3708      	adds	r7, #8
 8016d78:	46bd      	mov	sp, r7
 8016d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8016d7c:	0802c3a0 	.word	0x0802c3a0

08016d80 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b082      	sub	sp, #8
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	6078      	str	r0, [r7, #4]
 8016d88:	4a09      	ldr	r2, [pc, #36]	; (8016db0 <_ZN8STM32DMAD1Ev+0x30>)
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8016d8e:	205a      	movs	r0, #90	; 0x5a
 8016d90:	f7ff fede 	bl	8016b50 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	330c      	adds	r3, #12
 8016d98:	4618      	mov	r0, r3
 8016d9a:	f000 fac7 	bl	801732c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	4618      	mov	r0, r3
 8016da2:	f7ff ff41 	bl	8016c28 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	4618      	mov	r0, r3
 8016daa:	3708      	adds	r7, #8
 8016dac:	46bd      	mov	sp, r7
 8016dae:	bd80      	pop	{r7, pc}
 8016db0:	0802c3a0 	.word	0x0802c3a0

08016db4 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8016db4:	b580      	push	{r7, lr}
 8016db6:	b082      	sub	sp, #8
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	6078      	str	r0, [r7, #4]
}
 8016dbc:	6878      	ldr	r0, [r7, #4]
 8016dbe:	f7ff ffdf 	bl	8016d80 <_ZN8STM32DMAD1Ev>
 8016dc2:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8016dc6:	6878      	ldr	r0, [r7, #4]
 8016dc8:	f012 fcfb 	bl	80297c2 <_ZdlPvj>
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	4618      	mov	r0, r3
 8016dd0:	3708      	adds	r7, #8
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	bd80      	pop	{r7, pc}
	...

08016dd8 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8016dd8:	b580      	push	{r7, lr}
 8016dda:	b084      	sub	sp, #16
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8016de0:	2300      	movs	r3, #0
 8016de2:	60fb      	str	r3, [r7, #12]
 8016de4:	4b10      	ldr	r3, [pc, #64]	; (8016e28 <_ZN8STM32DMA10initializeEv+0x50>)
 8016de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016de8:	4a0f      	ldr	r2, [pc, #60]	; (8016e28 <_ZN8STM32DMA10initializeEv+0x50>)
 8016dea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016dee:	6313      	str	r3, [r2, #48]	; 0x30
 8016df0:	4b0d      	ldr	r3, [pc, #52]	; (8016e28 <_ZN8STM32DMA10initializeEv+0x50>)
 8016df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016df4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016df8:	60fb      	str	r3, [r7, #12]
 8016dfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8016dfc:	4b0a      	ldr	r3, [pc, #40]	; (8016e28 <_ZN8STM32DMA10initializeEv+0x50>)
 8016dfe:	691b      	ldr	r3, [r3, #16]
 8016e00:	4a09      	ldr	r2, [pc, #36]	; (8016e28 <_ZN8STM32DMA10initializeEv+0x50>)
 8016e02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016e06:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8016e08:	4b07      	ldr	r3, [pc, #28]	; (8016e28 <_ZN8STM32DMA10initializeEv+0x50>)
 8016e0a:	691b      	ldr	r3, [r3, #16]
 8016e0c:	4a06      	ldr	r2, [pc, #24]	; (8016e28 <_ZN8STM32DMA10initializeEv+0x50>)
 8016e0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8016e12:	6113      	str	r3, [r2, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8016e14:	4b05      	ldr	r3, [pc, #20]	; (8016e2c <_ZN8STM32DMA10initializeEv+0x54>)
 8016e16:	4a06      	ldr	r2, [pc, #24]	; (8016e30 <_ZN8STM32DMA10initializeEv+0x58>)
 8016e18:	611a      	str	r2, [r3, #16]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 8016e1a:	205a      	movs	r0, #90	; 0x5a
 8016e1c:	f7ff fe7a 	bl	8016b14 <__NVIC_EnableIRQ>
}
 8016e20:	bf00      	nop
 8016e22:	3710      	adds	r7, #16
 8016e24:	46bd      	mov	sp, r7
 8016e26:	bd80      	pop	{r7, pc}
 8016e28:	40023800 	.word	0x40023800
 8016e2c:	2000a720 	.word	0x2000a720
 8016e30:	08016cf3 	.word	0x08016cf3

08016e34 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b084      	sub	sp, #16
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
 8016e3c:	460b      	mov	r3, r1
 8016e3e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8016e40:	2300      	movs	r3, #0
 8016e42:	60fb      	str	r3, [r7, #12]

    switch (format)
 8016e44:	78fb      	ldrb	r3, [r7, #3]
 8016e46:	2b0b      	cmp	r3, #11
 8016e48:	d826      	bhi.n	8016e98 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8016e4a:	a201      	add	r2, pc, #4	; (adr r2, 8016e50 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8016e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e50:	08016e8d 	.word	0x08016e8d
 8016e54:	08016e87 	.word	0x08016e87
 8016e58:	08016e81 	.word	0x08016e81
 8016e5c:	08016e99 	.word	0x08016e99
 8016e60:	08016e99 	.word	0x08016e99
 8016e64:	08016e99 	.word	0x08016e99
 8016e68:	08016e99 	.word	0x08016e99
 8016e6c:	08016e93 	.word	0x08016e93
 8016e70:	08016e93 	.word	0x08016e93
 8016e74:	08016e93 	.word	0x08016e93
 8016e78:	08016e93 	.word	0x08016e93
 8016e7c:	08016e93 	.word	0x08016e93
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8016e80:	2300      	movs	r3, #0
 8016e82:	60fb      	str	r3, [r7, #12]
        break;
 8016e84:	e00e      	b.n	8016ea4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8016e86:	2301      	movs	r3, #1
 8016e88:	60fb      	str	r3, [r7, #12]
        break;
 8016e8a:	e00b      	b.n	8016ea4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8016e8c:	2302      	movs	r3, #2
 8016e8e:	60fb      	str	r3, [r7, #12]
        break;
 8016e90:	e008      	b.n	8016ea4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8016e92:	2305      	movs	r3, #5
 8016e94:	60fb      	str	r3, [r7, #12]
        break;
 8016e96:	e005      	b.n	8016ea4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8016e98:	4b05      	ldr	r3, [pc, #20]	; (8016eb0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8016e9a:	4a06      	ldr	r2, [pc, #24]	; (8016eb4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8016e9c:	2166      	movs	r1, #102	; 0x66
 8016e9e:	4806      	ldr	r0, [pc, #24]	; (8016eb8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8016ea0:	f012 fcbe 	bl	8029820 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8016ea4:	68fb      	ldr	r3, [r7, #12]
}
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	3710      	adds	r7, #16
 8016eaa:	46bd      	mov	sp, r7
 8016eac:	bd80      	pop	{r7, pc}
 8016eae:	bf00      	nop
 8016eb0:	0802b848 	.word	0x0802b848
 8016eb4:	0802b864 	.word	0x0802b864
 8016eb8:	0802b8b0 	.word	0x0802b8b0

08016ebc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	b084      	sub	sp, #16
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	6078      	str	r0, [r7, #4]
 8016ec4:	460b      	mov	r3, r1
 8016ec6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8016ec8:	2300      	movs	r3, #0
 8016eca:	60fb      	str	r3, [r7, #12]

    switch (format)
 8016ecc:	78fb      	ldrb	r3, [r7, #3]
 8016ece:	2b0a      	cmp	r3, #10
 8016ed0:	d821      	bhi.n	8016f16 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8016ed2:	a201      	add	r2, pc, #4	; (adr r2, 8016ed8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8016ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ed8:	08016f11 	.word	0x08016f11
 8016edc:	08016f0b 	.word	0x08016f0b
 8016ee0:	08016f05 	.word	0x08016f05
 8016ee4:	08016f17 	.word	0x08016f17
 8016ee8:	08016f17 	.word	0x08016f17
 8016eec:	08016f17 	.word	0x08016f17
 8016ef0:	08016f17 	.word	0x08016f17
 8016ef4:	08016f0b 	.word	0x08016f0b
 8016ef8:	08016f0b 	.word	0x08016f0b
 8016efc:	08016f0b 	.word	0x08016f0b
 8016f00:	08016f0b 	.word	0x08016f0b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8016f04:	2300      	movs	r3, #0
 8016f06:	60fb      	str	r3, [r7, #12]
        break;
 8016f08:	e00b      	b.n	8016f22 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8016f0a:	2301      	movs	r3, #1
 8016f0c:	60fb      	str	r3, [r7, #12]
        break;
 8016f0e:	e008      	b.n	8016f22 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8016f10:	2302      	movs	r3, #2
 8016f12:	60fb      	str	r3, [r7, #12]
        break;
 8016f14:	e005      	b.n	8016f22 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8016f16:	4b05      	ldr	r3, [pc, #20]	; (8016f2c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8016f18:	4a05      	ldr	r2, [pc, #20]	; (8016f30 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8016f1a:	2187      	movs	r1, #135	; 0x87
 8016f1c:	4805      	ldr	r0, [pc, #20]	; (8016f34 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8016f1e:	f012 fc7f 	bl	8029820 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8016f22:	68fb      	ldr	r3, [r7, #12]
}
 8016f24:	4618      	mov	r0, r3
 8016f26:	3710      	adds	r7, #16
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	bd80      	pop	{r7, pc}
 8016f2c:	0802b848 	.word	0x0802b848
 8016f30:	0802b8dc 	.word	0x0802b8dc
 8016f34:	0802b8b0 	.word	0x0802b8b0

08016f38 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8016f38:	b480      	push	{r7}
 8016f3a:	b083      	sub	sp, #12
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8016f40:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 8016f44:	4618      	mov	r0, r3
 8016f46:	370c      	adds	r7, #12
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f4e:	4770      	bx	lr

08016f50 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8016f50:	b590      	push	{r4, r7, lr}
 8016f52:	b089      	sub	sp, #36	; 0x24
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	6078      	str	r0, [r7, #4]
 8016f58:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8016f5a:	683b      	ldr	r3, [r7, #0]
 8016f5c:	7f5b      	ldrb	r3, [r3, #29]
 8016f5e:	4619      	mov	r1, r3
 8016f60:	6878      	ldr	r0, [r7, #4]
 8016f62:	f7ff ff67 	bl	8016e34 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8016f66:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8016f68:	683b      	ldr	r3, [r7, #0]
 8016f6a:	7f9b      	ldrb	r3, [r3, #30]
 8016f6c:	4619      	mov	r1, r3
 8016f6e:	6878      	ldr	r0, [r7, #4]
 8016f70:	f7ff ff60 	bl	8016e34 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8016f74:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8016f76:	683b      	ldr	r3, [r7, #0]
 8016f78:	7f9b      	ldrb	r3, [r3, #30]
 8016f7a:	4619      	mov	r1, r3
 8016f7c:	6878      	ldr	r0, [r7, #4]
 8016f7e:	f7ff ff9d 	bl	8016ebc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8016f82:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8016f84:	683b      	ldr	r3, [r7, #0]
 8016f86:	8b5b      	ldrh	r3, [r3, #26]
 8016f88:	461a      	mov	r2, r3
 8016f8a:	683b      	ldr	r3, [r7, #0]
 8016f8c:	8a9b      	ldrh	r3, [r3, #20]
 8016f8e:	1ad2      	subs	r2, r2, r3
 8016f90:	4b95      	ldr	r3, [pc, #596]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016f92:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8016f94:	683b      	ldr	r3, [r7, #0]
 8016f96:	8b5b      	ldrh	r3, [r3, #26]
 8016f98:	461a      	mov	r2, r3
 8016f9a:	683b      	ldr	r3, [r7, #0]
 8016f9c:	8a9b      	ldrh	r3, [r3, #20]
 8016f9e:	1ad2      	subs	r2, r2, r3
 8016fa0:	4b91      	ldr	r3, [pc, #580]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016fa2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8016fa4:	683b      	ldr	r3, [r7, #0]
 8016fa6:	8b1b      	ldrh	r3, [r3, #24]
 8016fa8:	461a      	mov	r2, r3
 8016faa:	683b      	ldr	r3, [r7, #0]
 8016fac:	8a9b      	ldrh	r3, [r3, #20]
 8016fae:	1ad2      	subs	r2, r2, r3
 8016fb0:	4b8d      	ldr	r3, [pc, #564]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016fb2:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8016fb4:	4a8c      	ldr	r2, [pc, #560]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016fb6:	693b      	ldr	r3, [r7, #16]
 8016fb8:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8016fba:	683b      	ldr	r3, [r7, #0]
 8016fbc:	8adb      	ldrh	r3, [r3, #22]
 8016fbe:	461a      	mov	r2, r3
 8016fc0:	683b      	ldr	r3, [r7, #0]
 8016fc2:	8a9b      	ldrh	r3, [r3, #20]
 8016fc4:	041b      	lsls	r3, r3, #16
 8016fc6:	431a      	orrs	r2, r3
 8016fc8:	4b87      	ldr	r3, [pc, #540]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016fca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8016fcc:	683b      	ldr	r3, [r7, #0]
 8016fce:	691a      	ldr	r2, [r3, #16]
 8016fd0:	4b85      	ldr	r3, [pc, #532]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016fd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8016fd4:	683b      	ldr	r3, [r7, #0]
 8016fd6:	685a      	ldr	r2, [r3, #4]
 8016fd8:	4b83      	ldr	r3, [pc, #524]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8016fda:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8016fdc:	683b      	ldr	r3, [r7, #0]
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016fe4:	d037      	beq.n	8017056 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 8016fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016fea:	f200 80e8 	bhi.w	80171be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8016fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ff2:	d014      	beq.n	801701e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8016ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ff8:	f200 80e1 	bhi.w	80171be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8016ffc:	2b80      	cmp	r3, #128	; 0x80
 8016ffe:	d05b      	beq.n	80170b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
 8017000:	2b80      	cmp	r3, #128	; 0x80
 8017002:	f200 80dc 	bhi.w	80171be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8017006:	2b40      	cmp	r3, #64	; 0x40
 8017008:	f000 80c4 	beq.w	8017194 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 801700c:	2b40      	cmp	r3, #64	; 0x40
 801700e:	f200 80d6 	bhi.w	80171be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
 8017012:	2b04      	cmp	r3, #4
 8017014:	d03b      	beq.n	801708e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
 8017016:	2b20      	cmp	r3, #32
 8017018:	f000 80bc 	beq.w	8017194 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x244>
 801701c:	e0cf      	b.n	80171be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x26e>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801701e:	683b      	ldr	r3, [r7, #0]
 8017020:	7f1b      	ldrb	r3, [r3, #28]
 8017022:	061b      	lsls	r3, r3, #24
 8017024:	4a70      	ldr	r2, [pc, #448]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8017026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801702a:	f043 030a 	orr.w	r3, r3, #10
 801702e:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8017030:	683b      	ldr	r3, [r7, #0]
 8017032:	330c      	adds	r3, #12
 8017034:	4c6c      	ldr	r4, [pc, #432]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8017036:	4618      	mov	r0, r3
 8017038:	f7ff fdbc 	bl	8016bb4 <_ZNK8touchgfx9colortypecvmEv>
 801703c:	4603      	mov	r3, r0
 801703e:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8017040:	4a69      	ldr	r2, [pc, #420]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8017042:	697b      	ldr	r3, [r7, #20]
 8017044:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8017046:	683b      	ldr	r3, [r7, #0]
 8017048:	691a      	ldr	r2, [r3, #16]
 801704a:	4b67      	ldr	r3, [pc, #412]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801704c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801704e:	4b66      	ldr	r3, [pc, #408]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8017050:	4a66      	ldr	r2, [pc, #408]	; (80171ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8017052:	601a      	str	r2, [r3, #0]
        break;
 8017054:	e0d9      	b.n	801720a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8017056:	683b      	ldr	r3, [r7, #0]
 8017058:	7f1b      	ldrb	r3, [r3, #28]
 801705a:	061b      	lsls	r3, r3, #24
 801705c:	4a62      	ldr	r2, [pc, #392]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801705e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017062:	f043 0309 	orr.w	r3, r3, #9
 8017066:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8017068:	683b      	ldr	r3, [r7, #0]
 801706a:	330c      	adds	r3, #12
 801706c:	4c5e      	ldr	r4, [pc, #376]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801706e:	4618      	mov	r0, r3
 8017070:	f7ff fda0 	bl	8016bb4 <_ZNK8touchgfx9colortypecvmEv>
 8017074:	4603      	mov	r3, r0
 8017076:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8017078:	4a5b      	ldr	r2, [pc, #364]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801707a:	697b      	ldr	r3, [r7, #20]
 801707c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801707e:	683b      	ldr	r3, [r7, #0]
 8017080:	691a      	ldr	r2, [r3, #16]
 8017082:	4b59      	ldr	r3, [pc, #356]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8017084:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8017086:	4b58      	ldr	r3, [pc, #352]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8017088:	4a58      	ldr	r2, [pc, #352]	; (80171ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801708a:	601a      	str	r2, [r3, #0]
        break;
 801708c:	e0bd      	b.n	801720a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 801708e:	683b      	ldr	r3, [r7, #0]
 8017090:	7f1b      	ldrb	r3, [r3, #28]
 8017092:	061b      	lsls	r3, r3, #24
 8017094:	461a      	mov	r2, r3
 8017096:	69bb      	ldr	r3, [r7, #24]
 8017098:	4313      	orrs	r3, r2
 801709a:	4a53      	ldr	r2, [pc, #332]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801709c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80170a0:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80170a2:	4a51      	ldr	r2, [pc, #324]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80170a4:	697b      	ldr	r3, [r7, #20]
 80170a6:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80170a8:	683b      	ldr	r3, [r7, #0]
 80170aa:	691a      	ldr	r2, [r3, #16]
 80170ac:	4b4e      	ldr	r3, [pc, #312]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80170ae:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80170b0:	4b4d      	ldr	r3, [pc, #308]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80170b2:	4a4e      	ldr	r2, [pc, #312]	; (80171ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80170b4:	601a      	str	r2, [r3, #0]
        break;
 80170b6:	e0a8      	b.n	801720a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 80170b8:	2301      	movs	r3, #1
 80170ba:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80170bc:	683b      	ldr	r3, [r7, #0]
 80170be:	689b      	ldr	r3, [r3, #8]
 80170c0:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	1d1a      	adds	r2, r3, #4
 80170c6:	4b48      	ldr	r3, [pc, #288]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80170c8:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80170ca:	683b      	ldr	r3, [r7, #0]
 80170cc:	7f1b      	ldrb	r3, [r3, #28]
 80170ce:	061b      	lsls	r3, r3, #24
 80170d0:	461a      	mov	r2, r3
 80170d2:	69bb      	ldr	r3, [r7, #24]
 80170d4:	4313      	orrs	r3, r2
 80170d6:	4a44      	ldr	r2, [pc, #272]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80170d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80170dc:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80170de:	4a42      	ldr	r2, [pc, #264]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80170e0:	697b      	ldr	r3, [r7, #20]
 80170e2:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80170e4:	683b      	ldr	r3, [r7, #0]
 80170e6:	691a      	ldr	r2, [r3, #16]
 80170e8:	4b3f      	ldr	r3, [pc, #252]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80170ea:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	881b      	ldrh	r3, [r3, #0]
 80170f0:	b2db      	uxtb	r3, r3
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d002      	beq.n	80170fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ac>
 80170f6:	2b01      	cmp	r3, #1
 80170f8:	d00f      	beq.n	801711a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ca>
 80170fa:	e024      	b.n	8017146 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f6>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80170fc:	4b3a      	ldr	r3, [pc, #232]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80170fe:	69db      	ldr	r3, [r3, #28]
 8017100:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8017104:	f023 0310 	bic.w	r3, r3, #16
 8017108:	68fa      	ldr	r2, [r7, #12]
 801710a:	8852      	ldrh	r2, [r2, #2]
 801710c:	3a01      	subs	r2, #1
 801710e:	0212      	lsls	r2, r2, #8
 8017110:	4611      	mov	r1, r2
 8017112:	4a35      	ldr	r2, [pc, #212]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8017114:	430b      	orrs	r3, r1
 8017116:	61d3      	str	r3, [r2, #28]
                break;
 8017118:	e01c      	b.n	8017154 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 801711a:	683b      	ldr	r3, [r7, #0]
 801711c:	7f1b      	ldrb	r3, [r3, #28]
 801711e:	2bff      	cmp	r3, #255	; 0xff
 8017120:	d101      	bne.n	8017126 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d6>
                {
                    blend = false;
 8017122:	2300      	movs	r3, #0
 8017124:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8017126:	4b30      	ldr	r3, [pc, #192]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8017128:	69db      	ldr	r3, [r3, #28]
 801712a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801712e:	f023 0310 	bic.w	r3, r3, #16
 8017132:	68fa      	ldr	r2, [r7, #12]
 8017134:	8852      	ldrh	r2, [r2, #2]
 8017136:	3a01      	subs	r2, #1
 8017138:	0212      	lsls	r2, r2, #8
 801713a:	4313      	orrs	r3, r2
 801713c:	4a2a      	ldr	r2, [pc, #168]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801713e:	f043 0310 	orr.w	r3, r3, #16
 8017142:	61d3      	str	r3, [r2, #28]
                break;
 8017144:	e006      	b.n	8017154 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8017146:	4b2a      	ldr	r3, [pc, #168]	; (80171f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8017148:	4a2a      	ldr	r2, [pc, #168]	; (80171f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801714a:	f240 1111 	movw	r1, #273	; 0x111
 801714e:	482a      	ldr	r0, [pc, #168]	; (80171f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 8017150:	f012 fb66 	bl	8029820 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8017154:	4b24      	ldr	r3, [pc, #144]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8017156:	69db      	ldr	r3, [r3, #28]
 8017158:	4a23      	ldr	r2, [pc, #140]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801715a:	f043 0320 	orr.w	r3, r3, #32
 801715e:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8017160:	4b21      	ldr	r3, [pc, #132]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8017162:	69db      	ldr	r3, [r3, #28]
 8017164:	f003 0320 	and.w	r3, r3, #32
 8017168:	2b00      	cmp	r3, #0
 801716a:	bf14      	ite	ne
 801716c:	2301      	movne	r3, #1
 801716e:	2300      	moveq	r3, #0
 8017170:	b2db      	uxtb	r3, r3
 8017172:	2b00      	cmp	r3, #0
 8017174:	d000      	beq.n	8017178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x228>
 8017176:	e7f3      	b.n	8017160 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8017178:	4b1b      	ldr	r3, [pc, #108]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801717a:	2210      	movs	r2, #16
 801717c:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 801717e:	7ffb      	ldrb	r3, [r7, #31]
 8017180:	2b00      	cmp	r3, #0
 8017182:	d003      	beq.n	801718c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23c>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8017184:	4b18      	ldr	r3, [pc, #96]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8017186:	4a19      	ldr	r2, [pc, #100]	; (80171ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8017188:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 801718a:	e03e      	b.n	801720a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 801718c:	4b16      	ldr	r3, [pc, #88]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 801718e:	4a1b      	ldr	r2, [pc, #108]	; (80171fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 8017190:	601a      	str	r2, [r3, #0]
        break;
 8017192:	e03a      	b.n	801720a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8017194:	683b      	ldr	r3, [r7, #0]
 8017196:	7f1b      	ldrb	r3, [r3, #28]
 8017198:	061b      	lsls	r3, r3, #24
 801719a:	461a      	mov	r2, r3
 801719c:	69bb      	ldr	r3, [r7, #24]
 801719e:	4313      	orrs	r3, r2
 80171a0:	4a11      	ldr	r2, [pc, #68]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80171a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80171a6:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80171a8:	4a0f      	ldr	r2, [pc, #60]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80171aa:	697b      	ldr	r3, [r7, #20]
 80171ac:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80171ae:	683b      	ldr	r3, [r7, #0]
 80171b0:	691a      	ldr	r2, [r3, #16]
 80171b2:	4b0d      	ldr	r3, [pc, #52]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80171b4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80171b6:	4b0c      	ldr	r3, [pc, #48]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80171b8:	4a0c      	ldr	r2, [pc, #48]	; (80171ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80171ba:	601a      	str	r2, [r3, #0]
        break;
 80171bc:	e025      	b.n	801720a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80171be:	683b      	ldr	r3, [r7, #0]
 80171c0:	7f1b      	ldrb	r3, [r3, #28]
 80171c2:	061b      	lsls	r3, r3, #24
 80171c4:	461a      	mov	r2, r3
 80171c6:	69bb      	ldr	r3, [r7, #24]
 80171c8:	4313      	orrs	r3, r2
 80171ca:	4a07      	ldr	r2, [pc, #28]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80171cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80171d0:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80171d2:	683b      	ldr	r3, [r7, #0]
 80171d4:	7f5a      	ldrb	r2, [r3, #29]
 80171d6:	683b      	ldr	r3, [r7, #0]
 80171d8:	7f9b      	ldrb	r3, [r3, #30]
 80171da:	429a      	cmp	r2, r3
 80171dc:	d010      	beq.n	8017200 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80171de:	4b02      	ldr	r3, [pc, #8]	; (80171e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80171e0:	4a06      	ldr	r2, [pc, #24]	; (80171fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80171e2:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 80171e4:	e010      	b.n	8017208 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 80171e6:	bf00      	nop
 80171e8:	4002b000 	.word	0x4002b000
 80171ec:	00020201 	.word	0x00020201
 80171f0:	0802b928 	.word	0x0802b928
 80171f4:	0802b944 	.word	0x0802b944
 80171f8:	0802b8b0 	.word	0x0802b8b0
 80171fc:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8017200:	4b04      	ldr	r3, [pc, #16]	; (8017214 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 8017202:	f240 2201 	movw	r2, #513	; 0x201
 8017206:	601a      	str	r2, [r3, #0]
        break;
 8017208:	bf00      	nop
    }
}
 801720a:	bf00      	nop
 801720c:	3724      	adds	r7, #36	; 0x24
 801720e:	46bd      	mov	sp, r7
 8017210:	bd90      	pop	{r4, r7, pc}
 8017212:	bf00      	nop
 8017214:	4002b000 	.word	0x4002b000

08017218 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8017218:	b590      	push	{r4, r7, lr}
 801721a:	b085      	sub	sp, #20
 801721c:	af00      	add	r7, sp, #0
 801721e:	6078      	str	r0, [r7, #4]
 8017220:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8017222:	683b      	ldr	r3, [r7, #0]
 8017224:	7f9b      	ldrb	r3, [r3, #30]
 8017226:	4619      	mov	r1, r3
 8017228:	6878      	ldr	r0, [r7, #4]
 801722a:	f7ff fe47 	bl	8016ebc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 801722e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8017230:	4a3b      	ldr	r2, [pc, #236]	; (8017320 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8017236:	683b      	ldr	r3, [r7, #0]
 8017238:	8adb      	ldrh	r3, [r3, #22]
 801723a:	461a      	mov	r2, r3
 801723c:	683b      	ldr	r3, [r7, #0]
 801723e:	8a9b      	ldrh	r3, [r3, #20]
 8017240:	041b      	lsls	r3, r3, #16
 8017242:	431a      	orrs	r2, r3
 8017244:	4b36      	ldr	r3, [pc, #216]	; (8017320 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8017246:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8017248:	683b      	ldr	r3, [r7, #0]
 801724a:	691a      	ldr	r2, [r3, #16]
 801724c:	4b34      	ldr	r3, [pc, #208]	; (8017320 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801724e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8017250:	683b      	ldr	r3, [r7, #0]
 8017252:	8b5b      	ldrh	r3, [r3, #26]
 8017254:	461a      	mov	r2, r3
 8017256:	683b      	ldr	r3, [r7, #0]
 8017258:	8a9b      	ldrh	r3, [r3, #20]
 801725a:	1ad2      	subs	r2, r2, r3
 801725c:	4b30      	ldr	r3, [pc, #192]	; (8017320 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801725e:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8017260:	683b      	ldr	r3, [r7, #0]
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	2b08      	cmp	r3, #8
 8017266:	d12f      	bne.n	80172c8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xb0>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8017268:	683b      	ldr	r3, [r7, #0]
 801726a:	8b5b      	ldrh	r3, [r3, #26]
 801726c:	461a      	mov	r2, r3
 801726e:	683b      	ldr	r3, [r7, #0]
 8017270:	8a9b      	ldrh	r3, [r3, #20]
 8017272:	1ad2      	subs	r2, r2, r3
 8017274:	4b2a      	ldr	r3, [pc, #168]	; (8017320 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8017276:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8017278:	683b      	ldr	r3, [r7, #0]
 801727a:	8b5b      	ldrh	r3, [r3, #26]
 801727c:	461a      	mov	r2, r3
 801727e:	683b      	ldr	r3, [r7, #0]
 8017280:	8a9b      	ldrh	r3, [r3, #20]
 8017282:	1ad2      	subs	r2, r2, r3
 8017284:	4b26      	ldr	r3, [pc, #152]	; (8017320 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8017286:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8017288:	4a25      	ldr	r2, [pc, #148]	; (8017320 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 801728e:	683b      	ldr	r3, [r7, #0]
 8017290:	7f1b      	ldrb	r3, [r3, #28]
 8017292:	061b      	lsls	r3, r3, #24
 8017294:	4a22      	ldr	r2, [pc, #136]	; (8017320 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8017296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801729a:	f043 0309 	orr.w	r3, r3, #9
 801729e:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80172a0:	683b      	ldr	r3, [r7, #0]
 80172a2:	330c      	adds	r3, #12
 80172a4:	4c1e      	ldr	r4, [pc, #120]	; (8017320 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80172a6:	4618      	mov	r0, r3
 80172a8:	f7ff fc84 	bl	8016bb4 <_ZNK8touchgfx9colortypecvmEv>
 80172ac:	4603      	mov	r3, r0
 80172ae:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80172b0:	683b      	ldr	r3, [r7, #0]
 80172b2:	691a      	ldr	r2, [r3, #16]
 80172b4:	4b1a      	ldr	r3, [pc, #104]	; (8017320 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80172b6:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80172b8:	683b      	ldr	r3, [r7, #0]
 80172ba:	691a      	ldr	r2, [r3, #16]
 80172bc:	4b18      	ldr	r3, [pc, #96]	; (8017320 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80172be:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80172c0:	4b17      	ldr	r3, [pc, #92]	; (8017320 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80172c2:	4a18      	ldr	r2, [pc, #96]	; (8017324 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 80172c4:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 80172c6:	e027      	b.n	8017318 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x100>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80172c8:	4a15      	ldr	r2, [pc, #84]	; (8017320 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80172ca:	68fb      	ldr	r3, [r7, #12]
 80172cc:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80172ce:	4b14      	ldr	r3, [pc, #80]	; (8017320 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80172d0:	2200      	movs	r2, #0
 80172d2:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 80172d4:	683b      	ldr	r3, [r7, #0]
 80172d6:	330c      	adds	r3, #12
 80172d8:	4618      	mov	r0, r3
 80172da:	f7ff fc6b 	bl	8016bb4 <_ZNK8touchgfx9colortypecvmEv>
 80172de:	4603      	mov	r3, r0
 80172e0:	0a1b      	lsrs	r3, r3, #8
 80172e2:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 80172e6:	683b      	ldr	r3, [r7, #0]
 80172e8:	330c      	adds	r3, #12
 80172ea:	4618      	mov	r0, r3
 80172ec:	f7ff fc62 	bl	8016bb4 <_ZNK8touchgfx9colortypecvmEv>
 80172f0:	4603      	mov	r3, r0
 80172f2:	095b      	lsrs	r3, r3, #5
 80172f4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80172f8:	431c      	orrs	r4, r3
 80172fa:	683b      	ldr	r3, [r7, #0]
 80172fc:	330c      	adds	r3, #12
 80172fe:	4618      	mov	r0, r3
 8017300:	f7ff fc58 	bl	8016bb4 <_ZNK8touchgfx9colortypecvmEv>
 8017304:	4603      	mov	r3, r0
 8017306:	08db      	lsrs	r3, r3, #3
 8017308:	f003 031f 	and.w	r3, r3, #31
 801730c:	4a04      	ldr	r2, [pc, #16]	; (8017320 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 801730e:	4323      	orrs	r3, r4
 8017310:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8017312:	4b03      	ldr	r3, [pc, #12]	; (8017320 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8017314:	4a04      	ldr	r2, [pc, #16]	; (8017328 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 8017316:	601a      	str	r2, [r3, #0]
}
 8017318:	bf00      	nop
 801731a:	3714      	adds	r7, #20
 801731c:	46bd      	mov	sp, r7
 801731e:	bd90      	pop	{r4, r7, pc}
 8017320:	4002b000 	.word	0x4002b000
 8017324:	00020201 	.word	0x00020201
 8017328:	00030201 	.word	0x00030201

0801732c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 801732c:	b580      	push	{r7, lr}
 801732e:	b082      	sub	sp, #8
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
 8017334:	4a05      	ldr	r2, [pc, #20]	; (801734c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	601a      	str	r2, [r3, #0]
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	4618      	mov	r0, r3
 801733e:	f7ff fc45 	bl	8016bcc <_ZN8touchgfx9DMA_QueueD1Ev>
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	4618      	mov	r0, r3
 8017346:	3708      	adds	r7, #8
 8017348:	46bd      	mov	sp, r7
 801734a:	bd80      	pop	{r7, pc}
 801734c:	0802c7b8 	.word	0x0802c7b8

08017350 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8017350:	b580      	push	{r7, lr}
 8017352:	b082      	sub	sp, #8
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
 8017358:	6878      	ldr	r0, [r7, #4]
 801735a:	f7ff ffe7 	bl	801732c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801735e:	2114      	movs	r1, #20
 8017360:	6878      	ldr	r0, [r7, #4]
 8017362:	f012 fa2e 	bl	80297c2 <_ZdlPvj>
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	4618      	mov	r0, r3
 801736a:	3708      	adds	r7, #8
 801736c:	46bd      	mov	sp, r7
 801736e:	bd80      	pop	{r7, pc}

08017370 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8017370:	b480      	push	{r7}
 8017372:	b083      	sub	sp, #12
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8017378:	4a04      	ldr	r2, [pc, #16]	; (801738c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	6013      	str	r3, [r2, #0]
    }
 801737e:	bf00      	nop
 8017380:	370c      	adds	r7, #12
 8017382:	46bd      	mov	sp, r7
 8017384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017388:	4770      	bx	lr
 801738a:	bf00      	nop
 801738c:	20008e8c 	.word	0x20008e8c

08017390 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8017390:	b480      	push	{r7}
 8017392:	b085      	sub	sp, #20
 8017394:	af00      	add	r7, sp, #0
 8017396:	60f8      	str	r0, [r7, #12]
 8017398:	60b9      	str	r1, [r7, #8]
 801739a:	607a      	str	r2, [r7, #4]
 801739c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 801739e:	4a0b      	ldr	r2, [pc, #44]	; (80173cc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	601a      	str	r2, [r3, #0]
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	68ba      	ldr	r2, [r7, #8]
 80173a8:	605a      	str	r2, [r3, #4]
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	687a      	ldr	r2, [r7, #4]
 80173ae:	609a      	str	r2, [r3, #8]
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	683a      	ldr	r2, [r7, #0]
 80173b4:	60da      	str	r2, [r3, #12]
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	69ba      	ldr	r2, [r7, #24]
 80173ba:	611a      	str	r2, [r3, #16]
    {
    }
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	4618      	mov	r0, r3
 80173c0:	3714      	adds	r7, #20
 80173c2:	46bd      	mov	sp, r7
 80173c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173c8:	4770      	bx	lr
 80173ca:	bf00      	nop
 80173cc:	0802c4d8 	.word	0x0802c4d8

080173d0 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80173d0:	b480      	push	{r7}
 80173d2:	b083      	sub	sp, #12
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
    {
 80173d8:	4a04      	ldr	r2, [pc, #16]	; (80173ec <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	601a      	str	r2, [r3, #0]
    }
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	4618      	mov	r0, r3
 80173e2:	370c      	adds	r7, #12
 80173e4:	46bd      	mov	sp, r7
 80173e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ea:	4770      	bx	lr
 80173ec:	0802c4d8 	.word	0x0802c4d8

080173f0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b082      	sub	sp, #8
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	6078      	str	r0, [r7, #4]
    }
 80173f8:	6878      	ldr	r0, [r7, #4]
 80173fa:	f7ff ffe9 	bl	80173d0 <_ZN8touchgfx7MVPHeapD1Ev>
 80173fe:	2114      	movs	r1, #20
 8017400:	6878      	ldr	r0, [r7, #4]
 8017402:	f012 f9de 	bl	80297c2 <_ZdlPvj>
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	4618      	mov	r0, r3
 801740a:	3708      	adds	r7, #8
 801740c:	46bd      	mov	sp, r7
 801740e:	bd80      	pop	{r7, pc}

08017410 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8017410:	b480      	push	{r7}
 8017412:	b083      	sub	sp, #12
 8017414:	af00      	add	r7, sp, #0
 8017416:	6078      	str	r0, [r7, #4]
    {
 8017418:	4a04      	ldr	r2, [pc, #16]	; (801742c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	601a      	str	r2, [r3, #0]
    }
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	4618      	mov	r0, r3
 8017422:	370c      	adds	r7, #12
 8017424:	46bd      	mov	sp, r7
 8017426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801742a:	4770      	bx	lr
 801742c:	0802caf0 	.word	0x0802caf0

08017430 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8017430:	b580      	push	{r7, lr}
 8017432:	b082      	sub	sp, #8
 8017434:	af00      	add	r7, sp, #0
 8017436:	6078      	str	r0, [r7, #4]
    }
 8017438:	6878      	ldr	r0, [r7, #4]
 801743a:	f7ff ffe9 	bl	8017410 <_ZN8touchgfx3LCDD1Ev>
 801743e:	2108      	movs	r1, #8
 8017440:	6878      	ldr	r0, [r7, #4]
 8017442:	f012 f9be 	bl	80297c2 <_ZdlPvj>
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	4618      	mov	r0, r3
 801744a:	3708      	adds	r7, #8
 801744c:	46bd      	mov	sp, r7
 801744e:	bd80      	pop	{r7, pc}

08017450 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8017450:	b480      	push	{r7}
 8017452:	b083      	sub	sp, #12
 8017454:	af00      	add	r7, sp, #0
 8017456:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	2200      	movs	r2, #0
 801745c:	801a      	strh	r2, [r3, #0]
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	2200      	movs	r2, #0
 8017462:	805a      	strh	r2, [r3, #2]
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	2200      	movs	r2, #0
 8017468:	809a      	strh	r2, [r3, #4]
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	2200      	movs	r2, #0
 801746e:	80da      	strh	r2, [r3, #6]
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	2200      	movs	r2, #0
 8017474:	811a      	strh	r2, [r3, #8]
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	2200      	movs	r2, #0
 801747a:	815a      	strh	r2, [r3, #10]
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	2200      	movs	r2, #0
 8017480:	819a      	strh	r2, [r3, #12]
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	2200      	movs	r2, #0
 8017486:	739a      	strb	r2, [r3, #14]
        {
        }
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	4618      	mov	r0, r3
 801748c:	370c      	adds	r7, #12
 801748e:	46bd      	mov	sp, r7
 8017490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017494:	4770      	bx	lr

08017496 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8017496:	b580      	push	{r7, lr}
 8017498:	b082      	sub	sp, #8
 801749a:	af00      	add	r7, sp, #0
 801749c:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	4618      	mov	r0, r3
 80174a2:	f7ff ffd5 	bl	8017450 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	2200      	movs	r2, #0
 80174aa:	611a      	str	r2, [r3, #16]
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	2200      	movs	r2, #0
 80174b0:	829a      	strh	r2, [r3, #20]
    {
    }
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	4618      	mov	r0, r3
 80174b6:	3708      	adds	r7, #8
 80174b8:	46bd      	mov	sp, r7
 80174ba:	bd80      	pop	{r7, pc}

080174bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80174bc:	b580      	push	{r7, lr}
 80174be:	b084      	sub	sp, #16
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	60f8      	str	r0, [r7, #12]
 80174c4:	60b9      	str	r1, [r7, #8]
 80174c6:	607a      	str	r2, [r7, #4]
 80174c8:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 80174ca:	4a55      	ldr	r2, [pc, #340]	; (8017620 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	601a      	str	r2, [r3, #0]
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	68ba      	ldr	r2, [r7, #8]
 80174d4:	605a      	str	r2, [r3, #4]
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	687a      	ldr	r2, [r7, #4]
 80174da:	609a      	str	r2, [r3, #8]
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	683a      	ldr	r2, [r7, #0]
 80174e0:	60da      	str	r2, [r3, #12]
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	2200      	movs	r2, #0
 80174e6:	611a      	str	r2, [r3, #16]
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	2200      	movs	r2, #0
 80174ec:	615a      	str	r2, [r3, #20]
 80174ee:	68fb      	ldr	r3, [r7, #12]
 80174f0:	2200      	movs	r2, #0
 80174f2:	619a      	str	r2, [r3, #24]
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	331c      	adds	r3, #28
 80174f8:	4618      	mov	r0, r3
 80174fa:	f7ff ffcc 	bl	8017496 <_ZN8touchgfx8GesturesC1Ev>
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	2200      	movs	r2, #0
 8017502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	2200      	movs	r2, #0
 801750a:	639a      	str	r2, [r3, #56]	; 0x38
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	2200      	movs	r2, #0
 8017510:	63da      	str	r2, [r3, #60]	; 0x3c
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	2200      	movs	r2, #0
 8017516:	641a      	str	r2, [r3, #64]	; 0x40
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	2200      	movs	r2, #0
 801751c:	645a      	str	r2, [r3, #68]	; 0x44
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	2200      	movs	r2, #0
 8017522:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8017526:	68fb      	ldr	r3, [r7, #12]
 8017528:	2201      	movs	r2, #1
 801752a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	2200      	movs	r2, #0
 8017532:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	2200      	movs	r2, #0
 801753a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	2200      	movs	r2, #0
 8017542:	64da      	str	r2, [r3, #76]	; 0x4c
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	3350      	adds	r3, #80	; 0x50
 8017548:	4618      	mov	r0, r3
 801754a:	f7fa ff5f 	bl	801240c <_ZN8touchgfx4RectC1Ev>
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	2200      	movs	r2, #0
 8017552:	659a      	str	r2, [r3, #88]	; 0x58
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	2200      	movs	r2, #0
 8017558:	65da      	str	r2, [r3, #92]	; 0x5c
 801755a:	68fb      	ldr	r3, [r7, #12]
 801755c:	2200      	movs	r2, #0
 801755e:	661a      	str	r2, [r3, #96]	; 0x60
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	2201      	movs	r2, #1
 8017564:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	2200      	movs	r2, #0
 801756c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	2200      	movs	r2, #0
 8017574:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	2201      	movs	r2, #1
 801757c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	2200      	movs	r2, #0
 8017584:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	2200      	movs	r2, #0
 801758c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	2200      	movs	r2, #0
 8017594:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	2200      	movs	r2, #0
 801759c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	2200      	movs	r2, #0
 80175a4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	2200      	movs	r2, #0
 80175ac:	671a      	str	r2, [r3, #112]	; 0x70
 80175ae:	68fb      	ldr	r3, [r7, #12]
 80175b0:	2200      	movs	r2, #0
 80175b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	2200      	movs	r2, #0
 80175ba:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	2200      	movs	r2, #0
 80175c2:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	2201      	movs	r2, #1
 80175ca:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80175ce:	68fb      	ldr	r3, [r7, #12]
 80175d0:	2201      	movs	r2, #1
 80175d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 80175d6:	4a13      	ldr	r2, [pc, #76]	; (8017624 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80175dc:	4a12      	ldr	r2, [pc, #72]	; (8017628 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80175de:	8b3b      	ldrh	r3, [r7, #24]
 80175e0:	8013      	strh	r3, [r2, #0]
 80175e2:	4b11      	ldr	r3, [pc, #68]	; (8017628 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80175e4:	881a      	ldrh	r2, [r3, #0]
 80175e6:	4b11      	ldr	r3, [pc, #68]	; (801762c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 80175e8:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80175ea:	4a11      	ldr	r2, [pc, #68]	; (8017630 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80175ec:	8bbb      	ldrh	r3, [r7, #28]
 80175ee:	8013      	strh	r3, [r2, #0]
 80175f0:	4b0f      	ldr	r3, [pc, #60]	; (8017630 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80175f2:	881a      	ldrh	r2, [r3, #0]
 80175f4:	4b0f      	ldr	r3, [pc, #60]	; (8017634 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 80175f6:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 80175f8:	4b0f      	ldr	r3, [pc, #60]	; (8017638 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 80175fa:	2200      	movs	r2, #0
 80175fc:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80175fe:	8b3a      	ldrh	r2, [r7, #24]
 8017600:	8bbb      	ldrh	r3, [r7, #28]
 8017602:	429a      	cmp	r2, r3
 8017604:	bf34      	ite	cc
 8017606:	2301      	movcc	r3, #1
 8017608:	2300      	movcs	r3, #0
 801760a:	b2db      	uxtb	r3, r3
 801760c:	461a      	mov	r2, r3
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	4618      	mov	r0, r3
 8017618:	3710      	adds	r7, #16
 801761a:	46bd      	mov	sp, r7
 801761c:	bd80      	pop	{r7, pc}
 801761e:	bf00      	nop
 8017620:	0802c690 	.word	0x0802c690
 8017624:	20008e30 	.word	0x20008e30
 8017628:	20008e22 	.word	0x20008e22
 801762c:	20008e28 	.word	0x20008e28
 8017630:	20008e24 	.word	0x20008e24
 8017634:	20008e2a 	.word	0x20008e2a
 8017638:	20008e26 	.word	0x20008e26

0801763c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801763c:	b580      	push	{r7, lr}
 801763e:	b082      	sub	sp, #8
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
 8017644:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8017646:	683b      	ldr	r3, [r7, #0]
 8017648:	4618      	mov	r0, r3
 801764a:	f7fb fbdf 	bl	8012e0c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 801764e:	bf00      	nop
 8017650:	3708      	adds	r7, #8
 8017652:	46bd      	mov	sp, r7
 8017654:	bd80      	pop	{r7, pc}
	...

08017658 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8017658:	b580      	push	{r7, lr}
 801765a:	b086      	sub	sp, #24
 801765c:	af02      	add	r7, sp, #8
 801765e:	60f8      	str	r0, [r7, #12]
 8017660:	60b9      	str	r1, [r7, #8]
 8017662:	607a      	str	r2, [r7, #4]
 8017664:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8017666:	68f8      	ldr	r0, [r7, #12]
 8017668:	69bb      	ldr	r3, [r7, #24]
 801766a:	9300      	str	r3, [sp, #0]
 801766c:	683b      	ldr	r3, [r7, #0]
 801766e:	687a      	ldr	r2, [r7, #4]
 8017670:	68b9      	ldr	r1, [r7, #8]
 8017672:	f7ff fe8d 	bl	8017390 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8017676:	4a04      	ldr	r2, [pc, #16]	; (8017688 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	601a      	str	r2, [r3, #0]
    {

    }
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	4618      	mov	r0, r3
 8017680:	3710      	adds	r7, #16
 8017682:	46bd      	mov	sp, r7
 8017684:	bd80      	pop	{r7, pc}
 8017686:	bf00      	nop
 8017688:	0802c4c4 	.word	0x0802c4c4

0801768c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 801768c:	b580      	push	{r7, lr}
 801768e:	af00      	add	r7, sp, #0
 8017690:	4801      	ldr	r0, [pc, #4]	; (8017698 <__tcf_0+0xc>)
 8017692:	f000 f95f 	bl	8017954 <_ZN12FrontendHeapD1Ev>
 8017696:	bd80      	pop	{r7, pc}
 8017698:	20007b9c 	.word	0x20007b9c

0801769c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 801769c:	b580      	push	{r7, lr}
 801769e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80176a0:	4b12      	ldr	r3, [pc, #72]	; (80176ec <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80176a2:	781b      	ldrb	r3, [r3, #0]
 80176a4:	f3bf 8f5b 	dmb	ish
 80176a8:	b2db      	uxtb	r3, r3
 80176aa:	f003 0301 	and.w	r3, r3, #1
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	bf0c      	ite	eq
 80176b2:	2301      	moveq	r3, #1
 80176b4:	2300      	movne	r3, #0
 80176b6:	b2db      	uxtb	r3, r3
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d013      	beq.n	80176e4 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80176bc:	480b      	ldr	r0, [pc, #44]	; (80176ec <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80176be:	f012 f882 	bl	80297c6 <__cxa_guard_acquire>
 80176c2:	4603      	mov	r3, r0
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	bf14      	ite	ne
 80176c8:	2301      	movne	r3, #1
 80176ca:	2300      	moveq	r3, #0
 80176cc:	b2db      	uxtb	r3, r3
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d008      	beq.n	80176e4 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80176d2:	4807      	ldr	r0, [pc, #28]	; (80176f0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80176d4:	f000 f868 	bl	80177a8 <_ZN12FrontendHeapC1Ev>
 80176d8:	4806      	ldr	r0, [pc, #24]	; (80176f4 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 80176da:	f012 f8bf 	bl	802985c <atexit>
 80176de:	4803      	ldr	r0, [pc, #12]	; (80176ec <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80176e0:	f012 f87d 	bl	80297de <__cxa_guard_release>
        return instance;
 80176e4:	4b02      	ldr	r3, [pc, #8]	; (80176f0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 80176e6:	4618      	mov	r0, r3
 80176e8:	bd80      	pop	{r7, pc}
 80176ea:	bf00      	nop
 80176ec:	20007f7c 	.word	0x20007f7c
 80176f0:	20007b9c 	.word	0x20007b9c
 80176f4:	0801768d 	.word	0x0801768d

080176f8 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80176f8:	b580      	push	{r7, lr}
 80176fa:	b082      	sub	sp, #8
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	6078      	str	r0, [r7, #4]
 8017700:	4a05      	ldr	r2, [pc, #20]	; (8017718 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	601a      	str	r2, [r3, #0]
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	4618      	mov	r0, r3
 801770a:	f7ff fe61 	bl	80173d0 <_ZN8touchgfx7MVPHeapD1Ev>
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	4618      	mov	r0, r3
 8017712:	3708      	adds	r7, #8
 8017714:	46bd      	mov	sp, r7
 8017716:	bd80      	pop	{r7, pc}
 8017718:	0802c4c4 	.word	0x0802c4c4

0801771c <_ZN16FrontendHeapBaseD0Ev>:
 801771c:	b580      	push	{r7, lr}
 801771e:	b082      	sub	sp, #8
 8017720:	af00      	add	r7, sp, #0
 8017722:	6078      	str	r0, [r7, #4]
 8017724:	6878      	ldr	r0, [r7, #4]
 8017726:	f7ff ffe7 	bl	80176f8 <_ZN16FrontendHeapBaseD1Ev>
 801772a:	2114      	movs	r1, #20
 801772c:	6878      	ldr	r0, [r7, #4]
 801772e:	f012 f848 	bl	80297c2 <_ZdlPvj>
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	4618      	mov	r0, r3
 8017736:	3708      	adds	r7, #8
 8017738:	46bd      	mov	sp, r7
 801773a:	bd80      	pop	{r7, pc}

0801773c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 801773c:	b580      	push	{r7, lr}
 801773e:	b082      	sub	sp, #8
 8017740:	af00      	add	r7, sp, #0
 8017742:	6078      	str	r0, [r7, #4]
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	4618      	mov	r0, r3
 8017748:	f000 fcb6 	bl	80180b8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801774c:	4a03      	ldr	r2, [pc, #12]	; (801775c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	601a      	str	r2, [r3, #0]
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	4618      	mov	r0, r3
 8017756:	3708      	adds	r7, #8
 8017758:	46bd      	mov	sp, r7
 801775a:	bd80      	pop	{r7, pc}
 801775c:	0802c490 	.word	0x0802c490

08017760 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8017760:	b580      	push	{r7, lr}
 8017762:	b082      	sub	sp, #8
 8017764:	af00      	add	r7, sp, #0
 8017766:	6078      	str	r0, [r7, #4]
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	4618      	mov	r0, r3
 801776c:	f000 fca4 	bl	80180b8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8017770:	4a03      	ldr	r2, [pc, #12]	; (8017780 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	601a      	str	r2, [r3, #0]
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	4618      	mov	r0, r3
 801777a:	3708      	adds	r7, #8
 801777c:	46bd      	mov	sp, r7
 801777e:	bd80      	pop	{r7, pc}
 8017780:	0802c45c 	.word	0x0802c45c

08017784 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
 8017784:	b580      	push	{r7, lr}
 8017786:	b082      	sub	sp, #8
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	4618      	mov	r0, r3
 8017790:	f000 fc92 	bl	80180b8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8017794:	4a03      	ldr	r2, [pc, #12]	; (80177a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	601a      	str	r2, [r3, #0]
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	4618      	mov	r0, r3
 801779e:	3708      	adds	r7, #8
 80177a0:	46bd      	mov	sp, r7
 80177a2:	bd80      	pop	{r7, pc}
 80177a4:	0802c428 	.word	0x0802c428

080177a8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80177a8:	b590      	push	{r4, r7, lr}
 80177aa:	b085      	sub	sp, #20
 80177ac:	af02      	add	r7, sp, #8
 80177ae:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80177b0:	6878      	ldr	r0, [r7, #4]
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	f103 0114 	add.w	r1, r3, #20
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	f503 740c 	add.w	r4, r3, #560	; 0x230
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	f503 7321 	add.w	r3, r3, #644	; 0x284
                     app(model, *this)
 80177ca:	9300      	str	r3, [sp, #0]
 80177cc:	4623      	mov	r3, r4
 80177ce:	f7ff ff43 	bl	8017658 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80177d2:	4a18      	ldr	r2, [pc, #96]	; (8017834 <_ZN12FrontendHeapC1Ev+0x8c>)
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	601a      	str	r2, [r3, #0]
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	3314      	adds	r3, #20
 80177dc:	4618      	mov	r0, r3
 80177de:	f7ff ffad 	bl	801773c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	332c      	adds	r3, #44	; 0x2c
 80177e6:	4618      	mov	r0, r3
 80177e8:	f7ff ffba 	bl	8017760 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80177f2:	4618      	mov	r0, r3
 80177f4:	f7ff ffc6 	bl	8017784 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	f503 7021 	add.w	r0, r3, #644	; 0x284
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8017804:	687a      	ldr	r2, [r7, #4]
 8017806:	4619      	mov	r1, r3
 8017808:	f7fe fbea 	bl	8015fe0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	f503 7377 	add.w	r3, r3, #988	; 0x3dc
 8017812:	4618      	mov	r0, r3
 8017814:	f7fe fbfa 	bl	801600c <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8017818:	687a      	ldr	r2, [r7, #4]
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8017820:	4619      	mov	r1, r3
 8017822:	4610      	mov	r0, r2
 8017824:	f7ff ff0a 	bl	801763c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	4618      	mov	r0, r3
 801782c:	370c      	adds	r7, #12
 801782e:	46bd      	mov	sp, r7
 8017830:	bd90      	pop	{r4, r7, pc}
 8017832:	bf00      	nop
 8017834:	0802c414 	.word	0x0802c414

08017838 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8017838:	b580      	push	{r7, lr}
 801783a:	b086      	sub	sp, #24
 801783c:	af02      	add	r7, sp, #8
 801783e:	60f8      	str	r0, [r7, #12]
 8017840:	60b9      	str	r1, [r7, #8]
 8017842:	607a      	str	r2, [r7, #4]
 8017844:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8017846:	68f8      	ldr	r0, [r7, #12]
 8017848:	8bbb      	ldrh	r3, [r7, #28]
 801784a:	9301      	str	r3, [sp, #4]
 801784c:	8b3b      	ldrh	r3, [r7, #24]
 801784e:	9300      	str	r3, [sp, #0]
 8017850:	683b      	ldr	r3, [r7, #0]
 8017852:	687a      	ldr	r2, [r7, #4]
 8017854:	68b9      	ldr	r1, [r7, #8]
 8017856:	f7ff fe31 	bl	80174bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801785a:	4a04      	ldr	r2, [pc, #16]	; (801786c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	601a      	str	r2, [r3, #0]
    }
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	4618      	mov	r0, r3
 8017864:	3710      	adds	r7, #16
 8017866:	46bd      	mov	sp, r7
 8017868:	bd80      	pop	{r7, pc}
 801786a:	bf00      	nop
 801786c:	0802c4e8 	.word	0x0802c4e8

08017870 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8017870:	b580      	push	{r7, lr}
 8017872:	b086      	sub	sp, #24
 8017874:	af02      	add	r7, sp, #8
 8017876:	60f8      	str	r0, [r7, #12]
 8017878:	60b9      	str	r1, [r7, #8]
 801787a:	607a      	str	r2, [r7, #4]
 801787c:	603b      	str	r3, [r7, #0]
 801787e:	68f8      	ldr	r0, [r7, #12]
 8017880:	8bbb      	ldrh	r3, [r7, #28]
 8017882:	9301      	str	r3, [sp, #4]
 8017884:	8b3b      	ldrh	r3, [r7, #24]
 8017886:	9300      	str	r3, [sp, #0]
 8017888:	683b      	ldr	r3, [r7, #0]
 801788a:	687a      	ldr	r2, [r7, #4]
 801788c:	68b9      	ldr	r1, [r7, #8]
 801788e:	f7ff ffd3 	bl	8017838 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8017892:	4a04      	ldr	r2, [pc, #16]	; (80178a4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	601a      	str	r2, [r3, #0]
    }
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	4618      	mov	r0, r3
 801789c:	3710      	adds	r7, #16
 801789e:	46bd      	mov	sp, r7
 80178a0:	bd80      	pop	{r7, pc}
 80178a2:	bf00      	nop
 80178a4:	0802c2c8 	.word	0x0802c2c8

080178a8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80178a8:	b480      	push	{r7}
 80178aa:	b083      	sub	sp, #12
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	6078      	str	r0, [r7, #4]
 80178b0:	4a04      	ldr	r2, [pc, #16]	; (80178c4 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	601a      	str	r2, [r3, #0]
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	4618      	mov	r0, r3
 80178ba:	370c      	adds	r7, #12
 80178bc:	46bd      	mov	sp, r7
 80178be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178c2:	4770      	bx	lr
 80178c4:	0802c2b0 	.word	0x0802c2b0

080178c8 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b082      	sub	sp, #8
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	6078      	str	r0, [r7, #4]
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	4618      	mov	r0, r3
 80178d4:	f7ff ffe8 	bl	80178a8 <_ZN8touchgfx15TouchControllerC1Ev>
 80178d8:	4a03      	ldr	r2, [pc, #12]	; (80178e8 <_ZN20STM32TouchControllerC1Ev+0x20>)
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	601a      	str	r2, [r3, #0]
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	4618      	mov	r0, r3
 80178e2:	3708      	adds	r7, #8
 80178e4:	46bd      	mov	sp, r7
 80178e6:	bd80      	pop	{r7, pc}
 80178e8:	0802c298 	.word	0x0802c298

080178ec <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80178ec:	b590      	push	{r4, r7, lr}
 80178ee:	b085      	sub	sp, #20
 80178f0:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80178f2:	f7fe f949 	bl	8015b88 <_ZN14BitmapDatabase11getInstanceEv>
 80178f6:	4604      	mov	r4, r0
 80178f8:	f7fe f950 	bl	8015b9c <_ZN14BitmapDatabase15getInstanceSizeEv>
 80178fc:	4603      	mov	r3, r0
 80178fe:	4619      	mov	r1, r3
 8017900:	2300      	movs	r3, #0
 8017902:	9300      	str	r3, [sp, #0]
 8017904:	2300      	movs	r3, #0
 8017906:	2200      	movs	r2, #0
 8017908:	4620      	mov	r0, r4
 801790a:	f006 f977 	bl	801dbfc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 801790e:	4809      	ldr	r0, [pc, #36]	; (8017934 <touchgfx_init+0x48>)
 8017910:	f7ff fd2e 	bl	8017370 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8017914:	2000      	movs	r0, #0
 8017916:	f7fe fa85 	bl	8015e24 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 801791a:	4807      	ldr	r0, [pc, #28]	; (8017938 <touchgfx_init+0x4c>)
 801791c:	f006 f8d6 	bl	801dacc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8017920:	f7ff febc 	bl	801769c <_ZN12FrontendHeap11getInstanceEv>
 8017924:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8017926:	4805      	ldr	r0, [pc, #20]	; (801793c <touchgfx_init+0x50>)
 8017928:	f7fe ffb4 	bl	8016894 <_ZN11TouchGFXHAL10initializeEv>
}
 801792c:	bf00      	nop
 801792e:	370c      	adds	r7, #12
 8017930:	46bd      	mov	sp, r7
 8017932:	bd90      	pop	{r4, r7, pc}
 8017934:	20008d9c 	.word	0x20008d9c
 8017938:	2000001c 	.word	0x2000001c
 801793c:	20008da0 	.word	0x20008da0

08017940 <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 8017940:	b580      	push	{r7, lr}
 8017942:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8017944:	4802      	ldr	r0, [pc, #8]	; (8017950 <touchgfx_taskEntry+0x10>)
 8017946:	f000 feca 	bl	80186de <_ZN8touchgfx3HAL9taskEntryEv>
}
 801794a:	bf00      	nop
 801794c:	bd80      	pop	{r7, pc}
 801794e:	bf00      	nop
 8017950:	20008da0 	.word	0x20008da0

08017954 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8017954:	b580      	push	{r7, lr}
 8017956:	b082      	sub	sp, #8
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
 801795c:	4a10      	ldr	r2, [pc, #64]	; (80179a0 <_ZN12FrontendHeapD1Ev+0x4c>)
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	601a      	str	r2, [r3, #0]
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8017968:	4618      	mov	r0, r3
 801796a:	f7fe fb03 	bl	8015f74 <_ZN19FrontendApplicationD1Ev>
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8017974:	4618      	mov	r0, r3
 8017976:	f000 f827 	bl	80179c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	332c      	adds	r3, #44	; 0x2c
 801797e:	4618      	mov	r0, r3
 8017980:	f000 f844 	bl	8017a0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	3314      	adds	r3, #20
 8017988:	4618      	mov	r0, r3
 801798a:	f000 f863 	bl	8017a54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	4618      	mov	r0, r3
 8017992:	f7ff feb1 	bl	80176f8 <_ZN16FrontendHeapBaseD1Ev>
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	4618      	mov	r0, r3
 801799a:	3708      	adds	r7, #8
 801799c:	46bd      	mov	sp, r7
 801799e:	bd80      	pop	{r7, pc}
 80179a0:	0802c414 	.word	0x0802c414

080179a4 <_ZN12FrontendHeapD0Ev>:
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b082      	sub	sp, #8
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	6078      	str	r0, [r7, #4]
 80179ac:	6878      	ldr	r0, [r7, #4]
 80179ae:	f7ff ffd1 	bl	8017954 <_ZN12FrontendHeapD1Ev>
 80179b2:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80179b6:	6878      	ldr	r0, [r7, #4]
 80179b8:	f011 ff03 	bl	80297c2 <_ZdlPvj>
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	4618      	mov	r0, r3
 80179c0:	3708      	adds	r7, #8
 80179c2:	46bd      	mov	sp, r7
 80179c4:	bd80      	pop	{r7, pc}
	...

080179c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b082      	sub	sp, #8
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	6078      	str	r0, [r7, #4]
 80179d0:	4a05      	ldr	r2, [pc, #20]	; (80179e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	601a      	str	r2, [r3, #0]
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	4618      	mov	r0, r3
 80179da:	f000 fb6c 	bl	80180b6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	4618      	mov	r0, r3
 80179e2:	3708      	adds	r7, #8
 80179e4:	46bd      	mov	sp, r7
 80179e6:	bd80      	pop	{r7, pc}
 80179e8:	0802c428 	.word	0x0802c428

080179ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b082      	sub	sp, #8
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	6078      	str	r0, [r7, #4]
 80179f4:	6878      	ldr	r0, [r7, #4]
 80179f6:	f7ff ffe7 	bl	80179c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80179fa:	2154      	movs	r1, #84	; 0x54
 80179fc:	6878      	ldr	r0, [r7, #4]
 80179fe:	f011 fee0 	bl	80297c2 <_ZdlPvj>
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	4618      	mov	r0, r3
 8017a06:	3708      	adds	r7, #8
 8017a08:	46bd      	mov	sp, r7
 8017a0a:	bd80      	pop	{r7, pc}

08017a0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8017a0c:	b580      	push	{r7, lr}
 8017a0e:	b082      	sub	sp, #8
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	6078      	str	r0, [r7, #4]
 8017a14:	4a05      	ldr	r2, [pc, #20]	; (8017a2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	601a      	str	r2, [r3, #0]
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	f000 fb4a 	bl	80180b6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	4618      	mov	r0, r3
 8017a26:	3708      	adds	r7, #8
 8017a28:	46bd      	mov	sp, r7
 8017a2a:	bd80      	pop	{r7, pc}
 8017a2c:	0802c45c 	.word	0x0802c45c

08017a30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8017a30:	b580      	push	{r7, lr}
 8017a32:	b082      	sub	sp, #8
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	6078      	str	r0, [r7, #4]
 8017a38:	6878      	ldr	r0, [r7, #4]
 8017a3a:	f7ff ffe7 	bl	8017a0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017a3e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8017a42:	6878      	ldr	r0, [r7, #4]
 8017a44:	f011 febd 	bl	80297c2 <_ZdlPvj>
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	3708      	adds	r7, #8
 8017a4e:	46bd      	mov	sp, r7
 8017a50:	bd80      	pop	{r7, pc}
	...

08017a54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8017a54:	b580      	push	{r7, lr}
 8017a56:	b082      	sub	sp, #8
 8017a58:	af00      	add	r7, sp, #0
 8017a5a:	6078      	str	r0, [r7, #4]
 8017a5c:	4a05      	ldr	r2, [pc, #20]	; (8017a74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	601a      	str	r2, [r3, #0]
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	4618      	mov	r0, r3
 8017a66:	f000 fb26 	bl	80180b6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	3708      	adds	r7, #8
 8017a70:	46bd      	mov	sp, r7
 8017a72:	bd80      	pop	{r7, pc}
 8017a74:	0802c490 	.word	0x0802c490

08017a78 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b082      	sub	sp, #8
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
 8017a80:	6878      	ldr	r0, [r7, #4]
 8017a82:	f7ff ffe7 	bl	8017a54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8017a86:	2118      	movs	r1, #24
 8017a88:	6878      	ldr	r0, [r7, #4]
 8017a8a:	f011 fe9a 	bl	80297c2 <_ZdlPvj>
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	4618      	mov	r0, r3
 8017a92:	3708      	adds	r7, #8
 8017a94:	46bd      	mov	sp, r7
 8017a96:	bd80      	pop	{r7, pc}

08017a98 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b082      	sub	sp, #8
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
 8017aa0:	4a05      	ldr	r2, [pc, #20]	; (8017ab8 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	601a      	str	r2, [r3, #0]
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	f7ff fcb1 	bl	8017410 <_ZN8touchgfx3LCDD1Ev>
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	3708      	adds	r7, #8
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	bd80      	pop	{r7, pc}
 8017ab8:	0802cef4 	.word	0x0802cef4

08017abc <_ZN8touchgfx8LCD16bppD0Ev>:
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b082      	sub	sp, #8
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
 8017ac4:	6878      	ldr	r0, [r7, #4]
 8017ac6:	f7ff ffe7 	bl	8017a98 <_ZN8touchgfx8LCD16bppD1Ev>
 8017aca:	2178      	movs	r1, #120	; 0x78
 8017acc:	6878      	ldr	r0, [r7, #4]
 8017ace:	f011 fe78 	bl	80297c2 <_ZdlPvj>
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	4618      	mov	r0, r3
 8017ad6:	3708      	adds	r7, #8
 8017ad8:	46bd      	mov	sp, r7
 8017ada:	bd80      	pop	{r7, pc}

08017adc <_Z41__static_initialization_and_destruction_0ii>:
 8017adc:	b580      	push	{r7, lr}
 8017ade:	b084      	sub	sp, #16
 8017ae0:	af02      	add	r7, sp, #8
 8017ae2:	6078      	str	r0, [r7, #4]
 8017ae4:	6039      	str	r1, [r7, #0]
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	2b01      	cmp	r3, #1
 8017aea:	d119      	bne.n	8017b20 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8017aec:	683b      	ldr	r3, [r7, #0]
 8017aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017af2:	4293      	cmp	r3, r2
 8017af4:	d114      	bne.n	8017b20 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8017af6:	4818      	ldr	r0, [pc, #96]	; (8017b58 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8017af8:	f7ff fee6 	bl	80178c8 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8017afc:	4817      	ldr	r0, [pc, #92]	; (8017b5c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8017afe:	f7ff f915 	bl	8016d2c <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8017b02:	4817      	ldr	r0, [pc, #92]	; (8017b60 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8017b04:	f009 f97a 	bl	8020dfc <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8017b08:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8017b0c:	9301      	str	r3, [sp, #4]
 8017b0e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8017b12:	9300      	str	r3, [sp, #0]
 8017b14:	4b10      	ldr	r3, [pc, #64]	; (8017b58 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8017b16:	4a12      	ldr	r2, [pc, #72]	; (8017b60 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8017b18:	4910      	ldr	r1, [pc, #64]	; (8017b5c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8017b1a:	4812      	ldr	r0, [pc, #72]	; (8017b64 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8017b1c:	f7ff fea8 	bl	8017870 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d113      	bne.n	8017b4e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8017b26:	683b      	ldr	r3, [r7, #0]
 8017b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017b2c:	4293      	cmp	r3, r2
 8017b2e:	d10e      	bne.n	8017b4e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8017b30:	480c      	ldr	r0, [pc, #48]	; (8017b64 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8017b32:	f7fe ff3f 	bl	80169b4 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8017b36:	480c      	ldr	r0, [pc, #48]	; (8017b68 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8017b38:	f7fa f9e4 	bl	8011f04 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8017b3c:	4808      	ldr	r0, [pc, #32]	; (8017b60 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8017b3e:	f7ff ffab 	bl	8017a98 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8017b42:	4806      	ldr	r0, [pc, #24]	; (8017b5c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8017b44:	f7ff f91c 	bl	8016d80 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8017b48:	4803      	ldr	r0, [pc, #12]	; (8017b58 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8017b4a:	f7fe fcb5 	bl	80164b8 <_ZN20STM32TouchControllerD1Ev>
}
 8017b4e:	bf00      	nop
 8017b50:	3708      	adds	r7, #8
 8017b52:	46bd      	mov	sp, r7
 8017b54:	bd80      	pop	{r7, pc}
 8017b56:	bf00      	nop
 8017b58:	20007f80 	.word	0x20007f80
 8017b5c:	20007f84 	.word	0x20007f84
 8017b60:	20008d24 	.word	0x20008d24
 8017b64:	20008da0 	.word	0x20008da0
 8017b68:	2000001c 	.word	0x2000001c

08017b6c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8017b6c:	b480      	push	{r7}
 8017b6e:	b083      	sub	sp, #12
 8017b70:	af00      	add	r7, sp, #0
 8017b72:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8017b74:	2301      	movs	r3, #1
    }
 8017b76:	4618      	mov	r0, r3
 8017b78:	370c      	adds	r7, #12
 8017b7a:	46bd      	mov	sp, r7
 8017b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b80:	4770      	bx	lr

08017b82 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8017b82:	b480      	push	{r7}
 8017b84:	b083      	sub	sp, #12
 8017b86:	af00      	add	r7, sp, #0
 8017b88:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8017b8a:	234c      	movs	r3, #76	; 0x4c
    }
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	370c      	adds	r7, #12
 8017b90:	46bd      	mov	sp, r7
 8017b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b96:	4770      	bx	lr

08017b98 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8017b98:	b480      	push	{r7}
 8017b9a:	b083      	sub	sp, #12
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	6078      	str	r0, [r7, #4]
 8017ba0:	460b      	mov	r3, r1
 8017ba2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8017ba4:	887b      	ldrh	r3, [r7, #2]
 8017ba6:	224c      	movs	r2, #76	; 0x4c
 8017ba8:	fb02 f303 	mul.w	r3, r2, r3
 8017bac:	3308      	adds	r3, #8
 8017bae:	687a      	ldr	r2, [r7, #4]
 8017bb0:	4413      	add	r3, r2
    }
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	370c      	adds	r7, #12
 8017bb6:	46bd      	mov	sp, r7
 8017bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bbc:	4770      	bx	lr

08017bbe <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15CoverTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8017bbe:	b480      	push	{r7}
 8017bc0:	b083      	sub	sp, #12
 8017bc2:	af00      	add	r7, sp, #0
 8017bc4:	6078      	str	r0, [r7, #4]
 8017bc6:	460b      	mov	r3, r1
 8017bc8:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8017bca:	887b      	ldrh	r3, [r7, #2]
 8017bcc:	224c      	movs	r2, #76	; 0x4c
 8017bce:	fb02 f303 	mul.w	r3, r2, r3
 8017bd2:	3308      	adds	r3, #8
 8017bd4:	687a      	ldr	r2, [r7, #4]
 8017bd6:	4413      	add	r3, r2
    }
 8017bd8:	4618      	mov	r0, r3
 8017bda:	370c      	adds	r7, #12
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017be2:	4770      	bx	lr

08017be4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8017be4:	b480      	push	{r7}
 8017be6:	b083      	sub	sp, #12
 8017be8:	af00      	add	r7, sp, #0
 8017bea:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8017bec:	2301      	movs	r3, #1
    }
 8017bee:	4618      	mov	r0, r3
 8017bf0:	370c      	adds	r7, #12
 8017bf2:	46bd      	mov	sp, r7
 8017bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf8:	4770      	bx	lr

08017bfa <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8017bfa:	b480      	push	{r7}
 8017bfc:	b083      	sub	sp, #12
 8017bfe:	af00      	add	r7, sp, #0
 8017c00:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8017c02:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
    }
 8017c06:	4618      	mov	r0, r3
 8017c08:	370c      	adds	r7, #12
 8017c0a:	46bd      	mov	sp, r7
 8017c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c10:	4770      	bx	lr

08017c12 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8017c12:	b480      	push	{r7}
 8017c14:	b083      	sub	sp, #12
 8017c16:	af00      	add	r7, sp, #0
 8017c18:	6078      	str	r0, [r7, #4]
 8017c1a:	460b      	mov	r3, r1
 8017c1c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017c1e:	887a      	ldrh	r2, [r7, #2]
 8017c20:	4613      	mov	r3, r2
 8017c22:	01db      	lsls	r3, r3, #7
 8017c24:	1a9b      	subs	r3, r3, r2
 8017c26:	009b      	lsls	r3, r3, #2
 8017c28:	3308      	adds	r3, #8
 8017c2a:	687a      	ldr	r2, [r7, #4]
 8017c2c:	4413      	add	r3, r2
    }
 8017c2e:	4618      	mov	r0, r3
 8017c30:	370c      	adds	r7, #12
 8017c32:	46bd      	mov	sp, r7
 8017c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c38:	4770      	bx	lr

08017c3a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8017c3a:	b480      	push	{r7}
 8017c3c:	b083      	sub	sp, #12
 8017c3e:	af00      	add	r7, sp, #0
 8017c40:	6078      	str	r0, [r7, #4]
 8017c42:	460b      	mov	r3, r1
 8017c44:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017c46:	887a      	ldrh	r2, [r7, #2]
 8017c48:	4613      	mov	r3, r2
 8017c4a:	01db      	lsls	r3, r3, #7
 8017c4c:	1a9b      	subs	r3, r3, r2
 8017c4e:	009b      	lsls	r3, r3, #2
 8017c50:	3308      	adds	r3, #8
 8017c52:	687a      	ldr	r2, [r7, #4]
 8017c54:	4413      	add	r3, r2
    }
 8017c56:	4618      	mov	r0, r3
 8017c58:	370c      	adds	r7, #12
 8017c5a:	46bd      	mov	sp, r7
 8017c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c60:	4770      	bx	lr

08017c62 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8017c62:	b480      	push	{r7}
 8017c64:	b083      	sub	sp, #12
 8017c66:	af00      	add	r7, sp, #0
 8017c68:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8017c6a:	2301      	movs	r3, #1
    }
 8017c6c:	4618      	mov	r0, r3
 8017c6e:	370c      	adds	r7, #12
 8017c70:	46bd      	mov	sp, r7
 8017c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c76:	4770      	bx	lr

08017c78 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8017c78:	b480      	push	{r7}
 8017c7a:	b083      	sub	sp, #12
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8017c80:	2310      	movs	r3, #16
    }
 8017c82:	4618      	mov	r0, r3
 8017c84:	370c      	adds	r7, #12
 8017c86:	46bd      	mov	sp, r7
 8017c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c8c:	4770      	bx	lr

08017c8e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8017c8e:	b480      	push	{r7}
 8017c90:	b083      	sub	sp, #12
 8017c92:	af00      	add	r7, sp, #0
 8017c94:	6078      	str	r0, [r7, #4]
 8017c96:	460b      	mov	r3, r1
 8017c98:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017c9a:	887b      	ldrh	r3, [r7, #2]
 8017c9c:	011b      	lsls	r3, r3, #4
 8017c9e:	3308      	adds	r3, #8
 8017ca0:	687a      	ldr	r2, [r7, #4]
 8017ca2:	4413      	add	r3, r2
    }
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	370c      	adds	r7, #12
 8017ca8:	46bd      	mov	sp, r7
 8017caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cae:	4770      	bx	lr

08017cb0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8017cb0:	b480      	push	{r7}
 8017cb2:	b083      	sub	sp, #12
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	6078      	str	r0, [r7, #4]
 8017cb8:	460b      	mov	r3, r1
 8017cba:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8017cbc:	887b      	ldrh	r3, [r7, #2]
 8017cbe:	011b      	lsls	r3, r3, #4
 8017cc0:	3308      	adds	r3, #8
 8017cc2:	687a      	ldr	r2, [r7, #4]
 8017cc4:	4413      	add	r3, r2
    }
 8017cc6:	4618      	mov	r0, r3
 8017cc8:	370c      	adds	r7, #12
 8017cca:	46bd      	mov	sp, r7
 8017ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cd0:	4770      	bx	lr

08017cd2 <_GLOBAL__sub_I_touchgfx_init>:
 8017cd2:	b580      	push	{r7, lr}
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017cda:	2001      	movs	r0, #1
 8017cdc:	f7ff fefe 	bl	8017adc <_Z41__static_initialization_and_destruction_0ii>
 8017ce0:	bd80      	pop	{r7, pc}

08017ce2 <_GLOBAL__sub_D_touchgfx_init>:
 8017ce2:	b580      	push	{r7, lr}
 8017ce4:	af00      	add	r7, sp, #0
 8017ce6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017cea:	2000      	movs	r0, #0
 8017cec:	f7ff fef6 	bl	8017adc <_Z41__static_initialization_and_destruction_0ii>
 8017cf0:	bd80      	pop	{r7, pc}

08017cf2 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8017cf2:	b580      	push	{r7, lr}
 8017cf4:	b082      	sub	sp, #8
 8017cf6:	af00      	add	r7, sp, #0
 8017cf8:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	3320      	adds	r3, #32
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	6878      	ldr	r0, [r7, #4]
 8017d04:	4798      	blx	r3
    }
 8017d06:	bf00      	nop
 8017d08:	3708      	adds	r7, #8
 8017d0a:	46bd      	mov	sp, r7
 8017d0c:	bd80      	pop	{r7, pc}

08017d0e <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8017d0e:	b480      	push	{r7}
 8017d10:	b083      	sub	sp, #12
 8017d12:	af00      	add	r7, sp, #0
 8017d14:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8017d1c:	3301      	adds	r3, #1
 8017d1e:	b2da      	uxtb	r2, r3
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8017d26:	bf00      	nop
 8017d28:	370c      	adds	r7, #12
 8017d2a:	46bd      	mov	sp, r7
 8017d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d30:	4770      	bx	lr
	...

08017d34 <__NVIC_EnableIRQ>:
{
 8017d34:	b480      	push	{r7}
 8017d36:	b083      	sub	sp, #12
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	4603      	mov	r3, r0
 8017d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	db0b      	blt.n	8017d5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017d46:	79fb      	ldrb	r3, [r7, #7]
 8017d48:	f003 021f 	and.w	r2, r3, #31
 8017d4c:	4907      	ldr	r1, [pc, #28]	; (8017d6c <__NVIC_EnableIRQ+0x38>)
 8017d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d52:	095b      	lsrs	r3, r3, #5
 8017d54:	2001      	movs	r0, #1
 8017d56:	fa00 f202 	lsl.w	r2, r0, r2
 8017d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8017d5e:	bf00      	nop
 8017d60:	370c      	adds	r7, #12
 8017d62:	46bd      	mov	sp, r7
 8017d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d68:	4770      	bx	lr
 8017d6a:	bf00      	nop
 8017d6c:	e000e100 	.word	0xe000e100

08017d70 <__NVIC_DisableIRQ>:
{
 8017d70:	b480      	push	{r7}
 8017d72:	b083      	sub	sp, #12
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	4603      	mov	r3, r0
 8017d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	db12      	blt.n	8017da8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017d82:	79fb      	ldrb	r3, [r7, #7]
 8017d84:	f003 021f 	and.w	r2, r3, #31
 8017d88:	490a      	ldr	r1, [pc, #40]	; (8017db4 <__NVIC_DisableIRQ+0x44>)
 8017d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d8e:	095b      	lsrs	r3, r3, #5
 8017d90:	2001      	movs	r0, #1
 8017d92:	fa00 f202 	lsl.w	r2, r0, r2
 8017d96:	3320      	adds	r3, #32
 8017d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8017d9c:	f3bf 8f4f 	dsb	sy
}
 8017da0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017da2:	f3bf 8f6f 	isb	sy
}
 8017da6:	bf00      	nop
}
 8017da8:	bf00      	nop
 8017daa:	370c      	adds	r7, #12
 8017dac:	46bd      	mov	sp, r7
 8017dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017db2:	4770      	bx	lr
 8017db4:	e000e100 	.word	0xe000e100

08017db8 <__NVIC_SetPriority>:
{
 8017db8:	b480      	push	{r7}
 8017dba:	b083      	sub	sp, #12
 8017dbc:	af00      	add	r7, sp, #0
 8017dbe:	4603      	mov	r3, r0
 8017dc0:	6039      	str	r1, [r7, #0]
 8017dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	db0a      	blt.n	8017de2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017dcc:	683b      	ldr	r3, [r7, #0]
 8017dce:	b2da      	uxtb	r2, r3
 8017dd0:	490c      	ldr	r1, [pc, #48]	; (8017e04 <__NVIC_SetPriority+0x4c>)
 8017dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017dd6:	0112      	lsls	r2, r2, #4
 8017dd8:	b2d2      	uxtb	r2, r2
 8017dda:	440b      	add	r3, r1
 8017ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8017de0:	e00a      	b.n	8017df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017de2:	683b      	ldr	r3, [r7, #0]
 8017de4:	b2da      	uxtb	r2, r3
 8017de6:	4908      	ldr	r1, [pc, #32]	; (8017e08 <__NVIC_SetPriority+0x50>)
 8017de8:	79fb      	ldrb	r3, [r7, #7]
 8017dea:	f003 030f 	and.w	r3, r3, #15
 8017dee:	3b04      	subs	r3, #4
 8017df0:	0112      	lsls	r2, r2, #4
 8017df2:	b2d2      	uxtb	r2, r2
 8017df4:	440b      	add	r3, r1
 8017df6:	761a      	strb	r2, [r3, #24]
}
 8017df8:	bf00      	nop
 8017dfa:	370c      	adds	r7, #12
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e02:	4770      	bx	lr
 8017e04:	e000e100 	.word	0xe000e100
 8017e08:	e000ed00 	.word	0xe000ed00

08017e0c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8017e0c:	b5b0      	push	{r4, r5, r7, lr}
 8017e0e:	b082      	sub	sp, #8
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	4618      	mov	r0, r3
 8017e18:	f000 fc4f 	bl	80186ba <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8017e1c:	687d      	ldr	r5, [r7, #4]
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	3364      	adds	r3, #100	; 0x64
 8017e24:	681c      	ldr	r4, [r3, #0]
 8017e26:	f003 faf1 	bl	801b40c <_ZN8touchgfx11Application11getInstanceEv>
 8017e2a:	4603      	mov	r3, r0
 8017e2c:	4619      	mov	r1, r3
 8017e2e:	4628      	mov	r0, r5
 8017e30:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD012C000, (void*)0);
 8017e32:	6878      	ldr	r0, [r7, #4]
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	681b      	ldr	r3, [r3, #0]
 8017e38:	3388      	adds	r3, #136	; 0x88
 8017e3a:	681c      	ldr	r4, [r3, #0]
 8017e3c:	2300      	movs	r3, #0
 8017e3e:	4a04      	ldr	r2, [pc, #16]	; (8017e50 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8017e40:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8017e44:	47a0      	blx	r4
}
 8017e46:	bf00      	nop
 8017e48:	3708      	adds	r7, #8
 8017e4a:	46bd      	mov	sp, r7
 8017e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8017e4e:	bf00      	nop
 8017e50:	d012c000 	.word	0xd012c000

08017e54 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8017e54:	b580      	push	{r7, lr}
 8017e56:	b082      	sub	sp, #8
 8017e58:	af00      	add	r7, sp, #0
 8017e5a:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8017e5c:	2109      	movs	r1, #9
 8017e5e:	205a      	movs	r0, #90	; 0x5a
 8017e60:	f7ff ffaa 	bl	8017db8 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8017e64:	2109      	movs	r1, #9
 8017e66:	2058      	movs	r0, #88	; 0x58
 8017e68:	f7ff ffa6 	bl	8017db8 <__NVIC_SetPriority>
}
 8017e6c:	bf00      	nop
 8017e6e:	3708      	adds	r7, #8
 8017e70:	46bd      	mov	sp, r7
 8017e72:	bd80      	pop	{r7, pc}

08017e74 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8017e74:	b580      	push	{r7, lr}
 8017e76:	b082      	sub	sp, #8
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8017e7c:	205a      	movs	r0, #90	; 0x5a
 8017e7e:	f7ff ff59 	bl	8017d34 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8017e82:	2058      	movs	r0, #88	; 0x58
 8017e84:	f7ff ff56 	bl	8017d34 <__NVIC_EnableIRQ>
}
 8017e88:	bf00      	nop
 8017e8a:	3708      	adds	r7, #8
 8017e8c:	46bd      	mov	sp, r7
 8017e8e:	bd80      	pop	{r7, pc}

08017e90 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8017e90:	b580      	push	{r7, lr}
 8017e92:	b082      	sub	sp, #8
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8017e98:	205a      	movs	r0, #90	; 0x5a
 8017e9a:	f7ff ff69 	bl	8017d70 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8017e9e:	2058      	movs	r0, #88	; 0x58
 8017ea0:	f7ff ff66 	bl	8017d70 <__NVIC_DisableIRQ>
}
 8017ea4:	bf00      	nop
 8017ea6:	3708      	adds	r7, #8
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	bd80      	pop	{r7, pc}

08017eac <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8017eac:	b480      	push	{r7}
 8017eae:	b083      	sub	sp, #12
 8017eb0:	af00      	add	r7, sp, #0
 8017eb2:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8017eb4:	4b11      	ldr	r3, [pc, #68]	; (8017efc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017eb6:	68db      	ldr	r3, [r3, #12]
 8017eb8:	b29b      	uxth	r3, r3
 8017eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017ebe:	b29b      	uxth	r3, r3
 8017ec0:	3b01      	subs	r3, #1
 8017ec2:	b29a      	uxth	r2, r3
 8017ec4:	4b0e      	ldr	r3, [pc, #56]	; (8017f00 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8017ec6:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8017ec8:	4b0c      	ldr	r3, [pc, #48]	; (8017efc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017eca:	691b      	ldr	r3, [r3, #16]
 8017ecc:	b29b      	uxth	r3, r3
 8017ece:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8017ed2:	b29b      	uxth	r3, r3
 8017ed4:	3b01      	subs	r3, #1
 8017ed6:	b29a      	uxth	r2, r3
 8017ed8:	4b0a      	ldr	r3, [pc, #40]	; (8017f04 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8017eda:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8017edc:	4b08      	ldr	r3, [pc, #32]	; (8017f00 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8017ede:	881a      	ldrh	r2, [r3, #0]
 8017ee0:	4b06      	ldr	r3, [pc, #24]	; (8017efc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017ee2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8017ee4:	4b05      	ldr	r3, [pc, #20]	; (8017efc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017ee8:	4a04      	ldr	r2, [pc, #16]	; (8017efc <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8017eea:	f043 0301 	orr.w	r3, r3, #1
 8017eee:	6353      	str	r3, [r2, #52]	; 0x34
}
 8017ef0:	bf00      	nop
 8017ef2:	370c      	adds	r7, #12
 8017ef4:	46bd      	mov	sp, r7
 8017ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017efa:	4770      	bx	lr
 8017efc:	40016800 	.word	0x40016800
 8017f00:	20008e1e 	.word	0x20008e1e
 8017f04:	20008e20 	.word	0x20008e20

08017f08 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b082      	sub	sp, #8
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	4618      	mov	r0, r3
 8017f14:	f000 fbb8 	bl	8018688 <_ZN8touchgfx3HAL10beginFrameEv>
 8017f18:	4603      	mov	r3, r0
}
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	3708      	adds	r7, #8
 8017f1e:	46bd      	mov	sp, r7
 8017f20:	bd80      	pop	{r7, pc}
	...

08017f24 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8017f24:	b580      	push	{r7, lr}
 8017f26:	b082      	sub	sp, #8
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d002      	beq.n	8017f3c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 8017f36:	4b05      	ldr	r3, [pc, #20]	; (8017f4c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x28>)
 8017f38:	2201      	movs	r2, #1
 8017f3a:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	4618      	mov	r0, r3
 8017f40:	f000 fbae 	bl	80186a0 <_ZN8touchgfx3HAL8endFrameEv>
}
 8017f44:	bf00      	nop
 8017f46:	3708      	adds	r7, #8
 8017f48:	46bd      	mov	sp, r7
 8017f4a:	bd80      	pop	{r7, pc}
 8017f4c:	20008e1c 	.word	0x20008e1c

08017f50 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8017f50:	b480      	push	{r7}
 8017f52:	b083      	sub	sp, #12
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8017f58:	4b03      	ldr	r3, [pc, #12]	; (8017f68 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 8017f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8017f5c:	4618      	mov	r0, r3
 8017f5e:	370c      	adds	r7, #12
 8017f60:	46bd      	mov	sp, r7
 8017f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f66:	4770      	bx	lr
 8017f68:	40016884 	.word	0x40016884

08017f6c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8017f6c:	b480      	push	{r7}
 8017f6e:	b083      	sub	sp, #12
 8017f70:	af00      	add	r7, sp, #0
 8017f72:	6078      	str	r0, [r7, #4]
 8017f74:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8017f76:	4a06      	ldr	r2, [pc, #24]	; (8017f90 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8017f78:	683b      	ldr	r3, [r7, #0]
 8017f7a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8017f7c:	4b05      	ldr	r3, [pc, #20]	; (8017f94 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 8017f7e:	2201      	movs	r2, #1
 8017f80:	625a      	str	r2, [r3, #36]	; 0x24
}
 8017f82:	bf00      	nop
 8017f84:	370c      	adds	r7, #12
 8017f86:	46bd      	mov	sp, r7
 8017f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f8c:	4770      	bx	lr
 8017f8e:	bf00      	nop
 8017f90:	40016884 	.word	0x40016884
 8017f94:	40016800 	.word	0x40016800

08017f98 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8017f98:	b580      	push	{r7, lr}
 8017f9a:	b082      	sub	sp, #8
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	6078      	str	r0, [r7, #4]
 8017fa0:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	6839      	ldr	r1, [r7, #0]
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	f000 fb38 	bl	801861c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8017fac:	bf00      	nop
 8017fae:	3708      	adds	r7, #8
 8017fb0:	46bd      	mov	sp, r7
 8017fb2:	bd80      	pop	{r7, pc}

08017fb4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8017fb4:	b580      	push	{r7, lr}
 8017fb6:	b084      	sub	sp, #16
 8017fb8:	af00      	add	r7, sp, #0
 8017fba:	60f8      	str	r0, [r7, #12]
 8017fbc:	60b9      	str	r1, [r7, #8]
 8017fbe:	607a      	str	r2, [r7, #4]
 8017fc0:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8017fc2:	68f8      	ldr	r0, [r7, #12]
 8017fc4:	683b      	ldr	r3, [r7, #0]
 8017fc6:	687a      	ldr	r2, [r7, #4]
 8017fc8:	68b9      	ldr	r1, [r7, #8]
 8017fca:	f000 fc90 	bl	80188ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8017fce:	4603      	mov	r3, r0
}
 8017fd0:	4618      	mov	r0, r3
 8017fd2:	3710      	adds	r7, #16
 8017fd4:	46bd      	mov	sp, r7
 8017fd6:	bd80      	pop	{r7, pc}

08017fd8 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b082      	sub	sp, #8
 8017fdc:	af00      	add	r7, sp, #0
 8017fde:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8017fe0:	f7fa fcca 	bl	8012978 <_ZN8touchgfx3HAL11getInstanceEv>
 8017fe4:	4603      	mov	r3, r0
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	bf0c      	ite	eq
 8017fea:	2301      	moveq	r3, #1
 8017fec:	2300      	movne	r3, #0
 8017fee:	b2db      	uxtb	r3, r3
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d132      	bne.n	801805a <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8017ff4:	4b1b      	ldr	r3, [pc, #108]	; (8018064 <HAL_LTDC_LineEventCallback+0x8c>)
 8017ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ff8:	4a1b      	ldr	r2, [pc, #108]	; (8018068 <HAL_LTDC_LineEventCallback+0x90>)
 8017ffa:	8812      	ldrh	r2, [r2, #0]
 8017ffc:	4293      	cmp	r3, r2
 8017ffe:	bf0c      	ite	eq
 8018000:	2301      	moveq	r3, #1
 8018002:	2300      	movne	r3, #0
 8018004:	b2db      	uxtb	r3, r3
 8018006:	2b00      	cmp	r3, #0
 8018008:	d017      	beq.n	801803a <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801800a:	4b18      	ldr	r3, [pc, #96]	; (801806c <HAL_LTDC_LineEventCallback+0x94>)
 801800c:	881b      	ldrh	r3, [r3, #0]
 801800e:	4619      	mov	r1, r3
 8018010:	6878      	ldr	r0, [r7, #4]
 8018012:	f7f0 fe49 	bl	8008ca8 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8018016:	f7fa fcaf 	bl	8012978 <_ZN8touchgfx3HAL11getInstanceEv>
 801801a:	4603      	mov	r3, r0
 801801c:	4618      	mov	r0, r3
 801801e:	f7ff fe76 	bl	8017d0e <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8018022:	f7fe fd4f 	bl	8016ac4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8018026:	f7fa fca7 	bl	8012978 <_ZN8touchgfx3HAL11getInstanceEv>
 801802a:	4603      	mov	r3, r0
 801802c:	4618      	mov	r0, r3
 801802e:	f001 f889 	bl	8019144 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8018032:	2000      	movs	r0, #0
 8018034:	f7fe fa62 	bl	80164fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8018038:	e010      	b.n	801805c <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801803a:	4b0b      	ldr	r3, [pc, #44]	; (8018068 <HAL_LTDC_LineEventCallback+0x90>)
 801803c:	881b      	ldrh	r3, [r3, #0]
 801803e:	4619      	mov	r1, r3
 8018040:	6878      	ldr	r0, [r7, #4]
 8018042:	f7f0 fe31 	bl	8008ca8 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8018046:	f7fa fc97 	bl	8012978 <_ZN8touchgfx3HAL11getInstanceEv>
 801804a:	4603      	mov	r3, r0
 801804c:	4618      	mov	r0, r3
 801804e:	f7ff fe50 	bl	8017cf2 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8018052:	2000      	movs	r0, #0
 8018054:	f7fe fa5d 	bl	8016512 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8018058:	e000      	b.n	801805c <HAL_LTDC_LineEventCallback+0x84>
            return;
 801805a:	bf00      	nop
        }
    }
 801805c:	3708      	adds	r7, #8
 801805e:	46bd      	mov	sp, r7
 8018060:	bd80      	pop	{r7, pc}
 8018062:	bf00      	nop
 8018064:	40016800 	.word	0x40016800
 8018068:	20008e1e 	.word	0x20008e1e
 801806c:	20008e20 	.word	0x20008e20

08018070 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8018070:	8880      	ldrh	r0, [r0, #4]
 8018072:	4770      	bx	lr

08018074 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8018074:	b570      	push	{r4, r5, r6, lr}
 8018076:	6803      	ldr	r3, [r0, #0]
 8018078:	4605      	mov	r5, r0
 801807a:	460c      	mov	r4, r1
 801807c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801807e:	2100      	movs	r1, #0
 8018080:	4798      	blx	r3
 8018082:	682b      	ldr	r3, [r5, #0]
 8018084:	4606      	mov	r6, r0
 8018086:	6a1b      	ldr	r3, [r3, #32]
 8018088:	4628      	mov	r0, r5
 801808a:	4798      	blx	r3
 801808c:	1ba4      	subs	r4, r4, r6
 801808e:	b2a4      	uxth	r4, r4
 8018090:	fbb4 f0f0 	udiv	r0, r4, r0
 8018094:	bd70      	pop	{r4, r5, r6, pc}

08018096 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8018096:	2300      	movs	r3, #0
 8018098:	8083      	strh	r3, [r0, #4]
 801809a:	4770      	bx	lr

0801809c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801809c:	b510      	push	{r4, lr}
 801809e:	6803      	ldr	r3, [r0, #0]
 80180a0:	8881      	ldrh	r1, [r0, #4]
 80180a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180a4:	4604      	mov	r4, r0
 80180a6:	4798      	blx	r3
 80180a8:	88a3      	ldrh	r3, [r4, #4]
 80180aa:	3301      	adds	r3, #1
 80180ac:	80a3      	strh	r3, [r4, #4]
 80180ae:	bd10      	pop	{r4, pc}

080180b0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80180b0:	6803      	ldr	r3, [r0, #0]
 80180b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180b4:	4718      	bx	r3

080180b6 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80180b6:	4770      	bx	lr

080180b8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80180b8:	4a02      	ldr	r2, [pc, #8]	; (80180c4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80180ba:	6002      	str	r2, [r0, #0]
 80180bc:	2200      	movs	r2, #0
 80180be:	8082      	strh	r2, [r0, #4]
 80180c0:	4770      	bx	lr
 80180c2:	bf00      	nop
 80180c4:	0802c5c0 	.word	0x0802c5c0

080180c8 <_ZN8touchgfx9Container13getFirstChildEv>:
 80180c8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80180ca:	4770      	bx	lr

080180cc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80180cc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80180ce:	2000      	movs	r0, #0
 80180d0:	b12b      	cbz	r3, 80180de <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80180d2:	b920      	cbnz	r0, 80180de <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80180d4:	1a5a      	subs	r2, r3, r1
 80180d6:	4250      	negs	r0, r2
 80180d8:	4150      	adcs	r0, r2
 80180da:	699b      	ldr	r3, [r3, #24]
 80180dc:	e7f8      	b.n	80180d0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80180de:	4770      	bx	lr

080180e0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80180e0:	2300      	movs	r3, #0
 80180e2:	6148      	str	r0, [r1, #20]
 80180e4:	618b      	str	r3, [r1, #24]
 80180e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80180e8:	b913      	cbnz	r3, 80180f0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80180ea:	6281      	str	r1, [r0, #40]	; 0x28
 80180ec:	4770      	bx	lr
 80180ee:	4613      	mov	r3, r2
 80180f0:	699a      	ldr	r2, [r3, #24]
 80180f2:	2a00      	cmp	r2, #0
 80180f4:	d1fb      	bne.n	80180ee <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80180f6:	6199      	str	r1, [r3, #24]
 80180f8:	4770      	bx	lr

080180fa <_ZN8touchgfx9Container9removeAllEv>:
 80180fa:	2200      	movs	r2, #0
 80180fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80180fe:	b123      	cbz	r3, 801810a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8018100:	6999      	ldr	r1, [r3, #24]
 8018102:	6281      	str	r1, [r0, #40]	; 0x28
 8018104:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8018108:	e7f8      	b.n	80180fc <_ZN8touchgfx9Container9removeAllEv+0x2>
 801810a:	4770      	bx	lr

0801810c <_ZN8touchgfx9Container6unlinkEv>:
 801810c:	2300      	movs	r3, #0
 801810e:	6283      	str	r3, [r0, #40]	; 0x28
 8018110:	4770      	bx	lr

08018112 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8018112:	2200      	movs	r2, #0
 8018114:	8002      	strh	r2, [r0, #0]
 8018116:	8042      	strh	r2, [r0, #2]
 8018118:	8082      	strh	r2, [r0, #4]
 801811a:	80c2      	strh	r2, [r0, #6]
 801811c:	4770      	bx	lr

0801811e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 801811e:	b570      	push	{r4, r5, r6, lr}
 8018120:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018122:	460d      	mov	r5, r1
 8018124:	4616      	mov	r6, r2
 8018126:	b13c      	cbz	r4, 8018138 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8018128:	6823      	ldr	r3, [r4, #0]
 801812a:	4620      	mov	r0, r4
 801812c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801812e:	4632      	mov	r2, r6
 8018130:	4629      	mov	r1, r5
 8018132:	4798      	blx	r3
 8018134:	69a4      	ldr	r4, [r4, #24]
 8018136:	e7f6      	b.n	8018126 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8018138:	bd70      	pop	{r4, r5, r6, pc}

0801813a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 801813a:	b538      	push	{r3, r4, r5, lr}
 801813c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801813e:	460d      	mov	r5, r1
 8018140:	b134      	cbz	r4, 8018150 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8018142:	682b      	ldr	r3, [r5, #0]
 8018144:	4621      	mov	r1, r4
 8018146:	689b      	ldr	r3, [r3, #8]
 8018148:	4628      	mov	r0, r5
 801814a:	4798      	blx	r3
 801814c:	69a4      	ldr	r4, [r4, #24]
 801814e:	e7f7      	b.n	8018140 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8018150:	bd38      	pop	{r3, r4, r5, pc}

08018152 <_ZNK8touchgfx9Container17invalidateContentEv>:
 8018152:	b510      	push	{r4, lr}
 8018154:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8018156:	b12c      	cbz	r4, 8018164 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8018158:	6823      	ldr	r3, [r4, #0]
 801815a:	4620      	mov	r0, r4
 801815c:	699b      	ldr	r3, [r3, #24]
 801815e:	4798      	blx	r3
 8018160:	69a4      	ldr	r4, [r4, #24]
 8018162:	e7f8      	b.n	8018156 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8018164:	bd10      	pop	{r4, pc}

08018166 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8018166:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018168:	b19b      	cbz	r3, 8018192 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801816a:	428b      	cmp	r3, r1
 801816c:	d109      	bne.n	8018182 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 801816e:	699a      	ldr	r2, [r3, #24]
 8018170:	2100      	movs	r1, #0
 8018172:	6159      	str	r1, [r3, #20]
 8018174:	6282      	str	r2, [r0, #40]	; 0x28
 8018176:	b902      	cbnz	r2, 801817a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8018178:	4770      	bx	lr
 801817a:	6199      	str	r1, [r3, #24]
 801817c:	4770      	bx	lr
 801817e:	4613      	mov	r3, r2
 8018180:	b13a      	cbz	r2, 8018192 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8018182:	699a      	ldr	r2, [r3, #24]
 8018184:	428a      	cmp	r2, r1
 8018186:	d1fa      	bne.n	801817e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8018188:	698a      	ldr	r2, [r1, #24]
 801818a:	619a      	str	r2, [r3, #24]
 801818c:	2300      	movs	r3, #0
 801818e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8018192:	4770      	bx	lr

08018194 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8018194:	b410      	push	{r4}
 8018196:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8018198:	4604      	mov	r4, r0
 801819a:	b92b      	cbnz	r3, 80181a8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 801819c:	6803      	ldr	r3, [r0, #0]
 801819e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80181a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80181a4:	4611      	mov	r1, r2
 80181a6:	4718      	bx	r3
 80181a8:	b941      	cbnz	r1, 80181bc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80181aa:	6193      	str	r3, [r2, #24]
 80181ac:	6282      	str	r2, [r0, #40]	; 0x28
 80181ae:	6154      	str	r4, [r2, #20]
 80181b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80181b4:	4770      	bx	lr
 80181b6:	4603      	mov	r3, r0
 80181b8:	2800      	cmp	r0, #0
 80181ba:	d0f9      	beq.n	80181b0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80181bc:	4299      	cmp	r1, r3
 80181be:	6998      	ldr	r0, [r3, #24]
 80181c0:	d1f9      	bne.n	80181b6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80181c2:	6190      	str	r0, [r2, #24]
 80181c4:	618a      	str	r2, [r1, #24]
 80181c6:	e7f2      	b.n	80181ae <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080181c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80181c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181cc:	461f      	mov	r7, r3
 80181ce:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80181d2:	460d      	mov	r5, r1
 80181d4:	4616      	mov	r6, r2
 80181d6:	b103      	cbz	r3, 80181da <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80181d8:	6038      	str	r0, [r7, #0]
 80181da:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80181dc:	b314      	cbz	r4, 8018224 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80181de:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80181e2:	b1eb      	cbz	r3, 8018220 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80181e4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80181e8:	428d      	cmp	r5, r1
 80181ea:	db19      	blt.n	8018220 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80181ec:	8923      	ldrh	r3, [r4, #8]
 80181ee:	b289      	uxth	r1, r1
 80181f0:	440b      	add	r3, r1
 80181f2:	b21b      	sxth	r3, r3
 80181f4:	429d      	cmp	r5, r3
 80181f6:	da13      	bge.n	8018220 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80181f8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80181fc:	4296      	cmp	r6, r2
 80181fe:	db0f      	blt.n	8018220 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8018200:	8963      	ldrh	r3, [r4, #10]
 8018202:	b292      	uxth	r2, r2
 8018204:	4413      	add	r3, r2
 8018206:	b21b      	sxth	r3, r3
 8018208:	429e      	cmp	r6, r3
 801820a:	da09      	bge.n	8018220 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801820c:	6823      	ldr	r3, [r4, #0]
 801820e:	1ab2      	subs	r2, r6, r2
 8018210:	1a69      	subs	r1, r5, r1
 8018212:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8018216:	b212      	sxth	r2, r2
 8018218:	463b      	mov	r3, r7
 801821a:	b209      	sxth	r1, r1
 801821c:	4620      	mov	r0, r4
 801821e:	47c0      	blx	r8
 8018220:	69a4      	ldr	r4, [r4, #24]
 8018222:	e7db      	b.n	80181dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8018224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018228 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8018228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801822c:	4c6e      	ldr	r4, [pc, #440]	; (80183e8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801822e:	b0a1      	sub	sp, #132	; 0x84
 8018230:	6824      	ldr	r4, [r4, #0]
 8018232:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8018234:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8018238:	9303      	str	r3, [sp, #12]
 801823a:	2400      	movs	r4, #0
 801823c:	802c      	strh	r4, [r5, #0]
 801823e:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8018240:	802c      	strh	r4, [r5, #0]
 8018242:	601c      	str	r4, [r3, #0]
 8018244:	4606      	mov	r6, r0
 8018246:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801824a:	f7ff ffbd 	bl	80181c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801824e:	f1b9 0f03 	cmp.w	r9, #3
 8018252:	f340 80c2 	ble.w	80183da <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8018256:	4631      	mov	r1, r6
 8018258:	a80c      	add	r0, sp, #48	; 0x30
 801825a:	f004 f909 	bl	801c470 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801825e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8018262:	9306      	str	r3, [sp, #24]
 8018264:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8018268:	9307      	str	r3, [sp, #28]
 801826a:	9b03      	ldr	r3, [sp, #12]
 801826c:	f8d3 a000 	ldr.w	sl, [r3]
 8018270:	f1ba 0f00 	cmp.w	sl, #0
 8018274:	f000 80b4 	beq.w	80183e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 8018278:	4651      	mov	r1, sl
 801827a:	a810      	add	r0, sp, #64	; 0x40
 801827c:	f004 f8f8 	bl	801c470 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018280:	9b01      	ldr	r3, [sp, #4]
 8018282:	9a06      	ldr	r2, [sp, #24]
 8018284:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8018288:	189d      	adds	r5, r3, r2
 801828a:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801828e:	9a07      	ldr	r2, [sp, #28]
 8018290:	2002      	movs	r0, #2
 8018292:	fb91 f1f0 	sdiv	r1, r1, r0
 8018296:	4419      	add	r1, r3
 8018298:	1a6d      	subs	r5, r5, r1
 801829a:	9b02      	ldr	r3, [sp, #8]
 801829c:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80182a0:	4413      	add	r3, r2
 80182a2:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80182a6:	fb92 f2f0 	sdiv	r2, r2, r0
 80182aa:	440a      	add	r2, r1
 80182ac:	1a9b      	subs	r3, r3, r2
 80182ae:	435b      	muls	r3, r3
 80182b0:	fb05 3505 	mla	r5, r5, r5, r3
 80182b4:	4f4d      	ldr	r7, [pc, #308]	; (80183ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 80182b6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80182b8:	ac10      	add	r4, sp, #64	; 0x40
 80182ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80182bc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80182be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80182c0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80182c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80182c4:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80182c8:	f1b9 0f0c 	cmp.w	r9, #12
 80182cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80182d0:	f04f 0303 	mov.w	r3, #3
 80182d4:	bfc8      	it	gt
 80182d6:	4698      	movgt	r8, r3
 80182d8:	f8cd 9000 	str.w	r9, [sp]
 80182dc:	f04f 0400 	mov.w	r4, #0
 80182e0:	bfdc      	itt	le
 80182e2:	f109 32ff 	addle.w	r2, r9, #4294967295
 80182e6:	fb92 f8f3 	sdivle	r8, r2, r3
 80182ea:	1c63      	adds	r3, r4, #1
 80182ec:	aa10      	add	r2, sp, #64	; 0x40
 80182ee:	f004 0401 	and.w	r4, r4, #1
 80182f2:	9308      	str	r3, [sp, #32]
 80182f4:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80182f8:	9b00      	ldr	r3, [sp, #0]
 80182fa:	fb93 f3f8 	sdiv	r3, r3, r8
 80182fe:	b29b      	uxth	r3, r3
 8018300:	3404      	adds	r4, #4
 8018302:	f04f 0b00 	mov.w	fp, #0
 8018306:	9304      	str	r3, [sp, #16]
 8018308:	9a04      	ldr	r2, [sp, #16]
 801830a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801830e:	fb13 f302 	smulbb	r3, r3, r2
 8018312:	9a01      	ldr	r2, [sp, #4]
 8018314:	b29b      	uxth	r3, r3
 8018316:	1899      	adds	r1, r3, r2
 8018318:	9305      	str	r3, [sp, #20]
 801831a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801831e:	b209      	sxth	r1, r1
 8018320:	4299      	cmp	r1, r3
 8018322:	db4d      	blt.n	80183c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018324:	8932      	ldrh	r2, [r6, #8]
 8018326:	4413      	add	r3, r2
 8018328:	b21b      	sxth	r3, r3
 801832a:	4299      	cmp	r1, r3
 801832c:	da48      	bge.n	80183c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801832e:	9b04      	ldr	r3, [sp, #16]
 8018330:	6827      	ldr	r7, [r4, #0]
 8018332:	fb17 f703 	smulbb	r7, r7, r3
 8018336:	9b02      	ldr	r3, [sp, #8]
 8018338:	b2bf      	uxth	r7, r7
 801833a:	18fa      	adds	r2, r7, r3
 801833c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8018340:	b212      	sxth	r2, r2
 8018342:	429a      	cmp	r2, r3
 8018344:	db3c      	blt.n	80183c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018346:	8970      	ldrh	r0, [r6, #10]
 8018348:	4403      	add	r3, r0
 801834a:	b21b      	sxth	r3, r3
 801834c:	429a      	cmp	r2, r3
 801834e:	da37      	bge.n	80183c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018350:	2300      	movs	r3, #0
 8018352:	930b      	str	r3, [sp, #44]	; 0x2c
 8018354:	4630      	mov	r0, r6
 8018356:	ab0b      	add	r3, sp, #44	; 0x2c
 8018358:	f7ff ff36 	bl	80181c8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801835c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801835e:	b37a      	cbz	r2, 80183c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018360:	4552      	cmp	r2, sl
 8018362:	d02d      	beq.n	80183c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8018364:	4611      	mov	r1, r2
 8018366:	a80e      	add	r0, sp, #56	; 0x38
 8018368:	9209      	str	r2, [sp, #36]	; 0x24
 801836a:	f004 f881 	bl	801c470 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801836e:	9a06      	ldr	r2, [sp, #24]
 8018370:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8018374:	9b01      	ldr	r3, [sp, #4]
 8018376:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 801837a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801837e:	4413      	add	r3, r2
 8018380:	f04f 0e02 	mov.w	lr, #2
 8018384:	fb91 f1fe 	sdiv	r1, r1, lr
 8018388:	4401      	add	r1, r0
 801838a:	1a58      	subs	r0, r3, r1
 801838c:	9a07      	ldr	r2, [sp, #28]
 801838e:	9b02      	ldr	r3, [sp, #8]
 8018390:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8018394:	fb9c fcfe 	sdiv	ip, ip, lr
 8018398:	4413      	add	r3, r2
 801839a:	448c      	add	ip, r1
 801839c:	eba3 030c 	sub.w	r3, r3, ip
 80183a0:	435b      	muls	r3, r3
 80183a2:	fb00 3300 	mla	r3, r0, r0, r3
 80183a6:	42ab      	cmp	r3, r5
 80183a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80183aa:	d208      	bcs.n	80183be <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80183ac:	9803      	ldr	r0, [sp, #12]
 80183ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80183b0:	6001      	str	r1, [r0, #0]
 80183b2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80183b4:	9805      	ldr	r0, [sp, #20]
 80183b6:	8008      	strh	r0, [r1, #0]
 80183b8:	992b      	ldr	r1, [sp, #172]	; 0xac
 80183ba:	461d      	mov	r5, r3
 80183bc:	800f      	strh	r7, [r1, #0]
 80183be:	4692      	mov	sl, r2
 80183c0:	f10b 0b01 	add.w	fp, fp, #1
 80183c4:	f1bb 0f04 	cmp.w	fp, #4
 80183c8:	f104 0408 	add.w	r4, r4, #8
 80183cc:	d19c      	bne.n	8018308 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80183ce:	9b00      	ldr	r3, [sp, #0]
 80183d0:	9c08      	ldr	r4, [sp, #32]
 80183d2:	444b      	add	r3, r9
 80183d4:	4544      	cmp	r4, r8
 80183d6:	9300      	str	r3, [sp, #0]
 80183d8:	d187      	bne.n	80182ea <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80183da:	b021      	add	sp, #132	; 0x84
 80183dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183e0:	f04f 35ff 	mov.w	r5, #4294967295
 80183e4:	e766      	b.n	80182b4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80183e6:	bf00      	nop
 80183e8:	20008e30 	.word	0x20008e30
 80183ec:	0802b984 	.word	0x0802b984

080183f0 <_ZN8touchgfx4RectaNERKS0_>:
 80183f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80183f4:	f9b1 7000 	ldrsh.w	r7, [r1]
 80183f8:	888c      	ldrh	r4, [r1, #4]
 80183fa:	f9b0 9000 	ldrsh.w	r9, [r0]
 80183fe:	443c      	add	r4, r7
 8018400:	b2a4      	uxth	r4, r4
 8018402:	fa0f f884 	sxth.w	r8, r4
 8018406:	45c1      	cmp	r9, r8
 8018408:	da2f      	bge.n	801846a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801840a:	8882      	ldrh	r2, [r0, #4]
 801840c:	444a      	add	r2, r9
 801840e:	b292      	uxth	r2, r2
 8018410:	fa0f fe82 	sxth.w	lr, r2
 8018414:	4577      	cmp	r7, lr
 8018416:	da28      	bge.n	801846a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018418:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801841c:	88cb      	ldrh	r3, [r1, #6]
 801841e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8018422:	442b      	add	r3, r5
 8018424:	b21b      	sxth	r3, r3
 8018426:	429e      	cmp	r6, r3
 8018428:	da1f      	bge.n	801846a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801842a:	88c3      	ldrh	r3, [r0, #6]
 801842c:	4433      	add	r3, r6
 801842e:	b29b      	uxth	r3, r3
 8018430:	fa0f fc83 	sxth.w	ip, r3
 8018434:	4565      	cmp	r5, ip
 8018436:	da18      	bge.n	801846a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8018438:	454f      	cmp	r7, r9
 801843a:	bfb8      	it	lt
 801843c:	464f      	movlt	r7, r9
 801843e:	42b5      	cmp	r5, r6
 8018440:	bfb8      	it	lt
 8018442:	4635      	movlt	r5, r6
 8018444:	45f0      	cmp	r8, lr
 8018446:	bfd8      	it	le
 8018448:	4622      	movle	r2, r4
 801844a:	1bd2      	subs	r2, r2, r7
 801844c:	8082      	strh	r2, [r0, #4]
 801844e:	884a      	ldrh	r2, [r1, #2]
 8018450:	88c9      	ldrh	r1, [r1, #6]
 8018452:	8007      	strh	r7, [r0, #0]
 8018454:	440a      	add	r2, r1
 8018456:	b292      	uxth	r2, r2
 8018458:	b211      	sxth	r1, r2
 801845a:	458c      	cmp	ip, r1
 801845c:	bfa8      	it	ge
 801845e:	4613      	movge	r3, r2
 8018460:	1b5b      	subs	r3, r3, r5
 8018462:	80c3      	strh	r3, [r0, #6]
 8018464:	8045      	strh	r5, [r0, #2]
 8018466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801846a:	2300      	movs	r3, #0
 801846c:	8003      	strh	r3, [r0, #0]
 801846e:	8043      	strh	r3, [r0, #2]
 8018470:	8083      	strh	r3, [r0, #4]
 8018472:	80c3      	strh	r3, [r0, #6]
 8018474:	e7f7      	b.n	8018466 <_ZN8touchgfx4RectaNERKS0_+0x76>

08018476 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8018476:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801847a:	2b00      	cmp	r3, #0
 801847c:	dd06      	ble.n	801848c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801847e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8018482:	2800      	cmp	r0, #0
 8018484:	bfcc      	ite	gt
 8018486:	2000      	movgt	r0, #0
 8018488:	2001      	movle	r0, #1
 801848a:	4770      	bx	lr
 801848c:	2001      	movs	r0, #1
 801848e:	4770      	bx	lr

08018490 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8018490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018494:	2300      	movs	r3, #0
 8018496:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8018498:	8003      	strh	r3, [r0, #0]
 801849a:	4604      	mov	r4, r0
 801849c:	8043      	strh	r3, [r0, #2]
 801849e:	8083      	strh	r3, [r0, #4]
 80184a0:	80c3      	strh	r3, [r0, #6]
 80184a2:	2d00      	cmp	r5, #0
 80184a4:	d040      	beq.n	8018528 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80184a6:	1d28      	adds	r0, r5, #4
 80184a8:	f7ff ffe5 	bl	8018476 <_ZNK8touchgfx4Rect7isEmptyEv>
 80184ac:	b988      	cbnz	r0, 80184d2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80184ae:	4620      	mov	r0, r4
 80184b0:	f7ff ffe1 	bl	8018476 <_ZNK8touchgfx4Rect7isEmptyEv>
 80184b4:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80184b8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80184bc:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80184c0:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80184c4:	b138      	cbz	r0, 80184d6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80184c6:	8022      	strh	r2, [r4, #0]
 80184c8:	8063      	strh	r3, [r4, #2]
 80184ca:	f8a4 e004 	strh.w	lr, [r4, #4]
 80184ce:	f8a4 c006 	strh.w	ip, [r4, #6]
 80184d2:	69ad      	ldr	r5, [r5, #24]
 80184d4:	e7e5      	b.n	80184a2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80184d6:	f9b4 0000 	ldrsh.w	r0, [r4]
 80184da:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80184de:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80184e2:	4290      	cmp	r0, r2
 80184e4:	4607      	mov	r7, r0
 80184e6:	bfa8      	it	ge
 80184e8:	4617      	movge	r7, r2
 80184ea:	4472      	add	r2, lr
 80184ec:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80184f0:	8027      	strh	r7, [r4, #0]
 80184f2:	4299      	cmp	r1, r3
 80184f4:	460e      	mov	r6, r1
 80184f6:	4440      	add	r0, r8
 80184f8:	bfa8      	it	ge
 80184fa:	461e      	movge	r6, r3
 80184fc:	4471      	add	r1, lr
 80184fe:	4463      	add	r3, ip
 8018500:	b200      	sxth	r0, r0
 8018502:	b212      	sxth	r2, r2
 8018504:	b209      	sxth	r1, r1
 8018506:	b21b      	sxth	r3, r3
 8018508:	4290      	cmp	r0, r2
 801850a:	bfac      	ite	ge
 801850c:	ebc7 0200 	rsbge	r2, r7, r0
 8018510:	ebc7 0202 	rsblt	r2, r7, r2
 8018514:	4299      	cmp	r1, r3
 8018516:	bfac      	ite	ge
 8018518:	ebc6 0301 	rsbge	r3, r6, r1
 801851c:	ebc6 0303 	rsblt	r3, r6, r3
 8018520:	8066      	strh	r6, [r4, #2]
 8018522:	80a2      	strh	r2, [r4, #4]
 8018524:	80e3      	strh	r3, [r4, #6]
 8018526:	e7d4      	b.n	80184d2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8018528:	4620      	mov	r0, r4
 801852a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801852e <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 801852e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018532:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8018536:	b383      	cbz	r3, 801859a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8018538:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801853a:	b374      	cbz	r4, 801859a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801853c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8018540:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8018544:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8018548:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801854c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8018550:	b303      	cbz	r3, 8018594 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8018552:	4668      	mov	r0, sp
 8018554:	1d21      	adds	r1, r4, #4
 8018556:	f8ad 5000 	strh.w	r5, [sp]
 801855a:	f8ad 6002 	strh.w	r6, [sp, #2]
 801855e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8018562:	f8ad 8006 	strh.w	r8, [sp, #6]
 8018566:	f7ff ff43 	bl	80183f0 <_ZN8touchgfx4RectaNERKS0_>
 801856a:	4668      	mov	r0, sp
 801856c:	f7ff ff83 	bl	8018476 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018570:	b980      	cbnz	r0, 8018594 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8018572:	f8bd 3000 	ldrh.w	r3, [sp]
 8018576:	88a2      	ldrh	r2, [r4, #4]
 8018578:	1a9b      	subs	r3, r3, r2
 801857a:	f8ad 3000 	strh.w	r3, [sp]
 801857e:	88e2      	ldrh	r2, [r4, #6]
 8018580:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018584:	1a9b      	subs	r3, r3, r2
 8018586:	f8ad 3002 	strh.w	r3, [sp, #2]
 801858a:	6823      	ldr	r3, [r4, #0]
 801858c:	4669      	mov	r1, sp
 801858e:	689b      	ldr	r3, [r3, #8]
 8018590:	4620      	mov	r0, r4
 8018592:	4798      	blx	r3
 8018594:	69a4      	ldr	r4, [r4, #24]
 8018596:	2c00      	cmp	r4, #0
 8018598:	d1d8      	bne.n	801854c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801859a:	b002      	add	sp, #8
 801859c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080185a0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80185a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80185a2:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80185a6:	460d      	mov	r5, r1
 80185a8:	4616      	mov	r6, r2
 80185aa:	b323      	cbz	r3, 80185f6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80185ac:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80185ae:	b314      	cbz	r4, 80185f6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80185b0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80185b4:	b1eb      	cbz	r3, 80185f2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80185b6:	6828      	ldr	r0, [r5, #0]
 80185b8:	6869      	ldr	r1, [r5, #4]
 80185ba:	466b      	mov	r3, sp
 80185bc:	c303      	stmia	r3!, {r0, r1}
 80185be:	4668      	mov	r0, sp
 80185c0:	1d21      	adds	r1, r4, #4
 80185c2:	f7ff ff15 	bl	80183f0 <_ZN8touchgfx4RectaNERKS0_>
 80185c6:	4668      	mov	r0, sp
 80185c8:	f7ff ff55 	bl	8018476 <_ZNK8touchgfx4Rect7isEmptyEv>
 80185cc:	b988      	cbnz	r0, 80185f2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80185ce:	f8bd 3000 	ldrh.w	r3, [sp]
 80185d2:	88a2      	ldrh	r2, [r4, #4]
 80185d4:	1a9b      	subs	r3, r3, r2
 80185d6:	f8ad 3000 	strh.w	r3, [sp]
 80185da:	88e2      	ldrh	r2, [r4, #6]
 80185dc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80185e0:	1a9b      	subs	r3, r3, r2
 80185e2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80185e6:	6823      	ldr	r3, [r4, #0]
 80185e8:	4632      	mov	r2, r6
 80185ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80185ec:	4669      	mov	r1, sp
 80185ee:	4620      	mov	r0, r4
 80185f0:	4798      	blx	r3
 80185f2:	69a4      	ldr	r4, [r4, #24]
 80185f4:	e7db      	b.n	80185ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80185f6:	b002      	add	sp, #8
 80185f8:	bd70      	pop	{r4, r5, r6, pc}

080185fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80185fa:	b513      	push	{r0, r1, r4, lr}
 80185fc:	6803      	ldr	r3, [r0, #0]
 80185fe:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8018602:	2300      	movs	r3, #0
 8018604:	e9cd 3300 	strd	r3, r3, [sp]
 8018608:	466b      	mov	r3, sp
 801860a:	47a0      	blx	r4
 801860c:	b002      	add	sp, #8
 801860e:	bd10      	pop	{r4, pc}

08018610 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8018610:	2301      	movs	r3, #1
 8018612:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8018616:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 801861a:	4770      	bx	lr

0801861c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801861c:	2301      	movs	r3, #1
 801861e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8018622:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8018626:	4770      	bx	lr

08018628 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8018628:	6843      	ldr	r3, [r0, #4]
 801862a:	2201      	movs	r2, #1
 801862c:	725a      	strb	r2, [r3, #9]
 801862e:	6840      	ldr	r0, [r0, #4]
 8018630:	6803      	ldr	r3, [r0, #0]
 8018632:	691b      	ldr	r3, [r3, #16]
 8018634:	4718      	bx	r3

08018636 <_ZN8touchgfx3HAL8flushDMAEv>:
 8018636:	6840      	ldr	r0, [r0, #4]
 8018638:	6803      	ldr	r3, [r0, #0]
 801863a:	689b      	ldr	r3, [r3, #8]
 801863c:	4718      	bx	r3

0801863e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801863e:	b530      	push	{r4, r5, lr}
 8018640:	b08b      	sub	sp, #44	; 0x2c
 8018642:	6804      	ldr	r4, [r0, #0]
 8018644:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8018648:	9509      	str	r5, [sp, #36]	; 0x24
 801864a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801864e:	9508      	str	r5, [sp, #32]
 8018650:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8018654:	9507      	str	r5, [sp, #28]
 8018656:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 801865a:	9506      	str	r5, [sp, #24]
 801865c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8018660:	9505      	str	r5, [sp, #20]
 8018662:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8018666:	9504      	str	r5, [sp, #16]
 8018668:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801866c:	9503      	str	r5, [sp, #12]
 801866e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8018672:	9502      	str	r5, [sp, #8]
 8018674:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8018678:	e9cd 3500 	strd	r3, r5, [sp]
 801867c:	4613      	mov	r3, r2
 801867e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8018680:	2200      	movs	r2, #0
 8018682:	47a0      	blx	r4
 8018684:	b00b      	add	sp, #44	; 0x2c
 8018686:	bd30      	pop	{r4, r5, pc}

08018688 <_ZN8touchgfx3HAL10beginFrameEv>:
 8018688:	4b04      	ldr	r3, [pc, #16]	; (801869c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801868a:	781b      	ldrb	r3, [r3, #0]
 801868c:	b123      	cbz	r3, 8018698 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801868e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8018692:	f080 0001 	eor.w	r0, r0, #1
 8018696:	4770      	bx	lr
 8018698:	2001      	movs	r0, #1
 801869a:	4770      	bx	lr
 801869c:	20008e2c 	.word	0x20008e2c

080186a0 <_ZN8touchgfx3HAL8endFrameEv>:
 80186a0:	b510      	push	{r4, lr}
 80186a2:	4604      	mov	r4, r0
 80186a4:	6840      	ldr	r0, [r0, #4]
 80186a6:	6803      	ldr	r3, [r0, #0]
 80186a8:	689b      	ldr	r3, [r3, #8]
 80186aa:	4798      	blx	r3
 80186ac:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80186b0:	b113      	cbz	r3, 80186b8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80186b2:	2301      	movs	r3, #1
 80186b4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80186b8:	bd10      	pop	{r4, pc}

080186ba <_ZN8touchgfx3HAL10initializeEv>:
 80186ba:	b510      	push	{r4, lr}
 80186bc:	4604      	mov	r4, r0
 80186be:	f7fe f99b 	bl	80169f8 <_ZN8touchgfx10OSWrappers10initializeEv>
 80186c2:	6860      	ldr	r0, [r4, #4]
 80186c4:	6803      	ldr	r3, [r0, #0]
 80186c6:	68db      	ldr	r3, [r3, #12]
 80186c8:	4798      	blx	r3
 80186ca:	68e0      	ldr	r0, [r4, #12]
 80186cc:	6803      	ldr	r3, [r0, #0]
 80186ce:	689b      	ldr	r3, [r3, #8]
 80186d0:	4798      	blx	r3
 80186d2:	6823      	ldr	r3, [r4, #0]
 80186d4:	4620      	mov	r0, r4
 80186d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80186d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80186dc:	4718      	bx	r3

080186de <_ZN8touchgfx3HAL9taskEntryEv>:
 80186de:	b508      	push	{r3, lr}
 80186e0:	6803      	ldr	r3, [r0, #0]
 80186e2:	4604      	mov	r4, r0
 80186e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80186e8:	4798      	blx	r3
 80186ea:	6823      	ldr	r3, [r4, #0]
 80186ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80186ee:	4620      	mov	r0, r4
 80186f0:	4798      	blx	r3
 80186f2:	f7fe f9f7 	bl	8016ae4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80186f6:	6823      	ldr	r3, [r4, #0]
 80186f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80186fa:	e7f8      	b.n	80186ee <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080186fc <_ZN8touchgfx3HAL4tickEv>:
 80186fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80186fe:	6803      	ldr	r3, [r0, #0]
 8018700:	4d5b      	ldr	r5, [pc, #364]	; (8018870 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8018702:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8018706:	4604      	mov	r4, r0
 8018708:	4798      	blx	r3
 801870a:	2800      	cmp	r0, #0
 801870c:	f000 8095 	beq.w	801883a <_ZN8touchgfx3HAL4tickEv+0x13e>
 8018710:	2001      	movs	r0, #1
 8018712:	f7fd fef3 	bl	80164fc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8018716:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801871a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 801871e:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8018722:	2600      	movs	r6, #0
 8018724:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 8018728:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 801872c:	b133      	cbz	r3, 801873c <_ZN8touchgfx3HAL4tickEv+0x40>
 801872e:	6823      	ldr	r3, [r4, #0]
 8018730:	4620      	mov	r0, r4
 8018732:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8018736:	4798      	blx	r3
 8018738:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801873c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8018740:	6862      	ldr	r2, [r4, #4]
 8018742:	f083 0301 	eor.w	r3, r3, #1
 8018746:	7253      	strb	r3, [r2, #9]
 8018748:	2601      	movs	r6, #1
 801874a:	702e      	strb	r6, [r5, #0]
 801874c:	f002 fe5e 	bl	801b40c <_ZN8touchgfx11Application11getInstanceEv>
 8018750:	6803      	ldr	r3, [r0, #0]
 8018752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018754:	4798      	blx	r3
 8018756:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801875a:	b90b      	cbnz	r3, 8018760 <_ZN8touchgfx3HAL4tickEv+0x64>
 801875c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8018760:	f002 fe54 	bl	801b40c <_ZN8touchgfx11Application11getInstanceEv>
 8018764:	6803      	ldr	r3, [r0, #0]
 8018766:	695b      	ldr	r3, [r3, #20]
 8018768:	4798      	blx	r3
 801876a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801876c:	6803      	ldr	r3, [r0, #0]
 801876e:	691b      	ldr	r3, [r3, #16]
 8018770:	4798      	blx	r3
 8018772:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8018776:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801877a:	3b01      	subs	r3, #1
 801877c:	b2db      	uxtb	r3, r3
 801877e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8018782:	b10a      	cbz	r2, 8018788 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8018784:	2b00      	cmp	r3, #0
 8018786:	d1eb      	bne.n	8018760 <_ZN8touchgfx3HAL4tickEv+0x64>
 8018788:	4a3a      	ldr	r2, [pc, #232]	; (8018874 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801878a:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801878e:	7813      	ldrb	r3, [r2, #0]
 8018790:	3301      	adds	r3, #1
 8018792:	b25b      	sxtb	r3, r3
 8018794:	4299      	cmp	r1, r3
 8018796:	7013      	strb	r3, [r2, #0]
 8018798:	dc10      	bgt.n	80187bc <_ZN8touchgfx3HAL4tickEv+0xc0>
 801879a:	68e0      	ldr	r0, [r4, #12]
 801879c:	2300      	movs	r3, #0
 801879e:	7013      	strb	r3, [r2, #0]
 80187a0:	6803      	ldr	r3, [r0, #0]
 80187a2:	aa03      	add	r2, sp, #12
 80187a4:	68db      	ldr	r3, [r3, #12]
 80187a6:	a902      	add	r1, sp, #8
 80187a8:	4798      	blx	r3
 80187aa:	6823      	ldr	r3, [r4, #0]
 80187ac:	2800      	cmp	r0, #0
 80187ae:	d050      	beq.n	8018852 <_ZN8touchgfx3HAL4tickEv+0x156>
 80187b0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80187b4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80187b8:	4620      	mov	r0, r4
 80187ba:	4798      	blx	r3
 80187bc:	6960      	ldr	r0, [r4, #20]
 80187be:	2300      	movs	r3, #0
 80187c0:	f88d 3007 	strb.w	r3, [sp, #7]
 80187c4:	b158      	cbz	r0, 80187de <_ZN8touchgfx3HAL4tickEv+0xe2>
 80187c6:	6803      	ldr	r3, [r0, #0]
 80187c8:	f10d 0107 	add.w	r1, sp, #7
 80187cc:	68db      	ldr	r3, [r3, #12]
 80187ce:	4798      	blx	r3
 80187d0:	b128      	cbz	r0, 80187de <_ZN8touchgfx3HAL4tickEv+0xe2>
 80187d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80187d4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80187d8:	6803      	ldr	r3, [r0, #0]
 80187da:	68db      	ldr	r3, [r3, #12]
 80187dc:	4798      	blx	r3
 80187de:	f104 001c 	add.w	r0, r4, #28
 80187e2:	f010 ff39 	bl	8029658 <_ZN8touchgfx8Gestures4tickEv>
 80187e6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80187ea:	b30b      	cbz	r3, 8018830 <_ZN8touchgfx3HAL4tickEv+0x134>
 80187ec:	6920      	ldr	r0, [r4, #16]
 80187ee:	6803      	ldr	r3, [r0, #0]
 80187f0:	691b      	ldr	r3, [r3, #16]
 80187f2:	4798      	blx	r3
 80187f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80187f6:	4606      	mov	r6, r0
 80187f8:	b903      	cbnz	r3, 80187fc <_ZN8touchgfx3HAL4tickEv+0x100>
 80187fa:	6720      	str	r0, [r4, #112]	; 0x70
 80187fc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80187fe:	4a1e      	ldr	r2, [pc, #120]	; (8018878 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8018800:	1af3      	subs	r3, r6, r3
 8018802:	4293      	cmp	r3, r2
 8018804:	d914      	bls.n	8018830 <_ZN8touchgfx3HAL4tickEv+0x134>
 8018806:	6920      	ldr	r0, [r4, #16]
 8018808:	6803      	ldr	r3, [r0, #0]
 801880a:	699b      	ldr	r3, [r3, #24]
 801880c:	4798      	blx	r3
 801880e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8018810:	2264      	movs	r2, #100	; 0x64
 8018812:	1af3      	subs	r3, r6, r3
 8018814:	fbb3 f3f2 	udiv	r3, r3, r2
 8018818:	fbb0 f0f3 	udiv	r0, r0, r3
 801881c:	2800      	cmp	r0, #0
 801881e:	dc1d      	bgt.n	801885c <_ZN8touchgfx3HAL4tickEv+0x160>
 8018820:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8018824:	6920      	ldr	r0, [r4, #16]
 8018826:	6803      	ldr	r3, [r0, #0]
 8018828:	2100      	movs	r1, #0
 801882a:	69db      	ldr	r3, [r3, #28]
 801882c:	4798      	blx	r3
 801882e:	6726      	str	r6, [r4, #112]	; 0x70
 8018830:	f002 fdec 	bl	801b40c <_ZN8touchgfx11Application11getInstanceEv>
 8018834:	6803      	ldr	r3, [r0, #0]
 8018836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018838:	4798      	blx	r3
 801883a:	6823      	ldr	r3, [r4, #0]
 801883c:	4620      	mov	r0, r4
 801883e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8018842:	4798      	blx	r3
 8018844:	2001      	movs	r0, #1
 8018846:	f7fd fe64 	bl	8016512 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801884a:	2300      	movs	r3, #0
 801884c:	702b      	strb	r3, [r5, #0]
 801884e:	b004      	add	sp, #16
 8018850:	bd70      	pop	{r4, r5, r6, pc}
 8018852:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8018856:	4620      	mov	r0, r4
 8018858:	4798      	blx	r3
 801885a:	e7af      	b.n	80187bc <_ZN8touchgfx3HAL4tickEv+0xc0>
 801885c:	2863      	cmp	r0, #99	; 0x63
 801885e:	bfcb      	itete	gt
 8018860:	2300      	movgt	r3, #0
 8018862:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8018866:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801886a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801886e:	e7d9      	b.n	8018824 <_ZN8touchgfx3HAL4tickEv+0x128>
 8018870:	20008e34 	.word	0x20008e34
 8018874:	20008e35 	.word	0x20008e35
 8018878:	05f5e100 	.word	0x05f5e100

0801887c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801887c:	f7fe b8fe 	b.w	8016a7c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08018880 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8018880:	6581      	str	r1, [r0, #88]	; 0x58
 8018882:	301c      	adds	r0, #28
 8018884:	f010 bee6 	b.w	8029654 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08018888 <_ZN8touchgfx3HAL5touchEll>:
 8018888:	b530      	push	{r4, r5, lr}
 801888a:	b087      	sub	sp, #28
 801888c:	4604      	mov	r4, r0
 801888e:	a804      	add	r0, sp, #16
 8018890:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8018894:	f002 fb40 	bl	801af18 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8018898:	9b04      	ldr	r3, [sp, #16]
 801889a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801889e:	a906      	add	r1, sp, #24
 80188a0:	9b05      	ldr	r3, [sp, #20]
 80188a2:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80188a6:	a803      	add	r0, sp, #12
 80188a8:	f002 fb88 	bl	801afbc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80188ac:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80188b0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80188b4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80188b8:	f104 001c 	add.w	r0, r4, #28
 80188bc:	b189      	cbz	r1, 80188e2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80188be:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80188c2:	9300      	str	r3, [sp, #0]
 80188c4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80188c8:	4613      	mov	r3, r2
 80188ca:	462a      	mov	r2, r5
 80188cc:	f010 fed2 	bl	8029674 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80188d0:	b128      	cbz	r0, 80188de <_ZN8touchgfx3HAL5touchEll+0x56>
 80188d2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80188d6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80188d8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80188dc:	6623      	str	r3, [r4, #96]	; 0x60
 80188de:	b007      	add	sp, #28
 80188e0:	bd30      	pop	{r4, r5, pc}
 80188e2:	f010 ff07 	bl	80296f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80188e6:	2301      	movs	r3, #1
 80188e8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80188ec:	e7f1      	b.n	80188d2 <_ZN8touchgfx3HAL5touchEll+0x4a>

080188ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80188ee:	b510      	push	{r4, lr}
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d046      	beq.n	8018982 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80188f4:	ea81 0002 	eor.w	r0, r1, r2
 80188f8:	07c4      	lsls	r4, r0, #31
 80188fa:	d508      	bpl.n	801890e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80188fc:	440b      	add	r3, r1
 80188fe:	3a01      	subs	r2, #1
 8018900:	428b      	cmp	r3, r1
 8018902:	d93e      	bls.n	8018982 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018904:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8018908:	f801 0b01 	strb.w	r0, [r1], #1
 801890c:	e7f8      	b.n	8018900 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801890e:	07d0      	lsls	r0, r2, #31
 8018910:	bf42      	ittt	mi
 8018912:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8018916:	f801 0b01 	strbmi.w	r0, [r1], #1
 801891a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801891e:	2b01      	cmp	r3, #1
 8018920:	d911      	bls.n	8018946 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018922:	ea81 0402 	eor.w	r4, r1, r2
 8018926:	07a4      	lsls	r4, r4, #30
 8018928:	4610      	mov	r0, r2
 801892a:	d022      	beq.n	8018972 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801892c:	f023 0401 	bic.w	r4, r3, #1
 8018930:	440c      	add	r4, r1
 8018932:	428c      	cmp	r4, r1
 8018934:	4602      	mov	r2, r0
 8018936:	d904      	bls.n	8018942 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8018938:	8812      	ldrh	r2, [r2, #0]
 801893a:	f821 2b02 	strh.w	r2, [r1], #2
 801893e:	3002      	adds	r0, #2
 8018940:	e7f7      	b.n	8018932 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8018942:	f003 0301 	and.w	r3, r3, #1
 8018946:	f023 0003 	bic.w	r0, r3, #3
 801894a:	4408      	add	r0, r1
 801894c:	4288      	cmp	r0, r1
 801894e:	4614      	mov	r4, r2
 8018950:	d904      	bls.n	801895c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8018952:	6824      	ldr	r4, [r4, #0]
 8018954:	f841 4b04 	str.w	r4, [r1], #4
 8018958:	3204      	adds	r2, #4
 801895a:	e7f7      	b.n	801894c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801895c:	f003 0303 	and.w	r3, r3, #3
 8018960:	440b      	add	r3, r1
 8018962:	3a01      	subs	r2, #1
 8018964:	428b      	cmp	r3, r1
 8018966:	d90c      	bls.n	8018982 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8018968:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801896c:	f801 0b01 	strb.w	r0, [r1], #1
 8018970:	e7f8      	b.n	8018964 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8018972:	0790      	lsls	r0, r2, #30
 8018974:	d0e7      	beq.n	8018946 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018976:	f832 0b02 	ldrh.w	r0, [r2], #2
 801897a:	f821 0b02 	strh.w	r0, [r1], #2
 801897e:	3b02      	subs	r3, #2
 8018980:	e7e1      	b.n	8018946 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8018982:	2001      	movs	r0, #1
 8018984:	bd10      	pop	{r4, pc}

08018986 <_ZN8touchgfx3HAL7noTouchEv>:
 8018986:	b510      	push	{r4, lr}
 8018988:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801898c:	4604      	mov	r4, r0
 801898e:	b153      	cbz	r3, 80189a6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8018990:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8018994:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8018998:	2101      	movs	r1, #1
 801899a:	301c      	adds	r0, #28
 801899c:	f010 feaa 	bl	80296f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80189a0:	2300      	movs	r3, #0
 80189a2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80189a6:	bd10      	pop	{r4, pc}

080189a8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80189a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80189ac:	b085      	sub	sp, #20
 80189ae:	ad04      	add	r5, sp, #16
 80189b0:	4604      	mov	r4, r0
 80189b2:	2000      	movs	r0, #0
 80189b4:	f845 0d04 	str.w	r0, [r5, #-4]!
 80189b8:	69a0      	ldr	r0, [r4, #24]
 80189ba:	6806      	ldr	r6, [r0, #0]
 80189bc:	9501      	str	r5, [sp, #4]
 80189be:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80189c2:	9500      	str	r5, [sp, #0]
 80189c4:	6835      	ldr	r5, [r6, #0]
 80189c6:	4699      	mov	r9, r3
 80189c8:	460f      	mov	r7, r1
 80189ca:	4690      	mov	r8, r2
 80189cc:	47a8      	blx	r5
 80189ce:	4d10      	ldr	r5, [pc, #64]	; (8018a10 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80189d0:	4606      	mov	r6, r0
 80189d2:	f8a5 9000 	strh.w	r9, [r5]
 80189d6:	f7f9 ffdb 	bl	8012990 <_ZN8touchgfx3HAL3lcdEv>
 80189da:	6803      	ldr	r3, [r0, #0]
 80189dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189de:	4798      	blx	r3
 80189e0:	b128      	cbz	r0, 80189ee <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80189e2:	2801      	cmp	r0, #1
 80189e4:	d00b      	beq.n	80189fe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80189e6:	4630      	mov	r0, r6
 80189e8:	b005      	add	sp, #20
 80189ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189ee:	882b      	ldrh	r3, [r5, #0]
 80189f0:	fb08 7203 	mla	r2, r8, r3, r7
 80189f4:	9b03      	ldr	r3, [sp, #12]
 80189f6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80189fa:	63e3      	str	r3, [r4, #60]	; 0x3c
 80189fc:	e7f3      	b.n	80189e6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80189fe:	882a      	ldrh	r2, [r5, #0]
 8018a00:	9b03      	ldr	r3, [sp, #12]
 8018a02:	fb08 7202 	mla	r2, r8, r2, r7
 8018a06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018a0a:	1a9a      	subs	r2, r3, r2
 8018a0c:	63e2      	str	r2, [r4, #60]	; 0x3c
 8018a0e:	e7ea      	b.n	80189e6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8018a10:	20008e28 	.word	0x20008e28

08018a14 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8018a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a16:	b08b      	sub	sp, #44	; 0x2c
 8018a18:	4617      	mov	r7, r2
 8018a1a:	4604      	mov	r4, r0
 8018a1c:	460e      	mov	r6, r1
 8018a1e:	461d      	mov	r5, r3
 8018a20:	f7f9 ffb6 	bl	8012990 <_ZN8touchgfx3HAL3lcdEv>
 8018a24:	6803      	ldr	r3, [r0, #0]
 8018a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a28:	4798      	blx	r3
 8018a2a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8018a2e:	9007      	str	r0, [sp, #28]
 8018a30:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018a34:	4b0d      	ldr	r3, [pc, #52]	; (8018a6c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8018a36:	6822      	ldr	r2, [r4, #0]
 8018a38:	881b      	ldrh	r3, [r3, #0]
 8018a3a:	9306      	str	r3, [sp, #24]
 8018a3c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8018a40:	9305      	str	r3, [sp, #20]
 8018a42:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8018a46:	9304      	str	r3, [sp, #16]
 8018a48:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018a4c:	9303      	str	r3, [sp, #12]
 8018a4e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018a52:	9302      	str	r3, [sp, #8]
 8018a54:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018a58:	e9cd 5300 	strd	r5, r3, [sp]
 8018a5c:	4631      	mov	r1, r6
 8018a5e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8018a60:	463b      	mov	r3, r7
 8018a62:	2200      	movs	r2, #0
 8018a64:	4620      	mov	r0, r4
 8018a66:	47a8      	blx	r5
 8018a68:	b00b      	add	sp, #44	; 0x2c
 8018a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a6c:	20008e28 	.word	0x20008e28

08018a70 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8018a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018a74:	4698      	mov	r8, r3
 8018a76:	6803      	ldr	r3, [r0, #0]
 8018a78:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8018a7a:	4b15      	ldr	r3, [pc, #84]	; (8018ad0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8018a7c:	b08b      	sub	sp, #44	; 0x2c
 8018a7e:	4617      	mov	r7, r2
 8018a80:	f8b3 9000 	ldrh.w	r9, [r3]
 8018a84:	460e      	mov	r6, r1
 8018a86:	4604      	mov	r4, r0
 8018a88:	f7f9 ff82 	bl	8012990 <_ZN8touchgfx3HAL3lcdEv>
 8018a8c:	6803      	ldr	r3, [r0, #0]
 8018a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a90:	4798      	blx	r3
 8018a92:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8018a96:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8018a9a:	2302      	movs	r3, #2
 8018a9c:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8018aa0:	2301      	movs	r3, #1
 8018aa2:	9305      	str	r3, [sp, #20]
 8018aa4:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8018aa8:	9304      	str	r3, [sp, #16]
 8018aaa:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018aae:	9303      	str	r3, [sp, #12]
 8018ab0:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018ab4:	9302      	str	r3, [sp, #8]
 8018ab6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018aba:	2200      	movs	r2, #0
 8018abc:	e9cd 8300 	strd	r8, r3, [sp]
 8018ac0:	4631      	mov	r1, r6
 8018ac2:	463b      	mov	r3, r7
 8018ac4:	4620      	mov	r0, r4
 8018ac6:	47a8      	blx	r5
 8018ac8:	b00b      	add	sp, #44	; 0x2c
 8018aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ace:	bf00      	nop
 8018ad0:	20008e28 	.word	0x20008e28

08018ad4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8018ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018ad8:	4698      	mov	r8, r3
 8018ada:	6803      	ldr	r3, [r0, #0]
 8018adc:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8018ade:	4b11      	ldr	r3, [pc, #68]	; (8018b24 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8018ae0:	b087      	sub	sp, #28
 8018ae2:	f8b3 9000 	ldrh.w	r9, [r3]
 8018ae6:	460e      	mov	r6, r1
 8018ae8:	4617      	mov	r7, r2
 8018aea:	4604      	mov	r4, r0
 8018aec:	f7f9 ff50 	bl	8012990 <_ZN8touchgfx3HAL3lcdEv>
 8018af0:	6803      	ldr	r3, [r0, #0]
 8018af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018af4:	4798      	blx	r3
 8018af6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8018afa:	f8cd 900c 	str.w	r9, [sp, #12]
 8018afe:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8018b02:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8018b06:	9302      	str	r3, [sp, #8]
 8018b08:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8018b0c:	9301      	str	r3, [sp, #4]
 8018b0e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8018b12:	9300      	str	r3, [sp, #0]
 8018b14:	463a      	mov	r2, r7
 8018b16:	4643      	mov	r3, r8
 8018b18:	4631      	mov	r1, r6
 8018b1a:	4620      	mov	r0, r4
 8018b1c:	47a8      	blx	r5
 8018b1e:	b007      	add	sp, #28
 8018b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b24:	20008e28 	.word	0x20008e28

08018b28 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8018b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b2c:	4604      	mov	r4, r0
 8018b2e:	b08f      	sub	sp, #60	; 0x3c
 8018b30:	4610      	mov	r0, r2
 8018b32:	460d      	mov	r5, r1
 8018b34:	4691      	mov	r9, r2
 8018b36:	461e      	mov	r6, r3
 8018b38:	f004 ffe0 	bl	801dafc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018b3c:	2800      	cmp	r0, #0
 8018b3e:	f000 809d 	beq.w	8018c7c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8018b42:	6823      	ldr	r3, [r4, #0]
 8018b44:	f8df b198 	ldr.w	fp, [pc, #408]	; 8018ce0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8018b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b4a:	f8df a198 	ldr.w	sl, [pc, #408]	; 8018ce4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8018b4e:	4f61      	ldr	r7, [pc, #388]	; (8018cd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018b50:	4620      	mov	r0, r4
 8018b52:	4798      	blx	r3
 8018b54:	6823      	ldr	r3, [r4, #0]
 8018b56:	4620      	mov	r0, r4
 8018b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b5a:	4798      	blx	r3
 8018b5c:	f8bb 3000 	ldrh.w	r3, [fp]
 8018b60:	9301      	str	r3, [sp, #4]
 8018b62:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8018b66:	f8ba 3000 	ldrh.w	r3, [sl]
 8018b6a:	9302      	str	r3, [sp, #8]
 8018b6c:	883b      	ldrh	r3, [r7, #0]
 8018b6e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8018b72:	9303      	str	r3, [sp, #12]
 8018b74:	4b58      	ldr	r3, [pc, #352]	; (8018cd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018b76:	9305      	str	r3, [sp, #20]
 8018b78:	881a      	ldrh	r2, [r3, #0]
 8018b7a:	9204      	str	r2, [sp, #16]
 8018b7c:	4640      	mov	r0, r8
 8018b7e:	f005 f851 	bl	801dc24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018b82:	8038      	strh	r0, [r7, #0]
 8018b84:	4640      	mov	r0, r8
 8018b86:	f005 f881 	bl	801dc8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018b8a:	9b05      	ldr	r3, [sp, #20]
 8018b8c:	b280      	uxth	r0, r0
 8018b8e:	8018      	strh	r0, [r3, #0]
 8018b90:	4b52      	ldr	r3, [pc, #328]	; (8018cdc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8018b92:	781b      	ldrb	r3, [r3, #0]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d174      	bne.n	8018c82 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8018b98:	883b      	ldrh	r3, [r7, #0]
 8018b9a:	f8ab 3000 	strh.w	r3, [fp]
 8018b9e:	f8aa 0000 	strh.w	r0, [sl]
 8018ba2:	4648      	mov	r0, r9
 8018ba4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8018ba8:	f004 ffa8 	bl	801dafc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8018bac:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8018bb0:	2200      	movs	r2, #0
 8018bb2:	4611      	mov	r1, r2
 8018bb4:	4628      	mov	r0, r5
 8018bb6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8018bba:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8018bbe:	f7f9 fde5 	bl	801278c <_ZN8touchgfx8Drawable5setXYEss>
 8018bc2:	2301      	movs	r3, #1
 8018bc4:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8018bc8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8018bcc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	dd5c      	ble.n	8018c8e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8018bd4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	dd58      	ble.n	8018c8e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8018bdc:	462a      	mov	r2, r5
 8018bde:	ab0a      	add	r3, sp, #40	; 0x28
 8018be0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018be4:	6851      	ldr	r1, [r2, #4]
 8018be6:	c303      	stmia	r3!, {r0, r1}
 8018be8:	4631      	mov	r1, r6
 8018bea:	a80a      	add	r0, sp, #40	; 0x28
 8018bec:	f7ff fc00 	bl	80183f0 <_ZN8touchgfx4RectaNERKS0_>
 8018bf0:	4b38      	ldr	r3, [pc, #224]	; (8018cd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018bf2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018bf6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8018bfa:	2100      	movs	r1, #0
 8018bfc:	aa0a      	add	r2, sp, #40	; 0x28
 8018bfe:	4b36      	ldr	r3, [pc, #216]	; (8018cd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018c00:	910c      	str	r1, [sp, #48]	; 0x30
 8018c02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018c0a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018c0e:	ab08      	add	r3, sp, #32
 8018c10:	e883 0003 	stmia.w	r3, {r0, r1}
 8018c14:	4618      	mov	r0, r3
 8018c16:	a90c      	add	r1, sp, #48	; 0x30
 8018c18:	f7ff fbea 	bl	80183f0 <_ZN8touchgfx4RectaNERKS0_>
 8018c1c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d13c      	bne.n	8018c9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8018c22:	2000      	movs	r0, #0
 8018c24:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8018c28:	2600      	movs	r6, #0
 8018c2a:	682a      	ldr	r2, [r5, #0]
 8018c2c:	696b      	ldr	r3, [r5, #20]
 8018c2e:	616e      	str	r6, [r5, #20]
 8018c30:	9305      	str	r3, [sp, #20]
 8018c32:	6892      	ldr	r2, [r2, #8]
 8018c34:	a908      	add	r1, sp, #32
 8018c36:	4628      	mov	r0, r5
 8018c38:	4790      	blx	r2
 8018c3a:	9b05      	ldr	r3, [sp, #20]
 8018c3c:	616b      	str	r3, [r5, #20]
 8018c3e:	4652      	mov	r2, sl
 8018c40:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8018c44:	4649      	mov	r1, r9
 8018c46:	4628      	mov	r0, r5
 8018c48:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8018c4c:	f7f9 fd9e 	bl	801278c <_ZN8touchgfx8Drawable5setXYEss>
 8018c50:	4b23      	ldr	r3, [pc, #140]	; (8018ce0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8018c52:	9a01      	ldr	r2, [sp, #4]
 8018c54:	801a      	strh	r2, [r3, #0]
 8018c56:	4b23      	ldr	r3, [pc, #140]	; (8018ce4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8018c58:	9a02      	ldr	r2, [sp, #8]
 8018c5a:	801a      	strh	r2, [r3, #0]
 8018c5c:	4b1d      	ldr	r3, [pc, #116]	; (8018cd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8018c5e:	9a03      	ldr	r2, [sp, #12]
 8018c60:	801a      	strh	r2, [r3, #0]
 8018c62:	4b1d      	ldr	r3, [pc, #116]	; (8018cd8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8018c64:	9a04      	ldr	r2, [sp, #16]
 8018c66:	801a      	strh	r2, [r3, #0]
 8018c68:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8018c6c:	6823      	ldr	r3, [r4, #0]
 8018c6e:	4620      	mov	r0, r4
 8018c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018c72:	4798      	blx	r3
 8018c74:	6823      	ldr	r3, [r4, #0]
 8018c76:	4620      	mov	r0, r4
 8018c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c7a:	4798      	blx	r3
 8018c7c:	b00f      	add	sp, #60	; 0x3c
 8018c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c82:	883b      	ldrh	r3, [r7, #0]
 8018c84:	f8ab 0000 	strh.w	r0, [fp]
 8018c88:	f8aa 3000 	strh.w	r3, [sl]
 8018c8c:	e789      	b.n	8018ba2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8018c8e:	462a      	mov	r2, r5
 8018c90:	ab0a      	add	r3, sp, #40	; 0x28
 8018c92:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8018c96:	6851      	ldr	r1, [r2, #4]
 8018c98:	c303      	stmia	r3!, {r0, r1}
 8018c9a:	e7a9      	b.n	8018bf0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8018c9c:	a807      	add	r0, sp, #28
 8018c9e:	f005 f931 	bl	801df04 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018ca2:	4606      	mov	r6, r0
 8018ca4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8018ca6:	6803      	ldr	r3, [r0, #0]
 8018ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018caa:	4798      	blx	r3
 8018cac:	4286      	cmp	r6, r0
 8018cae:	d1b8      	bne.n	8018c22 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8018cb0:	f7f9 fe6e 	bl	8012990 <_ZN8touchgfx3HAL3lcdEv>
 8018cb4:	6803      	ldr	r3, [r0, #0]
 8018cb6:	4606      	mov	r6, r0
 8018cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018cba:	9305      	str	r3, [sp, #20]
 8018cbc:	a807      	add	r0, sp, #28
 8018cbe:	f005 f921 	bl	801df04 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018cc2:	9b05      	ldr	r3, [sp, #20]
 8018cc4:	4601      	mov	r1, r0
 8018cc6:	4630      	mov	r0, r6
 8018cc8:	4798      	blx	r3
 8018cca:	f080 0001 	eor.w	r0, r0, #1
 8018cce:	b2c0      	uxtb	r0, r0
 8018cd0:	e7a8      	b.n	8018c24 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8018cd2:	bf00      	nop
 8018cd4:	20008e22 	.word	0x20008e22
 8018cd8:	20008e24 	.word	0x20008e24
 8018cdc:	20008e26 	.word	0x20008e26
 8018ce0:	20008e28 	.word	0x20008e28
 8018ce4:	20008e2a 	.word	0x20008e2a

08018ce8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8018ce8:	b510      	push	{r4, lr}
 8018cea:	4b07      	ldr	r3, [pc, #28]	; (8018d08 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8018cec:	781b      	ldrb	r3, [r3, #0]
 8018cee:	4604      	mov	r4, r0
 8018cf0:	b13b      	cbz	r3, 8018d02 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018cf2:	6803      	ldr	r3, [r0, #0]
 8018cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018cf6:	4798      	blx	r3
 8018cf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018cfa:	4283      	cmp	r3, r0
 8018cfc:	d101      	bne.n	8018d02 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8018cfe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8018d00:	bd10      	pop	{r4, pc}
 8018d02:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8018d04:	e7fc      	b.n	8018d00 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8018d06:	bf00      	nop
 8018d08:	20008e2c 	.word	0x20008e2c

08018d0c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8018d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d10:	b08a      	sub	sp, #40	; 0x28
 8018d12:	461d      	mov	r5, r3
 8018d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018d18:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8018d1c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018d20:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018d24:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018d28:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018d2c:	2400      	movs	r4, #0
 8018d2e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018d32:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8018d36:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018d3a:	4690      	mov	r8, r2
 8018d3c:	4607      	mov	r7, r0
 8018d3e:	9404      	str	r4, [sp, #16]
 8018d40:	f88d 4020 	strb.w	r4, [sp, #32]
 8018d44:	f7ff ffd0 	bl	8018ce8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018d48:	fb06 8505 	mla	r5, r6, r5, r8
 8018d4c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018d50:	6878      	ldr	r0, [r7, #4]
 8018d52:	9505      	str	r5, [sp, #20]
 8018d54:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018d58:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8018d5c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8018d60:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8018d64:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8018d68:	6803      	ldr	r3, [r0, #0]
 8018d6a:	a901      	add	r1, sp, #4
 8018d6c:	685b      	ldr	r3, [r3, #4]
 8018d6e:	4798      	blx	r3
 8018d70:	b00a      	add	sp, #40	; 0x28
 8018d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018d76 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8018d76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018d7a:	b08b      	sub	sp, #44	; 0x2c
 8018d7c:	2400      	movs	r4, #0
 8018d7e:	461d      	mov	r5, r3
 8018d80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018d84:	4688      	mov	r8, r1
 8018d86:	4691      	mov	r9, r2
 8018d88:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8018d8c:	9404      	str	r4, [sp, #16]
 8018d8e:	4607      	mov	r7, r0
 8018d90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018d94:	f7ff ffa8 	bl	8018ce8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018d98:	fb06 9505 	mla	r5, r6, r5, r9
 8018d9c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018da0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018da4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8018da8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018dac:	6878      	ldr	r0, [r7, #4]
 8018dae:	9505      	str	r5, [sp, #20]
 8018db0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018db4:	f8ad 401c 	strh.w	r4, [sp, #28]
 8018db8:	f8ad 601e 	strh.w	r6, [sp, #30]
 8018dbc:	f8cd 8010 	str.w	r8, [sp, #16]
 8018dc0:	f8ad 4020 	strh.w	r4, [sp, #32]
 8018dc4:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8018dc8:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8018dcc:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8018dd0:	6803      	ldr	r3, [r0, #0]
 8018dd2:	a901      	add	r1, sp, #4
 8018dd4:	685b      	ldr	r3, [r3, #4]
 8018dd6:	4798      	blx	r3
 8018dd8:	b00b      	add	sp, #44	; 0x2c
 8018dda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08018de0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8018de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018de4:	b08a      	sub	sp, #40	; 0x28
 8018de6:	4698      	mov	r8, r3
 8018de8:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8018dec:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8018df0:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8018df4:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8018df8:	2300      	movs	r3, #0
 8018dfa:	2d0b      	cmp	r5, #11
 8018dfc:	4606      	mov	r6, r0
 8018dfe:	9304      	str	r3, [sp, #16]
 8018e00:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8018e04:	d138      	bne.n	8018e78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 8018e06:	2380      	movs	r3, #128	; 0x80
 8018e08:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8018e0c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018e10:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018e14:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018e18:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018e1c:	f88d 0020 	strb.w	r0, [sp, #32]
 8018e20:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8018e24:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018e28:	4630      	mov	r0, r6
 8018e2a:	9203      	str	r2, [sp, #12]
 8018e2c:	f7ff ff5c 	bl	8018ce8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018e30:	2c0b      	cmp	r4, #11
 8018e32:	bf98      	it	ls
 8018e34:	4b1b      	ldrls	r3, [pc, #108]	; (8018ea4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8018e36:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8018e3a:	bf98      	it	ls
 8018e3c:	5d19      	ldrbls	r1, [r3, r4]
 8018e3e:	f8ad 701e 	strh.w	r7, [sp, #30]
 8018e42:	bf88      	it	hi
 8018e44:	2100      	movhi	r1, #0
 8018e46:	fb02 8307 	mla	r3, r2, r7, r8
 8018e4a:	10c9      	asrs	r1, r1, #3
 8018e4c:	fb01 0003 	mla	r0, r1, r3, r0
 8018e50:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8018e54:	9005      	str	r0, [sp, #20]
 8018e56:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8018e5a:	6870      	ldr	r0, [r6, #4]
 8018e5c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8018e60:	2300      	movs	r3, #0
 8018e62:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8018e66:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018e6a:	6803      	ldr	r3, [r0, #0]
 8018e6c:	a901      	add	r1, sp, #4
 8018e6e:	685b      	ldr	r3, [r3, #4]
 8018e70:	4798      	blx	r3
 8018e72:	b00a      	add	sp, #40	; 0x28
 8018e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e78:	2d02      	cmp	r5, #2
 8018e7a:	d109      	bne.n	8018e90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 8018e7c:	28ff      	cmp	r0, #255	; 0xff
 8018e7e:	d105      	bne.n	8018e8c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 8018e80:	f1bc 0f00 	cmp.w	ip, #0
 8018e84:	bf14      	ite	ne
 8018e86:	2340      	movne	r3, #64	; 0x40
 8018e88:	2320      	moveq	r3, #32
 8018e8a:	e7bd      	b.n	8018e08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018e8c:	2340      	movs	r3, #64	; 0x40
 8018e8e:	e7bb      	b.n	8018e08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018e90:	28ff      	cmp	r0, #255	; 0xff
 8018e92:	d105      	bne.n	8018ea0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 8018e94:	f1bc 0f00 	cmp.w	ip, #0
 8018e98:	bf14      	ite	ne
 8018e9a:	2304      	movne	r3, #4
 8018e9c:	2301      	moveq	r3, #1
 8018e9e:	e7b3      	b.n	8018e08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018ea0:	2304      	movs	r3, #4
 8018ea2:	e7b1      	b.n	8018e08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8018ea4:	0802c67c 	.word	0x0802c67c

08018ea8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8018ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018eac:	b08b      	sub	sp, #44	; 0x2c
 8018eae:	461d      	mov	r5, r3
 8018eb0:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8018eb4:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8018eb8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8018ebc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8018ec0:	bf14      	ite	ne
 8018ec2:	2308      	movne	r3, #8
 8018ec4:	2302      	moveq	r3, #2
 8018ec6:	2400      	movs	r4, #0
 8018ec8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018ecc:	4688      	mov	r8, r1
 8018ece:	4693      	mov	fp, r2
 8018ed0:	9404      	str	r4, [sp, #16]
 8018ed2:	4607      	mov	r7, r0
 8018ed4:	f7ff ff08 	bl	8018ce8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018ed8:	2e0b      	cmp	r6, #11
 8018eda:	bf98      	it	ls
 8018edc:	4b15      	ldrls	r3, [pc, #84]	; (8018f34 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8018ede:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018ee2:	bf98      	it	ls
 8018ee4:	5d9c      	ldrbls	r4, [r3, r6]
 8018ee6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8018eea:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018eee:	fb05 b50a 	mla	r5, r5, sl, fp
 8018ef2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8018ef6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018efa:	10e4      	asrs	r4, r4, #3
 8018efc:	fb04 0405 	mla	r4, r4, r5, r0
 8018f00:	2300      	movs	r3, #0
 8018f02:	6878      	ldr	r0, [r7, #4]
 8018f04:	9405      	str	r4, [sp, #20]
 8018f06:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018f0a:	f8ad a01e 	strh.w	sl, [sp, #30]
 8018f0e:	f8cd 8010 	str.w	r8, [sp, #16]
 8018f12:	f88d 9020 	strb.w	r9, [sp, #32]
 8018f16:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8018f1a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8018f1e:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8018f22:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8018f26:	6803      	ldr	r3, [r0, #0]
 8018f28:	a901      	add	r1, sp, #4
 8018f2a:	685b      	ldr	r3, [r3, #4]
 8018f2c:	4798      	blx	r3
 8018f2e:	b00b      	add	sp, #44	; 0x2c
 8018f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f34:	0802c67c 	.word	0x0802c67c

08018f38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8018f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f3c:	461e      	mov	r6, r3
 8018f3e:	4b0a      	ldr	r3, [pc, #40]	; (8018f68 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8018f40:	460f      	mov	r7, r1
 8018f42:	881d      	ldrh	r5, [r3, #0]
 8018f44:	4690      	mov	r8, r2
 8018f46:	f7f9 fd23 	bl	8012990 <_ZN8touchgfx3HAL3lcdEv>
 8018f4a:	6803      	ldr	r3, [r0, #0]
 8018f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018f4e:	4798      	blx	r3
 8018f50:	280b      	cmp	r0, #11
 8018f52:	bf9a      	itte	ls
 8018f54:	4b05      	ldrls	r3, [pc, #20]	; (8018f6c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8018f56:	5c1c      	ldrbls	r4, [r3, r0]
 8018f58:	2400      	movhi	r4, #0
 8018f5a:	fb08 7005 	mla	r0, r8, r5, r7
 8018f5e:	10e4      	asrs	r4, r4, #3
 8018f60:	fb04 6000 	mla	r0, r4, r0, r6
 8018f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f68:	20008e28 	.word	0x20008e28
 8018f6c:	0802c67c 	.word	0x0802c67c

08018f70 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8018f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f72:	b08b      	sub	sp, #44	; 0x2c
 8018f74:	461f      	mov	r7, r3
 8018f76:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8018f7a:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8018f7e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8018f82:	f8ad 3018 	strh.w	r3, [sp, #24]
 8018f86:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8018f8a:	f8ad 301a 	strh.w	r3, [sp, #26]
 8018f8e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8018f92:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018f96:	2500      	movs	r5, #0
 8018f98:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8018f9c:	f88d 3020 	strb.w	r3, [sp, #32]
 8018fa0:	4604      	mov	r4, r0
 8018fa2:	4616      	mov	r6, r2
 8018fa4:	9504      	str	r5, [sp, #16]
 8018fa6:	f7ff fe9f 	bl	8018ce8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8018faa:	463a      	mov	r2, r7
 8018fac:	4631      	mov	r1, r6
 8018fae:	4603      	mov	r3, r0
 8018fb0:	4620      	mov	r0, r4
 8018fb2:	f7ff ffc1 	bl	8018f38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8018fb6:	4b0e      	ldr	r3, [pc, #56]	; (8018ff0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8018fb8:	9005      	str	r0, [sp, #20]
 8018fba:	881b      	ldrh	r3, [r3, #0]
 8018fbc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018fc0:	f7f9 fce6 	bl	8012990 <_ZN8touchgfx3HAL3lcdEv>
 8018fc4:	6803      	ldr	r3, [r0, #0]
 8018fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fc8:	4798      	blx	r3
 8018fca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018fcc:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8018fd0:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8018fd4:	9304      	str	r3, [sp, #16]
 8018fd6:	6860      	ldr	r0, [r4, #4]
 8018fd8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8018fdc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8018fe0:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8018fe4:	6803      	ldr	r3, [r0, #0]
 8018fe6:	a901      	add	r1, sp, #4
 8018fe8:	685b      	ldr	r3, [r3, #4]
 8018fea:	4798      	blx	r3
 8018fec:	b00b      	add	sp, #44	; 0x2c
 8018fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ff0:	20008e28 	.word	0x20008e28

08018ff4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8018ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ff6:	b08d      	sub	sp, #52	; 0x34
 8018ff8:	466b      	mov	r3, sp
 8018ffa:	e883 0006 	stmia.w	r3, {r1, r2}
 8018ffe:	2300      	movs	r3, #0
 8019000:	9306      	str	r3, [sp, #24]
 8019002:	6803      	ldr	r3, [r0, #0]
 8019004:	f8bd 6000 	ldrh.w	r6, [sp]
 8019008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801900a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801900e:	2501      	movs	r5, #1
 8019010:	9503      	str	r5, [sp, #12]
 8019012:	4604      	mov	r4, r0
 8019014:	4798      	blx	r3
 8019016:	463a      	mov	r2, r7
 8019018:	4631      	mov	r1, r6
 801901a:	4603      	mov	r3, r0
 801901c:	4620      	mov	r0, r4
 801901e:	f7ff ff8b 	bl	8018f38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019022:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8019024:	9307      	str	r3, [sp, #28]
 8019026:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801902a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801902e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019032:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8019036:	4b0f      	ldr	r3, [pc, #60]	; (8019074 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8019038:	9004      	str	r0, [sp, #16]
 801903a:	881b      	ldrh	r3, [r3, #0]
 801903c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8019040:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8019044:	f7f9 fca4 	bl	8012990 <_ZN8touchgfx3HAL3lcdEv>
 8019048:	6803      	ldr	r3, [r0, #0]
 801904a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801904c:	4798      	blx	r3
 801904e:	23ff      	movs	r3, #255	; 0xff
 8019050:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8019054:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8019058:	6860      	ldr	r0, [r4, #4]
 801905a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801905e:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8019062:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8019066:	6803      	ldr	r3, [r0, #0]
 8019068:	a903      	add	r1, sp, #12
 801906a:	685b      	ldr	r3, [r3, #4]
 801906c:	4798      	blx	r3
 801906e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8019070:	b00d      	add	sp, #52	; 0x34
 8019072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019074:	20008e28 	.word	0x20008e28

08019078 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8019078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801907c:	b08c      	sub	sp, #48	; 0x30
 801907e:	461e      	mov	r6, r3
 8019080:	466d      	mov	r5, sp
 8019082:	2300      	movs	r3, #0
 8019084:	e885 0006 	stmia.w	r5, {r1, r2}
 8019088:	9306      	str	r3, [sp, #24]
 801908a:	6803      	ldr	r3, [r0, #0]
 801908c:	f8bd 7000 	ldrh.w	r7, [sp]
 8019090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019092:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8019096:	2501      	movs	r5, #1
 8019098:	9503      	str	r5, [sp, #12]
 801909a:	4604      	mov	r4, r0
 801909c:	4798      	blx	r3
 801909e:	4642      	mov	r2, r8
 80190a0:	4639      	mov	r1, r7
 80190a2:	4603      	mov	r3, r0
 80190a4:	4620      	mov	r0, r4
 80190a6:	f7ff ff47 	bl	8018f38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80190aa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80190ae:	f8ad 3020 	strh.w	r3, [sp, #32]
 80190b2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80190b6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80190ba:	4b11      	ldr	r3, [pc, #68]	; (8019100 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80190bc:	9004      	str	r0, [sp, #16]
 80190be:	881b      	ldrh	r3, [r3, #0]
 80190c0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80190c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80190c6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80190ca:	9607      	str	r6, [sp, #28]
 80190cc:	f7f9 fc60 	bl	8012990 <_ZN8touchgfx3HAL3lcdEv>
 80190d0:	6803      	ldr	r3, [r0, #0]
 80190d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190d4:	4798      	blx	r3
 80190d6:	23ff      	movs	r3, #255	; 0xff
 80190d8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80190dc:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80190e0:	6860      	ldr	r0, [r4, #4]
 80190e2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80190e6:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80190ea:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80190ee:	6803      	ldr	r3, [r0, #0]
 80190f0:	a903      	add	r1, sp, #12
 80190f2:	685b      	ldr	r3, [r3, #4]
 80190f4:	4798      	blx	r3
 80190f6:	4630      	mov	r0, r6
 80190f8:	b00c      	add	sp, #48	; 0x30
 80190fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190fe:	bf00      	nop
 8019100:	20008e28 	.word	0x20008e28

08019104 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8019104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019106:	b085      	sub	sp, #20
 8019108:	ac02      	add	r4, sp, #8
 801910a:	e884 0006 	stmia.w	r4, {r1, r2}
 801910e:	4605      	mov	r5, r0
 8019110:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8019114:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8019118:	f7ff fde6 	bl	8018ce8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801911c:	463a      	mov	r2, r7
 801911e:	4603      	mov	r3, r0
 8019120:	4631      	mov	r1, r6
 8019122:	4628      	mov	r0, r5
 8019124:	f7ff ff08 	bl	8018f38 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8019128:	4a05      	ldr	r2, [pc, #20]	; (8019140 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801912a:	682b      	ldr	r3, [r5, #0]
 801912c:	8812      	ldrh	r2, [r2, #0]
 801912e:	9200      	str	r2, [sp, #0]
 8019130:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8019132:	e894 0006 	ldmia.w	r4, {r1, r2}
 8019136:	4603      	mov	r3, r0
 8019138:	4628      	mov	r0, r5
 801913a:	47b0      	blx	r6
 801913c:	b005      	add	sp, #20
 801913e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019140:	20008e28 	.word	0x20008e28

08019144 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8019144:	b570      	push	{r4, r5, r6, lr}
 8019146:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801914a:	4604      	mov	r4, r0
 801914c:	b19b      	cbz	r3, 8019176 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801914e:	2002      	movs	r0, #2
 8019150:	f7fd f9ea 	bl	8016528 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8019154:	2300      	movs	r3, #0
 8019156:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801915a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801915e:	6823      	ldr	r3, [r4, #0]
 8019160:	4620      	mov	r0, r4
 8019162:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8019166:	f7ff fdbf 	bl	8018ce8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801916a:	462b      	mov	r3, r5
 801916c:	4601      	mov	r1, r0
 801916e:	4620      	mov	r0, r4
 8019170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019174:	4718      	bx	r3
 8019176:	bd70      	pop	{r4, r5, r6, pc}

08019178 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8019178:	b538      	push	{r3, r4, r5, lr}
 801917a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 801917e:	428b      	cmp	r3, r1
 8019180:	4604      	mov	r4, r0
 8019182:	460d      	mov	r5, r1
 8019184:	d006      	beq.n	8019194 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8019186:	6803      	ldr	r3, [r0, #0]
 8019188:	b929      	cbnz	r1, 8019196 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801918a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801918e:	4798      	blx	r3
 8019190:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8019194:	bd38      	pop	{r3, r4, r5, pc}
 8019196:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801919a:	e7f8      	b.n	801918e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801919c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801919c:	b510      	push	{r4, lr}
 801919e:	4b0d      	ldr	r3, [pc, #52]	; (80191d4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80191a0:	781b      	ldrb	r3, [r3, #0]
 80191a2:	4604      	mov	r4, r0
 80191a4:	b95b      	cbnz	r3, 80191be <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80191a6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80191aa:	2b02      	cmp	r3, #2
 80191ac:	d007      	beq.n	80191be <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80191ae:	6840      	ldr	r0, [r0, #4]
 80191b0:	f000 f90e 	bl	80193d0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80191b4:	b118      	cbz	r0, 80191be <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80191b6:	6862      	ldr	r2, [r4, #4]
 80191b8:	7a53      	ldrb	r3, [r2, #9]
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	d0fc      	beq.n	80191b8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80191be:	f7fd fc4f 	bl	8016a60 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80191c2:	4620      	mov	r0, r4
 80191c4:	2100      	movs	r1, #0
 80191c6:	f7ff ffd7 	bl	8019178 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80191ca:	4620      	mov	r0, r4
 80191cc:	f7ff fd8c 	bl	8018ce8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80191d0:	bd10      	pop	{r4, pc}
 80191d2:	bf00      	nop
 80191d4:	20008e2c 	.word	0x20008e2c

080191d8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80191d8:	4770      	bx	lr

080191da <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80191da:	2000      	movs	r0, #0
 80191dc:	4770      	bx	lr

080191de <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80191de:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80191e2:	1a13      	subs	r3, r2, r0
 80191e4:	4258      	negs	r0, r3
 80191e6:	4158      	adcs	r0, r3
 80191e8:	4770      	bx	lr

080191ea <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80191ea:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80191ee:	1a9b      	subs	r3, r3, r2
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	bfdc      	itt	le
 80191f4:	6882      	ldrle	r2, [r0, #8]
 80191f6:	189b      	addle	r3, r3, r2
 80191f8:	2b01      	cmp	r3, #1
 80191fa:	bfcc      	ite	gt
 80191fc:	2000      	movgt	r0, #0
 80191fe:	2001      	movle	r0, #1
 8019200:	4770      	bx	lr

08019202 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8019202:	6902      	ldr	r2, [r0, #16]
 8019204:	6843      	ldr	r3, [r0, #4]
 8019206:	2024      	movs	r0, #36	; 0x24
 8019208:	fb00 3002 	mla	r0, r0, r2, r3
 801920c:	4770      	bx	lr

0801920e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801920e:	6803      	ldr	r3, [r0, #0]
 8019210:	691b      	ldr	r3, [r3, #16]
 8019212:	4718      	bx	r3

08019214 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8019214:	b570      	push	{r4, r5, r6, lr}
 8019216:	2301      	movs	r3, #1
 8019218:	7203      	strb	r3, [r0, #8]
 801921a:	4604      	mov	r4, r0
 801921c:	6840      	ldr	r0, [r0, #4]
 801921e:	6803      	ldr	r3, [r0, #0]
 8019220:	699b      	ldr	r3, [r3, #24]
 8019222:	4798      	blx	r3
 8019224:	6803      	ldr	r3, [r0, #0]
 8019226:	2b40      	cmp	r3, #64	; 0x40
 8019228:	4605      	mov	r5, r0
 801922a:	d00c      	beq.n	8019246 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801922c:	d810      	bhi.n	8019250 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801922e:	2b04      	cmp	r3, #4
 8019230:	d01d      	beq.n	801926e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8019232:	d804      	bhi.n	801923e <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8019234:	2b01      	cmp	r3, #1
 8019236:	d006      	beq.n	8019246 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019238:	2b02      	cmp	r3, #2
 801923a:	d02c      	beq.n	8019296 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801923c:	bd70      	pop	{r4, r5, r6, pc}
 801923e:	2b08      	cmp	r3, #8
 8019240:	d01d      	beq.n	801927e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8019242:	2b20      	cmp	r3, #32
 8019244:	d1fa      	bne.n	801923c <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8019246:	6823      	ldr	r3, [r4, #0]
 8019248:	4620      	mov	r0, r4
 801924a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801924c:	4798      	blx	r3
 801924e:	e013      	b.n	8019278 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8019250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019254:	d0f7      	beq.n	8019246 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019256:	d804      	bhi.n	8019262 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8019258:	2b80      	cmp	r3, #128	; 0x80
 801925a:	d0f4      	beq.n	8019246 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801925c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019260:	e7f0      	b.n	8019244 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8019262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019266:	d0ee      	beq.n	8019246 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8019268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801926c:	e7e5      	b.n	801923a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801926e:	6823      	ldr	r3, [r4, #0]
 8019270:	7f01      	ldrb	r1, [r0, #28]
 8019272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019274:	4620      	mov	r0, r4
 8019276:	4798      	blx	r3
 8019278:	6823      	ldr	r3, [r4, #0]
 801927a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801927c:	e006      	b.n	801928c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801927e:	6823      	ldr	r3, [r4, #0]
 8019280:	7f01      	ldrb	r1, [r0, #28]
 8019282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019284:	4620      	mov	r0, r4
 8019286:	4798      	blx	r3
 8019288:	6823      	ldr	r3, [r4, #0]
 801928a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801928c:	4629      	mov	r1, r5
 801928e:	4620      	mov	r0, r4
 8019290:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019294:	4718      	bx	r3
 8019296:	6823      	ldr	r3, [r4, #0]
 8019298:	4620      	mov	r0, r4
 801929a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801929c:	4798      	blx	r3
 801929e:	e7f3      	b.n	8019288 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080192a0 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80192a0:	4770      	bx	lr

080192a2 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80192a2:	4770      	bx	lr

080192a4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80192a4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80192a8:	1ad2      	subs	r2, r2, r3
 80192aa:	2a00      	cmp	r2, #0
 80192ac:	b510      	push	{r4, lr}
 80192ae:	bfdc      	itt	le
 80192b0:	6884      	ldrle	r4, [r0, #8]
 80192b2:	1912      	addle	r2, r2, r4
 80192b4:	2a01      	cmp	r2, #1
 80192b6:	dd16      	ble.n	80192e6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80192b8:	6842      	ldr	r2, [r0, #4]
 80192ba:	2424      	movs	r4, #36	; 0x24
 80192bc:	fb04 2303 	mla	r3, r4, r3, r2
 80192c0:	f101 0220 	add.w	r2, r1, #32
 80192c4:	f851 4b04 	ldr.w	r4, [r1], #4
 80192c8:	f843 4b04 	str.w	r4, [r3], #4
 80192cc:	4291      	cmp	r1, r2
 80192ce:	d1f9      	bne.n	80192c4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80192d0:	780a      	ldrb	r2, [r1, #0]
 80192d2:	701a      	strb	r2, [r3, #0]
 80192d4:	68c3      	ldr	r3, [r0, #12]
 80192d6:	6882      	ldr	r2, [r0, #8]
 80192d8:	f3bf 8f5b 	dmb	ish
 80192dc:	3301      	adds	r3, #1
 80192de:	429a      	cmp	r2, r3
 80192e0:	bfd8      	it	le
 80192e2:	1a9b      	suble	r3, r3, r2
 80192e4:	60c3      	str	r3, [r0, #12]
 80192e6:	bd10      	pop	{r4, pc}

080192e8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80192e8:	6903      	ldr	r3, [r0, #16]
 80192ea:	6882      	ldr	r2, [r0, #8]
 80192ec:	f3bf 8f5b 	dmb	ish
 80192f0:	3301      	adds	r3, #1
 80192f2:	429a      	cmp	r2, r3
 80192f4:	bfd8      	it	le
 80192f6:	1a9b      	suble	r3, r3, r2
 80192f8:	6103      	str	r3, [r0, #16]
 80192fa:	4770      	bx	lr

080192fc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80192fc:	b570      	push	{r4, r5, r6, lr}
 80192fe:	4604      	mov	r4, r0
 8019300:	460e      	mov	r6, r1
 8019302:	6860      	ldr	r0, [r4, #4]
 8019304:	6803      	ldr	r3, [r0, #0]
 8019306:	685b      	ldr	r3, [r3, #4]
 8019308:	4798      	blx	r3
 801930a:	2800      	cmp	r0, #0
 801930c:	d1f9      	bne.n	8019302 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801930e:	4d0d      	ldr	r5, [pc, #52]	; (8019344 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8019310:	6828      	ldr	r0, [r5, #0]
 8019312:	6803      	ldr	r3, [r0, #0]
 8019314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019316:	4798      	blx	r3
 8019318:	f7fd fbbc 	bl	8016a94 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801931c:	6828      	ldr	r0, [r5, #0]
 801931e:	2101      	movs	r1, #1
 8019320:	f7ff ff2a 	bl	8019178 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8019324:	6860      	ldr	r0, [r4, #4]
 8019326:	6803      	ldr	r3, [r0, #0]
 8019328:	4631      	mov	r1, r6
 801932a:	689b      	ldr	r3, [r3, #8]
 801932c:	4798      	blx	r3
 801932e:	6823      	ldr	r3, [r4, #0]
 8019330:	4620      	mov	r0, r4
 8019332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019334:	4798      	blx	r3
 8019336:	6828      	ldr	r0, [r5, #0]
 8019338:	6803      	ldr	r3, [r0, #0]
 801933a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801933e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019340:	4718      	bx	r3
 8019342:	bf00      	nop
 8019344:	20008e30 	.word	0x20008e30

08019348 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8019348:	b508      	push	{r3, lr}
 801934a:	f7fd fb89 	bl	8016a60 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801934e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019352:	f7fd bb93 	b.w	8016a7c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08019356 <_ZN8touchgfx13DMA_Interface5startEv>:
 8019356:	b510      	push	{r4, lr}
 8019358:	4604      	mov	r4, r0
 801935a:	6840      	ldr	r0, [r0, #4]
 801935c:	6803      	ldr	r3, [r0, #0]
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	4798      	blx	r3
 8019362:	b948      	cbnz	r0, 8019378 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019364:	7a63      	ldrb	r3, [r4, #9]
 8019366:	b13b      	cbz	r3, 8019378 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8019368:	7a23      	ldrb	r3, [r4, #8]
 801936a:	b92b      	cbnz	r3, 8019378 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801936c:	6823      	ldr	r3, [r4, #0]
 801936e:	4620      	mov	r0, r4
 8019370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019376:	4718      	bx	r3
 8019378:	bd10      	pop	{r4, pc}

0801937a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801937a:	b570      	push	{r4, r5, r6, lr}
 801937c:	4604      	mov	r4, r0
 801937e:	6840      	ldr	r0, [r0, #4]
 8019380:	6803      	ldr	r3, [r0, #0]
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	4798      	blx	r3
 8019386:	4605      	mov	r5, r0
 8019388:	b930      	cbnz	r0, 8019398 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801938a:	7a23      	ldrb	r3, [r4, #8]
 801938c:	b123      	cbz	r3, 8019398 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801938e:	6860      	ldr	r0, [r4, #4]
 8019390:	6803      	ldr	r3, [r0, #0]
 8019392:	695b      	ldr	r3, [r3, #20]
 8019394:	4798      	blx	r3
 8019396:	7225      	strb	r5, [r4, #8]
 8019398:	6860      	ldr	r0, [r4, #4]
 801939a:	6803      	ldr	r3, [r0, #0]
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	4798      	blx	r3
 80193a0:	b928      	cbnz	r0, 80193ae <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80193a2:	6823      	ldr	r3, [r4, #0]
 80193a4:	4620      	mov	r0, r4
 80193a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80193ac:	4718      	bx	r3
 80193ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80193b2:	f7fd bb7b 	b.w	8016aac <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

080193b8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80193b8:	b510      	push	{r4, lr}
 80193ba:	4c04      	ldr	r4, [pc, #16]	; (80193cc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80193bc:	6082      	str	r2, [r0, #8]
 80193be:	2200      	movs	r2, #0
 80193c0:	e9c0 4100 	strd	r4, r1, [r0]
 80193c4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80193c8:	bd10      	pop	{r4, pc}
 80193ca:	bf00      	nop
 80193cc:	0802c7b8 	.word	0x0802c7b8

080193d0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80193d0:	6840      	ldr	r0, [r0, #4]
 80193d2:	6803      	ldr	r3, [r0, #0]
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	4718      	bx	r3

080193d8 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 80193d8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80193dc:	4770      	bx	lr

080193de <_ZN8touchgfx14AbstractButton13executeActionEv>:
 80193de:	b510      	push	{r4, lr}
 80193e0:	4604      	mov	r4, r0
 80193e2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80193e4:	b150      	cbz	r0, 80193fc <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80193e6:	6803      	ldr	r3, [r0, #0]
 80193e8:	68db      	ldr	r3, [r3, #12]
 80193ea:	4798      	blx	r3
 80193ec:	b130      	cbz	r0, 80193fc <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80193ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80193f0:	6803      	ldr	r3, [r0, #0]
 80193f2:	4621      	mov	r1, r4
 80193f4:	689b      	ldr	r3, [r3, #8]
 80193f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80193fa:	4718      	bx	r3
 80193fc:	bd10      	pop	{r4, pc}

080193fe <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80193fe:	b570      	push	{r4, r5, r6, lr}
 8019400:	790b      	ldrb	r3, [r1, #4]
 8019402:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8019406:	2b00      	cmp	r3, #0
 8019408:	bf0c      	ite	eq
 801940a:	2301      	moveq	r3, #1
 801940c:	2300      	movne	r3, #0
 801940e:	4604      	mov	r4, r0
 8019410:	460e      	mov	r6, r1
 8019412:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8019416:	d109      	bne.n	801942c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8019418:	b14d      	cbz	r5, 801942e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801941a:	7933      	ldrb	r3, [r6, #4]
 801941c:	2b01      	cmp	r3, #1
 801941e:	d10c      	bne.n	801943a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8019420:	6823      	ldr	r3, [r4, #0]
 8019422:	4620      	mov	r0, r4
 8019424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801942a:	4718      	bx	r3
 801942c:	b12d      	cbz	r5, 801943a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 801942e:	6823      	ldr	r3, [r4, #0]
 8019430:	4620      	mov	r0, r4
 8019432:	695b      	ldr	r3, [r3, #20]
 8019434:	4798      	blx	r3
 8019436:	2d00      	cmp	r5, #0
 8019438:	d1ef      	bne.n	801941a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801943a:	bd70      	pop	{r4, r5, r6, pc}

0801943c <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE>:
 801943c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8019440:	b133      	cbz	r3, 8019450 <_ZN8touchgfx12ToggleButton16handleClickEventERKNS_10ClickEventE+0x14>
 8019442:	790b      	ldrb	r3, [r1, #4]
 8019444:	2b01      	cmp	r3, #1
 8019446:	bf01      	itttt	eq
 8019448:	8dc3      	ldrheq	r3, [r0, #46]	; 0x2e
 801944a:	8e02      	ldrheq	r2, [r0, #48]	; 0x30
 801944c:	85c2      	strheq	r2, [r0, #46]	; 0x2e
 801944e:	8603      	strheq	r3, [r0, #48]	; 0x30
 8019450:	f7ff bfd5 	b.w	80193fe <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>

08019454 <_ZNK8touchgfx6Button17invalidateContentEv>:
 8019454:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 8019458:	b12a      	cbz	r2, 8019466 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 801945a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801945e:	b112      	cbz	r2, 8019466 <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8019460:	6803      	ldr	r3, [r0, #0]
 8019462:	695b      	ldr	r3, [r3, #20]
 8019464:	4718      	bx	r3
 8019466:	4770      	bx	lr

08019468 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8019468:	2300      	movs	r3, #0
 801946a:	8083      	strh	r3, [r0, #4]
 801946c:	80c3      	strh	r3, [r0, #6]
 801946e:	8003      	strh	r3, [r0, #0]
 8019470:	8043      	strh	r3, [r0, #2]
 8019472:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8019476:	2bff      	cmp	r3, #255	; 0xff
 8019478:	bf01      	itttt	eq
 801947a:	890b      	ldrheq	r3, [r1, #8]
 801947c:	8083      	strheq	r3, [r0, #4]
 801947e:	894b      	ldrheq	r3, [r1, #10]
 8019480:	80c3      	strheq	r3, [r0, #6]
 8019482:	4770      	bx	lr

08019484 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8019484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019486:	4604      	mov	r4, r0
 8019488:	6808      	ldr	r0, [r1, #0]
 801948a:	6849      	ldr	r1, [r1, #4]
 801948c:	466b      	mov	r3, sp
 801948e:	c303      	stmia	r3!, {r0, r1}
 8019490:	6823      	ldr	r3, [r4, #0]
 8019492:	4669      	mov	r1, sp
 8019494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019496:	4620      	mov	r0, r4
 8019498:	4798      	blx	r3
 801949a:	4b08      	ldr	r3, [pc, #32]	; (80194bc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80194a2:	b10a      	cbz	r2, 80194a8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80194a4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80194a6:	b900      	cbnz	r0, 80194aa <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80194a8:	6898      	ldr	r0, [r3, #8]
 80194aa:	6803      	ldr	r3, [r0, #0]
 80194ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80194ae:	6a1d      	ldr	r5, [r3, #32]
 80194b0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80194b4:	4669      	mov	r1, sp
 80194b6:	47a8      	blx	r5
 80194b8:	b003      	add	sp, #12
 80194ba:	bd30      	pop	{r4, r5, pc}
 80194bc:	20008e30 	.word	0x20008e30

080194c0 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80194c0:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80194c4:	b12a      	cbz	r2, 80194d2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80194c6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80194ca:	b112      	cbz	r2, 80194d2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80194cc:	6803      	ldr	r3, [r0, #0]
 80194ce:	695b      	ldr	r3, [r3, #20]
 80194d0:	4718      	bx	r3
 80194d2:	4770      	bx	lr

080194d4 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 80194d4:	b570      	push	{r4, r5, r6, lr}
 80194d6:	880b      	ldrh	r3, [r1, #0]
 80194d8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80194da:	4605      	mov	r5, r0
 80194dc:	8813      	ldrh	r3, [r2, #0]
 80194de:	f825 3f30 	strh.w	r3, [r5, #48]!
 80194e2:	4604      	mov	r4, r0
 80194e4:	4628      	mov	r0, r5
 80194e6:	f004 fb9d 	bl	801dc24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80194ea:	4606      	mov	r6, r0
 80194ec:	4628      	mov	r0, r5
 80194ee:	f004 fbcd 	bl	801dc8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80194f2:	6823      	ldr	r3, [r4, #0]
 80194f4:	4605      	mov	r5, r0
 80194f6:	4631      	mov	r1, r6
 80194f8:	4620      	mov	r0, r4
 80194fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194fc:	4798      	blx	r3
 80194fe:	6823      	ldr	r3, [r4, #0]
 8019500:	4629      	mov	r1, r5
 8019502:	4620      	mov	r0, r4
 8019504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801950a:	4718      	bx	r3

0801950c <_ZNK8touchgfx6Button12getSolidRectEv>:
 801950c:	b510      	push	{r4, lr}
 801950e:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8019512:	2bff      	cmp	r3, #255	; 0xff
 8019514:	4604      	mov	r4, r0
 8019516:	d006      	beq.n	8019526 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8019518:	2300      	movs	r3, #0
 801951a:	8003      	strh	r3, [r0, #0]
 801951c:	8043      	strh	r3, [r0, #2]
 801951e:	8083      	strh	r3, [r0, #4]
 8019520:	80c3      	strh	r3, [r0, #6]
 8019522:	4620      	mov	r0, r4
 8019524:	bd10      	pop	{r4, pc}
 8019526:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 801952a:	b11b      	cbz	r3, 8019534 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 801952c:	3130      	adds	r1, #48	; 0x30
 801952e:	f004 fbe1 	bl	801dcf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019532:	e7f6      	b.n	8019522 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8019534:	312e      	adds	r1, #46	; 0x2e
 8019536:	e7fa      	b.n	801952e <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08019538 <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8019538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801953c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8019540:	b08a      	sub	sp, #40	; 0x28
 8019542:	4604      	mov	r4, r0
 8019544:	4688      	mov	r8, r1
 8019546:	2b00      	cmp	r3, #0
 8019548:	d066      	beq.n	8019618 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 801954a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801954c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019550:	a805      	add	r0, sp, #20
 8019552:	f004 fb67 	bl	801dc24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019556:	4607      	mov	r7, r0
 8019558:	a805      	add	r0, sp, #20
 801955a:	f004 fb97 	bl	801dc8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 801955e:	f9b8 6000 	ldrsh.w	r6, [r8]
 8019562:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8019566:	4432      	add	r2, r6
 8019568:	b292      	uxth	r2, r2
 801956a:	2300      	movs	r3, #0
 801956c:	fa0f fc82 	sxth.w	ip, r2
 8019570:	459c      	cmp	ip, r3
 8019572:	9306      	str	r3, [sp, #24]
 8019574:	dd52      	ble.n	801961c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8019576:	42b7      	cmp	r7, r6
 8019578:	dd50      	ble.n	801961c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801957a:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 801957e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8019582:	442b      	add	r3, r5
 8019584:	b29b      	uxth	r3, r3
 8019586:	b219      	sxth	r1, r3
 8019588:	2900      	cmp	r1, #0
 801958a:	dd47      	ble.n	801961c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801958c:	42a8      	cmp	r0, r5
 801958e:	dd45      	ble.n	801961c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8019590:	4567      	cmp	r7, ip
 8019592:	bfb8      	it	lt
 8019594:	b2ba      	uxthlt	r2, r7
 8019596:	4288      	cmp	r0, r1
 8019598:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801959c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80195a0:	bfb8      	it	lt
 80195a2:	b283      	uxthlt	r3, r0
 80195a4:	1b92      	subs	r2, r2, r6
 80195a6:	1b5b      	subs	r3, r3, r5
 80195a8:	f8ad 201c 	strh.w	r2, [sp, #28]
 80195ac:	f8ad 301e 	strh.w	r3, [sp, #30]
 80195b0:	f8ad 6018 	strh.w	r6, [sp, #24]
 80195b4:	f8ad 501a 	strh.w	r5, [sp, #26]
 80195b8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80195bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80195c0:	429a      	cmp	r2, r3
 80195c2:	d026      	beq.n	8019612 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80195c4:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	dd22      	ble.n	8019612 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80195cc:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	dd1e      	ble.n	8019612 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 80195d4:	2300      	movs	r3, #0
 80195d6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80195da:	6823      	ldr	r3, [r4, #0]
 80195dc:	a908      	add	r1, sp, #32
 80195de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195e0:	4620      	mov	r0, r4
 80195e2:	4798      	blx	r3
 80195e4:	4b0f      	ldr	r3, [pc, #60]	; (8019624 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80195ec:	b10a      	cbz	r2, 80195f2 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 80195ee:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80195f0:	b900      	cbnz	r0, 80195f4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 80195f2:	6898      	ldr	r0, [r3, #8]
 80195f4:	6801      	ldr	r1, [r0, #0]
 80195f6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80195fa:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80195fe:	2501      	movs	r5, #1
 8019600:	9502      	str	r5, [sp, #8]
 8019602:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8019606:	9401      	str	r4, [sp, #4]
 8019608:	ac06      	add	r4, sp, #24
 801960a:	9400      	str	r4, [sp, #0]
 801960c:	688c      	ldr	r4, [r1, #8]
 801960e:	a905      	add	r1, sp, #20
 8019610:	47a0      	blx	r4
 8019612:	b00a      	add	sp, #40	; 0x28
 8019614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019618:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 801961a:	e797      	b.n	801954c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 801961c:	2300      	movs	r3, #0
 801961e:	9307      	str	r3, [sp, #28]
 8019620:	e7ca      	b.n	80195b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8019622:	bf00      	nop
 8019624:	20008e30 	.word	0x20008e30

08019628 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 8019628:	b570      	push	{r4, r5, r6, lr}
 801962a:	880b      	ldrh	r3, [r1, #0]
 801962c:	84c3      	strh	r3, [r0, #38]	; 0x26
 801962e:	4604      	mov	r4, r0
 8019630:	4608      	mov	r0, r1
 8019632:	460d      	mov	r5, r1
 8019634:	f004 faf6 	bl	801dc24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019638:	4606      	mov	r6, r0
 801963a:	4628      	mov	r0, r5
 801963c:	f004 fb26 	bl	801dc8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019640:	6823      	ldr	r3, [r4, #0]
 8019642:	4605      	mov	r5, r0
 8019644:	4631      	mov	r1, r6
 8019646:	4620      	mov	r0, r4
 8019648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801964a:	4798      	blx	r3
 801964c:	6823      	ldr	r3, [r4, #0]
 801964e:	4629      	mov	r1, r5
 8019650:	4620      	mov	r0, r4
 8019652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019654:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019658:	4718      	bx	r3

0801965a <_ZNK8touchgfx5Image12getSolidRectEv>:
 801965a:	b510      	push	{r4, lr}
 801965c:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8019660:	2bff      	cmp	r3, #255	; 0xff
 8019662:	4604      	mov	r4, r0
 8019664:	d006      	beq.n	8019674 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8019666:	2300      	movs	r3, #0
 8019668:	8003      	strh	r3, [r0, #0]
 801966a:	8043      	strh	r3, [r0, #2]
 801966c:	8083      	strh	r3, [r0, #4]
 801966e:	80c3      	strh	r3, [r0, #6]
 8019670:	4620      	mov	r0, r4
 8019672:	bd10      	pop	{r4, pc}
 8019674:	3126      	adds	r1, #38	; 0x26
 8019676:	f004 fb3d 	bl	801dcf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801967a:	e7f9      	b.n	8019670 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0801967c <_ZNK8touchgfx5Image17invalidateContentEv>:
 801967c:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8019680:	b12a      	cbz	r2, 801968e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8019682:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8019686:	b112      	cbz	r2, 801968e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8019688:	6803      	ldr	r3, [r0, #0]
 801968a:	695b      	ldr	r3, [r3, #20]
 801968c:	4718      	bx	r3
 801968e:	4770      	bx	lr

08019690 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8019690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019694:	4604      	mov	r4, r0
 8019696:	b088      	sub	sp, #32
 8019698:	f854 3b26 	ldr.w	r3, [r4], #38
 801969c:	2500      	movs	r5, #0
 801969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196a0:	460f      	mov	r7, r1
 80196a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80196a6:	a904      	add	r1, sp, #16
 80196a8:	4606      	mov	r6, r0
 80196aa:	4798      	blx	r3
 80196ac:	4620      	mov	r0, r4
 80196ae:	f004 fab9 	bl	801dc24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80196b2:	4680      	mov	r8, r0
 80196b4:	4620      	mov	r0, r4
 80196b6:	f004 fae9 	bl	801dc8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80196ba:	9506      	str	r5, [sp, #24]
 80196bc:	ad06      	add	r5, sp, #24
 80196be:	f8ad 001e 	strh.w	r0, [sp, #30]
 80196c2:	4639      	mov	r1, r7
 80196c4:	4628      	mov	r0, r5
 80196c6:	f8ad 801c 	strh.w	r8, [sp, #28]
 80196ca:	f7fe fe91 	bl	80183f0 <_ZN8touchgfx4RectaNERKS0_>
 80196ce:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	dd19      	ble.n	801970a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80196d6:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80196da:	2b00      	cmp	r3, #0
 80196dc:	dd15      	ble.n	801970a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80196de:	4b0c      	ldr	r3, [pc, #48]	; (8019710 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80196e6:	b10a      	cbz	r2, 80196ec <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80196e8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80196ea:	b900      	cbnz	r0, 80196ee <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80196ec:	6898      	ldr	r0, [r3, #8]
 80196ee:	6801      	ldr	r1, [r0, #0]
 80196f0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80196f4:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80196f8:	2701      	movs	r7, #1
 80196fa:	9702      	str	r7, [sp, #8]
 80196fc:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 8019700:	e9cd 5600 	strd	r5, r6, [sp]
 8019704:	688d      	ldr	r5, [r1, #8]
 8019706:	4621      	mov	r1, r4
 8019708:	47a8      	blx	r5
 801970a:	b008      	add	sp, #32
 801970c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019710:	20008e30 	.word	0x20008e30

08019714 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 8019714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019718:	b08d      	sub	sp, #52	; 0x34
 801971a:	4604      	mov	r4, r0
 801971c:	4688      	mov	r8, r1
 801971e:	f7ff ff0b 	bl	8019538 <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 8019722:	4a4d      	ldr	r2, [pc, #308]	; (8019858 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x144>)
 8019724:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8019726:	8812      	ldrh	r2, [r2, #0]
 8019728:	429a      	cmp	r2, r3
 801972a:	f240 8081 	bls.w	8019830 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11c>
 801972e:	4e4b      	ldr	r6, [pc, #300]	; (801985c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x148>)
 8019730:	6832      	ldr	r2, [r6, #0]
 8019732:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8019736:	4b4a      	ldr	r3, [pc, #296]	; (8019860 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x14c>)
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801973e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8019742:	2300      	movs	r3, #0
 8019744:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8019748:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801974c:	2b03      	cmp	r3, #3
 801974e:	d811      	bhi.n	8019774 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8019750:	e8df f003 	tbb	[pc, r3]
 8019754:	71027102 	.word	0x71027102
 8019758:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801975c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8019760:	f8ad 1010 	strh.w	r1, [sp, #16]
 8019764:	1a9b      	subs	r3, r3, r2
 8019766:	2002      	movs	r0, #2
 8019768:	f8ad 2012 	strh.w	r2, [sp, #18]
 801976c:	fb93 f3f0 	sdiv	r3, r3, r0
 8019770:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019774:	ad03      	add	r5, sp, #12
 8019776:	e895 0003 	ldmia.w	r5, {r0, r1}
 801977a:	f10d 0914 	add.w	r9, sp, #20
 801977e:	e889 0003 	stmia.w	r9, {r0, r1}
 8019782:	4641      	mov	r1, r8
 8019784:	4648      	mov	r0, r9
 8019786:	f7fe fe33 	bl	80183f0 <_ZN8touchgfx4RectaNERKS0_>
 801978a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801978e:	2b00      	cmp	r3, #0
 8019790:	dd4e      	ble.n	8019830 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11c>
 8019792:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8019796:	2b00      	cmp	r3, #0
 8019798:	dd4a      	ble.n	8019830 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11c>
 801979a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801979e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80197a2:	1a9b      	subs	r3, r3, r2
 80197a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80197a8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80197ac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80197b0:	1a9b      	subs	r3, r3, r2
 80197b2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80197b6:	6823      	ldr	r3, [r4, #0]
 80197b8:	4629      	mov	r1, r5
 80197ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197bc:	4620      	mov	r0, r4
 80197be:	4798      	blx	r3
 80197c0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d045      	beq.n	8019854 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x140>
 80197c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80197ca:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80197cc:	6833      	ldr	r3, [r6, #0]
 80197ce:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
 80197d2:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
 80197d6:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80197da:	785b      	ldrb	r3, [r3, #1]
 80197dc:	9209      	str	r2, [sp, #36]	; 0x24
 80197de:	f3c3 0601 	ubfx	r6, r3, #0, #2
 80197e2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80197e6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 80197ea:	2300      	movs	r3, #0
 80197ec:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 80197f0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80197f4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80197f8:	4b1a      	ldr	r3, [pc, #104]	; (8019864 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x150>)
 80197fa:	9707      	str	r7, [sp, #28]
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	f88d 6020 	strb.w	r6, [sp, #32]
 8019802:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8019806:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801980a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801980e:	b10a      	cbz	r2, 8019814 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x100>
 8019810:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019812:	b904      	cbnz	r4, 8019816 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 8019814:	689c      	ldr	r4, [r3, #8]
 8019816:	4b14      	ldr	r3, [pc, #80]	; (8019868 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x154>)
 8019818:	6818      	ldr	r0, [r3, #0]
 801981a:	f7fc fb59 	bl	8015ed0 <_ZNK8touchgfx5Texts7getTextEt>
 801981e:	ab07      	add	r3, sp, #28
 8019820:	9001      	str	r0, [sp, #4]
 8019822:	9300      	str	r3, [sp, #0]
 8019824:	e895 0006 	ldmia.w	r5, {r1, r2}
 8019828:	464b      	mov	r3, r9
 801982a:	4620      	mov	r0, r4
 801982c:	f7fc fae1 	bl	8015df2 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8019830:	b00d      	add	sp, #52	; 0x34
 8019832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019836:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801983a:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 801983e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019842:	1a9b      	subs	r3, r3, r2
 8019844:	2002      	movs	r0, #2
 8019846:	f8ad 1012 	strh.w	r1, [sp, #18]
 801984a:	fb93 f3f0 	sdiv	r3, r3, r0
 801984e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019852:	e78f      	b.n	8019774 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 8019854:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8019856:	e7b8      	b.n	80197ca <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb6>
 8019858:	20008e84 	.word	0x20008e84
 801985c:	20008e80 	.word	0x20008e80
 8019860:	20008e88 	.word	0x20008e88
 8019864:	20008e30 	.word	0x20008e30
 8019868:	20008e8c 	.word	0x20008e8c

0801986c <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 801986c:	b510      	push	{r4, lr}
 801986e:	2101      	movs	r1, #1
 8019870:	4c13      	ldr	r4, [pc, #76]	; (80198c0 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 8019872:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8019876:	2200      	movs	r2, #0
 8019878:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 801987c:	6004      	str	r4, [r0, #0]
 801987e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019882:	4c10      	ldr	r4, [pc, #64]	; (80198c4 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 8019884:	8082      	strh	r2, [r0, #4]
 8019886:	80c2      	strh	r2, [r0, #6]
 8019888:	8102      	strh	r2, [r0, #8]
 801988a:	8142      	strh	r2, [r0, #10]
 801988c:	8182      	strh	r2, [r0, #12]
 801988e:	81c2      	strh	r2, [r0, #14]
 8019890:	8202      	strh	r2, [r0, #16]
 8019892:	8242      	strh	r2, [r0, #18]
 8019894:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019898:	61c2      	str	r2, [r0, #28]
 801989a:	8402      	strh	r2, [r0, #32]
 801989c:	8442      	strh	r2, [r0, #34]	; 0x22
 801989e:	6282      	str	r2, [r0, #40]	; 0x28
 80198a0:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
 80198a4:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80198a6:	8601      	strh	r1, [r0, #48]	; 0x30
 80198a8:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
 80198ac:	6344      	str	r4, [r0, #52]	; 0x34
 80198ae:	8701      	strh	r1, [r0, #56]	; 0x38
 80198b0:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
 80198b4:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80198b8:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 80198bc:	bd10      	pop	{r4, pc}
 80198be:	bf00      	nop
 80198c0:	0802ca08 	.word	0x0802ca08
 80198c4:	0802bb6c 	.word	0x0802bb6c

080198c8 <_ZN8touchgfx11RadioButton10setBitmapsERKNS_6BitmapES3_S3_S3_>:
 80198c8:	b570      	push	{r4, r5, r6, lr}
 80198ca:	8809      	ldrh	r1, [r1, #0]
 80198cc:	85c1      	strh	r1, [r0, #46]	; 0x2e
 80198ce:	8812      	ldrh	r2, [r2, #0]
 80198d0:	8602      	strh	r2, [r0, #48]	; 0x30
 80198d2:	881b      	ldrh	r3, [r3, #0]
 80198d4:	8643      	strh	r3, [r0, #50]	; 0x32
 80198d6:	9b04      	ldr	r3, [sp, #16]
 80198d8:	f100 052e 	add.w	r5, r0, #46	; 0x2e
 80198dc:	881b      	ldrh	r3, [r3, #0]
 80198de:	8683      	strh	r3, [r0, #52]	; 0x34
 80198e0:	4604      	mov	r4, r0
 80198e2:	4628      	mov	r0, r5
 80198e4:	f004 f99e 	bl	801dc24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80198e8:	4606      	mov	r6, r0
 80198ea:	4628      	mov	r0, r5
 80198ec:	f004 f9ce 	bl	801dc8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80198f0:	6823      	ldr	r3, [r4, #0]
 80198f2:	4605      	mov	r5, r0
 80198f4:	4631      	mov	r1, r6
 80198f6:	4620      	mov	r0, r4
 80198f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80198fa:	4798      	blx	r3
 80198fc:	6823      	ldr	r3, [r4, #0]
 80198fe:	4629      	mov	r1, r5
 8019900:	4620      	mov	r0, r4
 8019902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019908:	4718      	bx	r3

0801990a <_ZNK8touchgfx11RadioButton17invalidateContentEv>:
 801990a:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 801990e:	b12a      	cbz	r2, 801991c <_ZNK8touchgfx11RadioButton17invalidateContentEv+0x12>
 8019910:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8019914:	b112      	cbz	r2, 801991c <_ZNK8touchgfx11RadioButton17invalidateContentEv+0x12>
 8019916:	6803      	ldr	r3, [r0, #0]
 8019918:	695b      	ldr	r3, [r3, #20]
 801991a:	4718      	bx	r3
 801991c:	4770      	bx	lr

0801991e <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>:
 801991e:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
 8019922:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8019926:	b122      	cbz	r2, 8019932 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x14>
 8019928:	b10b      	cbz	r3, 801992e <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x10>
 801992a:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 801992c:	4770      	bx	lr
 801992e:	8e40      	ldrh	r0, [r0, #50]	; 0x32
 8019930:	4770      	bx	lr
 8019932:	b10b      	cbz	r3, 8019938 <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv+0x1a>
 8019934:	8e00      	ldrh	r0, [r0, #48]	; 0x30
 8019936:	4770      	bx	lr
 8019938:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 801993a:	4770      	bx	lr

0801993c <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE>:
 801993c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801993e:	b08b      	sub	sp, #44	; 0x2c
 8019940:	4604      	mov	r4, r0
 8019942:	460e      	mov	r6, r1
 8019944:	f7ff ffeb 	bl	801991e <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>
 8019948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801994c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8019950:	b280      	uxth	r0, r0
 8019952:	4298      	cmp	r0, r3
 8019954:	d036      	beq.n	80199c4 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x88>
 8019956:	6823      	ldr	r3, [r4, #0]
 8019958:	2500      	movs	r5, #0
 801995a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801995c:	a906      	add	r1, sp, #24
 801995e:	e9cd 5506 	strd	r5, r5, [sp, #24]
 8019962:	4620      	mov	r0, r4
 8019964:	4798      	blx	r3
 8019966:	a805      	add	r0, sp, #20
 8019968:	f004 f95c 	bl	801dc24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801996c:	4607      	mov	r7, r0
 801996e:	a805      	add	r0, sp, #20
 8019970:	f004 f98c 	bl	801dc8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019974:	9508      	str	r5, [sp, #32]
 8019976:	ad08      	add	r5, sp, #32
 8019978:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801997c:	4631      	mov	r1, r6
 801997e:	4628      	mov	r0, r5
 8019980:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8019984:	f7fe fd34 	bl	80183f0 <_ZN8touchgfx4RectaNERKS0_>
 8019988:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 801998c:	2b00      	cmp	r3, #0
 801998e:	dd19      	ble.n	80199c4 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x88>
 8019990:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8019994:	2b00      	cmp	r3, #0
 8019996:	dd15      	ble.n	80199c4 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x88>
 8019998:	4b0b      	ldr	r3, [pc, #44]	; (80199c8 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x8c>)
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80199a0:	b10a      	cbz	r2, 80199a6 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x6a>
 80199a2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80199a4:	b900      	cbnz	r0, 80199a8 <_ZNK8touchgfx11RadioButton4drawERKNS_4RectE+0x6c>
 80199a6:	6898      	ldr	r0, [r3, #8]
 80199a8:	6801      	ldr	r1, [r0, #0]
 80199aa:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80199ae:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80199b2:	2601      	movs	r6, #1
 80199b4:	9602      	str	r6, [sp, #8]
 80199b6:	f894 4036 	ldrb.w	r4, [r4, #54]	; 0x36
 80199ba:	e9cd 5400 	strd	r5, r4, [sp]
 80199be:	688c      	ldr	r4, [r1, #8]
 80199c0:	a905      	add	r1, sp, #20
 80199c2:	47a0      	blx	r4
 80199c4:	b00b      	add	sp, #44	; 0x2c
 80199c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199c8:	20008e30 	.word	0x20008e30

080199cc <_ZNK8touchgfx11RadioButton12getSolidRectEv>:
 80199cc:	b513      	push	{r0, r1, r4, lr}
 80199ce:	f891 3036 	ldrb.w	r3, [r1, #54]	; 0x36
 80199d2:	2bff      	cmp	r3, #255	; 0xff
 80199d4:	4604      	mov	r4, r0
 80199d6:	d007      	beq.n	80199e8 <_ZNK8touchgfx11RadioButton12getSolidRectEv+0x1c>
 80199d8:	2300      	movs	r3, #0
 80199da:	8003      	strh	r3, [r0, #0]
 80199dc:	8043      	strh	r3, [r0, #2]
 80199de:	8083      	strh	r3, [r0, #4]
 80199e0:	80c3      	strh	r3, [r0, #6]
 80199e2:	4620      	mov	r0, r4
 80199e4:	b002      	add	sp, #8
 80199e6:	bd10      	pop	{r4, pc}
 80199e8:	4608      	mov	r0, r1
 80199ea:	f7ff ff98 	bl	801991e <_ZNK8touchgfx11RadioButton27getCurrentlyDisplayedBitmapEv>
 80199ee:	a902      	add	r1, sp, #8
 80199f0:	f821 0d04 	strh.w	r0, [r1, #-4]!
 80199f4:	4620      	mov	r0, r4
 80199f6:	f004 f97d 	bl	801dcf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80199fa:	e7f2      	b.n	80199e2 <_ZNK8touchgfx11RadioButton12getSolidRectEv+0x16>

080199fc <_ZN8touchgfx11RadioButton11setSelectedEb>:
 80199fc:	b510      	push	{r4, lr}
 80199fe:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
 8019a02:	f880 1037 	strb.w	r1, [r0, #55]	; 0x37
 8019a06:	4604      	mov	r4, r0
 8019a08:	b18b      	cbz	r3, 8019a2e <_ZN8touchgfx11RadioButton11setSelectedEb+0x32>
 8019a0a:	b951      	cbnz	r1, 8019a22 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 8019a0c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8019a0e:	b140      	cbz	r0, 8019a22 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 8019a10:	6803      	ldr	r3, [r0, #0]
 8019a12:	68db      	ldr	r3, [r3, #12]
 8019a14:	4798      	blx	r3
 8019a16:	b120      	cbz	r0, 8019a22 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 8019a18:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8019a1a:	6803      	ldr	r3, [r0, #0]
 8019a1c:	4621      	mov	r1, r4
 8019a1e:	689b      	ldr	r3, [r3, #8]
 8019a20:	4798      	blx	r3
 8019a22:	6823      	ldr	r3, [r4, #0]
 8019a24:	4620      	mov	r0, r4
 8019a26:	695b      	ldr	r3, [r3, #20]
 8019a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a2c:	4718      	bx	r3
 8019a2e:	2900      	cmp	r1, #0
 8019a30:	d0f7      	beq.n	8019a22 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>
 8019a32:	6823      	ldr	r3, [r4, #0]
 8019a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019a36:	4798      	blx	r3
 8019a38:	e7f3      	b.n	8019a22 <_ZN8touchgfx11RadioButton11setSelectedEb+0x26>

08019a3a <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE>:
 8019a3a:	b570      	push	{r4, r5, r6, lr}
 8019a3c:	790b      	ldrb	r3, [r1, #4]
 8019a3e:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	bf0c      	ite	eq
 8019a46:	2301      	moveq	r3, #1
 8019a48:	2300      	movne	r3, #0
 8019a4a:	4604      	mov	r4, r0
 8019a4c:	460e      	mov	r6, r1
 8019a4e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8019a52:	d10f      	bne.n	8019a74 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x3a>
 8019a54:	b17d      	cbz	r5, 8019a76 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8019a56:	7931      	ldrb	r1, [r6, #4]
 8019a58:	2901      	cmp	r1, #1
 8019a5a:	d112      	bne.n	8019a82 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 8019a5c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8019a60:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8019a64:	b172      	cbz	r2, 8019a84 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x4a>
 8019a66:	f083 0101 	eor.w	r1, r3, #1
 8019a6a:	4620      	mov	r0, r4
 8019a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019a70:	f7ff bfc4 	b.w	80199fc <_ZN8touchgfx11RadioButton11setSelectedEb>
 8019a74:	b12d      	cbz	r5, 8019a82 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 8019a76:	6823      	ldr	r3, [r4, #0]
 8019a78:	4620      	mov	r0, r4
 8019a7a:	695b      	ldr	r3, [r3, #20]
 8019a7c:	4798      	blx	r3
 8019a7e:	2d00      	cmp	r5, #0
 8019a80:	d1e9      	bne.n	8019a56 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8019a82:	bd70      	pop	{r4, r5, r6, pc}
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d1fc      	bne.n	8019a82 <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x48>
 8019a88:	e7ef      	b.n	8019a6a <_ZN8touchgfx11RadioButton16handleClickEventERKNS_10ClickEventE+0x30>

08019a8a <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8019a8a:	b510      	push	{r4, lr}
 8019a8c:	6803      	ldr	r3, [r0, #0]
 8019a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a90:	460c      	mov	r4, r1
 8019a92:	4798      	blx	r3
 8019a94:	1b03      	subs	r3, r0, r4
 8019a96:	4258      	negs	r0, r3
 8019a98:	4158      	adcs	r0, r3
 8019a9a:	bd10      	pop	{r4, pc}

08019a9c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8019a9c:	4b01      	ldr	r3, [pc, #4]	; (8019aa4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8019a9e:	6019      	str	r1, [r3, #0]
 8019aa0:	4770      	bx	lr
 8019aa2:	bf00      	nop
 8019aa4:	20008e38 	.word	0x20008e38

08019aa8 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019aac:	4696      	mov	lr, r2
 8019aae:	4605      	mov	r5, r0
 8019ab0:	4614      	mov	r4, r2
 8019ab2:	460e      	mov	r6, r1
 8019ab4:	461f      	mov	r7, r3
 8019ab6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019aba:	b097      	sub	sp, #92	; 0x5c
 8019abc:	f10d 0c1c 	add.w	ip, sp, #28
 8019ac0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019ac4:	f8de 3000 	ldr.w	r3, [lr]
 8019ac8:	f8cc 3000 	str.w	r3, [ip]
 8019acc:	f104 0e14 	add.w	lr, r4, #20
 8019ad0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019ad4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019ad8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019adc:	f8de 3000 	ldr.w	r3, [lr]
 8019ae0:	f8cc 3000 	str.w	r3, [ip]
 8019ae4:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8019ae8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019aec:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8019af0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019af4:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8019af8:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8019afc:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8019b00:	f8de 3000 	ldr.w	r3, [lr]
 8019b04:	f8cc 3000 	str.w	r3, [ip]
 8019b08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019b0a:	682b      	ldr	r3, [r5, #0]
 8019b0c:	9201      	str	r2, [sp, #4]
 8019b0e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8019b12:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019b14:	9200      	str	r2, [sp, #0]
 8019b16:	f8cd 8008 	str.w	r8, [sp, #8]
 8019b1a:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8019b1e:	aa07      	add	r2, sp, #28
 8019b20:	463b      	mov	r3, r7
 8019b22:	4631      	mov	r1, r6
 8019b24:	4628      	mov	r0, r5
 8019b26:	47d8      	blx	fp
 8019b28:	46a6      	mov	lr, r4
 8019b2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019b2e:	f10d 0c1c 	add.w	ip, sp, #28
 8019b32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019b36:	f8de 3000 	ldr.w	r3, [lr]
 8019b3a:	f8cc 3000 	str.w	r3, [ip]
 8019b3e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8019b42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019b46:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019b4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019b4e:	343c      	adds	r4, #60	; 0x3c
 8019b50:	f8de 3000 	ldr.w	r3, [lr]
 8019b54:	f8cc 3000 	str.w	r3, [ip]
 8019b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019b5a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8019b5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019b62:	6823      	ldr	r3, [r4, #0]
 8019b64:	f8cc 3000 	str.w	r3, [ip]
 8019b68:	682b      	ldr	r3, [r5, #0]
 8019b6a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8019b6e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019b70:	9201      	str	r2, [sp, #4]
 8019b72:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019b74:	9200      	str	r2, [sp, #0]
 8019b76:	f8cd 8008 	str.w	r8, [sp, #8]
 8019b7a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8019b7c:	aa07      	add	r2, sp, #28
 8019b7e:	463b      	mov	r3, r7
 8019b80:	4631      	mov	r1, r6
 8019b82:	4628      	mov	r0, r5
 8019b84:	47a0      	blx	r4
 8019b86:	b017      	add	sp, #92	; 0x5c
 8019b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019b8c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019b8c:	2000      	movs	r0, #0
 8019b8e:	4770      	bx	lr

08019b90 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8019b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b94:	b08d      	sub	sp, #52	; 0x34
 8019b96:	4688      	mov	r8, r1
 8019b98:	9916      	ldr	r1, [sp, #88]	; 0x58
 8019b9a:	f8d3 c000 	ldr.w	ip, [r3]
 8019b9e:	680f      	ldr	r7, [r1, #0]
 8019ba0:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 8019ba4:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8019ba8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8019bac:	edd3 6a07 	vldr	s13, [r3, #28]
 8019bb0:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019bb2:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8019bb6:	f9b1 9000 	ldrsh.w	r9, [r1]
 8019bba:	f9ba 1000 	ldrsh.w	r1, [sl]
 8019bbe:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8019bc2:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8019bc6:	eba7 070c 	sub.w	r7, r7, ip
 8019bca:	42bc      	cmp	r4, r7
 8019bcc:	bfa8      	it	ge
 8019bce:	463c      	movge	r4, r7
 8019bd0:	ee07 4a90 	vmov	s15, r4
 8019bd4:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8019bd8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8019bdc:	ee25 4a04 	vmul.f32	s8, s10, s8
 8019be0:	ee65 4a24 	vmul.f32	s9, s10, s9
 8019be4:	ee25 5a27 	vmul.f32	s10, s10, s15
 8019be8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019bec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019bf0:	eb09 0e0c 	add.w	lr, r9, ip
 8019bf4:	4571      	cmp	r1, lr
 8019bf6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8019bfa:	ee32 1a05 	vadd.f32	s2, s4, s10
 8019bfe:	ee36 0a84 	vadd.f32	s0, s13, s8
 8019c02:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019c06:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019c0a:	f340 808d 	ble.w	8019d28 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 8019c0e:	eba1 060e 	sub.w	r6, r1, lr
 8019c12:	fb96 f5f4 	sdiv	r5, r6, r4
 8019c16:	ee07 5a10 	vmov	s14, r5
 8019c1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019c1e:	2d00      	cmp	r5, #0
 8019c20:	fb04 6615 	mls	r6, r4, r5, r6
 8019c24:	eea7 0a04 	vfma.f32	s0, s14, s8
 8019c28:	eee7 0a24 	vfma.f32	s1, s14, s9
 8019c2c:	eea7 1a05 	vfma.f32	s2, s14, s10
 8019c30:	dd13      	ble.n	8019c5a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 8019c32:	ee70 6a44 	vsub.f32	s13, s0, s8
 8019c36:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8019c3a:	eef5 6a40 	vcmp.f32	s13, #0.0
 8019c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c42:	bf18      	it	ne
 8019c44:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8019c48:	ee31 2a45 	vsub.f32	s4, s2, s10
 8019c4c:	bf08      	it	eq
 8019c4e:	eeb0 7a67 	vmoveq.f32	s14, s15
 8019c52:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019c56:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019c5a:	fb05 f204 	mul.w	r2, r5, r4
 8019c5e:	1abf      	subs	r7, r7, r2
 8019c60:	4494      	add	ip, r2
 8019c62:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8019c66:	4411      	add	r1, r2
 8019c68:	eb09 020c 	add.w	r2, r9, ip
 8019c6c:	443a      	add	r2, r7
 8019c6e:	b209      	sxth	r1, r1
 8019c70:	428a      	cmp	r2, r1
 8019c72:	bfc4      	itt	gt
 8019c74:	eba1 0209 	subgt.w	r2, r1, r9
 8019c78:	eba2 070c 	subgt.w	r7, r2, ip
 8019c7c:	2f00      	cmp	r7, #0
 8019c7e:	dd50      	ble.n	8019d22 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 8019c80:	fb97 f1f4 	sdiv	r1, r7, r4
 8019c84:	fb04 7211 	mls	r2, r4, r1, r7
 8019c88:	b90a      	cbnz	r2, 8019c8e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 8019c8a:	3901      	subs	r1, #1
 8019c8c:	4622      	mov	r2, r4
 8019c8e:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8019c92:	6840      	ldr	r0, [r0, #4]
 8019c94:	900b      	str	r0, [sp, #44]	; 0x2c
 8019c96:	f8d0 a000 	ldr.w	sl, [r0]
 8019c9a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019c9c:	9008      	str	r0, [sp, #32]
 8019c9e:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8019ca2:	9818      	ldr	r0, [sp, #96]	; 0x60
 8019ca4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8019ca8:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8019cac:	695b      	ldr	r3, [r3, #20]
 8019cae:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019cb0:	445b      	add	r3, fp
 8019cb2:	eef0 6a42 	vmov.f32	s13, s4
 8019cb6:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8019cba:	ee21 3a23 	vmul.f32	s6, s2, s7
 8019cbe:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8019cc2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019cc6:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019cca:	9307      	str	r3, [sp, #28]
 8019ccc:	ee17 7a90 	vmov	r7, s15
 8019cd0:	ee73 7a42 	vsub.f32	s15, s6, s4
 8019cd4:	eeb0 7a61 	vmov.f32	s14, s3
 8019cd8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019cdc:	ee16 3a90 	vmov	r3, s13
 8019ce0:	fb97 f7f4 	sdiv	r7, r7, r4
 8019ce4:	ee17 ca90 	vmov	ip, s15
 8019ce8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8019cec:	fb9c fcf4 	sdiv	ip, ip, r4
 8019cf0:	fb0c 3306 	mla	r3, ip, r6, r3
 8019cf4:	9302      	str	r3, [sp, #8]
 8019cf6:	ee17 3a10 	vmov	r3, s14
 8019cfa:	44b6      	add	lr, r6
 8019cfc:	fb04 e505 	mla	r5, r4, r5, lr
 8019d00:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8019d04:	fb07 3706 	mla	r7, r7, r6, r3
 8019d08:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8019d0c:	e9cd 4700 	strd	r4, r7, [sp]
 8019d10:	2900      	cmp	r1, #0
 8019d12:	bfcc      	ite	gt
 8019d14:	46a1      	movgt	r9, r4
 8019d16:	4691      	movle	r9, r2
 8019d18:	eba9 0306 	sub.w	r3, r9, r6
 8019d1c:	f8da 4008 	ldr.w	r4, [sl, #8]
 8019d20:	47a0      	blx	r4
 8019d22:	b00d      	add	sp, #52	; 0x34
 8019d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d28:	2500      	movs	r5, #0
 8019d2a:	462e      	mov	r6, r5
 8019d2c:	e799      	b.n	8019c62 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

08019d30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d34:	b0db      	sub	sp, #364	; 0x16c
 8019d36:	461d      	mov	r5, r3
 8019d38:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8019d3c:	930a      	str	r3, [sp, #40]	; 0x28
 8019d3e:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8019d42:	930b      	str	r3, [sp, #44]	; 0x2c
 8019d44:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8019d48:	9310      	str	r3, [sp, #64]	; 0x40
 8019d4a:	6803      	ldr	r3, [r0, #0]
 8019d4c:	910f      	str	r1, [sp, #60]	; 0x3c
 8019d4e:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8019d50:	9009      	str	r0, [sp, #36]	; 0x24
 8019d52:	4614      	mov	r4, r2
 8019d54:	4629      	mov	r1, r5
 8019d56:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019d5a:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8019d5e:	47b8      	blx	r7
 8019d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d62:	6058      	str	r0, [r3, #4]
 8019d64:	2800      	cmp	r0, #0
 8019d66:	f000 83a1 	beq.w	801a4ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019d6a:	682b      	ldr	r3, [r5, #0]
 8019d6c:	9314      	str	r3, [sp, #80]	; 0x50
 8019d6e:	686b      	ldr	r3, [r5, #4]
 8019d70:	9315      	str	r3, [sp, #84]	; 0x54
 8019d72:	4bc4      	ldr	r3, [pc, #784]	; (801a084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8019d74:	ed94 7a02 	vldr	s14, [r4, #8]
 8019d78:	7819      	ldrb	r1, [r3, #0]
 8019d7a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8019d7e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8019d82:	2900      	cmp	r1, #0
 8019d84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019d88:	bf16      	itet	ne
 8019d8a:	4619      	movne	r1, r3
 8019d8c:	4611      	moveq	r1, r2
 8019d8e:	4613      	movne	r3, r2
 8019d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d94:	9116      	str	r1, [sp, #88]	; 0x58
 8019d96:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8019d9a:	f240 8387 	bls.w	801a4ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019d9e:	ed94 7a07 	vldr	s14, [r4, #28]
 8019da2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019daa:	f240 837f 	bls.w	801a4ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019dae:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8019db2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dba:	f240 8377 	bls.w	801a4ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019dbe:	6822      	ldr	r2, [r4, #0]
 8019dc0:	4bb1      	ldr	r3, [pc, #708]	; (801a088 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8019dc2:	429a      	cmp	r2, r3
 8019dc4:	f2c0 8372 	blt.w	801a4ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019dc8:	49b0      	ldr	r1, [pc, #704]	; (801a08c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8019dca:	6963      	ldr	r3, [r4, #20]
 8019dcc:	428a      	cmp	r2, r1
 8019dce:	f300 836d 	bgt.w	801a4ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019dd2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8019dd6:	48ae      	ldr	r0, [pc, #696]	; (801a090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8019dd8:	33ff      	adds	r3, #255	; 0xff
 8019dda:	4283      	cmp	r3, r0
 8019ddc:	f200 8366 	bhi.w	801a4ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019de0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019de2:	4dac      	ldr	r5, [pc, #688]	; (801a094 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8019de4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8019de8:	33ff      	adds	r3, #255	; 0xff
 8019dea:	42ab      	cmp	r3, r5
 8019dec:	f200 835e 	bhi.w	801a4ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019df0:	6862      	ldr	r2, [r4, #4]
 8019df2:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8019df6:	33ff      	adds	r3, #255	; 0xff
 8019df8:	4283      	cmp	r3, r0
 8019dfa:	f200 8357 	bhi.w	801a4ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019dfe:	69a1      	ldr	r1, [r4, #24]
 8019e00:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8019e04:	33ff      	adds	r3, #255	; 0xff
 8019e06:	4283      	cmp	r3, r0
 8019e08:	f200 8350 	bhi.w	801a4ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019e0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019e0e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8019e12:	30ff      	adds	r0, #255	; 0xff
 8019e14:	42a8      	cmp	r0, r5
 8019e16:	f200 8349 	bhi.w	801a4ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019e1a:	428a      	cmp	r2, r1
 8019e1c:	f280 8110 	bge.w	801a040 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8019e20:	429a      	cmp	r2, r3
 8019e22:	f300 8119 	bgt.w	801a058 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8019e26:	4299      	cmp	r1, r3
 8019e28:	f280 811d 	bge.w	801a066 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8019e2c:	2502      	movs	r5, #2
 8019e2e:	2701      	movs	r7, #1
 8019e30:	46a9      	mov	r9, r5
 8019e32:	46b8      	mov	r8, r7
 8019e34:	f04f 0a00 	mov.w	sl, #0
 8019e38:	4621      	mov	r1, r4
 8019e3a:	a849      	add	r0, sp, #292	; 0x124
 8019e3c:	f003 fc2a 	bl	801d694 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8019e40:	4622      	mov	r2, r4
 8019e42:	4653      	mov	r3, sl
 8019e44:	a949      	add	r1, sp, #292	; 0x124
 8019e46:	f8cd 9000 	str.w	r9, [sp]
 8019e4a:	a819      	add	r0, sp, #100	; 0x64
 8019e4c:	f003 fd52 	bl	801d8f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019e50:	4622      	mov	r2, r4
 8019e52:	4653      	mov	r3, sl
 8019e54:	a949      	add	r1, sp, #292	; 0x124
 8019e56:	f8cd 8000 	str.w	r8, [sp]
 8019e5a:	a829      	add	r0, sp, #164	; 0xa4
 8019e5c:	f003 fd4a 	bl	801d8f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019e60:	4643      	mov	r3, r8
 8019e62:	4622      	mov	r2, r4
 8019e64:	a949      	add	r1, sp, #292	; 0x124
 8019e66:	f8cd 9000 	str.w	r9, [sp]
 8019e6a:	a839      	add	r0, sp, #228	; 0xe4
 8019e6c:	f003 fd42 	bl	801d8f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019e70:	42af      	cmp	r7, r5
 8019e72:	bfb5      	itete	lt
 8019e74:	2300      	movlt	r3, #0
 8019e76:	2301      	movge	r3, #1
 8019e78:	930e      	strlt	r3, [sp, #56]	; 0x38
 8019e7a:	930e      	strge	r3, [sp, #56]	; 0x38
 8019e7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019e7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019e82:	af12      	add	r7, sp, #72	; 0x48
 8019e84:	bfb9      	ittee	lt
 8019e86:	ad29      	addlt	r5, sp, #164	; 0xa4
 8019e88:	ac19      	addlt	r4, sp, #100	; 0x64
 8019e8a:	ad19      	addge	r5, sp, #100	; 0x64
 8019e8c:	ac29      	addge	r4, sp, #164	; 0xa4
 8019e8e:	e887 0003 	stmia.w	r7, {r0, r1}
 8019e92:	b928      	cbnz	r0, 8019ea0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8019e94:	4b80      	ldr	r3, [pc, #512]	; (801a098 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8019e96:	6818      	ldr	r0, [r3, #0]
 8019e98:	6803      	ldr	r3, [r0, #0]
 8019e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019e9c:	4798      	blx	r3
 8019e9e:	6038      	str	r0, [r7, #0]
 8019ea0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019ea2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019ea6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019eaa:	930c      	str	r3, [sp, #48]	; 0x30
 8019eac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019eae:	6963      	ldr	r3, [r4, #20]
 8019eb0:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8019eb2:	440b      	add	r3, r1
 8019eb4:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019eb8:	4408      	add	r0, r1
 8019eba:	b200      	sxth	r0, r0
 8019ebc:	4283      	cmp	r3, r0
 8019ebe:	900d      	str	r0, [sp, #52]	; 0x34
 8019ec0:	f280 80dd 	bge.w	801a07e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8019ec4:	428b      	cmp	r3, r1
 8019ec6:	da08      	bge.n	8019eda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019ec8:	2a00      	cmp	r2, #0
 8019eca:	dd06      	ble.n	8019eda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019ecc:	1acb      	subs	r3, r1, r3
 8019ece:	429a      	cmp	r2, r3
 8019ed0:	f2c0 80e4 	blt.w	801a09c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	f300 80e2 	bgt.w	801a09e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8019eda:	6967      	ldr	r7, [r4, #20]
 8019edc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019ede:	443b      	add	r3, r7
 8019ee0:	461f      	mov	r7, r3
 8019ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019ee4:	1bdf      	subs	r7, r3, r7
 8019ee6:	4297      	cmp	r7, r2
 8019ee8:	bfa8      	it	ge
 8019eea:	4617      	movge	r7, r2
 8019eec:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019ef0:	2f00      	cmp	r7, #0
 8019ef2:	f340 8166 	ble.w	801a1c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8019ef6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019ef8:	6829      	ldr	r1, [r5, #0]
 8019efa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019efe:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019f02:	6820      	ldr	r0, [r4, #0]
 8019f04:	4411      	add	r1, r2
 8019f06:	4299      	cmp	r1, r3
 8019f08:	dd1a      	ble.n	8019f40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019f0a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019f0e:	440b      	add	r3, r1
 8019f10:	4402      	add	r2, r0
 8019f12:	b21b      	sxth	r3, r3
 8019f14:	429a      	cmp	r2, r3
 8019f16:	dc13      	bgt.n	8019f40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f1a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	9206      	str	r2, [sp, #24]
 8019f20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019f22:	9205      	str	r2, [sp, #20]
 8019f24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019f26:	9500      	str	r5, [sp, #0]
 8019f28:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019f2c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019f2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019f30:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019f34:	a912      	add	r1, sp, #72	; 0x48
 8019f36:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8019f3a:	aa49      	add	r2, sp, #292	; 0x124
 8019f3c:	4623      	mov	r3, r4
 8019f3e:	47c8      	blx	r9
 8019f40:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019f44:	441a      	add	r2, r3
 8019f46:	6963      	ldr	r3, [r4, #20]
 8019f48:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8019f4c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8019f50:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8019f54:	68a1      	ldr	r1, [r4, #8]
 8019f56:	ed94 6a08 	vldr	s12, [r4, #32]
 8019f5a:	6022      	str	r2, [r4, #0]
 8019f5c:	3301      	adds	r3, #1
 8019f5e:	6163      	str	r3, [r4, #20]
 8019f60:	69a3      	ldr	r3, [r4, #24]
 8019f62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019f66:	3b01      	subs	r3, #1
 8019f68:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8019f6c:	61a3      	str	r3, [r4, #24]
 8019f6e:	6923      	ldr	r3, [r4, #16]
 8019f70:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019f74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019f78:	edd4 6a07 	vldr	s13, [r4, #28]
 8019f7c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019f80:	440b      	add	r3, r1
 8019f82:	68e1      	ldr	r1, [r4, #12]
 8019f84:	6123      	str	r3, [r4, #16]
 8019f86:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019f8a:	428b      	cmp	r3, r1
 8019f8c:	edc4 6a07 	vstr	s13, [r4, #28]
 8019f90:	db15      	blt.n	8019fbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8019f92:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8019f96:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019f9a:	3201      	adds	r2, #1
 8019f9c:	edc4 6a07 	vstr	s13, [r4, #28]
 8019fa0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8019fa4:	6022      	str	r2, [r4, #0]
 8019fa6:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019faa:	1a5b      	subs	r3, r3, r1
 8019fac:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019fb0:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8019fb4:	6123      	str	r3, [r4, #16]
 8019fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019fba:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019fbe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019fc2:	441a      	add	r2, r3
 8019fc4:	696b      	ldr	r3, [r5, #20]
 8019fc6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8019fca:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8019fce:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8019fd2:	68a9      	ldr	r1, [r5, #8]
 8019fd4:	ed95 6a08 	vldr	s12, [r5, #32]
 8019fd8:	602a      	str	r2, [r5, #0]
 8019fda:	3301      	adds	r3, #1
 8019fdc:	616b      	str	r3, [r5, #20]
 8019fde:	69ab      	ldr	r3, [r5, #24]
 8019fe0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019fe4:	3b01      	subs	r3, #1
 8019fe6:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019fea:	61ab      	str	r3, [r5, #24]
 8019fec:	692b      	ldr	r3, [r5, #16]
 8019fee:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019ff6:	edd5 6a07 	vldr	s13, [r5, #28]
 8019ffa:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019ffe:	440b      	add	r3, r1
 801a000:	68e9      	ldr	r1, [r5, #12]
 801a002:	612b      	str	r3, [r5, #16]
 801a004:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a008:	428b      	cmp	r3, r1
 801a00a:	edc5 6a07 	vstr	s13, [r5, #28]
 801a00e:	db15      	blt.n	801a03c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801a010:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801a014:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a018:	3201      	adds	r2, #1
 801a01a:	edc5 6a07 	vstr	s13, [r5, #28]
 801a01e:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801a022:	602a      	str	r2, [r5, #0]
 801a024:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a028:	1a5b      	subs	r3, r3, r1
 801a02a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a02e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801a032:	612b      	str	r3, [r5, #16]
 801a034:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a038:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a03c:	3f01      	subs	r7, #1
 801a03e:	e757      	b.n	8019ef0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 801a040:	4299      	cmp	r1, r3
 801a042:	dc13      	bgt.n	801a06c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 801a044:	429a      	cmp	r2, r3
 801a046:	da14      	bge.n	801a072 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801a048:	2502      	movs	r5, #2
 801a04a:	2703      	movs	r7, #3
 801a04c:	46a9      	mov	r9, r5
 801a04e:	f04f 0800 	mov.w	r8, #0
 801a052:	f04f 0a01 	mov.w	sl, #1
 801a056:	e6ef      	b.n	8019e38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a058:	2501      	movs	r5, #1
 801a05a:	2700      	movs	r7, #0
 801a05c:	46a9      	mov	r9, r5
 801a05e:	46b8      	mov	r8, r7
 801a060:	f04f 0a02 	mov.w	sl, #2
 801a064:	e6e8      	b.n	8019e38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801a066:	2501      	movs	r5, #1
 801a068:	2702      	movs	r7, #2
 801a06a:	e6e1      	b.n	8019e30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801a06c:	2500      	movs	r5, #0
 801a06e:	2701      	movs	r7, #1
 801a070:	e7f4      	b.n	801a05c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 801a072:	2702      	movs	r7, #2
 801a074:	2503      	movs	r5, #3
 801a076:	f04f 0900 	mov.w	r9, #0
 801a07a:	46b8      	mov	r8, r7
 801a07c:	e7e9      	b.n	801a052 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801a07e:	4613      	mov	r3, r2
 801a080:	e728      	b.n	8019ed4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 801a082:	bf00      	nop
 801a084:	20008e26 	.word	0x20008e26
 801a088:	fffd8f01 	.word	0xfffd8f01
 801a08c:	00027100 	.word	0x00027100
 801a090:	0004e1ff 	.word	0x0004e1ff
 801a094:	0004e1fe 	.word	0x0004e1fe
 801a098:	20008e30 	.word	0x20008e30
 801a09c:	4613      	mov	r3, r2
 801a09e:	992b      	ldr	r1, [sp, #172]	; 0xac
 801a0a0:	9111      	str	r1, [sp, #68]	; 0x44
 801a0a2:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 801a0a6:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801a0aa:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 801a0ac:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 801a0b0:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801a0b4:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801a0b8:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 801a0bc:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 801a0c0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801a0c4:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801a0c8:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 801a0cc:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 801a0d0:	469e      	mov	lr, r3
 801a0d2:	469c      	mov	ip, r3
 801a0d4:	f04f 0900 	mov.w	r9, #0
 801a0d8:	f1bc 0f00 	cmp.w	ip, #0
 801a0dc:	d147      	bne.n	801a16e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801a0de:	eb03 0c07 	add.w	ip, r3, r7
 801a0e2:	1ad7      	subs	r7, r2, r3
 801a0e4:	f1b9 0f00 	cmp.w	r9, #0
 801a0e8:	d009      	beq.n	801a0fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801a0ea:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801a0ee:	9029      	str	r0, [sp, #164]	; 0xa4
 801a0f0:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 801a0f4:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 801a0f8:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801a0fc:	912d      	str	r1, [sp, #180]	; 0xb4
 801a0fe:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801a100:	9111      	str	r1, [sp, #68]	; 0x44
 801a102:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801a106:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801a10a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801a10e:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801a112:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801a116:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801a11a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801a11e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801a122:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801a126:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801a12a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801a12e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801a132:	f04f 0800 	mov.w	r8, #0
 801a136:	f1be 0f00 	cmp.w	lr, #0
 801a13a:	d031      	beq.n	801a1a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801a13c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a13e:	4431      	add	r1, r6
 801a140:	4549      	cmp	r1, r9
 801a142:	4450      	add	r0, sl
 801a144:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a148:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a14c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a150:	db08      	blt.n	801a164 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 801a152:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a156:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a15a:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a15e:	3001      	adds	r0, #1
 801a160:	eba1 0109 	sub.w	r1, r1, r9
 801a164:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a168:	f04f 0801 	mov.w	r8, #1
 801a16c:	e7e3      	b.n	801a136 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801a16e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a170:	4431      	add	r1, r6
 801a172:	4541      	cmp	r1, r8
 801a174:	4450      	add	r0, sl
 801a176:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a17a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a17e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a182:	db08      	blt.n	801a196 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 801a184:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a188:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a18c:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a190:	3001      	adds	r0, #1
 801a192:	eba1 0108 	sub.w	r1, r1, r8
 801a196:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a19a:	f04f 0901 	mov.w	r9, #1
 801a19e:	e79b      	b.n	801a0d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801a1a0:	449c      	add	ip, r3
 801a1a2:	1aff      	subs	r7, r7, r3
 801a1a4:	f1b8 0f00 	cmp.w	r8, #0
 801a1a8:	d009      	beq.n	801a1be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801a1aa:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801a1ae:	9019      	str	r0, [sp, #100]	; 0x64
 801a1b0:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801a1b4:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801a1b8:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801a1bc:	911d      	str	r1, [sp, #116]	; 0x74
 801a1be:	1ad2      	subs	r2, r2, r3
 801a1c0:	e68b      	b.n	8019eda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801a1c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a1c4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	f000 80d1 	beq.w	801a36e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 801a1cc:	ad19      	add	r5, sp, #100	; 0x64
 801a1ce:	ac39      	add	r4, sp, #228	; 0xe4
 801a1d0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a1d2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801a1d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a1da:	930c      	str	r3, [sp, #48]	; 0x30
 801a1dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a1de:	6963      	ldr	r3, [r4, #20]
 801a1e0:	440b      	add	r3, r1
 801a1e2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801a1e6:	4408      	add	r0, r1
 801a1e8:	b200      	sxth	r0, r0
 801a1ea:	4283      	cmp	r3, r0
 801a1ec:	900d      	str	r0, [sp, #52]	; 0x34
 801a1ee:	f280 80c1 	bge.w	801a374 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801a1f2:	428b      	cmp	r3, r1
 801a1f4:	da08      	bge.n	801a208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a1f6:	2a00      	cmp	r2, #0
 801a1f8:	dd06      	ble.n	801a208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a1fa:	1acb      	subs	r3, r1, r3
 801a1fc:	429a      	cmp	r2, r3
 801a1fe:	f2c0 80bb 	blt.w	801a378 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801a202:	2b00      	cmp	r3, #0
 801a204:	f300 80b9 	bgt.w	801a37a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801a208:	6967      	ldr	r7, [r4, #20]
 801a20a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a20c:	443b      	add	r3, r7
 801a20e:	461f      	mov	r7, r3
 801a210:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a212:	1bdf      	subs	r7, r3, r7
 801a214:	4297      	cmp	r7, r2
 801a216:	bfa8      	it	ge
 801a218:	4617      	movge	r7, r2
 801a21a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801a21e:	2f00      	cmp	r7, #0
 801a220:	f340 813c 	ble.w	801a49c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 801a224:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801a226:	6829      	ldr	r1, [r5, #0]
 801a228:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a22c:	f9bb 3000 	ldrsh.w	r3, [fp]
 801a230:	6820      	ldr	r0, [r4, #0]
 801a232:	4411      	add	r1, r2
 801a234:	4299      	cmp	r1, r3
 801a236:	dd1a      	ble.n	801a26e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801a238:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801a23c:	440b      	add	r3, r1
 801a23e:	4402      	add	r2, r0
 801a240:	b21b      	sxth	r3, r3
 801a242:	429a      	cmp	r2, r3
 801a244:	dc13      	bgt.n	801a26e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801a246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a248:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a24a:	681b      	ldr	r3, [r3, #0]
 801a24c:	9206      	str	r2, [sp, #24]
 801a24e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a250:	9205      	str	r2, [sp, #20]
 801a252:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a254:	9500      	str	r5, [sp, #0]
 801a256:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a25a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a25c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a25e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 801a262:	a912      	add	r1, sp, #72	; 0x48
 801a264:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801a268:	aa49      	add	r2, sp, #292	; 0x124
 801a26a:	4623      	mov	r3, r4
 801a26c:	47c8      	blx	r9
 801a26e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a272:	441a      	add	r2, r3
 801a274:	6963      	ldr	r3, [r4, #20]
 801a276:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 801a27a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801a27e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801a282:	68a1      	ldr	r1, [r4, #8]
 801a284:	ed94 6a08 	vldr	s12, [r4, #32]
 801a288:	6022      	str	r2, [r4, #0]
 801a28a:	3301      	adds	r3, #1
 801a28c:	6163      	str	r3, [r4, #20]
 801a28e:	69a3      	ldr	r3, [r4, #24]
 801a290:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a294:	3b01      	subs	r3, #1
 801a296:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801a29a:	61a3      	str	r3, [r4, #24]
 801a29c:	6923      	ldr	r3, [r4, #16]
 801a29e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a2a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a2a6:	edd4 6a07 	vldr	s13, [r4, #28]
 801a2aa:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a2ae:	440b      	add	r3, r1
 801a2b0:	68e1      	ldr	r1, [r4, #12]
 801a2b2:	6123      	str	r3, [r4, #16]
 801a2b4:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a2b8:	428b      	cmp	r3, r1
 801a2ba:	edc4 6a07 	vstr	s13, [r4, #28]
 801a2be:	db15      	blt.n	801a2ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 801a2c0:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801a2c4:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a2c8:	3201      	adds	r2, #1
 801a2ca:	edc4 6a07 	vstr	s13, [r4, #28]
 801a2ce:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801a2d2:	6022      	str	r2, [r4, #0]
 801a2d4:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a2d8:	1a5b      	subs	r3, r3, r1
 801a2da:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801a2de:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801a2e2:	6123      	str	r3, [r4, #16]
 801a2e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a2e8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801a2ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a2f0:	441a      	add	r2, r3
 801a2f2:	696b      	ldr	r3, [r5, #20]
 801a2f4:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 801a2f8:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801a2fc:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801a300:	68a9      	ldr	r1, [r5, #8]
 801a302:	ed95 6a08 	vldr	s12, [r5, #32]
 801a306:	602a      	str	r2, [r5, #0]
 801a308:	3301      	adds	r3, #1
 801a30a:	616b      	str	r3, [r5, #20]
 801a30c:	69ab      	ldr	r3, [r5, #24]
 801a30e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a312:	3b01      	subs	r3, #1
 801a314:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 801a318:	61ab      	str	r3, [r5, #24]
 801a31a:	692b      	ldr	r3, [r5, #16]
 801a31c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a320:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a324:	edd5 6a07 	vldr	s13, [r5, #28]
 801a328:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a32c:	440b      	add	r3, r1
 801a32e:	68e9      	ldr	r1, [r5, #12]
 801a330:	612b      	str	r3, [r5, #16]
 801a332:	ee76 6a86 	vadd.f32	s13, s13, s12
 801a336:	428b      	cmp	r3, r1
 801a338:	edc5 6a07 	vstr	s13, [r5, #28]
 801a33c:	db15      	blt.n	801a36a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801a33e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 801a342:	ee76 6a26 	vadd.f32	s13, s12, s13
 801a346:	3201      	adds	r2, #1
 801a348:	edc5 6a07 	vstr	s13, [r5, #28]
 801a34c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801a350:	602a      	str	r2, [r5, #0]
 801a352:	ee36 7a87 	vadd.f32	s14, s13, s14
 801a356:	1a5b      	subs	r3, r3, r1
 801a358:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801a35c:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 801a360:	612b      	str	r3, [r5, #16]
 801a362:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a366:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801a36a:	3f01      	subs	r7, #1
 801a36c:	e757      	b.n	801a21e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801a36e:	ad39      	add	r5, sp, #228	; 0xe4
 801a370:	ac19      	add	r4, sp, #100	; 0x64
 801a372:	e72d      	b.n	801a1d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 801a374:	4613      	mov	r3, r2
 801a376:	e744      	b.n	801a202 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801a378:	4613      	mov	r3, r2
 801a37a:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801a37e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801a380:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 801a384:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801a388:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 801a38c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 801a390:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801a394:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 801a398:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 801a39c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 801a39e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801a3a2:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801a3a6:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 801a3aa:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 801a3ae:	960e      	str	r6, [sp, #56]	; 0x38
 801a3b0:	469e      	mov	lr, r3
 801a3b2:	461f      	mov	r7, r3
 801a3b4:	f04f 0900 	mov.w	r9, #0
 801a3b8:	2f00      	cmp	r7, #0
 801a3ba:	d146      	bne.n	801a44a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 801a3bc:	449c      	add	ip, r3
 801a3be:	1ad7      	subs	r7, r2, r3
 801a3c0:	f1b9 0f00 	cmp.w	r9, #0
 801a3c4:	d009      	beq.n	801a3da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801a3c6:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801a3ca:	9039      	str	r0, [sp, #228]	; 0xe4
 801a3cc:	913d      	str	r1, [sp, #244]	; 0xf4
 801a3ce:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 801a3d2:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 801a3d6:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801a3da:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801a3dc:	910e      	str	r1, [sp, #56]	; 0x38
 801a3de:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801a3e2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801a3e6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801a3ea:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801a3ee:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801a3f2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801a3f6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801a3fa:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801a3fe:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801a402:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801a406:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801a40a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801a40e:	f04f 0800 	mov.w	r8, #0
 801a412:	f1be 0f00 	cmp.w	lr, #0
 801a416:	d030      	beq.n	801a47a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801a418:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801a41a:	4431      	add	r1, r6
 801a41c:	4549      	cmp	r1, r9
 801a41e:	4450      	add	r0, sl
 801a420:	ee76 6aa4 	vadd.f32	s13, s13, s9
 801a424:	ee37 7a04 	vadd.f32	s14, s14, s8
 801a428:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801a42c:	db08      	blt.n	801a440 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801a42e:	ee77 7a85 	vadd.f32	s15, s15, s10
 801a432:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801a436:	ee37 7a06 	vadd.f32	s14, s14, s12
 801a43a:	3001      	adds	r0, #1
 801a43c:	eba1 0109 	sub.w	r1, r1, r9
 801a440:	f10e 3eff 	add.w	lr, lr, #4294967295
 801a444:	f04f 0801 	mov.w	r8, #1
 801a448:	e7e3      	b.n	801a412 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801a44a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801a44c:	4431      	add	r1, r6
 801a44e:	4541      	cmp	r1, r8
 801a450:	4450      	add	r0, sl
 801a452:	ee37 7a24 	vadd.f32	s14, s14, s9
 801a456:	ee77 7a84 	vadd.f32	s15, s15, s8
 801a45a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801a45e:	db08      	blt.n	801a472 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 801a460:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a464:	ee37 7a25 	vadd.f32	s14, s14, s11
 801a468:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a46c:	3001      	adds	r0, #1
 801a46e:	eba1 0108 	sub.w	r1, r1, r8
 801a472:	3f01      	subs	r7, #1
 801a474:	f04f 0901 	mov.w	r9, #1
 801a478:	e79e      	b.n	801a3b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801a47a:	449c      	add	ip, r3
 801a47c:	1aff      	subs	r7, r7, r3
 801a47e:	f1b8 0f00 	cmp.w	r8, #0
 801a482:	d009      	beq.n	801a498 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801a484:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801a488:	9019      	str	r0, [sp, #100]	; 0x64
 801a48a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801a48e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801a492:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801a496:	911d      	str	r1, [sp, #116]	; 0x74
 801a498:	1ad2      	subs	r2, r2, r3
 801a49a:	e6b5      	b.n	801a208 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a49c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a49e:	681b      	ldr	r3, [r3, #0]
 801a4a0:	b923      	cbnz	r3, 801a4ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a4a2:	4b04      	ldr	r3, [pc, #16]	; (801a4b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801a4a4:	6818      	ldr	r0, [r3, #0]
 801a4a6:	6803      	ldr	r3, [r0, #0]
 801a4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a4aa:	4798      	blx	r3
 801a4ac:	b05b      	add	sp, #364	; 0x16c
 801a4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4b2:	bf00      	nop
 801a4b4:	20008e30 	.word	0x20008e30

0801a4b8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801a4b8:	b570      	push	{r4, r5, r6, lr}
 801a4ba:	4604      	mov	r4, r0
 801a4bc:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801a4c0:	9804      	ldr	r0, [sp, #16]
 801a4c2:	6061      	str	r1, [r4, #4]
 801a4c4:	2500      	movs	r5, #0
 801a4c6:	8025      	strh	r5, [r4, #0]
 801a4c8:	7223      	strb	r3, [r4, #8]
 801a4ca:	7266      	strb	r6, [r4, #9]
 801a4cc:	60e0      	str	r0, [r4, #12]
 801a4ce:	8222      	strh	r2, [r4, #16]
 801a4d0:	8265      	strh	r5, [r4, #18]
 801a4d2:	82a5      	strh	r5, [r4, #20]
 801a4d4:	82e5      	strh	r5, [r4, #22]
 801a4d6:	8325      	strh	r5, [r4, #24]
 801a4d8:	8365      	strh	r5, [r4, #26]
 801a4da:	83a5      	strh	r5, [r4, #28]
 801a4dc:	77a5      	strb	r5, [r4, #30]
 801a4de:	b32e      	cbz	r6, 801a52c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801a4e0:	6803      	ldr	r3, [r0, #0]
 801a4e2:	695b      	ldr	r3, [r3, #20]
 801a4e4:	4798      	blx	r3
 801a4e6:	4606      	mov	r6, r0
 801a4e8:	b300      	cbz	r0, 801a52c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801a4ea:	68e0      	ldr	r0, [r4, #12]
 801a4ec:	6803      	ldr	r3, [r0, #0]
 801a4ee:	4631      	mov	r1, r6
 801a4f0:	68db      	ldr	r3, [r3, #12]
 801a4f2:	4798      	blx	r3
 801a4f4:	4605      	mov	r5, r0
 801a4f6:	b1c8      	cbz	r0, 801a52c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801a4f8:	7b43      	ldrb	r3, [r0, #13]
 801a4fa:	7a82      	ldrb	r2, [r0, #10]
 801a4fc:	005b      	lsls	r3, r3, #1
 801a4fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a502:	4313      	orrs	r3, r2
 801a504:	83a3      	strh	r3, [r4, #28]
 801a506:	7a63      	ldrb	r3, [r4, #9]
 801a508:	2b04      	cmp	r3, #4
 801a50a:	d10f      	bne.n	801a52c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801a50c:	68e0      	ldr	r0, [r4, #12]
 801a50e:	6803      	ldr	r3, [r0, #0]
 801a510:	462a      	mov	r2, r5
 801a512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a514:	4631      	mov	r1, r6
 801a516:	4798      	blx	r3
 801a518:	7b6b      	ldrb	r3, [r5, #13]
 801a51a:	005b      	lsls	r3, r3, #1
 801a51c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a520:	7aab      	ldrb	r3, [r5, #10]
 801a522:	4313      	orrs	r3, r2
 801a524:	4418      	add	r0, r3
 801a526:	8ba3      	ldrh	r3, [r4, #28]
 801a528:	4418      	add	r0, r3
 801a52a:	83a0      	strh	r0, [r4, #28]
 801a52c:	4620      	mov	r0, r4
 801a52e:	bd70      	pop	{r4, r5, r6, pc}

0801a530 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801a530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a534:	2400      	movs	r4, #0
 801a536:	b085      	sub	sp, #20
 801a538:	4681      	mov	r9, r0
 801a53a:	4688      	mov	r8, r1
 801a53c:	4692      	mov	sl, r2
 801a53e:	469b      	mov	fp, r3
 801a540:	4627      	mov	r7, r4
 801a542:	4625      	mov	r5, r4
 801a544:	4626      	mov	r6, r4
 801a546:	4554      	cmp	r4, sl
 801a548:	da2a      	bge.n	801a5a0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a54a:	2300      	movs	r3, #0
 801a54c:	9303      	str	r3, [sp, #12]
 801a54e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a552:	429d      	cmp	r5, r3
 801a554:	d004      	beq.n	801a560 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801a556:	f242 030b 	movw	r3, #8203	; 0x200b
 801a55a:	429d      	cmp	r5, r3
 801a55c:	bf18      	it	ne
 801a55e:	462f      	movne	r7, r5
 801a560:	ab03      	add	r3, sp, #12
 801a562:	4642      	mov	r2, r8
 801a564:	4659      	mov	r1, fp
 801a566:	4648      	mov	r0, r9
 801a568:	f002 feaa 	bl	801d2c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a56c:	4605      	mov	r5, r0
 801a56e:	b1b8      	cbz	r0, 801a5a0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a570:	280a      	cmp	r0, #10
 801a572:	d015      	beq.n	801a5a0 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a574:	9a03      	ldr	r2, [sp, #12]
 801a576:	b18a      	cbz	r2, 801a59c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801a578:	7b50      	ldrb	r0, [r2, #13]
 801a57a:	7a93      	ldrb	r3, [r2, #10]
 801a57c:	8895      	ldrh	r5, [r2, #4]
 801a57e:	0040      	lsls	r0, r0, #1
 801a580:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801a584:	4303      	orrs	r3, r0
 801a586:	9301      	str	r3, [sp, #4]
 801a588:	f8d8 3000 	ldr.w	r3, [r8]
 801a58c:	4639      	mov	r1, r7
 801a58e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a590:	4640      	mov	r0, r8
 801a592:	4798      	blx	r3
 801a594:	9b01      	ldr	r3, [sp, #4]
 801a596:	4418      	add	r0, r3
 801a598:	4406      	add	r6, r0
 801a59a:	b2b6      	uxth	r6, r6
 801a59c:	3401      	adds	r4, #1
 801a59e:	e7d2      	b.n	801a546 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801a5a0:	4630      	mov	r0, r6
 801a5a2:	b005      	add	sp, #20
 801a5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a5a8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801a5a8:	2a02      	cmp	r2, #2
 801a5aa:	b530      	push	{r4, r5, lr}
 801a5ac:	d011      	beq.n	801a5d2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801a5ae:	2a03      	cmp	r2, #3
 801a5b0:	d01c      	beq.n	801a5ec <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801a5b2:	2a01      	cmp	r2, #1
 801a5b4:	d10c      	bne.n	801a5d0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a5b6:	888b      	ldrh	r3, [r1, #4]
 801a5b8:	8801      	ldrh	r1, [r0, #0]
 801a5ba:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801a5be:	8844      	ldrh	r4, [r0, #2]
 801a5c0:	8004      	strh	r4, [r0, #0]
 801a5c2:	1a5b      	subs	r3, r3, r1
 801a5c4:	1a9b      	subs	r3, r3, r2
 801a5c6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a5ca:	8043      	strh	r3, [r0, #2]
 801a5cc:	8081      	strh	r1, [r0, #4]
 801a5ce:	80c2      	strh	r2, [r0, #6]
 801a5d0:	bd30      	pop	{r4, r5, pc}
 801a5d2:	88cb      	ldrh	r3, [r1, #6]
 801a5d4:	8842      	ldrh	r2, [r0, #2]
 801a5d6:	1a9b      	subs	r3, r3, r2
 801a5d8:	88c2      	ldrh	r2, [r0, #6]
 801a5da:	1a9b      	subs	r3, r3, r2
 801a5dc:	888a      	ldrh	r2, [r1, #4]
 801a5de:	8801      	ldrh	r1, [r0, #0]
 801a5e0:	8043      	strh	r3, [r0, #2]
 801a5e2:	1a52      	subs	r2, r2, r1
 801a5e4:	8881      	ldrh	r1, [r0, #4]
 801a5e6:	1a52      	subs	r2, r2, r1
 801a5e8:	8002      	strh	r2, [r0, #0]
 801a5ea:	e7f1      	b.n	801a5d0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a5ec:	88cb      	ldrh	r3, [r1, #6]
 801a5ee:	8841      	ldrh	r1, [r0, #2]
 801a5f0:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801a5f4:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a5f8:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a5fc:	8045      	strh	r5, [r0, #2]
 801a5fe:	1a5b      	subs	r3, r3, r1
 801a600:	1a9b      	subs	r3, r3, r2
 801a602:	8003      	strh	r3, [r0, #0]
 801a604:	8082      	strh	r2, [r0, #4]
 801a606:	80c4      	strh	r4, [r0, #6]
 801a608:	e7e2      	b.n	801a5d0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801a60a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801a60a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a60e:	b09f      	sub	sp, #124	; 0x7c
 801a610:	9116      	str	r1, [sp, #88]	; 0x58
 801a612:	9317      	str	r3, [sp, #92]	; 0x5c
 801a614:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801a616:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a618:	8809      	ldrh	r1, [r1, #0]
 801a61a:	889b      	ldrh	r3, [r3, #4]
 801a61c:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801a620:	9212      	str	r2, [sp, #72]	; 0x48
 801a622:	440b      	add	r3, r1
 801a624:	b21b      	sxth	r3, r3
 801a626:	9310      	str	r3, [sp, #64]	; 0x40
 801a628:	f8d8 3000 	ldr.w	r3, [r8]
 801a62c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801a630:	7a59      	ldrb	r1, [r3, #9]
 801a632:	7a1b      	ldrb	r3, [r3, #8]
 801a634:	9011      	str	r0, [sp, #68]	; 0x44
 801a636:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801a63a:	9114      	str	r1, [sp, #80]	; 0x50
 801a63c:	9315      	str	r3, [sp, #84]	; 0x54
 801a63e:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 801a642:	2a00      	cmp	r2, #0
 801a644:	d06a      	beq.n	801a71c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801a646:	f898 3010 	ldrb.w	r3, [r8, #16]
 801a64a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a64c:	2b04      	cmp	r3, #4
 801a64e:	bf14      	ite	ne
 801a650:	2301      	movne	r3, #1
 801a652:	2302      	moveq	r3, #2
 801a654:	4413      	add	r3, r2
 801a656:	f04f 0900 	mov.w	r9, #0
 801a65a:	930f      	str	r3, [sp, #60]	; 0x3c
 801a65c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801a660:	464c      	mov	r4, r9
 801a662:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801a666:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801a66a:	4293      	cmp	r3, r2
 801a66c:	f280 808f 	bge.w	801a78e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801a670:	2300      	movs	r3, #0
 801a672:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 801a676:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 801a67a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a67e:	429c      	cmp	r4, r3
 801a680:	d006      	beq.n	801a690 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801a682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a684:	f242 020b 	movw	r2, #8203	; 0x200b
 801a688:	4294      	cmp	r4, r2
 801a68a:	bf18      	it	ne
 801a68c:	4623      	movne	r3, r4
 801a68e:	930d      	str	r3, [sp, #52]	; 0x34
 801a690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a692:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801a694:	f8d8 2000 	ldr.w	r2, [r8]
 801a698:	428b      	cmp	r3, r1
 801a69a:	db41      	blt.n	801a720 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801a69c:	6813      	ldr	r3, [r2, #0]
 801a69e:	4610      	mov	r0, r2
 801a6a0:	695b      	ldr	r3, [r3, #20]
 801a6a2:	4798      	blx	r3
 801a6a4:	4604      	mov	r4, r0
 801a6a6:	f8d8 0000 	ldr.w	r0, [r8]
 801a6aa:	6803      	ldr	r3, [r0, #0]
 801a6ac:	aa1d      	add	r2, sp, #116	; 0x74
 801a6ae:	689e      	ldr	r6, [r3, #8]
 801a6b0:	4621      	mov	r1, r4
 801a6b2:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801a6b6:	47b0      	blx	r6
 801a6b8:	901c      	str	r0, [sp, #112]	; 0x70
 801a6ba:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a6be:	429c      	cmp	r4, r3
 801a6c0:	f000 80e9 	beq.w	801a896 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801a6c4:	f242 030b 	movw	r3, #8203	; 0x200b
 801a6c8:	429c      	cmp	r4, r3
 801a6ca:	f000 80e4 	beq.w	801a896 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801a6ce:	2c00      	cmp	r4, #0
 801a6d0:	f000 80f6 	beq.w	801a8c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 801a6d4:	2c0a      	cmp	r4, #10
 801a6d6:	d060      	beq.n	801a79a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801a6d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a6da:	b36a      	cbz	r2, 801a738 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801a6dc:	8894      	ldrh	r4, [r2, #4]
 801a6de:	f1bb 0f00 	cmp.w	fp, #0
 801a6e2:	d03b      	beq.n	801a75c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801a6e4:	f892 900d 	ldrb.w	r9, [r2, #13]
 801a6e8:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a6ec:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801a6f0:	f892 900a 	ldrb.w	r9, [r2, #10]
 801a6f4:	f1bb 0f01 	cmp.w	fp, #1
 801a6f8:	ea49 0903 	orr.w	r9, r9, r3
 801a6fc:	d134      	bne.n	801a768 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 801a6fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a700:	eba5 0509 	sub.w	r5, r5, r9
 801a704:	2b00      	cmp	r3, #0
 801a706:	d14f      	bne.n	801a7a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801a708:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a70a:	eb09 0305 	add.w	r3, r9, r5
 801a70e:	4413      	add	r3, r2
 801a710:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a712:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a716:	4293      	cmp	r3, r2
 801a718:	da51      	bge.n	801a7be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801a71a:	e038      	b.n	801a78e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801a71c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a71e:	e79a      	b.n	801a656 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801a720:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801a724:	9301      	str	r3, [sp, #4]
 801a726:	ab1d      	add	r3, sp, #116	; 0x74
 801a728:	9300      	str	r3, [sp, #0]
 801a72a:	4659      	mov	r1, fp
 801a72c:	ab1c      	add	r3, sp, #112	; 0x70
 801a72e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801a730:	f002 fe0f 	bl	801d352 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801a734:	4604      	mov	r4, r0
 801a736:	e7c0      	b.n	801a6ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801a738:	f8d8 0000 	ldr.w	r0, [r8]
 801a73c:	6803      	ldr	r3, [r0, #0]
 801a73e:	691b      	ldr	r3, [r3, #16]
 801a740:	4798      	blx	r3
 801a742:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a746:	4298      	cmp	r0, r3
 801a748:	f000 80a5 	beq.w	801a896 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801a74c:	f242 030b 	movw	r3, #8203	; 0x200b
 801a750:	4298      	cmp	r0, r3
 801a752:	f000 80a0 	beq.w	801a896 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801a756:	f1bb 0f00 	cmp.w	fp, #0
 801a75a:	d100      	bne.n	801a75e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801a75c:	444d      	add	r5, r9
 801a75e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a760:	2a00      	cmp	r2, #0
 801a762:	d1bf      	bne.n	801a6e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801a764:	4691      	mov	r9, r2
 801a766:	e096      	b.n	801a896 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801a768:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	f000 80aa 	beq.w	801a8c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2ba>
 801a770:	f1bb 0f00 	cmp.w	fp, #0
 801a774:	d118      	bne.n	801a7a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801a776:	f8d8 0000 	ldr.w	r0, [r8]
 801a77a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a77c:	6803      	ldr	r3, [r0, #0]
 801a77e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a780:	4798      	blx	r3
 801a782:	4405      	add	r5, r0
 801a784:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a786:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a788:	1aeb      	subs	r3, r5, r3
 801a78a:	4293      	cmp	r3, r2
 801a78c:	dd17      	ble.n	801a7be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801a78e:	2c00      	cmp	r4, #0
 801a790:	f000 8096 	beq.w	801a8c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 801a794:	2c0a      	cmp	r4, #10
 801a796:	f040 8084 	bne.w	801a8a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 801a79a:	240a      	movs	r4, #10
 801a79c:	fab4 f084 	clz	r0, r4
 801a7a0:	0940      	lsrs	r0, r0, #5
 801a7a2:	b01f      	add	sp, #124	; 0x7c
 801a7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7a8:	f8d8 0000 	ldr.w	r0, [r8]
 801a7ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a7ae:	6803      	ldr	r3, [r0, #0]
 801a7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a7b2:	4798      	blx	r3
 801a7b4:	f1bb 0f01 	cmp.w	fp, #1
 801a7b8:	eba5 0500 	sub.w	r5, r5, r0
 801a7bc:	d0a4      	beq.n	801a708 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801a7be:	981c      	ldr	r0, [sp, #112]	; 0x70
 801a7c0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a7c2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801a7c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a7ca:	7b43      	ldrb	r3, [r0, #13]
 801a7cc:	015b      	lsls	r3, r3, #5
 801a7ce:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a7d2:	7983      	ldrb	r3, [r0, #6]
 801a7d4:	4429      	add	r1, r5
 801a7d6:	4313      	orrs	r3, r2
 801a7d8:	440b      	add	r3, r1
 801a7da:	42b3      	cmp	r3, r6
 801a7dc:	db5b      	blt.n	801a896 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801a7de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a7e0:	4299      	cmp	r1, r3
 801a7e2:	da58      	bge.n	801a896 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801a7e4:	f8d8 0000 	ldr.w	r0, [r8]
 801a7e8:	6803      	ldr	r3, [r0, #0]
 801a7ea:	42ae      	cmp	r6, r5
 801a7ec:	bfc8      	it	gt
 801a7ee:	1b76      	subgt	r6, r6, r5
 801a7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a7f2:	bfcc      	ite	gt
 801a7f4:	b2b6      	uxthgt	r6, r6
 801a7f6:	2600      	movle	r6, #0
 801a7f8:	4798      	blx	r3
 801a7fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a7fc:	7b5a      	ldrb	r2, [r3, #13]
 801a7fe:	00d1      	lsls	r1, r2, #3
 801a800:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801a804:	7a19      	ldrb	r1, [r3, #8]
 801a806:	4339      	orrs	r1, r7
 801a808:	0657      	lsls	r7, r2, #25
 801a80a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801a80c:	bf44      	itt	mi
 801a80e:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801a812:	b209      	sxthmi	r1, r1
 801a814:	19c7      	adds	r7, r0, r7
 801a816:	1a7f      	subs	r7, r7, r1
 801a818:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801a81a:	b2bf      	uxth	r7, r7
 801a81c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801a820:	fa0f fa87 	sxth.w	sl, r7
 801a824:	4551      	cmp	r1, sl
 801a826:	dd3a      	ble.n	801a89e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x294>
 801a828:	0112      	lsls	r2, r2, #4
 801a82a:	79d8      	ldrb	r0, [r3, #7]
 801a82c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a830:	4302      	orrs	r2, r0
 801a832:	4492      	add	sl, r2
 801a834:	4551      	cmp	r1, sl
 801a836:	dc2e      	bgt.n	801a896 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28c>
 801a838:	1bcf      	subs	r7, r1, r7
 801a83a:	b2bf      	uxth	r7, r7
 801a83c:	468a      	mov	sl, r1
 801a83e:	9319      	str	r3, [sp, #100]	; 0x64
 801a840:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a842:	f8d8 0000 	ldr.w	r0, [r8]
 801a846:	681a      	ldr	r2, [r3, #0]
 801a848:	6801      	ldr	r1, [r0, #0]
 801a84a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801a84c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a84e:	9313      	str	r3, [sp, #76]	; 0x4c
 801a850:	9218      	str	r2, [sp, #96]	; 0x60
 801a852:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801a854:	4788      	blx	r1
 801a856:	f898 1006 	ldrb.w	r1, [r8, #6]
 801a85a:	910b      	str	r1, [sp, #44]	; 0x2c
 801a85c:	f898 100e 	ldrb.w	r1, [r8, #14]
 801a860:	910a      	str	r1, [sp, #40]	; 0x28
 801a862:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801a866:	9109      	str	r1, [sp, #36]	; 0x24
 801a868:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a86a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801a86e:	9305      	str	r3, [sp, #20]
 801a870:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a872:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a874:	9206      	str	r2, [sp, #24]
 801a876:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801a87a:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801a87e:	e9cd a601 	strd	sl, r6, [sp, #4]
 801a882:	442e      	add	r6, r5
 801a884:	b236      	sxth	r6, r6
 801a886:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a888:	9600      	str	r6, [sp, #0]
 801a88a:	681a      	ldr	r2, [r3, #0]
 801a88c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a88e:	685b      	ldr	r3, [r3, #4]
 801a890:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a892:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a894:	47b0      	blx	r6
 801a896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a898:	3301      	adds	r3, #1
 801a89a:	930e      	str	r3, [sp, #56]	; 0x38
 801a89c:	e6e3      	b.n	801a666 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801a89e:	2700      	movs	r7, #0
 801a8a0:	e7cd      	b.n	801a83e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 801a8a2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801a8a4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a8a6:	3501      	adds	r5, #1
 801a8a8:	429d      	cmp	r5, r3
 801a8aa:	f6bf af77 	bge.w	801a79c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801a8ae:	4659      	mov	r1, fp
 801a8b0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801a8b2:	f7fb f9ed 	bl	8015c90 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a8b6:	4604      	mov	r4, r0
 801a8b8:	b110      	cbz	r0, 801a8c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b6>
 801a8ba:	280a      	cmp	r0, #10
 801a8bc:	d1f2      	bne.n	801a8a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 801a8be:	e76c      	b.n	801a79a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801a8c0:	2400      	movs	r4, #0
 801a8c2:	e76b      	b.n	801a79c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801a8c4:	f1bb 0f00 	cmp.w	fp, #0
 801a8c8:	f43f af5c 	beq.w	801a784 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 801a8cc:	e777      	b.n	801a7be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801a8ce <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801a8ce:	b530      	push	{r4, r5, lr}
 801a8d0:	8a44      	ldrh	r4, [r0, #18]
 801a8d2:	8ac5      	ldrh	r5, [r0, #22]
 801a8d4:	82c3      	strh	r3, [r0, #22]
 801a8d6:	442c      	add	r4, r5
 801a8d8:	1ae4      	subs	r4, r4, r3
 801a8da:	8244      	strh	r4, [r0, #18]
 801a8dc:	8b03      	ldrh	r3, [r0, #24]
 801a8de:	8a84      	ldrh	r4, [r0, #20]
 801a8e0:	4422      	add	r2, r4
 801a8e2:	440c      	add	r4, r1
 801a8e4:	1a59      	subs	r1, r3, r1
 801a8e6:	8342      	strh	r2, [r0, #26]
 801a8e8:	8284      	strh	r4, [r0, #20]
 801a8ea:	8301      	strh	r1, [r0, #24]
 801a8ec:	bd30      	pop	{r4, r5, pc}

0801a8ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801a8ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8f2:	7a43      	ldrb	r3, [r0, #9]
 801a8f4:	1eda      	subs	r2, r3, #3
 801a8f6:	b087      	sub	sp, #28
 801a8f8:	4604      	mov	r4, r0
 801a8fa:	b2d2      	uxtb	r2, r2
 801a8fc:	460f      	mov	r7, r1
 801a8fe:	2900      	cmp	r1, #0
 801a900:	d036      	beq.n	801a970 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801a902:	2a01      	cmp	r2, #1
 801a904:	d932      	bls.n	801a96c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801a906:	1e58      	subs	r0, r3, #1
 801a908:	f1d0 0b00 	rsbs	fp, r0, #0
 801a90c:	eb4b 0b00 	adc.w	fp, fp, r0
 801a910:	1e99      	subs	r1, r3, #2
 801a912:	424b      	negs	r3, r1
 801a914:	414b      	adcs	r3, r1
 801a916:	9303      	str	r3, [sp, #12]
 801a918:	2300      	movs	r3, #0
 801a91a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801a91e:	2500      	movs	r5, #0
 801a920:	8265      	strh	r5, [r4, #18]
 801a922:	82a5      	strh	r5, [r4, #20]
 801a924:	46a9      	mov	r9, r5
 801a926:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801a92a:	2300      	movs	r3, #0
 801a92c:	9305      	str	r3, [sp, #20]
 801a92e:	8823      	ldrh	r3, [r4, #0]
 801a930:	2b20      	cmp	r3, #32
 801a932:	d02b      	beq.n	801a98c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801a934:	eba3 020a 	sub.w	r2, r3, sl
 801a938:	4256      	negs	r6, r2
 801a93a:	4156      	adcs	r6, r2
 801a93c:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801a940:	4293      	cmp	r3, r2
 801a942:	d004      	beq.n	801a94e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801a944:	4553      	cmp	r3, sl
 801a946:	bf16      	itet	ne
 801a948:	4699      	movne	r9, r3
 801a94a:	2601      	moveq	r6, #1
 801a94c:	2600      	movne	r6, #0
 801a94e:	ab05      	add	r3, sp, #20
 801a950:	68e2      	ldr	r2, [r4, #12]
 801a952:	7a21      	ldrb	r1, [r4, #8]
 801a954:	6860      	ldr	r0, [r4, #4]
 801a956:	f002 fcb3 	bl	801d2c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a95a:	8020      	strh	r0, [r4, #0]
 801a95c:	b9c8      	cbnz	r0, 801a992 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801a95e:	8b22      	ldrh	r2, [r4, #24]
 801a960:	2300      	movs	r3, #0
 801a962:	4611      	mov	r1, r2
 801a964:	4620      	mov	r0, r4
 801a966:	f7ff ffb2 	bl	801a8ce <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a96a:	e066      	b.n	801aa3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801a96c:	468b      	mov	fp, r1
 801a96e:	e7cf      	b.n	801a910 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801a970:	3b01      	subs	r3, #1
 801a972:	2a01      	cmp	r2, #1
 801a974:	bf8c      	ite	hi
 801a976:	2200      	movhi	r2, #0
 801a978:	2201      	movls	r2, #1
 801a97a:	2b01      	cmp	r3, #1
 801a97c:	bf8c      	ite	hi
 801a97e:	2300      	movhi	r3, #0
 801a980:	2301      	movls	r3, #1
 801a982:	9202      	str	r2, [sp, #8]
 801a984:	9301      	str	r3, [sp, #4]
 801a986:	9103      	str	r1, [sp, #12]
 801a988:	468b      	mov	fp, r1
 801a98a:	e7c8      	b.n	801a91e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801a98c:	4699      	mov	r9, r3
 801a98e:	2601      	movs	r6, #1
 801a990:	e7dd      	b.n	801a94e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801a992:	8ae3      	ldrh	r3, [r4, #22]
 801a994:	280a      	cmp	r0, #10
 801a996:	f103 0301 	add.w	r3, r3, #1
 801a99a:	82e3      	strh	r3, [r4, #22]
 801a99c:	d0df      	beq.n	801a95e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801a99e:	9a05      	ldr	r2, [sp, #20]
 801a9a0:	bb42      	cbnz	r2, 801a9f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801a9a2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a9a6:	4298      	cmp	r0, r3
 801a9a8:	d001      	beq.n	801a9ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801a9aa:	4550      	cmp	r0, sl
 801a9ac:	d1bd      	bne.n	801a92a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a9ae:	8823      	ldrh	r3, [r4, #0]
 801a9b0:	8b21      	ldrh	r1, [r4, #24]
 801a9b2:	2b20      	cmp	r3, #32
 801a9b4:	d001      	beq.n	801a9ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801a9b6:	4553      	cmp	r3, sl
 801a9b8:	d131      	bne.n	801aa1e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801a9ba:	2e00      	cmp	r6, #0
 801a9bc:	bf0a      	itet	eq
 801a9be:	460d      	moveq	r5, r1
 801a9c0:	4630      	movne	r0, r6
 801a9c2:	2001      	moveq	r0, #1
 801a9c4:	440a      	add	r2, r1
 801a9c6:	8aa3      	ldrh	r3, [r4, #20]
 801a9c8:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801a9cc:	b292      	uxth	r2, r2
 801a9ce:	8322      	strh	r2, [r4, #24]
 801a9d0:	4413      	add	r3, r2
 801a9d2:	2f00      	cmp	r7, #0
 801a9d4:	d03a      	beq.n	801aa4c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801a9d6:	f1bb 0f00 	cmp.w	fp, #0
 801a9da:	d102      	bne.n	801a9e2 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801a9dc:	9903      	ldr	r1, [sp, #12]
 801a9de:	b301      	cbz	r1, 801aa22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801a9e0:	b1f8      	cbz	r0, 801aa22 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801a9e2:	8ba1      	ldrh	r1, [r4, #28]
 801a9e4:	4419      	add	r1, r3
 801a9e6:	458c      	cmp	ip, r1
 801a9e8:	da2a      	bge.n	801aa40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801a9ea:	8a61      	ldrh	r1, [r4, #18]
 801a9ec:	b341      	cbz	r1, 801aa40 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801a9ee:	4563      	cmp	r3, ip
 801a9f0:	dd9b      	ble.n	801a92a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a9f2:	e01c      	b.n	801aa2e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801a9f4:	8893      	ldrh	r3, [r2, #4]
 801a9f6:	8023      	strh	r3, [r4, #0]
 801a9f8:	f892 800d 	ldrb.w	r8, [r2, #13]
 801a9fc:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801aa00:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801aa04:	f892 800a 	ldrb.w	r8, [r2, #10]
 801aa08:	ea48 0800 	orr.w	r8, r8, r0
 801aa0c:	68e0      	ldr	r0, [r4, #12]
 801aa0e:	6803      	ldr	r3, [r0, #0]
 801aa10:	4649      	mov	r1, r9
 801aa12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801aa14:	4798      	blx	r3
 801aa16:	eb08 0200 	add.w	r2, r8, r0
 801aa1a:	b292      	uxth	r2, r2
 801aa1c:	e7c7      	b.n	801a9ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801aa1e:	2000      	movs	r0, #0
 801aa20:	e7d0      	b.n	801a9c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801aa22:	4563      	cmp	r3, ip
 801aa24:	dd81      	ble.n	801a92a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801aa26:	8a63      	ldrh	r3, [r4, #18]
 801aa28:	2b00      	cmp	r3, #0
 801aa2a:	f43f af7e 	beq.w	801a92a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801aa2e:	2301      	movs	r3, #1
 801aa30:	77a3      	strb	r3, [r4, #30]
 801aa32:	8ba2      	ldrh	r2, [r4, #28]
 801aa34:	8b63      	ldrh	r3, [r4, #26]
 801aa36:	4413      	add	r3, r2
 801aa38:	8363      	strh	r3, [r4, #26]
 801aa3a:	b007      	add	sp, #28
 801aa3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa40:	2300      	movs	r3, #0
 801aa42:	4611      	mov	r1, r2
 801aa44:	4620      	mov	r0, r4
 801aa46:	f7ff ff42 	bl	801a8ce <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801aa4a:	e76e      	b.n	801a92a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801aa4c:	4563      	cmp	r3, ip
 801aa4e:	dd14      	ble.n	801aa7a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801aa50:	9b02      	ldr	r3, [sp, #8]
 801aa52:	b113      	cbz	r3, 801aa5a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801aa54:	2301      	movs	r3, #1
 801aa56:	460a      	mov	r2, r1
 801aa58:	e783      	b.n	801a962 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801aa5a:	9b01      	ldr	r3, [sp, #4]
 801aa5c:	2b00      	cmp	r3, #0
 801aa5e:	f43f af64 	beq.w	801a92a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801aa62:	2800      	cmp	r0, #0
 801aa64:	f47f af61 	bne.w	801a92a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801aa68:	b116      	cbz	r6, 801aa70 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801aa6a:	2301      	movs	r3, #1
 801aa6c:	462a      	mov	r2, r5
 801aa6e:	e779      	b.n	801a964 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801aa70:	8a63      	ldrh	r3, [r4, #18]
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	f43f af59 	beq.w	801a92a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801aa78:	e7df      	b.n	801aa3a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801aa7a:	2800      	cmp	r0, #0
 801aa7c:	f47f af55 	bne.w	801a92a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801aa80:	2e00      	cmp	r6, #0
 801aa82:	f43f af52 	beq.w	801a92a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801aa86:	2301      	movs	r3, #1
 801aa88:	462a      	mov	r2, r5
 801aa8a:	e7db      	b.n	801aa44 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801aa8c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801aa8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa90:	b0e5      	sub	sp, #404	; 0x194
 801aa92:	4689      	mov	r9, r1
 801aa94:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801aa98:	900a      	str	r0, [sp, #40]	; 0x28
 801aa9a:	461c      	mov	r4, r3
 801aa9c:	f1ba 0f00 	cmp.w	sl, #0
 801aaa0:	f000 80b4 	beq.w	801ac0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	f000 80b0 	beq.w	801ac0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801aaac:	7ba3      	ldrb	r3, [r4, #14]
 801aaae:	2b00      	cmp	r3, #0
 801aab0:	f000 80ac 	beq.w	801ac0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801aab4:	6810      	ldr	r0, [r2, #0]
 801aab6:	6851      	ldr	r1, [r2, #4]
 801aab8:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801aabc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801aac0:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801aac4:	4643      	mov	r3, r8
 801aac6:	c303      	stmia	r3!, {r0, r1}
 801aac8:	2500      	movs	r5, #0
 801aaca:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801aace:	79a2      	ldrb	r2, [r4, #6]
 801aad0:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801aad4:	a90f      	add	r1, sp, #60	; 0x3c
 801aad6:	4640      	mov	r0, r8
 801aad8:	950f      	str	r5, [sp, #60]	; 0x3c
 801aada:	f7ff fd65 	bl	801a5a8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801aade:	a90f      	add	r1, sp, #60	; 0x3c
 801aae0:	4608      	mov	r0, r1
 801aae2:	79a2      	ldrb	r2, [r4, #6]
 801aae4:	af19      	add	r7, sp, #100	; 0x64
 801aae6:	f7ff fd5f 	bl	801a5a8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801aaea:	4638      	mov	r0, r7
 801aaec:	f002 f8a3 	bl	801cc36 <_ZN8touchgfx12TextProviderC1Ev>
 801aaf0:	6820      	ldr	r0, [r4, #0]
 801aaf2:	6803      	ldr	r3, [r0, #0]
 801aaf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aaf6:	4798      	blx	r3
 801aaf8:	4606      	mov	r6, r0
 801aafa:	6820      	ldr	r0, [r4, #0]
 801aafc:	6803      	ldr	r3, [r0, #0]
 801aafe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ab00:	4798      	blx	r3
 801ab02:	4633      	mov	r3, r6
 801ab04:	9000      	str	r0, [sp, #0]
 801ab06:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801ab08:	4651      	mov	r1, sl
 801ab0a:	4638      	mov	r0, r7
 801ab0c:	f002 f8e6 	bl	801ccdc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ab10:	6820      	ldr	r0, [r4, #0]
 801ab12:	7923      	ldrb	r3, [r4, #4]
 801ab14:	9308      	str	r3, [sp, #32]
 801ab16:	6803      	ldr	r3, [r0, #0]
 801ab18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ab1a:	4798      	blx	r3
 801ab1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ab20:	181e      	adds	r6, r3, r0
 801ab22:	42ae      	cmp	r6, r5
 801ab24:	dd06      	ble.n	801ab34 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801ab26:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801ab2a:	4282      	cmp	r2, r0
 801ab2c:	bfa4      	itt	ge
 801ab2e:	189d      	addge	r5, r3, r2
 801ab30:	fb95 f5f6 	sdivge	r5, r5, r6
 801ab34:	a832      	add	r0, sp, #200	; 0xc8
 801ab36:	f002 f87e 	bl	801cc36 <_ZN8touchgfx12TextProviderC1Ev>
 801ab3a:	7c23      	ldrb	r3, [r4, #16]
 801ab3c:	b17b      	cbz	r3, 801ab5e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801ab3e:	6820      	ldr	r0, [r4, #0]
 801ab40:	6803      	ldr	r3, [r0, #0]
 801ab42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ab44:	4798      	blx	r3
 801ab46:	4683      	mov	fp, r0
 801ab48:	6820      	ldr	r0, [r4, #0]
 801ab4a:	6803      	ldr	r3, [r0, #0]
 801ab4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ab4e:	4798      	blx	r3
 801ab50:	465b      	mov	r3, fp
 801ab52:	9000      	str	r0, [sp, #0]
 801ab54:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801ab56:	4651      	mov	r1, sl
 801ab58:	a832      	add	r0, sp, #200	; 0xc8
 801ab5a:	f002 f8bf 	bl	801ccdc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ab5e:	7be1      	ldrb	r1, [r4, #15]
 801ab60:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801ab64:	7963      	ldrb	r3, [r4, #5]
 801ab66:	1a52      	subs	r2, r2, r1
 801ab68:	7c21      	ldrb	r1, [r4, #16]
 801ab6a:	9101      	str	r1, [sp, #4]
 801ab6c:	6821      	ldr	r1, [r4, #0]
 801ab6e:	9100      	str	r1, [sp, #0]
 801ab70:	b292      	uxth	r2, r2
 801ab72:	a932      	add	r1, sp, #200	; 0xc8
 801ab74:	a811      	add	r0, sp, #68	; 0x44
 801ab76:	f7ff fc9f 	bl	801a4b8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801ab7a:	7c23      	ldrb	r3, [r4, #16]
 801ab7c:	b9bb      	cbnz	r3, 801abae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801ab7e:	fa1f fa86 	uxth.w	sl, r6
 801ab82:	2d00      	cmp	r5, #0
 801ab84:	dd45      	ble.n	801ac12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801ab86:	4638      	mov	r0, r7
 801ab88:	f002 fc68 	bl	801d45c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ab8c:	2800      	cmp	r0, #0
 801ab8e:	d03d      	beq.n	801ac0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801ab90:	280a      	cmp	r0, #10
 801ab92:	d1f6      	bne.n	801ab82 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801ab94:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ab98:	4453      	add	r3, sl
 801ab9a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801ab9e:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801aba2:	eba3 030a 	sub.w	r3, r3, sl
 801aba6:	3d01      	subs	r5, #1
 801aba8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801abac:	e7e9      	b.n	801ab82 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801abae:	0073      	lsls	r3, r6, #1
 801abb0:	9309      	str	r3, [sp, #36]	; 0x24
 801abb2:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801abb6:	fa1f fa86 	uxth.w	sl, r6
 801abba:	2d00      	cmp	r5, #0
 801abbc:	dd29      	ble.n	801ac12 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801abbe:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801abc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abc4:	428b      	cmp	r3, r1
 801abc6:	bfd4      	ite	le
 801abc8:	2100      	movle	r1, #0
 801abca:	2101      	movgt	r1, #1
 801abcc:	a811      	add	r0, sp, #68	; 0x44
 801abce:	f7ff fe8e 	bl	801a8ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801abd2:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801abd6:	3b01      	subs	r3, #1
 801abd8:	b29b      	uxth	r3, r3
 801abda:	455b      	cmp	r3, fp
 801abdc:	930b      	str	r3, [sp, #44]	; 0x2c
 801abde:	d005      	beq.n	801abec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801abe0:	7961      	ldrb	r1, [r4, #5]
 801abe2:	4638      	mov	r0, r7
 801abe4:	f7fb f854 	bl	8015c90 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801abe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801abea:	e7f4      	b.n	801abd6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801abec:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801abf0:	4453      	add	r3, sl
 801abf2:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801abf6:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801abfa:	eba3 030a 	sub.w	r3, r3, sl
 801abfe:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801ac02:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801ac06:	3d01      	subs	r5, #1
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d1d6      	bne.n	801abba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801ac0c:	b065      	add	sp, #404	; 0x194
 801ac0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac12:	0075      	lsls	r5, r6, #1
 801ac14:	f04f 0a00 	mov.w	sl, #0
 801ac18:	7c23      	ldrb	r3, [r4, #16]
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	d066      	beq.n	801acec <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801ac1e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801ac22:	428d      	cmp	r5, r1
 801ac24:	bfd4      	ite	le
 801ac26:	2100      	movle	r1, #0
 801ac28:	2101      	movgt	r1, #1
 801ac2a:	a811      	add	r0, sp, #68	; 0x44
 801ac2c:	f7ff fe5f 	bl	801a8ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801ac30:	9b08      	ldr	r3, [sp, #32]
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	d055      	beq.n	801ace2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801ac36:	f894 b010 	ldrb.w	fp, [r4, #16]
 801ac3a:	2264      	movs	r2, #100	; 0x64
 801ac3c:	4639      	mov	r1, r7
 801ac3e:	a84b      	add	r0, sp, #300	; 0x12c
 801ac40:	f00e ff60 	bl	8029b04 <memcpy>
 801ac44:	f1bb 0f00 	cmp.w	fp, #0
 801ac48:	d058      	beq.n	801acfc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801ac4a:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801ac4e:	7922      	ldrb	r2, [r4, #4]
 801ac50:	2a01      	cmp	r2, #1
 801ac52:	d13c      	bne.n	801acce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801ac54:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801ac58:	1ac0      	subs	r0, r0, r3
 801ac5a:	2302      	movs	r3, #2
 801ac5c:	fb90 f0f3 	sdiv	r0, r0, r3
 801ac60:	b200      	sxth	r0, r0
 801ac62:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801ac66:	4418      	add	r0, r3
 801ac68:	7c23      	ldrb	r3, [r4, #16]
 801ac6a:	b200      	sxth	r0, r0
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	d03a      	beq.n	801ace6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801ac70:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801ac74:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801ac78:	9000      	str	r0, [sp, #0]
 801ac7a:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801ac7e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801ac82:	980a      	ldr	r0, [sp, #40]	; 0x28
 801ac84:	e9cd a703 	strd	sl, r7, [sp, #12]
 801ac88:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801ac8c:	464a      	mov	r2, r9
 801ac8e:	2100      	movs	r1, #0
 801ac90:	f7ff fcbb 	bl	801a60a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801ac94:	2800      	cmp	r0, #0
 801ac96:	d1b9      	bne.n	801ac0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801ac98:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ac9c:	b2b2      	uxth	r2, r6
 801ac9e:	4611      	mov	r1, r2
 801aca0:	4413      	add	r3, r2
 801aca2:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801aca6:	1a52      	subs	r2, r2, r1
 801aca8:	7c21      	ldrb	r1, [r4, #16]
 801acaa:	b21b      	sxth	r3, r3
 801acac:	b212      	sxth	r2, r2
 801acae:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801acb2:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801acb6:	b109      	cbz	r1, 801acbc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 801acb8:	42b2      	cmp	r2, r6
 801acba:	dba7      	blt.n	801ac0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801acbc:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801acc0:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801acc4:	440a      	add	r2, r1
 801acc6:	b212      	sxth	r2, r2
 801acc8:	4293      	cmp	r3, r2
 801acca:	dda5      	ble.n	801ac18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 801accc:	e79e      	b.n	801ac0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801acce:	2a02      	cmp	r2, #2
 801acd0:	d105      	bne.n	801acde <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801acd2:	7be2      	ldrb	r2, [r4, #15]
 801acd4:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801acd8:	1a80      	subs	r0, r0, r2
 801acda:	1ac0      	subs	r0, r0, r3
 801acdc:	e7c0      	b.n	801ac60 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 801acde:	2000      	movs	r0, #0
 801ace0:	e7bf      	b.n	801ac62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801ace2:	7be0      	ldrb	r0, [r4, #15]
 801ace4:	e7bd      	b.n	801ac62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801ace6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801acea:	e7c3      	b.n	801ac74 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 801acec:	9b08      	ldr	r3, [sp, #32]
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d0f7      	beq.n	801ace2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801acf2:	2264      	movs	r2, #100	; 0x64
 801acf4:	4639      	mov	r1, r7
 801acf6:	a84b      	add	r0, sp, #300	; 0x12c
 801acf8:	f00e ff04 	bl	8029b04 <memcpy>
 801acfc:	2300      	movs	r3, #0
 801acfe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801ad02:	6821      	ldr	r1, [r4, #0]
 801ad04:	a84b      	add	r0, sp, #300	; 0x12c
 801ad06:	f7ff fc13 	bl	801a530 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801ad0a:	b203      	sxth	r3, r0
 801ad0c:	e79f      	b.n	801ac4e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

0801ad0e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801ad0e:	2b03      	cmp	r3, #3
 801ad10:	d818      	bhi.n	801ad44 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801ad12:	e8df f003 	tbb	[pc, r3]
 801ad16:	0602      	.short	0x0602
 801ad18:	130d      	.short	0x130d
 801ad1a:	f9b0 2000 	ldrsh.w	r2, [r0]
 801ad1e:	1850      	adds	r0, r2, r1
 801ad20:	4770      	bx	lr
 801ad22:	8803      	ldrh	r3, [r0, #0]
 801ad24:	8880      	ldrh	r0, [r0, #4]
 801ad26:	4418      	add	r0, r3
 801ad28:	b200      	sxth	r0, r0
 801ad2a:	1a80      	subs	r0, r0, r2
 801ad2c:	3801      	subs	r0, #1
 801ad2e:	4770      	bx	lr
 801ad30:	8803      	ldrh	r3, [r0, #0]
 801ad32:	8880      	ldrh	r0, [r0, #4]
 801ad34:	4418      	add	r0, r3
 801ad36:	b200      	sxth	r0, r0
 801ad38:	1a40      	subs	r0, r0, r1
 801ad3a:	e7f7      	b.n	801ad2c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801ad3c:	f9b0 0000 	ldrsh.w	r0, [r0]
 801ad40:	4410      	add	r0, r2
 801ad42:	4770      	bx	lr
 801ad44:	2000      	movs	r0, #0
 801ad46:	4770      	bx	lr

0801ad48 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801ad48:	2b03      	cmp	r3, #3
 801ad4a:	d817      	bhi.n	801ad7c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801ad4c:	e8df f003 	tbb	[pc, r3]
 801ad50:	10090602 	.word	0x10090602
 801ad54:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801ad58:	1850      	adds	r0, r2, r1
 801ad5a:	4770      	bx	lr
 801ad5c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801ad60:	e7fa      	b.n	801ad58 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801ad62:	8843      	ldrh	r3, [r0, #2]
 801ad64:	88c0      	ldrh	r0, [r0, #6]
 801ad66:	4418      	add	r0, r3
 801ad68:	b200      	sxth	r0, r0
 801ad6a:	1a80      	subs	r0, r0, r2
 801ad6c:	3801      	subs	r0, #1
 801ad6e:	4770      	bx	lr
 801ad70:	8843      	ldrh	r3, [r0, #2]
 801ad72:	88c0      	ldrh	r0, [r0, #6]
 801ad74:	4418      	add	r0, r3
 801ad76:	b200      	sxth	r0, r0
 801ad78:	1a40      	subs	r0, r0, r1
 801ad7a:	e7f7      	b.n	801ad6c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801ad7c:	2000      	movs	r0, #0
 801ad7e:	4770      	bx	lr

0801ad80 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801ad80:	4b01      	ldr	r3, [pc, #4]	; (801ad88 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801ad82:	2200      	movs	r2, #0
 801ad84:	601a      	str	r2, [r3, #0]
 801ad86:	4770      	bx	lr
 801ad88:	20008e38 	.word	0x20008e38

0801ad8c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801ad8c:	4603      	mov	r3, r0
 801ad8e:	b1c8      	cbz	r0, 801adc4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801ad90:	0c02      	lsrs	r2, r0, #16
 801ad92:	0412      	lsls	r2, r2, #16
 801ad94:	b9a2      	cbnz	r2, 801adc0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801ad96:	0403      	lsls	r3, r0, #16
 801ad98:	2010      	movs	r0, #16
 801ad9a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801ad9e:	bf04      	itt	eq
 801ada0:	021b      	lsleq	r3, r3, #8
 801ada2:	3008      	addeq	r0, #8
 801ada4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801ada8:	bf04      	itt	eq
 801adaa:	011b      	lsleq	r3, r3, #4
 801adac:	3004      	addeq	r0, #4
 801adae:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801adb2:	bf04      	itt	eq
 801adb4:	009b      	lsleq	r3, r3, #2
 801adb6:	3002      	addeq	r0, #2
 801adb8:	2b00      	cmp	r3, #0
 801adba:	db04      	blt.n	801adc6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801adbc:	3001      	adds	r0, #1
 801adbe:	4770      	bx	lr
 801adc0:	2000      	movs	r0, #0
 801adc2:	e7ea      	b.n	801ad9a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801adc4:	2020      	movs	r0, #32
 801adc6:	4770      	bx	lr

0801adc8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801adc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adcc:	b087      	sub	sp, #28
 801adce:	4681      	mov	r9, r0
 801add0:	4698      	mov	r8, r3
 801add2:	4610      	mov	r0, r2
 801add4:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801add8:	460d      	mov	r5, r1
 801adda:	b981      	cbnz	r1, 801adfe <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801addc:	b14b      	cbz	r3, 801adf2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801adde:	460b      	mov	r3, r1
 801ade0:	e9cd 4700 	strd	r4, r7, [sp]
 801ade4:	464a      	mov	r2, r9
 801ade6:	4641      	mov	r1, r8
 801ade8:	f7ff ffee 	bl	801adc8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801adec:	b007      	add	sp, #28
 801adee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adf2:	f04f 33ff 	mov.w	r3, #4294967295
 801adf6:	603b      	str	r3, [r7, #0]
 801adf8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801adfc:	e7f6      	b.n	801adec <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801adfe:	fa32 fa01 	lsrs.w	sl, r2, r1
 801ae02:	d107      	bne.n	801ae14 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801ae04:	fb09 f602 	mul.w	r6, r9, r2
 801ae08:	fbb6 f0f4 	udiv	r0, r6, r4
 801ae0c:	fb04 6610 	mls	r6, r4, r0, r6
 801ae10:	603e      	str	r6, [r7, #0]
 801ae12:	e7eb      	b.n	801adec <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801ae14:	2601      	movs	r6, #1
 801ae16:	408e      	lsls	r6, r1
 801ae18:	3e01      	subs	r6, #1
 801ae1a:	4016      	ands	r6, r2
 801ae1c:	fa09 fb01 	lsl.w	fp, r9, r1
 801ae20:	4630      	mov	r0, r6
 801ae22:	fbbb f3f4 	udiv	r3, fp, r4
 801ae26:	9302      	str	r3, [sp, #8]
 801ae28:	fb0a f303 	mul.w	r3, sl, r3
 801ae2c:	9303      	str	r3, [sp, #12]
 801ae2e:	f7ff ffad 	bl	801ad8c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ae32:	464a      	mov	r2, r9
 801ae34:	460b      	mov	r3, r1
 801ae36:	e9cd 4700 	strd	r4, r7, [sp]
 801ae3a:	4601      	mov	r1, r0
 801ae3c:	4630      	mov	r0, r6
 801ae3e:	f7ff ffc3 	bl	801adc8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ae42:	9b02      	ldr	r3, [sp, #8]
 801ae44:	fb04 bb13 	mls	fp, r4, r3, fp
 801ae48:	4606      	mov	r6, r0
 801ae4a:	4658      	mov	r0, fp
 801ae4c:	eb05 0108 	add.w	r1, r5, r8
 801ae50:	f7ff ff9c 	bl	801ad8c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801ae54:	ab05      	add	r3, sp, #20
 801ae56:	e9cd 4300 	strd	r4, r3, [sp]
 801ae5a:	465a      	mov	r2, fp
 801ae5c:	4603      	mov	r3, r0
 801ae5e:	4650      	mov	r0, sl
 801ae60:	f7ff ffb2 	bl	801adc8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801ae64:	6839      	ldr	r1, [r7, #0]
 801ae66:	9a05      	ldr	r2, [sp, #20]
 801ae68:	9b03      	ldr	r3, [sp, #12]
 801ae6a:	4411      	add	r1, r2
 801ae6c:	fbb1 f2f4 	udiv	r2, r1, r4
 801ae70:	18d3      	adds	r3, r2, r3
 801ae72:	441e      	add	r6, r3
 801ae74:	fb04 1412 	mls	r4, r4, r2, r1
 801ae78:	4430      	add	r0, r6
 801ae7a:	603c      	str	r4, [r7, #0]
 801ae7c:	e7b6      	b.n	801adec <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801ae7e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801ae7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ae82:	b085      	sub	sp, #20
 801ae84:	f1b0 0900 	subs.w	r9, r0, #0
 801ae88:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801ae8a:	461d      	mov	r5, r3
 801ae8c:	bfbf      	itttt	lt
 801ae8e:	6823      	ldrlt	r3, [r4, #0]
 801ae90:	425b      	neglt	r3, r3
 801ae92:	f1c9 0900 	rsblt	r9, r9, #0
 801ae96:	6023      	strlt	r3, [r4, #0]
 801ae98:	bfb4      	ite	lt
 801ae9a:	f04f 36ff 	movlt.w	r6, #4294967295
 801ae9e:	2601      	movge	r6, #1
 801aea0:	2a00      	cmp	r2, #0
 801aea2:	4617      	mov	r7, r2
 801aea4:	da04      	bge.n	801aeb0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801aea6:	6823      	ldr	r3, [r4, #0]
 801aea8:	425b      	negs	r3, r3
 801aeaa:	4257      	negs	r7, r2
 801aeac:	4276      	negs	r6, r6
 801aeae:	6023      	str	r3, [r4, #0]
 801aeb0:	2d00      	cmp	r5, #0
 801aeb2:	4638      	mov	r0, r7
 801aeb4:	bfba      	itte	lt
 801aeb6:	426d      	neglt	r5, r5
 801aeb8:	f04f 38ff 	movlt.w	r8, #4294967295
 801aebc:	f04f 0801 	movge.w	r8, #1
 801aec0:	f7ff ff64 	bl	801ad8c <_ZN8touchgfx16TouchCalibration4clzuEm>
 801aec4:	ab03      	add	r3, sp, #12
 801aec6:	e9cd 5300 	strd	r5, r3, [sp]
 801aeca:	463a      	mov	r2, r7
 801aecc:	4603      	mov	r3, r0
 801aece:	4648      	mov	r0, r9
 801aed0:	f7ff ff7a 	bl	801adc8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801aed4:	6823      	ldr	r3, [r4, #0]
 801aed6:	9a03      	ldr	r2, [sp, #12]
 801aed8:	4546      	cmp	r6, r8
 801aeda:	441a      	add	r2, r3
 801aedc:	fb92 f3f5 	sdiv	r3, r2, r5
 801aee0:	4418      	add	r0, r3
 801aee2:	bf18      	it	ne
 801aee4:	4240      	negne	r0, r0
 801aee6:	fb05 2313 	mls	r3, r5, r3, r2
 801aeea:	1c72      	adds	r2, r6, #1
 801aeec:	6023      	str	r3, [r4, #0]
 801aeee:	d105      	bne.n	801aefc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801aef0:	2b00      	cmp	r3, #0
 801aef2:	f1c3 0200 	rsb	r2, r3, #0
 801aef6:	db0b      	blt.n	801af10 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801aef8:	6022      	str	r2, [r4, #0]
 801aefa:	e006      	b.n	801af0a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801aefc:	2e01      	cmp	r6, #1
 801aefe:	d104      	bne.n	801af0a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801af00:	2b00      	cmp	r3, #0
 801af02:	da02      	bge.n	801af0a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801af04:	442b      	add	r3, r5
 801af06:	3801      	subs	r0, #1
 801af08:	6023      	str	r3, [r4, #0]
 801af0a:	b005      	add	sp, #20
 801af0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801af10:	3801      	subs	r0, #1
 801af12:	1b52      	subs	r2, r2, r5
 801af14:	e7f0      	b.n	801aef8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801af18 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801af18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801af1c:	4c1c      	ldr	r4, [pc, #112]	; (801af90 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801af1e:	6807      	ldr	r7, [r0, #0]
 801af20:	69a3      	ldr	r3, [r4, #24]
 801af22:	4605      	mov	r5, r0
 801af24:	b92b      	cbnz	r3, 801af32 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801af26:	6840      	ldr	r0, [r0, #4]
 801af28:	e9c5 7000 	strd	r7, r0, [r5]
 801af2c:	b004      	add	sp, #16
 801af2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af32:	68a2      	ldr	r2, [r4, #8]
 801af34:	6820      	ldr	r0, [r4, #0]
 801af36:	ae04      	add	r6, sp, #16
 801af38:	f04f 0802 	mov.w	r8, #2
 801af3c:	fb93 f1f8 	sdiv	r1, r3, r8
 801af40:	440a      	add	r2, r1
 801af42:	f846 2d04 	str.w	r2, [r6, #-4]!
 801af46:	69e1      	ldr	r1, [r4, #28]
 801af48:	9600      	str	r6, [sp, #0]
 801af4a:	463a      	mov	r2, r7
 801af4c:	f7ff ff97 	bl	801ae7e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801af50:	69a3      	ldr	r3, [r4, #24]
 801af52:	686a      	ldr	r2, [r5, #4]
 801af54:	6a21      	ldr	r1, [r4, #32]
 801af56:	9600      	str	r6, [sp, #0]
 801af58:	4607      	mov	r7, r0
 801af5a:	6860      	ldr	r0, [r4, #4]
 801af5c:	f7ff ff8f 	bl	801ae7e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801af60:	6962      	ldr	r2, [r4, #20]
 801af62:	69a3      	ldr	r3, [r4, #24]
 801af64:	fb93 f8f8 	sdiv	r8, r3, r8
 801af68:	4442      	add	r2, r8
 801af6a:	9203      	str	r2, [sp, #12]
 801af6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801af6e:	682a      	ldr	r2, [r5, #0]
 801af70:	9600      	str	r6, [sp, #0]
 801af72:	4407      	add	r7, r0
 801af74:	68e0      	ldr	r0, [r4, #12]
 801af76:	f7ff ff82 	bl	801ae7e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801af7a:	9600      	str	r6, [sp, #0]
 801af7c:	4680      	mov	r8, r0
 801af7e:	69a3      	ldr	r3, [r4, #24]
 801af80:	686a      	ldr	r2, [r5, #4]
 801af82:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801af84:	6920      	ldr	r0, [r4, #16]
 801af86:	f7ff ff7a 	bl	801ae7e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801af8a:	4440      	add	r0, r8
 801af8c:	e7cc      	b.n	801af28 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801af8e:	bf00      	nop
 801af90:	20008e3c 	.word	0x20008e3c

0801af94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801af94:	4b07      	ldr	r3, [pc, #28]	; (801afb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801af96:	781b      	ldrb	r3, [r3, #0]
 801af98:	2b01      	cmp	r3, #1
 801af9a:	d109      	bne.n	801afb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801af9c:	f9b1 3000 	ldrsh.w	r3, [r1]
 801afa0:	f9b0 2000 	ldrsh.w	r2, [r0]
 801afa4:	8003      	strh	r3, [r0, #0]
 801afa6:	4b04      	ldr	r3, [pc, #16]	; (801afb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801afa8:	881b      	ldrh	r3, [r3, #0]
 801afaa:	3b01      	subs	r3, #1
 801afac:	1a9b      	subs	r3, r3, r2
 801afae:	800b      	strh	r3, [r1, #0]
 801afb0:	4770      	bx	lr
 801afb2:	bf00      	nop
 801afb4:	20008e26 	.word	0x20008e26
 801afb8:	20008e22 	.word	0x20008e22

0801afbc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801afbc:	b510      	push	{r4, lr}
 801afbe:	4b07      	ldr	r3, [pc, #28]	; (801afdc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801afc0:	781b      	ldrb	r3, [r3, #0]
 801afc2:	2b01      	cmp	r3, #1
 801afc4:	d108      	bne.n	801afd8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801afc6:	4b06      	ldr	r3, [pc, #24]	; (801afe0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801afc8:	880c      	ldrh	r4, [r1, #0]
 801afca:	881b      	ldrh	r3, [r3, #0]
 801afcc:	f9b0 2000 	ldrsh.w	r2, [r0]
 801afd0:	3b01      	subs	r3, #1
 801afd2:	1b1b      	subs	r3, r3, r4
 801afd4:	8003      	strh	r3, [r0, #0]
 801afd6:	800a      	strh	r2, [r1, #0]
 801afd8:	bd10      	pop	{r4, pc}
 801afda:	bf00      	nop
 801afdc:	20008e26 	.word	0x20008e26
 801afe0:	20008e22 	.word	0x20008e22

0801afe4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801afe4:	b510      	push	{r4, lr}
 801afe6:	4b0a      	ldr	r3, [pc, #40]	; (801b010 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801afe8:	781b      	ldrb	r3, [r3, #0]
 801afea:	2b01      	cmp	r3, #1
 801afec:	d10e      	bne.n	801b00c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801afee:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801aff2:	8843      	ldrh	r3, [r0, #2]
 801aff4:	f9b0 4000 	ldrsh.w	r4, [r0]
 801aff8:	8044      	strh	r4, [r0, #2]
 801affa:	18ca      	adds	r2, r1, r3
 801affc:	4b05      	ldr	r3, [pc, #20]	; (801b014 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801affe:	881b      	ldrh	r3, [r3, #0]
 801b000:	1a9b      	subs	r3, r3, r2
 801b002:	8003      	strh	r3, [r0, #0]
 801b004:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b008:	80c3      	strh	r3, [r0, #6]
 801b00a:	8081      	strh	r1, [r0, #4]
 801b00c:	bd10      	pop	{r4, pc}
 801b00e:	bf00      	nop
 801b010:	20008e26 	.word	0x20008e26
 801b014:	20008e22 	.word	0x20008e22

0801b018 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801b018:	4b08      	ldr	r3, [pc, #32]	; (801b03c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801b01a:	781b      	ldrb	r3, [r3, #0]
 801b01c:	2b01      	cmp	r3, #1
 801b01e:	d10c      	bne.n	801b03a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801b020:	8803      	ldrh	r3, [r0, #0]
 801b022:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801b026:	8842      	ldrh	r2, [r0, #2]
 801b028:	8002      	strh	r2, [r0, #0]
 801b02a:	185a      	adds	r2, r3, r1
 801b02c:	4b04      	ldr	r3, [pc, #16]	; (801b040 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801b02e:	881b      	ldrh	r3, [r3, #0]
 801b030:	1a9b      	subs	r3, r3, r2
 801b032:	8043      	strh	r3, [r0, #2]
 801b034:	88c3      	ldrh	r3, [r0, #6]
 801b036:	8083      	strh	r3, [r0, #4]
 801b038:	80c1      	strh	r1, [r0, #6]
 801b03a:	4770      	bx	lr
 801b03c:	20008e26 	.word	0x20008e26
 801b040:	20008e22 	.word	0x20008e22

0801b044 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801b044:	b510      	push	{r4, lr}
 801b046:	4b07      	ldr	r3, [pc, #28]	; (801b064 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801b048:	781b      	ldrb	r3, [r3, #0]
 801b04a:	2b01      	cmp	r3, #1
 801b04c:	d108      	bne.n	801b060 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801b04e:	f9b1 3000 	ldrsh.w	r3, [r1]
 801b052:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b056:	8003      	strh	r3, [r0, #0]
 801b058:	8893      	ldrh	r3, [r2, #4]
 801b05a:	3b01      	subs	r3, #1
 801b05c:	1b1b      	subs	r3, r3, r4
 801b05e:	800b      	strh	r3, [r1, #0]
 801b060:	bd10      	pop	{r4, pc}
 801b062:	bf00      	nop
 801b064:	20008e26 	.word	0x20008e26

0801b068 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801b068:	b510      	push	{r4, lr}
 801b06a:	4b0a      	ldr	r3, [pc, #40]	; (801b094 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801b06c:	781b      	ldrb	r3, [r3, #0]
 801b06e:	2b01      	cmp	r3, #1
 801b070:	460a      	mov	r2, r1
 801b072:	d10d      	bne.n	801b090 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801b074:	8881      	ldrh	r1, [r0, #4]
 801b076:	8803      	ldrh	r3, [r0, #0]
 801b078:	440b      	add	r3, r1
 801b07a:	4601      	mov	r1, r0
 801b07c:	3b01      	subs	r3, #1
 801b07e:	f821 3b02 	strh.w	r3, [r1], #2
 801b082:	f7ff ffdf 	bl	801b044 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801b086:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b08a:	88c2      	ldrh	r2, [r0, #6]
 801b08c:	8082      	strh	r2, [r0, #4]
 801b08e:	80c3      	strh	r3, [r0, #6]
 801b090:	bd10      	pop	{r4, pc}
 801b092:	bf00      	nop
 801b094:	20008e26 	.word	0x20008e26

0801b098 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801b098:	b570      	push	{r4, r5, r6, lr}
 801b09a:	4c0b      	ldr	r4, [pc, #44]	; (801b0c8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801b09c:	2300      	movs	r3, #0
 801b09e:	4605      	mov	r5, r0
 801b0a0:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801b0a4:	6820      	ldr	r0, [r4, #0]
 801b0a6:	460e      	mov	r6, r1
 801b0a8:	b110      	cbz	r0, 801b0b0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 801b0aa:	6803      	ldr	r3, [r0, #0]
 801b0ac:	695b      	ldr	r3, [r3, #20]
 801b0ae:	4798      	blx	r3
 801b0b0:	6026      	str	r6, [r4, #0]
 801b0b2:	6833      	ldr	r3, [r6, #0]
 801b0b4:	4630      	mov	r0, r6
 801b0b6:	68db      	ldr	r3, [r3, #12]
 801b0b8:	4798      	blx	r3
 801b0ba:	682b      	ldr	r3, [r5, #0]
 801b0bc:	4628      	mov	r0, r5
 801b0be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b0c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b0c4:	4718      	bx	r3
 801b0c6:	bf00      	nop
 801b0c8:	20008e6c 	.word	0x20008e6c

0801b0cc <_ZN8touchgfx11Application13requestRedrawEv>:
 801b0cc:	4b06      	ldr	r3, [pc, #24]	; (801b0e8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801b0ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b0d2:	4b06      	ldr	r3, [pc, #24]	; (801b0ec <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801b0d4:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801b0d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b0dc:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801b0e0:	2100      	movs	r1, #0
 801b0e2:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801b0e6:	4770      	bx	lr
 801b0e8:	20008e22 	.word	0x20008e22
 801b0ec:	20008e24 	.word	0x20008e24

0801b0f0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801b0f0:	4b03      	ldr	r3, [pc, #12]	; (801b100 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801b0f2:	6818      	ldr	r0, [r3, #0]
 801b0f4:	b110      	cbz	r0, 801b0fc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801b0f6:	6803      	ldr	r3, [r0, #0]
 801b0f8:	699b      	ldr	r3, [r3, #24]
 801b0fa:	4718      	bx	r3
 801b0fc:	4770      	bx	lr
 801b0fe:	bf00      	nop
 801b100:	20008e6c 	.word	0x20008e6c

0801b104 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801b104:	4770      	bx	lr
	...

0801b108 <_ZN8touchgfx11Application4drawEv>:
 801b108:	b507      	push	{r0, r1, r2, lr}
 801b10a:	4b09      	ldr	r3, [pc, #36]	; (801b130 <_ZN8touchgfx11Application4drawEv+0x28>)
 801b10c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b110:	4b08      	ldr	r3, [pc, #32]	; (801b134 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801b112:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b116:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b11a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b11e:	6803      	ldr	r3, [r0, #0]
 801b120:	2100      	movs	r1, #0
 801b122:	9100      	str	r1, [sp, #0]
 801b124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b126:	4669      	mov	r1, sp
 801b128:	4798      	blx	r3
 801b12a:	b003      	add	sp, #12
 801b12c:	f85d fb04 	ldr.w	pc, [sp], #4
 801b130:	20008e22 	.word	0x20008e22
 801b134:	20008e24 	.word	0x20008e24

0801b138 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801b138:	4b03      	ldr	r3, [pc, #12]	; (801b148 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801b13a:	6818      	ldr	r0, [r3, #0]
 801b13c:	b110      	cbz	r0, 801b144 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801b13e:	6803      	ldr	r3, [r0, #0]
 801b140:	69db      	ldr	r3, [r3, #28]
 801b142:	4718      	bx	r3
 801b144:	4770      	bx	lr
 801b146:	bf00      	nop
 801b148:	20008e6c 	.word	0x20008e6c

0801b14c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801b14c:	4b03      	ldr	r3, [pc, #12]	; (801b15c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801b14e:	6818      	ldr	r0, [r3, #0]
 801b150:	b110      	cbz	r0, 801b158 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801b152:	6803      	ldr	r3, [r0, #0]
 801b154:	6a1b      	ldr	r3, [r3, #32]
 801b156:	4718      	bx	r3
 801b158:	4770      	bx	lr
 801b15a:	bf00      	nop
 801b15c:	20008e6c 	.word	0x20008e6c

0801b160 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801b160:	2300      	movs	r3, #0
 801b162:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801b166:	4770      	bx	lr

0801b168 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801b168:	4b03      	ldr	r3, [pc, #12]	; (801b178 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801b16a:	6818      	ldr	r0, [r3, #0]
 801b16c:	b110      	cbz	r0, 801b174 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801b16e:	6803      	ldr	r3, [r0, #0]
 801b170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b172:	4718      	bx	r3
 801b174:	4770      	bx	lr
 801b176:	bf00      	nop
 801b178:	20008e6c 	.word	0x20008e6c

0801b17c <_ZN8touchgfx11Application15handleTickEventEv>:
 801b17c:	b570      	push	{r4, r5, r6, lr}
 801b17e:	4d32      	ldr	r5, [pc, #200]	; (801b248 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 801b180:	4604      	mov	r4, r0
 801b182:	6828      	ldr	r0, [r5, #0]
 801b184:	b140      	cbz	r0, 801b198 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b186:	7a03      	ldrb	r3, [r0, #8]
 801b188:	b933      	cbnz	r3, 801b198 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801b18a:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801b18e:	6803      	ldr	r3, [r0, #0]
 801b190:	689b      	ldr	r3, [r3, #8]
 801b192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b196:	4718      	bx	r3
 801b198:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 801b19c:	b97b      	cbnz	r3, 801b1be <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b19e:	b170      	cbz	r0, 801b1be <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b1a0:	7a03      	ldrb	r3, [r0, #8]
 801b1a2:	b163      	cbz	r3, 801b1be <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801b1a4:	4b29      	ldr	r3, [pc, #164]	; (801b24c <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801b1a6:	6818      	ldr	r0, [r3, #0]
 801b1a8:	b110      	cbz	r0, 801b1b0 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801b1aa:	6803      	ldr	r3, [r0, #0]
 801b1ac:	691b      	ldr	r3, [r3, #16]
 801b1ae:	4798      	blx	r3
 801b1b0:	6828      	ldr	r0, [r5, #0]
 801b1b2:	6803      	ldr	r3, [r0, #0]
 801b1b4:	68db      	ldr	r3, [r3, #12]
 801b1b6:	4798      	blx	r3
 801b1b8:	2301      	movs	r3, #1
 801b1ba:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801b1be:	2500      	movs	r5, #0
 801b1c0:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801b1c4:	42a8      	cmp	r0, r5
 801b1c6:	dd0c      	ble.n	801b1e2 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801b1c8:	1963      	adds	r3, r4, r5
 801b1ca:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801b1ce:	b132      	cbz	r2, 801b1de <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801b1d0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801b1d4:	4413      	add	r3, r2
 801b1d6:	6858      	ldr	r0, [r3, #4]
 801b1d8:	6803      	ldr	r3, [r0, #0]
 801b1da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b1dc:	4798      	blx	r3
 801b1de:	3501      	adds	r5, #1
 801b1e0:	e7ee      	b.n	801b1c0 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801b1e2:	2300      	movs	r3, #0
 801b1e4:	461a      	mov	r2, r3
 801b1e6:	4298      	cmp	r0, r3
 801b1e8:	d015      	beq.n	801b216 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801b1ea:	18e1      	adds	r1, r4, r3
 801b1ec:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801b1f0:	b16d      	cbz	r5, 801b20e <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 801b1f2:	429a      	cmp	r2, r3
 801b1f4:	d00a      	beq.n	801b20c <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 801b1f6:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801b1fa:	4431      	add	r1, r6
 801b1fc:	684e      	ldr	r6, [r1, #4]
 801b1fe:	b291      	uxth	r1, r2
 801b200:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801b204:	604e      	str	r6, [r1, #4]
 801b206:	18a1      	adds	r1, r4, r2
 801b208:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801b20c:	3201      	adds	r2, #1
 801b20e:	3301      	adds	r3, #1
 801b210:	e7e9      	b.n	801b1e6 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801b212:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801b216:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 801b21a:	4295      	cmp	r5, r2
 801b21c:	dd0d      	ble.n	801b23a <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 801b21e:	1e6b      	subs	r3, r5, #1
 801b220:	b29b      	uxth	r3, r3
 801b222:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 801b226:	4618      	mov	r0, r3
 801b228:	3104      	adds	r1, #4
 801b22a:	4285      	cmp	r5, r0
 801b22c:	ddf1      	ble.n	801b212 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 801b22e:	f851 6f04 	ldr.w	r6, [r1, #4]!
 801b232:	f841 6c04 	str.w	r6, [r1, #-4]
 801b236:	3001      	adds	r0, #1
 801b238:	e7f7      	b.n	801b22a <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 801b23a:	4b04      	ldr	r3, [pc, #16]	; (801b24c <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801b23c:	6818      	ldr	r0, [r3, #0]
 801b23e:	b110      	cbz	r0, 801b246 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801b240:	6803      	ldr	r3, [r0, #0]
 801b242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b244:	e7a5      	b.n	801b192 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801b246:	bd70      	pop	{r4, r5, r6, pc}
 801b248:	20008e70 	.word	0x20008e70
 801b24c:	20008e6c 	.word	0x20008e6c

0801b250 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801b250:	b510      	push	{r4, lr}
 801b252:	f9b1 4000 	ldrsh.w	r4, [r1]
 801b256:	888a      	ldrh	r2, [r1, #4]
 801b258:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b25c:	4422      	add	r2, r4
 801b25e:	b212      	sxth	r2, r2
 801b260:	4293      	cmp	r3, r2
 801b262:	da15      	bge.n	801b290 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b264:	8882      	ldrh	r2, [r0, #4]
 801b266:	4413      	add	r3, r2
 801b268:	b21b      	sxth	r3, r3
 801b26a:	429c      	cmp	r4, r3
 801b26c:	da10      	bge.n	801b290 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b26e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801b272:	88c9      	ldrh	r1, [r1, #6]
 801b274:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801b278:	4419      	add	r1, r3
 801b27a:	b209      	sxth	r1, r1
 801b27c:	428a      	cmp	r2, r1
 801b27e:	da07      	bge.n	801b290 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801b280:	88c0      	ldrh	r0, [r0, #6]
 801b282:	4410      	add	r0, r2
 801b284:	b200      	sxth	r0, r0
 801b286:	4283      	cmp	r3, r0
 801b288:	bfac      	ite	ge
 801b28a:	2000      	movge	r0, #0
 801b28c:	2001      	movlt	r0, #1
 801b28e:	bd10      	pop	{r4, pc}
 801b290:	2000      	movs	r0, #0
 801b292:	e7fc      	b.n	801b28e <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801b294 <_ZN8touchgfx4Rect10restrictToEss>:
 801b294:	f9b0 3000 	ldrsh.w	r3, [r0]
 801b298:	2b00      	cmp	r3, #0
 801b29a:	b510      	push	{r4, lr}
 801b29c:	da04      	bge.n	801b2a8 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801b29e:	8884      	ldrh	r4, [r0, #4]
 801b2a0:	4423      	add	r3, r4
 801b2a2:	8083      	strh	r3, [r0, #4]
 801b2a4:	2300      	movs	r3, #0
 801b2a6:	8003      	strh	r3, [r0, #0]
 801b2a8:	f9b0 4000 	ldrsh.w	r4, [r0]
 801b2ac:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801b2b0:	1b09      	subs	r1, r1, r4
 801b2b2:	428b      	cmp	r3, r1
 801b2b4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801b2b8:	bfc8      	it	gt
 801b2ba:	8081      	strhgt	r1, [r0, #4]
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	da04      	bge.n	801b2ca <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801b2c0:	88c1      	ldrh	r1, [r0, #6]
 801b2c2:	440b      	add	r3, r1
 801b2c4:	80c3      	strh	r3, [r0, #6]
 801b2c6:	2300      	movs	r3, #0
 801b2c8:	8043      	strh	r3, [r0, #2]
 801b2ca:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801b2ce:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801b2d2:	1a52      	subs	r2, r2, r1
 801b2d4:	4293      	cmp	r3, r2
 801b2d6:	bfc8      	it	gt
 801b2d8:	80c2      	strhgt	r2, [r0, #6]
 801b2da:	bd10      	pop	{r4, pc}

0801b2dc <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801b2dc:	b510      	push	{r4, lr}
 801b2de:	4b10      	ldr	r3, [pc, #64]	; (801b320 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801b2e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b2e4:	4b0f      	ldr	r3, [pc, #60]	; (801b324 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801b2e6:	460c      	mov	r4, r1
 801b2e8:	4620      	mov	r0, r4
 801b2ea:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b2ee:	f7ff ffd1 	bl	801b294 <_ZN8touchgfx4Rect10restrictToEss>
 801b2f2:	4b0d      	ldr	r3, [pc, #52]	; (801b328 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801b2f4:	6818      	ldr	r0, [r3, #0]
 801b2f6:	b190      	cbz	r0, 801b31e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801b2f8:	6803      	ldr	r3, [r0, #0]
 801b2fa:	4621      	mov	r1, r4
 801b2fc:	689b      	ldr	r3, [r3, #8]
 801b2fe:	4798      	blx	r3
 801b300:	4b0a      	ldr	r3, [pc, #40]	; (801b32c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801b302:	6818      	ldr	r0, [r3, #0]
 801b304:	b118      	cbz	r0, 801b30e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801b306:	6803      	ldr	r3, [r0, #0]
 801b308:	4621      	mov	r1, r4
 801b30a:	689b      	ldr	r3, [r3, #8]
 801b30c:	4798      	blx	r3
 801b30e:	4b08      	ldr	r3, [pc, #32]	; (801b330 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801b310:	6818      	ldr	r0, [r3, #0]
 801b312:	6803      	ldr	r3, [r0, #0]
 801b314:	4621      	mov	r1, r4
 801b316:	69db      	ldr	r3, [r3, #28]
 801b318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b31c:	4718      	bx	r3
 801b31e:	bd10      	pop	{r4, pc}
 801b320:	20008e24 	.word	0x20008e24
 801b324:	20008e22 	.word	0x20008e22
 801b328:	20008e6c 	.word	0x20008e6c
 801b32c:	20008e68 	.word	0x20008e68
 801b330:	20008e30 	.word	0x20008e30

0801b334 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801b334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b336:	4606      	mov	r6, r0
 801b338:	4608      	mov	r0, r1
 801b33a:	460f      	mov	r7, r1
 801b33c:	f7fd f89b 	bl	8018476 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b340:	b9e8      	cbnz	r0, 801b37e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b342:	f9b7 5000 	ldrsh.w	r5, [r7]
 801b346:	f9b6 4000 	ldrsh.w	r4, [r6]
 801b34a:	42a5      	cmp	r5, r4
 801b34c:	db17      	blt.n	801b37e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b34e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801b352:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801b356:	429a      	cmp	r2, r3
 801b358:	db11      	blt.n	801b37e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b35a:	88b9      	ldrh	r1, [r7, #4]
 801b35c:	440d      	add	r5, r1
 801b35e:	88b1      	ldrh	r1, [r6, #4]
 801b360:	440c      	add	r4, r1
 801b362:	b22d      	sxth	r5, r5
 801b364:	b224      	sxth	r4, r4
 801b366:	42a5      	cmp	r5, r4
 801b368:	dc09      	bgt.n	801b37e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801b36a:	88f8      	ldrh	r0, [r7, #6]
 801b36c:	4410      	add	r0, r2
 801b36e:	88f2      	ldrh	r2, [r6, #6]
 801b370:	4413      	add	r3, r2
 801b372:	b200      	sxth	r0, r0
 801b374:	b21b      	sxth	r3, r3
 801b376:	4298      	cmp	r0, r3
 801b378:	bfcc      	ite	gt
 801b37a:	2000      	movgt	r0, #0
 801b37c:	2001      	movle	r0, #1
 801b37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b380 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801b380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b382:	4604      	mov	r4, r0
 801b384:	4608      	mov	r0, r1
 801b386:	460d      	mov	r5, r1
 801b388:	f7fd f875 	bl	8018476 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b38c:	b978      	cbnz	r0, 801b3ae <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801b38e:	4620      	mov	r0, r4
 801b390:	f7fd f871 	bl	8018476 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b394:	f9b5 6000 	ldrsh.w	r6, [r5]
 801b398:	b150      	cbz	r0, 801b3b0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801b39a:	8026      	strh	r6, [r4, #0]
 801b39c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801b3a0:	8063      	strh	r3, [r4, #2]
 801b3a2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801b3a6:	80a3      	strh	r3, [r4, #4]
 801b3a8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801b3ac:	80e3      	strh	r3, [r4, #6]
 801b3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3b0:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b3b4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801b3b8:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801b3bc:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801b3c0:	88ed      	ldrh	r5, [r5, #6]
 801b3c2:	42b1      	cmp	r1, r6
 801b3c4:	460f      	mov	r7, r1
 801b3c6:	bfa8      	it	ge
 801b3c8:	4637      	movge	r7, r6
 801b3ca:	4293      	cmp	r3, r2
 801b3cc:	4618      	mov	r0, r3
 801b3ce:	4466      	add	r6, ip
 801b3d0:	bfa8      	it	ge
 801b3d2:	4610      	movge	r0, r2
 801b3d4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801b3d8:	8027      	strh	r7, [r4, #0]
 801b3da:	442a      	add	r2, r5
 801b3dc:	88e5      	ldrh	r5, [r4, #6]
 801b3de:	8060      	strh	r0, [r4, #2]
 801b3e0:	4461      	add	r1, ip
 801b3e2:	442b      	add	r3, r5
 801b3e4:	b236      	sxth	r6, r6
 801b3e6:	b209      	sxth	r1, r1
 801b3e8:	b212      	sxth	r2, r2
 801b3ea:	b21b      	sxth	r3, r3
 801b3ec:	428e      	cmp	r6, r1
 801b3ee:	bfac      	ite	ge
 801b3f0:	ebc7 0106 	rsbge	r1, r7, r6
 801b3f4:	ebc7 0101 	rsblt	r1, r7, r1
 801b3f8:	429a      	cmp	r2, r3
 801b3fa:	bfac      	ite	ge
 801b3fc:	ebc0 0202 	rsbge	r2, r0, r2
 801b400:	ebc0 0203 	rsblt	r2, r0, r3
 801b404:	80a1      	strh	r1, [r4, #4]
 801b406:	80e2      	strh	r2, [r4, #6]
 801b408:	e7d1      	b.n	801b3ae <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801b40c <_ZN8touchgfx11Application11getInstanceEv>:
 801b40c:	4b01      	ldr	r3, [pc, #4]	; (801b414 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801b40e:	6818      	ldr	r0, [r3, #0]
 801b410:	4770      	bx	lr
 801b412:	bf00      	nop
 801b414:	20008e7c 	.word	0x20008e7c

0801b418 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801b418:	2300      	movs	r3, #0
 801b41a:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801b41e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801b422:	30a8      	adds	r0, #168	; 0xa8
 801b424:	f802 3b01 	strb.w	r3, [r2], #1
 801b428:	4282      	cmp	r2, r0
 801b42a:	d1fb      	bne.n	801b424 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801b42c:	4770      	bx	lr

0801b42e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801b42e:	4603      	mov	r3, r0
 801b430:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801b434:	2200      	movs	r2, #0
 801b436:	801a      	strh	r2, [r3, #0]
 801b438:	805a      	strh	r2, [r3, #2]
 801b43a:	809a      	strh	r2, [r3, #4]
 801b43c:	80da      	strh	r2, [r3, #6]
 801b43e:	3308      	adds	r3, #8
 801b440:	428b      	cmp	r3, r1
 801b442:	d1f8      	bne.n	801b436 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801b444:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801b448:	4770      	bx	lr
	...

0801b44c <_ZN8touchgfx11ApplicationC1Ev>:
 801b44c:	b570      	push	{r4, r5, r6, lr}
 801b44e:	4b19      	ldr	r3, [pc, #100]	; (801b4b4 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801b450:	6003      	str	r3, [r0, #0]
 801b452:	2500      	movs	r5, #0
 801b454:	4604      	mov	r4, r0
 801b456:	f8a0 5084 	strh.w	r5, [r0, #132]	; 0x84
 801b45a:	30a8      	adds	r0, #168	; 0xa8
 801b45c:	f7ff ffe7 	bl	801b42e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b460:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801b464:	f7ff ffe3 	bl	801b42e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b468:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801b46c:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801b470:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801b474:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801b478:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801b47c:	490e      	ldr	r1, [pc, #56]	; (801b4b8 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801b47e:	480f      	ldr	r0, [pc, #60]	; (801b4bc <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801b480:	4e0f      	ldr	r6, [pc, #60]	; (801b4c0 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801b482:	f00e f895 	bl	80295b0 <CRC_Lock>
 801b486:	4b0f      	ldr	r3, [pc, #60]	; (801b4c4 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801b488:	b158      	cbz	r0, 801b4a2 <_ZN8touchgfx11ApplicationC1Ev+0x56>
 801b48a:	801d      	strh	r5, [r3, #0]
 801b48c:	4a0e      	ldr	r2, [pc, #56]	; (801b4c8 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801b48e:	2300      	movs	r3, #0
 801b490:	6013      	str	r3, [r2, #0]
 801b492:	4a0e      	ldr	r2, [pc, #56]	; (801b4cc <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801b494:	6033      	str	r3, [r6, #0]
 801b496:	4620      	mov	r0, r4
 801b498:	6013      	str	r3, [r2, #0]
 801b49a:	f7ff ffbd 	bl	801b418 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801b49e:	4620      	mov	r0, r4
 801b4a0:	bd70      	pop	{r4, r5, r6, pc}
 801b4a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b4a6:	2002      	movs	r0, #2
 801b4a8:	801a      	strh	r2, [r3, #0]
 801b4aa:	6030      	str	r0, [r6, #0]
 801b4ac:	f001 fa16 	bl	801c8dc <_ZN8touchgfx6Screen4drawEv>
 801b4b0:	e7ec      	b.n	801b48c <_ZN8touchgfx11ApplicationC1Ev+0x40>
 801b4b2:	bf00      	nop
 801b4b4:	0802cb48 	.word	0x0802cb48
 801b4b8:	b5e8b5cd 	.word	0xb5e8b5cd
 801b4bc:	f407a5c2 	.word	0xf407a5c2
 801b4c0:	20008e6c 	.word	0x20008e6c
 801b4c4:	20000020 	.word	0x20000020
 801b4c8:	20008e7c 	.word	0x20008e7c
 801b4cc:	20008e70 	.word	0x20008e70

0801b4d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801b4d0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801b4d4:	3b01      	subs	r3, #1
 801b4d6:	b29b      	uxth	r3, r3
 801b4d8:	428b      	cmp	r3, r1
 801b4da:	b510      	push	{r4, lr}
 801b4dc:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801b4e0:	d908      	bls.n	801b4f4 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801b4e2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801b4e6:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801b4ea:	681a      	ldr	r2, [r3, #0]
 801b4ec:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801b4f0:	685a      	ldr	r2, [r3, #4]
 801b4f2:	6062      	str	r2, [r4, #4]
 801b4f4:	bd10      	pop	{r4, pc}
	...

0801b4f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801b4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4fc:	4b94      	ldr	r3, [pc, #592]	; (801b750 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801b4fe:	b08f      	sub	sp, #60	; 0x3c
 801b500:	ac0a      	add	r4, sp, #40	; 0x28
 801b502:	e884 0006 	stmia.w	r4, {r1, r2}
 801b506:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b50a:	4b92      	ldr	r3, [pc, #584]	; (801b754 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 801b50c:	4683      	mov	fp, r0
 801b50e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b512:	4620      	mov	r0, r4
 801b514:	f7ff febe 	bl	801b294 <_ZN8touchgfx4Rect10restrictToEss>
 801b518:	4620      	mov	r0, r4
 801b51a:	f7fc ffac 	bl	8018476 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b51e:	2800      	cmp	r0, #0
 801b520:	d16a      	bne.n	801b5f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b522:	9403      	str	r4, [sp, #12]
 801b524:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801b528:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801b52c:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801b530:	2400      	movs	r4, #0
 801b532:	9301      	str	r3, [sp, #4]
 801b534:	36a0      	adds	r6, #160	; 0xa0
 801b536:	42a5      	cmp	r5, r4
 801b538:	d00d      	beq.n	801b556 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 801b53a:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801b53e:	9803      	ldr	r0, [sp, #12]
 801b540:	f7ff fef8 	bl	801b334 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b544:	b128      	cbz	r0, 801b552 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801b546:	1e69      	subs	r1, r5, #1
 801b548:	1b09      	subs	r1, r1, r4
 801b54a:	b289      	uxth	r1, r1
 801b54c:	9801      	ldr	r0, [sp, #4]
 801b54e:	f7ff ffbf 	bl	801b4d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b552:	3401      	adds	r4, #1
 801b554:	e7ef      	b.n	801b536 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 801b556:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801b55a:	9704      	str	r7, [sp, #16]
 801b55c:	1e7b      	subs	r3, r7, #1
 801b55e:	9302      	str	r3, [sp, #8]
 801b560:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801b564:	2400      	movs	r4, #0
 801b566:	4655      	mov	r5, sl
 801b568:	9705      	str	r7, [sp, #20]
 801b56a:	4626      	mov	r6, r4
 801b56c:	9b05      	ldr	r3, [sp, #20]
 801b56e:	2b00      	cmp	r3, #0
 801b570:	d078      	beq.n	801b664 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 801b572:	9903      	ldr	r1, [sp, #12]
 801b574:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801b578:	f7ff fe6a 	bl	801b250 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b57c:	b360      	cbz	r0, 801b5d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801b57e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801b582:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801b586:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 801b58a:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801b58e:	45e6      	cmp	lr, ip
 801b590:	db35      	blt.n	801b5fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b592:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801b596:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801b59a:	4472      	add	r2, lr
 801b59c:	4463      	add	r3, ip
 801b59e:	b212      	sxth	r2, r2
 801b5a0:	b21b      	sxth	r3, r3
 801b5a2:	429a      	cmp	r2, r3
 801b5a4:	dc2b      	bgt.n	801b5fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b5a6:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801b5aa:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801b5ae:	fa1f f288 	uxth.w	r2, r8
 801b5b2:	4413      	add	r3, r2
 801b5b4:	b29b      	uxth	r3, r3
 801b5b6:	45c1      	cmp	r9, r8
 801b5b8:	fa0f fe83 	sxth.w	lr, r3
 801b5bc:	fa1f fc89 	uxth.w	ip, r9
 801b5c0:	db0f      	blt.n	801b5e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801b5c2:	eba3 030c 	sub.w	r3, r3, ip
 801b5c6:	1ac9      	subs	r1, r1, r3
 801b5c8:	b209      	sxth	r1, r1
 801b5ca:	2900      	cmp	r1, #0
 801b5cc:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b5d0:	dd12      	ble.n	801b5f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b5d2:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801b5d6:	4604      	mov	r4, r0
 801b5d8:	9b05      	ldr	r3, [sp, #20]
 801b5da:	3b01      	subs	r3, #1
 801b5dc:	9305      	str	r3, [sp, #20]
 801b5de:	3d08      	subs	r5, #8
 801b5e0:	e7c4      	b.n	801b56c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 801b5e2:	4461      	add	r1, ip
 801b5e4:	b209      	sxth	r1, r1
 801b5e6:	4571      	cmp	r1, lr
 801b5e8:	dc3a      	bgt.n	801b660 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801b5ea:	eba2 020c 	sub.w	r2, r2, ip
 801b5ee:	b212      	sxth	r2, r2
 801b5f0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801b5f4:	2a00      	cmp	r2, #0
 801b5f6:	dcee      	bgt.n	801b5d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801b5f8:	b00f      	add	sp, #60	; 0x3c
 801b5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5fe:	45c1      	cmp	r9, r8
 801b600:	db2e      	blt.n	801b660 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801b602:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801b606:	4499      	add	r9, r3
 801b608:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801b60c:	4498      	add	r8, r3
 801b60e:	fa0f f989 	sxth.w	r9, r9
 801b612:	fa0f f888 	sxth.w	r8, r8
 801b616:	45c1      	cmp	r9, r8
 801b618:	dc22      	bgt.n	801b660 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801b61a:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801b61e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801b622:	fa1f f28c 	uxth.w	r2, ip
 801b626:	4413      	add	r3, r2
 801b628:	b29b      	uxth	r3, r3
 801b62a:	45e6      	cmp	lr, ip
 801b62c:	fa1f f88e 	uxth.w	r8, lr
 801b630:	fa0f f983 	sxth.w	r9, r3
 801b634:	db0a      	blt.n	801b64c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 801b636:	eba3 0308 	sub.w	r3, r3, r8
 801b63a:	1ac9      	subs	r1, r1, r3
 801b63c:	b209      	sxth	r1, r1
 801b63e:	2900      	cmp	r1, #0
 801b640:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801b644:	ddd8      	ble.n	801b5f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b646:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801b64a:	e7c4      	b.n	801b5d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801b64c:	4441      	add	r1, r8
 801b64e:	b209      	sxth	r1, r1
 801b650:	4549      	cmp	r1, r9
 801b652:	dc05      	bgt.n	801b660 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801b654:	eba2 0208 	sub.w	r2, r2, r8
 801b658:	b212      	sxth	r2, r2
 801b65a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801b65e:	e7c9      	b.n	801b5f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801b660:	4606      	mov	r6, r0
 801b662:	e7b9      	b.n	801b5d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801b664:	2c00      	cmp	r4, #0
 801b666:	f47f af7d 	bne.w	801b564 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 801b66a:	2e00      	cmp	r6, #0
 801b66c:	f000 81e1 	beq.w	801ba32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801b670:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801b674:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801b678:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801b67c:	b2b9      	uxth	r1, r7
 801b67e:	9105      	str	r1, [sp, #20]
 801b680:	9805      	ldr	r0, [sp, #20]
 801b682:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801b686:	4401      	add	r1, r0
 801b688:	b2b3      	uxth	r3, r6
 801b68a:	b289      	uxth	r1, r1
 801b68c:	441a      	add	r2, r3
 801b68e:	9106      	str	r1, [sp, #24]
 801b690:	b292      	uxth	r2, r2
 801b692:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 801b696:	fa0f f882 	sxth.w	r8, r2
 801b69a:	4655      	mov	r5, sl
 801b69c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801b6a0:	9b04      	ldr	r3, [sp, #16]
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d058      	beq.n	801b758 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 801b6a6:	9903      	ldr	r1, [sp, #12]
 801b6a8:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801b6ac:	f7ff fdd0 	bl	801b250 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b6b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b6b4:	b1d8      	cbz	r0, 801b6ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801b6b6:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801b6ba:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801b6be:	4576      	cmp	r6, lr
 801b6c0:	dc26      	bgt.n	801b710 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801b6c2:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801b6c6:	44f4      	add	ip, lr
 801b6c8:	fa0f fc8c 	sxth.w	ip, ip
 801b6cc:	45e0      	cmp	r8, ip
 801b6ce:	db1f      	blt.n	801b710 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801b6d0:	428f      	cmp	r7, r1
 801b6d2:	fa1f fc81 	uxth.w	ip, r1
 801b6d6:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801b6da:	dc0f      	bgt.n	801b6fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 801b6dc:	9806      	ldr	r0, [sp, #24]
 801b6de:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801b6e2:	eba0 0c0c 	sub.w	ip, r0, ip
 801b6e6:	eba1 010c 	sub.w	r1, r1, ip
 801b6ea:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801b6ee:	4620      	mov	r0, r4
 801b6f0:	9904      	ldr	r1, [sp, #16]
 801b6f2:	3901      	subs	r1, #1
 801b6f4:	9104      	str	r1, [sp, #16]
 801b6f6:	3d08      	subs	r5, #8
 801b6f8:	4604      	mov	r4, r0
 801b6fa:	e7cf      	b.n	801b69c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 801b6fc:	4461      	add	r1, ip
 801b6fe:	b209      	sxth	r1, r1
 801b700:	4549      	cmp	r1, r9
 801b702:	dcf5      	bgt.n	801b6f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801b704:	9905      	ldr	r1, [sp, #20]
 801b706:	eba1 0c0c 	sub.w	ip, r1, ip
 801b70a:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801b70e:	e7ee      	b.n	801b6ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801b710:	428f      	cmp	r7, r1
 801b712:	dced      	bgt.n	801b6f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801b714:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801b718:	4461      	add	r1, ip
 801b71a:	b209      	sxth	r1, r1
 801b71c:	4589      	cmp	r9, r1
 801b71e:	dbe7      	blt.n	801b6f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801b720:	4576      	cmp	r6, lr
 801b722:	fa1f fc8e 	uxth.w	ip, lr
 801b726:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801b72a:	dc08      	bgt.n	801b73e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801b72c:	eba2 0c0c 	sub.w	ip, r2, ip
 801b730:	eba1 010c 	sub.w	r1, r1, ip
 801b734:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801b738:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801b73c:	e7d7      	b.n	801b6ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801b73e:	4461      	add	r1, ip
 801b740:	b209      	sxth	r1, r1
 801b742:	4588      	cmp	r8, r1
 801b744:	dbd4      	blt.n	801b6f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801b746:	eba3 0c0c 	sub.w	ip, r3, ip
 801b74a:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801b74e:	e7ce      	b.n	801b6ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801b750:	20008e24 	.word	0x20008e24
 801b754:	20008e22 	.word	0x20008e22
 801b758:	2c00      	cmp	r4, #0
 801b75a:	f000 816a 	beq.w	801ba32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801b75e:	9b02      	ldr	r3, [sp, #8]
 801b760:	3301      	adds	r3, #1
 801b762:	f000 8166 	beq.w	801ba32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801b766:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801b76a:	4621      	mov	r1, r4
 801b76c:	9803      	ldr	r0, [sp, #12]
 801b76e:	f7ff fde1 	bl	801b334 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b772:	b120      	cbz	r0, 801b77e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 801b774:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801b778:	9801      	ldr	r0, [sp, #4]
 801b77a:	f7ff fea9 	bl	801b4d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b77e:	9903      	ldr	r1, [sp, #12]
 801b780:	4620      	mov	r0, r4
 801b782:	f7ff fd65 	bl	801b250 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b786:	2800      	cmp	r0, #0
 801b788:	f000 809b 	beq.w	801b8c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801b78c:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 801b790:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 801b794:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801b798:	9309      	str	r3, [sp, #36]	; 0x24
 801b79a:	b281      	uxth	r1, r0
 801b79c:	eb01 0c03 	add.w	ip, r1, r3
 801b7a0:	fa1f f98c 	uxth.w	r9, ip
 801b7a4:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801b7a8:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801b7ac:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 801b7b0:	b2ab      	uxth	r3, r5
 801b7b2:	eb03 040c 	add.w	r4, r3, ip
 801b7b6:	b2a4      	uxth	r4, r4
 801b7b8:	9405      	str	r4, [sp, #20]
 801b7ba:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801b7be:	9404      	str	r4, [sp, #16]
 801b7c0:	4285      	cmp	r5, r0
 801b7c2:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 801b7c6:	f340 809a 	ble.w	801b8fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 801b7ca:	1a5b      	subs	r3, r3, r1
 801b7cc:	b29b      	uxth	r3, r3
 801b7ce:	4596      	cmp	lr, r2
 801b7d0:	fa0f f589 	sxth.w	r5, r9
 801b7d4:	b21e      	sxth	r6, r3
 801b7d6:	dd2e      	ble.n	801b836 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 801b7d8:	9f02      	ldr	r7, [sp, #8]
 801b7da:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801b7de:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801b7e2:	9f04      	ldr	r7, [sp, #16]
 801b7e4:	1b7f      	subs	r7, r7, r5
 801b7e6:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 801b7ea:	fa1f fe8e 	uxth.w	lr, lr
 801b7ee:	b292      	uxth	r2, r2
 801b7f0:	ebae 0102 	sub.w	r1, lr, r2
 801b7f4:	4486      	add	lr, r0
 801b7f6:	442a      	add	r2, r5
 801b7f8:	b289      	uxth	r1, r1
 801b7fa:	fa0f fe8e 	sxth.w	lr, lr
 801b7fe:	b212      	sxth	r2, r2
 801b800:	b20c      	sxth	r4, r1
 801b802:	ebae 0202 	sub.w	r2, lr, r2
 801b806:	4367      	muls	r7, r4
 801b808:	4372      	muls	r2, r6
 801b80a:	4297      	cmp	r7, r2
 801b80c:	db09      	blt.n	801b822 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 801b80e:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 801b812:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801b816:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801b81a:	449c      	add	ip, r3
 801b81c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801b820:	e680      	b.n	801b524 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b822:	4401      	add	r1, r0
 801b824:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801b828:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 801b82c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b830:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801b834:	e676      	b.n	801b524 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b836:	9f04      	ldr	r7, [sp, #16]
 801b838:	42bd      	cmp	r5, r7
 801b83a:	da27      	bge.n	801b88c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 801b83c:	9902      	ldr	r1, [sp, #8]
 801b83e:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801b842:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 801b846:	eb04 010e 	add.w	r1, r4, lr
 801b84a:	fa1f f881 	uxth.w	r8, r1
 801b84e:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 801b852:	4411      	add	r1, r2
 801b854:	eba1 0108 	sub.w	r1, r1, r8
 801b858:	b289      	uxth	r1, r1
 801b85a:	fa0f f988 	sxth.w	r9, r8
 801b85e:	eba2 020e 	sub.w	r2, r2, lr
 801b862:	fa0f f881 	sxth.w	r8, r1
 801b866:	1b7f      	subs	r7, r7, r5
 801b868:	4372      	muls	r2, r6
 801b86a:	fb08 f707 	mul.w	r7, r8, r7
 801b86e:	42ba      	cmp	r2, r7
 801b870:	dc06      	bgt.n	801b880 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801b872:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 801b876:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 801b87a:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 801b87e:	e7ca      	b.n	801b816 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801b880:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 801b884:	4421      	add	r1, r4
 801b886:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b88a:	e64b      	b.n	801b524 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b88c:	9d05      	ldr	r5, [sp, #20]
 801b88e:	eba9 0505 	sub.w	r5, r9, r5
 801b892:	b2ad      	uxth	r5, r5
 801b894:	2c06      	cmp	r4, #6
 801b896:	fa0f fe85 	sxth.w	lr, r5
 801b89a:	d818      	bhi.n	801b8ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 801b89c:	9b04      	ldr	r3, [sp, #16]
 801b89e:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801b8a2:	1c63      	adds	r3, r4, #1
 801b8a4:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 801b8a8:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 801b8ac:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801b8b0:	9b01      	ldr	r3, [sp, #4]
 801b8b2:	9d01      	ldr	r5, [sp, #4]
 801b8b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b8b8:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 801b8bc:	805a      	strh	r2, [r3, #2]
 801b8be:	809e      	strh	r6, [r3, #4]
 801b8c0:	80d9      	strh	r1, [r3, #6]
 801b8c2:	9b02      	ldr	r3, [sp, #8]
 801b8c4:	3b01      	subs	r3, #1
 801b8c6:	9302      	str	r3, [sp, #8]
 801b8c8:	f1aa 0a08 	sub.w	sl, sl, #8
 801b8cc:	e747      	b.n	801b75e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 801b8ce:	9a02      	ldr	r2, [sp, #8]
 801b8d0:	45b6      	cmp	lr, r6
 801b8d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b8d6:	db0d      	blt.n	801b8f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 801b8d8:	449c      	add	ip, r3
 801b8da:	fa1f fc8c 	uxth.w	ip, ip
 801b8de:	445a      	add	r2, fp
 801b8e0:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801b8e4:	448c      	add	ip, r1
 801b8e6:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 801b8ea:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 801b8ee:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 801b8f2:	e617      	b.n	801b524 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b8f4:	445a      	add	r2, fp
 801b8f6:	44ac      	add	ip, r5
 801b8f8:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 801b8fc:	e78e      	b.n	801b81c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801b8fe:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801b902:	fa1f f18e 	uxth.w	r1, lr
 801b906:	eb01 0806 	add.w	r8, r1, r6
 801b90a:	b293      	uxth	r3, r2
 801b90c:	fa1f f888 	uxth.w	r8, r8
 801b910:	9306      	str	r3, [sp, #24]
 801b912:	fa0f f388 	sxth.w	r3, r8
 801b916:	9307      	str	r3, [sp, #28]
 801b918:	9f06      	ldr	r7, [sp, #24]
 801b91a:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 801b91e:	443b      	add	r3, r7
 801b920:	b29b      	uxth	r3, r3
 801b922:	4596      	cmp	lr, r2
 801b924:	9308      	str	r3, [sp, #32]
 801b926:	da25      	bge.n	801b974 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 801b928:	9905      	ldr	r1, [sp, #20]
 801b92a:	eba3 0308 	sub.w	r3, r3, r8
 801b92e:	eba9 0401 	sub.w	r4, r9, r1
 801b932:	b2a4      	uxth	r4, r4
 801b934:	b29b      	uxth	r3, r3
 801b936:	fa0f f984 	sxth.w	r9, r4
 801b93a:	b219      	sxth	r1, r3
 801b93c:	eba2 020e 	sub.w	r2, r2, lr
 801b940:	1b40      	subs	r0, r0, r5
 801b942:	fb09 f202 	mul.w	r2, r9, r2
 801b946:	4348      	muls	r0, r1
 801b948:	4282      	cmp	r2, r0
 801b94a:	9a02      	ldr	r2, [sp, #8]
 801b94c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b950:	445a      	add	r2, fp
 801b952:	dc06      	bgt.n	801b962 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801b954:	9b07      	ldr	r3, [sp, #28]
 801b956:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 801b95a:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 801b95e:	44a4      	add	ip, r4
 801b960:	e75c      	b.n	801b81c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801b962:	9904      	ldr	r1, [sp, #16]
 801b964:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 801b968:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 801b96c:	4433      	add	r3, r6
 801b96e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b972:	e5d7      	b.n	801b524 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b974:	9f06      	ldr	r7, [sp, #24]
 801b976:	9b04      	ldr	r3, [sp, #16]
 801b978:	1bc9      	subs	r1, r1, r7
 801b97a:	fa0f f789 	sxth.w	r7, r9
 801b97e:	b289      	uxth	r1, r1
 801b980:	429f      	cmp	r7, r3
 801b982:	fa0f fe81 	sxth.w	lr, r1
 801b986:	dd22      	ble.n	801b9ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 801b988:	9a05      	ldr	r2, [sp, #20]
 801b98a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b98e:	1b40      	subs	r0, r0, r5
 801b990:	eba9 0202 	sub.w	r2, r9, r2
 801b994:	9d07      	ldr	r5, [sp, #28]
 801b996:	b292      	uxth	r2, r2
 801b998:	eba5 0a03 	sub.w	sl, r5, r3
 801b99c:	b214      	sxth	r4, r2
 801b99e:	9b02      	ldr	r3, [sp, #8]
 801b9a0:	fb0e f000 	mul.w	r0, lr, r0
 801b9a4:	fb04 fa0a 	mul.w	sl, r4, sl
 801b9a8:	00db      	lsls	r3, r3, #3
 801b9aa:	4550      	cmp	r0, sl
 801b9ac:	445b      	add	r3, fp
 801b9ae:	db03      	blt.n	801b9b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 801b9b0:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 801b9b4:	4494      	add	ip, r2
 801b9b6:	e731      	b.n	801b81c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801b9b8:	9a04      	ldr	r2, [sp, #16]
 801b9ba:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801b9be:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 801b9c2:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801b9c6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801b9ca:	4431      	add	r1, r6
 801b9cc:	e75b      	b.n	801b886 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 801b9ce:	9b08      	ldr	r3, [sp, #32]
 801b9d0:	eba3 0308 	sub.w	r3, r3, r8
 801b9d4:	b29b      	uxth	r3, r3
 801b9d6:	2c06      	cmp	r4, #6
 801b9d8:	b21d      	sxth	r5, r3
 801b9da:	d813      	bhi.n	801ba04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 801b9dc:	9b07      	ldr	r3, [sp, #28]
 801b9de:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801b9e2:	1c63      	adds	r3, r4, #1
 801b9e4:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 801b9e8:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801b9ec:	9b01      	ldr	r3, [sp, #4]
 801b9ee:	9901      	ldr	r1, [sp, #4]
 801b9f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b9f4:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 801b9f8:	805a      	strh	r2, [r3, #2]
 801b9fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b9fc:	809a      	strh	r2, [r3, #4]
 801b9fe:	f8a3 e006 	strh.w	lr, [r3, #6]
 801ba02:	e75e      	b.n	801b8c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801ba04:	9802      	ldr	r0, [sp, #8]
 801ba06:	4575      	cmp	r5, lr
 801ba08:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801ba0c:	db0d      	blt.n	801ba2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 801ba0e:	4431      	add	r1, r6
 801ba10:	9b06      	ldr	r3, [sp, #24]
 801ba12:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801ba16:	b289      	uxth	r1, r1
 801ba18:	4458      	add	r0, fp
 801ba1a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801ba1e:	4419      	add	r1, r3
 801ba20:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 801ba24:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 801ba28:	e57c      	b.n	801b524 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801ba2a:	4458      	add	r0, fp
 801ba2c:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 801ba30:	e79c      	b.n	801b96c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 801ba32:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 801ba36:	2e07      	cmp	r6, #7
 801ba38:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801ba3c:	d812      	bhi.n	801ba64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 801ba3e:	1c75      	adds	r5, r6, #1
 801ba40:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 801ba44:	9d01      	ldr	r5, [sp, #4]
 801ba46:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801ba4a:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801ba4e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801ba52:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801ba56:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801ba5a:	442c      	add	r4, r5
 801ba5c:	8061      	strh	r1, [r4, #2]
 801ba5e:	80a2      	strh	r2, [r4, #4]
 801ba60:	80e3      	strh	r3, [r4, #6]
 801ba62:	e5c9      	b.n	801b5f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801ba64:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801ba68:	3e01      	subs	r6, #1
 801ba6a:	445c      	add	r4, fp
 801ba6c:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801ba70:	f04f 37ff 	mov.w	r7, #4294967295
 801ba74:	2500      	movs	r5, #0
 801ba76:	9305      	str	r3, [sp, #20]
 801ba78:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 801ba7c:	9302      	str	r3, [sp, #8]
 801ba7e:	1e72      	subs	r2, r6, #1
 801ba80:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 801ba84:	9304      	str	r3, [sp, #16]
 801ba86:	4691      	mov	r9, r2
 801ba88:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 801ba8c:	f1b9 3fff 	cmp.w	r9, #4294967295
 801ba90:	bf14      	ite	ne
 801ba92:	9905      	ldrne	r1, [sp, #20]
 801ba94:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801ba98:	6818      	ldr	r0, [r3, #0]
 801ba9a:	9207      	str	r2, [sp, #28]
 801ba9c:	bf18      	it	ne
 801ba9e:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801baa2:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801baa6:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801baaa:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801baae:	9306      	str	r3, [sp, #24]
 801bab0:	fb18 f801 	smulbb	r8, r8, r1
 801bab4:	6859      	ldr	r1, [r3, #4]
 801bab6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801baba:	4671      	mov	r1, lr
 801babc:	a80c      	add	r0, sp, #48	; 0x30
 801babe:	f7ff fc5f 	bl	801b380 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bac2:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801bac6:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801baca:	9b04      	ldr	r3, [sp, #16]
 801bacc:	9a02      	ldr	r2, [sp, #8]
 801bace:	fb10 f001 	smulbb	r0, r0, r1
 801bad2:	fb02 8803 	mla	r8, r2, r3, r8
 801bad6:	eba0 0108 	sub.w	r1, r0, r8
 801bada:	f04f 0c08 	mov.w	ip, #8
 801bade:	fb90 f0fc 	sdiv	r0, r0, ip
 801bae2:	4288      	cmp	r0, r1
 801bae4:	dc20      	bgt.n	801bb28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x630>
 801bae6:	4551      	cmp	r1, sl
 801bae8:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801baec:	da03      	bge.n	801baf6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801baee:	b1d9      	cbz	r1, 801bb28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x630>
 801baf0:	468a      	mov	sl, r1
 801baf2:	464f      	mov	r7, r9
 801baf4:	4635      	mov	r5, r6
 801baf6:	f109 39ff 	add.w	r9, r9, #4294967295
 801bafa:	f119 0f02 	cmn.w	r9, #2
 801bafe:	d1c5      	bne.n	801ba8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801bb00:	4616      	mov	r6, r2
 801bb02:	3201      	adds	r2, #1
 801bb04:	f1a4 0408 	sub.w	r4, r4, #8
 801bb08:	d1b6      	bne.n	801ba78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 801bb0a:	9b01      	ldr	r3, [sp, #4]
 801bb0c:	b2ac      	uxth	r4, r5
 801bb0e:	00ed      	lsls	r5, r5, #3
 801bb10:	1958      	adds	r0, r3, r5
 801bb12:	1c7b      	adds	r3, r7, #1
 801bb14:	d10b      	bne.n	801bb2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x636>
 801bb16:	4601      	mov	r1, r0
 801bb18:	9803      	ldr	r0, [sp, #12]
 801bb1a:	f7ff fc31 	bl	801b380 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bb1e:	4621      	mov	r1, r4
 801bb20:	9801      	ldr	r0, [sp, #4]
 801bb22:	f7ff fcd5 	bl	801b4d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bb26:	e4fd      	b.n	801b524 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801bb28:	464f      	mov	r7, r9
 801bb2a:	4635      	mov	r5, r6
 801bb2c:	e7ed      	b.n	801bb0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x612>
 801bb2e:	9b01      	ldr	r3, [sp, #4]
 801bb30:	00ff      	lsls	r7, r7, #3
 801bb32:	19d9      	adds	r1, r3, r7
 801bb34:	f7ff fc24 	bl	801b380 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801bb38:	9b03      	ldr	r3, [sp, #12]
 801bb3a:	cb03      	ldmia	r3!, {r0, r1}
 801bb3c:	445f      	add	r7, fp
 801bb3e:	445d      	add	r5, fp
 801bb40:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 801bb44:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 801bb48:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 801bb4c:	9b03      	ldr	r3, [sp, #12]
 801bb4e:	6869      	ldr	r1, [r5, #4]
 801bb50:	c303      	stmia	r3!, {r0, r1}
 801bb52:	e7e4      	b.n	801bb1e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>

0801bb54 <_ZN8touchgfx11Application10invalidateEv>:
 801bb54:	4b09      	ldr	r3, [pc, #36]	; (801bb7c <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801bb56:	f9b3 2000 	ldrsh.w	r2, [r3]
 801bb5a:	4b09      	ldr	r3, [pc, #36]	; (801bb80 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801bb5c:	b082      	sub	sp, #8
 801bb5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bb62:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bb66:	2100      	movs	r1, #0
 801bb68:	9100      	str	r1, [sp, #0]
 801bb6a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801bb6e:	ab02      	add	r3, sp, #8
 801bb70:	e913 0006 	ldmdb	r3, {r1, r2}
 801bb74:	b002      	add	sp, #8
 801bb76:	f7ff bcbf 	b.w	801b4f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bb7a:	bf00      	nop
 801bb7c:	20008e22 	.word	0x20008e22
 801bb80:	20008e24 	.word	0x20008e24

0801bb84 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801bb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb88:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801bb8c:	b09b      	sub	sp, #108	; 0x6c
 801bb8e:	4604      	mov	r4, r0
 801bb90:	4630      	mov	r0, r6
 801bb92:	f7fc fc70 	bl	8018476 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bb96:	4605      	mov	r5, r0
 801bb98:	b940      	cbnz	r0, 801bbac <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801bb9a:	e896 0006 	ldmia.w	r6, {r1, r2}
 801bb9e:	4620      	mov	r0, r4
 801bba0:	f7ff fcaa 	bl	801b4f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bba4:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801bba8:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801bbac:	4bc9      	ldr	r3, [pc, #804]	; (801bed4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801bbae:	681b      	ldr	r3, [r3, #0]
 801bbb0:	2b00      	cmp	r3, #0
 801bbb2:	d03e      	beq.n	801bc32 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801bbb4:	4dc8      	ldr	r5, [pc, #800]	; (801bed8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801bbb6:	4628      	mov	r0, r5
 801bbb8:	f7fc fc5d 	bl	8018476 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bbbc:	4606      	mov	r6, r0
 801bbbe:	2800      	cmp	r0, #0
 801bbc0:	d137      	bne.n	801bc32 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801bbc2:	4628      	mov	r0, r5
 801bbc4:	f7ff fa0e 	bl	801afe4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801bbc8:	6829      	ldr	r1, [r5, #0]
 801bbca:	686a      	ldr	r2, [r5, #4]
 801bbcc:	4620      	mov	r0, r4
 801bbce:	f7ff fc93 	bl	801b4f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bbd2:	802e      	strh	r6, [r5, #0]
 801bbd4:	806e      	strh	r6, [r5, #2]
 801bbd6:	80ae      	strh	r6, [r5, #4]
 801bbd8:	80ee      	strh	r6, [r5, #6]
 801bbda:	ae09      	add	r6, sp, #36	; 0x24
 801bbdc:	4630      	mov	r0, r6
 801bbde:	f7ff fc26 	bl	801b42e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801bbe2:	4abe      	ldr	r2, [pc, #760]	; (801bedc <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801bbe4:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801bbe8:	8815      	ldrh	r5, [r2, #0]
 801bbea:	9202      	str	r2, [sp, #8]
 801bbec:	462b      	mov	r3, r5
 801bbee:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801bbf2:	429f      	cmp	r7, r3
 801bbf4:	d924      	bls.n	801bc40 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801bbf6:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801bbfa:	2907      	cmp	r1, #7
 801bbfc:	d816      	bhi.n	801bc2c <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801bbfe:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801bc02:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801bc06:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801bc0a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801bc0e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801bc12:	1c4a      	adds	r2, r1, #1
 801bc14:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801bc18:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801bc1c:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801bc20:	f8a2 9002 	strh.w	r9, [r2, #2]
 801bc24:	f8a2 e004 	strh.w	lr, [r2, #4]
 801bc28:	f8a2 c006 	strh.w	ip, [r2, #6]
 801bc2c:	3301      	adds	r3, #1
 801bc2e:	b29b      	uxth	r3, r3
 801bc30:	e7df      	b.n	801bbf2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801bc32:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d1cf      	bne.n	801bbda <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801bc3a:	b01b      	add	sp, #108	; 0x6c
 801bc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc40:	462f      	mov	r7, r5
 801bc42:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801bc46:	42bb      	cmp	r3, r7
 801bc48:	d90b      	bls.n	801bc62 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801bc4a:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801bc4e:	4620      	mov	r0, r4
 801bc50:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801bc54:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801bc58:	3701      	adds	r7, #1
 801bc5a:	f7ff fc4d 	bl	801b4f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bc5e:	b2bf      	uxth	r7, r7
 801bc60:	e7ef      	b.n	801bc42 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801bc62:	4a9f      	ldr	r2, [pc, #636]	; (801bee0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801bc64:	6813      	ldr	r3, [r2, #0]
 801bc66:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801bc6a:	2b01      	cmp	r3, #1
 801bc6c:	4690      	mov	r8, r2
 801bc6e:	f040 80e6 	bne.w	801be3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 801bc72:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801bc76:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801bc7a:	4629      	mov	r1, r5
 801bc7c:	33aa      	adds	r3, #170	; 0xaa
 801bc7e:	2500      	movs	r5, #0
 801bc80:	428f      	cmp	r7, r1
 801bc82:	f103 0308 	add.w	r3, r3, #8
 801bc86:	dd0a      	ble.n	801bc9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801bc88:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801bc8c:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801bc90:	4402      	add	r2, r0
 801bc92:	b212      	sxth	r2, r2
 801bc94:	4295      	cmp	r5, r2
 801bc96:	bfb8      	it	lt
 801bc98:	4615      	movlt	r5, r2
 801bc9a:	3101      	adds	r1, #1
 801bc9c:	e7f0      	b.n	801bc80 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801bc9e:	4b91      	ldr	r3, [pc, #580]	; (801bee4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801bca0:	f8df b23c 	ldr.w	fp, [pc, #572]	; 801bee0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 801bca4:	881b      	ldrh	r3, [r3, #0]
 801bca6:	2b0f      	cmp	r3, #15
 801bca8:	bf88      	it	hi
 801bcaa:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801bcae:	f04f 0300 	mov.w	r3, #0
 801bcb2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801bcb6:	bf98      	it	ls
 801bcb8:	f04f 0a01 	movls.w	sl, #1
 801bcbc:	46d8      	mov	r8, fp
 801bcbe:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801bcc2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801bcc6:	4438      	add	r0, r7
 801bcc8:	b207      	sxth	r7, r0
 801bcca:	f8db 0000 	ldr.w	r0, [fp]
 801bcce:	42bd      	cmp	r5, r7
 801bcd0:	6803      	ldr	r3, [r0, #0]
 801bcd2:	f340 8084 	ble.w	801bdde <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801bcd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801bcda:	4798      	blx	r3
 801bcdc:	eb07 030a 	add.w	r3, r7, sl
 801bce0:	4298      	cmp	r0, r3
 801bce2:	da07      	bge.n	801bcf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 801bce4:	4285      	cmp	r5, r0
 801bce6:	dd05      	ble.n	801bcf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 801bce8:	4287      	cmp	r7, r0
 801bcea:	dd6d      	ble.n	801bdc8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801bcec:	2f00      	cmp	r7, #0
 801bcee:	dd6b      	ble.n	801bdc8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801bcf0:	4628      	mov	r0, r5
 801bcf2:	e004      	b.n	801bcfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 801bcf4:	4287      	cmp	r7, r0
 801bcf6:	dcfb      	bgt.n	801bcf0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801bcf8:	42a8      	cmp	r0, r5
 801bcfa:	bfa8      	it	ge
 801bcfc:	4628      	movge	r0, r5
 801bcfe:	4b7a      	ldr	r3, [pc, #488]	; (801bee8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801bd00:	f8ad 7016 	strh.w	r7, [sp, #22]
 801bd04:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bd08:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bd0c:	9b02      	ldr	r3, [sp, #8]
 801bd0e:	1bc0      	subs	r0, r0, r7
 801bd10:	2200      	movs	r2, #0
 801bd12:	881f      	ldrh	r7, [r3, #0]
 801bd14:	f8ad 2014 	strh.w	r2, [sp, #20]
 801bd18:	f8ad 001a 	strh.w	r0, [sp, #26]
 801bd1c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801bd20:	42bb      	cmp	r3, r7
 801bd22:	d9cc      	bls.n	801bcbe <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 801bd24:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801bd28:	ab07      	add	r3, sp, #28
 801bd2a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801bd2e:	6851      	ldr	r1, [r2, #4]
 801bd30:	c303      	stmia	r3!, {r0, r1}
 801bd32:	a905      	add	r1, sp, #20
 801bd34:	a807      	add	r0, sp, #28
 801bd36:	f7ff fa8b 	bl	801b250 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801bd3a:	2800      	cmp	r0, #0
 801bd3c:	d04c      	beq.n	801bdd8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 801bd3e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801bd42:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801bd46:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801bd4a:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801bd4e:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801bd52:	9303      	str	r3, [sp, #12]
 801bd54:	4686      	mov	lr, r0
 801bd56:	4290      	cmp	r0, r2
 801bd58:	4448      	add	r0, r9
 801bd5a:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801bd5e:	bfb8      	it	lt
 801bd60:	4696      	movlt	lr, r2
 801bd62:	444a      	add	r2, r9
 801bd64:	4299      	cmp	r1, r3
 801bd66:	b280      	uxth	r0, r0
 801bd68:	b292      	uxth	r2, r2
 801bd6a:	468c      	mov	ip, r1
 801bd6c:	fa0f f982 	sxth.w	r9, r2
 801bd70:	bfb8      	it	lt
 801bd72:	469c      	movlt	ip, r3
 801bd74:	b203      	sxth	r3, r0
 801bd76:	454b      	cmp	r3, r9
 801bd78:	bfb8      	it	lt
 801bd7a:	4602      	movlt	r2, r0
 801bd7c:	eba2 020e 	sub.w	r2, r2, lr
 801bd80:	f8ad 2020 	strh.w	r2, [sp, #32]
 801bd84:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801bd88:	9b03      	ldr	r3, [sp, #12]
 801bd8a:	f8ad e01c 	strh.w	lr, [sp, #28]
 801bd8e:	4411      	add	r1, r2
 801bd90:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801bd94:	f8ad c01e 	strh.w	ip, [sp, #30]
 801bd98:	4413      	add	r3, r2
 801bd9a:	b289      	uxth	r1, r1
 801bd9c:	b29b      	uxth	r3, r3
 801bd9e:	b208      	sxth	r0, r1
 801bda0:	b21a      	sxth	r2, r3
 801bda2:	4290      	cmp	r0, r2
 801bda4:	bfb8      	it	lt
 801bda6:	460b      	movlt	r3, r1
 801bda8:	eba3 030c 	sub.w	r3, r3, ip
 801bdac:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801bdb0:	a807      	add	r0, sp, #28
 801bdb2:	f7fc fb60 	bl	8018476 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bdb6:	b920      	cbnz	r0, 801bdc2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 801bdb8:	6823      	ldr	r3, [r4, #0]
 801bdba:	a907      	add	r1, sp, #28
 801bdbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bdbe:	4620      	mov	r0, r4
 801bdc0:	4798      	blx	r3
 801bdc2:	3701      	adds	r7, #1
 801bdc4:	b2bf      	uxth	r7, r7
 801bdc6:	e7a9      	b.n	801bd1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 801bdc8:	f8d8 0000 	ldr.w	r0, [r8]
 801bdcc:	6803      	ldr	r3, [r0, #0]
 801bdce:	2101      	movs	r1, #1
 801bdd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801bdd4:	4798      	blx	r3
 801bdd6:	e772      	b.n	801bcbe <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 801bdd8:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801bddc:	e7e8      	b.n	801bdb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 801bdde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bde0:	4798      	blx	r3
 801bde2:	4b42      	ldr	r3, [pc, #264]	; (801beec <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801bde4:	781b      	ldrb	r3, [r3, #0]
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	f43f af27 	beq.w	801bc3a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801bdec:	2300      	movs	r3, #0
 801bdee:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801bdf2:	9b02      	ldr	r3, [sp, #8]
 801bdf4:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801bdf8:	881b      	ldrh	r3, [r3, #0]
 801bdfa:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801bdfe:	429d      	cmp	r5, r3
 801be00:	f67f af1b 	bls.w	801bc3a <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801be04:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 801be08:	2907      	cmp	r1, #7
 801be0a:	d815      	bhi.n	801be38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 801be0c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801be10:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801be14:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801be18:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801be1c:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801be20:	1c4a      	adds	r2, r1, #1
 801be22:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 801be26:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801be2a:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801be2e:	f8a2 e002 	strh.w	lr, [r2, #2]
 801be32:	f8a2 c004 	strh.w	ip, [r2, #4]
 801be36:	80d7      	strh	r7, [r2, #6]
 801be38:	3301      	adds	r3, #1
 801be3a:	b29b      	uxth	r3, r3
 801be3c:	e7df      	b.n	801bdfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 801be3e:	2b02      	cmp	r3, #2
 801be40:	f040 8136 	bne.w	801c0b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 801be44:	4b2a      	ldr	r3, [pc, #168]	; (801bef0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 801be46:	781b      	ldrb	r3, [r3, #0]
 801be48:	2b01      	cmp	r3, #1
 801be4a:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801be4e:	f000 809c 	beq.w	801bf8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801be52:	9b02      	ldr	r3, [sp, #8]
 801be54:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 801be58:	f8b3 b000 	ldrh.w	fp, [r3]
 801be5c:	f10b 0b01 	add.w	fp, fp, #1
 801be60:	fa1f fb8b 	uxth.w	fp, fp
 801be64:	2a00      	cmp	r2, #0
 801be66:	d0bc      	beq.n	801bde2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801be68:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801be6c:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801be70:	441d      	add	r5, r3
 801be72:	b22d      	sxth	r5, r5
 801be74:	4659      	mov	r1, fp
 801be76:	f04f 0800 	mov.w	r8, #0
 801be7a:	b28b      	uxth	r3, r1
 801be7c:	429a      	cmp	r2, r3
 801be7e:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801be82:	f240 80c1 	bls.w	801c008 <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 801be86:	4427      	add	r7, r4
 801be88:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801be8c:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 801be90:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 801be94:	4563      	cmp	r3, ip
 801be96:	4608      	mov	r0, r1
 801be98:	f340 80a3 	ble.w	801bfe2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 801be9c:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 801bea0:	4465      	add	r5, ip
 801bea2:	b22d      	sxth	r5, r5
 801bea4:	429d      	cmp	r5, r3
 801bea6:	bfa8      	it	ge
 801bea8:	461d      	movge	r5, r3
 801beaa:	3101      	adds	r1, #1
 801beac:	4680      	mov	r8, r0
 801beae:	e7e4      	b.n	801be7a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 801beb0:	d10b      	bne.n	801beca <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 801beb2:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801beb6:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801beba:	458c      	cmp	ip, r1
 801bebc:	bfb4      	ite	lt
 801bebe:	469c      	movlt	ip, r3
 801bec0:	46bc      	movge	ip, r7
 801bec2:	4572      	cmp	r2, lr
 801bec4:	bfb8      	it	lt
 801bec6:	4672      	movlt	r2, lr
 801bec8:	e088      	b.n	801bfdc <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801beca:	428a      	cmp	r2, r1
 801becc:	bfb8      	it	lt
 801bece:	460a      	movlt	r2, r1
 801bed0:	46bc      	mov	ip, r7
 801bed2:	e083      	b.n	801bfdc <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801bed4:	20008e68 	.word	0x20008e68
 801bed8:	20008e74 	.word	0x20008e74
 801bedc:	20000020 	.word	0x20000020
 801bee0:	20008e30 	.word	0x20008e30
 801bee4:	20008e24 	.word	0x20008e24
 801bee8:	20008e22 	.word	0x20008e22
 801beec:	20008e2c 	.word	0x20008e2c
 801bef0:	20008e26 	.word	0x20008e26
 801bef4:	1961      	adds	r1, r4, r5
 801bef6:	ab07      	add	r3, sp, #28
 801bef8:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801befc:	6849      	ldr	r1, [r1, #4]
 801befe:	c303      	stmia	r3!, {r0, r1}
 801bf00:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801bf04:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801bf08:	2b13      	cmp	r3, #19
 801bf0a:	bfd8      	it	le
 801bf0c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801bf10:	f8ad 201c 	strh.w	r2, [sp, #28]
 801bf14:	440b      	add	r3, r1
 801bf16:	1a9b      	subs	r3, r3, r2
 801bf18:	a807      	add	r0, sp, #28
 801bf1a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801bf1e:	f7ff f87b 	bl	801b018 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bf22:	a807      	add	r0, sp, #28
 801bf24:	f7fc faa7 	bl	8018476 <_ZNK8touchgfx4Rect7isEmptyEv>
 801bf28:	bb78      	cbnz	r0, 801bf8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801bf2a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801bf2e:	f8d8 0000 	ldr.w	r0, [r8]
 801bf32:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801bf36:	f8d0 e000 	ldr.w	lr, [r0]
 801bf3a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801bf3e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801bf42:	f1bc 0f14 	cmp.w	ip, #20
 801bf46:	bfa8      	it	ge
 801bf48:	f04f 0c14 	movge.w	ip, #20
 801bf4c:	fa1f fc8c 	uxth.w	ip, ip
 801bf50:	f8cd c000 	str.w	ip, [sp]
 801bf54:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801bf58:	47d0      	blx	sl
 801bf5a:	4682      	mov	sl, r0
 801bf5c:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801bf60:	a807      	add	r0, sp, #28
 801bf62:	f7ff f83f 	bl	801afe4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801bf66:	6823      	ldr	r3, [r4, #0]
 801bf68:	4425      	add	r5, r4
 801bf6a:	4620      	mov	r0, r4
 801bf6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf6e:	a907      	add	r1, sp, #28
 801bf70:	4798      	blx	r3
 801bf72:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801bf76:	eba0 000a 	sub.w	r0, r0, sl
 801bf7a:	b200      	sxth	r0, r0
 801bf7c:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801bf80:	b918      	cbnz	r0, 801bf8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801bf82:	b2b9      	uxth	r1, r7
 801bf84:	4648      	mov	r0, r9
 801bf86:	f7ff faa3 	bl	801b4d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bf8a:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801bf8e:	f1bb 0f00 	cmp.w	fp, #0
 801bf92:	f43f af26 	beq.w	801bde2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801bf96:	9b02      	ldr	r3, [sp, #8]
 801bf98:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801bf9c:	881b      	ldrh	r3, [r3, #0]
 801bf9e:	3301      	adds	r3, #1
 801bfa0:	b29b      	uxth	r3, r3
 801bfa2:	2700      	movs	r7, #0
 801bfa4:	b299      	uxth	r1, r3
 801bfa6:	458b      	cmp	fp, r1
 801bfa8:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 801bfac:	d9a2      	bls.n	801bef4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 801bfae:	4425      	add	r5, r4
 801bfb0:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801bfb4:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801bfb8:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801bfbc:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801bfc0:	4408      	add	r0, r1
 801bfc2:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801bfc6:	4471      	add	r1, lr
 801bfc8:	b200      	sxth	r0, r0
 801bfca:	b209      	sxth	r1, r1
 801bfcc:	4288      	cmp	r0, r1
 801bfce:	469c      	mov	ip, r3
 801bfd0:	f6bf af6e 	bge.w	801beb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 801bfd4:	4586      	cmp	lr, r0
 801bfd6:	4672      	mov	r2, lr
 801bfd8:	bfb8      	it	lt
 801bfda:	4602      	movlt	r2, r0
 801bfdc:	3301      	adds	r3, #1
 801bfde:	4667      	mov	r7, ip
 801bfe0:	e7e0      	b.n	801bfa4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 801bfe2:	d10c      	bne.n	801bffe <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 801bfe4:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 801bfe8:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 801bfec:	4287      	cmp	r7, r0
 801bfee:	bfb4      	ite	lt
 801bff0:	4608      	movlt	r0, r1
 801bff2:	4640      	movge	r0, r8
 801bff4:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 801bff8:	443b      	add	r3, r7
 801bffa:	b21b      	sxth	r3, r3
 801bffc:	e752      	b.n	801bea4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801bffe:	4565      	cmp	r5, ip
 801c000:	bfa8      	it	ge
 801c002:	4665      	movge	r5, ip
 801c004:	4640      	mov	r0, r8
 801c006:	e750      	b.n	801beaa <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 801c008:	eb09 0007 	add.w	r0, r9, r7
 801c00c:	4427      	add	r7, r4
 801c00e:	9203      	str	r2, [sp, #12]
 801c010:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 801c014:	f1ba 0f13 	cmp.w	sl, #19
 801c018:	bfde      	ittt	le
 801c01a:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 801c01e:	4455      	addle	r5, sl
 801c020:	b22d      	sxthle	r5, r5
 801c022:	f7fc fa28 	bl	8018476 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c026:	9a03      	ldr	r2, [sp, #12]
 801c028:	2800      	cmp	r0, #0
 801c02a:	f47f af1b 	bne.w	801be64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 801c02e:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 801c032:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c036:	482a      	ldr	r0, [pc, #168]	; (801c0e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 801c038:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 801c03c:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 801c040:	6800      	ldr	r0, [r0, #0]
 801c042:	f8ad 101c 	strh.w	r1, [sp, #28]
 801c046:	1aad      	subs	r5, r5, r2
 801c048:	2d14      	cmp	r5, #20
 801c04a:	f8ad 201e 	strh.w	r2, [sp, #30]
 801c04e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801c052:	bfa8      	it	ge
 801c054:	2514      	movge	r5, #20
 801c056:	f8d0 c000 	ldr.w	ip, [r0]
 801c05a:	b2ad      	uxth	r5, r5
 801c05c:	fa1f fa8a 	uxth.w	sl, sl
 801c060:	4555      	cmp	r5, sl
 801c062:	bf94      	ite	ls
 801c064:	9500      	strls	r5, [sp, #0]
 801c066:	f8cd a000 	strhi.w	sl, [sp]
 801c06a:	b292      	uxth	r2, r2
 801c06c:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801c070:	b29b      	uxth	r3, r3
 801c072:	b289      	uxth	r1, r1
 801c074:	47a8      	blx	r5
 801c076:	6823      	ldr	r3, [r4, #0]
 801c078:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801c07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c07e:	a907      	add	r1, sp, #28
 801c080:	4620      	mov	r0, r4
 801c082:	4798      	blx	r3
 801c084:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801c088:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801c08c:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 801c090:	1a5b      	subs	r3, r3, r1
 801c092:	440a      	add	r2, r1
 801c094:	b21b      	sxth	r3, r3
 801c096:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 801c09a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 801c09e:	2b00      	cmp	r3, #0
 801c0a0:	f47f aed7 	bne.w	801be52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 801c0a4:	fa1f f188 	uxth.w	r1, r8
 801c0a8:	4648      	mov	r0, r9
 801c0aa:	f7ff fa11 	bl	801b4d0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801c0ae:	e6d0      	b.n	801be52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 801c0b0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801c0b4:	42ab      	cmp	r3, r5
 801c0b6:	f67f ae94 	bls.w	801bde2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801c0ba:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801c0be:	ab07      	add	r3, sp, #28
 801c0c0:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801c0c4:	6851      	ldr	r1, [r2, #4]
 801c0c6:	c303      	stmia	r3!, {r0, r1}
 801c0c8:	a807      	add	r0, sp, #28
 801c0ca:	f7fc f9d4 	bl	8018476 <_ZNK8touchgfx4Rect7isEmptyEv>
 801c0ce:	b920      	cbnz	r0, 801c0da <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 801c0d0:	6823      	ldr	r3, [r4, #0]
 801c0d2:	a907      	add	r1, sp, #28
 801c0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c0d6:	4620      	mov	r0, r4
 801c0d8:	4798      	blx	r3
 801c0da:	3501      	adds	r5, #1
 801c0dc:	b2ad      	uxth	r5, r5
 801c0de:	e7e7      	b.n	801c0b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 801c0e0:	20008e30 	.word	0x20008e30

0801c0e4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801c0e4:	4b03      	ldr	r3, [pc, #12]	; (801c0f4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801c0e6:	2200      	movs	r2, #0
 801c0e8:	801a      	strh	r2, [r3, #0]
 801c0ea:	805a      	strh	r2, [r3, #2]
 801c0ec:	809a      	strh	r2, [r3, #4]
 801c0ee:	80da      	strh	r2, [r3, #6]
 801c0f0:	4770      	bx	lr
 801c0f2:	bf00      	nop
 801c0f4:	20008e74 	.word	0x20008e74

0801c0f8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801c0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0fc:	4606      	mov	r6, r0
 801c0fe:	b09d      	sub	sp, #116	; 0x74
 801c100:	a803      	add	r0, sp, #12
 801c102:	4614      	mov	r4, r2
 801c104:	468a      	mov	sl, r1
 801c106:	461d      	mov	r5, r3
 801c108:	f000 fd95 	bl	801cc36 <_ZN8touchgfx12TextProviderC1Ev>
 801c10c:	6833      	ldr	r3, [r6, #0]
 801c10e:	4630      	mov	r0, r6
 801c110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c112:	4798      	blx	r3
 801c114:	6833      	ldr	r3, [r6, #0]
 801c116:	4607      	mov	r7, r0
 801c118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c11a:	4630      	mov	r0, r6
 801c11c:	4798      	blx	r3
 801c11e:	462a      	mov	r2, r5
 801c120:	9000      	str	r0, [sp, #0]
 801c122:	4621      	mov	r1, r4
 801c124:	463b      	mov	r3, r7
 801c126:	a803      	add	r0, sp, #12
 801c128:	f000 fdd8 	bl	801ccdc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c12c:	2500      	movs	r5, #0
 801c12e:	462c      	mov	r4, r5
 801c130:	46a9      	mov	r9, r5
 801c132:	46a8      	mov	r8, r5
 801c134:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801c138:	2300      	movs	r3, #0
 801c13a:	9302      	str	r3, [sp, #8]
 801c13c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801c140:	429c      	cmp	r4, r3
 801c142:	d002      	beq.n	801c14a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801c144:	455c      	cmp	r4, fp
 801c146:	bf18      	it	ne
 801c148:	4625      	movne	r5, r4
 801c14a:	ab02      	add	r3, sp, #8
 801c14c:	4632      	mov	r2, r6
 801c14e:	4651      	mov	r1, sl
 801c150:	a803      	add	r0, sp, #12
 801c152:	f001 f8b5 	bl	801d2c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c156:	4604      	mov	r4, r0
 801c158:	b108      	cbz	r0, 801c15e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801c15a:	280a      	cmp	r0, #10
 801c15c:	d10a      	bne.n	801c174 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801c15e:	45c1      	cmp	r9, r8
 801c160:	bf38      	it	cc
 801c162:	46c1      	movcc	r9, r8
 801c164:	f04f 0800 	mov.w	r8, #0
 801c168:	2c00      	cmp	r4, #0
 801c16a:	d1e5      	bne.n	801c138 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c16c:	4648      	mov	r0, r9
 801c16e:	b01d      	add	sp, #116	; 0x74
 801c170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c174:	9a02      	ldr	r2, [sp, #8]
 801c176:	2a00      	cmp	r2, #0
 801c178:	d0de      	beq.n	801c138 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801c17a:	7b57      	ldrb	r7, [r2, #13]
 801c17c:	6833      	ldr	r3, [r6, #0]
 801c17e:	8894      	ldrh	r4, [r2, #4]
 801c180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c182:	007f      	lsls	r7, r7, #1
 801c184:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801c188:	7a97      	ldrb	r7, [r2, #10]
 801c18a:	4629      	mov	r1, r5
 801c18c:	4307      	orrs	r7, r0
 801c18e:	4630      	mov	r0, r6
 801c190:	4798      	blx	r3
 801c192:	4438      	add	r0, r7
 801c194:	4480      	add	r8, r0
 801c196:	fa1f f888 	uxth.w	r8, r8
 801c19a:	e7e5      	b.n	801c168 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801c19c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801c19c:	b508      	push	{r3, lr}
 801c19e:	6803      	ldr	r3, [r0, #0]
 801c1a0:	68db      	ldr	r3, [r3, #12]
 801c1a2:	4798      	blx	r3
 801c1a4:	b128      	cbz	r0, 801c1b2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801c1a6:	7b43      	ldrb	r3, [r0, #13]
 801c1a8:	7a80      	ldrb	r0, [r0, #10]
 801c1aa:	005b      	lsls	r3, r3, #1
 801c1ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c1b0:	4318      	orrs	r0, r3
 801c1b2:	bd08      	pop	{r3, pc}

0801c1b4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801c1b4:	b40e      	push	{r1, r2, r3}
 801c1b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1b8:	b09e      	sub	sp, #120	; 0x78
 801c1ba:	ab23      	add	r3, sp, #140	; 0x8c
 801c1bc:	4605      	mov	r5, r0
 801c1be:	f853 4b04 	ldr.w	r4, [r3], #4
 801c1c2:	9303      	str	r3, [sp, #12]
 801c1c4:	a805      	add	r0, sp, #20
 801c1c6:	f000 fd36 	bl	801cc36 <_ZN8touchgfx12TextProviderC1Ev>
 801c1ca:	682b      	ldr	r3, [r5, #0]
 801c1cc:	4628      	mov	r0, r5
 801c1ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c1d0:	4798      	blx	r3
 801c1d2:	682b      	ldr	r3, [r5, #0]
 801c1d4:	4606      	mov	r6, r0
 801c1d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c1d8:	4628      	mov	r0, r5
 801c1da:	4798      	blx	r3
 801c1dc:	4633      	mov	r3, r6
 801c1de:	ae1e      	add	r6, sp, #120	; 0x78
 801c1e0:	4621      	mov	r1, r4
 801c1e2:	9000      	str	r0, [sp, #0]
 801c1e4:	9a03      	ldr	r2, [sp, #12]
 801c1e6:	2400      	movs	r4, #0
 801c1e8:	a805      	add	r0, sp, #20
 801c1ea:	f000 fd77 	bl	801ccdc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c1ee:	f846 4d68 	str.w	r4, [r6, #-104]!
 801c1f2:	462a      	mov	r2, r5
 801c1f4:	4633      	mov	r3, r6
 801c1f6:	4621      	mov	r1, r4
 801c1f8:	a805      	add	r0, sp, #20
 801c1fa:	f001 f861 	bl	801d2c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c1fe:	b1f0      	cbz	r0, 801c23e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 801c200:	280a      	cmp	r0, #10
 801c202:	d018      	beq.n	801c236 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801c204:	9f04      	ldr	r7, [sp, #16]
 801c206:	b1b7      	cbz	r7, 801c236 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801c208:	7b78      	ldrb	r0, [r7, #13]
 801c20a:	7a3b      	ldrb	r3, [r7, #8]
 801c20c:	88aa      	ldrh	r2, [r5, #4]
 801c20e:	00c1      	lsls	r1, r0, #3
 801c210:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c214:	4319      	orrs	r1, r3
 801c216:	0643      	lsls	r3, r0, #25
 801c218:	bf44      	itt	mi
 801c21a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801c21e:	b219      	sxthmi	r1, r3
 801c220:	0100      	lsls	r0, r0, #4
 801c222:	79fb      	ldrb	r3, [r7, #7]
 801c224:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801c228:	4303      	orrs	r3, r0
 801c22a:	4413      	add	r3, r2
 801c22c:	1a5b      	subs	r3, r3, r1
 801c22e:	b29b      	uxth	r3, r3
 801c230:	42a3      	cmp	r3, r4
 801c232:	bfc8      	it	gt
 801c234:	b21c      	sxthgt	r4, r3
 801c236:	4633      	mov	r3, r6
 801c238:	462a      	mov	r2, r5
 801c23a:	2100      	movs	r1, #0
 801c23c:	e7dc      	b.n	801c1f8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801c23e:	b2a0      	uxth	r0, r4
 801c240:	b01e      	add	sp, #120	; 0x78
 801c242:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c246:	b003      	add	sp, #12
 801c248:	4770      	bx	lr

0801c24a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801c24a:	b40e      	push	{r1, r2, r3}
 801c24c:	b570      	push	{r4, r5, r6, lr}
 801c24e:	b09d      	sub	sp, #116	; 0x74
 801c250:	ab21      	add	r3, sp, #132	; 0x84
 801c252:	4604      	mov	r4, r0
 801c254:	f853 5b04 	ldr.w	r5, [r3], #4
 801c258:	9302      	str	r3, [sp, #8]
 801c25a:	a803      	add	r0, sp, #12
 801c25c:	f000 fceb 	bl	801cc36 <_ZN8touchgfx12TextProviderC1Ev>
 801c260:	6823      	ldr	r3, [r4, #0]
 801c262:	4620      	mov	r0, r4
 801c264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c266:	4798      	blx	r3
 801c268:	6823      	ldr	r3, [r4, #0]
 801c26a:	4606      	mov	r6, r0
 801c26c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c26e:	4620      	mov	r0, r4
 801c270:	4798      	blx	r3
 801c272:	4633      	mov	r3, r6
 801c274:	9000      	str	r0, [sp, #0]
 801c276:	9a02      	ldr	r2, [sp, #8]
 801c278:	4629      	mov	r1, r5
 801c27a:	a803      	add	r0, sp, #12
 801c27c:	f000 fd2e 	bl	801ccdc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c280:	a803      	add	r0, sp, #12
 801c282:	f001 f8eb 	bl	801d45c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c286:	2401      	movs	r4, #1
 801c288:	b2a3      	uxth	r3, r4
 801c28a:	b140      	cbz	r0, 801c29e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 801c28c:	280a      	cmp	r0, #10
 801c28e:	bf08      	it	eq
 801c290:	3301      	addeq	r3, #1
 801c292:	a803      	add	r0, sp, #12
 801c294:	bf08      	it	eq
 801c296:	b21c      	sxtheq	r4, r3
 801c298:	f001 f8e0 	bl	801d45c <_ZN8touchgfx12TextProvider11getNextCharEv>
 801c29c:	e7f4      	b.n	801c288 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801c29e:	4618      	mov	r0, r3
 801c2a0:	b01d      	add	sp, #116	; 0x74
 801c2a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c2a6:	b003      	add	sp, #12
 801c2a8:	4770      	bx	lr

0801c2aa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801c2aa:	b40e      	push	{r1, r2, r3}
 801c2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c2ae:	b09e      	sub	sp, #120	; 0x78
 801c2b0:	ab23      	add	r3, sp, #140	; 0x8c
 801c2b2:	4604      	mov	r4, r0
 801c2b4:	f853 5b04 	ldr.w	r5, [r3], #4
 801c2b8:	9303      	str	r3, [sp, #12]
 801c2ba:	a805      	add	r0, sp, #20
 801c2bc:	f000 fcbb 	bl	801cc36 <_ZN8touchgfx12TextProviderC1Ev>
 801c2c0:	6823      	ldr	r3, [r4, #0]
 801c2c2:	4620      	mov	r0, r4
 801c2c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c2c6:	4798      	blx	r3
 801c2c8:	6823      	ldr	r3, [r4, #0]
 801c2ca:	4606      	mov	r6, r0
 801c2cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c2ce:	4620      	mov	r0, r4
 801c2d0:	4798      	blx	r3
 801c2d2:	4633      	mov	r3, r6
 801c2d4:	4629      	mov	r1, r5
 801c2d6:	9000      	str	r0, [sp, #0]
 801c2d8:	9a03      	ldr	r2, [sp, #12]
 801c2da:	a805      	add	r0, sp, #20
 801c2dc:	ad1e      	add	r5, sp, #120	; 0x78
 801c2de:	f000 fcfd 	bl	801ccdc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c2e2:	2100      	movs	r1, #0
 801c2e4:	f845 1d68 	str.w	r1, [r5, #-104]!
 801c2e8:	4622      	mov	r2, r4
 801c2ea:	462b      	mov	r3, r5
 801c2ec:	a805      	add	r0, sp, #20
 801c2ee:	f000 ffe7 	bl	801d2c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c2f2:	26ff      	movs	r6, #255	; 0xff
 801c2f4:	b1d8      	cbz	r0, 801c32e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801c2f6:	280a      	cmp	r0, #10
 801c2f8:	d012      	beq.n	801c320 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801c2fa:	9804      	ldr	r0, [sp, #16]
 801c2fc:	b180      	cbz	r0, 801c320 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801c2fe:	7b47      	ldrb	r7, [r0, #13]
 801c300:	7922      	ldrb	r2, [r4, #4]
 801c302:	00fb      	lsls	r3, r7, #3
 801c304:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801c308:	7a03      	ldrb	r3, [r0, #8]
 801c30a:	430b      	orrs	r3, r1
 801c30c:	0679      	lsls	r1, r7, #25
 801c30e:	bf44      	itt	mi
 801c310:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c314:	b21b      	sxthmi	r3, r3
 801c316:	1ad3      	subs	r3, r2, r3
 801c318:	b2db      	uxtb	r3, r3
 801c31a:	429e      	cmp	r6, r3
 801c31c:	bf28      	it	cs
 801c31e:	461e      	movcs	r6, r3
 801c320:	462b      	mov	r3, r5
 801c322:	4622      	mov	r2, r4
 801c324:	2100      	movs	r1, #0
 801c326:	a805      	add	r0, sp, #20
 801c328:	f000 ffca 	bl	801d2c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801c32c:	e7e2      	b.n	801c2f4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801c32e:	4630      	mov	r0, r6
 801c330:	b01e      	add	sp, #120	; 0x78
 801c332:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c336:	b003      	add	sp, #12
 801c338:	4770      	bx	lr

0801c33a <_ZNK8touchgfx8Drawable10invalidateEv>:
 801c33a:	b513      	push	{r0, r1, r4, lr}
 801c33c:	6803      	ldr	r3, [r0, #0]
 801c33e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c342:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c346:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c34a:	2400      	movs	r4, #0
 801c34c:	9400      	str	r4, [sp, #0]
 801c34e:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c352:	691b      	ldr	r3, [r3, #16]
 801c354:	4669      	mov	r1, sp
 801c356:	4798      	blx	r3
 801c358:	b002      	add	sp, #8
 801c35a:	bd10      	pop	{r4, pc}

0801c35c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801c35c:	b538      	push	{r3, r4, r5, lr}
 801c35e:	680b      	ldr	r3, [r1, #0]
 801c360:	460c      	mov	r4, r1
 801c362:	68db      	ldr	r3, [r3, #12]
 801c364:	4605      	mov	r5, r0
 801c366:	4798      	blx	r3
 801c368:	6823      	ldr	r3, [r4, #0]
 801c36a:	4620      	mov	r0, r4
 801c36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c36e:	4629      	mov	r1, r5
 801c370:	4798      	blx	r3
 801c372:	4628      	mov	r0, r5
 801c374:	bd38      	pop	{r3, r4, r5, pc}

0801c376 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801c376:	b410      	push	{r4}
 801c378:	880a      	ldrh	r2, [r1, #0]
 801c37a:	8884      	ldrh	r4, [r0, #4]
 801c37c:	4422      	add	r2, r4
 801c37e:	800a      	strh	r2, [r1, #0]
 801c380:	88c4      	ldrh	r4, [r0, #6]
 801c382:	884a      	ldrh	r2, [r1, #2]
 801c384:	4422      	add	r2, r4
 801c386:	804a      	strh	r2, [r1, #2]
 801c388:	6940      	ldr	r0, [r0, #20]
 801c38a:	b120      	cbz	r0, 801c396 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801c38c:	6803      	ldr	r3, [r0, #0]
 801c38e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c394:	4718      	bx	r3
 801c396:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c39a:	4770      	bx	lr

0801c39c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801c39c:	b570      	push	{r4, r5, r6, lr}
 801c39e:	8882      	ldrh	r2, [r0, #4]
 801c3a0:	880b      	ldrh	r3, [r1, #0]
 801c3a2:	4413      	add	r3, r2
 801c3a4:	800b      	strh	r3, [r1, #0]
 801c3a6:	88c2      	ldrh	r2, [r0, #6]
 801c3a8:	884b      	ldrh	r3, [r1, #2]
 801c3aa:	460c      	mov	r4, r1
 801c3ac:	4413      	add	r3, r2
 801c3ae:	804b      	strh	r3, [r1, #2]
 801c3b0:	4605      	mov	r5, r0
 801c3b2:	1d01      	adds	r1, r0, #4
 801c3b4:	4620      	mov	r0, r4
 801c3b6:	f7fc f81b 	bl	80183f0 <_ZN8touchgfx4RectaNERKS0_>
 801c3ba:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	dd0b      	ble.n	801c3da <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c3c2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	dd07      	ble.n	801c3da <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c3ca:	6968      	ldr	r0, [r5, #20]
 801c3cc:	b128      	cbz	r0, 801c3da <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801c3ce:	6803      	ldr	r3, [r0, #0]
 801c3d0:	4621      	mov	r1, r4
 801c3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c3d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c3d8:	4718      	bx	r3
 801c3da:	bd70      	pop	{r4, r5, r6, pc}

0801c3dc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801c3dc:	b570      	push	{r4, r5, r6, lr}
 801c3de:	8882      	ldrh	r2, [r0, #4]
 801c3e0:	880b      	ldrh	r3, [r1, #0]
 801c3e2:	4413      	add	r3, r2
 801c3e4:	800b      	strh	r3, [r1, #0]
 801c3e6:	88c2      	ldrh	r2, [r0, #6]
 801c3e8:	884b      	ldrh	r3, [r1, #2]
 801c3ea:	460c      	mov	r4, r1
 801c3ec:	4413      	add	r3, r2
 801c3ee:	804b      	strh	r3, [r1, #2]
 801c3f0:	4605      	mov	r5, r0
 801c3f2:	1d01      	adds	r1, r0, #4
 801c3f4:	4620      	mov	r0, r4
 801c3f6:	f7fb fffb 	bl	80183f0 <_ZN8touchgfx4RectaNERKS0_>
 801c3fa:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	dd18      	ble.n	801c434 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801c402:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801c406:	2b00      	cmp	r3, #0
 801c408:	dd14      	ble.n	801c434 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801c40a:	6968      	ldr	r0, [r5, #20]
 801c40c:	b128      	cbz	r0, 801c41a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801c40e:	6803      	ldr	r3, [r0, #0]
 801c410:	4621      	mov	r1, r4
 801c412:	691b      	ldr	r3, [r3, #16]
 801c414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c418:	4718      	bx	r3
 801c41a:	4b07      	ldr	r3, [pc, #28]	; (801c438 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801c41c:	681b      	ldr	r3, [r3, #0]
 801c41e:	3304      	adds	r3, #4
 801c420:	429d      	cmp	r5, r3
 801c422:	d107      	bne.n	801c434 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801c424:	f7fe fff2 	bl	801b40c <_ZN8touchgfx11Application11getInstanceEv>
 801c428:	6821      	ldr	r1, [r4, #0]
 801c42a:	6862      	ldr	r2, [r4, #4]
 801c42c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c430:	f7ff b862 	b.w	801b4f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801c434:	bd70      	pop	{r4, r5, r6, pc}
 801c436:	bf00      	nop
 801c438:	20008e6c 	.word	0x20008e6c

0801c43c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801c43c:	b570      	push	{r4, r5, r6, lr}
 801c43e:	4604      	mov	r4, r0
 801c440:	4616      	mov	r6, r2
 801c442:	460d      	mov	r5, r1
 801c444:	b901      	cbnz	r1, 801c448 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801c446:	b192      	cbz	r2, 801c46e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801c448:	6823      	ldr	r3, [r4, #0]
 801c44a:	4620      	mov	r0, r4
 801c44c:	699b      	ldr	r3, [r3, #24]
 801c44e:	4798      	blx	r3
 801c450:	88e2      	ldrh	r2, [r4, #6]
 801c452:	88a1      	ldrh	r1, [r4, #4]
 801c454:	4432      	add	r2, r6
 801c456:	4429      	add	r1, r5
 801c458:	4620      	mov	r0, r4
 801c45a:	b212      	sxth	r2, r2
 801c45c:	b209      	sxth	r1, r1
 801c45e:	f7f6 f995 	bl	801278c <_ZN8touchgfx8Drawable5setXYEss>
 801c462:	6823      	ldr	r3, [r4, #0]
 801c464:	4620      	mov	r0, r4
 801c466:	699b      	ldr	r3, [r3, #24]
 801c468:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c46c:	4718      	bx	r3
 801c46e:	bd70      	pop	{r4, r5, r6, pc}

0801c470 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801c470:	b510      	push	{r4, lr}
 801c472:	4604      	mov	r4, r0
 801c474:	4608      	mov	r0, r1
 801c476:	2300      	movs	r3, #0
 801c478:	8023      	strh	r3, [r4, #0]
 801c47a:	8063      	strh	r3, [r4, #2]
 801c47c:	6803      	ldr	r3, [r0, #0]
 801c47e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c482:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801c486:	80a1      	strh	r1, [r4, #4]
 801c488:	80e2      	strh	r2, [r4, #6]
 801c48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c48c:	4621      	mov	r1, r4
 801c48e:	4798      	blx	r3
 801c490:	4620      	mov	r0, r4
 801c492:	bd10      	pop	{r4, pc}

0801c494 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801c494:	b530      	push	{r4, r5, lr}
 801c496:	8083      	strh	r3, [r0, #4]
 801c498:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801c49c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801c4a0:	7183      	strb	r3, [r0, #6]
 801c4a2:	79c3      	ldrb	r3, [r0, #7]
 801c4a4:	6101      	str	r1, [r0, #16]
 801c4a6:	f365 0306 	bfi	r3, r5, #0, #7
 801c4aa:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801c4ae:	8282      	strh	r2, [r0, #20]
 801c4b0:	f365 13c7 	bfi	r3, r5, #7, #1
 801c4b4:	71c3      	strb	r3, [r0, #7]
 801c4b6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801c4ba:	7203      	strb	r3, [r0, #8]
 801c4bc:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801c4c0:	7243      	strb	r3, [r0, #9]
 801c4c2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c4c6:	8143      	strh	r3, [r0, #10]
 801c4c8:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801c4cc:	8183      	strh	r3, [r0, #12]
 801c4ce:	4b01      	ldr	r3, [pc, #4]	; (801c4d4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801c4d0:	6003      	str	r3, [r0, #0]
 801c4d2:	bd30      	pop	{r4, r5, pc}
 801c4d4:	0802cbfc 	.word	0x0802cbfc

0801c4d8 <_ZNK8touchgfx9ConstFont4findEt>:
 801c4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c4da:	6904      	ldr	r4, [r0, #16]
 801c4dc:	b3bc      	cbz	r4, 801c54e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c4de:	88a3      	ldrh	r3, [r4, #4]
 801c4e0:	8a82      	ldrh	r2, [r0, #20]
 801c4e2:	1acb      	subs	r3, r1, r3
 801c4e4:	f102 32ff 	add.w	r2, r2, #4294967295
 801c4e8:	d431      	bmi.n	801c54e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c4ea:	4293      	cmp	r3, r2
 801c4ec:	dd0c      	ble.n	801c508 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801c4ee:	230e      	movs	r3, #14
 801c4f0:	fb03 4302 	mla	r3, r3, r2, r4
 801c4f4:	889b      	ldrh	r3, [r3, #4]
 801c4f6:	1a5b      	subs	r3, r3, r1
 801c4f8:	1ad3      	subs	r3, r2, r3
 801c4fa:	429a      	cmp	r2, r3
 801c4fc:	db27      	blt.n	801c54e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	bfbc      	itt	lt
 801c502:	2302      	movlt	r3, #2
 801c504:	fb92 f3f3 	sdivlt	r3, r2, r3
 801c508:	2500      	movs	r5, #0
 801c50a:	260e      	movs	r6, #14
 801c50c:	4295      	cmp	r5, r2
 801c50e:	dc1e      	bgt.n	801c54e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c510:	fb06 4003 	mla	r0, r6, r3, r4
 801c514:	8887      	ldrh	r7, [r0, #4]
 801c516:	42b9      	cmp	r1, r7
 801c518:	d01a      	beq.n	801c550 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801c51a:	d20d      	bcs.n	801c538 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801c51c:	1e5a      	subs	r2, r3, #1
 801c51e:	4295      	cmp	r5, r2
 801c520:	dc15      	bgt.n	801c54e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c522:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801c526:	1a5b      	subs	r3, r3, r1
 801c528:	1ad3      	subs	r3, r2, r3
 801c52a:	429a      	cmp	r2, r3
 801c52c:	db0f      	blt.n	801c54e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c52e:	429d      	cmp	r5, r3
 801c530:	ddec      	ble.n	801c50c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c532:	1953      	adds	r3, r2, r5
 801c534:	105b      	asrs	r3, r3, #1
 801c536:	e7e9      	b.n	801c50c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c538:	1c5d      	adds	r5, r3, #1
 801c53a:	42aa      	cmp	r2, r5
 801c53c:	db07      	blt.n	801c54e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c53e:	8a43      	ldrh	r3, [r0, #18]
 801c540:	1acb      	subs	r3, r1, r3
 801c542:	442b      	add	r3, r5
 801c544:	429d      	cmp	r5, r3
 801c546:	dc02      	bgt.n	801c54e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c548:	429a      	cmp	r2, r3
 801c54a:	dadf      	bge.n	801c50c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c54c:	e7f1      	b.n	801c532 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801c54e:	2000      	movs	r0, #0
 801c550:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c552 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801c552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c554:	4604      	mov	r4, r0
 801c556:	4617      	mov	r7, r2
 801c558:	461e      	mov	r6, r3
 801c55a:	b911      	cbnz	r1, 801c562 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801c55c:	2500      	movs	r5, #0
 801c55e:	4628      	mov	r0, r5
 801c560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c562:	290a      	cmp	r1, #10
 801c564:	d0fa      	beq.n	801c55c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c566:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801c56a:	4291      	cmp	r1, r2
 801c56c:	d0f6      	beq.n	801c55c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c56e:	f242 020b 	movw	r2, #8203	; 0x200b
 801c572:	4291      	cmp	r1, r2
 801c574:	d0f2      	beq.n	801c55c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c576:	f7ff ffaf 	bl	801c4d8 <_ZNK8touchgfx9ConstFont4findEt>
 801c57a:	4605      	mov	r5, r0
 801c57c:	b950      	cbnz	r0, 801c594 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801c57e:	6823      	ldr	r3, [r4, #0]
 801c580:	4620      	mov	r0, r4
 801c582:	691b      	ldr	r3, [r3, #16]
 801c584:	4798      	blx	r3
 801c586:	4601      	mov	r1, r0
 801c588:	4620      	mov	r0, r4
 801c58a:	f7ff ffa5 	bl	801c4d8 <_ZNK8touchgfx9ConstFont4findEt>
 801c58e:	4605      	mov	r5, r0
 801c590:	2800      	cmp	r0, #0
 801c592:	d0e3      	beq.n	801c55c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c594:	6823      	ldr	r3, [r4, #0]
 801c596:	4629      	mov	r1, r5
 801c598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c59a:	4620      	mov	r0, r4
 801c59c:	4798      	blx	r3
 801c59e:	6038      	str	r0, [r7, #0]
 801c5a0:	6823      	ldr	r3, [r4, #0]
 801c5a2:	4620      	mov	r0, r4
 801c5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c5a6:	4798      	blx	r3
 801c5a8:	7030      	strb	r0, [r6, #0]
 801c5aa:	e7d8      	b.n	801c55e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801c5ac <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801c5ac:	2000      	movs	r0, #0
 801c5ae:	4770      	bx	lr

0801c5b0 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801c5b0:	2001      	movs	r0, #1
 801c5b2:	4770      	bx	lr

0801c5b4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801c5b4:	2002      	movs	r0, #2
 801c5b6:	4770      	bx	lr

0801c5b8 <_ZN8touchgfx12GestureEventD1Ev>:
 801c5b8:	4770      	bx	lr

0801c5ba <_ZN8touchgfx9DragEventD1Ev>:
 801c5ba:	4770      	bx	lr

0801c5bc <_ZN8touchgfx10ClickEventD1Ev>:
 801c5bc:	4770      	bx	lr

0801c5be <_ZN8touchgfx10ClickEventD0Ev>:
 801c5be:	b510      	push	{r4, lr}
 801c5c0:	210c      	movs	r1, #12
 801c5c2:	4604      	mov	r4, r0
 801c5c4:	f00d f8fd 	bl	80297c2 <_ZdlPvj>
 801c5c8:	4620      	mov	r0, r4
 801c5ca:	bd10      	pop	{r4, pc}

0801c5cc <_ZN8touchgfx9DragEventD0Ev>:
 801c5cc:	b510      	push	{r4, lr}
 801c5ce:	2110      	movs	r1, #16
 801c5d0:	4604      	mov	r4, r0
 801c5d2:	f00d f8f6 	bl	80297c2 <_ZdlPvj>
 801c5d6:	4620      	mov	r0, r4
 801c5d8:	bd10      	pop	{r4, pc}

0801c5da <_ZN8touchgfx12GestureEventD0Ev>:
 801c5da:	b510      	push	{r4, lr}
 801c5dc:	210c      	movs	r1, #12
 801c5de:	4604      	mov	r4, r0
 801c5e0:	f00d f8ef 	bl	80297c2 <_ZdlPvj>
 801c5e4:	4620      	mov	r0, r4
 801c5e6:	bd10      	pop	{r4, pc}

0801c5e8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801c5e8:	b530      	push	{r4, r5, lr}
 801c5ea:	460d      	mov	r5, r1
 801c5ec:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c5ee:	b087      	sub	sp, #28
 801c5f0:	4604      	mov	r4, r0
 801c5f2:	b301      	cbz	r1, 801c636 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801c5f4:	a801      	add	r0, sp, #4
 801c5f6:	f7ff ff3b 	bl	801c470 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c5fa:	892a      	ldrh	r2, [r5, #8]
 801c5fc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c600:	7928      	ldrb	r0, [r5, #4]
 801c602:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c606:	f88d 0010 	strb.w	r0, [sp, #16]
 801c60a:	1ad2      	subs	r2, r2, r3
 801c60c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c60e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c610:	f8ad 1012 	strh.w	r1, [sp, #18]
 801c614:	441a      	add	r2, r3
 801c616:	896b      	ldrh	r3, [r5, #10]
 801c618:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801c61c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c620:	1b5b      	subs	r3, r3, r5
 801c622:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801c624:	442b      	add	r3, r5
 801c626:	4d05      	ldr	r5, [pc, #20]	; (801c63c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801c628:	9503      	str	r5, [sp, #12]
 801c62a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c62e:	6803      	ldr	r3, [r0, #0]
 801c630:	a903      	add	r1, sp, #12
 801c632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c634:	4798      	blx	r3
 801c636:	b007      	add	sp, #28
 801c638:	bd30      	pop	{r4, r5, pc}
 801c63a:	bf00      	nop
 801c63c:	0802cc7c 	.word	0x0802cc7c

0801c640 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801c640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c644:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c646:	b08a      	sub	sp, #40	; 0x28
 801c648:	4604      	mov	r4, r0
 801c64a:	460d      	mov	r5, r1
 801c64c:	b113      	cbz	r3, 801c654 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801c64e:	790b      	ldrb	r3, [r1, #4]
 801c650:	2b00      	cmp	r3, #0
 801c652:	d044      	beq.n	801c6de <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c654:	f104 0804 	add.w	r8, r4, #4
 801c658:	4641      	mov	r1, r8
 801c65a:	a803      	add	r0, sp, #12
 801c65c:	f7ff ff08 	bl	801c470 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c660:	792b      	ldrb	r3, [r5, #4]
 801c662:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801c666:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801c66a:	b983      	cbnz	r3, 801c68e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801c66c:	892a      	ldrh	r2, [r5, #8]
 801c66e:	88e9      	ldrh	r1, [r5, #6]
 801c670:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801c674:	1b92      	subs	r2, r2, r6
 801c676:	1bc9      	subs	r1, r1, r7
 801c678:	9301      	str	r3, [sp, #4]
 801c67a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801c67e:	9300      	str	r3, [sp, #0]
 801c680:	b212      	sxth	r2, r2
 801c682:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801c686:	b209      	sxth	r1, r1
 801c688:	4640      	mov	r0, r8
 801c68a:	f7fb fdcd 	bl	8018228 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801c68e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c690:	b329      	cbz	r1, 801c6de <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c692:	a805      	add	r0, sp, #20
 801c694:	f7ff feec 	bl	801c470 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c698:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c69c:	792b      	ldrb	r3, [r5, #4]
 801c69e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c6a0:	f88d 3020 	strb.w	r3, [sp, #32]
 801c6a4:	1abf      	subs	r7, r7, r2
 801c6a6:	88ea      	ldrh	r2, [r5, #6]
 801c6a8:	4417      	add	r7, r2
 801c6aa:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801c6ac:	4417      	add	r7, r2
 801c6ae:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c6b2:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801c6b6:	1ab6      	subs	r6, r6, r2
 801c6b8:	892a      	ldrh	r2, [r5, #8]
 801c6ba:	4416      	add	r6, r2
 801c6bc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c6be:	4416      	add	r6, r2
 801c6c0:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801c6c4:	4a07      	ldr	r2, [pc, #28]	; (801c6e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801c6c6:	9207      	str	r2, [sp, #28]
 801c6c8:	2600      	movs	r6, #0
 801c6ca:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801c6ce:	6803      	ldr	r3, [r0, #0]
 801c6d0:	a907      	add	r1, sp, #28
 801c6d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c6d4:	4798      	blx	r3
 801c6d6:	792b      	ldrb	r3, [r5, #4]
 801c6d8:	b10b      	cbz	r3, 801c6de <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c6da:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801c6de:	b00a      	add	sp, #40	; 0x28
 801c6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c6e4:	0802cc54 	.word	0x0802cc54

0801c6e8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801c6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c6ec:	460c      	mov	r4, r1
 801c6ee:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c6f0:	b088      	sub	sp, #32
 801c6f2:	4605      	mov	r5, r0
 801c6f4:	2900      	cmp	r1, #0
 801c6f6:	d06d      	beq.n	801c7d4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801c6f8:	4668      	mov	r0, sp
 801c6fa:	f7ff feb9 	bl	801c470 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c6fe:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801c700:	88e3      	ldrh	r3, [r4, #6]
 801c702:	f9bd 8000 	ldrsh.w	r8, [sp]
 801c706:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801c70a:	440b      	add	r3, r1
 801c70c:	b21b      	sxth	r3, r3
 801c70e:	4543      	cmp	r3, r8
 801c710:	db31      	blt.n	801c776 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c712:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801c716:	44c4      	add	ip, r8
 801c718:	fa0f fc8c 	sxth.w	ip, ip
 801c71c:	4563      	cmp	r3, ip
 801c71e:	da2a      	bge.n	801c776 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c720:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801c722:	8926      	ldrh	r6, [r4, #8]
 801c724:	4416      	add	r6, r2
 801c726:	b236      	sxth	r6, r6
 801c728:	42be      	cmp	r6, r7
 801c72a:	db24      	blt.n	801c776 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c72c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801c730:	4438      	add	r0, r7
 801c732:	b200      	sxth	r0, r0
 801c734:	4286      	cmp	r6, r0
 801c736:	da1e      	bge.n	801c776 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c738:	8963      	ldrh	r3, [r4, #10]
 801c73a:	4419      	add	r1, r3
 801c73c:	b209      	sxth	r1, r1
 801c73e:	4541      	cmp	r1, r8
 801c740:	db08      	blt.n	801c754 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c742:	4561      	cmp	r1, ip
 801c744:	da06      	bge.n	801c754 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c746:	89a3      	ldrh	r3, [r4, #12]
 801c748:	441a      	add	r2, r3
 801c74a:	b212      	sxth	r2, r2
 801c74c:	42ba      	cmp	r2, r7
 801c74e:	db01      	blt.n	801c754 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c750:	4282      	cmp	r2, r0
 801c752:	db10      	blt.n	801c776 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c754:	4b21      	ldr	r3, [pc, #132]	; (801c7dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801c756:	9304      	str	r3, [sp, #16]
 801c758:	2302      	movs	r3, #2
 801c75a:	f88d 3014 	strb.w	r3, [sp, #20]
 801c75e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c760:	2300      	movs	r3, #0
 801c762:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c766:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c76a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c76e:	6803      	ldr	r3, [r0, #0]
 801c770:	a904      	add	r1, sp, #16
 801c772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c774:	4798      	blx	r3
 801c776:	1d29      	adds	r1, r5, #4
 801c778:	a802      	add	r0, sp, #8
 801c77a:	f7ff fe79 	bl	801c470 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c77e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c782:	88e0      	ldrh	r0, [r4, #6]
 801c784:	7921      	ldrb	r1, [r4, #4]
 801c786:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801c78a:	8922      	ldrh	r2, [r4, #8]
 801c78c:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801c78e:	f88d 1014 	strb.w	r1, [sp, #20]
 801c792:	eba3 0808 	sub.w	r8, r3, r8
 801c796:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c79a:	1bdf      	subs	r7, r3, r7
 801c79c:	b2bb      	uxth	r3, r7
 801c79e:	fa1f f888 	uxth.w	r8, r8
 801c7a2:	8967      	ldrh	r7, [r4, #10]
 801c7a4:	89a4      	ldrh	r4, [r4, #12]
 801c7a6:	4440      	add	r0, r8
 801c7a8:	4460      	add	r0, ip
 801c7aa:	441a      	add	r2, r3
 801c7ac:	44b8      	add	r8, r7
 801c7ae:	4423      	add	r3, r4
 801c7b0:	f8ad 0016 	strh.w	r0, [sp, #22]
 801c7b4:	4433      	add	r3, r6
 801c7b6:	4432      	add	r2, r6
 801c7b8:	44e0      	add	r8, ip
 801c7ba:	4c09      	ldr	r4, [pc, #36]	; (801c7e0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801c7bc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c7be:	9404      	str	r4, [sp, #16]
 801c7c0:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c7c4:	f8ad 801a 	strh.w	r8, [sp, #26]
 801c7c8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c7cc:	6803      	ldr	r3, [r0, #0]
 801c7ce:	a904      	add	r1, sp, #16
 801c7d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c7d2:	4798      	blx	r3
 801c7d4:	b008      	add	sp, #32
 801c7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7da:	bf00      	nop
 801c7dc:	0802cc54 	.word	0x0802cc54
 801c7e0:	0802cc68 	.word	0x0802cc68

0801c7e4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801c7e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c7e6:	4604      	mov	r4, r0
 801c7e8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801c7ec:	3201      	adds	r2, #1
 801c7ee:	d112      	bne.n	801c816 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801c7f0:	6803      	ldr	r3, [r0, #0]
 801c7f2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c7f6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c7fa:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c7fe:	2500      	movs	r5, #0
 801c800:	9500      	str	r5, [sp, #0]
 801c802:	466d      	mov	r5, sp
 801c804:	4629      	mov	r1, r5
 801c806:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c80c:	4798      	blx	r3
 801c80e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c812:	e884 0003 	stmia.w	r4, {r0, r1}
 801c816:	4620      	mov	r0, r4
 801c818:	b003      	add	sp, #12
 801c81a:	bd30      	pop	{r4, r5, pc}

0801c81c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801c81c:	b513      	push	{r0, r1, r4, lr}
 801c81e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801c822:	3301      	adds	r3, #1
 801c824:	4604      	mov	r4, r0
 801c826:	d109      	bne.n	801c83c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801c828:	4601      	mov	r1, r0
 801c82a:	4668      	mov	r0, sp
 801c82c:	f7ff fe20 	bl	801c470 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c830:	f8bd 3000 	ldrh.w	r3, [sp]
 801c834:	8423      	strh	r3, [r4, #32]
 801c836:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c83a:	8463      	strh	r3, [r4, #34]	; 0x22
 801c83c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801c840:	b002      	add	sp, #8
 801c842:	bd10      	pop	{r4, pc}

0801c844 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801c844:	b513      	push	{r0, r1, r4, lr}
 801c846:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801c84a:	3301      	adds	r3, #1
 801c84c:	4604      	mov	r4, r0
 801c84e:	d109      	bne.n	801c864 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801c850:	4601      	mov	r1, r0
 801c852:	4668      	mov	r0, sp
 801c854:	f7ff fe0c 	bl	801c470 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c858:	f8bd 3000 	ldrh.w	r3, [sp]
 801c85c:	8423      	strh	r3, [r4, #32]
 801c85e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c862:	8463      	strh	r3, [r4, #34]	; 0x22
 801c864:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801c868:	b002      	add	sp, #8
 801c86a:	bd10      	pop	{r4, pc}

0801c86c <_ZN8touchgfx6ScreenC1Ev>:
 801c86c:	b570      	push	{r4, r5, r6, lr}
 801c86e:	4605      	mov	r5, r0
 801c870:	4b16      	ldr	r3, [pc, #88]	; (801c8cc <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801c872:	f845 3b04 	str.w	r3, [r5], #4
 801c876:	2300      	movs	r3, #0
 801c878:	8103      	strh	r3, [r0, #8]
 801c87a:	8143      	strh	r3, [r0, #10]
 801c87c:	8183      	strh	r3, [r0, #12]
 801c87e:	81c3      	strh	r3, [r0, #14]
 801c880:	8203      	strh	r3, [r0, #16]
 801c882:	8243      	strh	r3, [r0, #18]
 801c884:	8283      	strh	r3, [r0, #20]
 801c886:	82c3      	strh	r3, [r0, #22]
 801c888:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801c88c:	6203      	str	r3, [r0, #32]
 801c88e:	8483      	strh	r3, [r0, #36]	; 0x24
 801c890:	84c3      	strh	r3, [r0, #38]	; 0x26
 801c892:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801c896:	4a0e      	ldr	r2, [pc, #56]	; (801c8d0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801c898:	6343      	str	r3, [r0, #52]	; 0x34
 801c89a:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801c89e:	4b0d      	ldr	r3, [pc, #52]	; (801c8d4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801c8a0:	6042      	str	r2, [r0, #4]
 801c8a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c8a6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801c8a8:	4a0b      	ldr	r2, [pc, #44]	; (801c8d8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801c8aa:	4604      	mov	r4, r0
 801c8ac:	2101      	movs	r1, #1
 801c8ae:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801c8b2:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801c8b6:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c8ba:	4628      	mov	r0, r5
 801c8bc:	4798      	blx	r3
 801c8be:	6863      	ldr	r3, [r4, #4]
 801c8c0:	4628      	mov	r0, r5
 801c8c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c8c4:	4631      	mov	r1, r6
 801c8c6:	4798      	blx	r3
 801c8c8:	4620      	mov	r0, r4
 801c8ca:	bd70      	pop	{r4, r5, r6, pc}
 801c8cc:	0802cc90 	.word	0x0802cc90
 801c8d0:	0802c5f4 	.word	0x0802c5f4
 801c8d4:	20008e24 	.word	0x20008e24
 801c8d8:	20008e22 	.word	0x20008e22

0801c8dc <_ZN8touchgfx6Screen4drawEv>:
 801c8dc:	b507      	push	{r0, r1, r2, lr}
 801c8de:	4b09      	ldr	r3, [pc, #36]	; (801c904 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801c8e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c8e4:	4b08      	ldr	r3, [pc, #32]	; (801c908 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801c8e6:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c8ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c8ee:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c8f2:	6803      	ldr	r3, [r0, #0]
 801c8f4:	2100      	movs	r1, #0
 801c8f6:	9100      	str	r1, [sp, #0]
 801c8f8:	689b      	ldr	r3, [r3, #8]
 801c8fa:	4669      	mov	r1, sp
 801c8fc:	4798      	blx	r3
 801c8fe:	b003      	add	sp, #12
 801c900:	f85d fb04 	ldr.w	pc, [sp], #4
 801c904:	20008e22 	.word	0x20008e22
 801c908:	20008e24 	.word	0x20008e24

0801c90c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801c90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c910:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c914:	2b00      	cmp	r3, #0
 801c916:	b089      	sub	sp, #36	; 0x24
 801c918:	4680      	mov	r8, r0
 801c91a:	460c      	mov	r4, r1
 801c91c:	4615      	mov	r5, r2
 801c91e:	dd0e      	ble.n	801c93e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c920:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c924:	2b00      	cmp	r3, #0
 801c926:	dd0a      	ble.n	801c93e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c928:	4628      	mov	r0, r5
 801c92a:	f7ff ff5b 	bl	801c7e4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c92e:	4621      	mov	r1, r4
 801c930:	f7fe fc8e 	bl	801b250 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c934:	69eb      	ldr	r3, [r5, #28]
 801c936:	b928      	cbnz	r0, 801c944 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801c938:	461d      	mov	r5, r3
 801c93a:	2b00      	cmp	r3, #0
 801c93c:	d1f4      	bne.n	801c928 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801c93e:	b009      	add	sp, #36	; 0x24
 801c940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c944:	ae04      	add	r6, sp, #16
 801c946:	2b00      	cmp	r3, #0
 801c948:	f000 80b5 	beq.w	801cab6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c94c:	682b      	ldr	r3, [r5, #0]
 801c94e:	4629      	mov	r1, r5
 801c950:	68db      	ldr	r3, [r3, #12]
 801c952:	a802      	add	r0, sp, #8
 801c954:	4798      	blx	r3
 801c956:	4628      	mov	r0, r5
 801c958:	f7ff ff60 	bl	801c81c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c95c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801c960:	4407      	add	r7, r0
 801c962:	4628      	mov	r0, r5
 801c964:	f7ff ff6e 	bl	801c844 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c968:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c96c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801c970:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c974:	4418      	add	r0, r3
 801c976:	4621      	mov	r1, r4
 801c978:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801c97c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c980:	b23f      	sxth	r7, r7
 801c982:	4630      	mov	r0, r6
 801c984:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c988:	f8ad 7010 	strh.w	r7, [sp, #16]
 801c98c:	f7fb fd30 	bl	80183f0 <_ZN8touchgfx4RectaNERKS0_>
 801c990:	4628      	mov	r0, r5
 801c992:	f7ff ff27 	bl	801c7e4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c996:	4602      	mov	r2, r0
 801c998:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c99c:	ab06      	add	r3, sp, #24
 801c99e:	e883 0003 	stmia.w	r3, {r0, r1}
 801c9a2:	4611      	mov	r1, r2
 801c9a4:	4618      	mov	r0, r3
 801c9a6:	f7fb fd23 	bl	80183f0 <_ZN8touchgfx4RectaNERKS0_>
 801c9aa:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801c9ae:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c9b2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801c9b6:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801c9ba:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801c9be:	4299      	cmp	r1, r3
 801c9c0:	d10b      	bne.n	801c9da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c9c2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c9c6:	4552      	cmp	r2, sl
 801c9c8:	d107      	bne.n	801c9da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c9ca:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801c9ce:	455a      	cmp	r2, fp
 801c9d0:	d103      	bne.n	801c9da <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c9d2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801c9d6:	454a      	cmp	r2, r9
 801c9d8:	d06d      	beq.n	801cab6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c9da:	f1bb 0f00 	cmp.w	fp, #0
 801c9de:	dd65      	ble.n	801caac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c9e0:	f1b9 0f00 	cmp.w	r9, #0
 801c9e4:	dd62      	ble.n	801caac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c9e6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c9ea:	fa1f f08a 	uxth.w	r0, sl
 801c9ee:	4552      	cmp	r2, sl
 801c9f0:	9000      	str	r0, [sp, #0]
 801c9f2:	da12      	bge.n	801ca1a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801c9f4:	9301      	str	r3, [sp, #4]
 801c9f6:	9b00      	ldr	r3, [sp, #0]
 801c9f8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c9fc:	f8ad 2012 	strh.w	r2, [sp, #18]
 801ca00:	1a9a      	subs	r2, r3, r2
 801ca02:	f8ad 1010 	strh.w	r1, [sp, #16]
 801ca06:	f8ad 0014 	strh.w	r0, [sp, #20]
 801ca0a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801ca0e:	69ea      	ldr	r2, [r5, #28]
 801ca10:	4631      	mov	r1, r6
 801ca12:	4640      	mov	r0, r8
 801ca14:	f7ff ff7a 	bl	801c90c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ca18:	9b01      	ldr	r3, [sp, #4]
 801ca1a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801ca1e:	429a      	cmp	r2, r3
 801ca20:	b29f      	uxth	r7, r3
 801ca22:	da0d      	bge.n	801ca40 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801ca24:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ca28:	1aba      	subs	r2, r7, r2
 801ca2a:	f8ad a012 	strh.w	sl, [sp, #18]
 801ca2e:	f8ad 2014 	strh.w	r2, [sp, #20]
 801ca32:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ca36:	69ea      	ldr	r2, [r5, #28]
 801ca38:	4631      	mov	r1, r6
 801ca3a:	4640      	mov	r0, r8
 801ca3c:	f7ff ff66 	bl	801c90c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ca40:	8822      	ldrh	r2, [r4, #0]
 801ca42:	88a3      	ldrh	r3, [r4, #4]
 801ca44:	445f      	add	r7, fp
 801ca46:	4413      	add	r3, r2
 801ca48:	b29b      	uxth	r3, r3
 801ca4a:	b2bf      	uxth	r7, r7
 801ca4c:	b23a      	sxth	r2, r7
 801ca4e:	b219      	sxth	r1, r3
 801ca50:	4291      	cmp	r1, r2
 801ca52:	dd0d      	ble.n	801ca70 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801ca54:	1bdb      	subs	r3, r3, r7
 801ca56:	f8ad 2010 	strh.w	r2, [sp, #16]
 801ca5a:	f8ad a012 	strh.w	sl, [sp, #18]
 801ca5e:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ca62:	f8ad 9016 	strh.w	r9, [sp, #22]
 801ca66:	69ea      	ldr	r2, [r5, #28]
 801ca68:	4631      	mov	r1, r6
 801ca6a:	4640      	mov	r0, r8
 801ca6c:	f7ff ff4e 	bl	801c90c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801ca70:	88e2      	ldrh	r2, [r4, #6]
 801ca72:	8863      	ldrh	r3, [r4, #2]
 801ca74:	4413      	add	r3, r2
 801ca76:	9a00      	ldr	r2, [sp, #0]
 801ca78:	444a      	add	r2, r9
 801ca7a:	b29b      	uxth	r3, r3
 801ca7c:	fa1f f982 	uxth.w	r9, r2
 801ca80:	fa0f f289 	sxth.w	r2, r9
 801ca84:	b219      	sxth	r1, r3
 801ca86:	428a      	cmp	r2, r1
 801ca88:	da15      	bge.n	801cab6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801ca8a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801ca8e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801ca92:	f8ad 1014 	strh.w	r1, [sp, #20]
 801ca96:	eba3 0309 	sub.w	r3, r3, r9
 801ca9a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801ca9e:	f8ad 2012 	strh.w	r2, [sp, #18]
 801caa2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801caa6:	69ea      	ldr	r2, [r5, #28]
 801caa8:	4631      	mov	r1, r6
 801caaa:	e001      	b.n	801cab0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801caac:	69ea      	ldr	r2, [r5, #28]
 801caae:	4621      	mov	r1, r4
 801cab0:	4640      	mov	r0, r8
 801cab2:	f7ff ff2b 	bl	801c90c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cab6:	4628      	mov	r0, r5
 801cab8:	f7ff fe94 	bl	801c7e4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801cabc:	6861      	ldr	r1, [r4, #4]
 801cabe:	4602      	mov	r2, r0
 801cac0:	6820      	ldr	r0, [r4, #0]
 801cac2:	4633      	mov	r3, r6
 801cac4:	c303      	stmia	r3!, {r0, r1}
 801cac6:	4611      	mov	r1, r2
 801cac8:	4630      	mov	r0, r6
 801caca:	f7fb fc91 	bl	80183f0 <_ZN8touchgfx4RectaNERKS0_>
 801cace:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801cad2:	2b00      	cmp	r3, #0
 801cad4:	f77f af33 	ble.w	801c93e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cad8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801cadc:	2b00      	cmp	r3, #0
 801cade:	f77f af2e 	ble.w	801c93e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801cae2:	4628      	mov	r0, r5
 801cae4:	f7ff fe9a 	bl	801c81c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801cae8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801caec:	1a18      	subs	r0, r3, r0
 801caee:	f8ad 0010 	strh.w	r0, [sp, #16]
 801caf2:	4628      	mov	r0, r5
 801caf4:	f7ff fea6 	bl	801c844 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801caf8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801cafc:	1a18      	subs	r0, r3, r0
 801cafe:	f8ad 0012 	strh.w	r0, [sp, #18]
 801cb02:	682b      	ldr	r3, [r5, #0]
 801cb04:	4631      	mov	r1, r6
 801cb06:	689b      	ldr	r3, [r3, #8]
 801cb08:	4628      	mov	r0, r5
 801cb0a:	4798      	blx	r3
 801cb0c:	e717      	b.n	801c93e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801cb0e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801cb0e:	b570      	push	{r4, r5, r6, lr}
 801cb10:	460c      	mov	r4, r1
 801cb12:	b086      	sub	sp, #24
 801cb14:	1d06      	adds	r6, r0, #4
 801cb16:	2300      	movs	r3, #0
 801cb18:	4631      	mov	r1, r6
 801cb1a:	4605      	mov	r5, r0
 801cb1c:	a802      	add	r0, sp, #8
 801cb1e:	9301      	str	r3, [sp, #4]
 801cb20:	f7ff fca6 	bl	801c470 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cb24:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801cb28:	8822      	ldrh	r2, [r4, #0]
 801cb2a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801cb2e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801cb32:	f8ad 0014 	strh.w	r0, [sp, #20]
 801cb36:	1ad2      	subs	r2, r2, r3
 801cb38:	8863      	ldrh	r3, [r4, #2]
 801cb3a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801cb3e:	1a5b      	subs	r3, r3, r1
 801cb40:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801cb44:	f8ad 1016 	strh.w	r1, [sp, #22]
 801cb48:	aa01      	add	r2, sp, #4
 801cb4a:	a904      	add	r1, sp, #16
 801cb4c:	4630      	mov	r0, r6
 801cb4e:	f8ad 3012 	strh.w	r3, [sp, #18]
 801cb52:	f7fb fd25 	bl	80185a0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801cb56:	9a01      	ldr	r2, [sp, #4]
 801cb58:	b11a      	cbz	r2, 801cb62 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801cb5a:	4621      	mov	r1, r4
 801cb5c:	4628      	mov	r0, r5
 801cb5e:	f7ff fed5 	bl	801c90c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801cb62:	b006      	add	sp, #24
 801cb64:	bd70      	pop	{r4, r5, r6, pc}

0801cb66 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801cb66:	b530      	push	{r4, r5, lr}
 801cb68:	4602      	mov	r2, r0
 801cb6a:	4604      	mov	r4, r0
 801cb6c:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801cb70:	b085      	sub	sp, #20
 801cb72:	460d      	mov	r5, r1
 801cb74:	6851      	ldr	r1, [r2, #4]
 801cb76:	466b      	mov	r3, sp
 801cb78:	c303      	stmia	r3!, {r0, r1}
 801cb7a:	4629      	mov	r1, r5
 801cb7c:	4668      	mov	r0, sp
 801cb7e:	f7fb fc37 	bl	80183f0 <_ZN8touchgfx4RectaNERKS0_>
 801cb82:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801cb86:	b12b      	cbz	r3, 801cb94 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801cb88:	4669      	mov	r1, sp
 801cb8a:	4620      	mov	r0, r4
 801cb8c:	f7ff ffbf 	bl	801cb0e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801cb90:	b005      	add	sp, #20
 801cb92:	bd30      	pop	{r4, r5, pc}
 801cb94:	3404      	adds	r4, #4
 801cb96:	4621      	mov	r1, r4
 801cb98:	a802      	add	r0, sp, #8
 801cb9a:	f7ff fc69 	bl	801c470 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801cb9e:	f8bd 3000 	ldrh.w	r3, [sp]
 801cba2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801cba6:	1a9b      	subs	r3, r3, r2
 801cba8:	f8ad 3000 	strh.w	r3, [sp]
 801cbac:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801cbb0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801cbb4:	4669      	mov	r1, sp
 801cbb6:	1a9b      	subs	r3, r3, r2
 801cbb8:	4620      	mov	r0, r4
 801cbba:	f8ad 3002 	strh.w	r3, [sp, #2]
 801cbbe:	f7fb fcb6 	bl	801852e <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801cbc2:	e7e5      	b.n	801cb90 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801cbc4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801cbc4:	680a      	ldr	r2, [r1, #0]
 801cbc6:	460b      	mov	r3, r1
 801cbc8:	6992      	ldr	r2, [r2, #24]
 801cbca:	1d01      	adds	r1, r0, #4
 801cbcc:	4618      	mov	r0, r3
 801cbce:	4710      	bx	r2

0801cbd0 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801cbd0:	4298      	cmp	r0, r3
 801cbd2:	d200      	bcs.n	801cbd6 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 801cbd4:	b913      	cbnz	r3, 801cbdc <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 801cbd6:	440a      	add	r2, r1
 801cbd8:	b210      	sxth	r0, r2
 801cbda:	4770      	bx	lr
 801cbdc:	ee07 0a90 	vmov	s15, r0
 801cbe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cbe4:	ee07 3a90 	vmov	s15, r3
 801cbe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cbec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cbf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cbf4:	ee37 7a66 	vsub.f32	s14, s14, s13
 801cbf8:	ee07 2a90 	vmov	s15, r2
 801cbfc:	ee67 5a07 	vmul.f32	s11, s14, s14
 801cc00:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801cc04:	eee5 6a87 	vfma.f32	s13, s11, s14
 801cc08:	ee07 1a90 	vmov	s15, r1
 801cc0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cc10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801cc14:	eee6 7a26 	vfma.f32	s15, s12, s13
 801cc18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801cc1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc20:	bfcc      	ite	gt
 801cc22:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 801cc26:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 801cc2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cc2e:	ee17 3a90 	vmov	r3, s15
 801cc32:	b218      	sxth	r0, r3
 801cc34:	4770      	bx	lr

0801cc36 <_ZN8touchgfx12TextProviderC1Ev>:
 801cc36:	b538      	push	{r3, r4, r5, lr}
 801cc38:	2500      	movs	r5, #0
 801cc3a:	2302      	movs	r3, #2
 801cc3c:	4604      	mov	r4, r0
 801cc3e:	e9c0 5500 	strd	r5, r5, [r0]
 801cc42:	7403      	strb	r3, [r0, #16]
 801cc44:	6145      	str	r5, [r0, #20]
 801cc46:	7605      	strb	r5, [r0, #24]
 801cc48:	83c5      	strh	r5, [r0, #30]
 801cc4a:	8405      	strh	r5, [r0, #32]
 801cc4c:	86c5      	strh	r5, [r0, #54]	; 0x36
 801cc4e:	8705      	strh	r5, [r0, #56]	; 0x38
 801cc50:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801cc52:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801cc56:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801cc5a:	220e      	movs	r2, #14
 801cc5c:	4629      	mov	r1, r5
 801cc5e:	304c      	adds	r0, #76	; 0x4c
 801cc60:	f00c ff5e 	bl	8029b20 <memset>
 801cc64:	2301      	movs	r3, #1
 801cc66:	4620      	mov	r0, r4
 801cc68:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801cc6c:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801cc70:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801cc74:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801cc78:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801cc7c:	f7f9 f8ae 	bl	8015ddc <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801cc80:	4620      	mov	r0, r4
 801cc82:	bd38      	pop	{r3, r4, r5, pc}

0801cc84 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801cc84:	b530      	push	{r4, r5, lr}
 801cc86:	2500      	movs	r5, #0
 801cc88:	2401      	movs	r4, #1
 801cc8a:	6843      	ldr	r3, [r0, #4]
 801cc8c:	b913      	cbnz	r3, 801cc94 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801cc8e:	6803      	ldr	r3, [r0, #0]
 801cc90:	b313      	cbz	r3, 801ccd8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801cc92:	6043      	str	r3, [r0, #4]
 801cc94:	7e03      	ldrb	r3, [r0, #24]
 801cc96:	b143      	cbz	r3, 801ccaa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801cc98:	6943      	ldr	r3, [r0, #20]
 801cc9a:	b12b      	cbz	r3, 801cca8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801cc9c:	881a      	ldrh	r2, [r3, #0]
 801cc9e:	b11a      	cbz	r2, 801cca8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801cca0:	1c9a      	adds	r2, r3, #2
 801cca2:	6142      	str	r2, [r0, #20]
 801cca4:	8818      	ldrh	r0, [r3, #0]
 801cca6:	bd30      	pop	{r4, r5, pc}
 801cca8:	7605      	strb	r5, [r0, #24]
 801ccaa:	6843      	ldr	r3, [r0, #4]
 801ccac:	8819      	ldrh	r1, [r3, #0]
 801ccae:	b199      	cbz	r1, 801ccd8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801ccb0:	1c9a      	adds	r2, r3, #2
 801ccb2:	2902      	cmp	r1, #2
 801ccb4:	6042      	str	r2, [r0, #4]
 801ccb6:	d1f5      	bne.n	801cca4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801ccb8:	7c03      	ldrb	r3, [r0, #16]
 801ccba:	2b01      	cmp	r3, #1
 801ccbc:	d8e5      	bhi.n	801cc8a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ccbe:	1c5a      	adds	r2, r3, #1
 801ccc0:	3302      	adds	r3, #2
 801ccc2:	7402      	strb	r2, [r0, #16]
 801ccc4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801ccc8:	6143      	str	r3, [r0, #20]
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	d0dd      	beq.n	801cc8a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ccce:	881b      	ldrh	r3, [r3, #0]
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	d0da      	beq.n	801cc8a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ccd4:	7604      	strb	r4, [r0, #24]
 801ccd6:	e7d8      	b.n	801cc8a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ccd8:	2000      	movs	r0, #0
 801ccda:	e7e4      	b.n	801cca6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801ccdc <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801ccdc:	b430      	push	{r4, r5}
 801ccde:	6001      	str	r1, [r0, #0]
 801cce0:	2100      	movs	r1, #0
 801cce2:	6041      	str	r1, [r0, #4]
 801cce4:	6815      	ldr	r5, [r2, #0]
 801cce6:	6085      	str	r5, [r0, #8]
 801cce8:	6852      	ldr	r2, [r2, #4]
 801ccea:	6443      	str	r3, [r0, #68]	; 0x44
 801ccec:	9b02      	ldr	r3, [sp, #8]
 801ccee:	60c2      	str	r2, [r0, #12]
 801ccf0:	7401      	strb	r1, [r0, #16]
 801ccf2:	6141      	str	r1, [r0, #20]
 801ccf4:	7601      	strb	r1, [r0, #24]
 801ccf6:	8701      	strh	r1, [r0, #56]	; 0x38
 801ccf8:	8401      	strh	r1, [r0, #32]
 801ccfa:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801ccfe:	6483      	str	r3, [r0, #72]	; 0x48
 801cd00:	bc30      	pop	{r4, r5}
 801cd02:	f7f9 b86b 	b.w	8015ddc <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801cd06 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801cd06:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd08:	4605      	mov	r5, r0
 801cd0a:	4608      	mov	r0, r1
 801cd0c:	b1e9      	cbz	r1, 801cd4a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801cd0e:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801cd12:	460b      	mov	r3, r1
 801cd14:	f101 0708 	add.w	r7, r1, #8
 801cd18:	4622      	mov	r2, r4
 801cd1a:	6818      	ldr	r0, [r3, #0]
 801cd1c:	6859      	ldr	r1, [r3, #4]
 801cd1e:	4626      	mov	r6, r4
 801cd20:	c603      	stmia	r6!, {r0, r1}
 801cd22:	3308      	adds	r3, #8
 801cd24:	42bb      	cmp	r3, r7
 801cd26:	4634      	mov	r4, r6
 801cd28:	d1f7      	bne.n	801cd1a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801cd2a:	6818      	ldr	r0, [r3, #0]
 801cd2c:	6030      	str	r0, [r6, #0]
 801cd2e:	889b      	ldrh	r3, [r3, #4]
 801cd30:	80b3      	strh	r3, [r6, #4]
 801cd32:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801cd36:	015b      	lsls	r3, r3, #5
 801cd38:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801cd3c:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801cd40:	430b      	orrs	r3, r1
 801cd42:	425b      	negs	r3, r3
 801cd44:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801cd48:	4610      	mov	r0, r2
 801cd4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cd4c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801cd4c:	b538      	push	{r3, r4, r5, lr}
 801cd4e:	460c      	mov	r4, r1
 801cd50:	6811      	ldr	r1, [r2, #0]
 801cd52:	4610      	mov	r0, r2
 801cd54:	68cd      	ldr	r5, [r1, #12]
 801cd56:	4619      	mov	r1, r3
 801cd58:	47a8      	blx	r5
 801cd5a:	2800      	cmp	r0, #0
 801cd5c:	bf08      	it	eq
 801cd5e:	4620      	moveq	r0, r4
 801cd60:	bd38      	pop	{r3, r4, r5, pc}
	...

0801cd64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801cd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd66:	4604      	mov	r4, r0
 801cd68:	4615      	mov	r5, r2
 801cd6a:	4608      	mov	r0, r1
 801cd6c:	b93a      	cbnz	r2, 801cd7e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801cd6e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801cd72:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801cd76:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801cd7a:	4628      	mov	r0, r5
 801cd7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd7e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801cd82:	8893      	ldrh	r3, [r2, #4]
 801cd84:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801cd88:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801cd8c:	79ee      	ldrb	r6, [r5, #7]
 801cd8e:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801cd92:	4316      	orrs	r6, r2
 801cd94:	19da      	adds	r2, r3, r7
 801cd96:	b291      	uxth	r1, r2
 801cd98:	291d      	cmp	r1, #29
 801cd9a:	b2b7      	uxth	r7, r6
 801cd9c:	d87a      	bhi.n	801ce94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 801cd9e:	2201      	movs	r2, #1
 801cda0:	408a      	lsls	r2, r1
 801cda2:	4975      	ldr	r1, [pc, #468]	; (801cf78 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801cda4:	420a      	tst	r2, r1
 801cda6:	ea4f 06e6 	mov.w	r6, r6, asr #3
 801cdaa:	d12d      	bne.n	801ce08 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801cdac:	f412 7f60 	tst.w	r2, #896	; 0x380
 801cdb0:	d070      	beq.n	801ce94 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x130>
 801cdb2:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801cdb6:	462b      	mov	r3, r5
 801cdb8:	f105 0e08 	add.w	lr, r5, #8
 801cdbc:	4615      	mov	r5, r2
 801cdbe:	6818      	ldr	r0, [r3, #0]
 801cdc0:	6859      	ldr	r1, [r3, #4]
 801cdc2:	4694      	mov	ip, r2
 801cdc4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801cdc8:	3308      	adds	r3, #8
 801cdca:	4573      	cmp	r3, lr
 801cdcc:	4662      	mov	r2, ip
 801cdce:	d1f6      	bne.n	801cdbe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 801cdd0:	6818      	ldr	r0, [r3, #0]
 801cdd2:	f8cc 0000 	str.w	r0, [ip]
 801cdd6:	889b      	ldrh	r3, [r3, #4]
 801cdd8:	f8ac 3004 	strh.w	r3, [ip, #4]
 801cddc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801cde0:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801cde4:	b2b3      	uxth	r3, r6
 801cde6:	1aca      	subs	r2, r1, r3
 801cde8:	b292      	uxth	r2, r2
 801cdea:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801cdee:	10d2      	asrs	r2, r2, #3
 801cdf0:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801cdf4:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801cdf8:	4302      	orrs	r2, r0
 801cdfa:	1bcf      	subs	r7, r1, r7
 801cdfc:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801ce00:	1afb      	subs	r3, r7, r3
 801ce02:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801ce06:	e7b8      	b.n	801cd7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801ce08:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801ce0a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ce0e:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801ce10:	f640 6333 	movw	r3, #3635	; 0xe33
 801ce14:	4299      	cmp	r1, r3
 801ce16:	d110      	bne.n	801ce3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801ce18:	6803      	ldr	r3, [r0, #0]
 801ce1a:	68db      	ldr	r3, [r3, #12]
 801ce1c:	4798      	blx	r3
 801ce1e:	7b41      	ldrb	r1, [r0, #13]
 801ce20:	00cb      	lsls	r3, r1, #3
 801ce22:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801ce26:	7a03      	ldrb	r3, [r0, #8]
 801ce28:	0648      	lsls	r0, r1, #25
 801ce2a:	ea43 0302 	orr.w	r3, r3, r2
 801ce2e:	bf44      	itt	mi
 801ce30:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801ce34:	b21b      	sxthmi	r3, r3
 801ce36:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ce3a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801ce3e:	443b      	add	r3, r7
 801ce40:	4433      	add	r3, r6
 801ce42:	b29b      	uxth	r3, r3
 801ce44:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801ce48:	462a      	mov	r2, r5
 801ce4a:	f105 0c08 	add.w	ip, r5, #8
 801ce4e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ce52:	4635      	mov	r5, r6
 801ce54:	6810      	ldr	r0, [r2, #0]
 801ce56:	6851      	ldr	r1, [r2, #4]
 801ce58:	4637      	mov	r7, r6
 801ce5a:	c703      	stmia	r7!, {r0, r1}
 801ce5c:	3208      	adds	r2, #8
 801ce5e:	4562      	cmp	r2, ip
 801ce60:	463e      	mov	r6, r7
 801ce62:	d1f7      	bne.n	801ce54 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801ce64:	6810      	ldr	r0, [r2, #0]
 801ce66:	6038      	str	r0, [r7, #0]
 801ce68:	8892      	ldrh	r2, [r2, #4]
 801ce6a:	80ba      	strh	r2, [r7, #4]
 801ce6c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801ce70:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801ce74:	10db      	asrs	r3, r3, #3
 801ce76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801ce7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ce7e:	4313      	orrs	r3, r2
 801ce80:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801ce84:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801ce88:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801ce8c:	1a9b      	subs	r3, r3, r2
 801ce8e:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801ce92:	e772      	b.n	801cd7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801ce94:	f023 0204 	bic.w	r2, r3, #4
 801ce98:	f640 611b 	movw	r1, #3611	; 0xe1b
 801ce9c:	428a      	cmp	r2, r1
 801ce9e:	d003      	beq.n	801cea8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x144>
 801cea0:	f640 621d 	movw	r2, #3613	; 0xe1d
 801cea4:	4293      	cmp	r3, r2
 801cea6:	d120      	bne.n	801ceea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x186>
 801cea8:	3b01      	subs	r3, #1
 801ceaa:	4602      	mov	r2, r0
 801ceac:	b29b      	uxth	r3, r3
 801ceae:	4629      	mov	r1, r5
 801ceb0:	4620      	mov	r0, r4
 801ceb2:	f7ff ff4b 	bl	801cd4c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801ceb6:	7b41      	ldrb	r1, [r0, #13]
 801ceb8:	00cb      	lsls	r3, r1, #3
 801ceba:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cebe:	7a03      	ldrb	r3, [r0, #8]
 801cec0:	0649      	lsls	r1, r1, #25
 801cec2:	ea43 0302 	orr.w	r3, r3, r2
 801cec6:	bf44      	itt	mi
 801cec8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cecc:	b21b      	sxthmi	r3, r3
 801cece:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801ced2:	7b6b      	ldrb	r3, [r5, #13]
 801ced4:	7aaa      	ldrb	r2, [r5, #10]
 801ced6:	005b      	lsls	r3, r3, #1
 801ced8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cedc:	4313      	orrs	r3, r2
 801cede:	115a      	asrs	r2, r3, #5
 801cee0:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801cee4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801cee8:	e036      	b.n	801cf58 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801ceea:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801ceee:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801cef2:	7a2a      	ldrb	r2, [r5, #8]
 801cef4:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801cef8:	ea42 0201 	orr.w	r2, r2, r1
 801cefc:	bf1c      	itt	ne
 801cefe:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801cf02:	b212      	sxthne	r2, r2
 801cf04:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801cf08:	f640 6109 	movw	r1, #3593	; 0xe09
 801cf0c:	f023 0210 	bic.w	r2, r3, #16
 801cf10:	428a      	cmp	r2, r1
 801cf12:	d003      	beq.n	801cf1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b8>
 801cf14:	f640 6213 	movw	r2, #3603	; 0xe13
 801cf18:	4293      	cmp	r3, r2
 801cf1a:	d12a      	bne.n	801cf72 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801cf1c:	7b6e      	ldrb	r6, [r5, #13]
 801cf1e:	0076      	lsls	r6, r6, #1
 801cf20:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801cf24:	7aae      	ldrb	r6, [r5, #10]
 801cf26:	4316      	orrs	r6, r2
 801cf28:	f640 6213 	movw	r2, #3603	; 0xe13
 801cf2c:	4293      	cmp	r3, r2
 801cf2e:	bf18      	it	ne
 801cf30:	f103 33ff 	addne.w	r3, r3, #4294967295
 801cf34:	4602      	mov	r2, r0
 801cf36:	bf14      	ite	ne
 801cf38:	b29b      	uxthne	r3, r3
 801cf3a:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801cf3e:	4629      	mov	r1, r5
 801cf40:	4620      	mov	r0, r4
 801cf42:	f7ff ff03 	bl	801cd4c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801cf46:	7b43      	ldrb	r3, [r0, #13]
 801cf48:	7a82      	ldrb	r2, [r0, #10]
 801cf4a:	005b      	lsls	r3, r3, #1
 801cf4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cf50:	4313      	orrs	r3, r2
 801cf52:	1af6      	subs	r6, r6, r3
 801cf54:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801cf58:	7b69      	ldrb	r1, [r5, #13]
 801cf5a:	00cb      	lsls	r3, r1, #3
 801cf5c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cf60:	7a2b      	ldrb	r3, [r5, #8]
 801cf62:	4313      	orrs	r3, r2
 801cf64:	064a      	lsls	r2, r1, #25
 801cf66:	bf44      	itt	mi
 801cf68:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cf6c:	b21b      	sxthmi	r3, r3
 801cf6e:	1bdb      	subs	r3, r3, r7
 801cf70:	e747      	b.n	801ce02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801cf72:	2300      	movs	r3, #0
 801cf74:	e7b6      	b.n	801cee4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x180>
 801cf76:	bf00      	nop
 801cf78:	3fc00079 	.word	0x3fc00079

0801cf7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801cf7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cf80:	4604      	mov	r4, r0
 801cf82:	b942      	cbnz	r2, 801cf96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801cf84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801cf88:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801cf8c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801cf90:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801cf94:	e047      	b.n	801d026 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801cf96:	7b51      	ldrb	r1, [r2, #13]
 801cf98:	8893      	ldrh	r3, [r2, #4]
 801cf9a:	010d      	lsls	r5, r1, #4
 801cf9c:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801cfa0:	79d5      	ldrb	r5, [r2, #7]
 801cfa2:	4305      	orrs	r5, r0
 801cfa4:	2d04      	cmp	r5, #4
 801cfa6:	bfcc      	ite	gt
 801cfa8:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801cfac:	f04f 0e01 	movle.w	lr, #1
 801cfb0:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801cfb4:	f200 80ab 	bhi.w	801d10e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801cfb8:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801cfbc:	4283      	cmp	r3, r0
 801cfbe:	d216      	bcs.n	801cfee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cfc0:	f240 605b 	movw	r0, #1627	; 0x65b
 801cfc4:	4283      	cmp	r3, r0
 801cfc6:	d859      	bhi.n	801d07c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801cfc8:	f240 6057 	movw	r0, #1623	; 0x657
 801cfcc:	4283      	cmp	r3, r0
 801cfce:	d20e      	bcs.n	801cfee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cfd0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801cfd4:	d24a      	bcs.n	801d06c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801cfd6:	f240 604e 	movw	r0, #1614	; 0x64e
 801cfda:	4283      	cmp	r3, r0
 801cfdc:	d207      	bcs.n	801cfee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cfde:	f240 601a 	movw	r0, #1562	; 0x61a
 801cfe2:	4283      	cmp	r3, r0
 801cfe4:	d02a      	beq.n	801d03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cfe6:	d821      	bhi.n	801d02c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801cfe8:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801cfec:	d35b      	bcc.n	801d0a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801cfee:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801cff2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cff6:	f040 80d0 	bne.w	801d19a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801cffa:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801cffe:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d002:	f040 80ca 	bne.w	801d19a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801d006:	00cb      	lsls	r3, r1, #3
 801d008:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d00c:	7a13      	ldrb	r3, [r2, #8]
 801d00e:	0649      	lsls	r1, r1, #25
 801d010:	ea43 0300 	orr.w	r3, r3, r0
 801d014:	bf44      	itt	mi
 801d016:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d01a:	b21b      	sxthmi	r3, r3
 801d01c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d020:	1b5d      	subs	r5, r3, r5
 801d022:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d026:	4610      	mov	r0, r2
 801d028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d02c:	f240 604b 	movw	r0, #1611	; 0x64b
 801d030:	4283      	cmp	r3, r0
 801d032:	d338      	bcc.n	801d0a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d034:	f240 604c 	movw	r0, #1612	; 0x64c
 801d038:	4283      	cmp	r3, r0
 801d03a:	d9d8      	bls.n	801cfee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d03c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801d040:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801d044:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d048:	f040 80f2 	bne.w	801d230 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801d04c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d050:	f040 80ee 	bne.w	801d230 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801d054:	00cb      	lsls	r3, r1, #3
 801d056:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d05a:	7a13      	ldrb	r3, [r2, #8]
 801d05c:	064e      	lsls	r6, r1, #25
 801d05e:	ea43 0300 	orr.w	r3, r3, r0
 801d062:	bf44      	itt	mi
 801d064:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d068:	b21b      	sxthmi	r3, r3
 801d06a:	e7d9      	b.n	801d020 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801d06c:	f240 6054 	movw	r0, #1620	; 0x654
 801d070:	4283      	cmp	r3, r0
 801d072:	d8e3      	bhi.n	801d03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d074:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801d078:	d9e0      	bls.n	801d03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d07a:	e7b8      	b.n	801cfee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d07c:	f240 6074 	movw	r0, #1652	; 0x674
 801d080:	4283      	cmp	r3, r0
 801d082:	d0b4      	beq.n	801cfee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d084:	d82d      	bhi.n	801d0e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801d086:	f240 605e 	movw	r0, #1630	; 0x65e
 801d08a:	4283      	cmp	r3, r0
 801d08c:	d804      	bhi.n	801d098 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801d08e:	f240 605d 	movw	r0, #1629	; 0x65d
 801d092:	4283      	cmp	r3, r0
 801d094:	d3d2      	bcc.n	801d03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d096:	e7aa      	b.n	801cfee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d098:	f240 605f 	movw	r0, #1631	; 0x65f
 801d09c:	4283      	cmp	r3, r0
 801d09e:	d0cd      	beq.n	801d03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d0a0:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801d0a4:	d0a3      	beq.n	801cfee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d0a6:	00cb      	lsls	r3, r1, #3
 801d0a8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801d0ac:	7a13      	ldrb	r3, [r2, #8]
 801d0ae:	0649      	lsls	r1, r1, #25
 801d0b0:	ea43 0300 	orr.w	r3, r3, r0
 801d0b4:	bf44      	itt	mi
 801d0b6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d0ba:	b21b      	sxthmi	r3, r3
 801d0bc:	1b5d      	subs	r5, r3, r5
 801d0be:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d0c2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d0c6:	7b53      	ldrb	r3, [r2, #13]
 801d0c8:	015b      	lsls	r3, r3, #5
 801d0ca:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801d0ce:	7993      	ldrb	r3, [r2, #6]
 801d0d0:	430b      	orrs	r3, r1
 801d0d2:	005b      	lsls	r3, r3, #1
 801d0d4:	2105      	movs	r1, #5
 801d0d6:	fb93 f3f1 	sdiv	r3, r3, r1
 801d0da:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801d0de:	440b      	add	r3, r1
 801d0e0:	e756      	b.n	801cf90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801d0e2:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801d0e6:	4283      	cmp	r3, r0
 801d0e8:	d809      	bhi.n	801d0fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801d0ea:	f240 60df 	movw	r0, #1759	; 0x6df
 801d0ee:	4283      	cmp	r3, r0
 801d0f0:	f4bf af7d 	bcs.w	801cfee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d0f4:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801d0f8:	2b05      	cmp	r3, #5
 801d0fa:	d8d4      	bhi.n	801d0a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d0fc:	e777      	b.n	801cfee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d0fe:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801d102:	4283      	cmp	r3, r0
 801d104:	d09a      	beq.n	801d03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d106:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801d10a:	4283      	cmp	r3, r0
 801d10c:	e7ca      	b.n	801d0a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801d10e:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801d112:	d22b      	bcs.n	801d16c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801d114:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801d118:	4283      	cmp	r3, r0
 801d11a:	d28f      	bcs.n	801d03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d11c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801d120:	4283      	cmp	r3, r0
 801d122:	d816      	bhi.n	801d152 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801d124:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801d128:	4283      	cmp	r3, r0
 801d12a:	f4bf af60 	bcs.w	801cfee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d12e:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801d132:	4283      	cmp	r3, r0
 801d134:	d80a      	bhi.n	801d14c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801d136:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801d13a:	4283      	cmp	r3, r0
 801d13c:	f4bf af57 	bcs.w	801cfee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d140:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801d144:	4283      	cmp	r3, r0
 801d146:	f43f af79 	beq.w	801d03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d14a:	e7ac      	b.n	801d0a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801d14c:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801d150:	e7f8      	b.n	801d144 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801d152:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801d156:	4283      	cmp	r3, r0
 801d158:	d802      	bhi.n	801d160 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801d15a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801d15e:	e798      	b.n	801d092 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801d160:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801d164:	4283      	cmp	r3, r0
 801d166:	f47f af42 	bne.w	801cfee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d16a:	e767      	b.n	801d03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d16c:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801d170:	4283      	cmp	r3, r0
 801d172:	f43f af63 	beq.w	801d03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d176:	d802      	bhi.n	801d17e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801d178:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801d17c:	e7f2      	b.n	801d164 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801d17e:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801d182:	4283      	cmp	r3, r0
 801d184:	d805      	bhi.n	801d192 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801d186:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801d18a:	4283      	cmp	r3, r0
 801d18c:	f4ff af2f 	bcc.w	801cfee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801d190:	e754      	b.n	801d03c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801d192:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801d196:	4283      	cmp	r3, r0
 801d198:	e7af      	b.n	801d0fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801d19a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801d19e:	4617      	mov	r7, r2
 801d1a0:	f102 0808 	add.w	r8, r2, #8
 801d1a4:	4666      	mov	r6, ip
 801d1a6:	6838      	ldr	r0, [r7, #0]
 801d1a8:	6879      	ldr	r1, [r7, #4]
 801d1aa:	46e6      	mov	lr, ip
 801d1ac:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801d1b0:	3708      	adds	r7, #8
 801d1b2:	4547      	cmp	r7, r8
 801d1b4:	46f4      	mov	ip, lr
 801d1b6:	d1f6      	bne.n	801d1a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801d1b8:	6838      	ldr	r0, [r7, #0]
 801d1ba:	f8ce 0000 	str.w	r0, [lr]
 801d1be:	88b9      	ldrh	r1, [r7, #4]
 801d1c0:	f8ae 1004 	strh.w	r1, [lr, #4]
 801d1c4:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801d1c8:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d1cc:	d009      	beq.n	801d1e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801d1ce:	7b51      	ldrb	r1, [r2, #13]
 801d1d0:	7992      	ldrb	r2, [r2, #6]
 801d1d2:	0149      	lsls	r1, r1, #5
 801d1d4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d1d8:	4311      	orrs	r1, r2
 801d1da:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d1de:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801d1e2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d1e6:	b2ad      	uxth	r5, r5
 801d1e8:	d00d      	beq.n	801d206 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 801d1ea:	442b      	add	r3, r5
 801d1ec:	b29b      	uxth	r3, r3
 801d1ee:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d1f2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d1f6:	10db      	asrs	r3, r3, #3
 801d1f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d1fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d200:	4313      	orrs	r3, r2
 801d202:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d206:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801d20a:	00cb      	lsls	r3, r1, #3
 801d20c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d210:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801d214:	064f      	lsls	r7, r1, #25
 801d216:	ea43 0302 	orr.w	r3, r3, r2
 801d21a:	bf44      	itt	mi
 801d21c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d220:	b21b      	sxthmi	r3, r3
 801d222:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801d226:	1b5b      	subs	r3, r3, r5
 801d228:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801d22c:	4632      	mov	r2, r6
 801d22e:	e6fa      	b.n	801d026 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801d230:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801d234:	4617      	mov	r7, r2
 801d236:	f102 0908 	add.w	r9, r2, #8
 801d23a:	4666      	mov	r6, ip
 801d23c:	6838      	ldr	r0, [r7, #0]
 801d23e:	6879      	ldr	r1, [r7, #4]
 801d240:	46e0      	mov	r8, ip
 801d242:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801d246:	3708      	adds	r7, #8
 801d248:	454f      	cmp	r7, r9
 801d24a:	46c4      	mov	ip, r8
 801d24c:	d1f6      	bne.n	801d23c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801d24e:	6838      	ldr	r0, [r7, #0]
 801d250:	f8c8 0000 	str.w	r0, [r8]
 801d254:	88b9      	ldrh	r1, [r7, #4]
 801d256:	f8a8 1004 	strh.w	r1, [r8, #4]
 801d25a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801d25e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801d262:	d009      	beq.n	801d278 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 801d264:	7b51      	ldrb	r1, [r2, #13]
 801d266:	7992      	ldrb	r2, [r2, #6]
 801d268:	0149      	lsls	r1, r1, #5
 801d26a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801d26e:	4311      	orrs	r1, r2
 801d270:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801d274:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801d278:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801d27c:	d00e      	beq.n	801d29c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801d27e:	eba3 030e 	sub.w	r3, r3, lr
 801d282:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801d286:	b29b      	uxth	r3, r3
 801d288:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801d28c:	10db      	asrs	r3, r3, #3
 801d28e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d292:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801d296:	4313      	orrs	r3, r2
 801d298:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d29c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801d2a0:	00cb      	lsls	r3, r1, #3
 801d2a2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801d2a6:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801d2aa:	0648      	lsls	r0, r1, #25
 801d2ac:	ea43 0302 	orr.w	r3, r3, r2
 801d2b0:	bf44      	itt	mi
 801d2b2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801d2b6:	b21b      	sxthmi	r3, r3
 801d2b8:	1b5d      	subs	r5, r3, r5
 801d2ba:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801d2be:	e7b5      	b.n	801d22c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0801d2c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801d2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2c4:	461e      	mov	r6, r3
 801d2c6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d2c8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d2cc:	4604      	mov	r4, r0
 801d2ce:	4617      	mov	r7, r2
 801d2d0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d2d4:	f7f8 fcdc 	bl	8015c90 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d2d8:	4605      	mov	r5, r0
 801d2da:	b918      	cbnz	r0, 801d2e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801d2dc:	6030      	str	r0, [r6, #0]
 801d2de:	4628      	mov	r0, r5
 801d2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d2e4:	683b      	ldr	r3, [r7, #0]
 801d2e6:	4601      	mov	r1, r0
 801d2e8:	68db      	ldr	r3, [r3, #12]
 801d2ea:	4638      	mov	r0, r7
 801d2ec:	4798      	blx	r3
 801d2ee:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801d2f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d2f6:	4602      	mov	r2, r0
 801d2f8:	6030      	str	r0, [r6, #0]
 801d2fa:	d213      	bcs.n	801d324 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801d2fc:	4643      	mov	r3, r8
 801d2fe:	4639      	mov	r1, r7
 801d300:	4620      	mov	r0, r4
 801d302:	f7ff fe3b 	bl	801cf7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d306:	6030      	str	r0, [r6, #0]
 801d308:	6833      	ldr	r3, [r6, #0]
 801d30a:	b143      	cbz	r3, 801d31e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801d30c:	7b5a      	ldrb	r2, [r3, #13]
 801d30e:	7a9b      	ldrb	r3, [r3, #10]
 801d310:	0052      	lsls	r2, r2, #1
 801d312:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d316:	4313      	orrs	r3, r2
 801d318:	bf0c      	ite	eq
 801d31a:	2301      	moveq	r3, #1
 801d31c:	2300      	movne	r3, #0
 801d31e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801d322:	e7dc      	b.n	801d2de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801d324:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801d328:	b29b      	uxth	r3, r3
 801d32a:	2b7f      	cmp	r3, #127	; 0x7f
 801d32c:	d804      	bhi.n	801d338 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801d32e:	4639      	mov	r1, r7
 801d330:	4620      	mov	r0, r4
 801d332:	f7ff fd17 	bl	801cd64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d336:	e7e6      	b.n	801d306 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801d338:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801d33c:	2b00      	cmp	r3, #0
 801d33e:	d0e3      	beq.n	801d308 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d340:	f640 1302 	movw	r3, #2306	; 0x902
 801d344:	429d      	cmp	r5, r3
 801d346:	d1df      	bne.n	801d308 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d348:	4601      	mov	r1, r0
 801d34a:	4620      	mov	r0, r4
 801d34c:	f7ff fcdb 	bl	801cd06 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d350:	e7d9      	b.n	801d306 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801d352 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801d352:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d356:	461e      	mov	r6, r3
 801d358:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d35a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d35e:	4604      	mov	r4, r0
 801d360:	4617      	mov	r7, r2
 801d362:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d366:	f7f8 fc93 	bl	8015c90 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d36a:	4605      	mov	r5, r0
 801d36c:	b918      	cbnz	r0, 801d376 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801d36e:	6030      	str	r0, [r6, #0]
 801d370:	4628      	mov	r0, r5
 801d372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d376:	683b      	ldr	r3, [r7, #0]
 801d378:	4601      	mov	r1, r0
 801d37a:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801d37e:	4638      	mov	r0, r7
 801d380:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d384:	47c8      	blx	r9
 801d386:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801d38a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d38e:	4602      	mov	r2, r0
 801d390:	6030      	str	r0, [r6, #0]
 801d392:	d213      	bcs.n	801d3bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801d394:	4643      	mov	r3, r8
 801d396:	4639      	mov	r1, r7
 801d398:	4620      	mov	r0, r4
 801d39a:	f7ff fdef 	bl	801cf7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d39e:	6030      	str	r0, [r6, #0]
 801d3a0:	6833      	ldr	r3, [r6, #0]
 801d3a2:	b143      	cbz	r3, 801d3b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801d3a4:	7b5a      	ldrb	r2, [r3, #13]
 801d3a6:	7a9b      	ldrb	r3, [r3, #10]
 801d3a8:	0052      	lsls	r2, r2, #1
 801d3aa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d3ae:	4313      	orrs	r3, r2
 801d3b0:	bf0c      	ite	eq
 801d3b2:	2301      	moveq	r3, #1
 801d3b4:	2300      	movne	r3, #0
 801d3b6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801d3ba:	e7d9      	b.n	801d370 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801d3bc:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801d3c0:	b29b      	uxth	r3, r3
 801d3c2:	2b7f      	cmp	r3, #127	; 0x7f
 801d3c4:	d804      	bhi.n	801d3d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801d3c6:	4639      	mov	r1, r7
 801d3c8:	4620      	mov	r0, r4
 801d3ca:	f7ff fccb 	bl	801cd64 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d3ce:	e7e6      	b.n	801d39e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801d3d0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	d0e3      	beq.n	801d3a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801d3d8:	f640 1302 	movw	r3, #2306	; 0x902
 801d3dc:	429d      	cmp	r5, r3
 801d3de:	d1df      	bne.n	801d3a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801d3e0:	4601      	mov	r1, r0
 801d3e2:	4620      	mov	r0, r4
 801d3e4:	f7ff fc8f 	bl	801cd06 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d3e8:	e7d9      	b.n	801d39e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801d3ea <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801d3ea:	b510      	push	{r4, lr}
 801d3ec:	4604      	mov	r4, r0
 801d3ee:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801d3f2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d3f4:	b1f1      	cbz	r1, 801d434 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801d3f6:	2b0a      	cmp	r3, #10
 801d3f8:	d02f      	beq.n	801d45a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801d3fa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801d3fc:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801d400:	3901      	subs	r1, #1
 801d402:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801d404:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801d408:	1c51      	adds	r1, r2, #1
 801d40a:	b289      	uxth	r1, r1
 801d40c:	2901      	cmp	r1, #1
 801d40e:	bf84      	itt	hi
 801d410:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d414:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801d416:	f103 0201 	add.w	r2, r3, #1
 801d41a:	8722      	strh	r2, [r4, #56]	; 0x38
 801d41c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d41e:	bf98      	it	ls
 801d420:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801d422:	4413      	add	r3, r2
 801d424:	b29b      	uxth	r3, r3
 801d426:	2b09      	cmp	r3, #9
 801d428:	bf88      	it	hi
 801d42a:	3b0a      	subhi	r3, #10
 801d42c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d430:	8458      	strh	r0, [r3, #34]	; 0x22
 801d432:	e7dc      	b.n	801d3ee <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801d434:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d436:	2b0a      	cmp	r3, #10
 801d438:	d00f      	beq.n	801d45a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801d43a:	4620      	mov	r0, r4
 801d43c:	f7ff fc22 	bl	801cc84 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801d440:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d442:	1c5a      	adds	r2, r3, #1
 801d444:	8722      	strh	r2, [r4, #56]	; 0x38
 801d446:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d448:	4413      	add	r3, r2
 801d44a:	b29b      	uxth	r3, r3
 801d44c:	2b09      	cmp	r3, #9
 801d44e:	bf88      	it	hi
 801d450:	3b0a      	subhi	r3, #10
 801d452:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d456:	8458      	strh	r0, [r3, #34]	; 0x22
 801d458:	e7ec      	b.n	801d434 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801d45a:	bd10      	pop	{r4, pc}

0801d45c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801d45c:	b538      	push	{r3, r4, r5, lr}
 801d45e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d460:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801d464:	4604      	mov	r4, r0
 801d466:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801d468:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801d46a:	3a01      	subs	r2, #1
 801d46c:	8702      	strh	r2, [r0, #56]	; 0x38
 801d46e:	1c5a      	adds	r2, r3, #1
 801d470:	b292      	uxth	r2, r2
 801d472:	2a09      	cmp	r2, #9
 801d474:	bf86      	itte	hi
 801d476:	3b09      	subhi	r3, #9
 801d478:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801d47a:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801d47c:	f7ff ffb5 	bl	801d3ea <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d480:	8c23      	ldrh	r3, [r4, #32]
 801d482:	2b01      	cmp	r3, #1
 801d484:	bf9c      	itt	ls
 801d486:	3301      	addls	r3, #1
 801d488:	8423      	strhls	r3, [r4, #32]
 801d48a:	8be3      	ldrh	r3, [r4, #30]
 801d48c:	b90b      	cbnz	r3, 801d492 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801d48e:	2302      	movs	r3, #2
 801d490:	83e3      	strh	r3, [r4, #30]
 801d492:	8be3      	ldrh	r3, [r4, #30]
 801d494:	3b01      	subs	r3, #1
 801d496:	b29b      	uxth	r3, r3
 801d498:	83e3      	strh	r3, [r4, #30]
 801d49a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d49e:	4628      	mov	r0, r5
 801d4a0:	8365      	strh	r5, [r4, #26]
 801d4a2:	bd38      	pop	{r3, r4, r5, pc}

0801d4a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801d4a4:	428a      	cmp	r2, r1
 801d4a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d4aa:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801d4ac:	d931      	bls.n	801d512 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 801d4ae:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801d4b0:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801d4b4:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801d4b8:	19ee      	adds	r6, r5, r7
 801d4ba:	1a54      	subs	r4, r2, r1
 801d4bc:	3e01      	subs	r6, #1
 801d4be:	fa1f fe84 	uxth.w	lr, r4
 801d4c2:	b2b4      	uxth	r4, r6
 801d4c4:	eba4 090e 	sub.w	r9, r4, lr
 801d4c8:	fa1f f989 	uxth.w	r9, r9
 801d4cc:	2c09      	cmp	r4, #9
 801d4ce:	4626      	mov	r6, r4
 801d4d0:	bf88      	it	hi
 801d4d2:	f1a4 060a 	subhi.w	r6, r4, #10
 801d4d6:	f1bc 0f00 	cmp.w	ip, #0
 801d4da:	bf08      	it	eq
 801d4dc:	f04f 0c02 	moveq.w	ip, #2
 801d4e0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d4e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d4e8:	fa1f fc8c 	uxth.w	ip, ip
 801d4ec:	3c01      	subs	r4, #1
 801d4ee:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801d4f2:	b2a4      	uxth	r4, r4
 801d4f4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801d4f8:	454c      	cmp	r4, r9
 801d4fa:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801d4fe:	d1e5      	bne.n	801d4cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801d500:	eba5 050e 	sub.w	r5, r5, lr
 801d504:	eb0e 0408 	add.w	r4, lr, r8
 801d508:	8705      	strh	r5, [r0, #56]	; 0x38
 801d50a:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801d50e:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801d512:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801d514:	1a64      	subs	r4, r4, r1
 801d516:	4439      	add	r1, r7
 801d518:	b289      	uxth	r1, r1
 801d51a:	2909      	cmp	r1, #9
 801d51c:	bf88      	it	hi
 801d51e:	390a      	subhi	r1, #10
 801d520:	8704      	strh	r4, [r0, #56]	; 0x38
 801d522:	86c1      	strh	r1, [r0, #54]	; 0x36
 801d524:	250a      	movs	r5, #10
 801d526:	b18a      	cbz	r2, 801d54c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 801d528:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801d52a:	3a01      	subs	r2, #1
 801d52c:	b292      	uxth	r2, r2
 801d52e:	3101      	adds	r1, #1
 801d530:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801d534:	8701      	strh	r1, [r0, #56]	; 0x38
 801d536:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801d538:	b901      	cbnz	r1, 801d53c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 801d53a:	86c5      	strh	r5, [r0, #54]	; 0x36
 801d53c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801d53e:	3901      	subs	r1, #1
 801d540:	b289      	uxth	r1, r1
 801d542:	86c1      	strh	r1, [r0, #54]	; 0x36
 801d544:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801d548:	844c      	strh	r4, [r1, #34]	; 0x22
 801d54a:	e7ec      	b.n	801d526 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 801d54c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d550:	f7ff bf4b 	b.w	801d3ea <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801d554 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801d554:	b570      	push	{r4, r5, r6, lr}
 801d556:	2500      	movs	r5, #0
 801d558:	4295      	cmp	r5, r2
 801d55a:	d011      	beq.n	801d580 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801d55c:	8bc4      	ldrh	r4, [r0, #30]
 801d55e:	f831 6b02 	ldrh.w	r6, [r1], #2
 801d562:	4414      	add	r4, r2
 801d564:	3c01      	subs	r4, #1
 801d566:	1b64      	subs	r4, r4, r5
 801d568:	b2a4      	uxth	r4, r4
 801d56a:	2c01      	cmp	r4, #1
 801d56c:	bf88      	it	hi
 801d56e:	3c02      	subhi	r4, #2
 801d570:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d574:	8b64      	ldrh	r4, [r4, #26]
 801d576:	42b4      	cmp	r4, r6
 801d578:	d117      	bne.n	801d5aa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801d57a:	3501      	adds	r5, #1
 801d57c:	b2ad      	uxth	r5, r5
 801d57e:	e7eb      	b.n	801d558 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801d580:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d584:	2400      	movs	r4, #0
 801d586:	4413      	add	r3, r2
 801d588:	b2a2      	uxth	r2, r4
 801d58a:	429a      	cmp	r2, r3
 801d58c:	da0f      	bge.n	801d5ae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801d58e:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801d590:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801d594:	4432      	add	r2, r6
 801d596:	b292      	uxth	r2, r2
 801d598:	2a09      	cmp	r2, #9
 801d59a:	bf88      	it	hi
 801d59c:	3a0a      	subhi	r2, #10
 801d59e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d5a2:	3401      	adds	r4, #1
 801d5a4:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801d5a6:	42aa      	cmp	r2, r5
 801d5a8:	d0ee      	beq.n	801d588 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801d5aa:	2000      	movs	r0, #0
 801d5ac:	bd70      	pop	{r4, r5, r6, pc}
 801d5ae:	2001      	movs	r0, #1
 801d5b0:	e7fc      	b.n	801d5ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801d5b2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801d5b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5b6:	4605      	mov	r5, r0
 801d5b8:	4616      	mov	r6, r2
 801d5ba:	1c8c      	adds	r4, r1, #2
 801d5bc:	8809      	ldrh	r1, [r1, #0]
 801d5be:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801d5c2:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801d5c6:	42b3      	cmp	r3, r6
 801d5c8:	d124      	bne.n	801d614 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801d5ca:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801d5ce:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801d5d2:	f001 070f 	and.w	r7, r1, #15
 801d5d6:	f8cd 8000 	str.w	r8, [sp]
 801d5da:	464b      	mov	r3, r9
 801d5dc:	4652      	mov	r2, sl
 801d5de:	4621      	mov	r1, r4
 801d5e0:	4628      	mov	r0, r5
 801d5e2:	f7ff ffb7 	bl	801d554 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801d5e6:	4683      	mov	fp, r0
 801d5e8:	b168      	cbz	r0, 801d606 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801d5ea:	eb0a 0109 	add.w	r1, sl, r9
 801d5ee:	4441      	add	r1, r8
 801d5f0:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801d5f4:	463a      	mov	r2, r7
 801d5f6:	4649      	mov	r1, r9
 801d5f8:	4628      	mov	r0, r5
 801d5fa:	f7ff ff53 	bl	801d4a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801d5fe:	4658      	mov	r0, fp
 801d600:	b003      	add	sp, #12
 801d602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d606:	eb07 010a 	add.w	r1, r7, sl
 801d60a:	4449      	add	r1, r9
 801d60c:	4441      	add	r1, r8
 801d60e:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801d612:	e7d2      	b.n	801d5ba <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801d614:	f04f 0b00 	mov.w	fp, #0
 801d618:	e7f1      	b.n	801d5fe <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801d61a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801d61a:	b570      	push	{r4, r5, r6, lr}
 801d61c:	8810      	ldrh	r0, [r2, #0]
 801d61e:	4298      	cmp	r0, r3
 801d620:	d817      	bhi.n	801d652 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d622:	1e48      	subs	r0, r1, #1
 801d624:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801d628:	4298      	cmp	r0, r3
 801d62a:	d312      	bcc.n	801d652 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d62c:	2400      	movs	r4, #0
 801d62e:	428c      	cmp	r4, r1
 801d630:	d20f      	bcs.n	801d652 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d632:	1860      	adds	r0, r4, r1
 801d634:	1040      	asrs	r0, r0, #1
 801d636:	0085      	lsls	r5, r0, #2
 801d638:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801d63c:	42b3      	cmp	r3, r6
 801d63e:	d902      	bls.n	801d646 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801d640:	3001      	adds	r0, #1
 801d642:	b284      	uxth	r4, r0
 801d644:	e7f3      	b.n	801d62e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d646:	d201      	bcs.n	801d64c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801d648:	b281      	uxth	r1, r0
 801d64a:	e7f0      	b.n	801d62e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d64c:	442a      	add	r2, r5
 801d64e:	8850      	ldrh	r0, [r2, #2]
 801d650:	bd70      	pop	{r4, r5, r6, pc}
 801d652:	2000      	movs	r0, #0
 801d654:	e7fc      	b.n	801d650 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801d656 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801d656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d65a:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801d65c:	886f      	ldrh	r7, [r5, #2]
 801d65e:	4604      	mov	r4, r0
 801d660:	087f      	lsrs	r7, r7, #1
 801d662:	260b      	movs	r6, #11
 801d664:	3e01      	subs	r6, #1
 801d666:	d013      	beq.n	801d690 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d668:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801d66a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d66e:	462a      	mov	r2, r5
 801d670:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d674:	4639      	mov	r1, r7
 801d676:	4643      	mov	r3, r8
 801d678:	4620      	mov	r0, r4
 801d67a:	f7ff ffce 	bl	801d61a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801d67e:	b138      	cbz	r0, 801d690 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d680:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801d684:	4642      	mov	r2, r8
 801d686:	4620      	mov	r0, r4
 801d688:	f7ff ff93 	bl	801d5b2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801d68c:	2800      	cmp	r0, #0
 801d68e:	d1e9      	bne.n	801d664 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801d690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d694 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801d694:	b570      	push	{r4, r5, r6, lr}
 801d696:	694a      	ldr	r2, [r1, #20]
 801d698:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801d69a:	684b      	ldr	r3, [r1, #4]
 801d69c:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801d69e:	1b54      	subs	r4, r2, r5
 801d6a0:	f000 8106 	beq.w	801d8b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801d6a4:	1b9b      	subs	r3, r3, r6
 801d6a6:	d003      	beq.n	801d6b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d6a8:	4363      	muls	r3, r4
 801d6aa:	2210      	movs	r2, #16
 801d6ac:	fb93 f3f2 	sdiv	r3, r3, r2
 801d6b0:	680c      	ldr	r4, [r1, #0]
 801d6b2:	698a      	ldr	r2, [r1, #24]
 801d6b4:	1b65      	subs	r5, r4, r5
 801d6b6:	f000 80fd 	beq.w	801d8b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801d6ba:	1b92      	subs	r2, r2, r6
 801d6bc:	d003      	beq.n	801d6c6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d6be:	436a      	muls	r2, r5
 801d6c0:	2410      	movs	r4, #16
 801d6c2:	fb92 f2f4 	sdiv	r2, r2, r4
 801d6c6:	1a9b      	subs	r3, r3, r2
 801d6c8:	ee07 3a90 	vmov	s15, r3
 801d6cc:	ed9f 4a88 	vldr	s8, [pc, #544]	; 801d8f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801d6d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d6d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d6d8:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d6dc:	460a      	mov	r2, r1
 801d6de:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801d6e2:	4603      	mov	r3, r0
 801d6e4:	f100 040c 	add.w	r4, r0, #12
 801d6e8:	eeb1 6a43 	vneg.f32	s12, s6
 801d6ec:	edd2 7a02 	vldr	s15, [r2, #8]
 801d6f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801d6f4:	3214      	adds	r2, #20
 801d6f6:	ece3 6a01 	vstmia	r3!, {s13}
 801d6fa:	ed52 7a02 	vldr	s15, [r2, #-8]
 801d6fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d702:	429c      	cmp	r4, r3
 801d704:	edc3 7a02 	vstr	s15, [r3, #8]
 801d708:	ed52 7a01 	vldr	s15, [r2, #-4]
 801d70c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d710:	edc3 7a05 	vstr	s15, [r3, #20]
 801d714:	d1ea      	bne.n	801d6ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801d716:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d718:	698b      	ldr	r3, [r1, #24]
 801d71a:	edd0 4a02 	vldr	s9, [r0, #8]
 801d71e:	edd0 3a00 	vldr	s7, [r0]
 801d722:	edd0 6a01 	vldr	s13, [r0, #4]
 801d726:	ed90 5a05 	vldr	s10, [r0, #20]
 801d72a:	ed90 2a03 	vldr	s4, [r0, #12]
 801d72e:	edd0 5a04 	vldr	s11, [r0, #16]
 801d732:	ed90 1a07 	vldr	s2, [r0, #28]
 801d736:	edd0 2a06 	vldr	s5, [r0, #24]
 801d73a:	1a9b      	subs	r3, r3, r2
 801d73c:	ee07 3a90 	vmov	s15, r3
 801d740:	684b      	ldr	r3, [r1, #4]
 801d742:	1a9b      	subs	r3, r3, r2
 801d744:	ee07 3a10 	vmov	s14, r3
 801d748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d74c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801d750:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d754:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801d758:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d75c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801d760:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d764:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801d768:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d76c:	ee32 5a45 	vsub.f32	s10, s4, s10
 801d770:	ee67 7a83 	vmul.f32	s15, s15, s6
 801d774:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801d778:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d77a:	694a      	ldr	r2, [r1, #20]
 801d77c:	1b13      	subs	r3, r2, r4
 801d77e:	ee07 3a10 	vmov	s14, r3
 801d782:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d786:	680b      	ldr	r3, [r1, #0]
 801d788:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d78c:	1b1b      	subs	r3, r3, r4
 801d78e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801d792:	ee07 3a10 	vmov	s14, r3
 801d796:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d79a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d79e:	eee6 4a87 	vfma.f32	s9, s13, s14
 801d7a2:	ee64 4a86 	vmul.f32	s9, s9, s12
 801d7a6:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801d7aa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d7ac:	698b      	ldr	r3, [r1, #24]
 801d7ae:	1a9b      	subs	r3, r3, r2
 801d7b0:	ee06 3a90 	vmov	s13, r3
 801d7b4:	684b      	ldr	r3, [r1, #4]
 801d7b6:	1a9b      	subs	r3, r3, r2
 801d7b8:	ee07 3a10 	vmov	s14, r3
 801d7bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d7c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d7c4:	ee66 6a84 	vmul.f32	s13, s13, s8
 801d7c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d7cc:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801d7d0:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d7d4:	ee66 6a83 	vmul.f32	s13, s13, s6
 801d7d8:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801d7dc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d7de:	694a      	ldr	r2, [r1, #20]
 801d7e0:	1b13      	subs	r3, r2, r4
 801d7e2:	ee07 3a10 	vmov	s14, r3
 801d7e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d7ea:	680b      	ldr	r3, [r1, #0]
 801d7ec:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d7f0:	1b1b      	subs	r3, r3, r4
 801d7f2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801d7f6:	ee07 3a10 	vmov	s14, r3
 801d7fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d7fe:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d802:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d806:	edd0 5a08 	vldr	s11, [r0, #32]
 801d80a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801d80e:	ee31 1a65 	vsub.f32	s2, s2, s11
 801d812:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801d816:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d818:	698b      	ldr	r3, [r1, #24]
 801d81a:	1a9b      	subs	r3, r3, r2
 801d81c:	ee07 3a10 	vmov	s14, r3
 801d820:	684b      	ldr	r3, [r1, #4]
 801d822:	1a9b      	subs	r3, r3, r2
 801d824:	ee01 3a90 	vmov	s3, r3
 801d828:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d82c:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801d830:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d834:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d838:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801d83c:	ee61 1a84 	vmul.f32	s3, s3, s8
 801d840:	eea1 7a21 	vfma.f32	s14, s2, s3
 801d844:	ee27 7a03 	vmul.f32	s14, s14, s6
 801d848:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801d84c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d84e:	694a      	ldr	r2, [r1, #20]
 801d850:	1b13      	subs	r3, r2, r4
 801d852:	ee03 3a10 	vmov	s6, r3
 801d856:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d85a:	680b      	ldr	r3, [r1, #0]
 801d85c:	ee23 3a04 	vmul.f32	s6, s6, s8
 801d860:	1b1b      	subs	r3, r3, r4
 801d862:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801d866:	ee03 3a10 	vmov	s6, r3
 801d86a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d86e:	ee23 4a04 	vmul.f32	s8, s6, s8
 801d872:	eee1 5a04 	vfma.f32	s11, s2, s8
 801d876:	ee25 6a86 	vmul.f32	s12, s11, s12
 801d87a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801d87e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801d882:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801d886:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801d88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d88e:	dd13      	ble.n	801d8b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801d890:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d894:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801d898:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d89a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801d89e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8a6:	dd15      	ble.n	801d8d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801d8a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d8ac:	6403      	str	r3, [r0, #64]	; 0x40
 801d8ae:	bd70      	pop	{r4, r5, r6, pc}
 801d8b0:	4623      	mov	r3, r4
 801d8b2:	e6fd      	b.n	801d6b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d8b4:	462a      	mov	r2, r5
 801d8b6:	e706      	b.n	801d6c6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d8b8:	d502      	bpl.n	801d8c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801d8ba:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d8be:	e7e9      	b.n	801d894 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801d8c0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801d8c4:	eea3 2a85 	vfma.f32	s4, s7, s10
 801d8c8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801d8cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8d0:	dade      	bge.n	801d890 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801d8d2:	e7f2      	b.n	801d8ba <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801d8d4:	d502      	bpl.n	801d8dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801d8d6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d8da:	e7e7      	b.n	801d8ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801d8dc:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801d8e0:	eee3 4a86 	vfma.f32	s9, s7, s12
 801d8e4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801d8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8ec:	dadc      	bge.n	801d8a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801d8ee:	e7f2      	b.n	801d8d6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801d8f0:	3d800000 	.word	0x3d800000

0801d8f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801d8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d8f8:	2714      	movs	r7, #20
 801d8fa:	435f      	muls	r7, r3
 801d8fc:	eb02 0c07 	add.w	ip, r2, r7
 801d900:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801d904:	f115 0e0f 	adds.w	lr, r5, #15
 801d908:	f100 80a2 	bmi.w	801da50 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801d90c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801d910:	9c08      	ldr	r4, [sp, #32]
 801d912:	f8c0 e014 	str.w	lr, [r0, #20]
 801d916:	2614      	movs	r6, #20
 801d918:	4366      	muls	r6, r4
 801d91a:	eb02 0806 	add.w	r8, r2, r6
 801d91e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d922:	f115 040f 	adds.w	r4, r5, #15
 801d926:	f100 809f 	bmi.w	801da68 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801d92a:	1124      	asrs	r4, r4, #4
 801d92c:	eba4 040e 	sub.w	r4, r4, lr
 801d930:	6184      	str	r4, [r0, #24]
 801d932:	2c00      	cmp	r4, #0
 801d934:	f000 808a 	beq.w	801da4c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801d938:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801d93c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801d940:	5995      	ldr	r5, [r2, r6]
 801d942:	eba4 0809 	sub.w	r8, r4, r9
 801d946:	59d4      	ldr	r4, [r2, r7]
 801d948:	eba5 0a04 	sub.w	sl, r5, r4
 801d94c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801d950:	fb0e fe05 	mul.w	lr, lr, r5
 801d954:	fb0a ee19 	mls	lr, sl, r9, lr
 801d958:	fb08 e404 	mla	r4, r8, r4, lr
 801d95c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801d960:	3c01      	subs	r4, #1
 801d962:	19a4      	adds	r4, r4, r6
 801d964:	f100 808c 	bmi.w	801da80 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801d968:	fb94 fef6 	sdiv	lr, r4, r6
 801d96c:	f8c0 e000 	str.w	lr, [r0]
 801d970:	fb06 441e 	mls	r4, r6, lr, r4
 801d974:	6104      	str	r4, [r0, #16]
 801d976:	2d00      	cmp	r5, #0
 801d978:	f2c0 8095 	blt.w	801daa6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801d97c:	fb95 f4f6 	sdiv	r4, r5, r6
 801d980:	6044      	str	r4, [r0, #4]
 801d982:	fb06 5514 	mls	r5, r6, r4, r5
 801d986:	6085      	str	r5, [r0, #8]
 801d988:	60c6      	str	r6, [r0, #12]
 801d98a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801d98e:	6945      	ldr	r5, [r0, #20]
 801d990:	59d2      	ldr	r2, [r2, r7]
 801d992:	eddf 6a4d 	vldr	s13, [pc, #308]	; 801dac8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801d996:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801d99a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801d99e:	ee07 4a10 	vmov	s14, r4
 801d9a2:	6804      	ldr	r4, [r0, #0]
 801d9a4:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801d9a8:	ee07 2a90 	vmov	s15, r2
 801d9ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d9b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d9b4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d9b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d9bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d9c0:	edd3 6a00 	vldr	s13, [r3]
 801d9c4:	eee6 6a07 	vfma.f32	s13, s12, s14
 801d9c8:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801d9cc:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d9d0:	edc0 6a07 	vstr	s13, [r0, #28]
 801d9d4:	edd0 6a01 	vldr	s13, [r0, #4]
 801d9d8:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801d9dc:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801d9e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d9e4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d9e8:	ed80 6a08 	vstr	s12, [r0, #32]
 801d9ec:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801d9ee:	6242      	str	r2, [r0, #36]	; 0x24
 801d9f0:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801d9f4:	ed93 6a03 	vldr	s12, [r3, #12]
 801d9f8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d9fc:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801da00:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801da04:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801da08:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801da0c:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801da10:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801da14:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801da18:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801da1a:	6302      	str	r2, [r0, #48]	; 0x30
 801da1c:	ed93 6a06 	vldr	s12, [r3, #24]
 801da20:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801da24:	eea5 6a87 	vfma.f32	s12, s11, s14
 801da28:	eeb0 7a46 	vmov.f32	s14, s12
 801da2c:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801da30:	eea6 7a27 	vfma.f32	s14, s12, s15
 801da34:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801da38:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801da3c:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801da40:	eee6 7a87 	vfma.f32	s15, s13, s14
 801da44:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801da48:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801da4a:	63c3      	str	r3, [r0, #60]	; 0x3c
 801da4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da50:	f1c5 0501 	rsb	r5, r5, #1
 801da54:	f015 050f 	ands.w	r5, r5, #15
 801da58:	bf18      	it	ne
 801da5a:	2501      	movne	r5, #1
 801da5c:	2410      	movs	r4, #16
 801da5e:	fb9e fef4 	sdiv	lr, lr, r4
 801da62:	ebae 0e05 	sub.w	lr, lr, r5
 801da66:	e753      	b.n	801d910 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801da68:	f1c5 0501 	rsb	r5, r5, #1
 801da6c:	f015 050f 	ands.w	r5, r5, #15
 801da70:	bf18      	it	ne
 801da72:	2501      	movne	r5, #1
 801da74:	f04f 0910 	mov.w	r9, #16
 801da78:	fb94 f4f9 	sdiv	r4, r4, r9
 801da7c:	1b64      	subs	r4, r4, r5
 801da7e:	e755      	b.n	801d92c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801da80:	4264      	negs	r4, r4
 801da82:	fb94 fef6 	sdiv	lr, r4, r6
 801da86:	f1ce 0800 	rsb	r8, lr, #0
 801da8a:	fb06 441e 	mls	r4, r6, lr, r4
 801da8e:	f8c0 8000 	str.w	r8, [r0]
 801da92:	6104      	str	r4, [r0, #16]
 801da94:	2c00      	cmp	r4, #0
 801da96:	f43f af6e 	beq.w	801d976 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801da9a:	ea6f 0e0e 	mvn.w	lr, lr
 801da9e:	f8c0 e000 	str.w	lr, [r0]
 801daa2:	1b34      	subs	r4, r6, r4
 801daa4:	e766      	b.n	801d974 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801daa6:	426d      	negs	r5, r5
 801daa8:	fb95 f4f6 	sdiv	r4, r5, r6
 801daac:	f1c4 0e00 	rsb	lr, r4, #0
 801dab0:	fb06 5514 	mls	r5, r6, r4, r5
 801dab4:	f8c0 e004 	str.w	lr, [r0, #4]
 801dab8:	6085      	str	r5, [r0, #8]
 801daba:	2d00      	cmp	r5, #0
 801dabc:	f43f af64 	beq.w	801d988 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801dac0:	43e4      	mvns	r4, r4
 801dac2:	6044      	str	r4, [r0, #4]
 801dac4:	1b75      	subs	r5, r6, r5
 801dac6:	e75e      	b.n	801d986 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801dac8:	3d800000 	.word	0x3d800000

0801dacc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801dacc:	4b01      	ldr	r3, [pc, #4]	; (801dad4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801dace:	6018      	str	r0, [r3, #0]
 801dad0:	4770      	bx	lr
 801dad2:	bf00      	nop
 801dad4:	20008e90 	.word	0x20008e90

0801dad8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801dad8:	4b06      	ldr	r3, [pc, #24]	; (801daf4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801dada:	881a      	ldrh	r2, [r3, #0]
 801dadc:	4282      	cmp	r2, r0
 801dade:	d807      	bhi.n	801daf0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801dae0:	4b05      	ldr	r3, [pc, #20]	; (801daf8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801dae2:	881b      	ldrh	r3, [r3, #0]
 801dae4:	4413      	add	r3, r2
 801dae6:	4298      	cmp	r0, r3
 801dae8:	bfac      	ite	ge
 801daea:	2000      	movge	r0, #0
 801daec:	2001      	movlt	r0, #1
 801daee:	4770      	bx	lr
 801daf0:	2000      	movs	r0, #0
 801daf2:	4770      	bx	lr
 801daf4:	20008eb0 	.word	0x20008eb0
 801daf8:	20008eb4 	.word	0x20008eb4

0801dafc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801dafc:	b508      	push	{r3, lr}
 801dafe:	4601      	mov	r1, r0
 801db00:	f7ff ffea 	bl	801dad8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801db04:	b118      	cbz	r0, 801db0e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801db06:	4b02      	ldr	r3, [pc, #8]	; (801db10 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801db08:	681b      	ldr	r3, [r3, #0]
 801db0a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801db0e:	bd08      	pop	{r3, pc}
 801db10:	20008e94 	.word	0x20008e94

0801db14 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801db14:	b5f0      	push	{r4, r5, r6, r7, lr}
 801db16:	4c24      	ldr	r4, [pc, #144]	; (801dba8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801db18:	6823      	ldr	r3, [r4, #0]
 801db1a:	2b00      	cmp	r3, #0
 801db1c:	d042      	beq.n	801dba4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801db1e:	4a23      	ldr	r2, [pc, #140]	; (801dbac <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801db20:	4d23      	ldr	r5, [pc, #140]	; (801dbb0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801db22:	8811      	ldrh	r1, [r2, #0]
 801db24:	f8b5 c000 	ldrh.w	ip, [r5]
 801db28:	4822      	ldr	r0, [pc, #136]	; (801dbb4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801db2a:	4461      	add	r1, ip
 801db2c:	1c4a      	adds	r2, r1, #1
 801db2e:	f022 0201 	bic.w	r2, r2, #1
 801db32:	008f      	lsls	r7, r1, #2
 801db34:	0412      	lsls	r2, r2, #16
 801db36:	19de      	adds	r6, r3, r7
 801db38:	0c12      	lsrs	r2, r2, #16
 801db3a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801db3e:	6006      	str	r6, [r0, #0]
 801db40:	4e1d      	ldr	r6, [pc, #116]	; (801dbb8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801db42:	19da      	adds	r2, r3, r7
 801db44:	6032      	str	r2, [r6, #0]
 801db46:	220e      	movs	r2, #14
 801db48:	fb02 f20c 	mul.w	r2, r2, ip
 801db4c:	3203      	adds	r2, #3
 801db4e:	f022 0203 	bic.w	r2, r2, #3
 801db52:	443a      	add	r2, r7
 801db54:	4f19      	ldr	r7, [pc, #100]	; (801dbbc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801db56:	4413      	add	r3, r2
 801db58:	603b      	str	r3, [r7, #0]
 801db5a:	4f19      	ldr	r7, [pc, #100]	; (801dbc0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801db5c:	2300      	movs	r3, #0
 801db5e:	803b      	strh	r3, [r7, #0]
 801db60:	4f18      	ldr	r7, [pc, #96]	; (801dbc4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801db62:	683f      	ldr	r7, [r7, #0]
 801db64:	1aba      	subs	r2, r7, r2
 801db66:	4f18      	ldr	r7, [pc, #96]	; (801dbc8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801db68:	603a      	str	r2, [r7, #0]
 801db6a:	4a18      	ldr	r2, [pc, #96]	; (801dbcc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801db6c:	469c      	mov	ip, r3
 801db6e:	8013      	strh	r3, [r2, #0]
 801db70:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801db74:	428b      	cmp	r3, r1
 801db76:	d10d      	bne.n	801db94 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801db78:	882d      	ldrh	r5, [r5, #0]
 801db7a:	6830      	ldr	r0, [r6, #0]
 801db7c:	2300      	movs	r3, #0
 801db7e:	240e      	movs	r4, #14
 801db80:	429d      	cmp	r5, r3
 801db82:	d90f      	bls.n	801dba4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801db84:	fb04 0203 	mla	r2, r4, r3, r0
 801db88:	3301      	adds	r3, #1
 801db8a:	7b11      	ldrb	r1, [r2, #12]
 801db8c:	f36f 1145 	bfc	r1, #5, #1
 801db90:	7311      	strb	r1, [r2, #12]
 801db92:	e7f5      	b.n	801db80 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801db94:	6822      	ldr	r2, [r4, #0]
 801db96:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801db9a:	6802      	ldr	r2, [r0, #0]
 801db9c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801dba0:	3301      	adds	r3, #1
 801dba2:	e7e7      	b.n	801db74 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801dba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dba6:	bf00      	nop
 801dba8:	20008e94 	.word	0x20008e94
 801dbac:	20008eb0 	.word	0x20008eb0
 801dbb0:	20008eb4 	.word	0x20008eb4
 801dbb4:	20008ea8 	.word	0x20008ea8
 801dbb8:	20008e98 	.word	0x20008e98
 801dbbc:	20008ea0 	.word	0x20008ea0
 801dbc0:	20008eb2 	.word	0x20008eb2
 801dbc4:	20008e9c 	.word	0x20008e9c
 801dbc8:	20008eac 	.word	0x20008eac
 801dbcc:	20008ea4 	.word	0x20008ea4

0801dbd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801dbd0:	4b06      	ldr	r3, [pc, #24]	; (801dbec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801dbd2:	681b      	ldr	r3, [r3, #0]
 801dbd4:	b943      	cbnz	r3, 801dbe8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801dbd6:	b139      	cbz	r1, 801dbe8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801dbd8:	4b05      	ldr	r3, [pc, #20]	; (801dbf0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801dbda:	801a      	strh	r2, [r3, #0]
 801dbdc:	4b05      	ldr	r3, [pc, #20]	; (801dbf4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801dbde:	6019      	str	r1, [r3, #0]
 801dbe0:	4b05      	ldr	r3, [pc, #20]	; (801dbf8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801dbe2:	6018      	str	r0, [r3, #0]
 801dbe4:	f7ff bf96 	b.w	801db14 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801dbe8:	4770      	bx	lr
 801dbea:	bf00      	nop
 801dbec:	20008ea0 	.word	0x20008ea0
 801dbf0:	20008eb4 	.word	0x20008eb4
 801dbf4:	20008e9c 	.word	0x20008e9c
 801dbf8:	20008e94 	.word	0x20008e94

0801dbfc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801dbfc:	b470      	push	{r4, r5, r6}
 801dbfe:	4c07      	ldr	r4, [pc, #28]	; (801dc1c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801dc00:	6826      	ldr	r6, [r4, #0]
 801dc02:	4605      	mov	r5, r0
 801dc04:	4610      	mov	r0, r2
 801dc06:	9a03      	ldr	r2, [sp, #12]
 801dc08:	b936      	cbnz	r6, 801dc18 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801dc0a:	6025      	str	r5, [r4, #0]
 801dc0c:	4c04      	ldr	r4, [pc, #16]	; (801dc20 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801dc0e:	8021      	strh	r1, [r4, #0]
 801dc10:	bc70      	pop	{r4, r5, r6}
 801dc12:	4619      	mov	r1, r3
 801dc14:	f7ff bfdc 	b.w	801dbd0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801dc18:	bc70      	pop	{r4, r5, r6}
 801dc1a:	4770      	bx	lr
 801dc1c:	20008eb8 	.word	0x20008eb8
 801dc20:	20008eb0 	.word	0x20008eb0

0801dc24 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801dc24:	4a12      	ldr	r2, [pc, #72]	; (801dc70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801dc26:	8803      	ldrh	r3, [r0, #0]
 801dc28:	8812      	ldrh	r2, [r2, #0]
 801dc2a:	4293      	cmp	r3, r2
 801dc2c:	d207      	bcs.n	801dc3e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801dc2e:	4a11      	ldr	r2, [pc, #68]	; (801dc74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801dc30:	6812      	ldr	r2, [r2, #0]
 801dc32:	2114      	movs	r1, #20
 801dc34:	fb01 2303 	mla	r3, r1, r3, r2
 801dc38:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801dc3c:	4770      	bx	lr
 801dc3e:	490e      	ldr	r1, [pc, #56]	; (801dc78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801dc40:	8809      	ldrh	r1, [r1, #0]
 801dc42:	4411      	add	r1, r2
 801dc44:	428b      	cmp	r3, r1
 801dc46:	da04      	bge.n	801dc52 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801dc48:	1a9b      	subs	r3, r3, r2
 801dc4a:	4a0c      	ldr	r2, [pc, #48]	; (801dc7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801dc4c:	210e      	movs	r1, #14
 801dc4e:	6812      	ldr	r2, [r2, #0]
 801dc50:	e7f0      	b.n	801dc34 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801dc52:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dc56:	4293      	cmp	r3, r2
 801dc58:	d108      	bne.n	801dc6c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801dc5a:	4b09      	ldr	r3, [pc, #36]	; (801dc80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801dc5c:	781b      	ldrb	r3, [r3, #0]
 801dc5e:	b91b      	cbnz	r3, 801dc68 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801dc60:	4b08      	ldr	r3, [pc, #32]	; (801dc84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801dc62:	f9b3 0000 	ldrsh.w	r0, [r3]
 801dc66:	4770      	bx	lr
 801dc68:	4b07      	ldr	r3, [pc, #28]	; (801dc88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801dc6a:	e7fa      	b.n	801dc62 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801dc6c:	2000      	movs	r0, #0
 801dc6e:	4770      	bx	lr
 801dc70:	20008eb0 	.word	0x20008eb0
 801dc74:	20008eb8 	.word	0x20008eb8
 801dc78:	20008eb4 	.word	0x20008eb4
 801dc7c:	20008e98 	.word	0x20008e98
 801dc80:	20008e26 	.word	0x20008e26
 801dc84:	20008e28 	.word	0x20008e28
 801dc88:	20008e2a 	.word	0x20008e2a

0801dc8c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801dc8c:	4a12      	ldr	r2, [pc, #72]	; (801dcd8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801dc8e:	8803      	ldrh	r3, [r0, #0]
 801dc90:	8812      	ldrh	r2, [r2, #0]
 801dc92:	4293      	cmp	r3, r2
 801dc94:	d207      	bcs.n	801dca6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801dc96:	4a11      	ldr	r2, [pc, #68]	; (801dcdc <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801dc98:	6812      	ldr	r2, [r2, #0]
 801dc9a:	2114      	movs	r1, #20
 801dc9c:	fb01 2303 	mla	r3, r1, r3, r2
 801dca0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801dca4:	4770      	bx	lr
 801dca6:	490e      	ldr	r1, [pc, #56]	; (801dce0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801dca8:	8809      	ldrh	r1, [r1, #0]
 801dcaa:	4411      	add	r1, r2
 801dcac:	428b      	cmp	r3, r1
 801dcae:	da04      	bge.n	801dcba <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801dcb0:	1a9b      	subs	r3, r3, r2
 801dcb2:	4a0c      	ldr	r2, [pc, #48]	; (801dce4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801dcb4:	210e      	movs	r1, #14
 801dcb6:	6812      	ldr	r2, [r2, #0]
 801dcb8:	e7f0      	b.n	801dc9c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801dcba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dcbe:	4293      	cmp	r3, r2
 801dcc0:	d108      	bne.n	801dcd4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801dcc2:	4b09      	ldr	r3, [pc, #36]	; (801dce8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801dcc4:	781b      	ldrb	r3, [r3, #0]
 801dcc6:	b91b      	cbnz	r3, 801dcd0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801dcc8:	4b08      	ldr	r3, [pc, #32]	; (801dcec <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801dcca:	f9b3 0000 	ldrsh.w	r0, [r3]
 801dcce:	4770      	bx	lr
 801dcd0:	4b07      	ldr	r3, [pc, #28]	; (801dcf0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801dcd2:	e7fa      	b.n	801dcca <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801dcd4:	2000      	movs	r0, #0
 801dcd6:	4770      	bx	lr
 801dcd8:	20008eb0 	.word	0x20008eb0
 801dcdc:	20008eb8 	.word	0x20008eb8
 801dce0:	20008eb4 	.word	0x20008eb4
 801dce4:	20008e98 	.word	0x20008e98
 801dce8:	20008e26 	.word	0x20008e26
 801dcec:	20008e2a 	.word	0x20008e2a
 801dcf0:	20008e28 	.word	0x20008e28

0801dcf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801dcf4:	b510      	push	{r4, lr}
 801dcf6:	4a1f      	ldr	r2, [pc, #124]	; (801dd74 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 801dcf8:	880b      	ldrh	r3, [r1, #0]
 801dcfa:	8812      	ldrh	r2, [r2, #0]
 801dcfc:	4293      	cmp	r3, r2
 801dcfe:	d213      	bcs.n	801dd28 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801dd00:	4a1d      	ldr	r2, [pc, #116]	; (801dd78 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801dd02:	6812      	ldr	r2, [r2, #0]
 801dd04:	2114      	movs	r1, #20
 801dd06:	fb01 2303 	mla	r3, r1, r3, r2
 801dd0a:	8a1a      	ldrh	r2, [r3, #16]
 801dd0c:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801dd10:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801dd14:	8a5b      	ldrh	r3, [r3, #18]
 801dd16:	8004      	strh	r4, [r0, #0]
 801dd18:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801dd1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dd20:	8041      	strh	r1, [r0, #2]
 801dd22:	8082      	strh	r2, [r0, #4]
 801dd24:	80c3      	strh	r3, [r0, #6]
 801dd26:	e00e      	b.n	801dd46 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801dd28:	4914      	ldr	r1, [pc, #80]	; (801dd7c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801dd2a:	8809      	ldrh	r1, [r1, #0]
 801dd2c:	4411      	add	r1, r2
 801dd2e:	428b      	cmp	r3, r1
 801dd30:	da0a      	bge.n	801dd48 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801dd32:	1a9b      	subs	r3, r3, r2
 801dd34:	4a12      	ldr	r2, [pc, #72]	; (801dd80 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801dd36:	6812      	ldr	r2, [r2, #0]
 801dd38:	210e      	movs	r1, #14
 801dd3a:	fb01 2303 	mla	r3, r1, r3, r2
 801dd3e:	681a      	ldr	r2, [r3, #0]
 801dd40:	6002      	str	r2, [r0, #0]
 801dd42:	685a      	ldr	r2, [r3, #4]
 801dd44:	6042      	str	r2, [r0, #4]
 801dd46:	bd10      	pop	{r4, pc}
 801dd48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801dd4c:	4293      	cmp	r3, r2
 801dd4e:	d10b      	bne.n	801dd68 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801dd50:	4b0c      	ldr	r3, [pc, #48]	; (801dd84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801dd52:	f9b3 1000 	ldrsh.w	r1, [r3]
 801dd56:	4b0c      	ldr	r3, [pc, #48]	; (801dd88 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801dd58:	8081      	strh	r1, [r0, #4]
 801dd5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dd5e:	80c2      	strh	r2, [r0, #6]
 801dd60:	2300      	movs	r3, #0
 801dd62:	8003      	strh	r3, [r0, #0]
 801dd64:	8043      	strh	r3, [r0, #2]
 801dd66:	e7ee      	b.n	801dd46 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801dd68:	2300      	movs	r3, #0
 801dd6a:	8003      	strh	r3, [r0, #0]
 801dd6c:	8043      	strh	r3, [r0, #2]
 801dd6e:	8083      	strh	r3, [r0, #4]
 801dd70:	e7d8      	b.n	801dd24 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801dd72:	bf00      	nop
 801dd74:	20008eb0 	.word	0x20008eb0
 801dd78:	20008eb8 	.word	0x20008eb8
 801dd7c:	20008eb4 	.word	0x20008eb4
 801dd80:	20008e98 	.word	0x20008e98
 801dd84:	20008e22 	.word	0x20008e22
 801dd88:	20008e24 	.word	0x20008e24

0801dd8c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801dd8c:	4a17      	ldr	r2, [pc, #92]	; (801ddec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801dd8e:	8803      	ldrh	r3, [r0, #0]
 801dd90:	8812      	ldrh	r2, [r2, #0]
 801dd92:	4293      	cmp	r3, r2
 801dd94:	d213      	bcs.n	801ddbe <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801dd96:	4a16      	ldr	r2, [pc, #88]	; (801ddf0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801dd98:	6812      	ldr	r2, [r2, #0]
 801dd9a:	2114      	movs	r1, #20
 801dd9c:	fb01 2303 	mla	r3, r1, r3, r2
 801dda0:	8a1a      	ldrh	r2, [r3, #16]
 801dda2:	8919      	ldrh	r1, [r3, #8]
 801dda4:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801dda8:	428a      	cmp	r2, r1
 801ddaa:	db1d      	blt.n	801dde8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801ddac:	8a58      	ldrh	r0, [r3, #18]
 801ddae:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801ddb2:	895b      	ldrh	r3, [r3, #10]
 801ddb4:	4298      	cmp	r0, r3
 801ddb6:	bfac      	ite	ge
 801ddb8:	2000      	movge	r0, #0
 801ddba:	2001      	movlt	r0, #1
 801ddbc:	4770      	bx	lr
 801ddbe:	490d      	ldr	r1, [pc, #52]	; (801ddf4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801ddc0:	8809      	ldrh	r1, [r1, #0]
 801ddc2:	4411      	add	r1, r2
 801ddc4:	428b      	cmp	r3, r1
 801ddc6:	da0d      	bge.n	801dde4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801ddc8:	1a9b      	subs	r3, r3, r2
 801ddca:	4a0b      	ldr	r2, [pc, #44]	; (801ddf8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801ddcc:	6812      	ldr	r2, [r2, #0]
 801ddce:	210e      	movs	r1, #14
 801ddd0:	fb01 2303 	mla	r3, r1, r3, r2
 801ddd4:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801ddd8:	891a      	ldrh	r2, [r3, #8]
 801ddda:	4291      	cmp	r1, r2
 801dddc:	db04      	blt.n	801dde8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801ddde:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801dde2:	e7e6      	b.n	801ddb2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801dde4:	2000      	movs	r0, #0
 801dde6:	4770      	bx	lr
 801dde8:	2001      	movs	r0, #1
 801ddea:	4770      	bx	lr
 801ddec:	20008eb0 	.word	0x20008eb0
 801ddf0:	20008eb8 	.word	0x20008eb8
 801ddf4:	20008eb4 	.word	0x20008eb4
 801ddf8:	20008e98 	.word	0x20008e98

0801ddfc <_ZNK8touchgfx6Bitmap7getDataEv>:
 801ddfc:	4a12      	ldr	r2, [pc, #72]	; (801de48 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801ddfe:	8803      	ldrh	r3, [r0, #0]
 801de00:	8811      	ldrh	r1, [r2, #0]
 801de02:	428b      	cmp	r3, r1
 801de04:	d20b      	bcs.n	801de1e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801de06:	4a11      	ldr	r2, [pc, #68]	; (801de4c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801de08:	6812      	ldr	r2, [r2, #0]
 801de0a:	b112      	cbz	r2, 801de12 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801de0c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801de10:	b9c0      	cbnz	r0, 801de44 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801de12:	4a0f      	ldr	r2, [pc, #60]	; (801de50 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801de14:	6811      	ldr	r1, [r2, #0]
 801de16:	2214      	movs	r2, #20
 801de18:	4353      	muls	r3, r2
 801de1a:	58c8      	ldr	r0, [r1, r3]
 801de1c:	4770      	bx	lr
 801de1e:	4a0d      	ldr	r2, [pc, #52]	; (801de54 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801de20:	8812      	ldrh	r2, [r2, #0]
 801de22:	440a      	add	r2, r1
 801de24:	4293      	cmp	r3, r2
 801de26:	da04      	bge.n	801de32 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801de28:	4a08      	ldr	r2, [pc, #32]	; (801de4c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801de2a:	6812      	ldr	r2, [r2, #0]
 801de2c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801de30:	4770      	bx	lr
 801de32:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801de36:	4293      	cmp	r3, r2
 801de38:	d103      	bne.n	801de42 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801de3a:	4b07      	ldr	r3, [pc, #28]	; (801de58 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801de3c:	681b      	ldr	r3, [r3, #0]
 801de3e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801de40:	4770      	bx	lr
 801de42:	2000      	movs	r0, #0
 801de44:	4770      	bx	lr
 801de46:	bf00      	nop
 801de48:	20008eb0 	.word	0x20008eb0
 801de4c:	20008e94 	.word	0x20008e94
 801de50:	20008eb8 	.word	0x20008eb8
 801de54:	20008eb4 	.word	0x20008eb4
 801de58:	20008e30 	.word	0x20008e30

0801de5c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801de5c:	4b24      	ldr	r3, [pc, #144]	; (801def0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801de5e:	8802      	ldrh	r2, [r0, #0]
 801de60:	8818      	ldrh	r0, [r3, #0]
 801de62:	4282      	cmp	r2, r0
 801de64:	d221      	bcs.n	801deaa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801de66:	4b23      	ldr	r3, [pc, #140]	; (801def4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801de68:	6819      	ldr	r1, [r3, #0]
 801de6a:	2314      	movs	r3, #20
 801de6c:	fb03 1302 	mla	r3, r3, r2, r1
 801de70:	6858      	ldr	r0, [r3, #4]
 801de72:	2800      	cmp	r0, #0
 801de74:	d03a      	beq.n	801deec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801de76:	4920      	ldr	r1, [pc, #128]	; (801def8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801de78:	6809      	ldr	r1, [r1, #0]
 801de7a:	2900      	cmp	r1, #0
 801de7c:	d036      	beq.n	801deec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801de7e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801de82:	2900      	cmp	r1, #0
 801de84:	d032      	beq.n	801deec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801de86:	891a      	ldrh	r2, [r3, #8]
 801de88:	8958      	ldrh	r0, [r3, #10]
 801de8a:	4350      	muls	r0, r2
 801de8c:	7c5a      	ldrb	r2, [r3, #17]
 801de8e:	7cdb      	ldrb	r3, [r3, #19]
 801de90:	0952      	lsrs	r2, r2, #5
 801de92:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801de96:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801de9a:	2b0b      	cmp	r3, #11
 801de9c:	bf18      	it	ne
 801de9e:	0040      	lslne	r0, r0, #1
 801dea0:	3003      	adds	r0, #3
 801dea2:	f020 0003 	bic.w	r0, r0, #3
 801dea6:	4408      	add	r0, r1
 801dea8:	4770      	bx	lr
 801deaa:	4b14      	ldr	r3, [pc, #80]	; (801defc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801deac:	881b      	ldrh	r3, [r3, #0]
 801deae:	4403      	add	r3, r0
 801deb0:	429a      	cmp	r2, r3
 801deb2:	da1a      	bge.n	801deea <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801deb4:	4b12      	ldr	r3, [pc, #72]	; (801df00 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801deb6:	681b      	ldr	r3, [r3, #0]
 801deb8:	1a10      	subs	r0, r2, r0
 801deba:	210e      	movs	r1, #14
 801debc:	fb01 3000 	mla	r0, r1, r0, r3
 801dec0:	7b03      	ldrb	r3, [r0, #12]
 801dec2:	f003 031f 	and.w	r3, r3, #31
 801dec6:	2b0b      	cmp	r3, #11
 801dec8:	d10b      	bne.n	801dee2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801deca:	8903      	ldrh	r3, [r0, #8]
 801decc:	8940      	ldrh	r0, [r0, #10]
 801dece:	4358      	muls	r0, r3
 801ded0:	4b09      	ldr	r3, [pc, #36]	; (801def8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ded2:	6819      	ldr	r1, [r3, #0]
 801ded4:	3003      	adds	r0, #3
 801ded6:	f020 0303 	bic.w	r3, r0, #3
 801deda:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801dede:	4418      	add	r0, r3
 801dee0:	4770      	bx	lr
 801dee2:	2b0d      	cmp	r3, #13
 801dee4:	d101      	bne.n	801deea <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801dee6:	300d      	adds	r0, #13
 801dee8:	4770      	bx	lr
 801deea:	2000      	movs	r0, #0
 801deec:	4770      	bx	lr
 801deee:	bf00      	nop
 801def0:	20008eb0 	.word	0x20008eb0
 801def4:	20008eb8 	.word	0x20008eb8
 801def8:	20008e94 	.word	0x20008e94
 801defc:	20008eb4 	.word	0x20008eb4
 801df00:	20008e98 	.word	0x20008e98

0801df04 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801df04:	b510      	push	{r4, lr}
 801df06:	4a17      	ldr	r2, [pc, #92]	; (801df64 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801df08:	8803      	ldrh	r3, [r0, #0]
 801df0a:	8812      	ldrh	r2, [r2, #0]
 801df0c:	4293      	cmp	r3, r2
 801df0e:	d20c      	bcs.n	801df2a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801df10:	4a15      	ldr	r2, [pc, #84]	; (801df68 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801df12:	6812      	ldr	r2, [r2, #0]
 801df14:	2114      	movs	r1, #20
 801df16:	fb01 2303 	mla	r3, r1, r3, r2
 801df1a:	7c58      	ldrb	r0, [r3, #17]
 801df1c:	0942      	lsrs	r2, r0, #5
 801df1e:	7cd8      	ldrb	r0, [r3, #19]
 801df20:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801df24:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801df28:	bd10      	pop	{r4, pc}
 801df2a:	4910      	ldr	r1, [pc, #64]	; (801df6c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801df2c:	8809      	ldrh	r1, [r1, #0]
 801df2e:	4411      	add	r1, r2
 801df30:	428b      	cmp	r3, r1
 801df32:	da09      	bge.n	801df48 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801df34:	1a9b      	subs	r3, r3, r2
 801df36:	4a0e      	ldr	r2, [pc, #56]	; (801df70 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801df38:	6812      	ldr	r2, [r2, #0]
 801df3a:	210e      	movs	r1, #14
 801df3c:	fb01 2303 	mla	r3, r1, r3, r2
 801df40:	7b18      	ldrb	r0, [r3, #12]
 801df42:	f000 001f 	and.w	r0, r0, #31
 801df46:	e7ef      	b.n	801df28 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801df48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801df4c:	4293      	cmp	r3, r2
 801df4e:	d106      	bne.n	801df5e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801df50:	f7f4 fd1e 	bl	8012990 <_ZN8touchgfx3HAL3lcdEv>
 801df54:	6803      	ldr	r3, [r0, #0]
 801df56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801df5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df5c:	4718      	bx	r3
 801df5e:	2000      	movs	r0, #0
 801df60:	e7e2      	b.n	801df28 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801df62:	bf00      	nop
 801df64:	20008eb0 	.word	0x20008eb0
 801df68:	20008eb8 	.word	0x20008eb8
 801df6c:	20008eb4 	.word	0x20008eb4
 801df70:	20008e98 	.word	0x20008e98

0801df74 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801df74:	2010      	movs	r0, #16
 801df76:	4770      	bx	lr

0801df78 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801df78:	2000      	movs	r0, #0
 801df7a:	4770      	bx	lr

0801df7c <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801df7c:	4b02      	ldr	r3, [pc, #8]	; (801df88 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801df7e:	8818      	ldrh	r0, [r3, #0]
 801df80:	0040      	lsls	r0, r0, #1
 801df82:	b280      	uxth	r0, r0
 801df84:	4770      	bx	lr
 801df86:	bf00      	nop
 801df88:	20008e28 	.word	0x20008e28

0801df8c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801df8c:	2bff      	cmp	r3, #255	; 0xff
 801df8e:	d050      	beq.n	801e032 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801df90:	2a0b      	cmp	r2, #11
 801df92:	d04a      	beq.n	801e02a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801df94:	d80e      	bhi.n	801dfb4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801df96:	2a03      	cmp	r2, #3
 801df98:	d03f      	beq.n	801e01a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801df9a:	d804      	bhi.n	801dfa6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801df9c:	2a01      	cmp	r2, #1
 801df9e:	d03e      	beq.n	801e01e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801dfa0:	d93f      	bls.n	801e022 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801dfa2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801dfa4:	4770      	bx	lr
 801dfa6:	2a09      	cmp	r2, #9
 801dfa8:	d03f      	beq.n	801e02a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801dfaa:	d83c      	bhi.n	801e026 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801dfac:	2a08      	cmp	r2, #8
 801dfae:	d03a      	beq.n	801e026 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801dfb0:	2000      	movs	r0, #0
 801dfb2:	4770      	bx	lr
 801dfb4:	2a2f      	cmp	r2, #47	; 0x2f
 801dfb6:	d024      	beq.n	801e002 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 801dfb8:	d80d      	bhi.n	801dfd6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 801dfba:	2a2d      	cmp	r2, #45	; 0x2d
 801dfbc:	d014      	beq.n	801dfe8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 801dfbe:	d826      	bhi.n	801e00e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801dfc0:	2a2c      	cmp	r2, #44	; 0x2c
 801dfc2:	d1f5      	bne.n	801dfb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dfc4:	684b      	ldr	r3, [r1, #4]
 801dfc6:	781b      	ldrb	r3, [r3, #0]
 801dfc8:	2b01      	cmp	r3, #1
 801dfca:	d018      	beq.n	801dffe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 801dfcc:	d323      	bcc.n	801e016 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801dfce:	2b02      	cmp	r3, #2
 801dfd0:	d1ee      	bne.n	801dfb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dfd2:	6880      	ldr	r0, [r0, #8]
 801dfd4:	4770      	bx	lr
 801dfd6:	2a31      	cmp	r2, #49	; 0x31
 801dfd8:	d004      	beq.n	801dfe4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 801dfda:	d328      	bcc.n	801e02e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801dfdc:	2a32      	cmp	r2, #50	; 0x32
 801dfde:	d026      	beq.n	801e02e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801dfe0:	2a33      	cmp	r2, #51	; 0x33
 801dfe2:	d1e5      	bne.n	801dfb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dfe4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801dfe6:	4770      	bx	lr
 801dfe8:	684b      	ldr	r3, [r1, #4]
 801dfea:	781b      	ldrb	r3, [r3, #0]
 801dfec:	2b01      	cmp	r3, #1
 801dfee:	d004      	beq.n	801dffa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801dff0:	d30b      	bcc.n	801e00a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801dff2:	2b02      	cmp	r3, #2
 801dff4:	d1dc      	bne.n	801dfb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dff6:	6900      	ldr	r0, [r0, #16]
 801dff8:	4770      	bx	lr
 801dffa:	6a00      	ldr	r0, [r0, #32]
 801dffc:	4770      	bx	lr
 801dffe:	6980      	ldr	r0, [r0, #24]
 801e000:	4770      	bx	lr
 801e002:	684b      	ldr	r3, [r1, #4]
 801e004:	781b      	ldrb	r3, [r3, #0]
 801e006:	2b00      	cmp	r3, #0
 801e008:	d1d2      	bne.n	801dfb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e00a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801e00c:	4770      	bx	lr
 801e00e:	684b      	ldr	r3, [r1, #4]
 801e010:	781b      	ldrb	r3, [r3, #0]
 801e012:	2b00      	cmp	r3, #0
 801e014:	d1cc      	bne.n	801dfb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e016:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801e018:	4770      	bx	lr
 801e01a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801e01c:	4770      	bx	lr
 801e01e:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801e020:	4770      	bx	lr
 801e022:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801e024:	4770      	bx	lr
 801e026:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801e028:	4770      	bx	lr
 801e02a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801e02c:	4770      	bx	lr
 801e02e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801e030:	4770      	bx	lr
 801e032:	2a0b      	cmp	r2, #11
 801e034:	d049      	beq.n	801e0ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e036:	d80e      	bhi.n	801e056 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 801e038:	2a03      	cmp	r2, #3
 801e03a:	d040      	beq.n	801e0be <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801e03c:	d804      	bhi.n	801e048 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801e03e:	2a01      	cmp	r2, #1
 801e040:	d03f      	beq.n	801e0c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801e042:	d940      	bls.n	801e0c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 801e044:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801e046:	4770      	bx	lr
 801e048:	2a09      	cmp	r2, #9
 801e04a:	d03e      	beq.n	801e0ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801e04c:	d801      	bhi.n	801e052 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801e04e:	2a08      	cmp	r2, #8
 801e050:	d1ae      	bne.n	801dfb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e052:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801e054:	4770      	bx	lr
 801e056:	2a2f      	cmp	r2, #47	; 0x2f
 801e058:	d024      	beq.n	801e0a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801e05a:	d80d      	bhi.n	801e078 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801e05c:	2a2d      	cmp	r2, #45	; 0x2d
 801e05e:	d014      	beq.n	801e08a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801e060:	d826      	bhi.n	801e0b0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801e062:	2a2c      	cmp	r2, #44	; 0x2c
 801e064:	d1a4      	bne.n	801dfb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e066:	684b      	ldr	r3, [r1, #4]
 801e068:	781b      	ldrb	r3, [r3, #0]
 801e06a:	2b01      	cmp	r3, #1
 801e06c:	d018      	beq.n	801e0a0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 801e06e:	d324      	bcc.n	801e0ba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801e070:	2b02      	cmp	r3, #2
 801e072:	d19d      	bne.n	801dfb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e074:	68c0      	ldr	r0, [r0, #12]
 801e076:	4770      	bx	lr
 801e078:	2a31      	cmp	r2, #49	; 0x31
 801e07a:	d004      	beq.n	801e086 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 801e07c:	d327      	bcc.n	801e0ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e07e:	2a32      	cmp	r2, #50	; 0x32
 801e080:	d025      	beq.n	801e0ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801e082:	2a33      	cmp	r2, #51	; 0x33
 801e084:	d194      	bne.n	801dfb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e086:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801e088:	4770      	bx	lr
 801e08a:	684b      	ldr	r3, [r1, #4]
 801e08c:	781b      	ldrb	r3, [r3, #0]
 801e08e:	2b01      	cmp	r3, #1
 801e090:	d004      	beq.n	801e09c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801e092:	d30b      	bcc.n	801e0ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 801e094:	2b02      	cmp	r3, #2
 801e096:	d18b      	bne.n	801dfb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e098:	6940      	ldr	r0, [r0, #20]
 801e09a:	4770      	bx	lr
 801e09c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801e09e:	4770      	bx	lr
 801e0a0:	69c0      	ldr	r0, [r0, #28]
 801e0a2:	4770      	bx	lr
 801e0a4:	684b      	ldr	r3, [r1, #4]
 801e0a6:	781b      	ldrb	r3, [r3, #0]
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	d181      	bne.n	801dfb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0ac:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801e0ae:	4770      	bx	lr
 801e0b0:	684b      	ldr	r3, [r1, #4]
 801e0b2:	781b      	ldrb	r3, [r3, #0]
 801e0b4:	2b00      	cmp	r3, #0
 801e0b6:	f47f af7b 	bne.w	801dfb0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e0ba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801e0bc:	4770      	bx	lr
 801e0be:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801e0c0:	4770      	bx	lr
 801e0c2:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801e0c4:	4770      	bx	lr
 801e0c6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801e0c8:	4770      	bx	lr
 801e0ca:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801e0cc:	4770      	bx	lr
 801e0ce:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801e0d0:	4770      	bx	lr

0801e0d2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e0d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0d6:	b087      	sub	sp, #28
 801e0d8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e0da:	9205      	str	r2, [sp, #20]
 801e0dc:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e0e0:	9202      	str	r2, [sp, #8]
 801e0e2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801e0e6:	9101      	str	r1, [sp, #4]
 801e0e8:	6841      	ldr	r1, [r0, #4]
 801e0ea:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801e0ee:	fb01 2404 	mla	r4, r1, r4, r2
 801e0f2:	6802      	ldr	r2, [r0, #0]
 801e0f4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e0f8:	f8de 2000 	ldr.w	r2, [lr]
 801e0fc:	9203      	str	r2, [sp, #12]
 801e0fe:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e102:	3204      	adds	r2, #4
 801e104:	9204      	str	r2, [sp, #16]
 801e106:	9a02      	ldr	r2, [sp, #8]
 801e108:	43d6      	mvns	r6, r2
 801e10a:	b2f6      	uxtb	r6, r6
 801e10c:	9a01      	ldr	r2, [sp, #4]
 801e10e:	2a00      	cmp	r2, #0
 801e110:	dc03      	bgt.n	801e11a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e112:	9a05      	ldr	r2, [sp, #20]
 801e114:	2a00      	cmp	r2, #0
 801e116:	f340 8129 	ble.w	801e36c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e11a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e11c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e120:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e124:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e128:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e12a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e12e:	2b00      	cmp	r3, #0
 801e130:	dd0e      	ble.n	801e150 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e132:	1408      	asrs	r0, r1, #16
 801e134:	d405      	bmi.n	801e142 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e136:	4560      	cmp	r0, ip
 801e138:	da03      	bge.n	801e142 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e13a:	1410      	asrs	r0, r2, #16
 801e13c:	d401      	bmi.n	801e142 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e13e:	42b8      	cmp	r0, r7
 801e140:	db07      	blt.n	801e152 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e142:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e144:	4401      	add	r1, r0
 801e146:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e148:	3b01      	subs	r3, #1
 801e14a:	4402      	add	r2, r0
 801e14c:	3402      	adds	r4, #2
 801e14e:	e7ee      	b.n	801e12e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e150:	d071      	beq.n	801e236 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e152:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e154:	1e58      	subs	r0, r3, #1
 801e156:	fb05 1500 	mla	r5, r5, r0, r1
 801e15a:	142d      	asrs	r5, r5, #16
 801e15c:	d45f      	bmi.n	801e21e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e15e:	4565      	cmp	r5, ip
 801e160:	da5d      	bge.n	801e21e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e162:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e164:	fb05 2000 	mla	r0, r5, r0, r2
 801e168:	1400      	asrs	r0, r0, #16
 801e16a:	d458      	bmi.n	801e21e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e16c:	42b8      	cmp	r0, r7
 801e16e:	da56      	bge.n	801e21e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e170:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801e174:	4699      	mov	r9, r3
 801e176:	46a2      	mov	sl, r4
 801e178:	f1b9 0f00 	cmp.w	r9, #0
 801e17c:	dd57      	ble.n	801e22e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801e17e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e182:	9803      	ldr	r0, [sp, #12]
 801e184:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e188:	140d      	asrs	r5, r1, #16
 801e18a:	fb07 000c 	mla	r0, r7, ip, r0
 801e18e:	f109 39ff 	add.w	r9, r9, #4294967295
 801e192:	5d40      	ldrb	r0, [r0, r5]
 801e194:	9d04      	ldr	r5, [sp, #16]
 801e196:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e19a:	f8ba 5000 	ldrh.w	r5, [sl]
 801e19e:	122f      	asrs	r7, r5, #8
 801e1a0:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e1a4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e1a8:	fb17 f706 	smulbb	r7, r7, r6
 801e1ac:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e1b0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e1b4:	00ed      	lsls	r5, r5, #3
 801e1b6:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e1ba:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801e1be:	10c7      	asrs	r7, r0, #3
 801e1c0:	b2ed      	uxtb	r5, r5
 801e1c2:	00c0      	lsls	r0, r0, #3
 801e1c4:	fb18 f806 	smulbb	r8, r8, r6
 801e1c8:	fb15 f506 	smulbb	r5, r5, r6
 801e1cc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e1d0:	b2c0      	uxtb	r0, r0
 801e1d2:	fa1f fc8c 	uxth.w	ip, ip
 801e1d6:	fb07 870b 	mla	r7, r7, fp, r8
 801e1da:	fb00 500b 	mla	r0, r0, fp, r5
 801e1de:	b280      	uxth	r0, r0
 801e1e0:	b2bf      	uxth	r7, r7
 801e1e2:	f10c 0501 	add.w	r5, ip, #1
 801e1e6:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e1ea:	f107 0801 	add.w	r8, r7, #1
 801e1ee:	1c45      	adds	r5, r0, #1
 801e1f0:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e1f4:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e1f8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e1fa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e1fe:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e202:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e206:	ea45 0c0c 	orr.w	ip, r5, ip
 801e20a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e20e:	4401      	add	r1, r0
 801e210:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e212:	ea4c 0c08 	orr.w	ip, ip, r8
 801e216:	f82a cb02 	strh.w	ip, [sl], #2
 801e21a:	4402      	add	r2, r0
 801e21c:	e7ac      	b.n	801e178 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e21e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801e222:	f04f 0800 	mov.w	r8, #0
 801e226:	eb03 0008 	add.w	r0, r3, r8
 801e22a:	2800      	cmp	r0, #0
 801e22c:	dc41      	bgt.n	801e2b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e22e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e232:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e236:	9b01      	ldr	r3, [sp, #4]
 801e238:	2b00      	cmp	r3, #0
 801e23a:	f340 8097 	ble.w	801e36c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e23e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e242:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e246:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e24a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e24c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e250:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e254:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e258:	eef0 6a62 	vmov.f32	s13, s5
 801e25c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e260:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e264:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e268:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801e26c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e270:	eef0 6a43 	vmov.f32	s13, s6
 801e274:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e278:	ee12 2a90 	vmov	r2, s5
 801e27c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e280:	fb92 f3f3 	sdiv	r3, r2, r3
 801e284:	ee13 2a10 	vmov	r2, s6
 801e288:	9313      	str	r3, [sp, #76]	; 0x4c
 801e28a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e28c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e290:	9314      	str	r3, [sp, #80]	; 0x50
 801e292:	9b01      	ldr	r3, [sp, #4]
 801e294:	9a05      	ldr	r2, [sp, #20]
 801e296:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e29a:	3b01      	subs	r3, #1
 801e29c:	9301      	str	r3, [sp, #4]
 801e29e:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801e2a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e2a4:	eeb0 3a67 	vmov.f32	s6, s15
 801e2a8:	bf08      	it	eq
 801e2aa:	4613      	moveq	r3, r2
 801e2ac:	eef0 2a47 	vmov.f32	s5, s14
 801e2b0:	e72c      	b.n	801e10c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e2b2:	140f      	asrs	r7, r1, #16
 801e2b4:	d453      	bmi.n	801e35e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e2b6:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e2ba:	42bd      	cmp	r5, r7
 801e2bc:	dd4f      	ble.n	801e35e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e2be:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e2c2:	d44c      	bmi.n	801e35e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e2c4:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e2c8:	4560      	cmp	r0, ip
 801e2ca:	dd48      	ble.n	801e35e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e2cc:	9803      	ldr	r0, [sp, #12]
 801e2ce:	b22d      	sxth	r5, r5
 801e2d0:	fb0c 0505 	mla	r5, ip, r5, r0
 801e2d4:	5de8      	ldrb	r0, [r5, r7]
 801e2d6:	9d04      	ldr	r5, [sp, #16]
 801e2d8:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e2dc:	f06f 0501 	mvn.w	r5, #1
 801e2e0:	fb05 fb08 	mul.w	fp, r5, r8
 801e2e4:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e2e8:	f834 500b 	ldrh.w	r5, [r4, fp]
 801e2ec:	122f      	asrs	r7, r5, #8
 801e2ee:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e2f2:	fb17 f706 	smulbb	r7, r7, r6
 801e2f6:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e2fa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801e2fe:	00ed      	lsls	r5, r5, #3
 801e300:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801e304:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801e308:	10c7      	asrs	r7, r0, #3
 801e30a:	b2ed      	uxtb	r5, r5
 801e30c:	00c0      	lsls	r0, r0, #3
 801e30e:	fb19 f906 	smulbb	r9, r9, r6
 801e312:	fb15 f506 	smulbb	r5, r5, r6
 801e316:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e31a:	b2c0      	uxtb	r0, r0
 801e31c:	fa1f fc8c 	uxth.w	ip, ip
 801e320:	fb07 970a 	mla	r7, r7, sl, r9
 801e324:	fb00 500a 	mla	r0, r0, sl, r5
 801e328:	b2bf      	uxth	r7, r7
 801e32a:	b280      	uxth	r0, r0
 801e32c:	f10c 0501 	add.w	r5, ip, #1
 801e330:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e334:	f107 0901 	add.w	r9, r7, #1
 801e338:	1c45      	adds	r5, r0, #1
 801e33a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e33e:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801e342:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801e346:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e34a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e34e:	ea45 0c0c 	orr.w	ip, r5, ip
 801e352:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e356:	ea4c 0c09 	orr.w	ip, ip, r9
 801e35a:	f824 c00b 	strh.w	ip, [r4, fp]
 801e35e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e360:	4401      	add	r1, r0
 801e362:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e364:	f108 38ff 	add.w	r8, r8, #4294967295
 801e368:	4402      	add	r2, r0
 801e36a:	e75c      	b.n	801e226 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e36c:	b007      	add	sp, #28
 801e36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e372 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e376:	b085      	sub	sp, #20
 801e378:	4693      	mov	fp, r2
 801e37a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e37c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e37e:	6870      	ldr	r0, [r6, #4]
 801e380:	9100      	str	r1, [sp, #0]
 801e382:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e386:	fb00 2404 	mla	r4, r0, r4, r2
 801e38a:	6832      	ldr	r2, [r6, #0]
 801e38c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e390:	682a      	ldr	r2, [r5, #0]
 801e392:	9201      	str	r2, [sp, #4]
 801e394:	686a      	ldr	r2, [r5, #4]
 801e396:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801e39a:	3204      	adds	r2, #4
 801e39c:	9202      	str	r2, [sp, #8]
 801e39e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e3a2:	9a00      	ldr	r2, [sp, #0]
 801e3a4:	2a00      	cmp	r2, #0
 801e3a6:	dc03      	bgt.n	801e3b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e3a8:	f1bb 0f00 	cmp.w	fp, #0
 801e3ac:	f340 80a0 	ble.w	801e4f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e3b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e3b2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e3b6:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e3ba:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e3be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e3c0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e3c4:	2b00      	cmp	r3, #0
 801e3c6:	dd0c      	ble.n	801e3e2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e3c8:	1406      	asrs	r6, r0, #16
 801e3ca:	d405      	bmi.n	801e3d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e3cc:	454e      	cmp	r6, r9
 801e3ce:	da03      	bge.n	801e3d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e3d0:	1416      	asrs	r6, r2, #16
 801e3d2:	d401      	bmi.n	801e3d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e3d4:	4546      	cmp	r6, r8
 801e3d6:	db05      	blt.n	801e3e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e3d8:	4470      	add	r0, lr
 801e3da:	4462      	add	r2, ip
 801e3dc:	3b01      	subs	r3, #1
 801e3de:	3402      	adds	r4, #2
 801e3e0:	e7f0      	b.n	801e3c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e3e2:	d00f      	beq.n	801e404 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e3e4:	1e5e      	subs	r6, r3, #1
 801e3e6:	fb0e 0706 	mla	r7, lr, r6, r0
 801e3ea:	143f      	asrs	r7, r7, #16
 801e3ec:	d541      	bpl.n	801e472 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801e3ee:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801e3f2:	4698      	mov	r8, r3
 801e3f4:	9603      	str	r6, [sp, #12]
 801e3f6:	f1b8 0f00 	cmp.w	r8, #0
 801e3fa:	dc59      	bgt.n	801e4b0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e3fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e400:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e404:	9b00      	ldr	r3, [sp, #0]
 801e406:	2b00      	cmp	r3, #0
 801e408:	dd72      	ble.n	801e4f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e40a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e40e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e412:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e418:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e41c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e420:	eeb0 6a62 	vmov.f32	s12, s5
 801e424:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e428:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e42c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e430:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e434:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e438:	eeb0 6a43 	vmov.f32	s12, s6
 801e43c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e440:	ee12 2a90 	vmov	r2, s5
 801e444:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e448:	fb92 fef3 	sdiv	lr, r2, r3
 801e44c:	ee13 2a10 	vmov	r2, s6
 801e450:	fb92 fcf3 	sdiv	ip, r2, r3
 801e454:	9b00      	ldr	r3, [sp, #0]
 801e456:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e45a:	3b01      	subs	r3, #1
 801e45c:	9300      	str	r3, [sp, #0]
 801e45e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e464:	eeb0 3a67 	vmov.f32	s6, s15
 801e468:	bf08      	it	eq
 801e46a:	465b      	moveq	r3, fp
 801e46c:	eef0 2a47 	vmov.f32	s5, s14
 801e470:	e797      	b.n	801e3a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e472:	454f      	cmp	r7, r9
 801e474:	dabb      	bge.n	801e3ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e476:	fb0c 2606 	mla	r6, ip, r6, r2
 801e47a:	1436      	asrs	r6, r6, #16
 801e47c:	d4b7      	bmi.n	801e3ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e47e:	4546      	cmp	r6, r8
 801e480:	dab5      	bge.n	801e3ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e482:	461e      	mov	r6, r3
 801e484:	46a0      	mov	r8, r4
 801e486:	2e00      	cmp	r6, #0
 801e488:	ddb8      	ble.n	801e3fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e48a:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801e48e:	9901      	ldr	r1, [sp, #4]
 801e490:	1417      	asrs	r7, r2, #16
 801e492:	ea4f 4920 	mov.w	r9, r0, asr #16
 801e496:	fb0a 1707 	mla	r7, sl, r7, r1
 801e49a:	9902      	ldr	r1, [sp, #8]
 801e49c:	f817 7009 	ldrb.w	r7, [r7, r9]
 801e4a0:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801e4a4:	f828 7b02 	strh.w	r7, [r8], #2
 801e4a8:	4470      	add	r0, lr
 801e4aa:	4462      	add	r2, ip
 801e4ac:	3e01      	subs	r6, #1
 801e4ae:	e7ea      	b.n	801e486 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e4b0:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e4b4:	d417      	bmi.n	801e4e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e4b6:	68ae      	ldr	r6, [r5, #8]
 801e4b8:	454e      	cmp	r6, r9
 801e4ba:	dd14      	ble.n	801e4e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e4bc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e4c0:	d411      	bmi.n	801e4e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e4c2:	68ef      	ldr	r7, [r5, #12]
 801e4c4:	4557      	cmp	r7, sl
 801e4c6:	dd0e      	ble.n	801e4e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e4c8:	9f01      	ldr	r7, [sp, #4]
 801e4ca:	b236      	sxth	r6, r6
 801e4cc:	fb0a 7606 	mla	r6, sl, r6, r7
 801e4d0:	9f02      	ldr	r7, [sp, #8]
 801e4d2:	f816 6009 	ldrb.w	r6, [r6, r9]
 801e4d6:	f06f 0101 	mvn.w	r1, #1
 801e4da:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801e4de:	fb01 f608 	mul.w	r6, r1, r8
 801e4e2:	9903      	ldr	r1, [sp, #12]
 801e4e4:	538f      	strh	r7, [r1, r6]
 801e4e6:	4470      	add	r0, lr
 801e4e8:	4462      	add	r2, ip
 801e4ea:	f108 38ff 	add.w	r8, r8, #4294967295
 801e4ee:	e782      	b.n	801e3f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e4f0:	b005      	add	sp, #20
 801e4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e4f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e4f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4fa:	b087      	sub	sp, #28
 801e4fc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e4fe:	9205      	str	r2, [sp, #20]
 801e500:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e504:	9203      	str	r2, [sp, #12]
 801e506:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801e50a:	9102      	str	r1, [sp, #8]
 801e50c:	6861      	ldr	r1, [r4, #4]
 801e50e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801e512:	fb01 2000 	mla	r0, r1, r0, r2
 801e516:	6822      	ldr	r2, [r4, #0]
 801e518:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801e51c:	9200      	str	r2, [sp, #0]
 801e51e:	f8dc 2000 	ldr.w	r2, [ip]
 801e522:	9204      	str	r2, [sp, #16]
 801e524:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e528:	3204      	adds	r2, #4
 801e52a:	9201      	str	r2, [sp, #4]
 801e52c:	9a03      	ldr	r2, [sp, #12]
 801e52e:	43d5      	mvns	r5, r2
 801e530:	b2ed      	uxtb	r5, r5
 801e532:	9a02      	ldr	r2, [sp, #8]
 801e534:	2a00      	cmp	r2, #0
 801e536:	dc03      	bgt.n	801e540 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e538:	9a05      	ldr	r2, [sp, #20]
 801e53a:	2a00      	cmp	r2, #0
 801e53c:	f340 812c 	ble.w	801e798 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e540:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e542:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e546:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e54a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e54e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e550:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e554:	2b00      	cmp	r3, #0
 801e556:	dd10      	ble.n	801e57a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e558:	140c      	asrs	r4, r1, #16
 801e55a:	d405      	bmi.n	801e568 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e55c:	4574      	cmp	r4, lr
 801e55e:	da03      	bge.n	801e568 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e560:	1414      	asrs	r4, r2, #16
 801e562:	d401      	bmi.n	801e568 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e564:	42bc      	cmp	r4, r7
 801e566:	db09      	blt.n	801e57c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e568:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e56a:	9800      	ldr	r0, [sp, #0]
 801e56c:	4421      	add	r1, r4
 801e56e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e570:	3002      	adds	r0, #2
 801e572:	4422      	add	r2, r4
 801e574:	3b01      	subs	r3, #1
 801e576:	9000      	str	r0, [sp, #0]
 801e578:	e7ec      	b.n	801e554 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801e57a:	d071      	beq.n	801e660 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801e57c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e57e:	1e5c      	subs	r4, r3, #1
 801e580:	fb06 1604 	mla	r6, r6, r4, r1
 801e584:	1436      	asrs	r6, r6, #16
 801e586:	d45d      	bmi.n	801e644 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e588:	4576      	cmp	r6, lr
 801e58a:	da5b      	bge.n	801e644 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e58c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e58e:	fb06 2404 	mla	r4, r6, r4, r2
 801e592:	1424      	asrs	r4, r4, #16
 801e594:	d456      	bmi.n	801e644 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e596:	42bc      	cmp	r4, r7
 801e598:	da54      	bge.n	801e644 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e59a:	f8dd 9000 	ldr.w	r9, [sp]
 801e59e:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801e5a2:	4698      	mov	r8, r3
 801e5a4:	f1b8 0f00 	cmp.w	r8, #0
 801e5a8:	dd54      	ble.n	801e654 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801e5aa:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801e5ae:	9804      	ldr	r0, [sp, #16]
 801e5b0:	1414      	asrs	r4, r2, #16
 801e5b2:	fb07 0404 	mla	r4, r7, r4, r0
 801e5b6:	140e      	asrs	r6, r1, #16
 801e5b8:	9801      	ldr	r0, [sp, #4]
 801e5ba:	f814 e006 	ldrb.w	lr, [r4, r6]
 801e5be:	f8b9 4000 	ldrh.w	r4, [r9]
 801e5c2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e5c6:	eb00 0b0e 	add.w	fp, r0, lr
 801e5ca:	1227      	asrs	r7, r4, #8
 801e5cc:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e5d0:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e5d4:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801e5d8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e5da:	fb16 f60a 	smulbb	r6, r6, sl
 801e5de:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e5e2:	fb07 6705 	mla	r7, r7, r5, r6
 801e5e6:	10e6      	asrs	r6, r4, #3
 801e5e8:	00e4      	lsls	r4, r4, #3
 801e5ea:	b2e4      	uxtb	r4, r4
 801e5ec:	fb1b fb0a 	smulbb	fp, fp, sl
 801e5f0:	fb14 f405 	smulbb	r4, r4, r5
 801e5f4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e5f8:	b2bf      	uxth	r7, r7
 801e5fa:	fb06 b605 	mla	r6, r6, r5, fp
 801e5fe:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801e602:	b2b6      	uxth	r6, r6
 801e604:	fa1f fe8e 	uxth.w	lr, lr
 801e608:	1c7c      	adds	r4, r7, #1
 801e60a:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e60e:	f106 0b01 	add.w	fp, r6, #1
 801e612:	f10e 0401 	add.w	r4, lr, #1
 801e616:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801e61a:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e61e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e622:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e626:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e62a:	4327      	orrs	r7, r4
 801e62c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e630:	4401      	add	r1, r0
 801e632:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e634:	ea47 070b 	orr.w	r7, r7, fp
 801e638:	f829 7b02 	strh.w	r7, [r9], #2
 801e63c:	4402      	add	r2, r0
 801e63e:	f108 38ff 	add.w	r8, r8, #4294967295
 801e642:	e7af      	b.n	801e5a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801e644:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801e648:	f04f 0e00 	mov.w	lr, #0
 801e64c:	eb03 040e 	add.w	r4, r3, lr
 801e650:	2c00      	cmp	r4, #0
 801e652:	dc43      	bgt.n	801e6dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e654:	9a00      	ldr	r2, [sp, #0]
 801e656:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e65a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e65e:	9300      	str	r3, [sp, #0]
 801e660:	9b02      	ldr	r3, [sp, #8]
 801e662:	2b00      	cmp	r3, #0
 801e664:	f340 8098 	ble.w	801e798 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e668:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e66c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e670:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e674:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e676:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e67a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e67e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e682:	eef0 6a62 	vmov.f32	s13, s5
 801e686:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e68a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e68e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e692:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 801e696:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e69a:	eef0 6a43 	vmov.f32	s13, s6
 801e69e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e6a2:	ee12 2a90 	vmov	r2, s5
 801e6a6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e6aa:	fb92 f3f3 	sdiv	r3, r2, r3
 801e6ae:	ee13 2a10 	vmov	r2, s6
 801e6b2:	9313      	str	r3, [sp, #76]	; 0x4c
 801e6b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e6b6:	fb92 f3f3 	sdiv	r3, r2, r3
 801e6ba:	9314      	str	r3, [sp, #80]	; 0x50
 801e6bc:	9b02      	ldr	r3, [sp, #8]
 801e6be:	9a05      	ldr	r2, [sp, #20]
 801e6c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e6c4:	3b01      	subs	r3, #1
 801e6c6:	9302      	str	r3, [sp, #8]
 801e6c8:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801e6cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e6ce:	eeb0 3a67 	vmov.f32	s6, s15
 801e6d2:	bf08      	it	eq
 801e6d4:	4613      	moveq	r3, r2
 801e6d6:	eef0 2a47 	vmov.f32	s5, s14
 801e6da:	e72a      	b.n	801e532 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e6dc:	140f      	asrs	r7, r1, #16
 801e6de:	d454      	bmi.n	801e78a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e6e0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801e6e4:	42be      	cmp	r6, r7
 801e6e6:	dd50      	ble.n	801e78a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e6e8:	ea5f 4822 	movs.w	r8, r2, asr #16
 801e6ec:	d44d      	bmi.n	801e78a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e6ee:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801e6f2:	4544      	cmp	r4, r8
 801e6f4:	dd49      	ble.n	801e78a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e6f6:	9c04      	ldr	r4, [sp, #16]
 801e6f8:	b236      	sxth	r6, r6
 801e6fa:	fb08 4606 	mla	r6, r8, r6, r4
 801e6fe:	f06f 0001 	mvn.w	r0, #1
 801e702:	f816 8007 	ldrb.w	r8, [r6, r7]
 801e706:	9c01      	ldr	r4, [sp, #4]
 801e708:	fb00 fa0e 	mul.w	sl, r0, lr
 801e70c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e710:	9800      	ldr	r0, [sp, #0]
 801e712:	eb04 0b08 	add.w	fp, r4, r8
 801e716:	f830 400a 	ldrh.w	r4, [r0, sl]
 801e71a:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e71e:	9801      	ldr	r0, [sp, #4]
 801e720:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e724:	f810 8008 	ldrb.w	r8, [r0, r8]
 801e728:	9800      	ldr	r0, [sp, #0]
 801e72a:	1227      	asrs	r7, r4, #8
 801e72c:	fb16 f609 	smulbb	r6, r6, r9
 801e730:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e734:	fb07 6705 	mla	r7, r7, r5, r6
 801e738:	10e6      	asrs	r6, r4, #3
 801e73a:	00e4      	lsls	r4, r4, #3
 801e73c:	b2e4      	uxtb	r4, r4
 801e73e:	fb1b fb09 	smulbb	fp, fp, r9
 801e742:	fb14 f405 	smulbb	r4, r4, r5
 801e746:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e74a:	b2bf      	uxth	r7, r7
 801e74c:	fb06 b605 	mla	r6, r6, r5, fp
 801e750:	fb08 4809 	mla	r8, r8, r9, r4
 801e754:	b2b6      	uxth	r6, r6
 801e756:	fa1f f888 	uxth.w	r8, r8
 801e75a:	1c7c      	adds	r4, r7, #1
 801e75c:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e760:	f106 0b01 	add.w	fp, r6, #1
 801e764:	f108 0401 	add.w	r4, r8, #1
 801e768:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801e76c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e770:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801e774:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e778:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e77c:	4327      	orrs	r7, r4
 801e77e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801e782:	ea47 070b 	orr.w	r7, r7, fp
 801e786:	f820 700a 	strh.w	r7, [r0, sl]
 801e78a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e78c:	4401      	add	r1, r0
 801e78e:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e790:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e794:	4402      	add	r2, r0
 801e796:	e759      	b.n	801e64c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e798:	b007      	add	sp, #28
 801e79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e7a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7a4:	b085      	sub	sp, #20
 801e7a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e7aa:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e7ac:	9203      	str	r2, [sp, #12]
 801e7ae:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801e7b2:	6870      	ldr	r0, [r6, #4]
 801e7b4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801e7b6:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 801e7ba:	686f      	ldr	r7, [r5, #4]
 801e7bc:	9101      	str	r1, [sp, #4]
 801e7be:	fb00 2404 	mla	r4, r0, r4, r2
 801e7c2:	6832      	ldr	r2, [r6, #0]
 801e7c4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e7c8:	682a      	ldr	r2, [r5, #0]
 801e7ca:	9202      	str	r2, [sp, #8]
 801e7cc:	3704      	adds	r7, #4
 801e7ce:	9a01      	ldr	r2, [sp, #4]
 801e7d0:	2a00      	cmp	r2, #0
 801e7d2:	dc03      	bgt.n	801e7dc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e7d4:	9a03      	ldr	r2, [sp, #12]
 801e7d6:	2a00      	cmp	r2, #0
 801e7d8:	f340 80cc 	ble.w	801e974 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e7dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e7de:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e7e2:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e7e6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e7ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e7ec:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e7f0:	2b00      	cmp	r3, #0
 801e7f2:	dd0d      	ble.n	801e810 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e7f4:	1406      	asrs	r6, r0, #16
 801e7f6:	d405      	bmi.n	801e804 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e7f8:	454e      	cmp	r6, r9
 801e7fa:	da03      	bge.n	801e804 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e7fc:	1416      	asrs	r6, r2, #16
 801e7fe:	d401      	bmi.n	801e804 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e800:	4546      	cmp	r6, r8
 801e802:	db06      	blt.n	801e812 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e804:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801e806:	4460      	add	r0, ip
 801e808:	4432      	add	r2, r6
 801e80a:	3b01      	subs	r3, #1
 801e80c:	3402      	adds	r4, #2
 801e80e:	e7ef      	b.n	801e7f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801e810:	d00f      	beq.n	801e832 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e812:	1e5e      	subs	r6, r3, #1
 801e814:	fb0c 0e06 	mla	lr, ip, r6, r0
 801e818:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801e81c:	d543      	bpl.n	801e8a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801e81e:	4698      	mov	r8, r3
 801e820:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801e824:	f1b8 0f00 	cmp.w	r8, #0
 801e828:	dc71      	bgt.n	801e90e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801e82a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e82e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e832:	9b01      	ldr	r3, [sp, #4]
 801e834:	2b00      	cmp	r3, #0
 801e836:	f340 809d 	ble.w	801e974 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e83a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e83e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e842:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e848:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e84c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e850:	eeb0 6a62 	vmov.f32	s12, s5
 801e854:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e858:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e85c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e860:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801e864:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e868:	eeb0 6a43 	vmov.f32	s12, s6
 801e86c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e870:	ee12 2a90 	vmov	r2, s5
 801e874:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e878:	fb92 fcf3 	sdiv	ip, r2, r3
 801e87c:	ee13 2a10 	vmov	r2, s6
 801e880:	fb92 f3f3 	sdiv	r3, r2, r3
 801e884:	9312      	str	r3, [sp, #72]	; 0x48
 801e886:	9b01      	ldr	r3, [sp, #4]
 801e888:	9a03      	ldr	r2, [sp, #12]
 801e88a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e88e:	3b01      	subs	r3, #1
 801e890:	9301      	str	r3, [sp, #4]
 801e892:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801e896:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e898:	eeb0 3a67 	vmov.f32	s6, s15
 801e89c:	bf08      	it	eq
 801e89e:	4613      	moveq	r3, r2
 801e8a0:	eef0 2a47 	vmov.f32	s5, s14
 801e8a4:	e793      	b.n	801e7ce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e8a6:	45ce      	cmp	lr, r9
 801e8a8:	dab9      	bge.n	801e81e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e8aa:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e8ac:	fb01 2606 	mla	r6, r1, r6, r2
 801e8b0:	1436      	asrs	r6, r6, #16
 801e8b2:	d4b4      	bmi.n	801e81e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e8b4:	4546      	cmp	r6, r8
 801e8b6:	dab2      	bge.n	801e81e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e8b8:	4698      	mov	r8, r3
 801e8ba:	46a2      	mov	sl, r4
 801e8bc:	f1b8 0f00 	cmp.w	r8, #0
 801e8c0:	ddb3      	ble.n	801e82a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e8c2:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e8c6:	9902      	ldr	r1, [sp, #8]
 801e8c8:	1416      	asrs	r6, r2, #16
 801e8ca:	fb09 1606 	mla	r6, r9, r6, r1
 801e8ce:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801e8d2:	492a      	ldr	r1, [pc, #168]	; (801e97c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801e8d4:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801e8d8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e8dc:	eb07 0b0e 	add.w	fp, r7, lr
 801e8e0:	4460      	add	r0, ip
 801e8e2:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801e8e6:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801e8ea:	00f6      	lsls	r6, r6, #3
 801e8ec:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801e8f0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e8f4:	ea49 0606 	orr.w	r6, r9, r6
 801e8f8:	f817 900e 	ldrb.w	r9, [r7, lr]
 801e8fc:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e8fe:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801e902:	f82a 6b02 	strh.w	r6, [sl], #2
 801e906:	440a      	add	r2, r1
 801e908:	f108 38ff 	add.w	r8, r8, #4294967295
 801e90c:	e7d6      	b.n	801e8bc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e90e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e912:	d429      	bmi.n	801e968 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e914:	68ae      	ldr	r6, [r5, #8]
 801e916:	454e      	cmp	r6, r9
 801e918:	dd26      	ble.n	801e968 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e91a:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801e91e:	d423      	bmi.n	801e968 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e920:	68e9      	ldr	r1, [r5, #12]
 801e922:	4559      	cmp	r1, fp
 801e924:	dd20      	ble.n	801e968 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e926:	9902      	ldr	r1, [sp, #8]
 801e928:	fa0f fe86 	sxth.w	lr, r6
 801e92c:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801e930:	f06f 0101 	mvn.w	r1, #1
 801e934:	f81e e009 	ldrb.w	lr, [lr, r9]
 801e938:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e93c:	eb07 060e 	add.w	r6, r7, lr
 801e940:	fb01 f908 	mul.w	r9, r1, r8
 801e944:	f896 b002 	ldrb.w	fp, [r6, #2]
 801e948:	7876      	ldrb	r6, [r6, #1]
 801e94a:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801e94e:	00f6      	lsls	r6, r6, #3
 801e950:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801e954:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801e958:	ea4b 0606 	orr.w	r6, fp, r6
 801e95c:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801e960:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801e964:	f82a 6009 	strh.w	r6, [sl, r9]
 801e968:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e96a:	4460      	add	r0, ip
 801e96c:	440a      	add	r2, r1
 801e96e:	f108 38ff 	add.w	r8, r8, #4294967295
 801e972:	e757      	b.n	801e824 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e974:	b005      	add	sp, #20
 801e976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e97a:	bf00      	nop
 801e97c:	fffff800 	.word	0xfffff800

0801e980 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e984:	b087      	sub	sp, #28
 801e986:	468b      	mov	fp, r1
 801e988:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e98a:	9204      	str	r2, [sp, #16]
 801e98c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e990:	9205      	str	r2, [sp, #20]
 801e992:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801e996:	6841      	ldr	r1, [r0, #4]
 801e998:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801e99c:	fb01 2404 	mla	r4, r1, r4, r2
 801e9a0:	6802      	ldr	r2, [r0, #0]
 801e9a2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e9a6:	f8dc 2000 	ldr.w	r2, [ip]
 801e9aa:	9201      	str	r2, [sp, #4]
 801e9ac:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e9b0:	3204      	adds	r2, #4
 801e9b2:	9202      	str	r2, [sp, #8]
 801e9b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e9b8:	f1bb 0f00 	cmp.w	fp, #0
 801e9bc:	dc03      	bgt.n	801e9c6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801e9be:	9a04      	ldr	r2, [sp, #16]
 801e9c0:	2a00      	cmp	r2, #0
 801e9c2:	f340 8138 	ble.w	801ec36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801e9c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e9c8:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801e9cc:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801e9d0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e9d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e9d6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e9da:	2b00      	cmp	r3, #0
 801e9dc:	dd0e      	ble.n	801e9fc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e9de:	1402      	asrs	r2, r0, #16
 801e9e0:	d405      	bmi.n	801e9ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e9e2:	42ba      	cmp	r2, r7
 801e9e4:	da03      	bge.n	801e9ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e9e6:	140a      	asrs	r2, r1, #16
 801e9e8:	d401      	bmi.n	801e9ee <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e9ea:	42b2      	cmp	r2, r6
 801e9ec:	db07      	blt.n	801e9fe <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e9ee:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e9f0:	4410      	add	r0, r2
 801e9f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e9f4:	3b01      	subs	r3, #1
 801e9f6:	4411      	add	r1, r2
 801e9f8:	3402      	adds	r4, #2
 801e9fa:	e7ee      	b.n	801e9da <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e9fc:	d019      	beq.n	801ea32 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801e9fe:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ea00:	1e5a      	subs	r2, r3, #1
 801ea02:	fb05 0502 	mla	r5, r5, r2, r0
 801ea06:	142d      	asrs	r5, r5, #16
 801ea08:	d409      	bmi.n	801ea1e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ea0a:	42bd      	cmp	r5, r7
 801ea0c:	da07      	bge.n	801ea1e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ea0e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ea10:	fb05 1202 	mla	r2, r5, r2, r1
 801ea14:	1412      	asrs	r2, r2, #16
 801ea16:	d402      	bmi.n	801ea1e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801ea18:	42b2      	cmp	r2, r6
 801ea1a:	f2c0 80ac 	blt.w	801eb76 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801ea1e:	f04f 0e00 	mov.w	lr, #0
 801ea22:	eb03 020e 	add.w	r2, r3, lr
 801ea26:	2a00      	cmp	r2, #0
 801ea28:	dc3e      	bgt.n	801eaa8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ea2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ea2e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ea32:	f1bb 0f00 	cmp.w	fp, #0
 801ea36:	f340 80fe 	ble.w	801ec36 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ea3a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ea3e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ea42:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ea46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ea48:	f1bb 0b01 	subs.w	fp, fp, #1
 801ea4c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ea50:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ea54:	eeb0 6a62 	vmov.f32	s12, s5
 801ea58:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ea5c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ea60:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ea64:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ea68:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ea6c:	eeb0 6a43 	vmov.f32	s12, s6
 801ea70:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ea74:	ee12 2a90 	vmov	r2, s5
 801ea78:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ea7c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ea80:	ee13 2a10 	vmov	r2, s6
 801ea84:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ea88:	9313      	str	r3, [sp, #76]	; 0x4c
 801ea8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ea8c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ea90:	9a04      	ldr	r2, [sp, #16]
 801ea92:	9314      	str	r3, [sp, #80]	; 0x50
 801ea94:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ea98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ea9a:	eeb0 3a67 	vmov.f32	s6, s15
 801ea9e:	bf08      	it	eq
 801eaa0:	4613      	moveq	r3, r2
 801eaa2:	eef0 2a47 	vmov.f32	s5, s14
 801eaa6:	e787      	b.n	801e9b8 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801eaa8:	1406      	asrs	r6, r0, #16
 801eaaa:	d45d      	bmi.n	801eb68 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801eaac:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801eab0:	42b5      	cmp	r5, r6
 801eab2:	dd59      	ble.n	801eb68 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801eab4:	140f      	asrs	r7, r1, #16
 801eab6:	d457      	bmi.n	801eb68 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801eab8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801eabc:	42ba      	cmp	r2, r7
 801eabe:	dd53      	ble.n	801eb68 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801eac0:	9a01      	ldr	r2, [sp, #4]
 801eac2:	b22d      	sxth	r5, r5
 801eac4:	fb07 2505 	mla	r5, r7, r5, r2
 801eac8:	5daa      	ldrb	r2, [r5, r6]
 801eaca:	9d02      	ldr	r5, [sp, #8]
 801eacc:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ead0:	0e2e      	lsrs	r6, r5, #24
 801ead2:	d049      	beq.n	801eb68 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ead4:	f06f 0201 	mvn.w	r2, #1
 801ead8:	fb02 f20e 	mul.w	r2, r2, lr
 801eadc:	9203      	str	r2, [sp, #12]
 801eade:	f834 8002 	ldrh.w	r8, [r4, r2]
 801eae2:	9a05      	ldr	r2, [sp, #20]
 801eae4:	4356      	muls	r6, r2
 801eae6:	1c72      	adds	r2, r6, #1
 801eae8:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801eaec:	1212      	asrs	r2, r2, #8
 801eaee:	fa1f f982 	uxth.w	r9, r2
 801eaf2:	ea4f 2728 	mov.w	r7, r8, asr #8
 801eaf6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801eafa:	43d2      	mvns	r2, r2
 801eafc:	b2d2      	uxtb	r2, r2
 801eafe:	fb16 f609 	smulbb	r6, r6, r9
 801eb02:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801eb06:	fb07 6702 	mla	r7, r7, r2, r6
 801eb0a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801eb0e:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801eb12:	b2ed      	uxtb	r5, r5
 801eb14:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801eb18:	fa5f f888 	uxtb.w	r8, r8
 801eb1c:	fb15 f509 	smulbb	r5, r5, r9
 801eb20:	fb08 5502 	mla	r5, r8, r2, r5
 801eb24:	b2bf      	uxth	r7, r7
 801eb26:	fb1a fa09 	smulbb	sl, sl, r9
 801eb2a:	b2ad      	uxth	r5, r5
 801eb2c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801eb30:	fb06 a602 	mla	r6, r6, r2, sl
 801eb34:	1c7a      	adds	r2, r7, #1
 801eb36:	f105 0a01 	add.w	sl, r5, #1
 801eb3a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801eb3e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801eb42:	b2b6      	uxth	r6, r6
 801eb44:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801eb48:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801eb4c:	ea4a 0707 	orr.w	r7, sl, r7
 801eb50:	f106 0a01 	add.w	sl, r6, #1
 801eb54:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801eb58:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801eb5c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801eb60:	9a03      	ldr	r2, [sp, #12]
 801eb62:	ea47 070a 	orr.w	r7, r7, sl
 801eb66:	52a7      	strh	r7, [r4, r2]
 801eb68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801eb6a:	4410      	add	r0, r2
 801eb6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801eb6e:	f10e 3eff 	add.w	lr, lr, #4294967295
 801eb72:	4411      	add	r1, r2
 801eb74:	e755      	b.n	801ea22 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801eb76:	f04f 0800 	mov.w	r8, #0
 801eb7a:	eba3 0208 	sub.w	r2, r3, r8
 801eb7e:	2a00      	cmp	r2, #0
 801eb80:	f77f af53 	ble.w	801ea2a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801eb84:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801eb88:	9f01      	ldr	r7, [sp, #4]
 801eb8a:	140a      	asrs	r2, r1, #16
 801eb8c:	1405      	asrs	r5, r0, #16
 801eb8e:	fb06 7202 	mla	r2, r6, r2, r7
 801eb92:	5d52      	ldrb	r2, [r2, r5]
 801eb94:	9d02      	ldr	r5, [sp, #8]
 801eb96:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801eb9a:	0e2e      	lsrs	r6, r5, #24
 801eb9c:	d044      	beq.n	801ec28 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801eb9e:	9a05      	ldr	r2, [sp, #20]
 801eba0:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801eba4:	4356      	muls	r6, r2
 801eba6:	1c72      	adds	r2, r6, #1
 801eba8:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ebac:	1212      	asrs	r2, r2, #8
 801ebae:	fa1f f982 	uxth.w	r9, r2
 801ebb2:	ea4f 272e 	mov.w	r7, lr, asr #8
 801ebb6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ebba:	43d2      	mvns	r2, r2
 801ebbc:	b2d2      	uxtb	r2, r2
 801ebbe:	fb16 f609 	smulbb	r6, r6, r9
 801ebc2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801ebc6:	fb07 6702 	mla	r7, r7, r2, r6
 801ebca:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ebce:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801ebd2:	b2ed      	uxtb	r5, r5
 801ebd4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801ebd8:	fa5f fe8e 	uxtb.w	lr, lr
 801ebdc:	fb15 f509 	smulbb	r5, r5, r9
 801ebe0:	fb0e 5502 	mla	r5, lr, r2, r5
 801ebe4:	b2bf      	uxth	r7, r7
 801ebe6:	fb1a fa09 	smulbb	sl, sl, r9
 801ebea:	b2ad      	uxth	r5, r5
 801ebec:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ebf0:	fb06 a602 	mla	r6, r6, r2, sl
 801ebf4:	1c7a      	adds	r2, r7, #1
 801ebf6:	f105 0a01 	add.w	sl, r5, #1
 801ebfa:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ebfe:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ec02:	b2b6      	uxth	r6, r6
 801ec04:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ec08:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ec0c:	ea4a 0707 	orr.w	r7, sl, r7
 801ec10:	f106 0a01 	add.w	sl, r6, #1
 801ec14:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ec18:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ec1c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ec20:	ea47 070a 	orr.w	r7, r7, sl
 801ec24:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801ec28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ec2a:	4410      	add	r0, r2
 801ec2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ec2e:	f108 0801 	add.w	r8, r8, #1
 801ec32:	4411      	add	r1, r2
 801ec34:	e7a1      	b.n	801eb7a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ec36:	b007      	add	sp, #28
 801ec38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec3c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ec3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec40:	b085      	sub	sp, #20
 801ec42:	468b      	mov	fp, r1
 801ec44:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ec46:	9203      	str	r2, [sp, #12]
 801ec48:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801ec4c:	6841      	ldr	r1, [r0, #4]
 801ec4e:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801ec52:	fb01 2404 	mla	r4, r1, r4, r2
 801ec56:	6802      	ldr	r2, [r0, #0]
 801ec58:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ec5c:	f8de 2000 	ldr.w	r2, [lr]
 801ec60:	9200      	str	r2, [sp, #0]
 801ec62:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ec66:	3204      	adds	r2, #4
 801ec68:	9201      	str	r2, [sp, #4]
 801ec6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ec6e:	f1bb 0f00 	cmp.w	fp, #0
 801ec72:	dc03      	bgt.n	801ec7c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ec74:	9a03      	ldr	r2, [sp, #12]
 801ec76:	2a00      	cmp	r2, #0
 801ec78:	f340 8153 	ble.w	801ef22 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ec7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ec7e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ec82:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801ec86:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ec8a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ec8c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ec90:	2b00      	cmp	r3, #0
 801ec92:	dd0e      	ble.n	801ecb2 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ec94:	1408      	asrs	r0, r1, #16
 801ec96:	d405      	bmi.n	801eca4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ec98:	42b8      	cmp	r0, r7
 801ec9a:	da03      	bge.n	801eca4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ec9c:	1410      	asrs	r0, r2, #16
 801ec9e:	d401      	bmi.n	801eca4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801eca0:	42b0      	cmp	r0, r6
 801eca2:	db07      	blt.n	801ecb4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801eca4:	9811      	ldr	r0, [sp, #68]	; 0x44
 801eca6:	4401      	add	r1, r0
 801eca8:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ecaa:	3b01      	subs	r3, #1
 801ecac:	4402      	add	r2, r0
 801ecae:	3402      	adds	r4, #2
 801ecb0:	e7ee      	b.n	801ec90 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ecb2:	d017      	beq.n	801ece4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ecb4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ecb6:	1e58      	subs	r0, r3, #1
 801ecb8:	fb05 1500 	mla	r5, r5, r0, r1
 801ecbc:	142d      	asrs	r5, r5, #16
 801ecbe:	d409      	bmi.n	801ecd4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ecc0:	42bd      	cmp	r5, r7
 801ecc2:	da07      	bge.n	801ecd4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ecc4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ecc6:	fb05 2000 	mla	r0, r5, r0, r2
 801ecca:	1400      	asrs	r0, r0, #16
 801eccc:	d402      	bmi.n	801ecd4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ecce:	42b0      	cmp	r0, r6
 801ecd0:	f2c0 80bc 	blt.w	801ee4c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801ecd4:	2600      	movs	r6, #0
 801ecd6:	1998      	adds	r0, r3, r6
 801ecd8:	2800      	cmp	r0, #0
 801ecda:	dc3e      	bgt.n	801ed5a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ecdc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ece0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ece4:	f1bb 0f00 	cmp.w	fp, #0
 801ece8:	f340 811b 	ble.w	801ef22 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ecec:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ecf0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ecf4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ecf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ecfa:	f1bb 0b01 	subs.w	fp, fp, #1
 801ecfe:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ed02:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ed06:	eeb0 6a62 	vmov.f32	s12, s5
 801ed0a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ed0e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed12:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ed16:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ed1a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ed1e:	eeb0 6a43 	vmov.f32	s12, s6
 801ed22:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ed26:	ee12 2a90 	vmov	r2, s5
 801ed2a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ed2e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed32:	ee13 2a10 	vmov	r2, s6
 801ed36:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed3a:	9311      	str	r3, [sp, #68]	; 0x44
 801ed3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ed3e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed42:	9a03      	ldr	r2, [sp, #12]
 801ed44:	9312      	str	r3, [sp, #72]	; 0x48
 801ed46:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ed4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ed4c:	eeb0 3a67 	vmov.f32	s6, s15
 801ed50:	bf08      	it	eq
 801ed52:	4613      	moveq	r3, r2
 801ed54:	eef0 2a47 	vmov.f32	s5, s14
 801ed58:	e789      	b.n	801ec6e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ed5a:	140f      	asrs	r7, r1, #16
 801ed5c:	d426      	bmi.n	801edac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ed5e:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ed62:	42bd      	cmp	r5, r7
 801ed64:	dd22      	ble.n	801edac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ed66:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ed6a:	d41f      	bmi.n	801edac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ed6c:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ed70:	4560      	cmp	r0, ip
 801ed72:	dd1b      	ble.n	801edac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ed74:	9800      	ldr	r0, [sp, #0]
 801ed76:	b22d      	sxth	r5, r5
 801ed78:	fb0c 0505 	mla	r5, ip, r5, r0
 801ed7c:	5de8      	ldrb	r0, [r5, r7]
 801ed7e:	9d01      	ldr	r5, [sp, #4]
 801ed80:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ed84:	0e07      	lsrs	r7, r0, #24
 801ed86:	2fff      	cmp	r7, #255	; 0xff
 801ed88:	d116      	bne.n	801edb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ed8a:	f06f 0501 	mvn.w	r5, #1
 801ed8e:	fb05 f706 	mul.w	r7, r5, r6
 801ed92:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801ed96:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ed9a:	0945      	lsrs	r5, r0, #5
 801ed9c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801eda0:	ea4c 0505 	orr.w	r5, ip, r5
 801eda4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801eda8:	4305      	orrs	r5, r0
 801edaa:	53e5      	strh	r5, [r4, r7]
 801edac:	9811      	ldr	r0, [sp, #68]	; 0x44
 801edae:	4401      	add	r1, r0
 801edb0:	9812      	ldr	r0, [sp, #72]	; 0x48
 801edb2:	3e01      	subs	r6, #1
 801edb4:	4402      	add	r2, r0
 801edb6:	e78e      	b.n	801ecd6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801edb8:	b2fd      	uxtb	r5, r7
 801edba:	2f00      	cmp	r7, #0
 801edbc:	d0f6      	beq.n	801edac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801edbe:	f06f 0701 	mvn.w	r7, #1
 801edc2:	4377      	muls	r7, r6
 801edc4:	fa1f f985 	uxth.w	r9, r5
 801edc8:	f834 8007 	ldrh.w	r8, [r4, r7]
 801edcc:	9702      	str	r7, [sp, #8]
 801edce:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801edd2:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801edd6:	43ed      	mvns	r5, r5
 801edd8:	b2ed      	uxtb	r5, r5
 801edda:	fb17 f709 	smulbb	r7, r7, r9
 801edde:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ede2:	fb0c 7c05 	mla	ip, ip, r5, r7
 801ede6:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801edea:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801edee:	b2c0      	uxtb	r0, r0
 801edf0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801edf4:	fa5f f888 	uxtb.w	r8, r8
 801edf8:	fb10 f009 	smulbb	r0, r0, r9
 801edfc:	fb08 0005 	mla	r0, r8, r5, r0
 801ee00:	b280      	uxth	r0, r0
 801ee02:	fa1f fc8c 	uxth.w	ip, ip
 801ee06:	fb1a fa09 	smulbb	sl, sl, r9
 801ee0a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ee0e:	fb07 a705 	mla	r7, r7, r5, sl
 801ee12:	f100 0a01 	add.w	sl, r0, #1
 801ee16:	f10c 0501 	add.w	r5, ip, #1
 801ee1a:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801ee1e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ee22:	b2bf      	uxth	r7, r7
 801ee24:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ee28:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801ee2c:	ea4a 0c0c 	orr.w	ip, sl, ip
 801ee30:	f107 0a01 	add.w	sl, r7, #1
 801ee34:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801ee38:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ee3c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ee40:	9802      	ldr	r0, [sp, #8]
 801ee42:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ee46:	f824 c000 	strh.w	ip, [r4, r0]
 801ee4a:	e7af      	b.n	801edac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ee4c:	f04f 0800 	mov.w	r8, #0
 801ee50:	eba3 0008 	sub.w	r0, r3, r8
 801ee54:	2800      	cmp	r0, #0
 801ee56:	f77f af41 	ble.w	801ecdc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ee5a:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801ee5e:	9f00      	ldr	r7, [sp, #0]
 801ee60:	1410      	asrs	r0, r2, #16
 801ee62:	140d      	asrs	r5, r1, #16
 801ee64:	fb06 7000 	mla	r0, r6, r0, r7
 801ee68:	5d40      	ldrb	r0, [r0, r5]
 801ee6a:	9d01      	ldr	r5, [sp, #4]
 801ee6c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801ee70:	0e2e      	lsrs	r6, r5, #24
 801ee72:	2eff      	cmp	r6, #255	; 0xff
 801ee74:	d112      	bne.n	801ee9c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801ee76:	482c      	ldr	r0, [pc, #176]	; (801ef28 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801ee78:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801ee7c:	0968      	lsrs	r0, r5, #5
 801ee7e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ee82:	4330      	orrs	r0, r6
 801ee84:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ee88:	4328      	orrs	r0, r5
 801ee8a:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801ee8e:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ee90:	4401      	add	r1, r0
 801ee92:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ee94:	f108 0801 	add.w	r8, r8, #1
 801ee98:	4402      	add	r2, r0
 801ee9a:	e7d9      	b.n	801ee50 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ee9c:	b2f0      	uxtb	r0, r6
 801ee9e:	2e00      	cmp	r6, #0
 801eea0:	d0f5      	beq.n	801ee8e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801eea2:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801eea6:	fa1f f980 	uxth.w	r9, r0
 801eeaa:	ea4f 272c 	mov.w	r7, ip, asr #8
 801eeae:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801eeb2:	43c0      	mvns	r0, r0
 801eeb4:	b2c0      	uxtb	r0, r0
 801eeb6:	fb16 f609 	smulbb	r6, r6, r9
 801eeba:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801eebe:	fb07 6700 	mla	r7, r7, r0, r6
 801eec2:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801eec6:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801eeca:	b2ed      	uxtb	r5, r5
 801eecc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801eed0:	fa5f fc8c 	uxtb.w	ip, ip
 801eed4:	fb15 f509 	smulbb	r5, r5, r9
 801eed8:	fb0c 5500 	mla	r5, ip, r0, r5
 801eedc:	b2bf      	uxth	r7, r7
 801eede:	fb1a fa09 	smulbb	sl, sl, r9
 801eee2:	b2ad      	uxth	r5, r5
 801eee4:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801eee8:	fb06 a600 	mla	r6, r6, r0, sl
 801eeec:	1c78      	adds	r0, r7, #1
 801eeee:	f105 0a01 	add.w	sl, r5, #1
 801eef2:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801eef6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801eefa:	b2b6      	uxth	r6, r6
 801eefc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ef00:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801ef04:	ea4a 0707 	orr.w	r7, sl, r7
 801ef08:	f106 0a01 	add.w	sl, r6, #1
 801ef0c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ef10:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ef14:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801ef18:	ea47 070a 	orr.w	r7, r7, sl
 801ef1c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801ef20:	e7b5      	b.n	801ee8e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ef22:	b005      	add	sp, #20
 801ef24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef28:	fffff800 	.word	0xfffff800

0801ef2c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ef2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef30:	b087      	sub	sp, #28
 801ef32:	468b      	mov	fp, r1
 801ef34:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ef36:	9204      	str	r2, [sp, #16]
 801ef38:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801ef3c:	9205      	str	r2, [sp, #20]
 801ef3e:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801ef42:	6861      	ldr	r1, [r4, #4]
 801ef44:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 801ef48:	fb01 2000 	mla	r0, r1, r0, r2
 801ef4c:	6822      	ldr	r2, [r4, #0]
 801ef4e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801ef52:	f8de 2000 	ldr.w	r2, [lr]
 801ef56:	9201      	str	r2, [sp, #4]
 801ef58:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ef5c:	9202      	str	r2, [sp, #8]
 801ef5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ef62:	f1bb 0f00 	cmp.w	fp, #0
 801ef66:	dc03      	bgt.n	801ef70 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801ef68:	9a04      	ldr	r2, [sp, #16]
 801ef6a:	2a00      	cmp	r2, #0
 801ef6c:	f340 8142 	ble.w	801f1f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801ef70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ef72:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ef76:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801ef7a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801ef7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ef80:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ef84:	2b00      	cmp	r3, #0
 801ef86:	dd0e      	ble.n	801efa6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ef88:	140c      	asrs	r4, r1, #16
 801ef8a:	d405      	bmi.n	801ef98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ef8c:	42bc      	cmp	r4, r7
 801ef8e:	da03      	bge.n	801ef98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ef90:	1414      	asrs	r4, r2, #16
 801ef92:	d401      	bmi.n	801ef98 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ef94:	42b4      	cmp	r4, r6
 801ef96:	db07      	blt.n	801efa8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ef98:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ef9a:	4421      	add	r1, r4
 801ef9c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ef9e:	3b01      	subs	r3, #1
 801efa0:	4422      	add	r2, r4
 801efa2:	3002      	adds	r0, #2
 801efa4:	e7ee      	b.n	801ef84 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801efa6:	d019      	beq.n	801efdc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801efa8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801efaa:	1e5c      	subs	r4, r3, #1
 801efac:	fb05 1504 	mla	r5, r5, r4, r1
 801efb0:	142d      	asrs	r5, r5, #16
 801efb2:	d409      	bmi.n	801efc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801efb4:	42bd      	cmp	r5, r7
 801efb6:	da07      	bge.n	801efc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801efb8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801efba:	fb05 2404 	mla	r4, r5, r4, r2
 801efbe:	1424      	asrs	r4, r4, #16
 801efc0:	d402      	bmi.n	801efc8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801efc2:	42b4      	cmp	r4, r6
 801efc4:	f2c0 80b1 	blt.w	801f12a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801efc8:	f04f 0800 	mov.w	r8, #0
 801efcc:	eb03 0408 	add.w	r4, r3, r8
 801efd0:	2c00      	cmp	r4, #0
 801efd2:	dc3e      	bgt.n	801f052 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801efd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801efd8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801efdc:	f1bb 0f00 	cmp.w	fp, #0
 801efe0:	f340 8108 	ble.w	801f1f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801efe4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801efe8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801efec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eff0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801eff2:	f1bb 0b01 	subs.w	fp, fp, #1
 801eff6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801effa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801effe:	eeb0 6a62 	vmov.f32	s12, s5
 801f002:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f006:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f00a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f00e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f012:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f016:	eeb0 6a43 	vmov.f32	s12, s6
 801f01a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f01e:	ee12 2a90 	vmov	r2, s5
 801f022:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f026:	fb92 f3f3 	sdiv	r3, r2, r3
 801f02a:	ee13 2a10 	vmov	r2, s6
 801f02e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f032:	9313      	str	r3, [sp, #76]	; 0x4c
 801f034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f036:	fb92 f3f3 	sdiv	r3, r2, r3
 801f03a:	9a04      	ldr	r2, [sp, #16]
 801f03c:	9314      	str	r3, [sp, #80]	; 0x50
 801f03e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f042:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f044:	eeb0 3a67 	vmov.f32	s6, s15
 801f048:	bf08      	it	eq
 801f04a:	4613      	moveq	r3, r2
 801f04c:	eef0 2a47 	vmov.f32	s5, s14
 801f050:	e787      	b.n	801ef62 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801f052:	140e      	asrs	r6, r1, #16
 801f054:	d462      	bmi.n	801f11c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f056:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f05a:	42b5      	cmp	r5, r6
 801f05c:	dd5e      	ble.n	801f11c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f05e:	1417      	asrs	r7, r2, #16
 801f060:	d45c      	bmi.n	801f11c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f062:	f8de 400c 	ldr.w	r4, [lr, #12]
 801f066:	42bc      	cmp	r4, r7
 801f068:	dd58      	ble.n	801f11c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f06a:	b22d      	sxth	r5, r5
 801f06c:	fb07 6505 	mla	r5, r7, r5, r6
 801f070:	9c02      	ldr	r4, [sp, #8]
 801f072:	5d66      	ldrb	r6, [r4, r5]
 801f074:	2e00      	cmp	r6, #0
 801f076:	d051      	beq.n	801f11c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f078:	9c01      	ldr	r4, [sp, #4]
 801f07a:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801f07e:	f06f 0401 	mvn.w	r4, #1
 801f082:	fb04 f408 	mul.w	r4, r4, r8
 801f086:	9403      	str	r4, [sp, #12]
 801f088:	5b05      	ldrh	r5, [r0, r4]
 801f08a:	9c05      	ldr	r4, [sp, #20]
 801f08c:	4366      	muls	r6, r4
 801f08e:	1c74      	adds	r4, r6, #1
 801f090:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f094:	1224      	asrs	r4, r4, #8
 801f096:	b2a7      	uxth	r7, r4
 801f098:	122e      	asrs	r6, r5, #8
 801f09a:	43e4      	mvns	r4, r4
 801f09c:	b2e4      	uxtb	r4, r4
 801f09e:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801f0a2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f0a6:	fb16 f604 	smulbb	r6, r6, r4
 801f0aa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f0ae:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f0b2:	00ed      	lsls	r5, r5, #3
 801f0b4:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f0b8:	b2ed      	uxtb	r5, r5
 801f0ba:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801f0be:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f0c2:	fb15 f504 	smulbb	r5, r5, r4
 801f0c6:	fa5f f989 	uxtb.w	r9, r9
 801f0ca:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f0ce:	fb09 5507 	mla	r5, r9, r7, r5
 801f0d2:	fb1a fa04 	smulbb	sl, sl, r4
 801f0d6:	fa1f fc8c 	uxth.w	ip, ip
 801f0da:	b2ad      	uxth	r5, r5
 801f0dc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f0e0:	fb06 a607 	mla	r6, r6, r7, sl
 801f0e4:	f10c 0401 	add.w	r4, ip, #1
 801f0e8:	f105 0a01 	add.w	sl, r5, #1
 801f0ec:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f0f0:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f0f4:	b2b6      	uxth	r6, r6
 801f0f6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f0fa:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f0fe:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f102:	f106 0a01 	add.w	sl, r6, #1
 801f106:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f10a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f10e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f112:	9c03      	ldr	r4, [sp, #12]
 801f114:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f118:	f820 c004 	strh.w	ip, [r0, r4]
 801f11c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f11e:	4421      	add	r1, r4
 801f120:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f122:	f108 38ff 	add.w	r8, r8, #4294967295
 801f126:	4422      	add	r2, r4
 801f128:	e750      	b.n	801efcc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f12a:	f04f 0900 	mov.w	r9, #0
 801f12e:	eba3 0409 	sub.w	r4, r3, r9
 801f132:	2c00      	cmp	r4, #0
 801f134:	f77f af4e 	ble.w	801efd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f138:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801f13c:	140d      	asrs	r5, r1, #16
 801f13e:	1414      	asrs	r4, r2, #16
 801f140:	fb06 5404 	mla	r4, r6, r4, r5
 801f144:	9d02      	ldr	r5, [sp, #8]
 801f146:	5d2e      	ldrb	r6, [r5, r4]
 801f148:	2e00      	cmp	r6, #0
 801f14a:	d04c      	beq.n	801f1e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f14c:	9d01      	ldr	r5, [sp, #4]
 801f14e:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801f152:	9c05      	ldr	r4, [sp, #20]
 801f154:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f158:	4366      	muls	r6, r4
 801f15a:	1c74      	adds	r4, r6, #1
 801f15c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f160:	1224      	asrs	r4, r4, #8
 801f162:	b2a7      	uxth	r7, r4
 801f164:	122e      	asrs	r6, r5, #8
 801f166:	43e4      	mvns	r4, r4
 801f168:	b2e4      	uxtb	r4, r4
 801f16a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801f16e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f172:	fb16 f604 	smulbb	r6, r6, r4
 801f176:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f17a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f17e:	00ed      	lsls	r5, r5, #3
 801f180:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f184:	b2ed      	uxtb	r5, r5
 801f186:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801f18a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f18e:	fb15 f504 	smulbb	r5, r5, r4
 801f192:	fa5f f888 	uxtb.w	r8, r8
 801f196:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f19a:	fb08 5507 	mla	r5, r8, r7, r5
 801f19e:	fb1a fa04 	smulbb	sl, sl, r4
 801f1a2:	fa1f fc8c 	uxth.w	ip, ip
 801f1a6:	b2ad      	uxth	r5, r5
 801f1a8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f1ac:	fb06 a607 	mla	r6, r6, r7, sl
 801f1b0:	f10c 0401 	add.w	r4, ip, #1
 801f1b4:	f105 0a01 	add.w	sl, r5, #1
 801f1b8:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f1bc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f1c0:	b2b6      	uxth	r6, r6
 801f1c2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f1c6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f1ca:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f1ce:	f106 0a01 	add.w	sl, r6, #1
 801f1d2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f1d6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f1da:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f1de:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f1e2:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f1e6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f1e8:	4421      	add	r1, r4
 801f1ea:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f1ec:	f109 0901 	add.w	r9, r9, #1
 801f1f0:	4422      	add	r2, r4
 801f1f2:	e79c      	b.n	801f12e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f1f4:	b007      	add	sp, #28
 801f1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f1fa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f1fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1fe:	b085      	sub	sp, #20
 801f200:	468b      	mov	fp, r1
 801f202:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f204:	9203      	str	r2, [sp, #12]
 801f206:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801f20a:	6861      	ldr	r1, [r4, #4]
 801f20c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801f210:	fb01 2000 	mla	r0, r1, r0, r2
 801f214:	6822      	ldr	r2, [r4, #0]
 801f216:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f21a:	f8d8 2000 	ldr.w	r2, [r8]
 801f21e:	9200      	str	r2, [sp, #0]
 801f220:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f224:	9201      	str	r2, [sp, #4]
 801f226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f22a:	f1bb 0f00 	cmp.w	fp, #0
 801f22e:	dc03      	bgt.n	801f238 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f230:	9a03      	ldr	r2, [sp, #12]
 801f232:	2a00      	cmp	r2, #0
 801f234:	f340 8146 	ble.w	801f4c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f238:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f23a:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f23e:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f242:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f246:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f248:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f24c:	2b00      	cmp	r3, #0
 801f24e:	dd0e      	ble.n	801f26e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f250:	140c      	asrs	r4, r1, #16
 801f252:	d405      	bmi.n	801f260 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f254:	42bc      	cmp	r4, r7
 801f256:	da03      	bge.n	801f260 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f258:	1414      	asrs	r4, r2, #16
 801f25a:	d401      	bmi.n	801f260 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f25c:	42b4      	cmp	r4, r6
 801f25e:	db07      	blt.n	801f270 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f260:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f262:	4421      	add	r1, r4
 801f264:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f266:	3b01      	subs	r3, #1
 801f268:	4422      	add	r2, r4
 801f26a:	3002      	adds	r0, #2
 801f26c:	e7ee      	b.n	801f24c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f26e:	d017      	beq.n	801f2a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f270:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f272:	1e5c      	subs	r4, r3, #1
 801f274:	fb05 1504 	mla	r5, r5, r4, r1
 801f278:	142d      	asrs	r5, r5, #16
 801f27a:	d409      	bmi.n	801f290 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f27c:	42bd      	cmp	r5, r7
 801f27e:	da07      	bge.n	801f290 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f280:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f282:	fb05 2404 	mla	r4, r5, r4, r2
 801f286:	1424      	asrs	r4, r4, #16
 801f288:	d402      	bmi.n	801f290 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f28a:	42b4      	cmp	r4, r6
 801f28c:	f2c0 80b3 	blt.w	801f3f6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801f290:	2600      	movs	r6, #0
 801f292:	199c      	adds	r4, r3, r6
 801f294:	2c00      	cmp	r4, #0
 801f296:	dc3e      	bgt.n	801f316 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f298:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f29c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f2a0:	f1bb 0f00 	cmp.w	fp, #0
 801f2a4:	f340 810e 	ble.w	801f4c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f2a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f2ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f2b0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f2b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f2b6:	f1bb 0b01 	subs.w	fp, fp, #1
 801f2ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f2be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f2c2:	eeb0 6a62 	vmov.f32	s12, s5
 801f2c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f2ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f2ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f2d2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f2d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f2da:	eeb0 6a43 	vmov.f32	s12, s6
 801f2de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f2e2:	ee12 2a90 	vmov	r2, s5
 801f2e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f2ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2ee:	ee13 2a10 	vmov	r2, s6
 801f2f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f2f6:	9311      	str	r3, [sp, #68]	; 0x44
 801f2f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f2fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801f2fe:	9a03      	ldr	r2, [sp, #12]
 801f300:	9312      	str	r3, [sp, #72]	; 0x48
 801f302:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f306:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f308:	eeb0 3a67 	vmov.f32	s6, s15
 801f30c:	bf08      	it	eq
 801f30e:	4613      	moveq	r3, r2
 801f310:	eef0 2a47 	vmov.f32	s5, s14
 801f314:	e789      	b.n	801f22a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f316:	140f      	asrs	r7, r1, #16
 801f318:	d418      	bmi.n	801f34c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f31a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801f31e:	42bd      	cmp	r5, r7
 801f320:	dd14      	ble.n	801f34c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f322:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f326:	d411      	bmi.n	801f34c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f328:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801f32c:	4564      	cmp	r4, ip
 801f32e:	dd0d      	ble.n	801f34c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f330:	b22d      	sxth	r5, r5
 801f332:	fb0c 7505 	mla	r5, ip, r5, r7
 801f336:	9c01      	ldr	r4, [sp, #4]
 801f338:	5d64      	ldrb	r4, [r4, r5]
 801f33a:	2cff      	cmp	r4, #255	; 0xff
 801f33c:	d10c      	bne.n	801f358 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f33e:	9c00      	ldr	r4, [sp, #0]
 801f340:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801f344:	f06f 0401 	mvn.w	r4, #1
 801f348:	4374      	muls	r4, r6
 801f34a:	5305      	strh	r5, [r0, r4]
 801f34c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f34e:	4421      	add	r1, r4
 801f350:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f352:	3e01      	subs	r6, #1
 801f354:	4422      	add	r2, r4
 801f356:	e79c      	b.n	801f292 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f358:	2c00      	cmp	r4, #0
 801f35a:	d0f7      	beq.n	801f34c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f35c:	9f00      	ldr	r7, [sp, #0]
 801f35e:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801f362:	f06f 0501 	mvn.w	r5, #1
 801f366:	4375      	muls	r5, r6
 801f368:	9502      	str	r5, [sp, #8]
 801f36a:	5b45      	ldrh	r5, [r0, r5]
 801f36c:	fa1f fc84 	uxth.w	ip, r4
 801f370:	122f      	asrs	r7, r5, #8
 801f372:	43e4      	mvns	r4, r4
 801f374:	b2e4      	uxtb	r4, r4
 801f376:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801f37a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f37e:	fb17 f704 	smulbb	r7, r7, r4
 801f382:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f386:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801f38a:	00ed      	lsls	r5, r5, #3
 801f38c:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801f390:	b2ed      	uxtb	r5, r5
 801f392:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801f396:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f39a:	fb15 f504 	smulbb	r5, r5, r4
 801f39e:	fa5f f989 	uxtb.w	r9, r9
 801f3a2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f3a6:	fb09 550c 	mla	r5, r9, ip, r5
 801f3aa:	fb1a fa04 	smulbb	sl, sl, r4
 801f3ae:	fa1f fe8e 	uxth.w	lr, lr
 801f3b2:	b2ad      	uxth	r5, r5
 801f3b4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f3b8:	fb07 a70c 	mla	r7, r7, ip, sl
 801f3bc:	f10e 0401 	add.w	r4, lr, #1
 801f3c0:	f105 0a01 	add.w	sl, r5, #1
 801f3c4:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801f3c8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f3cc:	b2bf      	uxth	r7, r7
 801f3ce:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f3d2:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801f3d6:	ea4a 0e0e 	orr.w	lr, sl, lr
 801f3da:	f107 0a01 	add.w	sl, r7, #1
 801f3de:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f3e2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f3e6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f3ea:	9c02      	ldr	r4, [sp, #8]
 801f3ec:	ea4e 0e0a 	orr.w	lr, lr, sl
 801f3f0:	f820 e004 	strh.w	lr, [r0, r4]
 801f3f4:	e7aa      	b.n	801f34c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f3f6:	f04f 0900 	mov.w	r9, #0
 801f3fa:	eba3 0409 	sub.w	r4, r3, r9
 801f3fe:	2c00      	cmp	r4, #0
 801f400:	f77f af4a 	ble.w	801f298 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f404:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801f408:	1414      	asrs	r4, r2, #16
 801f40a:	140d      	asrs	r5, r1, #16
 801f40c:	fb06 5504 	mla	r5, r6, r4, r5
 801f410:	9c01      	ldr	r4, [sp, #4]
 801f412:	5d64      	ldrb	r4, [r4, r5]
 801f414:	2cff      	cmp	r4, #255	; 0xff
 801f416:	d10b      	bne.n	801f430 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801f418:	9c00      	ldr	r4, [sp, #0]
 801f41a:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801f41e:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801f422:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801f424:	4421      	add	r1, r4
 801f426:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f428:	f109 0901 	add.w	r9, r9, #1
 801f42c:	4422      	add	r2, r4
 801f42e:	e7e4      	b.n	801f3fa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f430:	2c00      	cmp	r4, #0
 801f432:	d0f6      	beq.n	801f422 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f434:	9e00      	ldr	r6, [sp, #0]
 801f436:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801f43a:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f43e:	b2a7      	uxth	r7, r4
 801f440:	122e      	asrs	r6, r5, #8
 801f442:	43e4      	mvns	r4, r4
 801f444:	b2e4      	uxtb	r4, r4
 801f446:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f44a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801f44e:	fb16 f604 	smulbb	r6, r6, r4
 801f452:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f456:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f45a:	00ed      	lsls	r5, r5, #3
 801f45c:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f460:	b2ed      	uxtb	r5, r5
 801f462:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f466:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f46a:	fb15 f504 	smulbb	r5, r5, r4
 801f46e:	fa5f fe8e 	uxtb.w	lr, lr
 801f472:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801f476:	fb0e 5507 	mla	r5, lr, r7, r5
 801f47a:	fb1a fa04 	smulbb	sl, sl, r4
 801f47e:	fa1f fc8c 	uxth.w	ip, ip
 801f482:	b2ad      	uxth	r5, r5
 801f484:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f488:	fb06 a607 	mla	r6, r6, r7, sl
 801f48c:	f10c 0401 	add.w	r4, ip, #1
 801f490:	f105 0a01 	add.w	sl, r5, #1
 801f494:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f498:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f49c:	b2b6      	uxth	r6, r6
 801f49e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f4a2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f4a6:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f4aa:	f106 0a01 	add.w	sl, r6, #1
 801f4ae:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f4b2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f4b6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801f4ba:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f4be:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f4c2:	e7ae      	b.n	801f422 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f4c4:	b005      	add	sp, #20
 801f4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f4ca <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f4ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f4ce:	b085      	sub	sp, #20
 801f4d0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f4d2:	9203      	str	r2, [sp, #12]
 801f4d4:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801f4d8:	9201      	str	r2, [sp, #4]
 801f4da:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f4de:	9100      	str	r1, [sp, #0]
 801f4e0:	6841      	ldr	r1, [r0, #4]
 801f4e2:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801f4e6:	fb01 2404 	mla	r4, r1, r4, r2
 801f4ea:	6802      	ldr	r2, [r0, #0]
 801f4ec:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f4f0:	f8de 2000 	ldr.w	r2, [lr]
 801f4f4:	9202      	str	r2, [sp, #8]
 801f4f6:	9a01      	ldr	r2, [sp, #4]
 801f4f8:	43d6      	mvns	r6, r2
 801f4fa:	b2f6      	uxtb	r6, r6
 801f4fc:	9a00      	ldr	r2, [sp, #0]
 801f4fe:	2a00      	cmp	r2, #0
 801f500:	dc03      	bgt.n	801f50a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f502:	9a03      	ldr	r2, [sp, #12]
 801f504:	2a00      	cmp	r2, #0
 801f506:	f340 8124 	ble.w	801f752 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f50a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f50c:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801f510:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801f514:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f518:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f51a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f51e:	2b00      	cmp	r3, #0
 801f520:	dd0e      	ble.n	801f540 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f522:	1408      	asrs	r0, r1, #16
 801f524:	d405      	bmi.n	801f532 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f526:	4560      	cmp	r0, ip
 801f528:	da03      	bge.n	801f532 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f52a:	1410      	asrs	r0, r2, #16
 801f52c:	d401      	bmi.n	801f532 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f52e:	42b8      	cmp	r0, r7
 801f530:	db07      	blt.n	801f542 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f532:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f534:	4401      	add	r1, r0
 801f536:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f538:	3b01      	subs	r3, #1
 801f53a:	4402      	add	r2, r0
 801f53c:	3402      	adds	r4, #2
 801f53e:	e7ee      	b.n	801f51e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f540:	d06e      	beq.n	801f620 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f542:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f544:	1e58      	subs	r0, r3, #1
 801f546:	fb05 1500 	mla	r5, r5, r0, r1
 801f54a:	142d      	asrs	r5, r5, #16
 801f54c:	d45c      	bmi.n	801f608 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f54e:	4565      	cmp	r5, ip
 801f550:	da5a      	bge.n	801f608 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f552:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f554:	fb05 2000 	mla	r0, r5, r0, r2
 801f558:	1400      	asrs	r0, r0, #16
 801f55a:	d455      	bmi.n	801f608 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f55c:	42b8      	cmp	r0, r7
 801f55e:	da53      	bge.n	801f608 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f560:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801f564:	4699      	mov	r9, r3
 801f566:	46a2      	mov	sl, r4
 801f568:	f1b9 0f00 	cmp.w	r9, #0
 801f56c:	dd54      	ble.n	801f618 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f56e:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f572:	140d      	asrs	r5, r1, #16
 801f574:	1410      	asrs	r0, r2, #16
 801f576:	fb07 5000 	mla	r0, r7, r0, r5
 801f57a:	9d02      	ldr	r5, [sp, #8]
 801f57c:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f580:	f8ba 5000 	ldrh.w	r5, [sl]
 801f584:	122f      	asrs	r7, r5, #8
 801f586:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f58a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f58e:	fb17 f706 	smulbb	r7, r7, r6
 801f592:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801f596:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f59a:	00ed      	lsls	r5, r5, #3
 801f59c:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801f5a0:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 801f5a4:	10c7      	asrs	r7, r0, #3
 801f5a6:	b2ed      	uxtb	r5, r5
 801f5a8:	00c0      	lsls	r0, r0, #3
 801f5aa:	fb18 f806 	smulbb	r8, r8, r6
 801f5ae:	fb15 f506 	smulbb	r5, r5, r6
 801f5b2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f5b6:	b2c0      	uxtb	r0, r0
 801f5b8:	fa1f fc8c 	uxth.w	ip, ip
 801f5bc:	fb07 870b 	mla	r7, r7, fp, r8
 801f5c0:	fb00 500b 	mla	r0, r0, fp, r5
 801f5c4:	b280      	uxth	r0, r0
 801f5c6:	b2bf      	uxth	r7, r7
 801f5c8:	f10c 0501 	add.w	r5, ip, #1
 801f5cc:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f5d0:	f107 0801 	add.w	r8, r7, #1
 801f5d4:	1c45      	adds	r5, r0, #1
 801f5d6:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f5da:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801f5de:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f5e0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f5e4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f5e8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f5ec:	ea45 0c0c 	orr.w	ip, r5, ip
 801f5f0:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f5f4:	4401      	add	r1, r0
 801f5f6:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f5f8:	ea4c 0c08 	orr.w	ip, ip, r8
 801f5fc:	f82a cb02 	strh.w	ip, [sl], #2
 801f600:	4402      	add	r2, r0
 801f602:	f109 39ff 	add.w	r9, r9, #4294967295
 801f606:	e7af      	b.n	801f568 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f608:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801f60c:	f04f 0800 	mov.w	r8, #0
 801f610:	eb03 0008 	add.w	r0, r3, r8
 801f614:	2800      	cmp	r0, #0
 801f616:	dc41      	bgt.n	801f69c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f618:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f61c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f620:	9b00      	ldr	r3, [sp, #0]
 801f622:	2b00      	cmp	r3, #0
 801f624:	f340 8095 	ble.w	801f752 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f628:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f62c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f630:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f634:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f636:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f63a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f63e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f642:	eef0 6a62 	vmov.f32	s13, s5
 801f646:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f64a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f64e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f652:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 801f656:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f65a:	eef0 6a43 	vmov.f32	s13, s6
 801f65e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f662:	ee12 2a90 	vmov	r2, s5
 801f666:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f66a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f66e:	ee13 2a10 	vmov	r2, s6
 801f672:	9311      	str	r3, [sp, #68]	; 0x44
 801f674:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f676:	fb92 f3f3 	sdiv	r3, r2, r3
 801f67a:	9312      	str	r3, [sp, #72]	; 0x48
 801f67c:	9b00      	ldr	r3, [sp, #0]
 801f67e:	9a03      	ldr	r2, [sp, #12]
 801f680:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f684:	3b01      	subs	r3, #1
 801f686:	9300      	str	r3, [sp, #0]
 801f688:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 801f68c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f68e:	eeb0 3a67 	vmov.f32	s6, s15
 801f692:	bf08      	it	eq
 801f694:	4613      	moveq	r3, r2
 801f696:	eef0 2a47 	vmov.f32	s5, s14
 801f69a:	e72f      	b.n	801f4fc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f69c:	140f      	asrs	r7, r1, #16
 801f69e:	d451      	bmi.n	801f744 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f6a0:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f6a4:	42bd      	cmp	r5, r7
 801f6a6:	dd4d      	ble.n	801f744 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f6a8:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f6ac:	d44a      	bmi.n	801f744 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f6ae:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f6b2:	4560      	cmp	r0, ip
 801f6b4:	dd46      	ble.n	801f744 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f6b6:	b22d      	sxth	r5, r5
 801f6b8:	fb0c 7505 	mla	r5, ip, r5, r7
 801f6bc:	9802      	ldr	r0, [sp, #8]
 801f6be:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801f6c2:	f06f 0501 	mvn.w	r5, #1
 801f6c6:	fb05 fb08 	mul.w	fp, r5, r8
 801f6ca:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f6ce:	f834 500b 	ldrh.w	r5, [r4, fp]
 801f6d2:	122f      	asrs	r7, r5, #8
 801f6d4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801f6d8:	fb17 f706 	smulbb	r7, r7, r6
 801f6dc:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f6e0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f6e4:	00ed      	lsls	r5, r5, #3
 801f6e6:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801f6ea:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801f6ee:	10c7      	asrs	r7, r0, #3
 801f6f0:	b2ed      	uxtb	r5, r5
 801f6f2:	00c0      	lsls	r0, r0, #3
 801f6f4:	fb19 f906 	smulbb	r9, r9, r6
 801f6f8:	fb15 f506 	smulbb	r5, r5, r6
 801f6fc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f700:	b2c0      	uxtb	r0, r0
 801f702:	fa1f fc8c 	uxth.w	ip, ip
 801f706:	fb07 970a 	mla	r7, r7, sl, r9
 801f70a:	fb00 500a 	mla	r0, r0, sl, r5
 801f70e:	b2bf      	uxth	r7, r7
 801f710:	b280      	uxth	r0, r0
 801f712:	f10c 0501 	add.w	r5, ip, #1
 801f716:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f71a:	f107 0901 	add.w	r9, r7, #1
 801f71e:	1c45      	adds	r5, r0, #1
 801f720:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f724:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801f728:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f72c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f730:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f734:	ea45 0c0c 	orr.w	ip, r5, ip
 801f738:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f73c:	ea4c 0c09 	orr.w	ip, ip, r9
 801f740:	f824 c00b 	strh.w	ip, [r4, fp]
 801f744:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f746:	4401      	add	r1, r0
 801f748:	9812      	ldr	r0, [sp, #72]	; 0x48
 801f74a:	f108 38ff 	add.w	r8, r8, #4294967295
 801f74e:	4402      	add	r2, r0
 801f750:	e75e      	b.n	801f610 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f752:	b005      	add	sp, #20
 801f754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f758 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f75c:	b085      	sub	sp, #20
 801f75e:	4693      	mov	fp, r2
 801f760:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801f762:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f764:	6870      	ldr	r0, [r6, #4]
 801f766:	9101      	str	r1, [sp, #4]
 801f768:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801f76c:	fb00 2404 	mla	r4, r0, r4, r2
 801f770:	6832      	ldr	r2, [r6, #0]
 801f772:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 801f776:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f77a:	682a      	ldr	r2, [r5, #0]
 801f77c:	9202      	str	r2, [sp, #8]
 801f77e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f782:	9a01      	ldr	r2, [sp, #4]
 801f784:	2a00      	cmp	r2, #0
 801f786:	dc03      	bgt.n	801f790 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f788:	f1bb 0f00 	cmp.w	fp, #0
 801f78c:	f340 809a 	ble.w	801f8c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f790:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f792:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f796:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f79a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f79e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f7a0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f7a4:	2b00      	cmp	r3, #0
 801f7a6:	dd0c      	ble.n	801f7c2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f7a8:	1406      	asrs	r6, r0, #16
 801f7aa:	d405      	bmi.n	801f7b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f7ac:	454e      	cmp	r6, r9
 801f7ae:	da03      	bge.n	801f7b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f7b0:	1416      	asrs	r6, r2, #16
 801f7b2:	d401      	bmi.n	801f7b8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f7b4:	4546      	cmp	r6, r8
 801f7b6:	db05      	blt.n	801f7c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f7b8:	4470      	add	r0, lr
 801f7ba:	4462      	add	r2, ip
 801f7bc:	3b01      	subs	r3, #1
 801f7be:	3402      	adds	r4, #2
 801f7c0:	e7f0      	b.n	801f7a4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f7c2:	d00f      	beq.n	801f7e4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f7c4:	1e5e      	subs	r6, r3, #1
 801f7c6:	fb0e 0706 	mla	r7, lr, r6, r0
 801f7ca:	143f      	asrs	r7, r7, #16
 801f7cc:	d541      	bpl.n	801f852 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801f7ce:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801f7d2:	4698      	mov	r8, r3
 801f7d4:	9603      	str	r6, [sp, #12]
 801f7d6:	f1b8 0f00 	cmp.w	r8, #0
 801f7da:	dc56      	bgt.n	801f88a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801f7dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f7e0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f7e4:	9b01      	ldr	r3, [sp, #4]
 801f7e6:	2b00      	cmp	r3, #0
 801f7e8:	dd6c      	ble.n	801f8c4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f7ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f7ee:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f7f2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f7f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f7f8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f7fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f800:	eeb0 6a62 	vmov.f32	s12, s5
 801f804:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f808:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f80c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f810:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801f814:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f818:	eeb0 6a43 	vmov.f32	s12, s6
 801f81c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f820:	ee12 2a90 	vmov	r2, s5
 801f824:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f828:	fb92 fef3 	sdiv	lr, r2, r3
 801f82c:	ee13 2a10 	vmov	r2, s6
 801f830:	fb92 fcf3 	sdiv	ip, r2, r3
 801f834:	9b01      	ldr	r3, [sp, #4]
 801f836:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f83a:	3b01      	subs	r3, #1
 801f83c:	9301      	str	r3, [sp, #4]
 801f83e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801f842:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f844:	eeb0 3a67 	vmov.f32	s6, s15
 801f848:	bf08      	it	eq
 801f84a:	465b      	moveq	r3, fp
 801f84c:	eef0 2a47 	vmov.f32	s5, s14
 801f850:	e797      	b.n	801f782 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801f852:	454f      	cmp	r7, r9
 801f854:	dabb      	bge.n	801f7ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f856:	fb0c 2606 	mla	r6, ip, r6, r2
 801f85a:	1436      	asrs	r6, r6, #16
 801f85c:	d4b7      	bmi.n	801f7ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f85e:	4546      	cmp	r6, r8
 801f860:	dab5      	bge.n	801f7ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f862:	461e      	mov	r6, r3
 801f864:	46a0      	mov	r8, r4
 801f866:	2e00      	cmp	r6, #0
 801f868:	ddb8      	ble.n	801f7dc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f86a:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f86e:	9902      	ldr	r1, [sp, #8]
 801f870:	1417      	asrs	r7, r2, #16
 801f872:	ea4f 4920 	mov.w	r9, r0, asr #16
 801f876:	fb0a 9707 	mla	r7, sl, r7, r9
 801f87a:	4470      	add	r0, lr
 801f87c:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801f880:	f828 7b02 	strh.w	r7, [r8], #2
 801f884:	4462      	add	r2, ip
 801f886:	3e01      	subs	r6, #1
 801f888:	e7ed      	b.n	801f866 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801f88a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f88e:	d414      	bmi.n	801f8ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f890:	68ae      	ldr	r6, [r5, #8]
 801f892:	454e      	cmp	r6, r9
 801f894:	dd11      	ble.n	801f8ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f896:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f89a:	d40e      	bmi.n	801f8ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f89c:	68ef      	ldr	r7, [r5, #12]
 801f89e:	4557      	cmp	r7, sl
 801f8a0:	dd0b      	ble.n	801f8ba <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f8a2:	b236      	sxth	r6, r6
 801f8a4:	fb0a 9606 	mla	r6, sl, r6, r9
 801f8a8:	9f02      	ldr	r7, [sp, #8]
 801f8aa:	f06f 0101 	mvn.w	r1, #1
 801f8ae:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801f8b2:	fb01 f608 	mul.w	r6, r1, r8
 801f8b6:	9903      	ldr	r1, [sp, #12]
 801f8b8:	538f      	strh	r7, [r1, r6]
 801f8ba:	4470      	add	r0, lr
 801f8bc:	4462      	add	r2, ip
 801f8be:	f108 38ff 	add.w	r8, r8, #4294967295
 801f8c2:	e788      	b.n	801f7d6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f8c4:	b005      	add	sp, #20
 801f8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f8ca <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f8ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8ce:	b087      	sub	sp, #28
 801f8d0:	468b      	mov	fp, r1
 801f8d2:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f8d4:	9203      	str	r2, [sp, #12]
 801f8d6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f8da:	9204      	str	r2, [sp, #16]
 801f8dc:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 801f8e0:	6841      	ldr	r1, [r0, #4]
 801f8e2:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801f8e6:	fb01 2505 	mla	r5, r1, r5, r2
 801f8ea:	6802      	ldr	r2, [r0, #0]
 801f8ec:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801f8f0:	f8d9 2000 	ldr.w	r2, [r9]
 801f8f4:	9201      	str	r2, [sp, #4]
 801f8f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f8fa:	f1bb 0f00 	cmp.w	fp, #0
 801f8fe:	dc03      	bgt.n	801f908 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f900:	9a03      	ldr	r2, [sp, #12]
 801f902:	2a00      	cmp	r2, #0
 801f904:	f340 8159 	ble.w	801fbba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801f908:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f90a:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801f90e:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801f912:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f916:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f918:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f91c:	2b00      	cmp	r3, #0
 801f91e:	dd0e      	ble.n	801f93e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f920:	1402      	asrs	r2, r0, #16
 801f922:	d405      	bmi.n	801f930 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f924:	42ba      	cmp	r2, r7
 801f926:	da03      	bge.n	801f930 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f928:	140a      	asrs	r2, r1, #16
 801f92a:	d401      	bmi.n	801f930 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f92c:	42b2      	cmp	r2, r6
 801f92e:	db07      	blt.n	801f940 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f930:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801f932:	4410      	add	r0, r2
 801f934:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f936:	3b01      	subs	r3, #1
 801f938:	4411      	add	r1, r2
 801f93a:	3502      	adds	r5, #2
 801f93c:	e7ee      	b.n	801f91c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f93e:	d017      	beq.n	801f970 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f940:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f942:	1e5a      	subs	r2, r3, #1
 801f944:	fb04 0402 	mla	r4, r4, r2, r0
 801f948:	1424      	asrs	r4, r4, #16
 801f94a:	d409      	bmi.n	801f960 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f94c:	42bc      	cmp	r4, r7
 801f94e:	da07      	bge.n	801f960 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f950:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f952:	fb04 1202 	mla	r2, r4, r2, r1
 801f956:	1412      	asrs	r2, r2, #16
 801f958:	d402      	bmi.n	801f960 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f95a:	42b2      	cmp	r2, r6
 801f95c:	f2c0 80bf 	blt.w	801fade <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f960:	2700      	movs	r7, #0
 801f962:	19da      	adds	r2, r3, r7
 801f964:	2a00      	cmp	r2, #0
 801f966:	dc3e      	bgt.n	801f9e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f968:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f96c:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801f970:	f1bb 0f00 	cmp.w	fp, #0
 801f974:	f340 8121 	ble.w	801fbba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801f978:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f97c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f980:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f984:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f986:	f1bb 0b01 	subs.w	fp, fp, #1
 801f98a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f98e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f992:	eeb0 6a62 	vmov.f32	s12, s5
 801f996:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f99a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f99e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f9a2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f9a6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f9aa:	eeb0 6a43 	vmov.f32	s12, s6
 801f9ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f9b2:	ee12 2a90 	vmov	r2, s5
 801f9b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f9ba:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9be:	ee13 2a10 	vmov	r2, s6
 801f9c2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f9c6:	9313      	str	r3, [sp, #76]	; 0x4c
 801f9c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f9ca:	fb92 f3f3 	sdiv	r3, r2, r3
 801f9ce:	9a03      	ldr	r2, [sp, #12]
 801f9d0:	9314      	str	r3, [sp, #80]	; 0x50
 801f9d2:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f9d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f9d8:	eeb0 3a67 	vmov.f32	s6, s15
 801f9dc:	bf08      	it	eq
 801f9de:	4613      	moveq	r3, r2
 801f9e0:	eef0 2a47 	vmov.f32	s5, s14
 801f9e4:	e789      	b.n	801f8fa <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f9e6:	1406      	asrs	r6, r0, #16
 801f9e8:	d42d      	bmi.n	801fa46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f9ea:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801f9ee:	42b4      	cmp	r4, r6
 801f9f0:	dd29      	ble.n	801fa46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f9f2:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801f9f6:	d426      	bmi.n	801fa46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f9f8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801f9fc:	4562      	cmp	r2, ip
 801f9fe:	dd22      	ble.n	801fa46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fa00:	b224      	sxth	r4, r4
 801fa02:	9a01      	ldr	r2, [sp, #4]
 801fa04:	fb0c 6404 	mla	r4, ip, r4, r6
 801fa08:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801fa0c:	0e22      	lsrs	r2, r4, #24
 801fa0e:	d01a      	beq.n	801fa46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fa10:	9e04      	ldr	r6, [sp, #16]
 801fa12:	4372      	muls	r2, r6
 801fa14:	1c56      	adds	r6, r2, #1
 801fa16:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fa1a:	1212      	asrs	r2, r2, #8
 801fa1c:	0a26      	lsrs	r6, r4, #8
 801fa1e:	2aff      	cmp	r2, #255	; 0xff
 801fa20:	9605      	str	r6, [sp, #20]
 801fa22:	d116      	bne.n	801fa52 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801fa24:	f06f 0201 	mvn.w	r2, #1
 801fa28:	fb02 fc07 	mul.w	ip, r2, r7
 801fa2c:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801fa30:	0962      	lsrs	r2, r4, #5
 801fa32:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fa36:	f026 0607 	bic.w	r6, r6, #7
 801fa3a:	4316      	orrs	r6, r2
 801fa3c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fa40:	4326      	orrs	r6, r4
 801fa42:	f825 600c 	strh.w	r6, [r5, ip]
 801fa46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fa48:	4410      	add	r0, r2
 801fa4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fa4c:	3f01      	subs	r7, #1
 801fa4e:	4411      	add	r1, r2
 801fa50:	e787      	b.n	801f962 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fa52:	f06f 0601 	mvn.w	r6, #1
 801fa56:	437e      	muls	r6, r7
 801fa58:	fa1f fa82 	uxth.w	sl, r2
 801fa5c:	f835 8006 	ldrh.w	r8, [r5, r6]
 801fa60:	9602      	str	r6, [sp, #8]
 801fa62:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801fa66:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801fa6a:	43d2      	mvns	r2, r2
 801fa6c:	b2d2      	uxtb	r2, r2
 801fa6e:	fb1c fc0a 	smulbb	ip, ip, sl
 801fa72:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801fa76:	fb0e ce02 	mla	lr, lr, r2, ip
 801fa7a:	b2e4      	uxtb	r4, r4
 801fa7c:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801fa80:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fa84:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801fa88:	fa5f f888 	uxtb.w	r8, r8
 801fa8c:	fb14 f40a 	smulbb	r4, r4, sl
 801fa90:	fb08 4402 	mla	r4, r8, r2, r4
 801fa94:	fa1f fe8e 	uxth.w	lr, lr
 801fa98:	fb16 f60a 	smulbb	r6, r6, sl
 801fa9c:	b2a4      	uxth	r4, r4
 801fa9e:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801faa2:	fb0c 6c02 	mla	ip, ip, r2, r6
 801faa6:	f10e 0201 	add.w	r2, lr, #1
 801faaa:	1c66      	adds	r6, r4, #1
 801faac:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801fab0:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801fab4:	fa1f fc8c 	uxth.w	ip, ip
 801fab8:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fabc:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 801fac0:	ea46 0e0e 	orr.w	lr, r6, lr
 801fac4:	f10c 0601 	add.w	r6, ip, #1
 801fac8:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801facc:	0976      	lsrs	r6, r6, #5
 801face:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fad2:	9a02      	ldr	r2, [sp, #8]
 801fad4:	ea4e 0e06 	orr.w	lr, lr, r6
 801fad8:	f825 e002 	strh.w	lr, [r5, r2]
 801fadc:	e7b3      	b.n	801fa46 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fade:	f04f 0800 	mov.w	r8, #0
 801fae2:	eba3 0208 	sub.w	r2, r3, r8
 801fae6:	2a00      	cmp	r2, #0
 801fae8:	f77f af3e 	ble.w	801f968 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801faec:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801faf0:	1404      	asrs	r4, r0, #16
 801faf2:	140a      	asrs	r2, r1, #16
 801faf4:	fb06 4202 	mla	r2, r6, r2, r4
 801faf8:	9c01      	ldr	r4, [sp, #4]
 801fafa:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801fafe:	0e22      	lsrs	r2, r4, #24
 801fb00:	d016      	beq.n	801fb30 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801fb02:	9e04      	ldr	r6, [sp, #16]
 801fb04:	4372      	muls	r2, r6
 801fb06:	1c56      	adds	r6, r2, #1
 801fb08:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fb0c:	1212      	asrs	r2, r2, #8
 801fb0e:	2aff      	cmp	r2, #255	; 0xff
 801fb10:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801fb14:	d113      	bne.n	801fb3e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801fb16:	0962      	lsrs	r2, r4, #5
 801fb18:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801fb1c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fb20:	f026 0607 	bic.w	r6, r6, #7
 801fb24:	4316      	orrs	r6, r2
 801fb26:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801fb2a:	4326      	orrs	r6, r4
 801fb2c:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801fb30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801fb32:	4410      	add	r0, r2
 801fb34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fb36:	f108 0801 	add.w	r8, r8, #1
 801fb3a:	4411      	add	r1, r2
 801fb3c:	e7d1      	b.n	801fae2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801fb3e:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801fb42:	fa1f fa82 	uxth.w	sl, r2
 801fb46:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fb4a:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801fb4e:	43d2      	mvns	r2, r2
 801fb50:	b2d2      	uxtb	r2, r2
 801fb52:	fb17 f70a 	smulbb	r7, r7, sl
 801fb56:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fb5a:	fb0c 7c02 	mla	ip, ip, r2, r7
 801fb5e:	b2e4      	uxtb	r4, r4
 801fb60:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801fb64:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fb68:	fa5f fe8e 	uxtb.w	lr, lr
 801fb6c:	fb14 f40a 	smulbb	r4, r4, sl
 801fb70:	fb0e 4402 	mla	r4, lr, r2, r4
 801fb74:	b2f6      	uxtb	r6, r6
 801fb76:	fa1f fc8c 	uxth.w	ip, ip
 801fb7a:	fb16 f60a 	smulbb	r6, r6, sl
 801fb7e:	b2a4      	uxth	r4, r4
 801fb80:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fb84:	fb07 6702 	mla	r7, r7, r2, r6
 801fb88:	f10c 0201 	add.w	r2, ip, #1
 801fb8c:	1c66      	adds	r6, r4, #1
 801fb8e:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801fb92:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801fb96:	b2bf      	uxth	r7, r7
 801fb98:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fb9c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fba0:	ea46 0c0c 	orr.w	ip, r6, ip
 801fba4:	1c7e      	adds	r6, r7, #1
 801fba6:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801fbaa:	0976      	lsrs	r6, r6, #5
 801fbac:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801fbb0:	ea4c 0c06 	orr.w	ip, ip, r6
 801fbb4:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801fbb8:	e7ba      	b.n	801fb30 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801fbba:	b007      	add	sp, #28
 801fbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fbc0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fbc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbc4:	b085      	sub	sp, #20
 801fbc6:	468b      	mov	fp, r1
 801fbc8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fbca:	9203      	str	r2, [sp, #12]
 801fbcc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801fbd0:	6841      	ldr	r1, [r0, #4]
 801fbd2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801fbd6:	fb01 2404 	mla	r4, r1, r4, r2
 801fbda:	6802      	ldr	r2, [r0, #0]
 801fbdc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fbe0:	f8d8 2000 	ldr.w	r2, [r8]
 801fbe4:	9201      	str	r2, [sp, #4]
 801fbe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fbea:	f1bb 0f00 	cmp.w	fp, #0
 801fbee:	dc03      	bgt.n	801fbf8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fbf0:	9a03      	ldr	r2, [sp, #12]
 801fbf2:	2a00      	cmp	r2, #0
 801fbf4:	f340 814f 	ble.w	801fe96 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801fbf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fbfa:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801fbfe:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801fc02:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fc06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fc08:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fc0c:	2b00      	cmp	r3, #0
 801fc0e:	dd0e      	ble.n	801fc2e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fc10:	1408      	asrs	r0, r1, #16
 801fc12:	d405      	bmi.n	801fc20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fc14:	42b8      	cmp	r0, r7
 801fc16:	da03      	bge.n	801fc20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fc18:	1410      	asrs	r0, r2, #16
 801fc1a:	d401      	bmi.n	801fc20 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fc1c:	42b0      	cmp	r0, r6
 801fc1e:	db07      	blt.n	801fc30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fc20:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fc22:	4401      	add	r1, r0
 801fc24:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fc26:	3b01      	subs	r3, #1
 801fc28:	4402      	add	r2, r0
 801fc2a:	3402      	adds	r4, #2
 801fc2c:	e7ee      	b.n	801fc0c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801fc2e:	d017      	beq.n	801fc60 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fc30:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fc32:	1e58      	subs	r0, r3, #1
 801fc34:	fb05 1500 	mla	r5, r5, r0, r1
 801fc38:	142d      	asrs	r5, r5, #16
 801fc3a:	d409      	bmi.n	801fc50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fc3c:	42bd      	cmp	r5, r7
 801fc3e:	da07      	bge.n	801fc50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fc40:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fc42:	fb05 2000 	mla	r0, r5, r0, r2
 801fc46:	1400      	asrs	r0, r0, #16
 801fc48:	d402      	bmi.n	801fc50 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fc4a:	42b0      	cmp	r0, r6
 801fc4c:	f2c0 80ba 	blt.w	801fdc4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801fc50:	2600      	movs	r6, #0
 801fc52:	1998      	adds	r0, r3, r6
 801fc54:	2800      	cmp	r0, #0
 801fc56:	dc3e      	bgt.n	801fcd6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fc58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fc5c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fc60:	f1bb 0f00 	cmp.w	fp, #0
 801fc64:	f340 8117 	ble.w	801fe96 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801fc68:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fc6c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fc70:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fc74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fc76:	f1bb 0b01 	subs.w	fp, fp, #1
 801fc7a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fc7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fc82:	eeb0 6a62 	vmov.f32	s12, s5
 801fc86:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fc8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc8e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fc92:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fc96:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fc9a:	eeb0 6a43 	vmov.f32	s12, s6
 801fc9e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fca2:	ee12 2a90 	vmov	r2, s5
 801fca6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fcaa:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcae:	ee13 2a10 	vmov	r2, s6
 801fcb2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fcb6:	9311      	str	r3, [sp, #68]	; 0x44
 801fcb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fcba:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcbe:	9a03      	ldr	r2, [sp, #12]
 801fcc0:	9312      	str	r3, [sp, #72]	; 0x48
 801fcc2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801fcc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fcc8:	eeb0 3a67 	vmov.f32	s6, s15
 801fccc:	bf08      	it	eq
 801fcce:	4613      	moveq	r3, r2
 801fcd0:	eef0 2a47 	vmov.f32	s5, s14
 801fcd4:	e789      	b.n	801fbea <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801fcd6:	140f      	asrs	r7, r1, #16
 801fcd8:	d424      	bmi.n	801fd24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fcda:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801fcde:	42bd      	cmp	r5, r7
 801fce0:	dd20      	ble.n	801fd24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fce2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fce6:	d41d      	bmi.n	801fd24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fce8:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801fcec:	4560      	cmp	r0, ip
 801fcee:	dd19      	ble.n	801fd24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fcf0:	b22d      	sxth	r5, r5
 801fcf2:	fb0c 7505 	mla	r5, ip, r5, r7
 801fcf6:	9801      	ldr	r0, [sp, #4]
 801fcf8:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801fcfc:	0e07      	lsrs	r7, r0, #24
 801fcfe:	2fff      	cmp	r7, #255	; 0xff
 801fd00:	d116      	bne.n	801fd30 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fd02:	f06f 0501 	mvn.w	r5, #1
 801fd06:	fb05 f706 	mul.w	r7, r5, r6
 801fd0a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801fd0e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801fd12:	0945      	lsrs	r5, r0, #5
 801fd14:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fd18:	ea4c 0505 	orr.w	r5, ip, r5
 801fd1c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801fd20:	4305      	orrs	r5, r0
 801fd22:	53e5      	strh	r5, [r4, r7]
 801fd24:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fd26:	4401      	add	r1, r0
 801fd28:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fd2a:	3e01      	subs	r6, #1
 801fd2c:	4402      	add	r2, r0
 801fd2e:	e790      	b.n	801fc52 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fd30:	b2fd      	uxtb	r5, r7
 801fd32:	2f00      	cmp	r7, #0
 801fd34:	d0f6      	beq.n	801fd24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fd36:	f06f 0701 	mvn.w	r7, #1
 801fd3a:	4377      	muls	r7, r6
 801fd3c:	fa1f f985 	uxth.w	r9, r5
 801fd40:	f834 e007 	ldrh.w	lr, [r4, r7]
 801fd44:	9702      	str	r7, [sp, #8]
 801fd46:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fd4a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801fd4e:	43ed      	mvns	r5, r5
 801fd50:	b2ed      	uxtb	r5, r5
 801fd52:	fb17 f709 	smulbb	r7, r7, r9
 801fd56:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fd5a:	fb0c 7c05 	mla	ip, ip, r5, r7
 801fd5e:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801fd62:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801fd66:	b2c0      	uxtb	r0, r0
 801fd68:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fd6c:	fa5f fe8e 	uxtb.w	lr, lr
 801fd70:	fb10 f009 	smulbb	r0, r0, r9
 801fd74:	fb0e 0005 	mla	r0, lr, r5, r0
 801fd78:	b280      	uxth	r0, r0
 801fd7a:	fa1f fc8c 	uxth.w	ip, ip
 801fd7e:	fb1a fa09 	smulbb	sl, sl, r9
 801fd82:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fd86:	fb07 a705 	mla	r7, r7, r5, sl
 801fd8a:	f100 0a01 	add.w	sl, r0, #1
 801fd8e:	f10c 0501 	add.w	r5, ip, #1
 801fd92:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801fd96:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fd9a:	b2bf      	uxth	r7, r7
 801fd9c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fda0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801fda4:	ea4a 0c0c 	orr.w	ip, sl, ip
 801fda8:	f107 0a01 	add.w	sl, r7, #1
 801fdac:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801fdb0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fdb4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fdb8:	9802      	ldr	r0, [sp, #8]
 801fdba:	ea4c 0c0a 	orr.w	ip, ip, sl
 801fdbe:	f824 c000 	strh.w	ip, [r4, r0]
 801fdc2:	e7af      	b.n	801fd24 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fdc4:	f04f 0e00 	mov.w	lr, #0
 801fdc8:	eba3 000e 	sub.w	r0, r3, lr
 801fdcc:	2800      	cmp	r0, #0
 801fdce:	f77f af43 	ble.w	801fc58 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fdd2:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801fdd6:	140d      	asrs	r5, r1, #16
 801fdd8:	1410      	asrs	r0, r2, #16
 801fdda:	fb06 5000 	mla	r0, r6, r0, r5
 801fdde:	9d01      	ldr	r5, [sp, #4]
 801fde0:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801fde4:	0e2e      	lsrs	r6, r5, #24
 801fde6:	2eff      	cmp	r6, #255	; 0xff
 801fde8:	d112      	bne.n	801fe10 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801fdea:	482c      	ldr	r0, [pc, #176]	; (801fe9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801fdec:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801fdf0:	0968      	lsrs	r0, r5, #5
 801fdf2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fdf6:	4330      	orrs	r0, r6
 801fdf8:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801fdfc:	4328      	orrs	r0, r5
 801fdfe:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801fe02:	9811      	ldr	r0, [sp, #68]	; 0x44
 801fe04:	4401      	add	r1, r0
 801fe06:	9812      	ldr	r0, [sp, #72]	; 0x48
 801fe08:	f10e 0e01 	add.w	lr, lr, #1
 801fe0c:	4402      	add	r2, r0
 801fe0e:	e7db      	b.n	801fdc8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801fe10:	b2f0      	uxtb	r0, r6
 801fe12:	2e00      	cmp	r6, #0
 801fe14:	d0f5      	beq.n	801fe02 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801fe16:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801fe1a:	fa1f f980 	uxth.w	r9, r0
 801fe1e:	ea4f 272c 	mov.w	r7, ip, asr #8
 801fe22:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fe26:	43c0      	mvns	r0, r0
 801fe28:	b2c0      	uxtb	r0, r0
 801fe2a:	fb16 f609 	smulbb	r6, r6, r9
 801fe2e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fe32:	fb07 6700 	mla	r7, r7, r0, r6
 801fe36:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fe3a:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801fe3e:	b2ed      	uxtb	r5, r5
 801fe40:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fe44:	fa5f fc8c 	uxtb.w	ip, ip
 801fe48:	fb15 f509 	smulbb	r5, r5, r9
 801fe4c:	fb0c 5500 	mla	r5, ip, r0, r5
 801fe50:	b2bf      	uxth	r7, r7
 801fe52:	fb1a fa09 	smulbb	sl, sl, r9
 801fe56:	b2ad      	uxth	r5, r5
 801fe58:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801fe5c:	fb06 a600 	mla	r6, r6, r0, sl
 801fe60:	1c78      	adds	r0, r7, #1
 801fe62:	f105 0a01 	add.w	sl, r5, #1
 801fe66:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801fe6a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fe6e:	b2b6      	uxth	r6, r6
 801fe70:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fe74:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801fe78:	ea4a 0707 	orr.w	r7, sl, r7
 801fe7c:	f106 0a01 	add.w	sl, r6, #1
 801fe80:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fe84:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fe88:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801fe8c:	ea47 070a 	orr.w	r7, r7, sl
 801fe90:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801fe94:	e7b5      	b.n	801fe02 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801fe96:	b005      	add	sp, #20
 801fe98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe9c:	fffff800 	.word	0xfffff800

0801fea0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fea4:	b087      	sub	sp, #28
 801fea6:	468b      	mov	fp, r1
 801fea8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801feaa:	9203      	str	r2, [sp, #12]
 801feac:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801feb0:	9204      	str	r2, [sp, #16]
 801feb2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801feb6:	6841      	ldr	r1, [r0, #4]
 801feb8:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 801febc:	fb01 2404 	mla	r4, r1, r4, r2
 801fec0:	6802      	ldr	r2, [r0, #0]
 801fec2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fec6:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801feca:	3201      	adds	r2, #1
 801fecc:	f022 0201 	bic.w	r2, r2, #1
 801fed0:	9200      	str	r2, [sp, #0]
 801fed2:	f8d9 2000 	ldr.w	r2, [r9]
 801fed6:	9201      	str	r2, [sp, #4]
 801fed8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fedc:	f1bb 0f00 	cmp.w	fp, #0
 801fee0:	dc03      	bgt.n	801feea <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fee2:	9a03      	ldr	r2, [sp, #12]
 801fee4:	2a00      	cmp	r2, #0
 801fee6:	f340 8169 	ble.w	80201bc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801feea:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801feec:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801fef0:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801fef4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fef8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801fefa:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801fefe:	2b00      	cmp	r3, #0
 801ff00:	dd0e      	ble.n	801ff20 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801ff02:	1402      	asrs	r2, r0, #16
 801ff04:	d405      	bmi.n	801ff12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ff06:	42ba      	cmp	r2, r7
 801ff08:	da03      	bge.n	801ff12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ff0a:	140a      	asrs	r2, r1, #16
 801ff0c:	d401      	bmi.n	801ff12 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ff0e:	42b2      	cmp	r2, r6
 801ff10:	db07      	blt.n	801ff22 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ff12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ff14:	4410      	add	r0, r2
 801ff16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801ff18:	3b01      	subs	r3, #1
 801ff1a:	4411      	add	r1, r2
 801ff1c:	3402      	adds	r4, #2
 801ff1e:	e7ee      	b.n	801fefe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801ff20:	d017      	beq.n	801ff52 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801ff22:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ff24:	1e5a      	subs	r2, r3, #1
 801ff26:	fb05 0502 	mla	r5, r5, r2, r0
 801ff2a:	142d      	asrs	r5, r5, #16
 801ff2c:	d409      	bmi.n	801ff42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ff2e:	42bd      	cmp	r5, r7
 801ff30:	da07      	bge.n	801ff42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ff32:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ff34:	fb05 1202 	mla	r2, r5, r2, r1
 801ff38:	1412      	asrs	r2, r2, #16
 801ff3a:	d402      	bmi.n	801ff42 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801ff3c:	42b2      	cmp	r2, r6
 801ff3e:	f2c0 80c7 	blt.w	80200d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801ff42:	2700      	movs	r7, #0
 801ff44:	19da      	adds	r2, r3, r7
 801ff46:	2a00      	cmp	r2, #0
 801ff48:	dc3e      	bgt.n	801ffc8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801ff4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff4e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ff52:	f1bb 0f00 	cmp.w	fp, #0
 801ff56:	f340 8131 	ble.w	80201bc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801ff5a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff5e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff62:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ff66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff68:	f1bb 0b01 	subs.w	fp, fp, #1
 801ff6c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff70:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ff74:	eeb0 6a62 	vmov.f32	s12, s5
 801ff78:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff7c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff80:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff84:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801ff88:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ff8c:	eeb0 6a43 	vmov.f32	s12, s6
 801ff90:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff94:	ee12 2a90 	vmov	r2, s5
 801ff98:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ff9c:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffa0:	ee13 2a10 	vmov	r2, s6
 801ffa4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ffa8:	9313      	str	r3, [sp, #76]	; 0x4c
 801ffaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ffac:	fb92 f3f3 	sdiv	r3, r2, r3
 801ffb0:	9a03      	ldr	r2, [sp, #12]
 801ffb2:	9314      	str	r3, [sp, #80]	; 0x50
 801ffb4:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801ffb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ffba:	eeb0 3a67 	vmov.f32	s6, s15
 801ffbe:	bf08      	it	eq
 801ffc0:	4613      	moveq	r3, r2
 801ffc2:	eef0 2a47 	vmov.f32	s5, s14
 801ffc6:	e789      	b.n	801fedc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ffc8:	1405      	asrs	r5, r0, #16
 801ffca:	d435      	bmi.n	8020038 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ffcc:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ffd0:	42aa      	cmp	r2, r5
 801ffd2:	dd31      	ble.n	8020038 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ffd4:	140e      	asrs	r6, r1, #16
 801ffd6:	d42f      	bmi.n	8020038 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ffd8:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801ffdc:	42b2      	cmp	r2, r6
 801ffde:	dd2b      	ble.n	8020038 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801ffe0:	9a00      	ldr	r2, [sp, #0]
 801ffe2:	fb06 5502 	mla	r5, r6, r2, r5
 801ffe6:	086a      	lsrs	r2, r5, #1
 801ffe8:	9e01      	ldr	r6, [sp, #4]
 801ffea:	5cb2      	ldrb	r2, [r6, r2]
 801ffec:	07ee      	lsls	r6, r5, #31
 801ffee:	bf54      	ite	pl
 801fff0:	f002 020f 	andpl.w	r2, r2, #15
 801fff4:	1112      	asrmi	r2, r2, #4
 801fff6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fffa:	b2d2      	uxtb	r2, r2
 801fffc:	b1e2      	cbz	r2, 8020038 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801fffe:	9d04      	ldr	r5, [sp, #16]
 8020000:	436a      	muls	r2, r5
 8020002:	1c55      	adds	r5, r2, #1
 8020004:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020008:	4d6e      	ldr	r5, [pc, #440]	; (80201c4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 802000a:	682d      	ldr	r5, [r5, #0]
 802000c:	1212      	asrs	r2, r2, #8
 802000e:	0a2e      	lsrs	r6, r5, #8
 8020010:	2aff      	cmp	r2, #255	; 0xff
 8020012:	9605      	str	r6, [sp, #20]
 8020014:	d116      	bne.n	8020044 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8020016:	f06f 0201 	mvn.w	r2, #1
 802001a:	fb02 fc07 	mul.w	ip, r2, r7
 802001e:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8020022:	096a      	lsrs	r2, r5, #5
 8020024:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020028:	f026 0607 	bic.w	r6, r6, #7
 802002c:	4316      	orrs	r6, r2
 802002e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020032:	432e      	orrs	r6, r5
 8020034:	f824 600c 	strh.w	r6, [r4, ip]
 8020038:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802003a:	4410      	add	r0, r2
 802003c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802003e:	3f01      	subs	r7, #1
 8020040:	4411      	add	r1, r2
 8020042:	e77f      	b.n	801ff44 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8020044:	f06f 0601 	mvn.w	r6, #1
 8020048:	437e      	muls	r6, r7
 802004a:	fa1f fa82 	uxth.w	sl, r2
 802004e:	f834 8006 	ldrh.w	r8, [r4, r6]
 8020052:	9602      	str	r6, [sp, #8]
 8020054:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8020058:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 802005c:	43d2      	mvns	r2, r2
 802005e:	b2d2      	uxtb	r2, r2
 8020060:	fb1c fc0a 	smulbb	ip, ip, sl
 8020064:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8020068:	fb0e ce02 	mla	lr, lr, r2, ip
 802006c:	b2ed      	uxtb	r5, r5
 802006e:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8020072:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8020076:	f89d 6014 	ldrb.w	r6, [sp, #20]
 802007a:	fa5f f888 	uxtb.w	r8, r8
 802007e:	fb15 f50a 	smulbb	r5, r5, sl
 8020082:	fb08 5502 	mla	r5, r8, r2, r5
 8020086:	fa1f fe8e 	uxth.w	lr, lr
 802008a:	fb16 f60a 	smulbb	r6, r6, sl
 802008e:	b2ad      	uxth	r5, r5
 8020090:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020094:	fb0c 6c02 	mla	ip, ip, r2, r6
 8020098:	f10e 0201 	add.w	r2, lr, #1
 802009c:	1c6e      	adds	r6, r5, #1
 802009e:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80200a2:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 80200a6:	fa1f fc8c 	uxth.w	ip, ip
 80200aa:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80200ae:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80200b2:	ea46 0e0e 	orr.w	lr, r6, lr
 80200b6:	f10c 0601 	add.w	r6, ip, #1
 80200ba:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80200be:	0976      	lsrs	r6, r6, #5
 80200c0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80200c4:	9a02      	ldr	r2, [sp, #8]
 80200c6:	ea4e 0e06 	orr.w	lr, lr, r6
 80200ca:	f824 e002 	strh.w	lr, [r4, r2]
 80200ce:	e7b3      	b.n	8020038 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80200d0:	f04f 0800 	mov.w	r8, #0
 80200d4:	eba3 0208 	sub.w	r2, r3, r8
 80200d8:	2a00      	cmp	r2, #0
 80200da:	f77f af36 	ble.w	801ff4a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80200de:	9e00      	ldr	r6, [sp, #0]
 80200e0:	1402      	asrs	r2, r0, #16
 80200e2:	140d      	asrs	r5, r1, #16
 80200e4:	fb06 2505 	mla	r5, r6, r5, r2
 80200e8:	086a      	lsrs	r2, r5, #1
 80200ea:	9e01      	ldr	r6, [sp, #4]
 80200ec:	5cb2      	ldrb	r2, [r6, r2]
 80200ee:	07ed      	lsls	r5, r5, #31
 80200f0:	bf54      	ite	pl
 80200f2:	f002 020f 	andpl.w	r2, r2, #15
 80200f6:	1112      	asrmi	r2, r2, #4
 80200f8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80200fc:	b2d2      	uxtb	r2, r2
 80200fe:	b1c2      	cbz	r2, 8020132 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8020100:	9d04      	ldr	r5, [sp, #16]
 8020102:	436a      	muls	r2, r5
 8020104:	1c55      	adds	r5, r2, #1
 8020106:	eb05 2222 	add.w	r2, r5, r2, asr #8
 802010a:	4d2e      	ldr	r5, [pc, #184]	; (80201c4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 802010c:	1212      	asrs	r2, r2, #8
 802010e:	682e      	ldr	r6, [r5, #0]
 8020110:	2aff      	cmp	r2, #255	; 0xff
 8020112:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8020116:	d113      	bne.n	8020140 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8020118:	0972      	lsrs	r2, r6, #5
 802011a:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 802011e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020122:	f025 0507 	bic.w	r5, r5, #7
 8020126:	4315      	orrs	r5, r2
 8020128:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 802012c:	4335      	orrs	r5, r6
 802012e:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8020132:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020134:	4410      	add	r0, r2
 8020136:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020138:	f108 0801 	add.w	r8, r8, #1
 802013c:	4411      	add	r1, r2
 802013e:	e7c9      	b.n	80200d4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8020140:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8020144:	fa1f fa82 	uxth.w	sl, r2
 8020148:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 802014c:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8020150:	43d2      	mvns	r2, r2
 8020152:	b2d2      	uxtb	r2, r2
 8020154:	fb17 f70a 	smulbb	r7, r7, sl
 8020158:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802015c:	fb0c 7c02 	mla	ip, ip, r2, r7
 8020160:	b2f6      	uxtb	r6, r6
 8020162:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8020166:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802016a:	fa5f fe8e 	uxtb.w	lr, lr
 802016e:	fb16 f60a 	smulbb	r6, r6, sl
 8020172:	fb0e 6602 	mla	r6, lr, r2, r6
 8020176:	b2ed      	uxtb	r5, r5
 8020178:	fa1f fc8c 	uxth.w	ip, ip
 802017c:	fb15 f50a 	smulbb	r5, r5, sl
 8020180:	b2b6      	uxth	r6, r6
 8020182:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8020186:	fb07 5702 	mla	r7, r7, r2, r5
 802018a:	f10c 0201 	add.w	r2, ip, #1
 802018e:	1c75      	adds	r5, r6, #1
 8020190:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020194:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8020198:	b2bf      	uxth	r7, r7
 802019a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 802019e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80201a2:	ea45 0c0c 	orr.w	ip, r5, ip
 80201a6:	1c7d      	adds	r5, r7, #1
 80201a8:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 80201ac:	096d      	lsrs	r5, r5, #5
 80201ae:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80201b2:	ea4c 0c05 	orr.w	ip, ip, r5
 80201b6:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 80201ba:	e7ba      	b.n	8020132 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80201bc:	b007      	add	sp, #28
 80201be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80201c2:	bf00      	nop
 80201c4:	20008e38 	.word	0x20008e38

080201c8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80201c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201cc:	b087      	sub	sp, #28
 80201ce:	f8df 830c 	ldr.w	r8, [pc, #780]	; 80204dc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 80201d2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80201d4:	9205      	str	r2, [sp, #20]
 80201d6:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80201da:	9101      	str	r1, [sp, #4]
 80201dc:	6841      	ldr	r1, [r0, #4]
 80201de:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 80201e2:	fb01 2404 	mla	r4, r1, r4, r2
 80201e6:	6802      	ldr	r2, [r0, #0]
 80201e8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80201ec:	f8db 2008 	ldr.w	r2, [fp, #8]
 80201f0:	3201      	adds	r2, #1
 80201f2:	f022 0201 	bic.w	r2, r2, #1
 80201f6:	9202      	str	r2, [sp, #8]
 80201f8:	f8db 2000 	ldr.w	r2, [fp]
 80201fc:	9203      	str	r2, [sp, #12]
 80201fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020202:	9a01      	ldr	r2, [sp, #4]
 8020204:	2a00      	cmp	r2, #0
 8020206:	dc03      	bgt.n	8020210 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020208:	9a05      	ldr	r2, [sp, #20]
 802020a:	2a00      	cmp	r2, #0
 802020c:	f340 8162 	ble.w	80204d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8020210:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020212:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8020216:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 802021a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 802021e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8020220:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8020224:	2b00      	cmp	r3, #0
 8020226:	dd0e      	ble.n	8020246 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8020228:	1402      	asrs	r2, r0, #16
 802022a:	d405      	bmi.n	8020238 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802022c:	42ba      	cmp	r2, r7
 802022e:	da03      	bge.n	8020238 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020230:	140a      	asrs	r2, r1, #16
 8020232:	d401      	bmi.n	8020238 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8020234:	42b2      	cmp	r2, r6
 8020236:	db07      	blt.n	8020248 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020238:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802023a:	4410      	add	r0, r2
 802023c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802023e:	3b01      	subs	r3, #1
 8020240:	4411      	add	r1, r2
 8020242:	3402      	adds	r4, #2
 8020244:	e7ee      	b.n	8020224 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8020246:	d017      	beq.n	8020278 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8020248:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802024a:	1e5a      	subs	r2, r3, #1
 802024c:	fb05 0502 	mla	r5, r5, r2, r0
 8020250:	142d      	asrs	r5, r5, #16
 8020252:	d409      	bmi.n	8020268 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020254:	42bd      	cmp	r5, r7
 8020256:	da07      	bge.n	8020268 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020258:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802025a:	fb05 1202 	mla	r2, r5, r2, r1
 802025e:	1412      	asrs	r2, r2, #16
 8020260:	d402      	bmi.n	8020268 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8020262:	42b2      	cmp	r2, r6
 8020264:	f2c0 80c3 	blt.w	80203ee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8020268:	2500      	movs	r5, #0
 802026a:	195a      	adds	r2, r3, r5
 802026c:	2a00      	cmp	r2, #0
 802026e:	dc3f      	bgt.n	80202f0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8020270:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020274:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020278:	9b01      	ldr	r3, [sp, #4]
 802027a:	2b00      	cmp	r3, #0
 802027c:	f340 812a 	ble.w	80204d4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8020280:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020284:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020288:	eec6 7a80 	vdiv.f32	s15, s13, s0
 802028c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802028e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020292:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020296:	eeb0 6a62 	vmov.f32	s12, s5
 802029a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802029e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80202a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80202a6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80202aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80202ae:	eeb0 6a43 	vmov.f32	s12, s6
 80202b2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80202b6:	ee12 2a90 	vmov	r2, s5
 80202ba:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80202be:	fb92 f3f3 	sdiv	r3, r2, r3
 80202c2:	ee13 2a10 	vmov	r2, s6
 80202c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80202c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80202ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80202ce:	9314      	str	r3, [sp, #80]	; 0x50
 80202d0:	9b01      	ldr	r3, [sp, #4]
 80202d2:	9a05      	ldr	r2, [sp, #20]
 80202d4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80202d8:	3b01      	subs	r3, #1
 80202da:	9301      	str	r3, [sp, #4]
 80202dc:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80202e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80202e2:	eeb0 3a67 	vmov.f32	s6, s15
 80202e6:	bf08      	it	eq
 80202e8:	4613      	moveq	r3, r2
 80202ea:	eef0 2a47 	vmov.f32	s5, s14
 80202ee:	e788      	b.n	8020202 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80202f0:	1406      	asrs	r6, r0, #16
 80202f2:	d42c      	bmi.n	802034e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80202f4:	f8db 2008 	ldr.w	r2, [fp, #8]
 80202f8:	42b2      	cmp	r2, r6
 80202fa:	dd28      	ble.n	802034e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80202fc:	140f      	asrs	r7, r1, #16
 80202fe:	d426      	bmi.n	802034e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020300:	f8db 200c 	ldr.w	r2, [fp, #12]
 8020304:	42ba      	cmp	r2, r7
 8020306:	dd22      	ble.n	802034e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020308:	9a02      	ldr	r2, [sp, #8]
 802030a:	fb07 6602 	mla	r6, r7, r2, r6
 802030e:	0872      	lsrs	r2, r6, #1
 8020310:	9f03      	ldr	r7, [sp, #12]
 8020312:	5cba      	ldrb	r2, [r7, r2]
 8020314:	07f6      	lsls	r6, r6, #31
 8020316:	bf54      	ite	pl
 8020318:	f002 020f 	andpl.w	r2, r2, #15
 802031c:	1112      	asrmi	r2, r2, #4
 802031e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020322:	b2d2      	uxtb	r2, r2
 8020324:	2aff      	cmp	r2, #255	; 0xff
 8020326:	d118      	bne.n	802035a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8020328:	f8d8 2000 	ldr.w	r2, [r8]
 802032c:	f06f 0601 	mvn.w	r6, #1
 8020330:	fb06 f705 	mul.w	r7, r6, r5
 8020334:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8020338:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 802033c:	0956      	lsrs	r6, r2, #5
 802033e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020342:	ea4c 0606 	orr.w	r6, ip, r6
 8020346:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802034a:	4316      	orrs	r6, r2
 802034c:	53e6      	strh	r6, [r4, r7]
 802034e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020350:	4410      	add	r0, r2
 8020352:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020354:	3d01      	subs	r5, #1
 8020356:	4411      	add	r1, r2
 8020358:	e787      	b.n	802026a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 802035a:	2a00      	cmp	r2, #0
 802035c:	d0f7      	beq.n	802034e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802035e:	f06f 0601 	mvn.w	r6, #1
 8020362:	436e      	muls	r6, r5
 8020364:	f8d8 c000 	ldr.w	ip, [r8]
 8020368:	f834 e006 	ldrh.w	lr, [r4, r6]
 802036c:	9604      	str	r6, [sp, #16]
 802036e:	fa1f f982 	uxth.w	r9, r2
 8020372:	ea4f 272e 	mov.w	r7, lr, asr #8
 8020376:	f3cc 4607 	ubfx	r6, ip, #16, #8
 802037a:	43d2      	mvns	r2, r2
 802037c:	b2d2      	uxtb	r2, r2
 802037e:	fb16 f609 	smulbb	r6, r6, r9
 8020382:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8020386:	fb07 6702 	mla	r7, r7, r2, r6
 802038a:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 802038e:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8020392:	fa5f fc8c 	uxtb.w	ip, ip
 8020396:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802039a:	fa5f fe8e 	uxtb.w	lr, lr
 802039e:	fb1c fc09 	smulbb	ip, ip, r9
 80203a2:	fb0e cc02 	mla	ip, lr, r2, ip
 80203a6:	b2bf      	uxth	r7, r7
 80203a8:	fb1a fa09 	smulbb	sl, sl, r9
 80203ac:	fa1f fc8c 	uxth.w	ip, ip
 80203b0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80203b4:	fb06 a602 	mla	r6, r6, r2, sl
 80203b8:	1c7a      	adds	r2, r7, #1
 80203ba:	f10c 0a01 	add.w	sl, ip, #1
 80203be:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80203c2:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80203c6:	b2b6      	uxth	r6, r6
 80203c8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80203cc:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80203d0:	ea4a 0707 	orr.w	r7, sl, r7
 80203d4:	f106 0a01 	add.w	sl, r6, #1
 80203d8:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80203dc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80203e0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80203e4:	9a04      	ldr	r2, [sp, #16]
 80203e6:	ea47 070a 	orr.w	r7, r7, sl
 80203ea:	52a7      	strh	r7, [r4, r2]
 80203ec:	e7af      	b.n	802034e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80203ee:	f04f 0e00 	mov.w	lr, #0
 80203f2:	eba3 020e 	sub.w	r2, r3, lr
 80203f6:	2a00      	cmp	r2, #0
 80203f8:	f77f af3a 	ble.w	8020270 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 80203fc:	9e02      	ldr	r6, [sp, #8]
 80203fe:	1402      	asrs	r2, r0, #16
 8020400:	140d      	asrs	r5, r1, #16
 8020402:	fb06 2505 	mla	r5, r6, r5, r2
 8020406:	086a      	lsrs	r2, r5, #1
 8020408:	9e03      	ldr	r6, [sp, #12]
 802040a:	5cb2      	ldrb	r2, [r6, r2]
 802040c:	07ed      	lsls	r5, r5, #31
 802040e:	bf54      	ite	pl
 8020410:	f002 020f 	andpl.w	r2, r2, #15
 8020414:	1112      	asrmi	r2, r2, #4
 8020416:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802041a:	b2d2      	uxtb	r2, r2
 802041c:	2aff      	cmp	r2, #255	; 0xff
 802041e:	d115      	bne.n	802044c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8020420:	f8d8 5000 	ldr.w	r5, [r8]
 8020424:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8020428:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 802042c:	096a      	lsrs	r2, r5, #5
 802042e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020432:	4332      	orrs	r2, r6
 8020434:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8020438:	432a      	orrs	r2, r5
 802043a:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 802043e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8020440:	4410      	add	r0, r2
 8020442:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020444:	f10e 0e01 	add.w	lr, lr, #1
 8020448:	4411      	add	r1, r2
 802044a:	e7d2      	b.n	80203f2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802044c:	2a00      	cmp	r2, #0
 802044e:	d0f6      	beq.n	802043e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8020450:	f8d8 7000 	ldr.w	r7, [r8]
 8020454:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8020458:	fa1f f982 	uxth.w	r9, r2
 802045c:	ea4f 262c 	mov.w	r6, ip, asr #8
 8020460:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8020464:	43d2      	mvns	r2, r2
 8020466:	b2d2      	uxtb	r2, r2
 8020468:	fb15 f509 	smulbb	r5, r5, r9
 802046c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020470:	fb06 5602 	mla	r6, r6, r2, r5
 8020474:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8020478:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802047c:	b2ff      	uxtb	r7, r7
 802047e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020482:	fa5f fc8c 	uxtb.w	ip, ip
 8020486:	fb17 f709 	smulbb	r7, r7, r9
 802048a:	fb0c 7702 	mla	r7, ip, r2, r7
 802048e:	b2b6      	uxth	r6, r6
 8020490:	fb1a fa09 	smulbb	sl, sl, r9
 8020494:	b2bf      	uxth	r7, r7
 8020496:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802049a:	fb05 a502 	mla	r5, r5, r2, sl
 802049e:	1c72      	adds	r2, r6, #1
 80204a0:	f107 0a01 	add.w	sl, r7, #1
 80204a4:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80204a8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80204ac:	b2ad      	uxth	r5, r5
 80204ae:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80204b2:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80204b6:	ea4a 0606 	orr.w	r6, sl, r6
 80204ba:	f105 0a01 	add.w	sl, r5, #1
 80204be:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80204c2:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80204c6:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80204ca:	ea46 060a 	orr.w	r6, r6, sl
 80204ce:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 80204d2:	e7b4      	b.n	802043e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80204d4:	b007      	add	sp, #28
 80204d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204da:	bf00      	nop
 80204dc:	20008e38 	.word	0x20008e38

080204e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 80204e0:	4770      	bx	lr

080204e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 80204e2:	4770      	bx	lr

080204e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 80204e4:	4770      	bx	lr

080204e6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 80204e6:	4770      	bx	lr

080204e8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80204e8:	4770      	bx	lr

080204ea <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80204ea:	4770      	bx	lr

080204ec <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80204ec:	4770      	bx	lr

080204ee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 80204ee:	4770      	bx	lr

080204f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 80204f0:	4770      	bx	lr

080204f2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 80204f2:	4770      	bx	lr

080204f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 80204f4:	4770      	bx	lr

080204f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 80204f6:	4770      	bx	lr

080204f8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 80204f8:	4770      	bx	lr

080204fa <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 80204fa:	4770      	bx	lr

080204fc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 80204fc:	4770      	bx	lr

080204fe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 80204fe:	4770      	bx	lr

08020500 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020500:	4770      	bx	lr

08020502 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020502:	4770      	bx	lr

08020504 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020504:	4770      	bx	lr

08020506 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020506:	4770      	bx	lr

08020508 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020508:	4770      	bx	lr

0802050a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802050a:	4770      	bx	lr

0802050c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 802050c:	4770      	bx	lr

0802050e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 802050e:	4770      	bx	lr

08020510 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020510:	4770      	bx	lr

08020512 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020512:	4770      	bx	lr

08020514 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020514:	4770      	bx	lr

08020516 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8020516:	4770      	bx	lr

08020518 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8020518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802051c:	b088      	sub	sp, #32
 802051e:	ac08      	add	r4, sp, #32
 8020520:	4606      	mov	r6, r0
 8020522:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8020526:	4620      	mov	r0, r4
 8020528:	4688      	mov	r8, r1
 802052a:	4691      	mov	r9, r2
 802052c:	f7fd fc66 	bl	801ddfc <_ZNK8touchgfx6Bitmap7getDataEv>
 8020530:	6833      	ldr	r3, [r6, #0]
 8020532:	4605      	mov	r5, r0
 8020534:	4620      	mov	r0, r4
 8020536:	699f      	ldr	r7, [r3, #24]
 8020538:	f7fd fb74 	bl	801dc24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802053c:	4682      	mov	sl, r0
 802053e:	4620      	mov	r0, r4
 8020540:	f7fd fba4 	bl	801dc8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020544:	9500      	str	r5, [sp, #0]
 8020546:	e9cd a001 	strd	sl, r0, [sp, #4]
 802054a:	464b      	mov	r3, r9
 802054c:	a806      	add	r0, sp, #24
 802054e:	4642      	mov	r2, r8
 8020550:	4631      	mov	r1, r6
 8020552:	47b8      	blx	r7
 8020554:	4628      	mov	r0, r5
 8020556:	b008      	add	sp, #32
 8020558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0802055c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 802055c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020560:	2300      	movs	r3, #0
 8020562:	9300      	str	r3, [sp, #0]
 8020564:	4b3d      	ldr	r3, [pc, #244]	; (802065c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8020566:	781b      	ldrb	r3, [r3, #0]
 8020568:	2b00      	cmp	r3, #0
 802056a:	d137      	bne.n	80205dc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 802056c:	4a3c      	ldr	r2, [pc, #240]	; (8020660 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 802056e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8020572:	f8ad 2004 	strh.w	r2, [sp, #4]
 8020576:	2b00      	cmp	r3, #0
 8020578:	d132      	bne.n	80205e0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 802057a:	4b3a      	ldr	r3, [pc, #232]	; (8020664 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 802057c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020580:	6808      	ldr	r0, [r1, #0]
 8020582:	6849      	ldr	r1, [r1, #4]
 8020584:	f8ad 3006 	strh.w	r3, [sp, #6]
 8020588:	ac02      	add	r4, sp, #8
 802058a:	ab02      	add	r3, sp, #8
 802058c:	c303      	stmia	r3!, {r0, r1}
 802058e:	4669      	mov	r1, sp
 8020590:	4620      	mov	r0, r4
 8020592:	f7fa fd69 	bl	801b068 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020596:	4668      	mov	r0, sp
 8020598:	f7fa fd3e 	bl	801b018 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802059c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80205a0:	f8bd 2000 	ldrh.w	r2, [sp]
 80205a4:	4d30      	ldr	r5, [pc, #192]	; (8020668 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 80205a6:	4413      	add	r3, r2
 80205a8:	f8ad 3008 	strh.w	r3, [sp, #8]
 80205ac:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80205b0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80205b4:	6828      	ldr	r0, [r5, #0]
 80205b6:	4413      	add	r3, r2
 80205b8:	f8ad 300a 	strh.w	r3, [sp, #10]
 80205bc:	6803      	ldr	r3, [r0, #0]
 80205be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80205c0:	4798      	blx	r3
 80205c2:	f010 0f01 	tst.w	r0, #1
 80205c6:	462f      	mov	r7, r5
 80205c8:	d00c      	beq.n	80205e4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 80205ca:	6828      	ldr	r0, [r5, #0]
 80205cc:	6803      	ldr	r3, [r0, #0]
 80205ce:	e894 0006 	ldmia.w	r4, {r1, r2}
 80205d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80205d4:	4798      	blx	r3
 80205d6:	b004      	add	sp, #16
 80205d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80205dc:	4a21      	ldr	r2, [pc, #132]	; (8020664 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80205de:	e7c6      	b.n	802056e <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80205e0:	4b1f      	ldr	r3, [pc, #124]	; (8020660 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80205e2:	e7cb      	b.n	802057c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 80205e4:	6838      	ldr	r0, [r7, #0]
 80205e6:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80205ea:	6803      	ldr	r3, [r0, #0]
 80205ec:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 80205f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80205f2:	4798      	blx	r3
 80205f4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80205f8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80205fc:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8020600:	fb16 3602 	smlabb	r6, r6, r2, r3
 8020604:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8020608:	6838      	ldr	r0, [r7, #0]
 802060a:	6803      	ldr	r3, [r0, #0]
 802060c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802060e:	4798      	blx	r3
 8020610:	4a13      	ldr	r2, [pc, #76]	; (8020660 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8020612:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 8020616:	8813      	ldrh	r3, [r2, #0]
 8020618:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 802061c:	fb03 1404 	mla	r4, r3, r4, r1
 8020620:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020624:	435d      	muls	r5, r3
 8020626:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 802062a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 802062e:	4691      	mov	r9, r2
 8020630:	6838      	ldr	r0, [r7, #0]
 8020632:	42ac      	cmp	r4, r5
 8020634:	6803      	ldr	r3, [r0, #0]
 8020636:	d20e      	bcs.n	8020656 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8020638:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 802063c:	4632      	mov	r2, r6
 802063e:	4643      	mov	r3, r8
 8020640:	4621      	mov	r1, r4
 8020642:	47d0      	blx	sl
 8020644:	f8b9 3000 	ldrh.w	r3, [r9]
 8020648:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802064c:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8020650:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020654:	e7ec      	b.n	8020630 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 8020656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020658:	4798      	blx	r3
 802065a:	e7bc      	b.n	80205d6 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 802065c:	20008e26 	.word	0x20008e26
 8020660:	20008e28 	.word	0x20008e28
 8020664:	20008e2a 	.word	0x20008e2a
 8020668:	20008e30 	.word	0x20008e30

0802066c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 802066c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020670:	b08b      	sub	sp, #44	; 0x2c
 8020672:	460f      	mov	r7, r1
 8020674:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8020678:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 802067c:	4616      	mov	r6, r2
 802067e:	f1bb 0f00 	cmp.w	fp, #0
 8020682:	d049      	beq.n	8020718 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020684:	6810      	ldr	r0, [r2, #0]
 8020686:	6851      	ldr	r1, [r2, #4]
 8020688:	ad06      	add	r5, sp, #24
 802068a:	c503      	stmia	r5!, {r0, r1}
 802068c:	6818      	ldr	r0, [r3, #0]
 802068e:	6859      	ldr	r1, [r3, #4]
 8020690:	ad08      	add	r5, sp, #32
 8020692:	c503      	stmia	r5!, {r0, r1}
 8020694:	a806      	add	r0, sp, #24
 8020696:	f7fa fcbf 	bl	801b018 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802069a:	4631      	mov	r1, r6
 802069c:	a808      	add	r0, sp, #32
 802069e:	f7fa fce3 	bl	801b068 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80206a2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80206a6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80206aa:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80206ae:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80206b2:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80206b6:	fb16 2103 	smlabb	r1, r6, r3, r2
 80206ba:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80206be:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80206c2:	4f5f      	ldr	r7, [pc, #380]	; (8020840 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80206c4:	440a      	add	r2, r1
 80206c6:	f8ad 2020 	strh.w	r2, [sp, #32]
 80206ca:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80206ce:	6838      	ldr	r0, [r7, #0]
 80206d0:	4413      	add	r3, r2
 80206d2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80206d6:	6803      	ldr	r3, [r0, #0]
 80206d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80206da:	4798      	blx	r3
 80206dc:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 80206e0:	46b9      	mov	r9, r7
 80206e2:	d01c      	beq.n	802071e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 80206e4:	f010 0f04 	tst.w	r0, #4
 80206e8:	d01d      	beq.n	8020726 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 80206ea:	f8d9 0000 	ldr.w	r0, [r9]
 80206ee:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 80206f2:	6801      	ldr	r1, [r0, #0]
 80206f4:	f8cd b00c 	str.w	fp, [sp, #12]
 80206f8:	2700      	movs	r7, #0
 80206fa:	e9cd 4704 	strd	r4, r7, [sp, #16]
 80206fe:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8020702:	9402      	str	r4, [sp, #8]
 8020704:	b2ad      	uxth	r5, r5
 8020706:	fa1f f488 	uxth.w	r4, r8
 802070a:	9501      	str	r5, [sp, #4]
 802070c:	9400      	str	r4, [sp, #0]
 802070e:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8020710:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020714:	4631      	mov	r1, r6
 8020716:	47a0      	blx	r4
 8020718:	b00b      	add	sp, #44	; 0x2c
 802071a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802071e:	b914      	cbnz	r4, 8020726 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8020720:	f010 0f01 	tst.w	r0, #1
 8020724:	e7e0      	b.n	80206e8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8020726:	f8d9 0000 	ldr.w	r0, [r9]
 802072a:	6803      	ldr	r3, [r0, #0]
 802072c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802072e:	4798      	blx	r3
 8020730:	4b44      	ldr	r3, [pc, #272]	; (8020844 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8020732:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8020736:	881a      	ldrh	r2, [r3, #0]
 8020738:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 802073c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8020740:	fb02 1404 	mla	r4, r2, r4, r1
 8020744:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8020748:	469a      	mov	sl, r3
 802074a:	fb05 f502 	mul.w	r5, r5, r2
 802074e:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8020752:	d059      	beq.n	8020808 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8020754:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8020758:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 802075c:	fa1f f28b 	uxth.w	r2, fp
 8020760:	fa1f f989 	uxth.w	r9, r9
 8020764:	469e      	mov	lr, r3
 8020766:	42ac      	cmp	r4, r5
 8020768:	d264      	bcs.n	8020834 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 802076a:	eb04 0a07 	add.w	sl, r4, r7
 802076e:	4554      	cmp	r4, sl
 8020770:	d23d      	bcs.n	80207ee <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8020772:	8821      	ldrh	r1, [r4, #0]
 8020774:	f836 3b02 	ldrh.w	r3, [r6], #2
 8020778:	1208      	asrs	r0, r1, #8
 802077a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 802077e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020782:	fb10 f009 	smulbb	r0, r0, r9
 8020786:	ea4f 0be1 	mov.w	fp, r1, asr #3
 802078a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802078e:	00c9      	lsls	r1, r1, #3
 8020790:	fb0c 0c02 	mla	ip, ip, r2, r0
 8020794:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8020798:	10d8      	asrs	r0, r3, #3
 802079a:	b2c9      	uxtb	r1, r1
 802079c:	00db      	lsls	r3, r3, #3
 802079e:	fa1f fc8c 	uxth.w	ip, ip
 80207a2:	fb1b fb09 	smulbb	fp, fp, r9
 80207a6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80207aa:	b2db      	uxtb	r3, r3
 80207ac:	fb11 f109 	smulbb	r1, r1, r9
 80207b0:	fb00 b002 	mla	r0, r0, r2, fp
 80207b4:	fb03 1302 	mla	r3, r3, r2, r1
 80207b8:	f10c 0b01 	add.w	fp, ip, #1
 80207bc:	b29b      	uxth	r3, r3
 80207be:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 80207c2:	b280      	uxth	r0, r0
 80207c4:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 80207c8:	f103 0c01 	add.w	ip, r3, #1
 80207cc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80207d0:	1c43      	adds	r3, r0, #1
 80207d2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80207d6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80207da:	0940      	lsrs	r0, r0, #5
 80207dc:	ea4c 0c0b 	orr.w	ip, ip, fp
 80207e0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80207e4:	ea4c 0c00 	orr.w	ip, ip, r0
 80207e8:	f824 cb02 	strh.w	ip, [r4], #2
 80207ec:	e7bf      	b.n	802076e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 80207ee:	f8be 3000 	ldrh.w	r3, [lr]
 80207f2:	eba3 0308 	sub.w	r3, r3, r8
 80207f6:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80207fa:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80207fe:	eba3 0308 	sub.w	r3, r3, r8
 8020802:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020806:	e7ae      	b.n	8020766 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8020808:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 802080c:	f8d9 0000 	ldr.w	r0, [r9]
 8020810:	42ac      	cmp	r4, r5
 8020812:	6803      	ldr	r3, [r0, #0]
 8020814:	d20e      	bcs.n	8020834 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8020816:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 802081a:	4632      	mov	r2, r6
 802081c:	463b      	mov	r3, r7
 802081e:	4621      	mov	r1, r4
 8020820:	47c0      	blx	r8
 8020822:	f8ba 3000 	ldrh.w	r3, [sl]
 8020826:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802082a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802082e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8020832:	e7eb      	b.n	802080c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8020834:	4b02      	ldr	r3, [pc, #8]	; (8020840 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8020836:	6818      	ldr	r0, [r3, #0]
 8020838:	6803      	ldr	r3, [r0, #0]
 802083a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802083c:	4798      	blx	r3
 802083e:	e76b      	b.n	8020718 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020840:	20008e30 	.word	0x20008e30
 8020844:	20008e28 	.word	0x20008e28

08020848 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020848:	b510      	push	{r4, lr}
 802084a:	2104      	movs	r1, #4
 802084c:	4604      	mov	r4, r0
 802084e:	f008 ffb8 	bl	80297c2 <_ZdlPvj>
 8020852:	4620      	mov	r0, r4
 8020854:	bd10      	pop	{r4, pc}

08020856 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020856:	b510      	push	{r4, lr}
 8020858:	2104      	movs	r1, #4
 802085a:	4604      	mov	r4, r0
 802085c:	f008 ffb1 	bl	80297c2 <_ZdlPvj>
 8020860:	4620      	mov	r0, r4
 8020862:	bd10      	pop	{r4, pc}

08020864 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020864:	b510      	push	{r4, lr}
 8020866:	2104      	movs	r1, #4
 8020868:	4604      	mov	r4, r0
 802086a:	f008 ffaa 	bl	80297c2 <_ZdlPvj>
 802086e:	4620      	mov	r0, r4
 8020870:	bd10      	pop	{r4, pc}

08020872 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020872:	b510      	push	{r4, lr}
 8020874:	2104      	movs	r1, #4
 8020876:	4604      	mov	r4, r0
 8020878:	f008 ffa3 	bl	80297c2 <_ZdlPvj>
 802087c:	4620      	mov	r0, r4
 802087e:	bd10      	pop	{r4, pc}

08020880 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020880:	b510      	push	{r4, lr}
 8020882:	2104      	movs	r1, #4
 8020884:	4604      	mov	r4, r0
 8020886:	f008 ff9c 	bl	80297c2 <_ZdlPvj>
 802088a:	4620      	mov	r0, r4
 802088c:	bd10      	pop	{r4, pc}

0802088e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802088e:	b510      	push	{r4, lr}
 8020890:	2104      	movs	r1, #4
 8020892:	4604      	mov	r4, r0
 8020894:	f008 ff95 	bl	80297c2 <_ZdlPvj>
 8020898:	4620      	mov	r0, r4
 802089a:	bd10      	pop	{r4, pc}

0802089c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 802089c:	b510      	push	{r4, lr}
 802089e:	2104      	movs	r1, #4
 80208a0:	4604      	mov	r4, r0
 80208a2:	f008 ff8e 	bl	80297c2 <_ZdlPvj>
 80208a6:	4620      	mov	r0, r4
 80208a8:	bd10      	pop	{r4, pc}

080208aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80208aa:	b510      	push	{r4, lr}
 80208ac:	2104      	movs	r1, #4
 80208ae:	4604      	mov	r4, r0
 80208b0:	f008 ff87 	bl	80297c2 <_ZdlPvj>
 80208b4:	4620      	mov	r0, r4
 80208b6:	bd10      	pop	{r4, pc}

080208b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80208b8:	b510      	push	{r4, lr}
 80208ba:	2104      	movs	r1, #4
 80208bc:	4604      	mov	r4, r0
 80208be:	f008 ff80 	bl	80297c2 <_ZdlPvj>
 80208c2:	4620      	mov	r0, r4
 80208c4:	bd10      	pop	{r4, pc}

080208c6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80208c6:	b510      	push	{r4, lr}
 80208c8:	2104      	movs	r1, #4
 80208ca:	4604      	mov	r4, r0
 80208cc:	f008 ff79 	bl	80297c2 <_ZdlPvj>
 80208d0:	4620      	mov	r0, r4
 80208d2:	bd10      	pop	{r4, pc}

080208d4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80208d4:	b510      	push	{r4, lr}
 80208d6:	2104      	movs	r1, #4
 80208d8:	4604      	mov	r4, r0
 80208da:	f008 ff72 	bl	80297c2 <_ZdlPvj>
 80208de:	4620      	mov	r0, r4
 80208e0:	bd10      	pop	{r4, pc}

080208e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80208e2:	b510      	push	{r4, lr}
 80208e4:	2104      	movs	r1, #4
 80208e6:	4604      	mov	r4, r0
 80208e8:	f008 ff6b 	bl	80297c2 <_ZdlPvj>
 80208ec:	4620      	mov	r0, r4
 80208ee:	bd10      	pop	{r4, pc}

080208f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80208f0:	b510      	push	{r4, lr}
 80208f2:	2104      	movs	r1, #4
 80208f4:	4604      	mov	r4, r0
 80208f6:	f008 ff64 	bl	80297c2 <_ZdlPvj>
 80208fa:	4620      	mov	r0, r4
 80208fc:	bd10      	pop	{r4, pc}

080208fe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80208fe:	b510      	push	{r4, lr}
 8020900:	2104      	movs	r1, #4
 8020902:	4604      	mov	r4, r0
 8020904:	f008 ff5d 	bl	80297c2 <_ZdlPvj>
 8020908:	4620      	mov	r0, r4
 802090a:	bd10      	pop	{r4, pc}

0802090c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 802090c:	b510      	push	{r4, lr}
 802090e:	2104      	movs	r1, #4
 8020910:	4604      	mov	r4, r0
 8020912:	f008 ff56 	bl	80297c2 <_ZdlPvj>
 8020916:	4620      	mov	r0, r4
 8020918:	bd10      	pop	{r4, pc}

0802091a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802091a:	b510      	push	{r4, lr}
 802091c:	2104      	movs	r1, #4
 802091e:	4604      	mov	r4, r0
 8020920:	f008 ff4f 	bl	80297c2 <_ZdlPvj>
 8020924:	4620      	mov	r0, r4
 8020926:	bd10      	pop	{r4, pc}

08020928 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020928:	b510      	push	{r4, lr}
 802092a:	2104      	movs	r1, #4
 802092c:	4604      	mov	r4, r0
 802092e:	f008 ff48 	bl	80297c2 <_ZdlPvj>
 8020932:	4620      	mov	r0, r4
 8020934:	bd10      	pop	{r4, pc}

08020936 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020936:	b510      	push	{r4, lr}
 8020938:	2104      	movs	r1, #4
 802093a:	4604      	mov	r4, r0
 802093c:	f008 ff41 	bl	80297c2 <_ZdlPvj>
 8020940:	4620      	mov	r0, r4
 8020942:	bd10      	pop	{r4, pc}

08020944 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020944:	b510      	push	{r4, lr}
 8020946:	2104      	movs	r1, #4
 8020948:	4604      	mov	r4, r0
 802094a:	f008 ff3a 	bl	80297c2 <_ZdlPvj>
 802094e:	4620      	mov	r0, r4
 8020950:	bd10      	pop	{r4, pc}

08020952 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020952:	b510      	push	{r4, lr}
 8020954:	2104      	movs	r1, #4
 8020956:	4604      	mov	r4, r0
 8020958:	f008 ff33 	bl	80297c2 <_ZdlPvj>
 802095c:	4620      	mov	r0, r4
 802095e:	bd10      	pop	{r4, pc}

08020960 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020960:	b510      	push	{r4, lr}
 8020962:	2104      	movs	r1, #4
 8020964:	4604      	mov	r4, r0
 8020966:	f008 ff2c 	bl	80297c2 <_ZdlPvj>
 802096a:	4620      	mov	r0, r4
 802096c:	bd10      	pop	{r4, pc}

0802096e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802096e:	b510      	push	{r4, lr}
 8020970:	2104      	movs	r1, #4
 8020972:	4604      	mov	r4, r0
 8020974:	f008 ff25 	bl	80297c2 <_ZdlPvj>
 8020978:	4620      	mov	r0, r4
 802097a:	bd10      	pop	{r4, pc}

0802097c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802097c:	b510      	push	{r4, lr}
 802097e:	2104      	movs	r1, #4
 8020980:	4604      	mov	r4, r0
 8020982:	f008 ff1e 	bl	80297c2 <_ZdlPvj>
 8020986:	4620      	mov	r0, r4
 8020988:	bd10      	pop	{r4, pc}

0802098a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802098a:	b510      	push	{r4, lr}
 802098c:	2104      	movs	r1, #4
 802098e:	4604      	mov	r4, r0
 8020990:	f008 ff17 	bl	80297c2 <_ZdlPvj>
 8020994:	4620      	mov	r0, r4
 8020996:	bd10      	pop	{r4, pc}

08020998 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8020998:	b510      	push	{r4, lr}
 802099a:	2104      	movs	r1, #4
 802099c:	4604      	mov	r4, r0
 802099e:	f008 ff10 	bl	80297c2 <_ZdlPvj>
 80209a2:	4620      	mov	r0, r4
 80209a4:	bd10      	pop	{r4, pc}

080209a6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80209a6:	b510      	push	{r4, lr}
 80209a8:	2104      	movs	r1, #4
 80209aa:	4604      	mov	r4, r0
 80209ac:	f008 ff09 	bl	80297c2 <_ZdlPvj>
 80209b0:	4620      	mov	r0, r4
 80209b2:	bd10      	pop	{r4, pc}

080209b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80209b4:	b510      	push	{r4, lr}
 80209b6:	2104      	movs	r1, #4
 80209b8:	4604      	mov	r4, r0
 80209ba:	f008 ff02 	bl	80297c2 <_ZdlPvj>
 80209be:	4620      	mov	r0, r4
 80209c0:	bd10      	pop	{r4, pc}

080209c2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80209c2:	b510      	push	{r4, lr}
 80209c4:	2104      	movs	r1, #4
 80209c6:	4604      	mov	r4, r0
 80209c8:	f008 fefb 	bl	80297c2 <_ZdlPvj>
 80209cc:	4620      	mov	r0, r4
 80209ce:	bd10      	pop	{r4, pc}

080209d0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80209d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209d4:	b091      	sub	sp, #68	; 0x44
 80209d6:	469b      	mov	fp, r3
 80209d8:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80209dc:	4616      	mov	r6, r2
 80209de:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 80209e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80209e6:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 80209ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80209ee:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80209f2:	4604      	mov	r4, r0
 80209f4:	460d      	mov	r5, r1
 80209f6:	4640      	mov	r0, r8
 80209f8:	4659      	mov	r1, fp
 80209fa:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80209fe:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 8020a02:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 8020a06:	f7f7 fcf3 	bl	80183f0 <_ZN8touchgfx4RectaNERKS0_>
 8020a0a:	4631      	mov	r1, r6
 8020a0c:	4640      	mov	r0, r8
 8020a0e:	f7f7 fcef 	bl	80183f0 <_ZN8touchgfx4RectaNERKS0_>
 8020a12:	4b74      	ldr	r3, [pc, #464]	; (8020be4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8020a14:	8818      	ldrh	r0, [r3, #0]
 8020a16:	4b74      	ldr	r3, [pc, #464]	; (8020be8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8020a18:	8819      	ldrh	r1, [r3, #0]
 8020a1a:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8020a1e:	2b00      	cmp	r3, #0
 8020a20:	b202      	sxth	r2, r0
 8020a22:	b20e      	sxth	r6, r1
 8020a24:	da07      	bge.n	8020a36 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8020a26:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8020a2a:	4463      	add	r3, ip
 8020a2c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8020a30:	2300      	movs	r3, #0
 8020a32:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8020a36:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8020a3a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8020a3e:	1ad2      	subs	r2, r2, r3
 8020a40:	4594      	cmp	ip, r2
 8020a42:	bfc4      	itt	gt
 8020a44:	1ac2      	subgt	r2, r0, r3
 8020a46:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 8020a4a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8020a4e:	2a00      	cmp	r2, #0
 8020a50:	da07      	bge.n	8020a62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8020a52:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 8020a56:	4462      	add	r2, ip
 8020a58:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8020a5c:	2200      	movs	r2, #0
 8020a5e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8020a62:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8020a66:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8020a6a:	eba6 060a 	sub.w	r6, r6, sl
 8020a6e:	42b2      	cmp	r2, r6
 8020a70:	bfc4      	itt	gt
 8020a72:	eba1 020a 	subgt.w	r2, r1, sl
 8020a76:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 8020a7a:	4a5c      	ldr	r2, [pc, #368]	; (8020bec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8020a7c:	7812      	ldrb	r2, [r2, #0]
 8020a7e:	b9a2      	cbnz	r2, 8020aaa <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8020a80:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8020a84:	4286      	cmp	r6, r0
 8020a86:	4640      	mov	r0, r8
 8020a88:	9303      	str	r3, [sp, #12]
 8020a8a:	bf14      	ite	ne
 8020a8c:	2600      	movne	r6, #0
 8020a8e:	2601      	moveq	r6, #1
 8020a90:	f7f7 fcf1 	bl	8018476 <_ZNK8touchgfx4Rect7isEmptyEv>
 8020a94:	9b03      	ldr	r3, [sp, #12]
 8020a96:	b160      	cbz	r0, 8020ab2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8020a98:	2300      	movs	r3, #0
 8020a9a:	8023      	strh	r3, [r4, #0]
 8020a9c:	8063      	strh	r3, [r4, #2]
 8020a9e:	80a3      	strh	r3, [r4, #4]
 8020aa0:	4620      	mov	r0, r4
 8020aa2:	80e3      	strh	r3, [r4, #6]
 8020aa4:	b011      	add	sp, #68	; 0x44
 8020aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020aaa:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8020aae:	428e      	cmp	r6, r1
 8020ab0:	e7e9      	b.n	8020a86 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8020ab2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8020ab6:	9205      	str	r2, [sp, #20]
 8020ab8:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8020abc:	9206      	str	r2, [sp, #24]
 8020abe:	f8bb 2000 	ldrh.w	r2, [fp]
 8020ac2:	900e      	str	r0, [sp, #56]	; 0x38
 8020ac4:	1a9b      	subs	r3, r3, r2
 8020ac6:	b21b      	sxth	r3, r3
 8020ac8:	9303      	str	r3, [sp, #12]
 8020aca:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8020ace:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 8020ad2:	ebaa 0a03 	sub.w	sl, sl, r3
 8020ad6:	fa0f f38a 	sxth.w	r3, sl
 8020ada:	9304      	str	r3, [sp, #16]
 8020adc:	9b03      	ldr	r3, [sp, #12]
 8020ade:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8020ae2:	9b04      	ldr	r3, [sp, #16]
 8020ae4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8020ae8:	9b05      	ldr	r3, [sp, #20]
 8020aea:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8020aee:	a90e      	add	r1, sp, #56	; 0x38
 8020af0:	9b06      	ldr	r3, [sp, #24]
 8020af2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8020af6:	a80c      	add	r0, sp, #48	; 0x30
 8020af8:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 8020afc:	f7fa fab4 	bl	801b068 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020b00:	4640      	mov	r0, r8
 8020b02:	f7fa fa89 	bl	801b018 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b06:	a80e      	add	r0, sp, #56	; 0x38
 8020b08:	f7fa fa86 	bl	801b018 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b0c:	4b38      	ldr	r3, [pc, #224]	; (8020bf0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8020b0e:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8020b12:	881b      	ldrh	r3, [r3, #0]
 8020b14:	9307      	str	r3, [sp, #28]
 8020b16:	682b      	ldr	r3, [r5, #0]
 8020b18:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8020bf4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8020b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b1e:	4628      	mov	r0, r5
 8020b20:	4798      	blx	r3
 8020b22:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 8020b26:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8020b2a:	4681      	mov	r9, r0
 8020b2c:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8020b30:	f8db 0000 	ldr.w	r0, [fp]
 8020b34:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8020b36:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8020b3a:	6803      	ldr	r3, [r0, #0]
 8020b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b3e:	4798      	blx	r3
 8020b40:	4607      	mov	r7, r0
 8020b42:	f8db 0000 	ldr.w	r0, [fp]
 8020b46:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8020b4a:	6803      	ldr	r3, [r0, #0]
 8020b4c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8020b50:	9109      	str	r1, [sp, #36]	; 0x24
 8020b52:	9208      	str	r2, [sp, #32]
 8020b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020b56:	4798      	blx	r3
 8020b58:	f010 0f01 	tst.w	r0, #1
 8020b5c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8020b60:	d012      	beq.n	8020b88 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8020b62:	f8db 0000 	ldr.w	r0, [fp]
 8020b66:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8020b6a:	6803      	ldr	r3, [r0, #0]
 8020b6c:	9200      	str	r2, [sp, #0]
 8020b6e:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8020b70:	e898 0006 	ldmia.w	r8, {r1, r2}
 8020b74:	462b      	mov	r3, r5
 8020b76:	47b0      	blx	r6
 8020b78:	9b03      	ldr	r3, [sp, #12]
 8020b7a:	8023      	strh	r3, [r4, #0]
 8020b7c:	9b04      	ldr	r3, [sp, #16]
 8020b7e:	8063      	strh	r3, [r4, #2]
 8020b80:	9b05      	ldr	r3, [sp, #20]
 8020b82:	80a3      	strh	r3, [r4, #4]
 8020b84:	9b06      	ldr	r3, [sp, #24]
 8020b86:	e78b      	b.n	8020aa0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8020b88:	fb09 f202 	mul.w	r2, r9, r2
 8020b8c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8020b90:	440f      	add	r7, r1
 8020b92:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8020b96:	b166      	cbz	r6, 8020bb2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8020b98:	9a07      	ldr	r2, [sp, #28]
 8020b9a:	4592      	cmp	sl, r2
 8020b9c:	d109      	bne.n	8020bb2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8020b9e:	f8db 0000 	ldr.w	r0, [fp]
 8020ba2:	6802      	ldr	r2, [r0, #0]
 8020ba4:	fb09 f303 	mul.w	r3, r9, r3
 8020ba8:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8020baa:	4629      	mov	r1, r5
 8020bac:	463a      	mov	r2, r7
 8020bae:	47b0      	blx	r6
 8020bb0:	e7e2      	b.n	8020b78 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8020bb2:	fb0a f303 	mul.w	r3, sl, r3
 8020bb6:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8020bf4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8020bba:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8020bbe:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8020bc2:	4545      	cmp	r5, r8
 8020bc4:	d2d8      	bcs.n	8020b78 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8020bc6:	f8db 0000 	ldr.w	r0, [fp]
 8020bca:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8020bce:	6802      	ldr	r2, [r0, #0]
 8020bd0:	4629      	mov	r1, r5
 8020bd2:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8020bd6:	005b      	lsls	r3, r3, #1
 8020bd8:	463a      	mov	r2, r7
 8020bda:	47d0      	blx	sl
 8020bdc:	444f      	add	r7, r9
 8020bde:	4435      	add	r5, r6
 8020be0:	e7ef      	b.n	8020bc2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8020be2:	bf00      	nop
 8020be4:	20008e22 	.word	0x20008e22
 8020be8:	20008e24 	.word	0x20008e24
 8020bec:	20008e26 	.word	0x20008e26
 8020bf0:	20008e28 	.word	0x20008e28
 8020bf4:	20008e30 	.word	0x20008e30

08020bf8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8020bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020bfa:	4606      	mov	r6, r0
 8020bfc:	b087      	sub	sp, #28
 8020bfe:	460c      	mov	r4, r1
 8020c00:	4617      	mov	r7, r2
 8020c02:	461d      	mov	r5, r3
 8020c04:	b333      	cbz	r3, 8020c54 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020c06:	4608      	mov	r0, r1
 8020c08:	f7f7 fc35 	bl	8018476 <_ZNK8touchgfx4Rect7isEmptyEv>
 8020c0c:	bb10      	cbnz	r0, 8020c54 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020c0e:	6820      	ldr	r0, [r4, #0]
 8020c10:	6861      	ldr	r1, [r4, #4]
 8020c12:	4c1c      	ldr	r4, [pc, #112]	; (8020c84 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8020c14:	ab04      	add	r3, sp, #16
 8020c16:	c303      	stmia	r3!, {r0, r1}
 8020c18:	a804      	add	r0, sp, #16
 8020c1a:	f7fa f9fd 	bl	801b018 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020c1e:	6820      	ldr	r0, [r4, #0]
 8020c20:	6803      	ldr	r3, [r0, #0]
 8020c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020c24:	4798      	blx	r3
 8020c26:	2dff      	cmp	r5, #255	; 0xff
 8020c28:	d016      	beq.n	8020c58 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8020c2a:	f010 0f08 	tst.w	r0, #8
 8020c2e:	6820      	ldr	r0, [r4, #0]
 8020c30:	d015      	beq.n	8020c5e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8020c32:	2400      	movs	r4, #0
 8020c34:	6801      	ldr	r1, [r0, #0]
 8020c36:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020c3a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020c3e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8020c42:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8020c46:	9401      	str	r4, [sp, #4]
 8020c48:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8020c4c:	9400      	str	r4, [sp, #0]
 8020c4e:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8020c50:	4639      	mov	r1, r7
 8020c52:	47a0      	blx	r4
 8020c54:	b007      	add	sp, #28
 8020c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020c58:	f010 0f02 	tst.w	r0, #2
 8020c5c:	e7e7      	b.n	8020c2e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8020c5e:	6803      	ldr	r3, [r0, #0]
 8020c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020c62:	4798      	blx	r3
 8020c64:	4b08      	ldr	r3, [pc, #32]	; (8020c88 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8020c66:	881a      	ldrh	r2, [r3, #0]
 8020c68:	6833      	ldr	r3, [r6, #0]
 8020c6a:	e9cd 7500 	strd	r7, r5, [sp]
 8020c6e:	4601      	mov	r1, r0
 8020c70:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8020c72:	4630      	mov	r0, r6
 8020c74:	ab04      	add	r3, sp, #16
 8020c76:	47a8      	blx	r5
 8020c78:	6820      	ldr	r0, [r4, #0]
 8020c7a:	6803      	ldr	r3, [r0, #0]
 8020c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020c7e:	4798      	blx	r3
 8020c80:	e7e8      	b.n	8020c54 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8020c82:	bf00      	nop
 8020c84:	20008e30 	.word	0x20008e30
 8020c88:	20008e28 	.word	0x20008e28

08020c8c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8020c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020c90:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8020c94:	9e08      	ldr	r6, [sp, #32]
 8020c96:	4688      	mov	r8, r1
 8020c98:	4614      	mov	r4, r2
 8020c9a:	461d      	mov	r5, r3
 8020c9c:	2f00      	cmp	r7, #0
 8020c9e:	f000 80a9 	beq.w	8020df4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8020ca2:	4618      	mov	r0, r3
 8020ca4:	f7f7 fbe7 	bl	8018476 <_ZNK8touchgfx4Rect7isEmptyEv>
 8020ca8:	2800      	cmp	r0, #0
 8020caa:	f040 80a3 	bne.w	8020df4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8020cae:	f9b5 1000 	ldrsh.w	r1, [r5]
 8020cb2:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8020cb6:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8020cba:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8020cbe:	fb04 1303 	mla	r3, r4, r3, r1
 8020cc2:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8020cc6:	4365      	muls	r5, r4
 8020cc8:	2fff      	cmp	r7, #255	; 0xff
 8020cca:	eba4 0200 	sub.w	r2, r4, r0
 8020cce:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8020cd2:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8020cd6:	d04a      	beq.n	8020d6e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8020cd8:	b2bc      	uxth	r4, r7
 8020cda:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 8020cde:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8020ce2:	fa5f f788 	uxtb.w	r7, r8
 8020ce6:	b2f3      	uxtb	r3, r6
 8020ce8:	0040      	lsls	r0, r0, #1
 8020cea:	fb0e fe04 	mul.w	lr, lr, r4
 8020cee:	4367      	muls	r7, r4
 8020cf0:	4363      	muls	r3, r4
 8020cf2:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8020cf6:	fa1f fc8c 	uxth.w	ip, ip
 8020cfa:	42a9      	cmp	r1, r5
 8020cfc:	d27a      	bcs.n	8020df4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8020cfe:	eb01 0900 	add.w	r9, r1, r0
 8020d02:	4549      	cmp	r1, r9
 8020d04:	d231      	bcs.n	8020d6a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 8020d06:	880a      	ldrh	r2, [r1, #0]
 8020d08:	1214      	asrs	r4, r2, #8
 8020d0a:	10d6      	asrs	r6, r2, #3
 8020d0c:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8020d10:	00d2      	lsls	r2, r2, #3
 8020d12:	b2d2      	uxtb	r2, r2
 8020d14:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8020d18:	fb14 f40c 	smulbb	r4, r4, ip
 8020d1c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8020d20:	4474      	add	r4, lr
 8020d22:	fb12 f20c 	smulbb	r2, r2, ip
 8020d26:	b2a4      	uxth	r4, r4
 8020d28:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8020d2c:	441a      	add	r2, r3
 8020d2e:	b292      	uxth	r2, r2
 8020d30:	f104 0a01 	add.w	sl, r4, #1
 8020d34:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8020d38:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8020d3c:	fb16 f60c 	smulbb	r6, r6, ip
 8020d40:	f102 0a01 	add.w	sl, r2, #1
 8020d44:	443e      	add	r6, r7
 8020d46:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8020d4a:	b2b6      	uxth	r6, r6
 8020d4c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8020d50:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020d54:	4322      	orrs	r2, r4
 8020d56:	1c74      	adds	r4, r6, #1
 8020d58:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8020d5c:	0976      	lsrs	r6, r6, #5
 8020d5e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8020d62:	4332      	orrs	r2, r6
 8020d64:	f821 2b02 	strh.w	r2, [r1], #2
 8020d68:	e7cb      	b.n	8020d02 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8020d6a:	4441      	add	r1, r8
 8020d6c:	e7c5      	b.n	8020cfa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8020d6e:	4f22      	ldr	r7, [pc, #136]	; (8020df8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8020d70:	0973      	lsrs	r3, r6, #5
 8020d72:	ea08 0707 	and.w	r7, r8, r7
 8020d76:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020d7a:	433b      	orrs	r3, r7
 8020d7c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8020d80:	4333      	orrs	r3, r6
 8020d82:	07e7      	lsls	r7, r4, #31
 8020d84:	b29b      	uxth	r3, r3
 8020d86:	d50b      	bpl.n	8020da0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8020d88:	0040      	lsls	r0, r0, #1
 8020d8a:	0052      	lsls	r2, r2, #1
 8020d8c:	42a9      	cmp	r1, r5
 8020d8e:	d231      	bcs.n	8020df4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8020d90:	180c      	adds	r4, r1, r0
 8020d92:	42a1      	cmp	r1, r4
 8020d94:	d202      	bcs.n	8020d9c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 8020d96:	f821 3b02 	strh.w	r3, [r1], #2
 8020d9a:	e7fa      	b.n	8020d92 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 8020d9c:	4411      	add	r1, r2
 8020d9e:	e7f5      	b.n	8020d8c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8020da0:	078e      	lsls	r6, r1, #30
 8020da2:	d008      	beq.n	8020db6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8020da4:	0066      	lsls	r6, r4, #1
 8020da6:	460a      	mov	r2, r1
 8020da8:	42aa      	cmp	r2, r5
 8020daa:	d202      	bcs.n	8020db2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 8020dac:	8013      	strh	r3, [r2, #0]
 8020dae:	4432      	add	r2, r6
 8020db0:	e7fa      	b.n	8020da8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 8020db2:	3102      	adds	r1, #2
 8020db4:	3801      	subs	r0, #1
 8020db6:	07c2      	lsls	r2, r0, #31
 8020db8:	d50b      	bpl.n	8020dd2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8020dba:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 8020dbe:	3a01      	subs	r2, #1
 8020dc0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8020dc4:	0066      	lsls	r6, r4, #1
 8020dc6:	42aa      	cmp	r2, r5
 8020dc8:	d202      	bcs.n	8020dd0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 8020dca:	8013      	strh	r3, [r2, #0]
 8020dcc:	4432      	add	r2, r6
 8020dce:	e7fa      	b.n	8020dc6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8020dd0:	3801      	subs	r0, #1
 8020dd2:	b178      	cbz	r0, 8020df4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8020dd4:	1040      	asrs	r0, r0, #1
 8020dd6:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8020dda:	0080      	lsls	r0, r0, #2
 8020ddc:	0064      	lsls	r4, r4, #1
 8020dde:	42a9      	cmp	r1, r5
 8020de0:	d208      	bcs.n	8020df4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8020de2:	180e      	adds	r6, r1, r0
 8020de4:	460a      	mov	r2, r1
 8020de6:	42b2      	cmp	r2, r6
 8020de8:	d202      	bcs.n	8020df0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 8020dea:	f842 3b04 	str.w	r3, [r2], #4
 8020dee:	e7fa      	b.n	8020de6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 8020df0:	4421      	add	r1, r4
 8020df2:	e7f4      	b.n	8020dde <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 8020df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020df8:	00fff800 	.word	0x00fff800

08020dfc <_ZN8touchgfx8LCD16bppC1Ev>:
 8020dfc:	2200      	movs	r2, #0
 8020dfe:	4910      	ldr	r1, [pc, #64]	; (8020e40 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 8020e00:	6042      	str	r2, [r0, #4]
 8020e02:	6001      	str	r1, [r0, #0]
 8020e04:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8020e08:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8020e0c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8020e10:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8020e14:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8020e18:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8020e1c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8020e20:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8020e24:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8020e28:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8020e2c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8020e30:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8020e34:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8020e38:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8020e3c:	4770      	bx	lr
 8020e3e:	bf00      	nop
 8020e40:	0802cef4 	.word	0x0802cef4

08020e44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8020e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e48:	460d      	mov	r5, r1
 8020e4a:	b08d      	sub	sp, #52	; 0x34
 8020e4c:	4604      	mov	r4, r0
 8020e4e:	6808      	ldr	r0, [r1, #0]
 8020e50:	6849      	ldr	r1, [r1, #4]
 8020e52:	4699      	mov	r9, r3
 8020e54:	ab08      	add	r3, sp, #32
 8020e56:	c303      	stmia	r3!, {r0, r1}
 8020e58:	6810      	ldr	r0, [r2, #0]
 8020e5a:	6851      	ldr	r1, [r2, #4]
 8020e5c:	ab0a      	add	r3, sp, #40	; 0x28
 8020e5e:	c303      	stmia	r3!, {r0, r1}
 8020e60:	a808      	add	r0, sp, #32
 8020e62:	f7fa f8d9 	bl	801b018 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020e66:	4629      	mov	r1, r5
 8020e68:	a80a      	add	r0, sp, #40	; 0x28
 8020e6a:	f7fa f8fd 	bl	801b068 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020e6e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020e72:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8020e76:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8020e7a:	4d63      	ldr	r5, [pc, #396]	; (8021008 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8020e7c:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 8020e80:	6828      	ldr	r0, [r5, #0]
 8020e82:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8020e86:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020e8a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8020e8e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8020e92:	440a      	add	r2, r1
 8020e94:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8020e98:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8020e9c:	4413      	add	r3, r2
 8020e9e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8020ea2:	6803      	ldr	r3, [r0, #0]
 8020ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020ea6:	4798      	blx	r3
 8020ea8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020eac:	d119      	bne.n	8020ee2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8020eae:	f010 0f20 	tst.w	r0, #32
 8020eb2:	6828      	ldr	r0, [r5, #0]
 8020eb4:	d018      	beq.n	8020ee8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8020eb6:	2500      	movs	r5, #0
 8020eb8:	6801      	ldr	r1, [r0, #0]
 8020eba:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020ebe:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020ec2:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8020ec6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8020eca:	9502      	str	r5, [sp, #8]
 8020ecc:	b2b6      	uxth	r6, r6
 8020ece:	fa1f f588 	uxth.w	r5, r8
 8020ed2:	9601      	str	r6, [sp, #4]
 8020ed4:	9500      	str	r5, [sp, #0]
 8020ed6:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8020ed8:	4621      	mov	r1, r4
 8020eda:	47a8      	blx	r5
 8020edc:	b00d      	add	sp, #52	; 0x34
 8020ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ee2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020ee6:	e7e4      	b.n	8020eb2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8020ee8:	6803      	ldr	r3, [r0, #0]
 8020eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020eec:	4798      	blx	r3
 8020eee:	4947      	ldr	r1, [pc, #284]	; (802100c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8020ef0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8020ef4:	880b      	ldrh	r3, [r1, #0]
 8020ef6:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8020efa:	fb03 5202 	mla	r2, r3, r2, r5
 8020efe:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020f02:	4373      	muls	r3, r6
 8020f04:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020f08:	9307      	str	r3, [sp, #28]
 8020f0a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8020f0e:	9306      	str	r3, [sp, #24]
 8020f10:	468a      	mov	sl, r1
 8020f12:	9b07      	ldr	r3, [sp, #28]
 8020f14:	4298      	cmp	r0, r3
 8020f16:	d270      	bcs.n	8020ffa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8020f18:	9b06      	ldr	r3, [sp, #24]
 8020f1a:	4621      	mov	r1, r4
 8020f1c:	eb00 0b03 	add.w	fp, r0, r3
 8020f20:	4558      	cmp	r0, fp
 8020f22:	d25d      	bcs.n	8020fe0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8020f24:	f851 4b04 	ldr.w	r4, [r1], #4
 8020f28:	0e23      	lsrs	r3, r4, #24
 8020f2a:	d014      	beq.n	8020f56 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8020f2c:	2bff      	cmp	r3, #255	; 0xff
 8020f2e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8020f32:	d112      	bne.n	8020f5a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8020f34:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020f38:	d10f      	bne.n	8020f5a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8020f3a:	0963      	lsrs	r3, r4, #5
 8020f3c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8020f40:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020f44:	f02c 0c07 	bic.w	ip, ip, #7
 8020f48:	ea43 0c0c 	orr.w	ip, r3, ip
 8020f4c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8020f50:	ea4c 0404 	orr.w	r4, ip, r4
 8020f54:	8004      	strh	r4, [r0, #0]
 8020f56:	3002      	adds	r0, #2
 8020f58:	e7e2      	b.n	8020f20 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8020f5a:	fb09 f303 	mul.w	r3, r9, r3
 8020f5e:	8807      	ldrh	r7, [r0, #0]
 8020f60:	1c5a      	adds	r2, r3, #1
 8020f62:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8020f66:	1212      	asrs	r2, r2, #8
 8020f68:	123e      	asrs	r6, r7, #8
 8020f6a:	b293      	uxth	r3, r2
 8020f6c:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8020f70:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020f74:	43d2      	mvns	r2, r2
 8020f76:	b2d2      	uxtb	r2, r2
 8020f78:	10fd      	asrs	r5, r7, #3
 8020f7a:	fb1e fe03 	smulbb	lr, lr, r3
 8020f7e:	00ff      	lsls	r7, r7, #3
 8020f80:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8020f84:	fb06 e602 	mla	r6, r6, r2, lr
 8020f88:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8020f8c:	b2ff      	uxtb	r7, r7
 8020f8e:	fa5f fc8c 	uxtb.w	ip, ip
 8020f92:	b2e4      	uxtb	r4, r4
 8020f94:	b2b6      	uxth	r6, r6
 8020f96:	fb1c fc03 	smulbb	ip, ip, r3
 8020f9a:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8020f9e:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8020fa2:	fb14 f403 	smulbb	r4, r4, r3
 8020fa6:	fb05 c502 	mla	r5, r5, r2, ip
 8020faa:	f106 0e01 	add.w	lr, r6, #1
 8020fae:	fb07 4702 	mla	r7, r7, r2, r4
 8020fb2:	b2ad      	uxth	r5, r5
 8020fb4:	b2bf      	uxth	r7, r7
 8020fb6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8020fba:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 8020fbe:	f105 0c01 	add.w	ip, r5, #1
 8020fc2:	1c7e      	adds	r6, r7, #1
 8020fc4:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8020fc8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020fcc:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8020fd0:	096d      	lsrs	r5, r5, #5
 8020fd2:	ea46 060e 	orr.w	r6, r6, lr
 8020fd6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020fda:	432e      	orrs	r6, r5
 8020fdc:	8006      	strh	r6, [r0, #0]
 8020fde:	e7ba      	b.n	8020f56 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8020fe0:	f8ba 3000 	ldrh.w	r3, [sl]
 8020fe4:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8020fe8:	eba3 0308 	sub.w	r3, r3, r8
 8020fec:	eba4 0408 	sub.w	r4, r4, r8
 8020ff0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020ff4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8020ff8:	e78b      	b.n	8020f12 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8020ffa:	4b03      	ldr	r3, [pc, #12]	; (8021008 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8020ffc:	6818      	ldr	r0, [r3, #0]
 8020ffe:	6803      	ldr	r3, [r0, #0]
 8021000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021002:	4798      	blx	r3
 8021004:	e76a      	b.n	8020edc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8021006:	bf00      	nop
 8021008:	20008e30 	.word	0x20008e30
 802100c:	20008e28 	.word	0x20008e28

08021010 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8021010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021014:	460c      	mov	r4, r1
 8021016:	b085      	sub	sp, #20
 8021018:	6810      	ldr	r0, [r2, #0]
 802101a:	6851      	ldr	r1, [r2, #4]
 802101c:	466d      	mov	r5, sp
 802101e:	c503      	stmia	r5!, {r0, r1}
 8021020:	6818      	ldr	r0, [r3, #0]
 8021022:	6859      	ldr	r1, [r3, #4]
 8021024:	4616      	mov	r6, r2
 8021026:	c503      	stmia	r5!, {r0, r1}
 8021028:	4668      	mov	r0, sp
 802102a:	f7f9 fff5 	bl	801b018 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802102e:	4631      	mov	r1, r6
 8021030:	a802      	add	r0, sp, #8
 8021032:	f7fa f819 	bl	801b068 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021036:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802103a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 802103e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8021042:	4d28      	ldr	r5, [pc, #160]	; (80210e4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8021044:	4e28      	ldr	r6, [pc, #160]	; (80210e8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8021046:	6828      	ldr	r0, [r5, #0]
 8021048:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 802104c:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8021050:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021054:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8021058:	f8bd 1000 	ldrh.w	r1, [sp]
 802105c:	440a      	add	r2, r1
 802105e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8021062:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8021066:	4413      	add	r3, r2
 8021068:	f8ad 300a 	strh.w	r3, [sp, #10]
 802106c:	6803      	ldr	r3, [r0, #0]
 802106e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021070:	4798      	blx	r3
 8021072:	8833      	ldrh	r3, [r6, #0]
 8021074:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8021078:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 802107c:	f8df e06c 	ldr.w	lr, [pc, #108]	; 80210ec <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8021080:	fb03 1202 	mla	r2, r3, r2, r1
 8021084:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021088:	fb08 f303 	mul.w	r3, r8, r3
 802108c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021090:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8021094:	4298      	cmp	r0, r3
 8021096:	d21d      	bcs.n	80210d4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8021098:	eb00 080c 	add.w	r8, r0, ip
 802109c:	4540      	cmp	r0, r8
 802109e:	d20f      	bcs.n	80210c0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 80210a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80210a4:	ea4f 1951 	mov.w	r9, r1, lsr #5
 80210a8:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 80210ac:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80210b0:	ea42 0209 	orr.w	r2, r2, r9
 80210b4:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80210b8:	430a      	orrs	r2, r1
 80210ba:	f820 2b02 	strh.w	r2, [r0], #2
 80210be:	e7ed      	b.n	802109c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 80210c0:	8832      	ldrh	r2, [r6, #0]
 80210c2:	1bd2      	subs	r2, r2, r7
 80210c4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80210c8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80210cc:	1bd2      	subs	r2, r2, r7
 80210ce:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80210d2:	e7df      	b.n	8021094 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 80210d4:	6828      	ldr	r0, [r5, #0]
 80210d6:	6803      	ldr	r3, [r0, #0]
 80210d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80210da:	4798      	blx	r3
 80210dc:	b005      	add	sp, #20
 80210de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80210e2:	bf00      	nop
 80210e4:	20008e30 	.word	0x20008e30
 80210e8:	20008e28 	.word	0x20008e28
 80210ec:	fffff800 	.word	0xfffff800

080210f0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80210f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80210f4:	460e      	mov	r6, r1
 80210f6:	b08e      	sub	sp, #56	; 0x38
 80210f8:	4604      	mov	r4, r0
 80210fa:	6808      	ldr	r0, [r1, #0]
 80210fc:	6849      	ldr	r1, [r1, #4]
 80210fe:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 80212d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8021102:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 80212dc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8021106:	461d      	mov	r5, r3
 8021108:	ab0a      	add	r3, sp, #40	; 0x28
 802110a:	c303      	stmia	r3!, {r0, r1}
 802110c:	6810      	ldr	r0, [r2, #0]
 802110e:	6851      	ldr	r1, [r2, #4]
 8021110:	ab0c      	add	r3, sp, #48	; 0x30
 8021112:	c303      	stmia	r3!, {r0, r1}
 8021114:	a80a      	add	r0, sp, #40	; 0x28
 8021116:	f7f9 ff7f 	bl	801b018 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802111a:	4631      	mov	r1, r6
 802111c:	a80c      	add	r0, sp, #48	; 0x30
 802111e:	f7f9 ffa3 	bl	801b068 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021122:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8021126:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 802112a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 802112e:	f8d8 0000 	ldr.w	r0, [r8]
 8021132:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8021136:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 802113a:	fb11 2103 	smlabb	r1, r1, r3, r2
 802113e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021142:	440c      	add	r4, r1
 8021144:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8021148:	440a      	add	r2, r1
 802114a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 802114e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8021152:	4413      	add	r3, r2
 8021154:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8021158:	6803      	ldr	r3, [r0, #0]
 802115a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802115c:	4798      	blx	r3
 802115e:	2dff      	cmp	r5, #255	; 0xff
 8021160:	d124      	bne.n	80211ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8021162:	f010 0f01 	tst.w	r0, #1
 8021166:	f8d8 0000 	ldr.w	r0, [r8]
 802116a:	d022      	beq.n	80211b2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 802116c:	2100      	movs	r1, #0
 802116e:	f8d0 c000 	ldr.w	ip, [r0]
 8021172:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8021176:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 802117a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 802117e:	f04f 0e01 	mov.w	lr, #1
 8021182:	f8cd e018 	str.w	lr, [sp, #24]
 8021186:	f8b9 e000 	ldrh.w	lr, [r9]
 802118a:	9503      	str	r5, [sp, #12]
 802118c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8021190:	b2b6      	uxth	r6, r6
 8021192:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8021196:	9102      	str	r1, [sp, #8]
 8021198:	b2bf      	uxth	r7, r7
 802119a:	9601      	str	r6, [sp, #4]
 802119c:	9700      	str	r7, [sp, #0]
 802119e:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 80211a2:	4621      	mov	r1, r4
 80211a4:	47a8      	blx	r5
 80211a6:	b00e      	add	sp, #56	; 0x38
 80211a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80211ac:	f010 0f04 	tst.w	r0, #4
 80211b0:	e7d9      	b.n	8021166 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80211b2:	6803      	ldr	r3, [r0, #0]
 80211b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80211b6:	4798      	blx	r3
 80211b8:	f8b9 3000 	ldrh.w	r3, [r9]
 80211bc:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80211c0:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80211c4:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 80211c8:	fb03 1202 	mla	r2, r3, r2, r1
 80211cc:	ebac 0c07 	sub.w	ip, ip, r7
 80211d0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80211d4:	435e      	muls	r6, r3
 80211d6:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80211da:	2dff      	cmp	r5, #255	; 0xff
 80211dc:	eba3 0707 	sub.w	r7, r3, r7
 80211e0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80211e4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80211e8:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80211ec:	d049      	beq.n	8021282 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80211ee:	43eb      	mvns	r3, r5
 80211f0:	fa1f f985 	uxth.w	r9, r5
 80211f4:	b2db      	uxtb	r3, r3
 80211f6:	42b0      	cmp	r0, r6
 80211f8:	d266      	bcs.n	80212c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80211fa:	eb00 0a0e 	add.w	sl, r0, lr
 80211fe:	4550      	cmp	r0, sl
 8021200:	4621      	mov	r1, r4
 8021202:	f104 0403 	add.w	r4, r4, #3
 8021206:	d25b      	bcs.n	80212c0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8021208:	8802      	ldrh	r2, [r0, #0]
 802120a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802120e:	ea4f 2822 	mov.w	r8, r2, asr #8
 8021212:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8021216:	fb11 f109 	smulbb	r1, r1, r9
 802121a:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 802121e:	10d5      	asrs	r5, r2, #3
 8021220:	fb08 1803 	mla	r8, r8, r3, r1
 8021224:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8021228:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802122c:	fb11 f109 	smulbb	r1, r1, r9
 8021230:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021234:	fb05 1503 	mla	r5, r5, r3, r1
 8021238:	00d2      	lsls	r2, r2, #3
 802123a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 802123e:	b2d2      	uxtb	r2, r2
 8021240:	fb11 f109 	smulbb	r1, r1, r9
 8021244:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021248:	fa1f f888 	uxth.w	r8, r8
 802124c:	fb02 1203 	mla	r2, r2, r3, r1
 8021250:	b292      	uxth	r2, r2
 8021252:	f108 0101 	add.w	r1, r8, #1
 8021256:	b2ad      	uxth	r5, r5
 8021258:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 802125c:	1c51      	adds	r1, r2, #1
 802125e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021262:	1c69      	adds	r1, r5, #1
 8021264:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8021268:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 802126c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021270:	096d      	lsrs	r5, r5, #5
 8021272:	ea42 0208 	orr.w	r2, r2, r8
 8021276:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802127a:	432a      	orrs	r2, r5
 802127c:	f820 2b02 	strh.w	r2, [r0], #2
 8021280:	e7bd      	b.n	80211fe <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8021282:	4a14      	ldr	r2, [pc, #80]	; (80212d4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8021284:	42b0      	cmp	r0, r6
 8021286:	d21f      	bcs.n	80212c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8021288:	eb00 050e 	add.w	r5, r0, lr
 802128c:	42a8      	cmp	r0, r5
 802128e:	4621      	mov	r1, r4
 8021290:	f104 0403 	add.w	r4, r4, #3
 8021294:	d210      	bcs.n	80212b8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8021296:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 802129a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 802129e:	00db      	lsls	r3, r3, #3
 80212a0:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 80212a4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80212a8:	430b      	orrs	r3, r1
 80212aa:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80212ae:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80212b2:	f820 3b02 	strh.w	r3, [r0], #2
 80212b6:	e7e9      	b.n	802128c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 80212b8:	4438      	add	r0, r7
 80212ba:	eb01 040c 	add.w	r4, r1, ip
 80212be:	e7e1      	b.n	8021284 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80212c0:	4438      	add	r0, r7
 80212c2:	eb01 040c 	add.w	r4, r1, ip
 80212c6:	e796      	b.n	80211f6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 80212c8:	4b03      	ldr	r3, [pc, #12]	; (80212d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 80212ca:	6818      	ldr	r0, [r3, #0]
 80212cc:	6803      	ldr	r3, [r0, #0]
 80212ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80212d0:	4798      	blx	r3
 80212d2:	e768      	b.n	80211a6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80212d4:	fffff800 	.word	0xfffff800
 80212d8:	20008e30 	.word	0x20008e30
 80212dc:	20008e28 	.word	0x20008e28

080212e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80212e0:	b4f0      	push	{r4, r5, r6, r7}
 80212e2:	4616      	mov	r6, r2
 80212e4:	2e01      	cmp	r6, #1
 80212e6:	461c      	mov	r4, r3
 80212e8:	460d      	mov	r5, r1
 80212ea:	9a04      	ldr	r2, [sp, #16]
 80212ec:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80212f0:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80212f4:	d012      	beq.n	802131c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80212f6:	d303      	bcc.n	8021300 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 80212f8:	2e02      	cmp	r6, #2
 80212fa:	d00a      	beq.n	8021312 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 80212fc:	bcf0      	pop	{r4, r5, r6, r7}
 80212fe:	4770      	bx	lr
 8021300:	6805      	ldr	r5, [r0, #0]
 8021302:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8021306:	68ed      	ldr	r5, [r5, #12]
 8021308:	4613      	mov	r3, r2
 802130a:	46ac      	mov	ip, r5
 802130c:	4622      	mov	r2, r4
 802130e:	bcf0      	pop	{r4, r5, r6, r7}
 8021310:	4760      	bx	ip
 8021312:	4621      	mov	r1, r4
 8021314:	4628      	mov	r0, r5
 8021316:	bcf0      	pop	{r4, r5, r6, r7}
 8021318:	f7ff bd94 	b.w	8020e44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 802131c:	4621      	mov	r1, r4
 802131e:	4628      	mov	r0, r5
 8021320:	bcf0      	pop	{r4, r5, r6, r7}
 8021322:	f7ff bee5 	b.w	80210f0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08021328 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8021328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802132c:	4681      	mov	r9, r0
 802132e:	b093      	sub	sp, #76	; 0x4c
 8021330:	6810      	ldr	r0, [r2, #0]
 8021332:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8021336:	4f6d      	ldr	r7, [pc, #436]	; (80214ec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8021338:	4688      	mov	r8, r1
 802133a:	6851      	ldr	r1, [r2, #4]
 802133c:	ac0e      	add	r4, sp, #56	; 0x38
 802133e:	c403      	stmia	r4!, {r0, r1}
 8021340:	6818      	ldr	r0, [r3, #0]
 8021342:	6859      	ldr	r1, [r3, #4]
 8021344:	ac10      	add	r4, sp, #64	; 0x40
 8021346:	4616      	mov	r6, r2
 8021348:	c403      	stmia	r4!, {r0, r1}
 802134a:	a80e      	add	r0, sp, #56	; 0x38
 802134c:	f7f9 fe64 	bl	801b018 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021350:	4631      	mov	r1, r6
 8021352:	a810      	add	r0, sp, #64	; 0x40
 8021354:	f7f9 fe88 	bl	801b068 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021358:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 802135c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8021360:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8021364:	4e62      	ldr	r6, [pc, #392]	; (80214f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8021366:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 802136a:	6830      	ldr	r0, [r6, #0]
 802136c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 8021370:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021374:	4489      	add	r9, r1
 8021376:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 802137a:	440a      	add	r2, r1
 802137c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8021380:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021384:	4413      	add	r3, r2
 8021386:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 802138a:	6803      	ldr	r3, [r0, #0]
 802138c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802138e:	4798      	blx	r3
 8021390:	f010 0f80 	tst.w	r0, #128	; 0x80
 8021394:	6830      	ldr	r0, [r6, #0]
 8021396:	d01d      	beq.n	80213d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8021398:	2200      	movs	r2, #0
 802139a:	6801      	ldr	r1, [r0, #0]
 802139c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80213a0:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80213a4:	220b      	movs	r2, #11
 80213a6:	9207      	str	r2, [sp, #28]
 80213a8:	883a      	ldrh	r2, [r7, #0]
 80213aa:	9206      	str	r2, [sp, #24]
 80213ac:	2201      	movs	r2, #1
 80213ae:	e9cd a204 	strd	sl, r2, [sp, #16]
 80213b2:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80213b6:	9203      	str	r2, [sp, #12]
 80213b8:	b2a4      	uxth	r4, r4
 80213ba:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80213be:	9200      	str	r2, [sp, #0]
 80213c0:	b2ad      	uxth	r5, r5
 80213c2:	9502      	str	r5, [sp, #8]
 80213c4:	9401      	str	r4, [sp, #4]
 80213c6:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80213c8:	4642      	mov	r2, r8
 80213ca:	4649      	mov	r1, r9
 80213cc:	47a0      	blx	r4
 80213ce:	b013      	add	sp, #76	; 0x4c
 80213d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213d4:	6803      	ldr	r3, [r0, #0]
 80213d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80213d8:	4798      	blx	r3
 80213da:	883b      	ldrh	r3, [r7, #0]
 80213dc:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80213e0:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 80213e4:	fb03 1202 	mla	r2, r3, r2, r1
 80213e8:	435d      	muls	r5, r3
 80213ea:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80213ee:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80213f2:	920c      	str	r2, [sp, #48]	; 0x30
 80213f4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 80213f8:	1b12      	subs	r2, r2, r4
 80213fa:	920d      	str	r2, [sp, #52]	; 0x34
 80213fc:	0062      	lsls	r2, r4, #1
 80213fe:	1b1c      	subs	r4, r3, r4
 8021400:	0063      	lsls	r3, r4, #1
 8021402:	920a      	str	r2, [sp, #40]	; 0x28
 8021404:	930b      	str	r3, [sp, #44]	; 0x2c
 8021406:	f04f 0e04 	mov.w	lr, #4
 802140a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802140c:	4298      	cmp	r0, r3
 802140e:	d266      	bcs.n	80214de <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8021410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021412:	eb00 0b03 	add.w	fp, r0, r3
 8021416:	4558      	cmp	r0, fp
 8021418:	d25c      	bcs.n	80214d4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 802141a:	f819 3b01 	ldrb.w	r3, [r9], #1
 802141e:	fb1e e303 	smlabb	r3, lr, r3, lr
 8021422:	f858 2003 	ldr.w	r2, [r8, r3]
 8021426:	0e11      	lsrs	r1, r2, #24
 8021428:	d012      	beq.n	8021450 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 802142a:	29ff      	cmp	r1, #255	; 0xff
 802142c:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8021430:	d110      	bne.n	8021454 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8021432:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021436:	d10d      	bne.n	8021454 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8021438:	0953      	lsrs	r3, r2, #5
 802143a:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 802143e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021442:	f027 0707 	bic.w	r7, r7, #7
 8021446:	431f      	orrs	r7, r3
 8021448:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802144c:	433a      	orrs	r2, r7
 802144e:	8002      	strh	r2, [r0, #0]
 8021450:	3002      	adds	r0, #2
 8021452:	e7e0      	b.n	8021416 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8021454:	fb0a f101 	mul.w	r1, sl, r1
 8021458:	8806      	ldrh	r6, [r0, #0]
 802145a:	1c4b      	adds	r3, r1, #1
 802145c:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8021460:	1235      	asrs	r5, r6, #8
 8021462:	10f4      	asrs	r4, r6, #3
 8021464:	121b      	asrs	r3, r3, #8
 8021466:	00f6      	lsls	r6, r6, #3
 8021468:	b299      	uxth	r1, r3
 802146a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 802146e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021472:	b2f6      	uxtb	r6, r6
 8021474:	43db      	mvns	r3, r3
 8021476:	b2d2      	uxtb	r2, r2
 8021478:	b2db      	uxtb	r3, r3
 802147a:	fb1c fc01 	smulbb	ip, ip, r1
 802147e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8021482:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021486:	fb12 f201 	smulbb	r2, r2, r1
 802148a:	fb05 c503 	mla	r5, r5, r3, ip
 802148e:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8021492:	b2ff      	uxtb	r7, r7
 8021494:	fb06 2203 	mla	r2, r6, r3, r2
 8021498:	b2ad      	uxth	r5, r5
 802149a:	fb17 f701 	smulbb	r7, r7, r1
 802149e:	b292      	uxth	r2, r2
 80214a0:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80214a4:	fb04 7403 	mla	r4, r4, r3, r7
 80214a8:	f105 0c01 	add.w	ip, r5, #1
 80214ac:	1c57      	adds	r7, r2, #1
 80214ae:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80214b2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80214b6:	b2a4      	uxth	r4, r4
 80214b8:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80214bc:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80214c0:	433d      	orrs	r5, r7
 80214c2:	1c67      	adds	r7, r4, #1
 80214c4:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80214c8:	0964      	lsrs	r4, r4, #5
 80214ca:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80214ce:	4325      	orrs	r5, r4
 80214d0:	8005      	strh	r5, [r0, #0]
 80214d2:	e7bd      	b.n	8021450 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80214d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80214d6:	4418      	add	r0, r3
 80214d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80214da:	4499      	add	r9, r3
 80214dc:	e795      	b.n	802140a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80214de:	4b04      	ldr	r3, [pc, #16]	; (80214f0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80214e0:	6818      	ldr	r0, [r3, #0]
 80214e2:	6803      	ldr	r3, [r0, #0]
 80214e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80214e6:	4798      	blx	r3
 80214e8:	e771      	b.n	80213ce <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80214ea:	bf00      	nop
 80214ec:	20008e28 	.word	0x20008e28
 80214f0:	20008e30 	.word	0x20008e30

080214f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80214f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214f8:	b087      	sub	sp, #28
 80214fa:	4680      	mov	r8, r0
 80214fc:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 8021500:	460d      	mov	r5, r1
 8021502:	4614      	mov	r4, r2
 8021504:	2e00      	cmp	r6, #0
 8021506:	f000 80b9 	beq.w	802167c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 802150a:	6810      	ldr	r0, [r2, #0]
 802150c:	6851      	ldr	r1, [r2, #4]
 802150e:	af02      	add	r7, sp, #8
 8021510:	c703      	stmia	r7!, {r0, r1}
 8021512:	6818      	ldr	r0, [r3, #0]
 8021514:	6859      	ldr	r1, [r3, #4]
 8021516:	af04      	add	r7, sp, #16
 8021518:	c703      	stmia	r7!, {r0, r1}
 802151a:	a802      	add	r0, sp, #8
 802151c:	f7f9 fd7c 	bl	801b018 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021520:	4621      	mov	r1, r4
 8021522:	a804      	add	r0, sp, #16
 8021524:	f7f9 fda0 	bl	801b068 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021528:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802152c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021530:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8021534:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8021538:	fb14 2103 	smlabb	r1, r4, r3, r2
 802153c:	eb08 0401 	add.w	r4, r8, r1
 8021540:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8021544:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8021548:	440a      	add	r2, r1
 802154a:	f8ad 2010 	strh.w	r2, [sp, #16]
 802154e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8021552:	4413      	add	r3, r2
 8021554:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021558:	4b4a      	ldr	r3, [pc, #296]	; (8021684 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 802155a:	6818      	ldr	r0, [r3, #0]
 802155c:	6803      	ldr	r3, [r0, #0]
 802155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021560:	4798      	blx	r3
 8021562:	4b49      	ldr	r3, [pc, #292]	; (8021688 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8021564:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8021568:	881a      	ldrh	r2, [r3, #0]
 802156a:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 802156e:	2eff      	cmp	r6, #255	; 0xff
 8021570:	fb02 c101 	mla	r1, r2, r1, ip
 8021574:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8021578:	fb02 f207 	mul.w	r2, r2, r7
 802157c:	f105 0104 	add.w	r1, r5, #4
 8021580:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8021584:	461d      	mov	r5, r3
 8021586:	d05a      	beq.n	802163e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8021588:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 802158c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8021590:	b2b6      	uxth	r6, r6
 8021592:	fa1f fe8e 	uxth.w	lr, lr
 8021596:	9301      	str	r3, [sp, #4]
 8021598:	4282      	cmp	r2, r0
 802159a:	d96a      	bls.n	8021672 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 802159c:	eb00 0b0a 	add.w	fp, r0, sl
 80215a0:	4583      	cmp	fp, r0
 80215a2:	d940      	bls.n	8021626 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 80215a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80215a8:	8805      	ldrh	r5, [r0, #0]
 80215aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80215ae:	122f      	asrs	r7, r5, #8
 80215b0:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80215b4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80215b8:	fb17 f70e 	smulbb	r7, r7, lr
 80215bc:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80215c0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80215c4:	00ed      	lsls	r5, r5, #3
 80215c6:	fb0c 7c06 	mla	ip, ip, r6, r7
 80215ca:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80215ce:	10df      	asrs	r7, r3, #3
 80215d0:	b2ed      	uxtb	r5, r5
 80215d2:	00db      	lsls	r3, r3, #3
 80215d4:	fa1f fc8c 	uxth.w	ip, ip
 80215d8:	fb19 f90e 	smulbb	r9, r9, lr
 80215dc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80215e0:	b2db      	uxtb	r3, r3
 80215e2:	fb15 f50e 	smulbb	r5, r5, lr
 80215e6:	fb07 9706 	mla	r7, r7, r6, r9
 80215ea:	fb03 5306 	mla	r3, r3, r6, r5
 80215ee:	f10c 0901 	add.w	r9, ip, #1
 80215f2:	b29b      	uxth	r3, r3
 80215f4:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 80215f8:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 80215fc:	f103 0c01 	add.w	ip, r3, #1
 8021600:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021604:	b2bf      	uxth	r7, r7
 8021606:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802160a:	ea4c 0c09 	orr.w	ip, ip, r9
 802160e:	f107 0901 	add.w	r9, r7, #1
 8021612:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8021616:	097f      	lsrs	r7, r7, #5
 8021618:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802161c:	ea4c 0c07 	orr.w	ip, ip, r7
 8021620:	f820 cb02 	strh.w	ip, [r0], #2
 8021624:	e7bc      	b.n	80215a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8021626:	9b01      	ldr	r3, [sp, #4]
 8021628:	881b      	ldrh	r3, [r3, #0]
 802162a:	eba3 0308 	sub.w	r3, r3, r8
 802162e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021632:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8021636:	eba3 0308 	sub.w	r3, r3, r8
 802163a:	441c      	add	r4, r3
 802163c:	e7ac      	b.n	8021598 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 802163e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8021642:	4282      	cmp	r2, r0
 8021644:	d915      	bls.n	8021672 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8021646:	eb00 060a 	add.w	r6, r0, sl
 802164a:	4286      	cmp	r6, r0
 802164c:	d906      	bls.n	802165c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 802164e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021652:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8021656:	f820 3b02 	strh.w	r3, [r0], #2
 802165a:	e7f6      	b.n	802164a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 802165c:	882b      	ldrh	r3, [r5, #0]
 802165e:	eba3 0308 	sub.w	r3, r3, r8
 8021662:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021666:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802166a:	eba3 0308 	sub.w	r3, r3, r8
 802166e:	441c      	add	r4, r3
 8021670:	e7e7      	b.n	8021642 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8021672:	4b04      	ldr	r3, [pc, #16]	; (8021684 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8021674:	6818      	ldr	r0, [r3, #0]
 8021676:	6803      	ldr	r3, [r0, #0]
 8021678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802167a:	4798      	blx	r3
 802167c:	b007      	add	sp, #28
 802167e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021682:	bf00      	nop
 8021684:	20008e30 	.word	0x20008e30
 8021688:	20008e28 	.word	0x20008e28

0802168c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 802168c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021690:	b091      	sub	sp, #68	; 0x44
 8021692:	4680      	mov	r8, r0
 8021694:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 8021698:	460f      	mov	r7, r1
 802169a:	4614      	mov	r4, r2
 802169c:	2d00      	cmp	r5, #0
 802169e:	d051      	beq.n	8021744 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80216a0:	6810      	ldr	r0, [r2, #0]
 80216a2:	6851      	ldr	r1, [r2, #4]
 80216a4:	f8df 9200 	ldr.w	r9, [pc, #512]	; 80218a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 80216a8:	ae0c      	add	r6, sp, #48	; 0x30
 80216aa:	c603      	stmia	r6!, {r0, r1}
 80216ac:	6818      	ldr	r0, [r3, #0]
 80216ae:	6859      	ldr	r1, [r3, #4]
 80216b0:	ae0e      	add	r6, sp, #56	; 0x38
 80216b2:	c603      	stmia	r6!, {r0, r1}
 80216b4:	a80c      	add	r0, sp, #48	; 0x30
 80216b6:	f7f9 fcaf 	bl	801b018 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80216ba:	4621      	mov	r1, r4
 80216bc:	a80e      	add	r0, sp, #56	; 0x38
 80216be:	f7f9 fcd3 	bl	801b068 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80216c2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80216c6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80216ca:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80216ce:	f8d9 0000 	ldr.w	r0, [r9]
 80216d2:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 80216d6:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 80216da:	fb11 2103 	smlabb	r1, r1, r3, r2
 80216de:	eb08 0401 	add.w	r4, r8, r1
 80216e2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80216e6:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 80218ac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 80216ea:	440a      	add	r2, r1
 80216ec:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80216f0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80216f4:	4413      	add	r3, r2
 80216f6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80216fa:	6803      	ldr	r3, [r0, #0]
 80216fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80216fe:	4798      	blx	r3
 8021700:	f010 0f80 	tst.w	r0, #128	; 0x80
 8021704:	f8d9 0000 	ldr.w	r0, [r9]
 8021708:	d01f      	beq.n	802174a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 802170a:	2200      	movs	r2, #0
 802170c:	6801      	ldr	r1, [r0, #0]
 802170e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8021712:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8021716:	220b      	movs	r2, #11
 8021718:	9207      	str	r2, [sp, #28]
 802171a:	f8b8 2000 	ldrh.w	r2, [r8]
 802171e:	9206      	str	r2, [sp, #24]
 8021720:	2201      	movs	r2, #1
 8021722:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8021726:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 802172a:	9203      	str	r2, [sp, #12]
 802172c:	fa1f f28a 	uxth.w	r2, sl
 8021730:	9202      	str	r2, [sp, #8]
 8021732:	b2b6      	uxth	r6, r6
 8021734:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8021738:	9200      	str	r2, [sp, #0]
 802173a:	9601      	str	r6, [sp, #4]
 802173c:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 802173e:	463a      	mov	r2, r7
 8021740:	4621      	mov	r1, r4
 8021742:	47a8      	blx	r5
 8021744:	b011      	add	sp, #68	; 0x44
 8021746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802174a:	6803      	ldr	r3, [r0, #0]
 802174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802174e:	4798      	blx	r3
 8021750:	f8b8 2000 	ldrh.w	r2, [r8]
 8021754:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021758:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 802175c:	2dff      	cmp	r5, #255	; 0xff
 802175e:	fb02 1303 	mla	r3, r2, r3, r1
 8021762:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021766:	ea4f 0946 	mov.w	r9, r6, lsl #1
 802176a:	fb0a fa02 	mul.w	sl, sl, r2
 802176e:	d062      	beq.n	8021836 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8021770:	ea6f 0c05 	mvn.w	ip, r5
 8021774:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8021778:	930a      	str	r3, [sp, #40]	; 0x28
 802177a:	b2ad      	uxth	r5, r5
 802177c:	fa5f fc8c 	uxtb.w	ip, ip
 8021780:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8021784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021786:	4298      	cmp	r0, r3
 8021788:	f080 8085 	bcs.w	8021896 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 802178c:	eb00 0b09 	add.w	fp, r0, r9
 8021790:	4558      	cmp	r0, fp
 8021792:	d246      	bcs.n	8021822 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8021794:	f814 eb01 	ldrb.w	lr, [r4], #1
 8021798:	2303      	movs	r3, #3
 802179a:	2204      	movs	r2, #4
 802179c:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 80217a0:	eb07 0a0e 	add.w	sl, r7, lr
 80217a4:	8803      	ldrh	r3, [r0, #0]
 80217a6:	f89a 8002 	ldrb.w	r8, [sl, #2]
 80217aa:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80217ae:	1219      	asrs	r1, r3, #8
 80217b0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80217b4:	fb18 f805 	smulbb	r8, r8, r5
 80217b8:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80217bc:	10da      	asrs	r2, r3, #3
 80217be:	fb01 810c 	mla	r1, r1, ip, r8
 80217c2:	00db      	lsls	r3, r3, #3
 80217c4:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80217c8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80217cc:	b2db      	uxtb	r3, r3
 80217ce:	fb18 f805 	smulbb	r8, r8, r5
 80217d2:	fb1e fe05 	smulbb	lr, lr, r5
 80217d6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80217da:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80217de:	b289      	uxth	r1, r1
 80217e0:	fb02 820c 	mla	r2, r2, ip, r8
 80217e4:	fb03 e30c 	mla	r3, r3, ip, lr
 80217e8:	b292      	uxth	r2, r2
 80217ea:	b29b      	uxth	r3, r3
 80217ec:	f101 0801 	add.w	r8, r1, #1
 80217f0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80217f4:	f103 0e01 	add.w	lr, r3, #1
 80217f8:	f102 0801 	add.w	r8, r2, #1
 80217fc:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8021800:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8021804:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8021808:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 802180c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8021810:	ea4e 0101 	orr.w	r1, lr, r1
 8021814:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8021818:	ea41 0108 	orr.w	r1, r1, r8
 802181c:	f820 1b02 	strh.w	r1, [r0], #2
 8021820:	e7b6      	b.n	8021790 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8021822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021824:	881b      	ldrh	r3, [r3, #0]
 8021826:	1b9b      	subs	r3, r3, r6
 8021828:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802182c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021830:	1b9b      	subs	r3, r3, r6
 8021832:	441c      	add	r4, r3
 8021834:	e7a6      	b.n	8021784 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8021836:	491b      	ldr	r1, [pc, #108]	; (80218a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8021838:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 802183c:	2203      	movs	r2, #3
 802183e:	2504      	movs	r5, #4
 8021840:	4550      	cmp	r0, sl
 8021842:	d228      	bcs.n	8021896 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8021844:	eb00 0c09 	add.w	ip, r0, r9
 8021848:	4560      	cmp	r0, ip
 802184a:	4623      	mov	r3, r4
 802184c:	d219      	bcs.n	8021882 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 802184e:	f893 e000 	ldrb.w	lr, [r3]
 8021852:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8021856:	eb07 0b0e 	add.w	fp, r7, lr
 802185a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802185e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8021862:	f89b b001 	ldrb.w	fp, [fp, #1]
 8021866:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 802186a:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 802186e:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8021872:	ea43 030b 	orr.w	r3, r3, fp
 8021876:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 802187a:	3401      	adds	r4, #1
 802187c:	f820 3b02 	strh.w	r3, [r0], #2
 8021880:	e7e2      	b.n	8021848 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8021882:	f8b8 3000 	ldrh.w	r3, [r8]
 8021886:	1b9b      	subs	r3, r3, r6
 8021888:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802188c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8021890:	1b9b      	subs	r3, r3, r6
 8021892:	441c      	add	r4, r3
 8021894:	e7d4      	b.n	8021840 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8021896:	4b04      	ldr	r3, [pc, #16]	; (80218a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8021898:	6818      	ldr	r0, [r3, #0]
 802189a:	6803      	ldr	r3, [r0, #0]
 802189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802189e:	4798      	blx	r3
 80218a0:	e750      	b.n	8021744 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80218a2:	bf00      	nop
 80218a4:	fffff800 	.word	0xfffff800
 80218a8:	20008e30 	.word	0x20008e30
 80218ac:	20008e28 	.word	0x20008e28

080218b0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80218b0:	b430      	push	{r4, r5}
 80218b2:	780d      	ldrb	r5, [r1, #0]
 80218b4:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80218b8:	2d01      	cmp	r5, #1
 80218ba:	d00a      	beq.n	80218d2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 80218bc:	d305      	bcc.n	80218ca <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 80218be:	2d02      	cmp	r5, #2
 80218c0:	d10b      	bne.n	80218da <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 80218c2:	9402      	str	r4, [sp, #8]
 80218c4:	bc30      	pop	{r4, r5}
 80218c6:	f7ff be15 	b.w	80214f4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80218ca:	9402      	str	r4, [sp, #8]
 80218cc:	bc30      	pop	{r4, r5}
 80218ce:	f7ff bd2b 	b.w	8021328 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80218d2:	9402      	str	r4, [sp, #8]
 80218d4:	bc30      	pop	{r4, r5}
 80218d6:	f7ff bed9 	b.w	802168c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 80218da:	bc30      	pop	{r4, r5}
 80218dc:	4770      	bx	lr
	...

080218e0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 80218e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218e4:	4604      	mov	r4, r0
 80218e6:	b087      	sub	sp, #28
 80218e8:	6810      	ldr	r0, [r2, #0]
 80218ea:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 80218ee:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8021b28 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80218f2:	460e      	mov	r6, r1
 80218f4:	6851      	ldr	r1, [r2, #4]
 80218f6:	ad02      	add	r5, sp, #8
 80218f8:	c503      	stmia	r5!, {r0, r1}
 80218fa:	6818      	ldr	r0, [r3, #0]
 80218fc:	6859      	ldr	r1, [r3, #4]
 80218fe:	ad04      	add	r5, sp, #16
 8021900:	4617      	mov	r7, r2
 8021902:	c503      	stmia	r5!, {r0, r1}
 8021904:	a802      	add	r0, sp, #8
 8021906:	f7f9 fb87 	bl	801b018 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802190a:	4639      	mov	r1, r7
 802190c:	a804      	add	r0, sp, #16
 802190e:	f7f9 fbab 	bl	801b068 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021912:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8021916:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 802191a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 802191e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8021922:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8021926:	fb11 2103 	smlabb	r1, r1, r3, r2
 802192a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 802192e:	440e      	add	r6, r1
 8021930:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8021934:	440a      	add	r2, r1
 8021936:	f8ad 2010 	strh.w	r2, [sp, #16]
 802193a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802193e:	4413      	add	r3, r2
 8021940:	f8ad 3012 	strh.w	r3, [sp, #18]
 8021944:	4b77      	ldr	r3, [pc, #476]	; (8021b24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8021946:	6818      	ldr	r0, [r3, #0]
 8021948:	6803      	ldr	r3, [r0, #0]
 802194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802194c:	4798      	blx	r3
 802194e:	f8b9 b000 	ldrh.w	fp, [r9]
 8021952:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021956:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 802195a:	fb0b 2303 	mla	r3, fp, r3, r2
 802195e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021962:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8021966:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802196a:	fb05 f50b 	mul.w	r5, r5, fp
 802196e:	9300      	str	r3, [sp, #0]
 8021970:	d069      	beq.n	8021a46 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8021972:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8021976:	4558      	cmp	r0, fp
 8021978:	f080 80cc 	bcs.w	8021b14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 802197c:	9b00      	ldr	r3, [sp, #0]
 802197e:	18c3      	adds	r3, r0, r3
 8021980:	9301      	str	r3, [sp, #4]
 8021982:	4631      	mov	r1, r6
 8021984:	9b01      	ldr	r3, [sp, #4]
 8021986:	4298      	cmp	r0, r3
 8021988:	d24f      	bcs.n	8021a2a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 802198a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802198e:	2a00      	cmp	r2, #0
 8021990:	d048      	beq.n	8021a24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8021992:	fb0a f202 	mul.w	r2, sl, r2
 8021996:	1c53      	adds	r3, r2, #1
 8021998:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802199c:	121b      	asrs	r3, r3, #8
 802199e:	d041      	beq.n	8021a24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 80219a0:	8802      	ldrh	r2, [r0, #0]
 80219a2:	f8b4 c000 	ldrh.w	ip, [r4]
 80219a6:	b29e      	uxth	r6, r3
 80219a8:	1215      	asrs	r5, r2, #8
 80219aa:	43db      	mvns	r3, r3
 80219ac:	b2db      	uxtb	r3, r3
 80219ae:	ea4f 272c 	mov.w	r7, ip, asr #8
 80219b2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80219b6:	fb15 f503 	smulbb	r5, r5, r3
 80219ba:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 80219be:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80219c2:	00d2      	lsls	r2, r2, #3
 80219c4:	fb07 5706 	mla	r7, r7, r6, r5
 80219c8:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80219cc:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80219d0:	b2d2      	uxtb	r2, r2
 80219d2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80219d6:	b2bf      	uxth	r7, r7
 80219d8:	fb1e fe03 	smulbb	lr, lr, r3
 80219dc:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80219e0:	fa5f fc8c 	uxtb.w	ip, ip
 80219e4:	fb12 f203 	smulbb	r2, r2, r3
 80219e8:	fb05 e506 	mla	r5, r5, r6, lr
 80219ec:	fb0c 2c06 	mla	ip, ip, r6, r2
 80219f0:	f107 0e01 	add.w	lr, r7, #1
 80219f4:	fa1f fc8c 	uxth.w	ip, ip
 80219f8:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80219fc:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8021a00:	f10c 0701 	add.w	r7, ip, #1
 8021a04:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021a08:	b2ad      	uxth	r5, r5
 8021a0a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8021a0e:	ea47 070e 	orr.w	r7, r7, lr
 8021a12:	f105 0e01 	add.w	lr, r5, #1
 8021a16:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8021a1a:	096d      	lsrs	r5, r5, #5
 8021a1c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8021a20:	432f      	orrs	r7, r5
 8021a22:	8007      	strh	r7, [r0, #0]
 8021a24:	3002      	adds	r0, #2
 8021a26:	3402      	adds	r4, #2
 8021a28:	e7ac      	b.n	8021984 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8021a2a:	f8b9 3000 	ldrh.w	r3, [r9]
 8021a2e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8021a32:	eba3 0308 	sub.w	r3, r3, r8
 8021a36:	eba6 0608 	sub.w	r6, r6, r8
 8021a3a:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8021a3e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021a42:	440e      	add	r6, r1
 8021a44:	e797      	b.n	8021976 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8021a46:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8021a4a:	42a8      	cmp	r0, r5
 8021a4c:	d262      	bcs.n	8021b14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8021a4e:	9b00      	ldr	r3, [sp, #0]
 8021a50:	4631      	mov	r1, r6
 8021a52:	eb00 0b03 	add.w	fp, r0, r3
 8021a56:	4558      	cmp	r0, fp
 8021a58:	d24e      	bcs.n	8021af8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8021a5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021a5e:	b12b      	cbz	r3, 8021a6c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8021a60:	2bff      	cmp	r3, #255	; 0xff
 8021a62:	f8b4 e000 	ldrh.w	lr, [r4]
 8021a66:	d104      	bne.n	8021a72 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8021a68:	f8a0 e000 	strh.w	lr, [r0]
 8021a6c:	3002      	adds	r0, #2
 8021a6e:	3402      	adds	r4, #2
 8021a70:	e7f1      	b.n	8021a56 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8021a72:	8802      	ldrh	r2, [r0, #0]
 8021a74:	b29f      	uxth	r7, r3
 8021a76:	1216      	asrs	r6, r2, #8
 8021a78:	43db      	mvns	r3, r3
 8021a7a:	b2db      	uxtb	r3, r3
 8021a7c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8021a80:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8021a84:	fb16 f603 	smulbb	r6, r6, r3
 8021a88:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8021a8c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8021a90:	00d2      	lsls	r2, r2, #3
 8021a92:	fb0c 6c07 	mla	ip, ip, r7, r6
 8021a96:	b2d2      	uxtb	r2, r2
 8021a98:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8021a9c:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8021aa0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8021aa4:	fb1a fa03 	smulbb	sl, sl, r3
 8021aa8:	fa1f fc8c 	uxth.w	ip, ip
 8021aac:	fb12 f303 	smulbb	r3, r2, r3
 8021ab0:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8021ab4:	fa5f fe8e 	uxtb.w	lr, lr
 8021ab8:	fb06 a607 	mla	r6, r6, r7, sl
 8021abc:	f10c 0201 	add.w	r2, ip, #1
 8021ac0:	fb0e 3307 	mla	r3, lr, r7, r3
 8021ac4:	b2b6      	uxth	r6, r6
 8021ac6:	b29b      	uxth	r3, r3
 8021ac8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8021acc:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8021ad0:	f106 0a01 	add.w	sl, r6, #1
 8021ad4:	f103 0c01 	add.w	ip, r3, #1
 8021ad8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8021adc:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8021ae0:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021ae4:	0976      	lsrs	r6, r6, #5
 8021ae6:	ea4c 0c02 	orr.w	ip, ip, r2
 8021aea:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8021aee:	ea4c 0c06 	orr.w	ip, ip, r6
 8021af2:	f8a0 c000 	strh.w	ip, [r0]
 8021af6:	e7b9      	b.n	8021a6c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8021af8:	f8b9 3000 	ldrh.w	r3, [r9]
 8021afc:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8021b00:	eba3 0308 	sub.w	r3, r3, r8
 8021b04:	eba6 0608 	sub.w	r6, r6, r8
 8021b08:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8021b0c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021b10:	440e      	add	r6, r1
 8021b12:	e79a      	b.n	8021a4a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8021b14:	4b03      	ldr	r3, [pc, #12]	; (8021b24 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8021b16:	6818      	ldr	r0, [r3, #0]
 8021b18:	6803      	ldr	r3, [r0, #0]
 8021b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021b1c:	4798      	blx	r3
 8021b1e:	b007      	add	sp, #28
 8021b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b24:	20008e30 	.word	0x20008e30
 8021b28:	20008e28 	.word	0x20008e28

08021b2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8021b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b30:	b089      	sub	sp, #36	; 0x24
 8021b32:	4682      	mov	sl, r0
 8021b34:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8021b38:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021b3a:	460f      	mov	r7, r1
 8021b3c:	4691      	mov	r9, r2
 8021b3e:	4698      	mov	r8, r3
 8021b40:	2e00      	cmp	r6, #0
 8021b42:	d036      	beq.n	8021bb2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021b44:	4608      	mov	r0, r1
 8021b46:	f7fc f86d 	bl	801dc24 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021b4a:	4605      	mov	r5, r0
 8021b4c:	4638      	mov	r0, r7
 8021b4e:	f7fc f89d 	bl	801dc8c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021b52:	f8ad 000e 	strh.w	r0, [sp, #14]
 8021b56:	4638      	mov	r0, r7
 8021b58:	f8ad 9008 	strh.w	r9, [sp, #8]
 8021b5c:	f8ad 500c 	strh.w	r5, [sp, #12]
 8021b60:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021b64:	f7fc f94a 	bl	801ddfc <_ZNK8touchgfx6Bitmap7getDataEv>
 8021b68:	4605      	mov	r5, r0
 8021b6a:	4638      	mov	r0, r7
 8021b6c:	f7fc f976 	bl	801de5c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8021b70:	4681      	mov	r9, r0
 8021b72:	4638      	mov	r0, r7
 8021b74:	f7fc f9c6 	bl	801df04 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021b78:	280b      	cmp	r0, #11
 8021b7a:	d81a      	bhi.n	8021bb2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021b7c:	e8df f000 	tbb	[pc, r0]
 8021b80:	1906aebd 	.word	0x1906aebd
 8021b84:	19191919 	.word	0x19191919
 8021b88:	b5191919 	.word	0xb5191919
 8021b8c:	4bb0      	ldr	r3, [pc, #704]	; (8021e50 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 8021b8e:	6818      	ldr	r0, [r3, #0]
 8021b90:	6803      	ldr	r3, [r0, #0]
 8021b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021b94:	4798      	blx	r3
 8021b96:	2eff      	cmp	r6, #255	; 0xff
 8021b98:	d121      	bne.n	8021bde <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8021b9a:	0683      	lsls	r3, r0, #26
 8021b9c:	d41f      	bmi.n	8021bde <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8021b9e:	4638      	mov	r0, r7
 8021ba0:	f7fc f8f4 	bl	801dd8c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021ba4:	b940      	cbnz	r0, 8021bb8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8021ba6:	4623      	mov	r3, r4
 8021ba8:	aa02      	add	r2, sp, #8
 8021baa:	4629      	mov	r1, r5
 8021bac:	4650      	mov	r0, sl
 8021bae:	f7ff fa2f 	bl	8021010 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8021bb2:	b009      	add	sp, #36	; 0x24
 8021bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021bb8:	f10d 0818 	add.w	r8, sp, #24
 8021bbc:	4639      	mov	r1, r7
 8021bbe:	4640      	mov	r0, r8
 8021bc0:	f7fc f898 	bl	801dcf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8021bc4:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021bc8:	af04      	add	r7, sp, #16
 8021bca:	e887 0003 	stmia.w	r7, {r0, r1}
 8021bce:	4638      	mov	r0, r7
 8021bd0:	4621      	mov	r1, r4
 8021bd2:	f7f6 fc0d 	bl	80183f0 <_ZN8touchgfx4RectaNERKS0_>
 8021bd6:	4638      	mov	r0, r7
 8021bd8:	f7f6 fc4d 	bl	8018476 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021bdc:	b130      	cbz	r0, 8021bec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8021bde:	4633      	mov	r3, r6
 8021be0:	4622      	mov	r2, r4
 8021be2:	a902      	add	r1, sp, #8
 8021be4:	4628      	mov	r0, r5
 8021be6:	f7ff f92d 	bl	8020e44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021bea:	e7e2      	b.n	8021bb2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021bec:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021bf0:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021bf4:	4293      	cmp	r3, r2
 8021bf6:	dd12      	ble.n	8021c1e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 8021bf8:	1a9b      	subs	r3, r3, r2
 8021bfa:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021bfe:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021c02:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021c06:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021c0a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021c0e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021c12:	4642      	mov	r2, r8
 8021c14:	4633      	mov	r3, r6
 8021c16:	a902      	add	r1, sp, #8
 8021c18:	4628      	mov	r0, r5
 8021c1a:	f7ff f913 	bl	8020e44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021c1e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021c22:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021c26:	4293      	cmp	r3, r2
 8021c28:	dd12      	ble.n	8021c50 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 8021c2a:	1a9b      	subs	r3, r3, r2
 8021c2c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8021c30:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021c34:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021c38:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021c3c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021c40:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021c44:	23ff      	movs	r3, #255	; 0xff
 8021c46:	4642      	mov	r2, r8
 8021c48:	a902      	add	r1, sp, #8
 8021c4a:	4628      	mov	r0, r5
 8021c4c:	f7ff f8fa 	bl	8020e44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021c50:	463b      	mov	r3, r7
 8021c52:	aa02      	add	r2, sp, #8
 8021c54:	4629      	mov	r1, r5
 8021c56:	4650      	mov	r0, sl
 8021c58:	f7ff f9da 	bl	8021010 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8021c5c:	88a2      	ldrh	r2, [r4, #4]
 8021c5e:	8823      	ldrh	r3, [r4, #0]
 8021c60:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021c64:	4413      	add	r3, r2
 8021c66:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021c6a:	440a      	add	r2, r1
 8021c6c:	b29b      	uxth	r3, r3
 8021c6e:	b292      	uxth	r2, r2
 8021c70:	b211      	sxth	r1, r2
 8021c72:	b218      	sxth	r0, r3
 8021c74:	4288      	cmp	r0, r1
 8021c76:	dd12      	ble.n	8021c9e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 8021c78:	1a9b      	subs	r3, r3, r2
 8021c7a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8021c7e:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8021c82:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021c86:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021c8a:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021c8e:	23ff      	movs	r3, #255	; 0xff
 8021c90:	4642      	mov	r2, r8
 8021c92:	a902      	add	r1, sp, #8
 8021c94:	4628      	mov	r0, r5
 8021c96:	f8ad 601a 	strh.w	r6, [sp, #26]
 8021c9a:	f7ff f8d3 	bl	8020e44 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021c9e:	88e2      	ldrh	r2, [r4, #6]
 8021ca0:	8863      	ldrh	r3, [r4, #2]
 8021ca2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021ca6:	4413      	add	r3, r2
 8021ca8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8021cac:	440a      	add	r2, r1
 8021cae:	b29b      	uxth	r3, r3
 8021cb0:	b292      	uxth	r2, r2
 8021cb2:	b211      	sxth	r1, r2
 8021cb4:	b218      	sxth	r0, r3
 8021cb6:	4288      	cmp	r0, r1
 8021cb8:	f77f af7b 	ble.w	8021bb2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021cbc:	1a9b      	subs	r3, r3, r2
 8021cbe:	f9b4 6000 	ldrsh.w	r6, [r4]
 8021cc2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021cc6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021cca:	f8ad 6018 	strh.w	r6, [sp, #24]
 8021cce:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021cd2:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021cd6:	23ff      	movs	r3, #255	; 0xff
 8021cd8:	4642      	mov	r2, r8
 8021cda:	e782      	b.n	8021be2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 8021cdc:	4633      	mov	r3, r6
 8021cde:	4622      	mov	r2, r4
 8021ce0:	a902      	add	r1, sp, #8
 8021ce2:	4628      	mov	r0, r5
 8021ce4:	f7ff fa04 	bl	80210f0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8021ce8:	e763      	b.n	8021bb2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021cea:	9600      	str	r6, [sp, #0]
 8021cec:	4623      	mov	r3, r4
 8021cee:	aa02      	add	r2, sp, #8
 8021cf0:	4649      	mov	r1, r9
 8021cf2:	4628      	mov	r0, r5
 8021cf4:	f7ff fddc 	bl	80218b0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8021cf8:	e75b      	b.n	8021bb2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021cfa:	4638      	mov	r0, r7
 8021cfc:	f7fc f846 	bl	801dd8c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021d00:	b950      	cbnz	r0, 8021d18 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 8021d02:	e9cd 6000 	strd	r6, r0, [sp]
 8021d06:	f8da 3000 	ldr.w	r3, [sl]
 8021d0a:	aa02      	add	r2, sp, #8
 8021d0c:	68de      	ldr	r6, [r3, #12]
 8021d0e:	4629      	mov	r1, r5
 8021d10:	4623      	mov	r3, r4
 8021d12:	4650      	mov	r0, sl
 8021d14:	47b0      	blx	r6
 8021d16:	e74c      	b.n	8021bb2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021d18:	f10d 0818 	add.w	r8, sp, #24
 8021d1c:	4639      	mov	r1, r7
 8021d1e:	4640      	mov	r0, r8
 8021d20:	f7fb ffe8 	bl	801dcf4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8021d24:	e898 0003 	ldmia.w	r8, {r0, r1}
 8021d28:	af04      	add	r7, sp, #16
 8021d2a:	e887 0003 	stmia.w	r7, {r0, r1}
 8021d2e:	4638      	mov	r0, r7
 8021d30:	4621      	mov	r1, r4
 8021d32:	f7f6 fb5d 	bl	80183f0 <_ZN8touchgfx4RectaNERKS0_>
 8021d36:	4638      	mov	r0, r7
 8021d38:	f7f6 fb9d 	bl	8018476 <_ZNK8touchgfx4Rect7isEmptyEv>
 8021d3c:	b138      	cbz	r0, 8021d4e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 8021d3e:	9600      	str	r6, [sp, #0]
 8021d40:	4623      	mov	r3, r4
 8021d42:	aa02      	add	r2, sp, #8
 8021d44:	4649      	mov	r1, r9
 8021d46:	4628      	mov	r0, r5
 8021d48:	f7ff fdca 	bl	80218e0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021d4c:	e731      	b.n	8021bb2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021d4e:	e9cd 6000 	strd	r6, r0, [sp]
 8021d52:	f8da 3000 	ldr.w	r3, [sl]
 8021d56:	aa02      	add	r2, sp, #8
 8021d58:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8021d5c:	4629      	mov	r1, r5
 8021d5e:	463b      	mov	r3, r7
 8021d60:	4650      	mov	r0, sl
 8021d62:	47d8      	blx	fp
 8021d64:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021d68:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021d6c:	4293      	cmp	r3, r2
 8021d6e:	dd13      	ble.n	8021d98 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 8021d70:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021d74:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021d78:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021d7c:	1a9b      	subs	r3, r3, r2
 8021d7e:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021d82:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021d86:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021d8a:	9600      	str	r6, [sp, #0]
 8021d8c:	4643      	mov	r3, r8
 8021d8e:	aa02      	add	r2, sp, #8
 8021d90:	4649      	mov	r1, r9
 8021d92:	4628      	mov	r0, r5
 8021d94:	f7ff fda4 	bl	80218e0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021d98:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021d9c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021da0:	4293      	cmp	r3, r2
 8021da2:	dd13      	ble.n	8021dcc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 8021da4:	1a9b      	subs	r3, r3, r2
 8021da6:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8021daa:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021dae:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021db2:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021db6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021dba:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021dbe:	9600      	str	r6, [sp, #0]
 8021dc0:	4643      	mov	r3, r8
 8021dc2:	aa02      	add	r2, sp, #8
 8021dc4:	4649      	mov	r1, r9
 8021dc6:	4628      	mov	r0, r5
 8021dc8:	f7ff fd8a 	bl	80218e0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021dcc:	88a2      	ldrh	r2, [r4, #4]
 8021dce:	8823      	ldrh	r3, [r4, #0]
 8021dd0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021dd4:	4413      	add	r3, r2
 8021dd6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021dda:	440a      	add	r2, r1
 8021ddc:	b29b      	uxth	r3, r3
 8021dde:	b292      	uxth	r2, r2
 8021de0:	b211      	sxth	r1, r2
 8021de2:	b218      	sxth	r0, r3
 8021de4:	4288      	cmp	r0, r1
 8021de6:	dd13      	ble.n	8021e10 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 8021de8:	1a9b      	subs	r3, r3, r2
 8021dea:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8021dee:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8021df2:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021df6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021dfa:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021dfe:	9600      	str	r6, [sp, #0]
 8021e00:	4643      	mov	r3, r8
 8021e02:	aa02      	add	r2, sp, #8
 8021e04:	4649      	mov	r1, r9
 8021e06:	4628      	mov	r0, r5
 8021e08:	f8ad 701a 	strh.w	r7, [sp, #26]
 8021e0c:	f7ff fd68 	bl	80218e0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021e10:	88e2      	ldrh	r2, [r4, #6]
 8021e12:	8863      	ldrh	r3, [r4, #2]
 8021e14:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021e18:	4413      	add	r3, r2
 8021e1a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8021e1e:	440a      	add	r2, r1
 8021e20:	b29b      	uxth	r3, r3
 8021e22:	b292      	uxth	r2, r2
 8021e24:	b211      	sxth	r1, r2
 8021e26:	b218      	sxth	r0, r3
 8021e28:	4288      	cmp	r0, r1
 8021e2a:	f77f aec2 	ble.w	8021bb2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8021e2e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8021e32:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021e36:	f8ad 7018 	strh.w	r7, [sp, #24]
 8021e3a:	1a9b      	subs	r3, r3, r2
 8021e3c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021e40:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021e44:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021e48:	9600      	str	r6, [sp, #0]
 8021e4a:	4643      	mov	r3, r8
 8021e4c:	e779      	b.n	8021d42 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 8021e4e:	bf00      	nop
 8021e50:	20008e30 	.word	0x20008e30

08021e54 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8021e54:	b180      	cbz	r0, 8021e78 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8021e56:	2903      	cmp	r1, #3
 8021e58:	d81c      	bhi.n	8021e94 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8021e5a:	e8df f001 	tbb	[pc, r1]
 8021e5e:	1d02      	.short	0x1d02
 8021e60:	1f08      	.short	0x1f08
 8021e62:	4b10      	ldr	r3, [pc, #64]	; (8021ea4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8021e64:	8818      	ldrh	r0, [r3, #0]
 8021e66:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021e6a:	4240      	negs	r0, r0
 8021e6c:	4770      	bx	lr
 8021e6e:	4b0d      	ldr	r3, [pc, #52]	; (8021ea4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8021e70:	8818      	ldrh	r0, [r3, #0]
 8021e72:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021e76:	4770      	bx	lr
 8021e78:	2903      	cmp	r1, #3
 8021e7a:	d80b      	bhi.n	8021e94 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8021e7c:	a301      	add	r3, pc, #4	; (adr r3, 8021e84 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8021e7e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8021e82:	bf00      	nop
 8021e84:	08021e99 	.word	0x08021e99
 8021e88:	08021e6f 	.word	0x08021e6f
 8021e8c:	08021e9d 	.word	0x08021e9d
 8021e90:	08021e63 	.word	0x08021e63
 8021e94:	2000      	movs	r0, #0
 8021e96:	4770      	bx	lr
 8021e98:	2001      	movs	r0, #1
 8021e9a:	4770      	bx	lr
 8021e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8021ea0:	4770      	bx	lr
 8021ea2:	bf00      	nop
 8021ea4:	20008e28 	.word	0x20008e28

08021ea8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8021ea8:	b180      	cbz	r0, 8021ecc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8021eaa:	2903      	cmp	r1, #3
 8021eac:	d81c      	bhi.n	8021ee8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8021eae:	e8df f001 	tbb	[pc, r1]
 8021eb2:	021d      	.short	0x021d
 8021eb4:	071f      	.short	0x071f
 8021eb6:	4b10      	ldr	r3, [pc, #64]	; (8021ef8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8021eb8:	8818      	ldrh	r0, [r3, #0]
 8021eba:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021ebe:	4770      	bx	lr
 8021ec0:	4b0d      	ldr	r3, [pc, #52]	; (8021ef8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8021ec2:	8818      	ldrh	r0, [r3, #0]
 8021ec4:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8021ec8:	4240      	negs	r0, r0
 8021eca:	4770      	bx	lr
 8021ecc:	2903      	cmp	r1, #3
 8021ece:	d80b      	bhi.n	8021ee8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8021ed0:	a301      	add	r3, pc, #4	; (adr r3, 8021ed8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8021ed2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8021ed6:	bf00      	nop
 8021ed8:	08021eb7 	.word	0x08021eb7
 8021edc:	08021ef1 	.word	0x08021ef1
 8021ee0:	08021ec1 	.word	0x08021ec1
 8021ee4:	08021eed 	.word	0x08021eed
 8021ee8:	2000      	movs	r0, #0
 8021eea:	4770      	bx	lr
 8021eec:	2001      	movs	r0, #1
 8021eee:	4770      	bx	lr
 8021ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8021ef4:	4770      	bx	lr
 8021ef6:	bf00      	nop
 8021ef8:	20008e28 	.word	0x20008e28

08021efc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8021efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f00:	b099      	sub	sp, #100	; 0x64
 8021f02:	910b      	str	r1, [sp, #44]	; 0x2c
 8021f04:	a914      	add	r1, sp, #80	; 0x50
 8021f06:	e881 000c 	stmia.w	r1, {r2, r3}
 8021f0a:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8021f0e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8021f12:	f891 900d 	ldrb.w	r9, [r1, #13]
 8021f16:	9309      	str	r3, [sp, #36]	; 0x24
 8021f18:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8021f1c:	9310      	str	r3, [sp, #64]	; 0x40
 8021f1e:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8021f22:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 8021f26:	930c      	str	r3, [sp, #48]	; 0x30
 8021f28:	f407 7380 	and.w	r3, r7, #256	; 0x100
 8021f2c:	798f      	ldrb	r7, [r1, #6]
 8021f2e:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 8021f32:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 8021f36:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 8021f3a:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 8021f3e:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 8021f42:	431f      	orrs	r7, r3
 8021f44:	f000 8195 	beq.w	8022272 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8021f48:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8021f4c:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8021f50:	f891 9007 	ldrb.w	r9, [r1, #7]
 8021f54:	ea59 0903 	orrs.w	r9, r9, r3
 8021f58:	f000 818b 	beq.w	8022272 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8021f5c:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8021f60:	b29b      	uxth	r3, r3
 8021f62:	2d00      	cmp	r5, #0
 8021f64:	f000 812e 	beq.w	80221c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 8021f68:	1aed      	subs	r5, r5, r3
 8021f6a:	b2ad      	uxth	r5, r5
 8021f6c:	042b      	lsls	r3, r5, #16
 8021f6e:	d502      	bpl.n	8021f76 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8021f70:	1b64      	subs	r4, r4, r5
 8021f72:	b224      	sxth	r4, r4
 8021f74:	2500      	movs	r5, #0
 8021f76:	f9b2 1000 	ldrsh.w	r1, [r2]
 8021f7a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8021f7e:	428c      	cmp	r4, r1
 8021f80:	b28b      	uxth	r3, r1
 8021f82:	bfbf      	itttt	lt
 8021f84:	18ed      	addlt	r5, r5, r3
 8021f86:	1b2c      	sublt	r4, r5, r4
 8021f88:	b2a5      	uxthlt	r5, r4
 8021f8a:	460c      	movlt	r4, r1
 8021f8c:	8891      	ldrh	r1, [r2, #4]
 8021f8e:	440b      	add	r3, r1
 8021f90:	b21b      	sxth	r3, r3
 8021f92:	930f      	str	r3, [sp, #60]	; 0x3c
 8021f94:	88d3      	ldrh	r3, [r2, #6]
 8021f96:	8852      	ldrh	r2, [r2, #2]
 8021f98:	4413      	add	r3, r2
 8021f9a:	b21b      	sxth	r3, r3
 8021f9c:	930d      	str	r3, [sp, #52]	; 0x34
 8021f9e:	4bbe      	ldr	r3, [pc, #760]	; (8022298 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 8021fa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021fa2:	f893 b000 	ldrb.w	fp, [r3]
 8021fa6:	f10b 3cff 	add.w	ip, fp, #4294967295
 8021faa:	f1dc 0300 	rsbs	r3, ip, #0
 8021fae:	eb43 030c 	adc.w	r3, r3, ip
 8021fb2:	930e      	str	r3, [sp, #56]	; 0x38
 8021fb4:	4621      	mov	r1, r4
 8021fb6:	4653      	mov	r3, sl
 8021fb8:	a814      	add	r0, sp, #80	; 0x50
 8021fba:	f7f8 fea8 	bl	801ad0e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8021fbe:	4621      	mov	r1, r4
 8021fc0:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8021fc4:	4653      	mov	r3, sl
 8021fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021fc8:	a814      	add	r0, sp, #80	; 0x50
 8021fca:	f7f8 febd 	bl	801ad48 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8021fce:	a918      	add	r1, sp, #96	; 0x60
 8021fd0:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8021fd4:	a817      	add	r0, sp, #92	; 0x5c
 8021fd6:	f7f8 ffdd 	bl	801af94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8021fda:	f1ba 0f00 	cmp.w	sl, #0
 8021fde:	f040 80f4 	bne.w	80221ca <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8021fe2:	f1bb 0f01 	cmp.w	fp, #1
 8021fe6:	f040 80f8 	bne.w	80221da <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8021fea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021fec:	2b00      	cmp	r3, #0
 8021fee:	f040 8145 	bne.w	802227c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8021ff2:	b2ba      	uxth	r2, r7
 8021ff4:	b905      	cbnz	r5, 8021ff8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 8021ff6:	b16e      	cbz	r6, 8022014 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 8021ff8:	fb06 5302 	mla	r3, r6, r2, r5
 8021ffc:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8021ffe:	fb08 f303 	mul.w	r3, r8, r3
 8022002:	4631      	mov	r1, r6
 8022004:	f003 0607 	and.w	r6, r3, #7
 8022008:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 802200c:	9328      	str	r3, [sp, #160]	; 0xa0
 802200e:	eba9 0301 	sub.w	r3, r9, r1
 8022012:	930a      	str	r3, [sp, #40]	; 0x28
 8022014:	4651      	mov	r1, sl
 8022016:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022018:	f7ff ff1c 	bl	8021e54 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 802201c:	4681      	mov	r9, r0
 802201e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022020:	f7ff ff42 	bl	8021ea8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 8022024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022026:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022028:	eba3 0a01 	sub.w	sl, r3, r1
 802202c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802202e:	459a      	cmp	sl, r3
 8022030:	bfa8      	it	ge
 8022032:	469a      	movge	sl, r3
 8022034:	f1ba 0f00 	cmp.w	sl, #0
 8022038:	4683      	mov	fp, r0
 802203a:	f340 811a 	ble.w	8022272 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 802203e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022040:	1b64      	subs	r4, r4, r5
 8022042:	1b1c      	subs	r4, r3, r4
 8022044:	42bc      	cmp	r4, r7
 8022046:	bfd4      	ite	le
 8022048:	ebc5 0504 	rsble	r5, r5, r4
 802204c:	ebc5 0507 	rsbgt	r5, r5, r7
 8022050:	2d00      	cmp	r5, #0
 8022052:	f340 810e 	ble.w	8022272 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8022056:	1b52      	subs	r2, r2, r5
 8022058:	fb08 f302 	mul.w	r3, r8, r2
 802205c:	930f      	str	r3, [sp, #60]	; 0x3c
 802205e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022060:	2b00      	cmp	r3, #0
 8022062:	f040 8116 	bne.w	8022292 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8022066:	4b8d      	ldr	r3, [pc, #564]	; (802229c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8022068:	6818      	ldr	r0, [r3, #0]
 802206a:	6803      	ldr	r3, [r0, #0]
 802206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802206e:	4798      	blx	r3
 8022070:	2301      	movs	r3, #1
 8022072:	fa03 f308 	lsl.w	r3, r3, r8
 8022076:	4a8a      	ldr	r2, [pc, #552]	; (80222a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8022078:	3b01      	subs	r3, #1
 802207a:	b2db      	uxtb	r3, r3
 802207c:	8811      	ldrh	r1, [r2, #0]
 802207e:	930e      	str	r3, [sp, #56]	; 0x38
 8022080:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 8022084:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8022088:	fb01 2303 	mla	r3, r1, r3, r2
 802208c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022090:	930a      	str	r3, [sp, #40]	; 0x28
 8022092:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022094:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8022098:	9313      	str	r3, [sp, #76]	; 0x4c
 802209a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 802209c:	0a19      	lsrs	r1, r3, #8
 802209e:	b2cb      	uxtb	r3, r1
 80220a0:	9312      	str	r3, [sp, #72]	; 0x48
 80220a2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80220a4:	b2db      	uxtb	r3, r3
 80220a6:	9311      	str	r3, [sp, #68]	; 0x44
 80220a8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80220aa:	095a      	lsrs	r2, r3, #5
 80220ac:	4b7d      	ldr	r3, [pc, #500]	; (80222a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 80220ae:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80220b2:	400b      	ands	r3, r1
 80220b4:	4313      	orrs	r3, r2
 80220b6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80220b8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80220bc:	4313      	orrs	r3, r2
 80220be:	b29b      	uxth	r3, r3
 80220c0:	9310      	str	r3, [sp, #64]	; 0x40
 80220c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80220c4:	781a      	ldrb	r2, [r3, #0]
 80220c6:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80220ca:	4132      	asrs	r2, r6
 80220cc:	fb05 b919 	mls	r9, r5, r9, fp
 80220d0:	fb03 fb05 	mul.w	fp, r3, r5
 80220d4:	b2d2      	uxtb	r2, r2
 80220d6:	930d      	str	r3, [sp, #52]	; 0x34
 80220d8:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 80220dc:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80220e0:	f0c0 80f5 	bcc.w	80222ce <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 80220e4:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80220e8:	46ae      	mov	lr, r5
 80220ea:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80220ee:	f0c0 80dd 	bcc.w	80222ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 80220f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80220f4:	4013      	ands	r3, r2
 80220f6:	d055      	beq.n	80221a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 80220f8:	20ff      	movs	r0, #255	; 0xff
 80220fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80220fc:	fb90 f1f1 	sdiv	r1, r0, r1
 8022100:	434b      	muls	r3, r1
 8022102:	2bfe      	cmp	r3, #254	; 0xfe
 8022104:	dd03      	ble.n	802210e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 8022106:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022108:	4281      	cmp	r1, r0
 802210a:	f000 80cd 	beq.w	80222a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 802210e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022110:	f8bc 4000 	ldrh.w	r4, [ip]
 8022114:	fb11 f303 	smulbb	r3, r1, r3
 8022118:	b29b      	uxth	r3, r3
 802211a:	1c59      	adds	r1, r3, #1
 802211c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022120:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022124:	b29f      	uxth	r7, r3
 8022126:	43db      	mvns	r3, r3
 8022128:	b2db      	uxtb	r3, r3
 802212a:	9309      	str	r3, [sp, #36]	; 0x24
 802212c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802212e:	1220      	asrs	r0, r4, #8
 8022130:	fb13 f907 	smulbb	r9, r3, r7
 8022134:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802213a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 802213e:	fb00 9003 	mla	r0, r0, r3, r9
 8022142:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022144:	10e1      	asrs	r1, r4, #3
 8022146:	fb13 f907 	smulbb	r9, r3, r7
 802214a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 802214e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022150:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8022154:	fb01 9103 	mla	r1, r1, r3, r9
 8022158:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802215a:	00e4      	lsls	r4, r4, #3
 802215c:	fb13 f707 	smulbb	r7, r3, r7
 8022160:	b2e4      	uxtb	r4, r4
 8022162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022164:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8022168:	fb04 7403 	mla	r4, r4, r3, r7
 802216c:	b280      	uxth	r0, r0
 802216e:	b2a4      	uxth	r4, r4
 8022170:	1c43      	adds	r3, r0, #1
 8022172:	f104 0901 	add.w	r9, r4, #1
 8022176:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802217a:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 802217e:	b289      	uxth	r1, r1
 8022180:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8022184:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022188:	ea49 0000 	orr.w	r0, r9, r0
 802218c:	f101 0901 	add.w	r9, r1, #1
 8022190:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8022194:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8022198:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802219c:	ea40 0009 	orr.w	r0, r0, r9
 80221a0:	f8ac 0000 	strh.w	r0, [ip]
 80221a4:	4446      	add	r6, r8
 80221a6:	b2b6      	uxth	r6, r6
 80221a8:	2e07      	cmp	r6, #7
 80221aa:	bf81      	itttt	hi
 80221ac:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 80221ae:	785a      	ldrbhi	r2, [r3, #1]
 80221b0:	3301      	addhi	r3, #1
 80221b2:	9328      	strhi	r3, [sp, #160]	; 0xa0
 80221b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80221b6:	bf9a      	itte	ls
 80221b8:	fa42 f208 	asrls.w	r2, r2, r8
 80221bc:	b2d2      	uxtbls	r2, r2
 80221be:	2600      	movhi	r6, #0
 80221c0:	449c      	add	ip, r3
 80221c2:	e792      	b.n	80220ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 80221c4:	441c      	add	r4, r3
 80221c6:	b224      	sxth	r4, r4
 80221c8:	e6d5      	b.n	8021f76 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 80221ca:	f1ba 0f01 	cmp.w	sl, #1
 80221ce:	f47f af0c 	bne.w	8021fea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80221d2:	f1bb 0f01 	cmp.w	fp, #1
 80221d6:	f47f af08 	bne.w	8021fea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80221da:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 802229c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 80221de:	f8db 0000 	ldr.w	r0, [fp]
 80221e2:	6803      	ldr	r3, [r0, #0]
 80221e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80221e6:	4798      	blx	r3
 80221e8:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80221ec:	465a      	mov	r2, fp
 80221ee:	d006      	beq.n	80221fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 80221f0:	f1b8 0f04 	cmp.w	r8, #4
 80221f4:	d140      	bne.n	8022278 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 80221f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80221f8:	3300      	adds	r3, #0
 80221fa:	bf18      	it	ne
 80221fc:	2301      	movne	r3, #1
 80221fe:	0580      	lsls	r0, r0, #22
 8022200:	d56e      	bpl.n	80222e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8022202:	f1b8 0f08 	cmp.w	r8, #8
 8022206:	d16b      	bne.n	80222e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8022208:	2b00      	cmp	r3, #0
 802220a:	bf0c      	ite	eq
 802220c:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8022210:	f44f 7180 	movne.w	r1, #256	; 0x100
 8022214:	2d00      	cmp	r5, #0
 8022216:	f47f aee8 	bne.w	8021fea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802221a:	2e00      	cmp	r6, #0
 802221c:	f47f aee5 	bne.w	8021fea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8022220:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022222:	19e3      	adds	r3, r4, r7
 8022224:	4283      	cmp	r3, r0
 8022226:	f73f aee0 	bgt.w	8021fea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802222a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802222c:	980d      	ldr	r0, [sp, #52]	; 0x34
 802222e:	444b      	add	r3, r9
 8022230:	4283      	cmp	r3, r0
 8022232:	f73f aeda 	bgt.w	8021fea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8022236:	6810      	ldr	r0, [r2, #0]
 8022238:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 802223c:	6804      	ldr	r4, [r0, #0]
 802223e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8022242:	b2bf      	uxth	r7, r7
 8022244:	f1b8 0f08 	cmp.w	r8, #8
 8022248:	f04f 0500 	mov.w	r5, #0
 802224c:	bf18      	it	ne
 802224e:	3701      	addne	r7, #1
 8022250:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8022254:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022256:	9104      	str	r1, [sp, #16]
 8022258:	bf18      	it	ne
 802225a:	f027 0701 	bicne.w	r7, r7, #1
 802225e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8022260:	bf18      	it	ne
 8022262:	b2bf      	uxthne	r7, r7
 8022264:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8022268:	e9cd 7900 	strd	r7, r9, [sp]
 802226c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802226e:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8022270:	47a0      	blx	r4
 8022272:	b019      	add	sp, #100	; 0x64
 8022274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022278:	2300      	movs	r3, #0
 802227a:	e7c0      	b.n	80221fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 802227c:	2208      	movs	r2, #8
 802227e:	fb92 f3f8 	sdiv	r3, r2, r8
 8022282:	1e5a      	subs	r2, r3, #1
 8022284:	443a      	add	r2, r7
 8022286:	fb92 f2f3 	sdiv	r2, r2, r3
 802228a:	fb12 f203 	smulbb	r2, r2, r3
 802228e:	b292      	uxth	r2, r2
 8022290:	e6b0      	b.n	8021ff4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8022292:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8022294:	e6ec      	b.n	8022070 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 8022296:	bf00      	nop
 8022298:	20008e26 	.word	0x20008e26
 802229c:	20008e30 	.word	0x20008e30
 80222a0:	20008e28 	.word	0x20008e28
 80222a4:	00fff800 	.word	0x00fff800
 80222a8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80222aa:	e779      	b.n	80221a0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 80222ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80222ae:	b153      	cbz	r3, 80222c6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 80222b0:	441e      	add	r6, r3
 80222b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80222b4:	b2b6      	uxth	r6, r6
 80222b6:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 80222ba:	f006 0607 	and.w	r6, r6, #7
 80222be:	781a      	ldrb	r2, [r3, #0]
 80222c0:	9328      	str	r3, [sp, #160]	; 0xa0
 80222c2:	4132      	asrs	r2, r6
 80222c4:	b2d2      	uxtb	r2, r2
 80222c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80222c8:	445b      	add	r3, fp
 80222ca:	930a      	str	r3, [sp, #40]	; 0x28
 80222cc:	e706      	b.n	80220dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 80222ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80222d0:	2b00      	cmp	r3, #0
 80222d2:	d1ce      	bne.n	8022272 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80222d4:	4b05      	ldr	r3, [pc, #20]	; (80222ec <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 80222d6:	6818      	ldr	r0, [r3, #0]
 80222d8:	6803      	ldr	r3, [r0, #0]
 80222da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80222dc:	4798      	blx	r3
 80222de:	e7c8      	b.n	8022272 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80222e0:	2b00      	cmp	r3, #0
 80222e2:	f43f ae82 	beq.w	8021fea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80222e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80222ea:	e793      	b.n	8022214 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 80222ec:	20008e30 	.word	0x20008e30

080222f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 80222f0:	b538      	push	{r3, r4, r5, lr}
 80222f2:	4c15      	ldr	r4, [pc, #84]	; (8022348 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80222f4:	7823      	ldrb	r3, [r4, #0]
 80222f6:	f3bf 8f5b 	dmb	ish
 80222fa:	07da      	lsls	r2, r3, #31
 80222fc:	4605      	mov	r5, r0
 80222fe:	d40b      	bmi.n	8022318 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8022300:	4620      	mov	r0, r4
 8022302:	f007 fa60 	bl	80297c6 <__cxa_guard_acquire>
 8022306:	b138      	cbz	r0, 8022318 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8022308:	4620      	mov	r0, r4
 802230a:	f007 fa68 	bl	80297de <__cxa_guard_release>
 802230e:	4a0f      	ldr	r2, [pc, #60]	; (802234c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022310:	490f      	ldr	r1, [pc, #60]	; (8022350 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8022312:	4810      	ldr	r0, [pc, #64]	; (8022354 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8022314:	f007 fa50 	bl	80297b8 <__aeabi_atexit>
 8022318:	4c0f      	ldr	r4, [pc, #60]	; (8022358 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 802231a:	7823      	ldrb	r3, [r4, #0]
 802231c:	f3bf 8f5b 	dmb	ish
 8022320:	07db      	lsls	r3, r3, #31
 8022322:	d40b      	bmi.n	802233c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8022324:	4620      	mov	r0, r4
 8022326:	f007 fa4e 	bl	80297c6 <__cxa_guard_acquire>
 802232a:	b138      	cbz	r0, 802233c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 802232c:	4620      	mov	r0, r4
 802232e:	f007 fa56 	bl	80297de <__cxa_guard_release>
 8022332:	4a06      	ldr	r2, [pc, #24]	; (802234c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022334:	4909      	ldr	r1, [pc, #36]	; (802235c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8022336:	480a      	ldr	r0, [pc, #40]	; (8022360 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8022338:	f007 fa3e 	bl	80297b8 <__aeabi_atexit>
 802233c:	4b05      	ldr	r3, [pc, #20]	; (8022354 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 802233e:	612b      	str	r3, [r5, #16]
 8022340:	4b07      	ldr	r3, [pc, #28]	; (8022360 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8022342:	616b      	str	r3, [r5, #20]
 8022344:	bd38      	pop	{r3, r4, r5, pc}
 8022346:	bf00      	nop
 8022348:	20008efc 	.word	0x20008efc
 802234c:	20000000 	.word	0x20000000
 8022350:	08020513 	.word	0x08020513
 8022354:	20000064 	.word	0x20000064
 8022358:	20008f00 	.word	0x20008f00
 802235c:	08020511 	.word	0x08020511
 8022360:	20000068 	.word	0x20000068

08022364 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8022364:	b538      	push	{r3, r4, r5, lr}
 8022366:	4c15      	ldr	r4, [pc, #84]	; (80223bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8022368:	7823      	ldrb	r3, [r4, #0]
 802236a:	f3bf 8f5b 	dmb	ish
 802236e:	07da      	lsls	r2, r3, #31
 8022370:	4605      	mov	r5, r0
 8022372:	d40b      	bmi.n	802238c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8022374:	4620      	mov	r0, r4
 8022376:	f007 fa26 	bl	80297c6 <__cxa_guard_acquire>
 802237a:	b138      	cbz	r0, 802238c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 802237c:	4620      	mov	r0, r4
 802237e:	f007 fa2e 	bl	80297de <__cxa_guard_release>
 8022382:	4a0f      	ldr	r2, [pc, #60]	; (80223c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8022384:	490f      	ldr	r1, [pc, #60]	; (80223c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8022386:	4810      	ldr	r0, [pc, #64]	; (80223c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8022388:	f007 fa16 	bl	80297b8 <__aeabi_atexit>
 802238c:	4c0f      	ldr	r4, [pc, #60]	; (80223cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 802238e:	7823      	ldrb	r3, [r4, #0]
 8022390:	f3bf 8f5b 	dmb	ish
 8022394:	07db      	lsls	r3, r3, #31
 8022396:	d40b      	bmi.n	80223b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8022398:	4620      	mov	r0, r4
 802239a:	f007 fa14 	bl	80297c6 <__cxa_guard_acquire>
 802239e:	b138      	cbz	r0, 80223b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80223a0:	4620      	mov	r0, r4
 80223a2:	f007 fa1c 	bl	80297de <__cxa_guard_release>
 80223a6:	4a06      	ldr	r2, [pc, #24]	; (80223c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80223a8:	4909      	ldr	r1, [pc, #36]	; (80223d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 80223aa:	480a      	ldr	r0, [pc, #40]	; (80223d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80223ac:	f007 fa04 	bl	80297b8 <__aeabi_atexit>
 80223b0:	4b05      	ldr	r3, [pc, #20]	; (80223c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80223b2:	60ab      	str	r3, [r5, #8]
 80223b4:	4b07      	ldr	r3, [pc, #28]	; (80223d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80223b6:	60eb      	str	r3, [r5, #12]
 80223b8:	bd38      	pop	{r3, r4, r5, pc}
 80223ba:	bf00      	nop
 80223bc:	20008ed4 	.word	0x20008ed4
 80223c0:	20000000 	.word	0x20000000
 80223c4:	08020517 	.word	0x08020517
 80223c8:	2000003c 	.word	0x2000003c
 80223cc:	20008ed8 	.word	0x20008ed8
 80223d0:	08020515 	.word	0x08020515
 80223d4:	20000040 	.word	0x20000040

080223d8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 80223d8:	b510      	push	{r4, lr}
 80223da:	4604      	mov	r4, r0
 80223dc:	f7ff ff88 	bl	80222f0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 80223e0:	4620      	mov	r0, r4
 80223e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80223e6:	f7ff bfbd 	b.w	8022364 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

080223ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80223ec:	b538      	push	{r3, r4, r5, lr}
 80223ee:	4c15      	ldr	r4, [pc, #84]	; (8022444 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80223f0:	7823      	ldrb	r3, [r4, #0]
 80223f2:	f3bf 8f5b 	dmb	ish
 80223f6:	07da      	lsls	r2, r3, #31
 80223f8:	4605      	mov	r5, r0
 80223fa:	d40b      	bmi.n	8022414 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80223fc:	4620      	mov	r0, r4
 80223fe:	f007 f9e2 	bl	80297c6 <__cxa_guard_acquire>
 8022402:	b138      	cbz	r0, 8022414 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8022404:	4620      	mov	r0, r4
 8022406:	f007 f9ea 	bl	80297de <__cxa_guard_release>
 802240a:	4a0f      	ldr	r2, [pc, #60]	; (8022448 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802240c:	490f      	ldr	r1, [pc, #60]	; (802244c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802240e:	4810      	ldr	r0, [pc, #64]	; (8022450 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8022410:	f007 f9d2 	bl	80297b8 <__aeabi_atexit>
 8022414:	4c0f      	ldr	r4, [pc, #60]	; (8022454 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8022416:	7823      	ldrb	r3, [r4, #0]
 8022418:	f3bf 8f5b 	dmb	ish
 802241c:	07db      	lsls	r3, r3, #31
 802241e:	d40b      	bmi.n	8022438 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022420:	4620      	mov	r0, r4
 8022422:	f007 f9d0 	bl	80297c6 <__cxa_guard_acquire>
 8022426:	b138      	cbz	r0, 8022438 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022428:	4620      	mov	r0, r4
 802242a:	f007 f9d8 	bl	80297de <__cxa_guard_release>
 802242e:	4a06      	ldr	r2, [pc, #24]	; (8022448 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022430:	4909      	ldr	r1, [pc, #36]	; (8022458 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8022432:	480a      	ldr	r0, [pc, #40]	; (802245c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022434:	f007 f9c0 	bl	80297b8 <__aeabi_atexit>
 8022438:	4b05      	ldr	r3, [pc, #20]	; (8022450 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802243a:	622b      	str	r3, [r5, #32]
 802243c:	4b07      	ldr	r3, [pc, #28]	; (802245c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802243e:	626b      	str	r3, [r5, #36]	; 0x24
 8022440:	bd38      	pop	{r3, r4, r5, pc}
 8022442:	bf00      	nop
 8022444:	20008f04 	.word	0x20008f04
 8022448:	20000000 	.word	0x20000000
 802244c:	0802050b 	.word	0x0802050b
 8022450:	2000006c 	.word	0x2000006c
 8022454:	20008f08 	.word	0x20008f08
 8022458:	08020509 	.word	0x08020509
 802245c:	20000070 	.word	0x20000070

08022460 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8022460:	b538      	push	{r3, r4, r5, lr}
 8022462:	4c15      	ldr	r4, [pc, #84]	; (80224b8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8022464:	7823      	ldrb	r3, [r4, #0]
 8022466:	f3bf 8f5b 	dmb	ish
 802246a:	07da      	lsls	r2, r3, #31
 802246c:	4605      	mov	r5, r0
 802246e:	d40b      	bmi.n	8022488 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8022470:	4620      	mov	r0, r4
 8022472:	f007 f9a8 	bl	80297c6 <__cxa_guard_acquire>
 8022476:	b138      	cbz	r0, 8022488 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8022478:	4620      	mov	r0, r4
 802247a:	f007 f9b0 	bl	80297de <__cxa_guard_release>
 802247e:	4a0f      	ldr	r2, [pc, #60]	; (80224bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022480:	490f      	ldr	r1, [pc, #60]	; (80224c0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8022482:	4810      	ldr	r0, [pc, #64]	; (80224c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8022484:	f007 f998 	bl	80297b8 <__aeabi_atexit>
 8022488:	4c0f      	ldr	r4, [pc, #60]	; (80224c8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802248a:	7823      	ldrb	r3, [r4, #0]
 802248c:	f3bf 8f5b 	dmb	ish
 8022490:	07db      	lsls	r3, r3, #31
 8022492:	d40b      	bmi.n	80224ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8022494:	4620      	mov	r0, r4
 8022496:	f007 f996 	bl	80297c6 <__cxa_guard_acquire>
 802249a:	b138      	cbz	r0, 80224ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 802249c:	4620      	mov	r0, r4
 802249e:	f007 f99e 	bl	80297de <__cxa_guard_release>
 80224a2:	4a06      	ldr	r2, [pc, #24]	; (80224bc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80224a4:	4909      	ldr	r1, [pc, #36]	; (80224cc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80224a6:	480a      	ldr	r0, [pc, #40]	; (80224d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80224a8:	f007 f986 	bl	80297b8 <__aeabi_atexit>
 80224ac:	4b05      	ldr	r3, [pc, #20]	; (80224c4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80224ae:	61ab      	str	r3, [r5, #24]
 80224b0:	4b07      	ldr	r3, [pc, #28]	; (80224d0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80224b2:	61eb      	str	r3, [r5, #28]
 80224b4:	bd38      	pop	{r3, r4, r5, pc}
 80224b6:	bf00      	nop
 80224b8:	20008edc 	.word	0x20008edc
 80224bc:	20000000 	.word	0x20000000
 80224c0:	0802050f 	.word	0x0802050f
 80224c4:	20000044 	.word	0x20000044
 80224c8:	20008ee0 	.word	0x20008ee0
 80224cc:	0802050d 	.word	0x0802050d
 80224d0:	20000048 	.word	0x20000048

080224d4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 80224d4:	b510      	push	{r4, lr}
 80224d6:	4604      	mov	r4, r0
 80224d8:	f7ff ff88 	bl	80223ec <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80224dc:	4620      	mov	r0, r4
 80224de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80224e2:	f7ff bfbd 	b.w	8022460 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080224e8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80224e8:	b538      	push	{r3, r4, r5, lr}
 80224ea:	4c15      	ldr	r4, [pc, #84]	; (8022540 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80224ec:	7823      	ldrb	r3, [r4, #0]
 80224ee:	f3bf 8f5b 	dmb	ish
 80224f2:	07da      	lsls	r2, r3, #31
 80224f4:	4605      	mov	r5, r0
 80224f6:	d40b      	bmi.n	8022510 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80224f8:	4620      	mov	r0, r4
 80224fa:	f007 f964 	bl	80297c6 <__cxa_guard_acquire>
 80224fe:	b138      	cbz	r0, 8022510 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022500:	4620      	mov	r0, r4
 8022502:	f007 f96c 	bl	80297de <__cxa_guard_release>
 8022506:	4a0f      	ldr	r2, [pc, #60]	; (8022544 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8022508:	490f      	ldr	r1, [pc, #60]	; (8022548 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 802250a:	4810      	ldr	r0, [pc, #64]	; (802254c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 802250c:	f007 f954 	bl	80297b8 <__aeabi_atexit>
 8022510:	4c0f      	ldr	r4, [pc, #60]	; (8022550 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8022512:	7823      	ldrb	r3, [r4, #0]
 8022514:	f3bf 8f5b 	dmb	ish
 8022518:	07db      	lsls	r3, r3, #31
 802251a:	d40b      	bmi.n	8022534 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 802251c:	4620      	mov	r0, r4
 802251e:	f007 f952 	bl	80297c6 <__cxa_guard_acquire>
 8022522:	b138      	cbz	r0, 8022534 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8022524:	4620      	mov	r0, r4
 8022526:	f007 f95a 	bl	80297de <__cxa_guard_release>
 802252a:	4a06      	ldr	r2, [pc, #24]	; (8022544 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 802252c:	4909      	ldr	r1, [pc, #36]	; (8022554 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 802252e:	480a      	ldr	r0, [pc, #40]	; (8022558 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8022530:	f007 f942 	bl	80297b8 <__aeabi_atexit>
 8022534:	4b05      	ldr	r3, [pc, #20]	; (802254c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8022536:	632b      	str	r3, [r5, #48]	; 0x30
 8022538:	4b07      	ldr	r3, [pc, #28]	; (8022558 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 802253a:	636b      	str	r3, [r5, #52]	; 0x34
 802253c:	bd38      	pop	{r3, r4, r5, pc}
 802253e:	bf00      	nop
 8022540:	20008f14 	.word	0x20008f14
 8022544:	20000000 	.word	0x20000000
 8022548:	08020503 	.word	0x08020503
 802254c:	2000007c 	.word	0x2000007c
 8022550:	20008f18 	.word	0x20008f18
 8022554:	08020501 	.word	0x08020501
 8022558:	20000080 	.word	0x20000080

0802255c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 802255c:	b538      	push	{r3, r4, r5, lr}
 802255e:	4c15      	ldr	r4, [pc, #84]	; (80225b4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8022560:	7823      	ldrb	r3, [r4, #0]
 8022562:	f3bf 8f5b 	dmb	ish
 8022566:	07da      	lsls	r2, r3, #31
 8022568:	4605      	mov	r5, r0
 802256a:	d40b      	bmi.n	8022584 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 802256c:	4620      	mov	r0, r4
 802256e:	f007 f92a 	bl	80297c6 <__cxa_guard_acquire>
 8022572:	b138      	cbz	r0, 8022584 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022574:	4620      	mov	r0, r4
 8022576:	f007 f932 	bl	80297de <__cxa_guard_release>
 802257a:	4a0f      	ldr	r2, [pc, #60]	; (80225b8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 802257c:	490f      	ldr	r1, [pc, #60]	; (80225bc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 802257e:	4810      	ldr	r0, [pc, #64]	; (80225c0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8022580:	f007 f91a 	bl	80297b8 <__aeabi_atexit>
 8022584:	4c0f      	ldr	r4, [pc, #60]	; (80225c4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8022586:	7823      	ldrb	r3, [r4, #0]
 8022588:	f3bf 8f5b 	dmb	ish
 802258c:	07db      	lsls	r3, r3, #31
 802258e:	d40b      	bmi.n	80225a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8022590:	4620      	mov	r0, r4
 8022592:	f007 f918 	bl	80297c6 <__cxa_guard_acquire>
 8022596:	b138      	cbz	r0, 80225a8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8022598:	4620      	mov	r0, r4
 802259a:	f007 f920 	bl	80297de <__cxa_guard_release>
 802259e:	4a06      	ldr	r2, [pc, #24]	; (80225b8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80225a0:	4909      	ldr	r1, [pc, #36]	; (80225c8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80225a2:	480a      	ldr	r0, [pc, #40]	; (80225cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80225a4:	f007 f908 	bl	80297b8 <__aeabi_atexit>
 80225a8:	4b05      	ldr	r3, [pc, #20]	; (80225c0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80225aa:	62ab      	str	r3, [r5, #40]	; 0x28
 80225ac:	4b07      	ldr	r3, [pc, #28]	; (80225cc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80225ae:	62eb      	str	r3, [r5, #44]	; 0x2c
 80225b0:	bd38      	pop	{r3, r4, r5, pc}
 80225b2:	bf00      	nop
 80225b4:	20008ee4 	.word	0x20008ee4
 80225b8:	20000000 	.word	0x20000000
 80225bc:	08020507 	.word	0x08020507
 80225c0:	2000004c 	.word	0x2000004c
 80225c4:	20008ee8 	.word	0x20008ee8
 80225c8:	08020505 	.word	0x08020505
 80225cc:	20000050 	.word	0x20000050

080225d0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 80225d0:	b510      	push	{r4, lr}
 80225d2:	4604      	mov	r4, r0
 80225d4:	f7ff ff88 	bl	80224e8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80225d8:	4620      	mov	r0, r4
 80225da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80225de:	f7ff bfbd 	b.w	802255c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080225e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 80225e4:	b538      	push	{r3, r4, r5, lr}
 80225e6:	4c15      	ldr	r4, [pc, #84]	; (802263c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 80225e8:	7823      	ldrb	r3, [r4, #0]
 80225ea:	f3bf 8f5b 	dmb	ish
 80225ee:	07da      	lsls	r2, r3, #31
 80225f0:	4605      	mov	r5, r0
 80225f2:	d40b      	bmi.n	802260c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80225f4:	4620      	mov	r0, r4
 80225f6:	f007 f8e6 	bl	80297c6 <__cxa_guard_acquire>
 80225fa:	b138      	cbz	r0, 802260c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80225fc:	4620      	mov	r0, r4
 80225fe:	f007 f8ee 	bl	80297de <__cxa_guard_release>
 8022602:	4a0f      	ldr	r2, [pc, #60]	; (8022640 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8022604:	490f      	ldr	r1, [pc, #60]	; (8022644 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 8022606:	4810      	ldr	r0, [pc, #64]	; (8022648 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8022608:	f007 f8d6 	bl	80297b8 <__aeabi_atexit>
 802260c:	4c0f      	ldr	r4, [pc, #60]	; (802264c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 802260e:	7823      	ldrb	r3, [r4, #0]
 8022610:	f3bf 8f5b 	dmb	ish
 8022614:	07db      	lsls	r3, r3, #31
 8022616:	d40b      	bmi.n	8022630 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8022618:	4620      	mov	r0, r4
 802261a:	f007 f8d4 	bl	80297c6 <__cxa_guard_acquire>
 802261e:	b138      	cbz	r0, 8022630 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8022620:	4620      	mov	r0, r4
 8022622:	f007 f8dc 	bl	80297de <__cxa_guard_release>
 8022626:	4a06      	ldr	r2, [pc, #24]	; (8022640 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8022628:	4909      	ldr	r1, [pc, #36]	; (8022650 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 802262a:	480a      	ldr	r0, [pc, #40]	; (8022654 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802262c:	f007 f8c4 	bl	80297b8 <__aeabi_atexit>
 8022630:	4b05      	ldr	r3, [pc, #20]	; (8022648 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8022632:	652b      	str	r3, [r5, #80]	; 0x50
 8022634:	4b07      	ldr	r3, [pc, #28]	; (8022654 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8022636:	656b      	str	r3, [r5, #84]	; 0x54
 8022638:	bd38      	pop	{r3, r4, r5, pc}
 802263a:	bf00      	nop
 802263c:	20008f1c 	.word	0x20008f1c
 8022640:	20000000 	.word	0x20000000
 8022644:	080204f3 	.word	0x080204f3
 8022648:	20000084 	.word	0x20000084
 802264c:	20008f20 	.word	0x20008f20
 8022650:	080204f1 	.word	0x080204f1
 8022654:	20000088 	.word	0x20000088

08022658 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8022658:	b538      	push	{r3, r4, r5, lr}
 802265a:	4c15      	ldr	r4, [pc, #84]	; (80226b0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 802265c:	7823      	ldrb	r3, [r4, #0]
 802265e:	f3bf 8f5b 	dmb	ish
 8022662:	07da      	lsls	r2, r3, #31
 8022664:	4605      	mov	r5, r0
 8022666:	d40b      	bmi.n	8022680 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8022668:	4620      	mov	r0, r4
 802266a:	f007 f8ac 	bl	80297c6 <__cxa_guard_acquire>
 802266e:	b138      	cbz	r0, 8022680 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8022670:	4620      	mov	r0, r4
 8022672:	f007 f8b4 	bl	80297de <__cxa_guard_release>
 8022676:	4a0f      	ldr	r2, [pc, #60]	; (80226b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8022678:	490f      	ldr	r1, [pc, #60]	; (80226b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 802267a:	4810      	ldr	r0, [pc, #64]	; (80226bc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 802267c:	f007 f89c 	bl	80297b8 <__aeabi_atexit>
 8022680:	4c0f      	ldr	r4, [pc, #60]	; (80226c0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8022682:	7823      	ldrb	r3, [r4, #0]
 8022684:	f3bf 8f5b 	dmb	ish
 8022688:	07db      	lsls	r3, r3, #31
 802268a:	d40b      	bmi.n	80226a4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 802268c:	4620      	mov	r0, r4
 802268e:	f007 f89a 	bl	80297c6 <__cxa_guard_acquire>
 8022692:	b138      	cbz	r0, 80226a4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8022694:	4620      	mov	r0, r4
 8022696:	f007 f8a2 	bl	80297de <__cxa_guard_release>
 802269a:	4a06      	ldr	r2, [pc, #24]	; (80226b4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 802269c:	4909      	ldr	r1, [pc, #36]	; (80226c4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 802269e:	480a      	ldr	r0, [pc, #40]	; (80226c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80226a0:	f007 f88a 	bl	80297b8 <__aeabi_atexit>
 80226a4:	4b05      	ldr	r3, [pc, #20]	; (80226bc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 80226a6:	64ab      	str	r3, [r5, #72]	; 0x48
 80226a8:	4b07      	ldr	r3, [pc, #28]	; (80226c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80226aa:	64eb      	str	r3, [r5, #76]	; 0x4c
 80226ac:	bd38      	pop	{r3, r4, r5, pc}
 80226ae:	bf00      	nop
 80226b0:	20008f24 	.word	0x20008f24
 80226b4:	20000000 	.word	0x20000000
 80226b8:	080204f7 	.word	0x080204f7
 80226bc:	2000008c 	.word	0x2000008c
 80226c0:	20008f28 	.word	0x20008f28
 80226c4:	080204f5 	.word	0x080204f5
 80226c8:	20000090 	.word	0x20000090

080226cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 80226cc:	b538      	push	{r3, r4, r5, lr}
 80226ce:	4c15      	ldr	r4, [pc, #84]	; (8022724 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 80226d0:	7823      	ldrb	r3, [r4, #0]
 80226d2:	f3bf 8f5b 	dmb	ish
 80226d6:	07da      	lsls	r2, r3, #31
 80226d8:	4605      	mov	r5, r0
 80226da:	d40b      	bmi.n	80226f4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80226dc:	4620      	mov	r0, r4
 80226de:	f007 f872 	bl	80297c6 <__cxa_guard_acquire>
 80226e2:	b138      	cbz	r0, 80226f4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80226e4:	4620      	mov	r0, r4
 80226e6:	f007 f87a 	bl	80297de <__cxa_guard_release>
 80226ea:	4a0f      	ldr	r2, [pc, #60]	; (8022728 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80226ec:	490f      	ldr	r1, [pc, #60]	; (802272c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 80226ee:	4810      	ldr	r0, [pc, #64]	; (8022730 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80226f0:	f007 f862 	bl	80297b8 <__aeabi_atexit>
 80226f4:	4c0f      	ldr	r4, [pc, #60]	; (8022734 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 80226f6:	7823      	ldrb	r3, [r4, #0]
 80226f8:	f3bf 8f5b 	dmb	ish
 80226fc:	07db      	lsls	r3, r3, #31
 80226fe:	d40b      	bmi.n	8022718 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8022700:	4620      	mov	r0, r4
 8022702:	f007 f860 	bl	80297c6 <__cxa_guard_acquire>
 8022706:	b138      	cbz	r0, 8022718 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8022708:	4620      	mov	r0, r4
 802270a:	f007 f868 	bl	80297de <__cxa_guard_release>
 802270e:	4a06      	ldr	r2, [pc, #24]	; (8022728 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022710:	4909      	ldr	r1, [pc, #36]	; (8022738 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 8022712:	480a      	ldr	r0, [pc, #40]	; (802273c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8022714:	f007 f850 	bl	80297b8 <__aeabi_atexit>
 8022718:	4b05      	ldr	r3, [pc, #20]	; (8022730 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 802271a:	642b      	str	r3, [r5, #64]	; 0x40
 802271c:	4b07      	ldr	r3, [pc, #28]	; (802273c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 802271e:	646b      	str	r3, [r5, #68]	; 0x44
 8022720:	bd38      	pop	{r3, r4, r5, pc}
 8022722:	bf00      	nop
 8022724:	20008eec 	.word	0x20008eec
 8022728:	20000000 	.word	0x20000000
 802272c:	080204fb 	.word	0x080204fb
 8022730:	20000054 	.word	0x20000054
 8022734:	20008ef0 	.word	0x20008ef0
 8022738:	080204f9 	.word	0x080204f9
 802273c:	20000058 	.word	0x20000058

08022740 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8022740:	b538      	push	{r3, r4, r5, lr}
 8022742:	4c15      	ldr	r4, [pc, #84]	; (8022798 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8022744:	7823      	ldrb	r3, [r4, #0]
 8022746:	f3bf 8f5b 	dmb	ish
 802274a:	07da      	lsls	r2, r3, #31
 802274c:	4605      	mov	r5, r0
 802274e:	d40b      	bmi.n	8022768 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8022750:	4620      	mov	r0, r4
 8022752:	f007 f838 	bl	80297c6 <__cxa_guard_acquire>
 8022756:	b138      	cbz	r0, 8022768 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8022758:	4620      	mov	r0, r4
 802275a:	f007 f840 	bl	80297de <__cxa_guard_release>
 802275e:	4a0f      	ldr	r2, [pc, #60]	; (802279c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8022760:	490f      	ldr	r1, [pc, #60]	; (80227a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8022762:	4810      	ldr	r0, [pc, #64]	; (80227a4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8022764:	f007 f828 	bl	80297b8 <__aeabi_atexit>
 8022768:	4c0f      	ldr	r4, [pc, #60]	; (80227a8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 802276a:	7823      	ldrb	r3, [r4, #0]
 802276c:	f3bf 8f5b 	dmb	ish
 8022770:	07db      	lsls	r3, r3, #31
 8022772:	d40b      	bmi.n	802278c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8022774:	4620      	mov	r0, r4
 8022776:	f007 f826 	bl	80297c6 <__cxa_guard_acquire>
 802277a:	b138      	cbz	r0, 802278c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 802277c:	4620      	mov	r0, r4
 802277e:	f007 f82e 	bl	80297de <__cxa_guard_release>
 8022782:	4a06      	ldr	r2, [pc, #24]	; (802279c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8022784:	4909      	ldr	r1, [pc, #36]	; (80227ac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8022786:	480a      	ldr	r0, [pc, #40]	; (80227b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8022788:	f007 f816 	bl	80297b8 <__aeabi_atexit>
 802278c:	4b05      	ldr	r3, [pc, #20]	; (80227a4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 802278e:	63ab      	str	r3, [r5, #56]	; 0x38
 8022790:	4b07      	ldr	r3, [pc, #28]	; (80227b0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8022792:	63eb      	str	r3, [r5, #60]	; 0x3c
 8022794:	bd38      	pop	{r3, r4, r5, pc}
 8022796:	bf00      	nop
 8022798:	20008f0c 	.word	0x20008f0c
 802279c:	20000000 	.word	0x20000000
 80227a0:	080204ff 	.word	0x080204ff
 80227a4:	20000074 	.word	0x20000074
 80227a8:	20008f10 	.word	0x20008f10
 80227ac:	080204fd 	.word	0x080204fd
 80227b0:	20000078 	.word	0x20000078

080227b4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 80227b4:	b510      	push	{r4, lr}
 80227b6:	4604      	mov	r4, r0
 80227b8:	f7ff ff14 	bl	80225e4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 80227bc:	4620      	mov	r0, r4
 80227be:	f7ff ff85 	bl	80226cc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 80227c2:	4620      	mov	r0, r4
 80227c4:	f7ff ff48 	bl	8022658 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 80227c8:	4620      	mov	r0, r4
 80227ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80227ce:	f7ff bfb7 	b.w	8022740 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

080227d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80227d4:	b538      	push	{r3, r4, r5, lr}
 80227d6:	4c15      	ldr	r4, [pc, #84]	; (802282c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80227d8:	7823      	ldrb	r3, [r4, #0]
 80227da:	f3bf 8f5b 	dmb	ish
 80227de:	07da      	lsls	r2, r3, #31
 80227e0:	4605      	mov	r5, r0
 80227e2:	d40b      	bmi.n	80227fc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80227e4:	4620      	mov	r0, r4
 80227e6:	f006 ffee 	bl	80297c6 <__cxa_guard_acquire>
 80227ea:	b138      	cbz	r0, 80227fc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80227ec:	4620      	mov	r0, r4
 80227ee:	f006 fff6 	bl	80297de <__cxa_guard_release>
 80227f2:	4a0f      	ldr	r2, [pc, #60]	; (8022830 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80227f4:	490f      	ldr	r1, [pc, #60]	; (8022834 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80227f6:	4810      	ldr	r0, [pc, #64]	; (8022838 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80227f8:	f006 ffde 	bl	80297b8 <__aeabi_atexit>
 80227fc:	4c0f      	ldr	r4, [pc, #60]	; (802283c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80227fe:	7823      	ldrb	r3, [r4, #0]
 8022800:	f3bf 8f5b 	dmb	ish
 8022804:	07db      	lsls	r3, r3, #31
 8022806:	d40b      	bmi.n	8022820 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022808:	4620      	mov	r0, r4
 802280a:	f006 ffdc 	bl	80297c6 <__cxa_guard_acquire>
 802280e:	b138      	cbz	r0, 8022820 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8022810:	4620      	mov	r0, r4
 8022812:	f006 ffe4 	bl	80297de <__cxa_guard_release>
 8022816:	4a06      	ldr	r2, [pc, #24]	; (8022830 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8022818:	4909      	ldr	r1, [pc, #36]	; (8022840 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 802281a:	480a      	ldr	r0, [pc, #40]	; (8022844 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 802281c:	f006 ffcc 	bl	80297b8 <__aeabi_atexit>
 8022820:	4b05      	ldr	r3, [pc, #20]	; (8022838 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8022822:	662b      	str	r3, [r5, #96]	; 0x60
 8022824:	4b07      	ldr	r3, [pc, #28]	; (8022844 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8022826:	666b      	str	r3, [r5, #100]	; 0x64
 8022828:	bd38      	pop	{r3, r4, r5, pc}
 802282a:	bf00      	nop
 802282c:	20008ef4 	.word	0x20008ef4
 8022830:	20000000 	.word	0x20000000
 8022834:	080204eb 	.word	0x080204eb
 8022838:	2000005c 	.word	0x2000005c
 802283c:	20008ef8 	.word	0x20008ef8
 8022840:	080204e9 	.word	0x080204e9
 8022844:	20000060 	.word	0x20000060

08022848 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8022848:	b538      	push	{r3, r4, r5, lr}
 802284a:	4c15      	ldr	r4, [pc, #84]	; (80228a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 802284c:	7823      	ldrb	r3, [r4, #0]
 802284e:	f3bf 8f5b 	dmb	ish
 8022852:	07da      	lsls	r2, r3, #31
 8022854:	4605      	mov	r5, r0
 8022856:	d40b      	bmi.n	8022870 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022858:	4620      	mov	r0, r4
 802285a:	f006 ffb4 	bl	80297c6 <__cxa_guard_acquire>
 802285e:	b138      	cbz	r0, 8022870 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022860:	4620      	mov	r0, r4
 8022862:	f006 ffbc 	bl	80297de <__cxa_guard_release>
 8022866:	4a0f      	ldr	r2, [pc, #60]	; (80228a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8022868:	490f      	ldr	r1, [pc, #60]	; (80228a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802286a:	4810      	ldr	r0, [pc, #64]	; (80228ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 802286c:	f006 ffa4 	bl	80297b8 <__aeabi_atexit>
 8022870:	4c0f      	ldr	r4, [pc, #60]	; (80228b0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8022872:	7823      	ldrb	r3, [r4, #0]
 8022874:	f3bf 8f5b 	dmb	ish
 8022878:	07db      	lsls	r3, r3, #31
 802287a:	d40b      	bmi.n	8022894 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 802287c:	4620      	mov	r0, r4
 802287e:	f006 ffa2 	bl	80297c6 <__cxa_guard_acquire>
 8022882:	b138      	cbz	r0, 8022894 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8022884:	4620      	mov	r0, r4
 8022886:	f006 ffaa 	bl	80297de <__cxa_guard_release>
 802288a:	4a06      	ldr	r2, [pc, #24]	; (80228a4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 802288c:	4909      	ldr	r1, [pc, #36]	; (80228b4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 802288e:	480a      	ldr	r0, [pc, #40]	; (80228b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8022890:	f006 ff92 	bl	80297b8 <__aeabi_atexit>
 8022894:	4b05      	ldr	r3, [pc, #20]	; (80228ac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8022896:	65ab      	str	r3, [r5, #88]	; 0x58
 8022898:	4b07      	ldr	r3, [pc, #28]	; (80228b8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 802289a:	65eb      	str	r3, [r5, #92]	; 0x5c
 802289c:	bd38      	pop	{r3, r4, r5, pc}
 802289e:	bf00      	nop
 80228a0:	20008ecc 	.word	0x20008ecc
 80228a4:	20000000 	.word	0x20000000
 80228a8:	080204ef 	.word	0x080204ef
 80228ac:	20000034 	.word	0x20000034
 80228b0:	20008ed0 	.word	0x20008ed0
 80228b4:	080204ed 	.word	0x080204ed
 80228b8:	20000038 	.word	0x20000038

080228bc <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 80228bc:	b510      	push	{r4, lr}
 80228be:	4604      	mov	r4, r0
 80228c0:	f7ff ff88 	bl	80227d4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80228c4:	4620      	mov	r0, r4
 80228c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80228ca:	f7ff bfbd 	b.w	8022848 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080228d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80228d0:	b538      	push	{r3, r4, r5, lr}
 80228d2:	4c15      	ldr	r4, [pc, #84]	; (8022928 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80228d4:	7823      	ldrb	r3, [r4, #0]
 80228d6:	f3bf 8f5b 	dmb	ish
 80228da:	07da      	lsls	r2, r3, #31
 80228dc:	4605      	mov	r5, r0
 80228de:	d40b      	bmi.n	80228f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80228e0:	4620      	mov	r0, r4
 80228e2:	f006 ff70 	bl	80297c6 <__cxa_guard_acquire>
 80228e6:	b138      	cbz	r0, 80228f8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80228e8:	4620      	mov	r0, r4
 80228ea:	f006 ff78 	bl	80297de <__cxa_guard_release>
 80228ee:	4a0f      	ldr	r2, [pc, #60]	; (802292c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80228f0:	490f      	ldr	r1, [pc, #60]	; (8022930 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80228f2:	4810      	ldr	r0, [pc, #64]	; (8022934 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80228f4:	f006 ff60 	bl	80297b8 <__aeabi_atexit>
 80228f8:	4c0f      	ldr	r4, [pc, #60]	; (8022938 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80228fa:	7823      	ldrb	r3, [r4, #0]
 80228fc:	f3bf 8f5b 	dmb	ish
 8022900:	07db      	lsls	r3, r3, #31
 8022902:	d40b      	bmi.n	802291c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022904:	4620      	mov	r0, r4
 8022906:	f006 ff5e 	bl	80297c6 <__cxa_guard_acquire>
 802290a:	b138      	cbz	r0, 802291c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 802290c:	4620      	mov	r0, r4
 802290e:	f006 ff66 	bl	80297de <__cxa_guard_release>
 8022912:	4a06      	ldr	r2, [pc, #24]	; (802292c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8022914:	4909      	ldr	r1, [pc, #36]	; (802293c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8022916:	480a      	ldr	r0, [pc, #40]	; (8022940 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022918:	f006 ff4e 	bl	80297b8 <__aeabi_atexit>
 802291c:	4b05      	ldr	r3, [pc, #20]	; (8022934 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802291e:	672b      	str	r3, [r5, #112]	; 0x70
 8022920:	4b07      	ldr	r3, [pc, #28]	; (8022940 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8022922:	676b      	str	r3, [r5, #116]	; 0x74
 8022924:	bd38      	pop	{r3, r4, r5, pc}
 8022926:	bf00      	nop
 8022928:	20008ec4 	.word	0x20008ec4
 802292c:	20000000 	.word	0x20000000
 8022930:	080204e3 	.word	0x080204e3
 8022934:	2000002c 	.word	0x2000002c
 8022938:	20008ec8 	.word	0x20008ec8
 802293c:	080204e1 	.word	0x080204e1
 8022940:	20000030 	.word	0x20000030

08022944 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 8022944:	b538      	push	{r3, r4, r5, lr}
 8022946:	4c15      	ldr	r4, [pc, #84]	; (802299c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8022948:	7823      	ldrb	r3, [r4, #0]
 802294a:	f3bf 8f5b 	dmb	ish
 802294e:	07da      	lsls	r2, r3, #31
 8022950:	4605      	mov	r5, r0
 8022952:	d40b      	bmi.n	802296c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8022954:	4620      	mov	r0, r4
 8022956:	f006 ff36 	bl	80297c6 <__cxa_guard_acquire>
 802295a:	b138      	cbz	r0, 802296c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 802295c:	4620      	mov	r0, r4
 802295e:	f006 ff3e 	bl	80297de <__cxa_guard_release>
 8022962:	4a0f      	ldr	r2, [pc, #60]	; (80229a0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022964:	490f      	ldr	r1, [pc, #60]	; (80229a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8022966:	4810      	ldr	r0, [pc, #64]	; (80229a8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022968:	f006 ff26 	bl	80297b8 <__aeabi_atexit>
 802296c:	4c0f      	ldr	r4, [pc, #60]	; (80229ac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 802296e:	7823      	ldrb	r3, [r4, #0]
 8022970:	f3bf 8f5b 	dmb	ish
 8022974:	07db      	lsls	r3, r3, #31
 8022976:	d40b      	bmi.n	8022990 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022978:	4620      	mov	r0, r4
 802297a:	f006 ff24 	bl	80297c6 <__cxa_guard_acquire>
 802297e:	b138      	cbz	r0, 8022990 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022980:	4620      	mov	r0, r4
 8022982:	f006 ff2c 	bl	80297de <__cxa_guard_release>
 8022986:	4a06      	ldr	r2, [pc, #24]	; (80229a0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022988:	4909      	ldr	r1, [pc, #36]	; (80229b0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 802298a:	480a      	ldr	r0, [pc, #40]	; (80229b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 802298c:	f006 ff14 	bl	80297b8 <__aeabi_atexit>
 8022990:	4b05      	ldr	r3, [pc, #20]	; (80229a8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8022992:	66ab      	str	r3, [r5, #104]	; 0x68
 8022994:	4b07      	ldr	r3, [pc, #28]	; (80229b4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022996:	66eb      	str	r3, [r5, #108]	; 0x6c
 8022998:	bd38      	pop	{r3, r4, r5, pc}
 802299a:	bf00      	nop
 802299c:	20008ebc 	.word	0x20008ebc
 80229a0:	20000000 	.word	0x20000000
 80229a4:	080204e7 	.word	0x080204e7
 80229a8:	20000024 	.word	0x20000024
 80229ac:	20008ec0 	.word	0x20008ec0
 80229b0:	080204e5 	.word	0x080204e5
 80229b4:	20000028 	.word	0x20000028

080229b8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 80229b8:	b510      	push	{r4, lr}
 80229ba:	4604      	mov	r4, r0
 80229bc:	f7ff ff88 	bl	80228d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80229c0:	4620      	mov	r0, r4
 80229c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80229c6:	f7ff bfbd 	b.w	8022944 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

080229ca <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 80229ca:	b510      	push	{r4, lr}
 80229cc:	4604      	mov	r4, r0
 80229ce:	f7ff fff3 	bl	80229b8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 80229d2:	4620      	mov	r0, r4
 80229d4:	f7ff ff72 	bl	80228bc <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 80229d8:	4620      	mov	r0, r4
 80229da:	f7ff fdf9 	bl	80225d0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 80229de:	4620      	mov	r0, r4
 80229e0:	f7ff fcfa 	bl	80223d8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 80229e4:	4620      	mov	r0, r4
 80229e6:	f7ff fd75 	bl	80224d4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 80229ea:	4620      	mov	r0, r4
 80229ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80229f0:	f7ff bee0 	b.w	80227b4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

080229f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 80229f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229f8:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 80229fc:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8022a00:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 8022a04:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8022a08:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8022a0c:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8022a10:	8808      	ldrh	r0, [r1, #0]
 8022a12:	fb05 4c0e 	mla	ip, r5, lr, r4
 8022a16:	2d00      	cmp	r5, #0
 8022a18:	eb02 0a0c 	add.w	sl, r2, ip
 8022a1c:	f2c0 80b0 	blt.w	8022b80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8022a20:	45ab      	cmp	fp, r5
 8022a22:	f340 80ad 	ble.w	8022b80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8022a26:	2c00      	cmp	r4, #0
 8022a28:	f2c0 80a8 	blt.w	8022b7c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8022a2c:	45a6      	cmp	lr, r4
 8022a2e:	f340 80a5 	ble.w	8022b7c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8022a32:	f812 200c 	ldrb.w	r2, [r2, ip]
 8022a36:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8022a3a:	1c62      	adds	r2, r4, #1
 8022a3c:	f100 80a3 	bmi.w	8022b86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8022a40:	4596      	cmp	lr, r2
 8022a42:	f340 80a0 	ble.w	8022b86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8022a46:	f1b9 0f00 	cmp.w	r9, #0
 8022a4a:	f000 809c 	beq.w	8022b86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8022a4e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022a52:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8022a56:	3501      	adds	r5, #1
 8022a58:	f100 8099 	bmi.w	8022b8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8022a5c:	45ab      	cmp	fp, r5
 8022a5e:	f340 8096 	ble.w	8022b8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8022a62:	2f00      	cmp	r7, #0
 8022a64:	f000 8093 	beq.w	8022b8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8022a68:	2c00      	cmp	r4, #0
 8022a6a:	f2c0 808e 	blt.w	8022b8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8022a6e:	45a6      	cmp	lr, r4
 8022a70:	f340 808b 	ble.w	8022b8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8022a74:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8022a78:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8022a7c:	3401      	adds	r4, #1
 8022a7e:	f100 8089 	bmi.w	8022b94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8022a82:	45a6      	cmp	lr, r4
 8022a84:	f340 8086 	ble.w	8022b94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8022a88:	f1b9 0f00 	cmp.w	r9, #0
 8022a8c:	f000 8082 	beq.w	8022b94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8022a90:	44d6      	add	lr, sl
 8022a92:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022a96:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8022a9a:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8022a9e:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022aa2:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8022aa6:	fb19 fe07 	smulbb	lr, r9, r7
 8022aaa:	ea44 0808 	orr.w	r8, r4, r8
 8022aae:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8022ab2:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8022ab6:	f1c7 0210 	rsb	r2, r7, #16
 8022aba:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8022abe:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8022ac2:	ea44 0c0c 	orr.w	ip, r4, ip
 8022ac6:	eba2 0209 	sub.w	r2, r2, r9
 8022aca:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8022ace:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8022ad2:	fb04 f40c 	mul.w	r4, r4, ip
 8022ad6:	fb02 4808 	mla	r8, r2, r8, r4
 8022ada:	041a      	lsls	r2, r3, #16
 8022adc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022ae0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022ae4:	4313      	orrs	r3, r2
 8022ae6:	042a      	lsls	r2, r5, #16
 8022ae8:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022aec:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022af0:	fb0e 8303 	mla	r3, lr, r3, r8
 8022af4:	432a      	orrs	r2, r5
 8022af6:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8022afa:	fb07 3202 	mla	r2, r7, r2, r3
 8022afe:	0d53      	lsrs	r3, r2, #21
 8022b00:	0952      	lsrs	r2, r2, #5
 8022b02:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022b06:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022b0a:	431a      	orrs	r2, r3
 8022b0c:	b293      	uxth	r3, r2
 8022b0e:	b2b4      	uxth	r4, r6
 8022b10:	1202      	asrs	r2, r0, #8
 8022b12:	43f6      	mvns	r6, r6
 8022b14:	b2f6      	uxtb	r6, r6
 8022b16:	121d      	asrs	r5, r3, #8
 8022b18:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022b1c:	fb12 f206 	smulbb	r2, r2, r6
 8022b20:	10c7      	asrs	r7, r0, #3
 8022b22:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022b26:	00c0      	lsls	r0, r0, #3
 8022b28:	fb05 2504 	mla	r5, r5, r4, r2
 8022b2c:	b2c0      	uxtb	r0, r0
 8022b2e:	10da      	asrs	r2, r3, #3
 8022b30:	00db      	lsls	r3, r3, #3
 8022b32:	b2db      	uxtb	r3, r3
 8022b34:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022b38:	fb10 f006 	smulbb	r0, r0, r6
 8022b3c:	b2ad      	uxth	r5, r5
 8022b3e:	fb03 0004 	mla	r0, r3, r4, r0
 8022b42:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022b46:	fb17 f706 	smulbb	r7, r7, r6
 8022b4a:	b280      	uxth	r0, r0
 8022b4c:	1c6b      	adds	r3, r5, #1
 8022b4e:	fb02 7204 	mla	r2, r2, r4, r7
 8022b52:	b292      	uxth	r2, r2
 8022b54:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8022b58:	1c43      	adds	r3, r0, #1
 8022b5a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8022b5e:	1c50      	adds	r0, r2, #1
 8022b60:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022b64:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8022b68:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022b6c:	0952      	lsrs	r2, r2, #5
 8022b6e:	432b      	orrs	r3, r5
 8022b70:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022b74:	4313      	orrs	r3, r2
 8022b76:	800b      	strh	r3, [r1, #0]
 8022b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b7c:	4680      	mov	r8, r0
 8022b7e:	e75c      	b.n	8022a3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8022b80:	4684      	mov	ip, r0
 8022b82:	4680      	mov	r8, r0
 8022b84:	e767      	b.n	8022a56 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8022b86:	4684      	mov	ip, r0
 8022b88:	e765      	b.n	8022a56 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8022b8a:	4605      	mov	r5, r0
 8022b8c:	e776      	b.n	8022a7c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8022b8e:	4603      	mov	r3, r0
 8022b90:	4605      	mov	r5, r0
 8022b92:	e782      	b.n	8022a9a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8022b94:	4603      	mov	r3, r0
 8022b96:	e780      	b.n	8022a9a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08022b98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b9c:	b099      	sub	sp, #100	; 0x64
 8022b9e:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 8022ba2:	9215      	str	r2, [sp, #84]	; 0x54
 8022ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8022ba6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8022ba8:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 8022bac:	930d      	str	r3, [sp, #52]	; 0x34
 8022bae:	910c      	str	r1, [sp, #48]	; 0x30
 8022bb0:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 8022bb4:	9016      	str	r0, [sp, #88]	; 0x58
 8022bb6:	6850      	ldr	r0, [r2, #4]
 8022bb8:	6812      	ldr	r2, [r2, #0]
 8022bba:	fb00 1303 	mla	r3, r0, r3, r1
 8022bbe:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8022bc2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022bc4:	681b      	ldr	r3, [r3, #0]
 8022bc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8022bc8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022bca:	685e      	ldr	r6, [r3, #4]
 8022bcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022bce:	43db      	mvns	r3, r3
 8022bd0:	b2db      	uxtb	r3, r3
 8022bd2:	3604      	adds	r6, #4
 8022bd4:	930a      	str	r3, [sp, #40]	; 0x28
 8022bd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022bd8:	2b00      	cmp	r3, #0
 8022bda:	dc03      	bgt.n	8022be4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8022bdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8022bde:	2b00      	cmp	r3, #0
 8022be0:	f340 8225 	ble.w	802302e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8022be4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022be6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022bea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022bee:	1e48      	subs	r0, r1, #1
 8022bf0:	1e57      	subs	r7, r2, #1
 8022bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022bf4:	2b00      	cmp	r3, #0
 8022bf6:	f340 80e3 	ble.w	8022dc0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8022bfa:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8022bfe:	ea4f 4325 	mov.w	r3, r5, asr #16
 8022c02:	d406      	bmi.n	8022c12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022c04:	4584      	cmp	ip, r0
 8022c06:	da04      	bge.n	8022c12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022c08:	2b00      	cmp	r3, #0
 8022c0a:	db02      	blt.n	8022c12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8022c0c:	42bb      	cmp	r3, r7
 8022c0e:	f2c0 80d8 	blt.w	8022dc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8022c12:	f11c 0c01 	adds.w	ip, ip, #1
 8022c16:	f100 80c9 	bmi.w	8022dac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022c1a:	4561      	cmp	r1, ip
 8022c1c:	f2c0 80c6 	blt.w	8022dac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022c20:	3301      	adds	r3, #1
 8022c22:	f100 80c3 	bmi.w	8022dac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022c26:	429a      	cmp	r2, r3
 8022c28:	f2c0 80c0 	blt.w	8022dac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8022c2c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8022c30:	4647      	mov	r7, r8
 8022c32:	f1bb 0f00 	cmp.w	fp, #0
 8022c36:	f340 80e3 	ble.w	8022e00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8022c3a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8022c3c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022c3e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022c42:	689b      	ldr	r3, [r3, #8]
 8022c44:	ea5f 422a 	movs.w	r2, sl, asr #16
 8022c48:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8022c4c:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8022c50:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022c54:	f100 8121 	bmi.w	8022e9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022c58:	f103 39ff 	add.w	r9, r3, #4294967295
 8022c5c:	454a      	cmp	r2, r9
 8022c5e:	f280 811c 	bge.w	8022e9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022c62:	f1bc 0f00 	cmp.w	ip, #0
 8022c66:	f2c0 8118 	blt.w	8022e9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022c6a:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022c6e:	45cc      	cmp	ip, r9
 8022c70:	f280 8113 	bge.w	8022e9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8022c74:	b21b      	sxth	r3, r3
 8022c76:	fb0c 2203 	mla	r2, ip, r3, r2
 8022c7a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022c7c:	eb04 0902 	add.w	r9, r4, r2
 8022c80:	5ca2      	ldrb	r2, [r4, r2]
 8022c82:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8022c86:	2800      	cmp	r0, #0
 8022c88:	f000 80fe 	beq.w	8022e88 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8022c8c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022c90:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8022c94:	9211      	str	r2, [sp, #68]	; 0x44
 8022c96:	b151      	cbz	r1, 8022cae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022c98:	eb09 0203 	add.w	r2, r9, r3
 8022c9c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022ca0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022ca4:	930f      	str	r3, [sp, #60]	; 0x3c
 8022ca6:	7853      	ldrb	r3, [r2, #1]
 8022ca8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022cac:	9312      	str	r3, [sp, #72]	; 0x48
 8022cae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8022cb0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8022cb2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022cb6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022cba:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022cbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8022cc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8022cc4:	041b      	lsls	r3, r3, #16
 8022cc6:	fb10 f201 	smulbb	r2, r0, r1
 8022cca:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8022cce:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022cd2:	10d2      	asrs	r2, r2, #3
 8022cd4:	4323      	orrs	r3, r4
 8022cd6:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8022cda:	4353      	muls	r3, r2
 8022cdc:	fb09 330c 	mla	r3, r9, ip, r3
 8022ce0:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8022ce4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022ce8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022cec:	ea4c 0e0e 	orr.w	lr, ip, lr
 8022cf0:	f1c1 0c10 	rsb	ip, r1, #16
 8022cf4:	ebac 0c00 	sub.w	ip, ip, r0
 8022cf8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022cfc:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8022d00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022d02:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022d04:	0418      	lsls	r0, r3, #16
 8022d06:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022d0a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022d0e:	4318      	orrs	r0, r3
 8022d10:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8022d14:	fb02 c200 	mla	r2, r2, r0, ip
 8022d18:	0d53      	lsrs	r3, r2, #21
 8022d1a:	0952      	lsrs	r2, r2, #5
 8022d1c:	8838      	ldrh	r0, [r7, #0]
 8022d1e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022d22:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022d26:	431a      	orrs	r2, r3
 8022d28:	b292      	uxth	r2, r2
 8022d2a:	1201      	asrs	r1, r0, #8
 8022d2c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8022d30:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8022d34:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022d38:	fb11 f104 	smulbb	r1, r1, r4
 8022d3c:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8022d40:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8022d44:	00c0      	lsls	r0, r0, #3
 8022d46:	fb0c 1c03 	mla	ip, ip, r3, r1
 8022d4a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8022d4e:	10d1      	asrs	r1, r2, #3
 8022d50:	b2c0      	uxtb	r0, r0
 8022d52:	00d2      	lsls	r2, r2, #3
 8022d54:	b2d2      	uxtb	r2, r2
 8022d56:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022d5a:	fb1e fe04 	smulbb	lr, lr, r4
 8022d5e:	fb10 f004 	smulbb	r0, r0, r4
 8022d62:	fa1f fc8c 	uxth.w	ip, ip
 8022d66:	fb01 e103 	mla	r1, r1, r3, lr
 8022d6a:	fb02 0303 	mla	r3, r2, r3, r0
 8022d6e:	b29a      	uxth	r2, r3
 8022d70:	f10c 0301 	add.w	r3, ip, #1
 8022d74:	b289      	uxth	r1, r1
 8022d76:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8022d7a:	1c53      	adds	r3, r2, #1
 8022d7c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022d80:	1c4a      	adds	r2, r1, #1
 8022d82:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022d86:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8022d8a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022d8e:	0949      	lsrs	r1, r1, #5
 8022d90:	ea43 030c 	orr.w	r3, r3, ip
 8022d94:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022d98:	430b      	orrs	r3, r1
 8022d9a:	803b      	strh	r3, [r7, #0]
 8022d9c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022d9e:	449a      	add	sl, r3
 8022da0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022da2:	3702      	adds	r7, #2
 8022da4:	441d      	add	r5, r3
 8022da6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022daa:	e742      	b.n	8022c32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8022dac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8022dae:	449a      	add	sl, r3
 8022db0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8022db2:	441d      	add	r5, r3
 8022db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022db6:	3b01      	subs	r3, #1
 8022db8:	9309      	str	r3, [sp, #36]	; 0x24
 8022dba:	f108 0802 	add.w	r8, r8, #2
 8022dbe:	e718      	b.n	8022bf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8022dc0:	d023      	beq.n	8022e0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8022dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022dc4:	9825      	ldr	r0, [sp, #148]	; 0x94
 8022dc6:	3b01      	subs	r3, #1
 8022dc8:	fb00 a003 	mla	r0, r0, r3, sl
 8022dcc:	1400      	asrs	r0, r0, #16
 8022dce:	f53f af2d 	bmi.w	8022c2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022dd2:	3901      	subs	r1, #1
 8022dd4:	4288      	cmp	r0, r1
 8022dd6:	f6bf af29 	bge.w	8022c2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022dda:	9926      	ldr	r1, [sp, #152]	; 0x98
 8022ddc:	fb01 5303 	mla	r3, r1, r3, r5
 8022de0:	141b      	asrs	r3, r3, #16
 8022de2:	f53f af23 	bmi.w	8022c2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022de6:	3a01      	subs	r2, #1
 8022de8:	4293      	cmp	r3, r2
 8022dea:	f6bf af1f 	bge.w	8022c2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8022dee:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8022df2:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 8022df6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8022dfa:	f1be 0f00 	cmp.w	lr, #0
 8022dfe:	dc6c      	bgt.n	8022eda <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8022e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e02:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022e06:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8022e0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e0c:	2b00      	cmp	r3, #0
 8022e0e:	f340 810e 	ble.w	802302e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8022e12:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022e16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022e1a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022e1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022e20:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022e24:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022e28:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022e2c:	eef0 6a62 	vmov.f32	s13, s5
 8022e30:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022e34:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022e38:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022e3c:	ee16 aa90 	vmov	sl, s13
 8022e40:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022e44:	eef0 6a43 	vmov.f32	s13, s6
 8022e48:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022e4c:	ee12 2a90 	vmov	r2, s5
 8022e50:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022e54:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e58:	ee13 2a10 	vmov	r2, s6
 8022e5c:	9325      	str	r3, [sp, #148]	; 0x94
 8022e5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022e60:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e64:	9326      	str	r3, [sp, #152]	; 0x98
 8022e66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e68:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8022e6a:	3b01      	subs	r3, #1
 8022e6c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022e70:	930c      	str	r3, [sp, #48]	; 0x30
 8022e72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022e74:	bf08      	it	eq
 8022e76:	4613      	moveq	r3, r2
 8022e78:	ee16 5a90 	vmov	r5, s13
 8022e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8022e7e:	eeb0 3a67 	vmov.f32	s6, s15
 8022e82:	eef0 2a47 	vmov.f32	s5, s14
 8022e86:	e6a6      	b.n	8022bd6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8022e88:	2900      	cmp	r1, #0
 8022e8a:	f43f af10 	beq.w	8022cae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022e8e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022e92:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022e96:	930f      	str	r3, [sp, #60]	; 0x3c
 8022e98:	e709      	b.n	8022cae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8022e9a:	f112 0901 	adds.w	r9, r2, #1
 8022e9e:	f53f af7d 	bmi.w	8022d9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022ea2:	454b      	cmp	r3, r9
 8022ea4:	f6ff af7a 	blt.w	8022d9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022ea8:	f11c 0901 	adds.w	r9, ip, #1
 8022eac:	f53f af76 	bmi.w	8022d9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022eb0:	45ce      	cmp	lr, r9
 8022eb2:	f6ff af73 	blt.w	8022d9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022eb6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022eb8:	9202      	str	r2, [sp, #8]
 8022eba:	b21b      	sxth	r3, r3
 8022ebc:	fa0f f28e 	sxth.w	r2, lr
 8022ec0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022ec4:	e9cd c003 	strd	ip, r0, [sp, #12]
 8022ec8:	9201      	str	r2, [sp, #4]
 8022eca:	9300      	str	r3, [sp, #0]
 8022ecc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022ece:	9816      	ldr	r0, [sp, #88]	; 0x58
 8022ed0:	4633      	mov	r3, r6
 8022ed2:	4639      	mov	r1, r7
 8022ed4:	f7ff fd8e 	bl	80229f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8022ed8:	e760      	b.n	8022d9c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022eda:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8022edc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022ede:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8022ee2:	ea4f 422a 	mov.w	r2, sl, asr #16
 8022ee6:	1429      	asrs	r1, r5, #16
 8022ee8:	fb03 2101 	mla	r1, r3, r1, r2
 8022eec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022eee:	440a      	add	r2, r1
 8022ef0:	5c61      	ldrb	r1, [r4, r1]
 8022ef2:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8022ef6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8022efa:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8022efe:	f1bc 0f00 	cmp.w	ip, #0
 8022f02:	f000 808c 	beq.w	802301e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8022f06:	7857      	ldrb	r7, [r2, #1]
 8022f08:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8022f0c:	9413      	str	r4, [sp, #76]	; 0x4c
 8022f0e:	b140      	cbz	r0, 8022f22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8022f10:	18d7      	adds	r7, r2, r3
 8022f12:	5cd3      	ldrb	r3, [r2, r3]
 8022f14:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022f18:	9310      	str	r3, [sp, #64]	; 0x40
 8022f1a:	787b      	ldrb	r3, [r7, #1]
 8022f1c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8022f20:	9314      	str	r3, [sp, #80]	; 0x50
 8022f22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022f24:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8022f26:	fb1c f200 	smulbb	r2, ip, r0
 8022f2a:	041f      	lsls	r7, r3, #16
 8022f2c:	10d2      	asrs	r2, r2, #3
 8022f2e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022f32:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 8022f36:	431f      	orrs	r7, r3
 8022f38:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 8022f3c:	9317      	str	r3, [sp, #92]	; 0x5c
 8022f3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8022f40:	041b      	lsls	r3, r3, #16
 8022f42:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 8022f46:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022f4a:	ea43 030b 	orr.w	r3, r3, fp
 8022f4e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8022f50:	4353      	muls	r3, r2
 8022f52:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8022f56:	fb04 3707 	mla	r7, r4, r7, r3
 8022f5a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8022f5e:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8022f62:	ea43 0b01 	orr.w	fp, r3, r1
 8022f66:	f1c0 0110 	rsb	r1, r0, #16
 8022f6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022f6c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022f6e:	eba1 0c0c 	sub.w	ip, r1, ip
 8022f72:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022f76:	fb0c 770b 	mla	r7, ip, fp, r7
 8022f7a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022f7e:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 8022f82:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022f86:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8022f8a:	ea4c 0c0b 	orr.w	ip, ip, fp
 8022f8e:	fb02 770c 	mla	r7, r2, ip, r7
 8022f92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022f94:	0d79      	lsrs	r1, r7, #21
 8022f96:	097f      	lsrs	r7, r7, #5
 8022f98:	8812      	ldrh	r2, [r2, #0]
 8022f9a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022f9e:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8022fa2:	430f      	orrs	r7, r1
 8022fa4:	b2bb      	uxth	r3, r7
 8022fa6:	1211      	asrs	r1, r2, #8
 8022fa8:	1218      	asrs	r0, r3, #8
 8022faa:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022fae:	fb11 f104 	smulbb	r1, r1, r4
 8022fb2:	10d7      	asrs	r7, r2, #3
 8022fb4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022fb8:	00d2      	lsls	r2, r2, #3
 8022fba:	fb00 1009 	mla	r0, r0, r9, r1
 8022fbe:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8022fc2:	10d9      	asrs	r1, r3, #3
 8022fc4:	b2d2      	uxtb	r2, r2
 8022fc6:	00db      	lsls	r3, r3, #3
 8022fc8:	fb17 f704 	smulbb	r7, r7, r4
 8022fcc:	fb12 f204 	smulbb	r2, r2, r4
 8022fd0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022fd4:	b2db      	uxtb	r3, r3
 8022fd6:	b280      	uxth	r0, r0
 8022fd8:	fb01 7109 	mla	r1, r1, r9, r7
 8022fdc:	fb03 2309 	mla	r3, r3, r9, r2
 8022fe0:	b29b      	uxth	r3, r3
 8022fe2:	b289      	uxth	r1, r1
 8022fe4:	1c42      	adds	r2, r0, #1
 8022fe6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022fea:	1c4f      	adds	r7, r1, #1
 8022fec:	1c5a      	adds	r2, r3, #1
 8022fee:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022ff2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8022ff6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022ffa:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022ffe:	0949      	lsrs	r1, r1, #5
 8023000:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023002:	4310      	orrs	r0, r2
 8023004:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8023008:	4308      	orrs	r0, r1
 802300a:	f823 0b02 	strh.w	r0, [r3], #2
 802300e:	930e      	str	r3, [sp, #56]	; 0x38
 8023010:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8023012:	449a      	add	sl, r3
 8023014:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023016:	f10e 3eff 	add.w	lr, lr, #4294967295
 802301a:	441d      	add	r5, r3
 802301c:	e6ed      	b.n	8022dfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 802301e:	2800      	cmp	r0, #0
 8023020:	f43f af7f 	beq.w	8022f22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8023024:	5cd3      	ldrb	r3, [r2, r3]
 8023026:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802302a:	9310      	str	r3, [sp, #64]	; 0x40
 802302c:	e779      	b.n	8022f22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 802302e:	b019      	add	sp, #100	; 0x64
 8023030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023034 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8023034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023038:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 802303c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 8023040:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8023044:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8023048:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 802304c:	8808      	ldrh	r0, [r1, #0]
 802304e:	fb08 470e 	mla	r7, r8, lr, r4
 8023052:	f1b8 0f00 	cmp.w	r8, #0
 8023056:	eb02 0907 	add.w	r9, r2, r7
 802305a:	db67      	blt.n	802312c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 802305c:	45c2      	cmp	sl, r8
 802305e:	dd65      	ble.n	802312c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8023060:	2c00      	cmp	r4, #0
 8023062:	db61      	blt.n	8023128 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8023064:	45a6      	cmp	lr, r4
 8023066:	dd5f      	ble.n	8023128 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8023068:	5dd2      	ldrb	r2, [r2, r7]
 802306a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 802306e:	1c62      	adds	r2, r4, #1
 8023070:	d45f      	bmi.n	8023132 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8023072:	4596      	cmp	lr, r2
 8023074:	dd5d      	ble.n	8023132 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8023076:	2d00      	cmp	r5, #0
 8023078:	d05b      	beq.n	8023132 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802307a:	f899 2001 	ldrb.w	r2, [r9, #1]
 802307e:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8023082:	f118 0801 	adds.w	r8, r8, #1
 8023086:	d458      	bmi.n	802313a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8023088:	45c2      	cmp	sl, r8
 802308a:	dd56      	ble.n	802313a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 802308c:	2e00      	cmp	r6, #0
 802308e:	d054      	beq.n	802313a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8023090:	2c00      	cmp	r4, #0
 8023092:	db50      	blt.n	8023136 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8023094:	45a6      	cmp	lr, r4
 8023096:	dd4e      	ble.n	8023136 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8023098:	f819 200e 	ldrb.w	r2, [r9, lr]
 802309c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80230a0:	3401      	adds	r4, #1
 80230a2:	d407      	bmi.n	80230b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80230a4:	45a6      	cmp	lr, r4
 80230a6:	dd05      	ble.n	80230b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80230a8:	b125      	cbz	r5, 80230b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 80230aa:	44ce      	add	lr, r9
 80230ac:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80230b0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80230b4:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80230b8:	fb15 f406 	smulbb	r4, r5, r6
 80230bc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80230c0:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 80230c4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80230c8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 80230cc:	ea43 0c0c 	orr.w	ip, r3, ip
 80230d0:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80230d4:	f1c6 0310 	rsb	r3, r6, #16
 80230d8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80230dc:	1b5b      	subs	r3, r3, r5
 80230de:	ea4e 0707 	orr.w	r7, lr, r7
 80230e2:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 80230e6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80230ea:	437d      	muls	r5, r7
 80230ec:	fb03 5c0c 	mla	ip, r3, ip, r5
 80230f0:	0403      	lsls	r3, r0, #16
 80230f2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80230f6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80230fa:	4318      	orrs	r0, r3
 80230fc:	0413      	lsls	r3, r2, #16
 80230fe:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8023102:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023106:	4313      	orrs	r3, r2
 8023108:	fb04 c000 	mla	r0, r4, r0, ip
 802310c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8023110:	fb06 0003 	mla	r0, r6, r3, r0
 8023114:	0d43      	lsrs	r3, r0, #21
 8023116:	0940      	lsrs	r0, r0, #5
 8023118:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802311c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8023120:	4318      	orrs	r0, r3
 8023122:	8008      	strh	r0, [r1, #0]
 8023124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023128:	4684      	mov	ip, r0
 802312a:	e7a0      	b.n	802306e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 802312c:	4607      	mov	r7, r0
 802312e:	4684      	mov	ip, r0
 8023130:	e7a7      	b.n	8023082 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8023132:	4607      	mov	r7, r0
 8023134:	e7a5      	b.n	8023082 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8023136:	4602      	mov	r2, r0
 8023138:	e7b2      	b.n	80230a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 802313a:	4602      	mov	r2, r0
 802313c:	e7ba      	b.n	80230b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0802313e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802313e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023142:	b093      	sub	sp, #76	; 0x4c
 8023144:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8023148:	920f      	str	r2, [sp, #60]	; 0x3c
 802314a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802314c:	9108      	str	r1, [sp, #32]
 802314e:	9306      	str	r3, [sp, #24]
 8023150:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8023154:	9010      	str	r0, [sp, #64]	; 0x40
 8023156:	6850      	ldr	r0, [r2, #4]
 8023158:	6812      	ldr	r2, [r2, #0]
 802315a:	fb00 1303 	mla	r3, r0, r3, r1
 802315e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8023162:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023164:	681b      	ldr	r3, [r3, #0]
 8023166:	9307      	str	r3, [sp, #28]
 8023168:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802316a:	685f      	ldr	r7, [r3, #4]
 802316c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023170:	3704      	adds	r7, #4
 8023172:	9b08      	ldr	r3, [sp, #32]
 8023174:	2b00      	cmp	r3, #0
 8023176:	dc03      	bgt.n	8023180 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8023178:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802317a:	2b00      	cmp	r3, #0
 802317c:	f340 81b2 	ble.w	80234e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8023180:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023182:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023186:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802318a:	1e48      	subs	r0, r1, #1
 802318c:	f102 3cff 	add.w	ip, r2, #4294967295
 8023190:	9b06      	ldr	r3, [sp, #24]
 8023192:	2b00      	cmp	r3, #0
 8023194:	f340 80a9 	ble.w	80232ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023198:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802319c:	ea4f 4326 	mov.w	r3, r6, asr #16
 80231a0:	d406      	bmi.n	80231b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80231a2:	4586      	cmp	lr, r0
 80231a4:	da04      	bge.n	80231b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80231a6:	2b00      	cmp	r3, #0
 80231a8:	db02      	blt.n	80231b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80231aa:	4563      	cmp	r3, ip
 80231ac:	f2c0 809e 	blt.w	80232ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 80231b0:	f11e 0e01 	adds.w	lr, lr, #1
 80231b4:	f100 808f 	bmi.w	80232d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80231b8:	4571      	cmp	r1, lr
 80231ba:	f2c0 808c 	blt.w	80232d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80231be:	3301      	adds	r3, #1
 80231c0:	f100 8089 	bmi.w	80232d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80231c4:	429a      	cmp	r2, r3
 80231c6:	f2c0 8086 	blt.w	80232d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80231ca:	f8dd b018 	ldr.w	fp, [sp, #24]
 80231ce:	46c8      	mov	r8, r9
 80231d0:	f1bb 0f00 	cmp.w	fp, #0
 80231d4:	f340 80a6 	ble.w	8023324 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80231d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80231da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80231dc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80231e0:	689b      	ldr	r3, [r3, #8]
 80231e2:	1422      	asrs	r2, r4, #16
 80231e4:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80231e8:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80231ec:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80231f0:	f100 80e3 	bmi.w	80233ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80231f4:	f103 3aff 	add.w	sl, r3, #4294967295
 80231f8:	4552      	cmp	r2, sl
 80231fa:	f280 80de 	bge.w	80233ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80231fe:	f1bc 0f00 	cmp.w	ip, #0
 8023202:	f2c0 80da 	blt.w	80233ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8023206:	f10e 3aff 	add.w	sl, lr, #4294967295
 802320a:	45d4      	cmp	ip, sl
 802320c:	f280 80d5 	bge.w	80233ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8023210:	b21b      	sxth	r3, r3
 8023212:	fb0c 2203 	mla	r2, ip, r3, r2
 8023216:	9d07      	ldr	r5, [sp, #28]
 8023218:	eb05 0a02 	add.w	sl, r5, r2
 802321c:	5caa      	ldrb	r2, [r5, r2]
 802321e:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8023222:	2800      	cmp	r0, #0
 8023224:	f000 80c0 	beq.w	80233a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8023228:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802322c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8023230:	920b      	str	r2, [sp, #44]	; 0x2c
 8023232:	b151      	cbz	r1, 802324a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8023234:	eb0a 0203 	add.w	r2, sl, r3
 8023238:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802323c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023240:	9309      	str	r3, [sp, #36]	; 0x24
 8023242:	7853      	ldrb	r3, [r2, #1]
 8023244:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023248:	930c      	str	r3, [sp, #48]	; 0x30
 802324a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802324c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802324e:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8023252:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023256:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802325a:	ea4c 0c03 	orr.w	ip, ip, r3
 802325e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023260:	041b      	lsls	r3, r3, #16
 8023262:	fb10 f201 	smulbb	r2, r0, r1
 8023266:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802326a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 802326e:	10d2      	asrs	r2, r2, #3
 8023270:	432b      	orrs	r3, r5
 8023272:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8023276:	4353      	muls	r3, r2
 8023278:	fb0a 330c 	mla	r3, sl, ip, r3
 802327c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8023280:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023284:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023288:	ea4c 0e0e 	orr.w	lr, ip, lr
 802328c:	f1c1 0c10 	rsb	ip, r1, #16
 8023290:	ebac 0c00 	sub.w	ip, ip, r0
 8023294:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8023298:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802329c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802329e:	0418      	lsls	r0, r3, #16
 80232a0:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80232a4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80232a8:	4318      	orrs	r0, r3
 80232aa:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80232ae:	fb02 c200 	mla	r2, r2, r0, ip
 80232b2:	0d53      	lsrs	r3, r2, #21
 80232b4:	0952      	lsrs	r2, r2, #5
 80232b6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80232ba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80232be:	431a      	orrs	r2, r3
 80232c0:	f8a8 2000 	strh.w	r2, [r8]
 80232c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80232c6:	441c      	add	r4, r3
 80232c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80232ca:	f108 0802 	add.w	r8, r8, #2
 80232ce:	441e      	add	r6, r3
 80232d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80232d4:	e77c      	b.n	80231d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80232d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80232d8:	441c      	add	r4, r3
 80232da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80232dc:	441e      	add	r6, r3
 80232de:	9b06      	ldr	r3, [sp, #24]
 80232e0:	3b01      	subs	r3, #1
 80232e2:	9306      	str	r3, [sp, #24]
 80232e4:	f109 0902 	add.w	r9, r9, #2
 80232e8:	e752      	b.n	8023190 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80232ea:	d020      	beq.n	802332e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80232ec:	9b06      	ldr	r3, [sp, #24]
 80232ee:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80232f0:	3b01      	subs	r3, #1
 80232f2:	fb00 4003 	mla	r0, r0, r3, r4
 80232f6:	1400      	asrs	r0, r0, #16
 80232f8:	f53f af67 	bmi.w	80231ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80232fc:	3901      	subs	r1, #1
 80232fe:	4288      	cmp	r0, r1
 8023300:	f6bf af63 	bge.w	80231ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023304:	9920      	ldr	r1, [sp, #128]	; 0x80
 8023306:	fb01 6303 	mla	r3, r1, r3, r6
 802330a:	141b      	asrs	r3, r3, #16
 802330c:	f53f af5d 	bmi.w	80231ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023310:	3a01      	subs	r2, #1
 8023312:	4293      	cmp	r3, r2
 8023314:	f6bf af59 	bge.w	80231ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023318:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802331c:	46ca      	mov	sl, r9
 802331e:	f1b8 0f00 	cmp.w	r8, #0
 8023322:	dc67      	bgt.n	80233f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8023324:	9b06      	ldr	r3, [sp, #24]
 8023326:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802332a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802332e:	9b08      	ldr	r3, [sp, #32]
 8023330:	2b00      	cmp	r3, #0
 8023332:	f340 80d7 	ble.w	80234e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8023336:	ee30 0a04 	vadd.f32	s0, s0, s8
 802333a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802333e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023342:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023344:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023348:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802334c:	eeb0 6a62 	vmov.f32	s12, s5
 8023350:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023354:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023358:	ee77 2a62 	vsub.f32	s5, s14, s5
 802335c:	ee16 4a10 	vmov	r4, s12
 8023360:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023364:	eeb0 6a43 	vmov.f32	s12, s6
 8023368:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802336c:	ee12 2a90 	vmov	r2, s5
 8023370:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023374:	fb92 f3f3 	sdiv	r3, r2, r3
 8023378:	ee13 2a10 	vmov	r2, s6
 802337c:	931f      	str	r3, [sp, #124]	; 0x7c
 802337e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023380:	fb92 f3f3 	sdiv	r3, r2, r3
 8023384:	9320      	str	r3, [sp, #128]	; 0x80
 8023386:	9b08      	ldr	r3, [sp, #32]
 8023388:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802338a:	3b01      	subs	r3, #1
 802338c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023390:	9308      	str	r3, [sp, #32]
 8023392:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023394:	bf08      	it	eq
 8023396:	4613      	moveq	r3, r2
 8023398:	ee16 6a10 	vmov	r6, s12
 802339c:	9306      	str	r3, [sp, #24]
 802339e:	eeb0 3a67 	vmov.f32	s6, s15
 80233a2:	eef0 2a47 	vmov.f32	s5, s14
 80233a6:	e6e4      	b.n	8023172 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80233a8:	2900      	cmp	r1, #0
 80233aa:	f43f af4e 	beq.w	802324a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80233ae:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80233b2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80233b6:	9309      	str	r3, [sp, #36]	; 0x24
 80233b8:	e747      	b.n	802324a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80233ba:	f112 0a01 	adds.w	sl, r2, #1
 80233be:	d481      	bmi.n	80232c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80233c0:	4553      	cmp	r3, sl
 80233c2:	f6ff af7f 	blt.w	80232c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80233c6:	f11c 0a01 	adds.w	sl, ip, #1
 80233ca:	f53f af7b 	bmi.w	80232c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80233ce:	45d6      	cmp	lr, sl
 80233d0:	f6ff af78 	blt.w	80232c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80233d4:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80233d8:	b21b      	sxth	r3, r3
 80233da:	fa0f f28e 	sxth.w	r2, lr
 80233de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80233e2:	9201      	str	r2, [sp, #4]
 80233e4:	9300      	str	r3, [sp, #0]
 80233e6:	9a07      	ldr	r2, [sp, #28]
 80233e8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80233ea:	463b      	mov	r3, r7
 80233ec:	4641      	mov	r1, r8
 80233ee:	f7ff fe21 	bl	8023034 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80233f2:	e767      	b.n	80232c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80233f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80233f6:	9d07      	ldr	r5, [sp, #28]
 80233f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80233fc:	1422      	asrs	r2, r4, #16
 80233fe:	1431      	asrs	r1, r6, #16
 8023400:	fb03 2101 	mla	r1, r3, r1, r2
 8023404:	9a07      	ldr	r2, [sp, #28]
 8023406:	440a      	add	r2, r1
 8023408:	5c69      	ldrb	r1, [r5, r1]
 802340a:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 802340e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023412:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8023416:	f1be 0f00 	cmp.w	lr, #0
 802341a:	d05c      	beq.n	80234d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 802341c:	f892 c001 	ldrb.w	ip, [r2, #1]
 8023420:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 8023424:	950d      	str	r5, [sp, #52]	; 0x34
 8023426:	b150      	cbz	r0, 802343e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8023428:	eb02 0c03 	add.w	ip, r2, r3
 802342c:	5cd3      	ldrb	r3, [r2, r3]
 802342e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023432:	930a      	str	r3, [sp, #40]	; 0x28
 8023434:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8023438:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802343c:	930e      	str	r3, [sp, #56]	; 0x38
 802343e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023440:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8023442:	fb1e f200 	smulbb	r2, lr, r0
 8023446:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802344a:	10d2      	asrs	r2, r2, #3
 802344c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8023450:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8023454:	ea4c 0c03 	orr.w	ip, ip, r3
 8023458:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 802345c:	9311      	str	r3, [sp, #68]	; 0x44
 802345e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023460:	041b      	lsls	r3, r3, #16
 8023462:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8023466:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802346a:	ea43 030b 	orr.w	r3, r3, fp
 802346e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023470:	4353      	muls	r3, r2
 8023472:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023476:	fb05 3c0c 	mla	ip, r5, ip, r3
 802347a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802347e:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8023482:	ea43 0b01 	orr.w	fp, r3, r1
 8023486:	f1c0 0110 	rsb	r1, r0, #16
 802348a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802348c:	eba1 0e0e 	sub.w	lr, r1, lr
 8023490:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8023494:	fb0e cc0b 	mla	ip, lr, fp, ip
 8023498:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 802349c:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 80234a0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80234a4:	ea4b 0e0e 	orr.w	lr, fp, lr
 80234a8:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80234ac:	fb02 cc0e 	mla	ip, r2, lr, ip
 80234b0:	ea4f 535c 	mov.w	r3, ip, lsr #21
 80234b4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80234b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80234bc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80234c0:	ea43 0c0c 	orr.w	ip, r3, ip
 80234c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80234c6:	f82a cb02 	strh.w	ip, [sl], #2
 80234ca:	441c      	add	r4, r3
 80234cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80234ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80234d2:	441e      	add	r6, r3
 80234d4:	e723      	b.n	802331e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80234d6:	2800      	cmp	r0, #0
 80234d8:	d0b1      	beq.n	802343e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80234da:	5cd3      	ldrb	r3, [r2, r3]
 80234dc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80234e0:	930a      	str	r3, [sp, #40]	; 0x28
 80234e2:	e7ac      	b.n	802343e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80234e4:	b013      	add	sp, #76	; 0x4c
 80234e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080234ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 80234ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234ee:	880d      	ldrh	r5, [r1, #0]
 80234f0:	b087      	sub	sp, #28
 80234f2:	10ef      	asrs	r7, r5, #3
 80234f4:	ea4f 2a25 	mov.w	sl, r5, asr #8
 80234f8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80234fc:	00ed      	lsls	r5, r5, #3
 80234fe:	9701      	str	r7, [sp, #4]
 8023500:	b2ed      	uxtb	r5, r5
 8023502:	9502      	str	r5, [sp, #8]
 8023504:	9d01      	ldr	r5, [sp, #4]
 8023506:	9103      	str	r1, [sp, #12]
 8023508:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 802350c:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 8023510:	9902      	ldr	r1, [sp, #8]
 8023512:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8023516:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 802351a:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 802351e:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 8023522:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 8023526:	022d      	lsls	r5, r5, #8
 8023528:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 802352c:	fb06 0709 	mla	r7, r6, r9, r0
 8023530:	430d      	orrs	r5, r1
 8023532:	2e00      	cmp	r6, #0
 8023534:	eb02 0c07 	add.w	ip, r2, r7
 8023538:	9505      	str	r5, [sp, #20]
 802353a:	f2c0 80b6 	blt.w	80236aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 802353e:	45b3      	cmp	fp, r6
 8023540:	f340 80b3 	ble.w	80236aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8023544:	2800      	cmp	r0, #0
 8023546:	f2c0 80ae 	blt.w	80236a6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 802354a:	4581      	cmp	r9, r0
 802354c:	f340 80ab 	ble.w	80236a6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8023550:	5dd7      	ldrb	r7, [r2, r7]
 8023552:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023556:	441f      	add	r7, r3
 8023558:	1c42      	adds	r2, r0, #1
 802355a:	f100 80a9 	bmi.w	80236b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802355e:	4591      	cmp	r9, r2
 8023560:	f340 80a6 	ble.w	80236b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8023564:	2c00      	cmp	r4, #0
 8023566:	f000 80a3 	beq.w	80236b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802356a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802356e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023572:	441d      	add	r5, r3
 8023574:	3601      	adds	r6, #1
 8023576:	f100 809f 	bmi.w	80236b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 802357a:	45b3      	cmp	fp, r6
 802357c:	f340 809c 	ble.w	80236b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8023580:	f1be 0f00 	cmp.w	lr, #0
 8023584:	f000 8098 	beq.w	80236b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8023588:	2800      	cmp	r0, #0
 802358a:	f2c0 8093 	blt.w	80236b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 802358e:	4581      	cmp	r9, r0
 8023590:	f340 8090 	ble.w	80236b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8023594:	f81c 6009 	ldrb.w	r6, [ip, r9]
 8023598:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802359c:	441e      	add	r6, r3
 802359e:	3001      	adds	r0, #1
 80235a0:	f100 808d 	bmi.w	80236be <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80235a4:	4581      	cmp	r9, r0
 80235a6:	f340 808a 	ble.w	80236be <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80235aa:	2c00      	cmp	r4, #0
 80235ac:	f000 8087 	beq.w	80236be <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 80235b0:	44e1      	add	r9, ip
 80235b2:	f899 2001 	ldrb.w	r2, [r9, #1]
 80235b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80235ba:	4413      	add	r3, r2
 80235bc:	b2a4      	uxth	r4, r4
 80235be:	fa1f fe8e 	uxth.w	lr, lr
 80235c2:	fb04 fb0e 	mul.w	fp, r4, lr
 80235c6:	0124      	lsls	r4, r4, #4
 80235c8:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 80235cc:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 80235d0:	eba4 040b 	sub.w	r4, r4, fp
 80235d4:	fa1f f08e 	uxth.w	r0, lr
 80235d8:	b2a2      	uxth	r2, r4
 80235da:	78ac      	ldrb	r4, [r5, #2]
 80235dc:	f897 c002 	ldrb.w	ip, [r7, #2]
 80235e0:	9901      	ldr	r1, [sp, #4]
 80235e2:	eba9 0900 	sub.w	r9, r9, r0
 80235e6:	fa1f f989 	uxth.w	r9, r9
 80235ea:	4354      	muls	r4, r2
 80235ec:	fb09 440c 	mla	r4, r9, ip, r4
 80235f0:	f896 c002 	ldrb.w	ip, [r6, #2]
 80235f4:	fb00 440c 	mla	r4, r0, ip, r4
 80235f8:	f893 c002 	ldrb.w	ip, [r3, #2]
 80235fc:	fa1f fe88 	uxth.w	lr, r8
 8023600:	ea6f 0808 	mvn.w	r8, r8
 8023604:	fa5f f888 	uxtb.w	r8, r8
 8023608:	fb0b 4c0c 	mla	ip, fp, ip, r4
 802360c:	fb1a fa08 	smulbb	sl, sl, r8
 8023610:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8023614:	fb0c ac0e 	mla	ip, ip, lr, sl
 8023618:	f895 a001 	ldrb.w	sl, [r5, #1]
 802361c:	787c      	ldrb	r4, [r7, #1]
 802361e:	782d      	ldrb	r5, [r5, #0]
 8023620:	783f      	ldrb	r7, [r7, #0]
 8023622:	fb02 fa0a 	mul.w	sl, r2, sl
 8023626:	fb09 aa04 	mla	sl, r9, r4, sl
 802362a:	7874      	ldrb	r4, [r6, #1]
 802362c:	436a      	muls	r2, r5
 802362e:	7835      	ldrb	r5, [r6, #0]
 8023630:	fb00 aa04 	mla	sl, r0, r4, sl
 8023634:	fb09 2207 	mla	r2, r9, r7, r2
 8023638:	785c      	ldrb	r4, [r3, #1]
 802363a:	781b      	ldrb	r3, [r3, #0]
 802363c:	fb00 2005 	mla	r0, r0, r5, r2
 8023640:	fb0b a404 	mla	r4, fp, r4, sl
 8023644:	fb0b 0b03 	mla	fp, fp, r3, r0
 8023648:	9b02      	ldr	r3, [sp, #8]
 802364a:	fb11 fa08 	smulbb	sl, r1, r8
 802364e:	fa1f fc8c 	uxth.w	ip, ip
 8023652:	fb13 f808 	smulbb	r8, r3, r8
 8023656:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 802365a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802365e:	fb04 a40e 	mla	r4, r4, lr, sl
 8023662:	f10c 0301 	add.w	r3, ip, #1
 8023666:	fb0b 8e0e 	mla	lr, fp, lr, r8
 802366a:	fa1f fe8e 	uxth.w	lr, lr
 802366e:	b2a4      	uxth	r4, r4
 8023670:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8023674:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 8023678:	f104 0a01 	add.w	sl, r4, #1
 802367c:	f10e 0c01 	add.w	ip, lr, #1
 8023680:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8023684:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8023688:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802368c:	0964      	lsrs	r4, r4, #5
 802368e:	ea4c 0c03 	orr.w	ip, ip, r3
 8023692:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8023696:	9b03      	ldr	r3, [sp, #12]
 8023698:	ea4c 0c04 	orr.w	ip, ip, r4
 802369c:	f8a3 c000 	strh.w	ip, [r3]
 80236a0:	b007      	add	sp, #28
 80236a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80236a6:	af05      	add	r7, sp, #20
 80236a8:	e756      	b.n	8023558 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 80236aa:	ad05      	add	r5, sp, #20
 80236ac:	462f      	mov	r7, r5
 80236ae:	e761      	b.n	8023574 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 80236b0:	ad05      	add	r5, sp, #20
 80236b2:	e75f      	b.n	8023574 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 80236b4:	ae05      	add	r6, sp, #20
 80236b6:	e772      	b.n	802359e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 80236b8:	ab05      	add	r3, sp, #20
 80236ba:	461e      	mov	r6, r3
 80236bc:	e77e      	b.n	80235bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 80236be:	ab05      	add	r3, sp, #20
 80236c0:	e77c      	b.n	80235bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

080236c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80236c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236c6:	b095      	sub	sp, #84	; 0x54
 80236c8:	9212      	str	r2, [sp, #72]	; 0x48
 80236ca:	9309      	str	r3, [sp, #36]	; 0x24
 80236cc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80236ce:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80236d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80236d4:	910e      	str	r1, [sp, #56]	; 0x38
 80236d6:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 80236da:	9013      	str	r0, [sp, #76]	; 0x4c
 80236dc:	6850      	ldr	r0, [r2, #4]
 80236de:	6812      	ldr	r2, [r2, #0]
 80236e0:	fb00 1303 	mla	r3, r0, r3, r1
 80236e4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80236e8:	930a      	str	r3, [sp, #40]	; 0x28
 80236ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80236ec:	681b      	ldr	r3, [r3, #0]
 80236ee:	930d      	str	r3, [sp, #52]	; 0x34
 80236f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80236f2:	685c      	ldr	r4, [r3, #4]
 80236f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80236f6:	43db      	mvns	r3, r3
 80236f8:	b2db      	uxtb	r3, r3
 80236fa:	3404      	adds	r4, #4
 80236fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80236fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023700:	2b00      	cmp	r3, #0
 8023702:	dc03      	bgt.n	802370c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8023704:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8023706:	2b00      	cmp	r3, #0
 8023708:	f340 8255 	ble.w	8023bb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 802370c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802370e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023712:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023716:	1e48      	subs	r0, r1, #1
 8023718:	1e55      	subs	r5, r2, #1
 802371a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802371c:	2b00      	cmp	r3, #0
 802371e:	f340 80f9 	ble.w	8023914 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8023722:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8023724:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023726:	1436      	asrs	r6, r6, #16
 8023728:	ea4f 4323 	mov.w	r3, r3, asr #16
 802372c:	d406      	bmi.n	802373c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802372e:	4286      	cmp	r6, r0
 8023730:	da04      	bge.n	802373c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023732:	2b00      	cmp	r3, #0
 8023734:	db02      	blt.n	802373c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8023736:	42ab      	cmp	r3, r5
 8023738:	f2c0 80ed 	blt.w	8023916 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 802373c:	3601      	adds	r6, #1
 802373e:	f100 80da 	bmi.w	80238f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8023742:	42b1      	cmp	r1, r6
 8023744:	f2c0 80d7 	blt.w	80238f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8023748:	3301      	adds	r3, #1
 802374a:	f100 80d4 	bmi.w	80238f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802374e:	429a      	cmp	r2, r3
 8023750:	f2c0 80d1 	blt.w	80238f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8023754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023756:	9311      	str	r3, [sp, #68]	; 0x44
 8023758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802375a:	930c      	str	r3, [sp, #48]	; 0x30
 802375c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802375e:	2b00      	cmp	r3, #0
 8023760:	f340 80fa 	ble.w	8023958 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8023764:	9826      	ldr	r0, [sp, #152]	; 0x98
 8023766:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023768:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802376a:	68c6      	ldr	r6, [r0, #12]
 802376c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802376e:	141d      	asrs	r5, r3, #16
 8023770:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023774:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023776:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8023778:	1400      	asrs	r0, r0, #16
 802377a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802377e:	6892      	ldr	r2, [r2, #8]
 8023780:	f100 813e 	bmi.w	8023a00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023784:	1e57      	subs	r7, r2, #1
 8023786:	42b8      	cmp	r0, r7
 8023788:	f280 813a 	bge.w	8023a00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802378c:	2d00      	cmp	r5, #0
 802378e:	f2c0 8137 	blt.w	8023a00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8023792:	1e77      	subs	r7, r6, #1
 8023794:	42bd      	cmp	r5, r7
 8023796:	f280 8133 	bge.w	8023a00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802379a:	b212      	sxth	r2, r2
 802379c:	fb05 0002 	mla	r0, r5, r2, r0
 80237a0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80237a2:	f815 a000 	ldrb.w	sl, [r5, r0]
 80237a6:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 80237aa:	182e      	adds	r6, r5, r0
 80237ac:	eb04 050a 	add.w	r5, r4, sl
 80237b0:	2b00      	cmp	r3, #0
 80237b2:	f000 8117 	beq.w	80239e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80237b6:	f896 c001 	ldrb.w	ip, [r6, #1]
 80237ba:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80237be:	44a4      	add	ip, r4
 80237c0:	2900      	cmp	r1, #0
 80237c2:	f000 8117 	beq.w	80239f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 80237c6:	18b0      	adds	r0, r6, r2
 80237c8:	5cb2      	ldrb	r2, [r6, r2]
 80237ca:	7840      	ldrb	r0, [r0, #1]
 80237cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80237d0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80237d4:	4422      	add	r2, r4
 80237d6:	4420      	add	r0, r4
 80237d8:	b29b      	uxth	r3, r3
 80237da:	b289      	uxth	r1, r1
 80237dc:	fb03 f901 	mul.w	r9, r3, r1
 80237e0:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80237e4:	011b      	lsls	r3, r3, #4
 80237e6:	b289      	uxth	r1, r1
 80237e8:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80237ec:	f895 b002 	ldrb.w	fp, [r5, #2]
 80237f0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80237f2:	f814 a00a 	ldrb.w	sl, [r4, sl]
 80237f6:	f8b6 e000 	ldrh.w	lr, [r6]
 80237fa:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 80237fe:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8023802:	eba3 0309 	sub.w	r3, r3, r9
 8023806:	b29b      	uxth	r3, r3
 8023808:	eba8 0801 	sub.w	r8, r8, r1
 802380c:	fa1f f888 	uxth.w	r8, r8
 8023810:	435f      	muls	r7, r3
 8023812:	fb08 770b 	mla	r7, r8, fp, r7
 8023816:	f892 b002 	ldrb.w	fp, [r2, #2]
 802381a:	9310      	str	r3, [sp, #64]	; 0x40
 802381c:	fb01 770b 	mla	r7, r1, fp, r7
 8023820:	f890 b002 	ldrb.w	fp, [r0, #2]
 8023824:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023826:	fb09 770b 	mla	r7, r9, fp, r7
 802382a:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 802382e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8023832:	fb1b fb03 	smulbb	fp, fp, r3
 8023836:	f3c7 2707 	ubfx	r7, r7, #8, #8
 802383a:	fb07 b706 	mla	r7, r7, r6, fp
 802383e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023840:	f895 b001 	ldrb.w	fp, [r5, #1]
 8023844:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8023848:	f89c c000 	ldrb.w	ip, [ip]
 802384c:	435d      	muls	r5, r3
 802384e:	fb08 550b 	mla	r5, r8, fp, r5
 8023852:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023858:	fb01 550b 	mla	r5, r1, fp, r5
 802385c:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023860:	fb09 550b 	mla	r5, r9, fp, r5
 8023864:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8023868:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 802386c:	fb1b fb03 	smulbb	fp, fp, r3
 8023870:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023872:	fb03 f30c 	mul.w	r3, r3, ip
 8023876:	f892 c000 	ldrb.w	ip, [r2]
 802387a:	fb08 330a 	mla	r3, r8, sl, r3
 802387e:	fb01 330c 	mla	r3, r1, ip, r3
 8023882:	f890 c000 	ldrb.w	ip, [r0]
 8023886:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802388a:	fb09 3c0c 	mla	ip, r9, ip, r3
 802388e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023890:	fa5f fe8e 	uxtb.w	lr, lr
 8023894:	b2bf      	uxth	r7, r7
 8023896:	fb1e fe03 	smulbb	lr, lr, r3
 802389a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802389e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80238a2:	fb05 b506 	mla	r5, r5, r6, fp
 80238a6:	1c7b      	adds	r3, r7, #1
 80238a8:	fb0c e606 	mla	r6, ip, r6, lr
 80238ac:	b2ad      	uxth	r5, r5
 80238ae:	b2b6      	uxth	r6, r6
 80238b0:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80238b4:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 80238b8:	f105 0b01 	add.w	fp, r5, #1
 80238bc:	1c77      	adds	r7, r6, #1
 80238be:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80238c2:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 80238c6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80238ca:	096d      	lsrs	r5, r5, #5
 80238cc:	431f      	orrs	r7, r3
 80238ce:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80238d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80238d4:	433d      	orrs	r5, r7
 80238d6:	801d      	strh	r5, [r3, #0]
 80238d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80238da:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80238dc:	3302      	adds	r3, #2
 80238de:	930c      	str	r3, [sp, #48]	; 0x30
 80238e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80238e2:	4413      	add	r3, r2
 80238e4:	931f      	str	r3, [sp, #124]	; 0x7c
 80238e6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80238e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80238ea:	4413      	add	r3, r2
 80238ec:	9320      	str	r3, [sp, #128]	; 0x80
 80238ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80238f0:	3b01      	subs	r3, #1
 80238f2:	9311      	str	r3, [sp, #68]	; 0x44
 80238f4:	e732      	b.n	802375c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80238f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80238f8:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80238fa:	4433      	add	r3, r6
 80238fc:	931f      	str	r3, [sp, #124]	; 0x7c
 80238fe:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8023900:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023902:	4433      	add	r3, r6
 8023904:	9320      	str	r3, [sp, #128]	; 0x80
 8023906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023908:	3b01      	subs	r3, #1
 802390a:	9309      	str	r3, [sp, #36]	; 0x24
 802390c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802390e:	3302      	adds	r3, #2
 8023910:	930a      	str	r3, [sp, #40]	; 0x28
 8023912:	e702      	b.n	802371a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8023914:	d027      	beq.n	8023966 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8023916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023918:	9821      	ldr	r0, [sp, #132]	; 0x84
 802391a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 802391c:	3b01      	subs	r3, #1
 802391e:	fb00 5003 	mla	r0, r0, r3, r5
 8023922:	1400      	asrs	r0, r0, #16
 8023924:	f53f af16 	bmi.w	8023754 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023928:	3901      	subs	r1, #1
 802392a:	4288      	cmp	r0, r1
 802392c:	f6bf af12 	bge.w	8023754 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023930:	9922      	ldr	r1, [sp, #136]	; 0x88
 8023932:	9820      	ldr	r0, [sp, #128]	; 0x80
 8023934:	fb01 0303 	mla	r3, r1, r3, r0
 8023938:	141b      	asrs	r3, r3, #16
 802393a:	f53f af0b 	bmi.w	8023754 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802393e:	3a01      	subs	r2, #1
 8023940:	4293      	cmp	r3, r2
 8023942:	f6bf af07 	bge.w	8023754 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023948:	9311      	str	r3, [sp, #68]	; 0x44
 802394a:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 802394e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023950:	930c      	str	r3, [sp, #48]	; 0x30
 8023952:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023954:	2b00      	cmp	r3, #0
 8023956:	dc70      	bgt.n	8023a3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8023958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802395a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802395c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023960:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023964:	930a      	str	r3, [sp, #40]	; 0x28
 8023966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023968:	2b00      	cmp	r3, #0
 802396a:	f340 8124 	ble.w	8023bb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 802396e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023972:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023976:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802397a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802397c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023980:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023984:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023988:	eef0 6a62 	vmov.f32	s13, s5
 802398c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023990:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023994:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023998:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 802399c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80239a0:	eef0 6a43 	vmov.f32	s13, s6
 80239a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80239a8:	ee12 2a90 	vmov	r2, s5
 80239ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80239b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80239b4:	ee13 2a10 	vmov	r2, s6
 80239b8:	9321      	str	r3, [sp, #132]	; 0x84
 80239ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80239bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80239c0:	9322      	str	r3, [sp, #136]	; 0x88
 80239c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80239c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80239c6:	3b01      	subs	r3, #1
 80239c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80239cc:	930e      	str	r3, [sp, #56]	; 0x38
 80239ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80239d0:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 80239d4:	bf08      	it	eq
 80239d6:	4613      	moveq	r3, r2
 80239d8:	9309      	str	r3, [sp, #36]	; 0x24
 80239da:	eeb0 3a67 	vmov.f32	s6, s15
 80239de:	eef0 2a47 	vmov.f32	s5, s14
 80239e2:	e68c      	b.n	80236fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80239e4:	b149      	cbz	r1, 80239fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 80239e6:	5cb2      	ldrb	r2, [r6, r2]
 80239e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80239ec:	4422      	add	r2, r4
 80239ee:	4628      	mov	r0, r5
 80239f0:	46ac      	mov	ip, r5
 80239f2:	e6f1      	b.n	80237d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80239f4:	4628      	mov	r0, r5
 80239f6:	462a      	mov	r2, r5
 80239f8:	e6ee      	b.n	80237d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80239fa:	4628      	mov	r0, r5
 80239fc:	462a      	mov	r2, r5
 80239fe:	e7f7      	b.n	80239f0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8023a00:	1c47      	adds	r7, r0, #1
 8023a02:	f53f af69 	bmi.w	80238d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023a06:	42ba      	cmp	r2, r7
 8023a08:	f6ff af66 	blt.w	80238d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023a0c:	1c6f      	adds	r7, r5, #1
 8023a0e:	f53f af63 	bmi.w	80238d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023a12:	42be      	cmp	r6, r7
 8023a14:	f6ff af60 	blt.w	80238d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023a18:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8023a1a:	9002      	str	r0, [sp, #8]
 8023a1c:	b236      	sxth	r6, r6
 8023a1e:	b212      	sxth	r2, r2
 8023a20:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8023a24:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8023a28:	9200      	str	r2, [sp, #0]
 8023a2a:	9601      	str	r6, [sp, #4]
 8023a2c:	4623      	mov	r3, r4
 8023a2e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8023a32:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8023a34:	f7ff fd59 	bl	80234ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8023a38:	e74e      	b.n	80238d8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023a3a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023a3c:	9820      	ldr	r0, [sp, #128]	; 0x80
 8023a3e:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8023a40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023a42:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8023a46:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8023a48:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023a4c:	142d      	asrs	r5, r5, #16
 8023a4e:	1400      	asrs	r0, r0, #16
 8023a50:	fb02 5000 	mla	r0, r2, r0, r5
 8023a54:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023a56:	f815 9000 	ldrb.w	r9, [r5, r0]
 8023a5a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023a5e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8023a62:	182e      	adds	r6, r5, r0
 8023a64:	eb04 0509 	add.w	r5, r4, r9
 8023a68:	2b00      	cmp	r3, #0
 8023a6a:	f000 8096 	beq.w	8023b9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8023a6e:	7877      	ldrb	r7, [r6, #1]
 8023a70:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023a74:	4427      	add	r7, r4
 8023a76:	2900      	cmp	r1, #0
 8023a78:	f000 8097 	beq.w	8023baa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8023a7c:	18b0      	adds	r0, r6, r2
 8023a7e:	5cb2      	ldrb	r2, [r6, r2]
 8023a80:	7840      	ldrb	r0, [r0, #1]
 8023a82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023a86:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023a8a:	4422      	add	r2, r4
 8023a8c:	4420      	add	r0, r4
 8023a8e:	b29b      	uxth	r3, r3
 8023a90:	b289      	uxth	r1, r1
 8023a92:	fb03 f801 	mul.w	r8, r3, r1
 8023a96:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8023a98:	f895 b002 	ldrb.w	fp, [r5, #2]
 8023a9c:	f8b6 c000 	ldrh.w	ip, [r6]
 8023aa0:	78be      	ldrb	r6, [r7, #2]
 8023aa2:	f814 9009 	ldrb.w	r9, [r4, r9]
 8023aa6:	011b      	lsls	r3, r3, #4
 8023aa8:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8023aac:	b289      	uxth	r1, r1
 8023aae:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023ab2:	eba3 0308 	sub.w	r3, r3, r8
 8023ab6:	b29b      	uxth	r3, r3
 8023ab8:	ebae 0e01 	sub.w	lr, lr, r1
 8023abc:	fa1f fe8e 	uxth.w	lr, lr
 8023ac0:	435e      	muls	r6, r3
 8023ac2:	fb0e 660b 	mla	r6, lr, fp, r6
 8023ac6:	f892 b002 	ldrb.w	fp, [r2, #2]
 8023aca:	9310      	str	r3, [sp, #64]	; 0x40
 8023acc:	fb01 660b 	mla	r6, r1, fp, r6
 8023ad0:	f890 b002 	ldrb.w	fp, [r0, #2]
 8023ad4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023ad6:	fb08 660b 	mla	r6, r8, fp, r6
 8023ada:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8023ade:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 8023ae2:	fb1b fb03 	smulbb	fp, fp, r3
 8023ae6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8023aea:	fb06 b60a 	mla	r6, r6, sl, fp
 8023aee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023af0:	f895 b001 	ldrb.w	fp, [r5, #1]
 8023af4:	787d      	ldrb	r5, [r7, #1]
 8023af6:	783f      	ldrb	r7, [r7, #0]
 8023af8:	435d      	muls	r5, r3
 8023afa:	fb0e 550b 	mla	r5, lr, fp, r5
 8023afe:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023b04:	fb01 550b 	mla	r5, r1, fp, r5
 8023b08:	f890 b001 	ldrb.w	fp, [r0, #1]
 8023b0c:	fb08 550b 	mla	r5, r8, fp, r5
 8023b10:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8023b14:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8023b18:	fb1b fb03 	smulbb	fp, fp, r3
 8023b1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8023b1e:	437b      	muls	r3, r7
 8023b20:	7817      	ldrb	r7, [r2, #0]
 8023b22:	fb0e 3309 	mla	r3, lr, r9, r3
 8023b26:	fb01 3307 	mla	r3, r1, r7, r3
 8023b2a:	7807      	ldrb	r7, [r0, #0]
 8023b2c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8023b30:	fb08 3707 	mla	r7, r8, r7, r3
 8023b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023b36:	fa5f fc8c 	uxtb.w	ip, ip
 8023b3a:	fb1c fc03 	smulbb	ip, ip, r3
 8023b3e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8023b42:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023b46:	fb05 b50a 	mla	r5, r5, sl, fp
 8023b4a:	fb07 c70a 	mla	r7, r7, sl, ip
 8023b4e:	b2b6      	uxth	r6, r6
 8023b50:	b2ad      	uxth	r5, r5
 8023b52:	b2bf      	uxth	r7, r7
 8023b54:	1c73      	adds	r3, r6, #1
 8023b56:	1c7a      	adds	r2, r7, #1
 8023b58:	f105 0b01 	add.w	fp, r5, #1
 8023b5c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8023b60:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8023b64:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8023b68:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023b6c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 8023b70:	096d      	lsrs	r5, r5, #5
 8023b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023b74:	4316      	orrs	r6, r2
 8023b76:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8023b7a:	432e      	orrs	r6, r5
 8023b7c:	f823 6b02 	strh.w	r6, [r3], #2
 8023b80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8023b82:	930c      	str	r3, [sp, #48]	; 0x30
 8023b84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023b86:	4413      	add	r3, r2
 8023b88:	931f      	str	r3, [sp, #124]	; 0x7c
 8023b8a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8023b8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023b8e:	4413      	add	r3, r2
 8023b90:	9320      	str	r3, [sp, #128]	; 0x80
 8023b92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8023b94:	3b01      	subs	r3, #1
 8023b96:	9311      	str	r3, [sp, #68]	; 0x44
 8023b98:	e6db      	b.n	8023952 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8023b9a:	b149      	cbz	r1, 8023bb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8023b9c:	5cb2      	ldrb	r2, [r6, r2]
 8023b9e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023ba2:	4422      	add	r2, r4
 8023ba4:	4628      	mov	r0, r5
 8023ba6:	462f      	mov	r7, r5
 8023ba8:	e771      	b.n	8023a8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8023baa:	4628      	mov	r0, r5
 8023bac:	462a      	mov	r2, r5
 8023bae:	e76e      	b.n	8023a8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8023bb0:	4628      	mov	r0, r5
 8023bb2:	462a      	mov	r2, r5
 8023bb4:	e7f7      	b.n	8023ba6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8023bb6:	b015      	add	sp, #84	; 0x54
 8023bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023bbc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8023bbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023bc0:	880f      	ldrh	r7, [r1, #0]
 8023bc2:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8023bc6:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8023bca:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8023bce:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8023bd2:	023c      	lsls	r4, r7, #8
 8023bd4:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 8023bd8:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 8023bdc:	017c      	lsls	r4, r7, #5
 8023bde:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 8023be2:	00ff      	lsls	r7, r7, #3
 8023be4:	ea4b 0404 	orr.w	r4, fp, r4
 8023be8:	b2ff      	uxtb	r7, r7
 8023bea:	fb05 ca0e 	mla	sl, r5, lr, ip
 8023bee:	4327      	orrs	r7, r4
 8023bf0:	2d00      	cmp	r5, #0
 8023bf2:	eb02 080a 	add.w	r8, r2, sl
 8023bf6:	9701      	str	r7, [sp, #4]
 8023bf8:	db7e      	blt.n	8023cf8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8023bfa:	45a9      	cmp	r9, r5
 8023bfc:	dd7c      	ble.n	8023cf8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8023bfe:	f1bc 0f00 	cmp.w	ip, #0
 8023c02:	db77      	blt.n	8023cf4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8023c04:	45e6      	cmp	lr, ip
 8023c06:	dd75      	ble.n	8023cf4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8023c08:	f812 700a 	ldrb.w	r7, [r2, sl]
 8023c0c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023c10:	441f      	add	r7, r3
 8023c12:	f11c 0201 	adds.w	r2, ip, #1
 8023c16:	d472      	bmi.n	8023cfe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8023c18:	4596      	cmp	lr, r2
 8023c1a:	dd70      	ble.n	8023cfe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8023c1c:	2800      	cmp	r0, #0
 8023c1e:	d06e      	beq.n	8023cfe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8023c20:	f898 4001 	ldrb.w	r4, [r8, #1]
 8023c24:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023c28:	441c      	add	r4, r3
 8023c2a:	3501      	adds	r5, #1
 8023c2c:	d46b      	bmi.n	8023d06 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8023c2e:	45a9      	cmp	r9, r5
 8023c30:	dd69      	ble.n	8023d06 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8023c32:	2e00      	cmp	r6, #0
 8023c34:	d067      	beq.n	8023d06 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8023c36:	f1bc 0f00 	cmp.w	ip, #0
 8023c3a:	db62      	blt.n	8023d02 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8023c3c:	45e6      	cmp	lr, ip
 8023c3e:	dd60      	ble.n	8023d02 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8023c40:	f818 500e 	ldrb.w	r5, [r8, lr]
 8023c44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023c48:	441d      	add	r5, r3
 8023c4a:	f11c 0201 	adds.w	r2, ip, #1
 8023c4e:	d45d      	bmi.n	8023d0c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8023c50:	4596      	cmp	lr, r2
 8023c52:	dd5b      	ble.n	8023d0c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8023c54:	2800      	cmp	r0, #0
 8023c56:	d059      	beq.n	8023d0c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8023c58:	44c6      	add	lr, r8
 8023c5a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8023c5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023c62:	4413      	add	r3, r2
 8023c64:	b280      	uxth	r0, r0
 8023c66:	b2b2      	uxth	r2, r6
 8023c68:	fb00 f602 	mul.w	r6, r0, r2
 8023c6c:	0100      	lsls	r0, r0, #4
 8023c6e:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8023c72:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 8023c76:	1b80      	subs	r0, r0, r6
 8023c78:	fa1f fc82 	uxth.w	ip, r2
 8023c7c:	b282      	uxth	r2, r0
 8023c7e:	78a0      	ldrb	r0, [r4, #2]
 8023c80:	f897 e002 	ldrb.w	lr, [r7, #2]
 8023c84:	f897 9000 	ldrb.w	r9, [r7]
 8023c88:	787f      	ldrb	r7, [r7, #1]
 8023c8a:	eba8 080c 	sub.w	r8, r8, ip
 8023c8e:	fa1f f888 	uxth.w	r8, r8
 8023c92:	4350      	muls	r0, r2
 8023c94:	fb08 0e0e 	mla	lr, r8, lr, r0
 8023c98:	78a8      	ldrb	r0, [r5, #2]
 8023c9a:	fb0c e000 	mla	r0, ip, r0, lr
 8023c9e:	f893 e002 	ldrb.w	lr, [r3, #2]
 8023ca2:	fb06 0e0e 	mla	lr, r6, lr, r0
 8023ca6:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 8023caa:	f894 e000 	ldrb.w	lr, [r4]
 8023cae:	fb02 fe0e 	mul.w	lr, r2, lr
 8023cb2:	fb08 e909 	mla	r9, r8, r9, lr
 8023cb6:	f895 e000 	ldrb.w	lr, [r5]
 8023cba:	fb0c 990e 	mla	r9, ip, lr, r9
 8023cbe:	f893 e000 	ldrb.w	lr, [r3]
 8023cc2:	785b      	ldrb	r3, [r3, #1]
 8023cc4:	fb06 9e0e 	mla	lr, r6, lr, r9
 8023cc8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8023ccc:	ea4e 0e00 	orr.w	lr, lr, r0
 8023cd0:	7860      	ldrb	r0, [r4, #1]
 8023cd2:	4350      	muls	r0, r2
 8023cd4:	786a      	ldrb	r2, [r5, #1]
 8023cd6:	fb08 0007 	mla	r0, r8, r7, r0
 8023cda:	fb0c 0202 	mla	r2, ip, r2, r0
 8023cde:	fb06 2303 	mla	r3, r6, r3, r2
 8023ce2:	095b      	lsrs	r3, r3, #5
 8023ce4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023ce8:	ea4e 0303 	orr.w	r3, lr, r3
 8023cec:	800b      	strh	r3, [r1, #0]
 8023cee:	b003      	add	sp, #12
 8023cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023cf4:	af01      	add	r7, sp, #4
 8023cf6:	e78c      	b.n	8023c12 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8023cf8:	ac01      	add	r4, sp, #4
 8023cfa:	4627      	mov	r7, r4
 8023cfc:	e795      	b.n	8023c2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8023cfe:	ac01      	add	r4, sp, #4
 8023d00:	e793      	b.n	8023c2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8023d02:	ad01      	add	r5, sp, #4
 8023d04:	e7a1      	b.n	8023c4a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8023d06:	ab01      	add	r3, sp, #4
 8023d08:	461d      	mov	r5, r3
 8023d0a:	e7ab      	b.n	8023c64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8023d0c:	ab01      	add	r3, sp, #4
 8023d0e:	e7a9      	b.n	8023c64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08023d10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d14:	b08f      	sub	sp, #60	; 0x3c
 8023d16:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8023d1a:	920c      	str	r2, [sp, #48]	; 0x30
 8023d1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8023d1e:	910a      	str	r1, [sp, #40]	; 0x28
 8023d20:	9306      	str	r3, [sp, #24]
 8023d22:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 8023d26:	900d      	str	r0, [sp, #52]	; 0x34
 8023d28:	6850      	ldr	r0, [r2, #4]
 8023d2a:	6812      	ldr	r2, [r2, #0]
 8023d2c:	fb00 1303 	mla	r3, r0, r3, r1
 8023d30:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023d34:	9307      	str	r3, [sp, #28]
 8023d36:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023d38:	681b      	ldr	r3, [r3, #0]
 8023d3a:	9308      	str	r3, [sp, #32]
 8023d3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023d3e:	685c      	ldr	r4, [r3, #4]
 8023d40:	3404      	adds	r4, #4
 8023d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023d44:	2b00      	cmp	r3, #0
 8023d46:	dc03      	bgt.n	8023d50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8023d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023d4a:	2b00      	cmp	r3, #0
 8023d4c:	f340 81d6 	ble.w	80240fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8023d50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023d52:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023d56:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023d5a:	1e48      	subs	r0, r1, #1
 8023d5c:	1e56      	subs	r6, r2, #1
 8023d5e:	9b06      	ldr	r3, [sp, #24]
 8023d60:	2b00      	cmp	r3, #0
 8023d62:	f340 80b7 	ble.w	8023ed4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8023d66:	ea5f 472b 	movs.w	r7, fp, asr #16
 8023d6a:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023d6e:	d406      	bmi.n	8023d7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023d70:	4287      	cmp	r7, r0
 8023d72:	da04      	bge.n	8023d7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023d74:	2b00      	cmp	r3, #0
 8023d76:	db02      	blt.n	8023d7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8023d78:	42b3      	cmp	r3, r6
 8023d7a:	f2c0 80ac 	blt.w	8023ed6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8023d7e:	3701      	adds	r7, #1
 8023d80:	f100 809d 	bmi.w	8023ebe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8023d84:	42b9      	cmp	r1, r7
 8023d86:	f2c0 809a 	blt.w	8023ebe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8023d8a:	3301      	adds	r3, #1
 8023d8c:	f100 8097 	bmi.w	8023ebe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8023d90:	429a      	cmp	r2, r3
 8023d92:	f2c0 8094 	blt.w	8023ebe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8023d96:	9b06      	ldr	r3, [sp, #24]
 8023d98:	930b      	str	r3, [sp, #44]	; 0x2c
 8023d9a:	9b07      	ldr	r3, [sp, #28]
 8023d9c:	9309      	str	r3, [sp, #36]	; 0x24
 8023d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023da0:	2b00      	cmp	r3, #0
 8023da2:	f340 80b5 	ble.w	8023f10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8023da6:	9820      	ldr	r0, [sp, #128]	; 0x80
 8023da8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023daa:	68c7      	ldr	r7, [r0, #12]
 8023dac:	6892      	ldr	r2, [r2, #8]
 8023dae:	ea5f 402b 	movs.w	r0, fp, asr #16
 8023db2:	ea4f 4625 	mov.w	r6, r5, asr #16
 8023db6:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8023dba:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023dbe:	f100 80fb 	bmi.w	8023fb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8023dc2:	f102 3cff 	add.w	ip, r2, #4294967295
 8023dc6:	4560      	cmp	r0, ip
 8023dc8:	f280 80f6 	bge.w	8023fb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8023dcc:	2e00      	cmp	r6, #0
 8023dce:	f2c0 80f3 	blt.w	8023fb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8023dd2:	f107 3cff 	add.w	ip, r7, #4294967295
 8023dd6:	4566      	cmp	r6, ip
 8023dd8:	f280 80ee 	bge.w	8023fb8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8023ddc:	b212      	sxth	r2, r2
 8023dde:	fb06 0002 	mla	r0, r6, r2, r0
 8023de2:	9e08      	ldr	r6, [sp, #32]
 8023de4:	1837      	adds	r7, r6, r0
 8023de6:	5c30      	ldrb	r0, [r6, r0]
 8023de8:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8023dec:	eb04 0c08 	add.w	ip, r4, r8
 8023df0:	2b00      	cmp	r3, #0
 8023df2:	f000 80d3 	beq.w	8023f9c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8023df6:	787e      	ldrb	r6, [r7, #1]
 8023df8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023dfc:	4426      	add	r6, r4
 8023dfe:	2900      	cmp	r1, #0
 8023e00:	f000 80d4 	beq.w	8023fac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8023e04:	18b8      	adds	r0, r7, r2
 8023e06:	5cba      	ldrb	r2, [r7, r2]
 8023e08:	7840      	ldrb	r0, [r0, #1]
 8023e0a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023e0e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8023e12:	4422      	add	r2, r4
 8023e14:	4420      	add	r0, r4
 8023e16:	b29b      	uxth	r3, r3
 8023e18:	b289      	uxth	r1, r1
 8023e1a:	fb03 f901 	mul.w	r9, r3, r1
 8023e1e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023e22:	011b      	lsls	r3, r3, #4
 8023e24:	b289      	uxth	r1, r1
 8023e26:	78b7      	ldrb	r7, [r6, #2]
 8023e28:	f89c a002 	ldrb.w	sl, [ip, #2]
 8023e2c:	f89c c001 	ldrb.w	ip, [ip, #1]
 8023e30:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8023e34:	eba3 0309 	sub.w	r3, r3, r9
 8023e38:	b29b      	uxth	r3, r3
 8023e3a:	ebae 0e01 	sub.w	lr, lr, r1
 8023e3e:	fa1f fe8e 	uxth.w	lr, lr
 8023e42:	435f      	muls	r7, r3
 8023e44:	fb0e 770a 	mla	r7, lr, sl, r7
 8023e48:	f892 a002 	ldrb.w	sl, [r2, #2]
 8023e4c:	fb01 770a 	mla	r7, r1, sl, r7
 8023e50:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023e54:	fb09 7a0a 	mla	sl, r9, sl, r7
 8023e58:	f814 7008 	ldrb.w	r7, [r4, r8]
 8023e5c:	f896 8000 	ldrb.w	r8, [r6]
 8023e60:	7876      	ldrb	r6, [r6, #1]
 8023e62:	fb03 f808 	mul.w	r8, r3, r8
 8023e66:	fb0e 8807 	mla	r8, lr, r7, r8
 8023e6a:	7817      	ldrb	r7, [r2, #0]
 8023e6c:	fb01 8807 	mla	r8, r1, r7, r8
 8023e70:	7807      	ldrb	r7, [r0, #0]
 8023e72:	fb09 8707 	mla	r7, r9, r7, r8
 8023e76:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 8023e7a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8023e7e:	ea47 070a 	orr.w	r7, r7, sl
 8023e82:	4373      	muls	r3, r6
 8023e84:	f892 a001 	ldrb.w	sl, [r2, #1]
 8023e88:	fb0e 330c 	mla	r3, lr, ip, r3
 8023e8c:	fb01 310a 	mla	r1, r1, sl, r3
 8023e90:	f890 a001 	ldrb.w	sl, [r0, #1]
 8023e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e96:	fb09 1a0a 	mla	sl, r9, sl, r1
 8023e9a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8023e9e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8023ea2:	ea47 070a 	orr.w	r7, r7, sl
 8023ea6:	801f      	strh	r7, [r3, #0]
 8023ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023eaa:	3302      	adds	r3, #2
 8023eac:	9309      	str	r3, [sp, #36]	; 0x24
 8023eae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023eb0:	449b      	add	fp, r3
 8023eb2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023eb4:	441d      	add	r5, r3
 8023eb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023eb8:	3b01      	subs	r3, #1
 8023eba:	930b      	str	r3, [sp, #44]	; 0x2c
 8023ebc:	e76f      	b.n	8023d9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023ebe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023ec0:	449b      	add	fp, r3
 8023ec2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023ec4:	441d      	add	r5, r3
 8023ec6:	9b06      	ldr	r3, [sp, #24]
 8023ec8:	3b01      	subs	r3, #1
 8023eca:	9306      	str	r3, [sp, #24]
 8023ecc:	9b07      	ldr	r3, [sp, #28]
 8023ece:	3302      	adds	r3, #2
 8023ed0:	9307      	str	r3, [sp, #28]
 8023ed2:	e744      	b.n	8023d5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8023ed4:	d023      	beq.n	8023f1e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8023ed6:	9b06      	ldr	r3, [sp, #24]
 8023ed8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023eda:	3b01      	subs	r3, #1
 8023edc:	fb00 b003 	mla	r0, r0, r3, fp
 8023ee0:	1400      	asrs	r0, r0, #16
 8023ee2:	f53f af58 	bmi.w	8023d96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023ee6:	3901      	subs	r1, #1
 8023ee8:	4288      	cmp	r0, r1
 8023eea:	f6bf af54 	bge.w	8023d96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023eee:	991c      	ldr	r1, [sp, #112]	; 0x70
 8023ef0:	fb01 5303 	mla	r3, r1, r3, r5
 8023ef4:	141b      	asrs	r3, r3, #16
 8023ef6:	f53f af4e 	bmi.w	8023d96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023efa:	3a01      	subs	r2, #1
 8023efc:	4293      	cmp	r3, r2
 8023efe:	f6bf af4a 	bge.w	8023d96 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8023f02:	9b06      	ldr	r3, [sp, #24]
 8023f04:	9309      	str	r3, [sp, #36]	; 0x24
 8023f06:	9b07      	ldr	r3, [sp, #28]
 8023f08:	930b      	str	r3, [sp, #44]	; 0x2c
 8023f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023f0c:	2b00      	cmp	r3, #0
 8023f0e:	dc70      	bgt.n	8023ff2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8023f10:	9b06      	ldr	r3, [sp, #24]
 8023f12:	9a07      	ldr	r2, [sp, #28]
 8023f14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023f18:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8023f1c:	9307      	str	r3, [sp, #28]
 8023f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f20:	2b00      	cmp	r3, #0
 8023f22:	f340 80eb 	ble.w	80240fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8023f26:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023f2e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023f32:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023f34:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023f38:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023f3c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023f40:	eef0 6a62 	vmov.f32	s13, s5
 8023f44:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023f48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f4c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023f50:	ee16 ba90 	vmov	fp, s13
 8023f54:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023f58:	eef0 6a43 	vmov.f32	s13, s6
 8023f5c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023f60:	ee12 2a90 	vmov	r2, s5
 8023f64:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023f68:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f6c:	ee13 2a10 	vmov	r2, s6
 8023f70:	931b      	str	r3, [sp, #108]	; 0x6c
 8023f72:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023f74:	fb92 f3f3 	sdiv	r3, r2, r3
 8023f78:	931c      	str	r3, [sp, #112]	; 0x70
 8023f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023f7e:	3b01      	subs	r3, #1
 8023f80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023f84:	930a      	str	r3, [sp, #40]	; 0x28
 8023f86:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023f88:	bf08      	it	eq
 8023f8a:	4613      	moveq	r3, r2
 8023f8c:	ee16 5a90 	vmov	r5, s13
 8023f90:	9306      	str	r3, [sp, #24]
 8023f92:	eeb0 3a67 	vmov.f32	s6, s15
 8023f96:	eef0 2a47 	vmov.f32	s5, s14
 8023f9a:	e6d2      	b.n	8023d42 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8023f9c:	b149      	cbz	r1, 8023fb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8023f9e:	5cba      	ldrb	r2, [r7, r2]
 8023fa0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023fa4:	4422      	add	r2, r4
 8023fa6:	4660      	mov	r0, ip
 8023fa8:	4666      	mov	r6, ip
 8023faa:	e734      	b.n	8023e16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8023fac:	4660      	mov	r0, ip
 8023fae:	4662      	mov	r2, ip
 8023fb0:	e731      	b.n	8023e16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8023fb2:	4660      	mov	r0, ip
 8023fb4:	4662      	mov	r2, ip
 8023fb6:	e7f7      	b.n	8023fa8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8023fb8:	f110 0c01 	adds.w	ip, r0, #1
 8023fbc:	f53f af74 	bmi.w	8023ea8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023fc0:	4562      	cmp	r2, ip
 8023fc2:	f6ff af71 	blt.w	8023ea8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023fc6:	f116 0c01 	adds.w	ip, r6, #1
 8023fca:	f53f af6d 	bmi.w	8023ea8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023fce:	4567      	cmp	r7, ip
 8023fd0:	f6ff af6a 	blt.w	8023ea8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023fd4:	b23f      	sxth	r7, r7
 8023fd6:	b212      	sxth	r2, r2
 8023fd8:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8023fdc:	e9cd 0602 	strd	r0, r6, [sp, #8]
 8023fe0:	9200      	str	r2, [sp, #0]
 8023fe2:	9701      	str	r7, [sp, #4]
 8023fe4:	4623      	mov	r3, r4
 8023fe6:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8023fea:	980d      	ldr	r0, [sp, #52]	; 0x34
 8023fec:	f7ff fde6 	bl	8023bbc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 8023ff0:	e75a      	b.n	8023ea8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8023ff2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023ff4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023ff8:	ea4f 462b 	mov.w	r6, fp, asr #16
 8023ffc:	1428      	asrs	r0, r5, #16
 8023ffe:	fb02 6000 	mla	r0, r2, r0, r6
 8024002:	9e08      	ldr	r6, [sp, #32]
 8024004:	f816 8000 	ldrb.w	r8, [r6, r0]
 8024008:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802400c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8024010:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024014:	1837      	adds	r7, r6, r0
 8024016:	eb04 0c08 	add.w	ip, r4, r8
 802401a:	2b00      	cmp	r3, #0
 802401c:	d060      	beq.n	80240e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 802401e:	787e      	ldrb	r6, [r7, #1]
 8024020:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024024:	4426      	add	r6, r4
 8024026:	2900      	cmp	r1, #0
 8024028:	d062      	beq.n	80240f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 802402a:	18b8      	adds	r0, r7, r2
 802402c:	5cba      	ldrb	r2, [r7, r2]
 802402e:	7840      	ldrb	r0, [r0, #1]
 8024030:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024034:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024038:	4422      	add	r2, r4
 802403a:	4420      	add	r0, r4
 802403c:	b29b      	uxth	r3, r3
 802403e:	b289      	uxth	r1, r1
 8024040:	fb03 f901 	mul.w	r9, r3, r1
 8024044:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024048:	011b      	lsls	r3, r3, #4
 802404a:	b289      	uxth	r1, r1
 802404c:	78b7      	ldrb	r7, [r6, #2]
 802404e:	f89c a002 	ldrb.w	sl, [ip, #2]
 8024052:	f89c c001 	ldrb.w	ip, [ip, #1]
 8024056:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802405a:	eba3 0309 	sub.w	r3, r3, r9
 802405e:	b29b      	uxth	r3, r3
 8024060:	ebae 0e01 	sub.w	lr, lr, r1
 8024064:	fa1f fe8e 	uxth.w	lr, lr
 8024068:	435f      	muls	r7, r3
 802406a:	fb0e 770a 	mla	r7, lr, sl, r7
 802406e:	f892 a002 	ldrb.w	sl, [r2, #2]
 8024072:	fb01 770a 	mla	r7, r1, sl, r7
 8024076:	f890 a002 	ldrb.w	sl, [r0, #2]
 802407a:	fb09 7a0a 	mla	sl, r9, sl, r7
 802407e:	f814 7008 	ldrb.w	r7, [r4, r8]
 8024082:	f896 8000 	ldrb.w	r8, [r6]
 8024086:	7876      	ldrb	r6, [r6, #1]
 8024088:	fb03 f808 	mul.w	r8, r3, r8
 802408c:	fb0e 8807 	mla	r8, lr, r7, r8
 8024090:	7817      	ldrb	r7, [r2, #0]
 8024092:	fb01 8807 	mla	r8, r1, r7, r8
 8024096:	7807      	ldrb	r7, [r0, #0]
 8024098:	fb09 8707 	mla	r7, r9, r7, r8
 802409c:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 80240a0:	4373      	muls	r3, r6
 80240a2:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80240a6:	7856      	ldrb	r6, [r2, #1]
 80240a8:	ea47 070a 	orr.w	r7, r7, sl
 80240ac:	fb0e 330c 	mla	r3, lr, ip, r3
 80240b0:	f890 a001 	ldrb.w	sl, [r0, #1]
 80240b4:	fb01 3306 	mla	r3, r1, r6, r3
 80240b8:	fb09 3a0a 	mla	sl, r9, sl, r3
 80240bc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80240c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80240c2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80240c6:	ea47 070a 	orr.w	r7, r7, sl
 80240ca:	f823 7b02 	strh.w	r7, [r3], #2
 80240ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80240d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80240d2:	449b      	add	fp, r3
 80240d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80240d6:	441d      	add	r5, r3
 80240d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80240da:	3b01      	subs	r3, #1
 80240dc:	9309      	str	r3, [sp, #36]	; 0x24
 80240de:	e714      	b.n	8023f0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80240e0:	b149      	cbz	r1, 80240f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80240e2:	5cba      	ldrb	r2, [r7, r2]
 80240e4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80240e8:	4422      	add	r2, r4
 80240ea:	4660      	mov	r0, ip
 80240ec:	4666      	mov	r6, ip
 80240ee:	e7a5      	b.n	802403c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80240f0:	4660      	mov	r0, ip
 80240f2:	4662      	mov	r2, ip
 80240f4:	e7a2      	b.n	802403c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80240f6:	4660      	mov	r0, ip
 80240f8:	4662      	mov	r2, ip
 80240fa:	e7f7      	b.n	80240ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 80240fc:	b00f      	add	sp, #60	; 0x3c
 80240fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024102 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 8024102:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024106:	b085      	sub	sp, #20
 8024108:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 802410c:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 8024110:	9102      	str	r1, [sp, #8]
 8024112:	2c00      	cmp	r4, #0
 8024114:	fb04 710c 	mla	r1, r4, ip, r7
 8024118:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802411c:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8024120:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8024124:	eb02 0e01 	add.w	lr, r2, r1
 8024128:	f2c0 8122 	blt.w	8024370 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 802412c:	45a0      	cmp	r8, r4
 802412e:	f340 811f 	ble.w	8024370 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8024132:	2f00      	cmp	r7, #0
 8024134:	f2c0 811a 	blt.w	802436c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8024138:	45bc      	cmp	ip, r7
 802413a:	f340 8117 	ble.w	802436c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 802413e:	5c52      	ldrb	r2, [r2, r1]
 8024140:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8024144:	1c7a      	adds	r2, r7, #1
 8024146:	f100 8116 	bmi.w	8024376 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 802414a:	4594      	cmp	ip, r2
 802414c:	f340 8113 	ble.w	8024376 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8024150:	2e00      	cmp	r6, #0
 8024152:	f000 8112 	beq.w	802437a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8024156:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802415a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802415e:	3401      	adds	r4, #1
 8024160:	f100 810f 	bmi.w	8024382 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8024164:	45a0      	cmp	r8, r4
 8024166:	f340 810c 	ble.w	8024382 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 802416a:	2800      	cmp	r0, #0
 802416c:	f000 810c 	beq.w	8024388 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8024170:	2f00      	cmp	r7, #0
 8024172:	f2c0 8104 	blt.w	802437e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8024176:	45bc      	cmp	ip, r7
 8024178:	f340 8101 	ble.w	802437e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 802417c:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8024180:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8024184:	3701      	adds	r7, #1
 8024186:	f100 8102 	bmi.w	802438e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 802418a:	45bc      	cmp	ip, r7
 802418c:	f340 80ff 	ble.w	802438e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8024190:	2e00      	cmp	r6, #0
 8024192:	f000 80fe 	beq.w	8024392 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8024196:	44f4      	add	ip, lr
 8024198:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802419c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80241a0:	b2b6      	uxth	r6, r6
 80241a2:	b280      	uxth	r0, r0
 80241a4:	fb00 fe06 	mul.w	lr, r0, r6
 80241a8:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80241ac:	0136      	lsls	r6, r6, #4
 80241ae:	eba6 070e 	sub.w	r7, r6, lr
 80241b2:	b280      	uxth	r0, r0
 80241b4:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80241b8:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80241bc:	b2bf      	uxth	r7, r7
 80241be:	1a1b      	subs	r3, r3, r0
 80241c0:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80241c4:	b29b      	uxth	r3, r3
 80241c6:	fb0a f607 	mul.w	r6, sl, r7
 80241ca:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80241ce:	fb0b 6603 	mla	r6, fp, r3, r6
 80241d2:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80241d6:	fb00 6609 	mla	r6, r0, r9, r6
 80241da:	fb0e 6608 	mla	r6, lr, r8, r6
 80241de:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80241e2:	9600      	str	r6, [sp, #0]
 80241e4:	2e00      	cmp	r6, #0
 80241e6:	f000 80be 	beq.w	8024366 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 80241ea:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80241ee:	fb0b fc0c 	mul.w	ip, fp, ip
 80241f2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80241f6:	fb0b f505 	mul.w	r5, fp, r5
 80241fa:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80241fe:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8024202:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024206:	44dc      	add	ip, fp
 8024208:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802420c:	9501      	str	r5, [sp, #4]
 802420e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8024212:	9503      	str	r5, [sp, #12]
 8024214:	9d01      	ldr	r5, [sp, #4]
 8024216:	9e02      	ldr	r6, [sp, #8]
 8024218:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802421c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8024220:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8024224:	fb0a fc0c 	mul.w	ip, sl, ip
 8024228:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802422c:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8024230:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024234:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024238:	4465      	add	r5, ip
 802423a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802423e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8024242:	fb09 fc0c 	mul.w	ip, r9, ip
 8024246:	fb09 f904 	mul.w	r9, r9, r4
 802424a:	f509 7480 	add.w	r4, r9, #256	; 0x100
 802424e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8024252:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8024256:	fb08 f404 	mul.w	r4, r8, r4
 802425a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802425e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8024262:	fb08 f802 	mul.w	r8, r8, r2
 8024266:	fb0a fa01 	mul.w	sl, sl, r1
 802426a:	0a22      	lsrs	r2, r4, #8
 802426c:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8024270:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8024274:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8024278:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802427c:	4414      	add	r4, r2
 802427e:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8024282:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8024286:	0a2d      	lsrs	r5, r5, #8
 8024288:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802428c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024290:	9a03      	ldr	r2, [sp, #12]
 8024292:	8836      	ldrh	r6, [r6, #0]
 8024294:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8024298:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802429c:	437d      	muls	r5, r7
 802429e:	4461      	add	r1, ip
 80242a0:	0a24      	lsrs	r4, r4, #8
 80242a2:	fb02 5503 	mla	r5, r2, r3, r5
 80242a6:	0a09      	lsrs	r1, r1, #8
 80242a8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80242ac:	fb04 540e 	mla	r4, r4, lr, r5
 80242b0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80242b4:	fb01 4100 	mla	r1, r1, r0, r4
 80242b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80242bc:	0a09      	lsrs	r1, r1, #8
 80242be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80242c2:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80242c6:	fb07 f70a 	mul.w	r7, r7, sl
 80242ca:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80242ce:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80242d2:	fb03 7101 	mla	r1, r3, r1, r7
 80242d6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80242da:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80242de:	fb0e 1e08 	mla	lr, lr, r8, r1
 80242e2:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80242e6:	fb00 e101 	mla	r1, r0, r1, lr
 80242ea:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80242ee:	9a00      	ldr	r2, [sp, #0]
 80242f0:	b287      	uxth	r7, r0
 80242f2:	437a      	muls	r2, r7
 80242f4:	0a09      	lsrs	r1, r1, #8
 80242f6:	1c53      	adds	r3, r2, #1
 80242f8:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80242fc:	4321      	orrs	r1, r4
 80242fe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024302:	1235      	asrs	r5, r6, #8
 8024304:	0c0a      	lsrs	r2, r1, #16
 8024306:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 802430a:	b2db      	uxtb	r3, r3
 802430c:	fb12 f207 	smulbb	r2, r2, r7
 8024310:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8024314:	fb05 2503 	mla	r5, r5, r3, r2
 8024318:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802431c:	10f2      	asrs	r2, r6, #3
 802431e:	b2c8      	uxtb	r0, r1
 8024320:	00f6      	lsls	r6, r6, #3
 8024322:	fb14 f407 	smulbb	r4, r4, r7
 8024326:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802432a:	b2f6      	uxtb	r6, r6
 802432c:	fb10 f007 	smulbb	r0, r0, r7
 8024330:	fb02 4203 	mla	r2, r2, r3, r4
 8024334:	b2ad      	uxth	r5, r5
 8024336:	fb06 0303 	mla	r3, r6, r3, r0
 802433a:	b299      	uxth	r1, r3
 802433c:	b294      	uxth	r4, r2
 802433e:	1c6b      	adds	r3, r5, #1
 8024340:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024344:	1c62      	adds	r2, r4, #1
 8024346:	1c4b      	adds	r3, r1, #1
 8024348:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802434c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8024350:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8024354:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024358:	0952      	lsrs	r2, r2, #5
 802435a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802435e:	432b      	orrs	r3, r5
 8024360:	4313      	orrs	r3, r2
 8024362:	9a02      	ldr	r2, [sp, #8]
 8024364:	8013      	strh	r3, [r2, #0]
 8024366:	b005      	add	sp, #20
 8024368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802436c:	2500      	movs	r5, #0
 802436e:	e6e9      	b.n	8024144 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8024370:	2100      	movs	r1, #0
 8024372:	460d      	mov	r5, r1
 8024374:	e6f3      	b.n	802415e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8024376:	2100      	movs	r1, #0
 8024378:	e6f1      	b.n	802415e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802437a:	4631      	mov	r1, r6
 802437c:	e6ef      	b.n	802415e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802437e:	2400      	movs	r4, #0
 8024380:	e700      	b.n	8024184 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8024382:	2200      	movs	r2, #0
 8024384:	4614      	mov	r4, r2
 8024386:	e70b      	b.n	80241a0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8024388:	4602      	mov	r2, r0
 802438a:	4604      	mov	r4, r0
 802438c:	e708      	b.n	80241a0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 802438e:	2200      	movs	r2, #0
 8024390:	e706      	b.n	80241a0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8024392:	4632      	mov	r2, r6
 8024394:	e704      	b.n	80241a0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08024396 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024396:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802439a:	b09f      	sub	sp, #124	; 0x7c
 802439c:	921b      	str	r2, [sp, #108]	; 0x6c
 802439e:	9309      	str	r3, [sp, #36]	; 0x24
 80243a0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80243a2:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80243a6:	931c      	str	r3, [sp, #112]	; 0x70
 80243a8:	9119      	str	r1, [sp, #100]	; 0x64
 80243aa:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80243ae:	901d      	str	r0, [sp, #116]	; 0x74
 80243b0:	6850      	ldr	r0, [r2, #4]
 80243b2:	6812      	ldr	r2, [r2, #0]
 80243b4:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80243b6:	fb00 1303 	mla	r3, r0, r3, r1
 80243ba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80243be:	930c      	str	r3, [sp, #48]	; 0x30
 80243c0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80243c2:	681b      	ldr	r3, [r3, #0]
 80243c4:	9312      	str	r3, [sp, #72]	; 0x48
 80243c6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80243c8:	685e      	ldr	r6, [r3, #4]
 80243ca:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80243ce:	930d      	str	r3, [sp, #52]	; 0x34
 80243d0:	3604      	adds	r6, #4
 80243d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80243d4:	2b00      	cmp	r3, #0
 80243d6:	dc03      	bgt.n	80243e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80243d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80243da:	2b00      	cmp	r3, #0
 80243dc:	f340 8388 	ble.w	8024af0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 80243e0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80243e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80243e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80243ea:	1e48      	subs	r0, r1, #1
 80243ec:	1e57      	subs	r7, r2, #1
 80243ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80243f0:	2b00      	cmp	r3, #0
 80243f2:	f340 8195 	ble.w	8024720 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80243f6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80243f8:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80243fc:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024400:	d406      	bmi.n	8024410 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024402:	4584      	cmp	ip, r0
 8024404:	da04      	bge.n	8024410 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024406:	2b00      	cmp	r3, #0
 8024408:	db02      	blt.n	8024410 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 802440a:	42bb      	cmp	r3, r7
 802440c:	f2c0 8189 	blt.w	8024722 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8024410:	f11c 0c01 	adds.w	ip, ip, #1
 8024414:	f100 8177 	bmi.w	8024706 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024418:	4561      	cmp	r1, ip
 802441a:	f2c0 8174 	blt.w	8024706 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802441e:	3301      	adds	r3, #1
 8024420:	f100 8171 	bmi.w	8024706 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8024424:	429a      	cmp	r2, r3
 8024426:	f2c0 816e 	blt.w	8024706 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802442a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802442c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802442e:	931a      	str	r3, [sp, #104]	; 0x68
 8024430:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024432:	2b00      	cmp	r3, #0
 8024434:	f340 8193 	ble.w	802475e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8024438:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802443a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802443e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8024440:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8024444:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024446:	141b      	asrs	r3, r3, #16
 8024448:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802444c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024450:	f100 81d6 	bmi.w	8024800 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8024454:	f100 38ff 	add.w	r8, r0, #4294967295
 8024458:	4543      	cmp	r3, r8
 802445a:	f280 81d1 	bge.w	8024800 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 802445e:	f1bc 0f00 	cmp.w	ip, #0
 8024462:	f2c0 81cd 	blt.w	8024800 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8024466:	f10e 38ff 	add.w	r8, lr, #4294967295
 802446a:	45c4      	cmp	ip, r8
 802446c:	f280 81c8 	bge.w	8024800 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8024470:	b200      	sxth	r0, r0
 8024472:	fb0c 3300 	mla	r3, ip, r0, r3
 8024476:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024478:	eb04 0803 	add.w	r8, r4, r3
 802447c:	5ce3      	ldrb	r3, [r4, r3]
 802447e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024482:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024486:	2a00      	cmp	r2, #0
 8024488:	f000 81af 	beq.w	80247ea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 802448c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024490:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024494:	940e      	str	r4, [sp, #56]	; 0x38
 8024496:	0e24      	lsrs	r4, r4, #24
 8024498:	9415      	str	r4, [sp, #84]	; 0x54
 802449a:	b179      	cbz	r1, 80244bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 802449c:	eb08 0c00 	add.w	ip, r8, r0
 80244a0:	f818 0000 	ldrb.w	r0, [r8, r0]
 80244a4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80244a8:	900a      	str	r0, [sp, #40]	; 0x28
 80244aa:	0e00      	lsrs	r0, r0, #24
 80244ac:	9013      	str	r0, [sp, #76]	; 0x4c
 80244ae:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80244b2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80244b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80244b8:	0e00      	lsrs	r0, r0, #24
 80244ba:	9016      	str	r0, [sp, #88]	; 0x58
 80244bc:	b292      	uxth	r2, r2
 80244be:	b289      	uxth	r1, r1
 80244c0:	fb02 f901 	mul.w	r9, r2, r1
 80244c4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80244c8:	0112      	lsls	r2, r2, #4
 80244ca:	eba2 0809 	sub.w	r8, r2, r9
 80244ce:	b289      	uxth	r1, r1
 80244d0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80244d4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80244d6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80244d8:	fa1f f888 	uxth.w	r8, r8
 80244dc:	1a52      	subs	r2, r2, r1
 80244de:	b292      	uxth	r2, r2
 80244e0:	fb08 f000 	mul.w	r0, r8, r0
 80244e4:	fb02 000e 	mla	r0, r2, lr, r0
 80244e8:	fb01 0004 	mla	r0, r1, r4, r0
 80244ec:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80244ee:	fb09 0004 	mla	r0, r9, r4, r0
 80244f2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80244f6:	2800      	cmp	r0, #0
 80244f8:	f000 80fa 	beq.w	80246f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80244fc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024500:	d01b      	beq.n	802453a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8024502:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024506:	fb0e fa0a 	mul.w	sl, lr, sl
 802450a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802450e:	fb0e fe03 	mul.w	lr, lr, r3
 8024512:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024516:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802451a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802451e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8024522:	4453      	add	r3, sl
 8024524:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024528:	0a1b      	lsrs	r3, r3, #8
 802452a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802452e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024532:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024536:	ea43 030c 	orr.w	r3, r3, ip
 802453a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802453c:	2cff      	cmp	r4, #255	; 0xff
 802453e:	d021      	beq.n	8024584 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8024540:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8024542:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024546:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024548:	fb04 fb0b 	mul.w	fp, r4, fp
 802454c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802454e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024552:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8024554:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024558:	fb04 fa0a 	mul.w	sl, r4, sl
 802455c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024560:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024564:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024568:	44de      	add	lr, fp
 802456a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802456e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024572:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024576:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802457a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802457e:	ea4e 040a 	orr.w	r4, lr, sl
 8024582:	940e      	str	r4, [sp, #56]	; 0x38
 8024584:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024586:	2cff      	cmp	r4, #255	; 0xff
 8024588:	d021      	beq.n	80245ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802458a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802458c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024590:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024592:	fb04 fb0b 	mul.w	fp, r4, fp
 8024596:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024598:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802459c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 802459e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80245a2:	fb04 fa0a 	mul.w	sl, r4, sl
 80245a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80245aa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80245ae:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80245b2:	44de      	add	lr, fp
 80245b4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80245b8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80245bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80245c0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80245c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80245c8:	ea4e 040a 	orr.w	r4, lr, sl
 80245cc:	940a      	str	r4, [sp, #40]	; 0x28
 80245ce:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80245d0:	2cff      	cmp	r4, #255	; 0xff
 80245d2:	d021      	beq.n	8024618 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80245d4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80245d6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80245da:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80245dc:	fb04 fb0b 	mul.w	fp, r4, fp
 80245e0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80245e2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80245e6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80245e8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80245ec:	fb04 fa0a 	mul.w	sl, r4, sl
 80245f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80245f4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80245f8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80245fc:	44de      	add	lr, fp
 80245fe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024602:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024606:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802460a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802460e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024612:	ea4e 040a 	orr.w	r4, lr, sl
 8024616:	940f      	str	r4, [sp, #60]	; 0x3c
 8024618:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802461a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802461e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024620:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024624:	fb08 fc0c 	mul.w	ip, r8, ip
 8024628:	fb02 cc0e 	mla	ip, r2, lr, ip
 802462c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8024630:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024632:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024636:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802463a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802463c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8024640:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8024644:	fb08 f80e 	mul.w	r8, r8, lr
 8024648:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802464c:	fb02 8303 	mla	r3, r2, r3, r8
 8024650:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024652:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024654:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024658:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802465a:	fb01 330a 	mla	r3, r1, sl, r3
 802465e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8024662:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8024664:	fb09 3901 	mla	r9, r9, r1, r3
 8024668:	4342      	muls	r2, r0
 802466a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802466e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024672:	883b      	ldrh	r3, [r7, #0]
 8024674:	1c50      	adds	r0, r2, #1
 8024676:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802467a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802467e:	ea4c 0c09 	orr.w	ip, ip, r9
 8024682:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8024686:	1219      	asrs	r1, r3, #8
 8024688:	ea4f 421c 	mov.w	r2, ip, lsr #16
 802468c:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8024690:	b2c0      	uxtb	r0, r0
 8024692:	fb12 f204 	smulbb	r2, r2, r4
 8024696:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802469a:	fb01 2100 	mla	r1, r1, r0, r2
 802469e:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80246a2:	10da      	asrs	r2, r3, #3
 80246a4:	fa5f fc8c 	uxtb.w	ip, ip
 80246a8:	00db      	lsls	r3, r3, #3
 80246aa:	fb1c fc04 	smulbb	ip, ip, r4
 80246ae:	b2db      	uxtb	r3, r3
 80246b0:	b289      	uxth	r1, r1
 80246b2:	fb03 c300 	mla	r3, r3, r0, ip
 80246b6:	fa1f fc83 	uxth.w	ip, r3
 80246ba:	1c4b      	adds	r3, r1, #1
 80246bc:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80246c0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80246c4:	fb1e fe04 	smulbb	lr, lr, r4
 80246c8:	f10c 0301 	add.w	r3, ip, #1
 80246cc:	fb02 e200 	mla	r2, r2, r0, lr
 80246d0:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80246d4:	b292      	uxth	r2, r2
 80246d6:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80246da:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80246de:	430b      	orrs	r3, r1
 80246e0:	1c51      	adds	r1, r2, #1
 80246e2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80246e6:	0952      	lsrs	r2, r2, #5
 80246e8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80246ec:	4313      	orrs	r3, r2
 80246ee:	803b      	strh	r3, [r7, #0]
 80246f0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80246f2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80246f4:	441a      	add	r2, r3
 80246f6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80246f8:	9229      	str	r2, [sp, #164]	; 0xa4
 80246fa:	441d      	add	r5, r3
 80246fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80246fe:	3b01      	subs	r3, #1
 8024700:	3702      	adds	r7, #2
 8024702:	931a      	str	r3, [sp, #104]	; 0x68
 8024704:	e694      	b.n	8024430 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024706:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024708:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 802470a:	441c      	add	r4, r3
 802470c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802470e:	9429      	str	r4, [sp, #164]	; 0xa4
 8024710:	441d      	add	r5, r3
 8024712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024714:	3b01      	subs	r3, #1
 8024716:	9309      	str	r3, [sp, #36]	; 0x24
 8024718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802471a:	3302      	adds	r3, #2
 802471c:	930c      	str	r3, [sp, #48]	; 0x30
 802471e:	e666      	b.n	80243ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8024720:	d024      	beq.n	802476c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d6>
 8024722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024724:	982b      	ldr	r0, [sp, #172]	; 0xac
 8024726:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8024728:	3b01      	subs	r3, #1
 802472a:	fb00 4003 	mla	r0, r0, r3, r4
 802472e:	1400      	asrs	r0, r0, #16
 8024730:	f53f ae7b 	bmi.w	802442a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024734:	3901      	subs	r1, #1
 8024736:	4288      	cmp	r0, r1
 8024738:	f6bf ae77 	bge.w	802442a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802473c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 802473e:	fb01 5303 	mla	r3, r1, r3, r5
 8024742:	141b      	asrs	r3, r3, #16
 8024744:	f53f ae71 	bmi.w	802442a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024748:	3a01      	subs	r2, #1
 802474a:	4293      	cmp	r3, r2
 802474c:	f6bf ae6d 	bge.w	802442a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024750:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8024754:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8024758:	f1bb 0f00 	cmp.w	fp, #0
 802475c:	dc70      	bgt.n	8024840 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4aa>
 802475e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024760:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024764:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024766:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 802476a:	930c      	str	r3, [sp, #48]	; 0x30
 802476c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802476e:	2b00      	cmp	r3, #0
 8024770:	f340 81be 	ble.w	8024af0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x75a>
 8024774:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024778:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802477c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024780:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024782:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024786:	ee31 1a05 	vadd.f32	s2, s2, s10
 802478a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802478e:	eef0 6a62 	vmov.f32	s13, s5
 8024792:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024796:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802479a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802479e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80247a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80247a6:	eef0 6a43 	vmov.f32	s13, s6
 80247aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80247ae:	ee12 2a90 	vmov	r2, s5
 80247b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80247b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80247ba:	ee13 2a10 	vmov	r2, s6
 80247be:	932b      	str	r3, [sp, #172]	; 0xac
 80247c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80247c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80247c6:	932c      	str	r3, [sp, #176]	; 0xb0
 80247c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80247ca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80247cc:	3b01      	subs	r3, #1
 80247ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80247d2:	9319      	str	r3, [sp, #100]	; 0x64
 80247d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80247d6:	bf08      	it	eq
 80247d8:	4613      	moveq	r3, r2
 80247da:	ee16 5a90 	vmov	r5, s13
 80247de:	9309      	str	r3, [sp, #36]	; 0x24
 80247e0:	eeb0 3a67 	vmov.f32	s6, s15
 80247e4:	eef0 2a47 	vmov.f32	s5, s14
 80247e8:	e5f3      	b.n	80243d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80247ea:	2900      	cmp	r1, #0
 80247ec:	f43f ae66 	beq.w	80244bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80247f0:	f818 0000 	ldrb.w	r0, [r8, r0]
 80247f4:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80247f8:	900a      	str	r0, [sp, #40]	; 0x28
 80247fa:	0e00      	lsrs	r0, r0, #24
 80247fc:	9013      	str	r0, [sp, #76]	; 0x4c
 80247fe:	e65d      	b.n	80244bc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8024800:	f113 0801 	adds.w	r8, r3, #1
 8024804:	f53f af74 	bmi.w	80246f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8024808:	4540      	cmp	r0, r8
 802480a:	f6ff af71 	blt.w	80246f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802480e:	f11c 0801 	adds.w	r8, ip, #1
 8024812:	f53f af6d 	bmi.w	80246f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8024816:	45c6      	cmp	lr, r8
 8024818:	f6ff af6a 	blt.w	80246f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802481c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 802481e:	9302      	str	r3, [sp, #8]
 8024820:	b200      	sxth	r0, r0
 8024822:	fa0f f38e 	sxth.w	r3, lr
 8024826:	e9cd 1405 	strd	r1, r4, [sp, #20]
 802482a:	e9cd c203 	strd	ip, r2, [sp, #12]
 802482e:	9301      	str	r3, [sp, #4]
 8024830:	9000      	str	r0, [sp, #0]
 8024832:	4633      	mov	r3, r6
 8024834:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8024836:	981d      	ldr	r0, [sp, #116]	; 0x74
 8024838:	4639      	mov	r1, r7
 802483a:	f7ff fc62 	bl	8024102 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 802483e:	e757      	b.n	80246f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8024840:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024842:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8024844:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024848:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 802484a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802484e:	1427      	asrs	r7, r4, #16
 8024850:	142b      	asrs	r3, r5, #16
 8024852:	fb01 7303 	mla	r3, r1, r3, r7
 8024856:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024858:	18e7      	adds	r7, r4, r3
 802485a:	5ce3      	ldrb	r3, [r4, r3]
 802485c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024860:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024864:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024868:	2a00      	cmp	r2, #0
 802486a:	f000 8137 	beq.w	8024adc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 802486e:	f897 e001 	ldrb.w	lr, [r7, #1]
 8024872:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8024876:	9410      	str	r4, [sp, #64]	; 0x40
 8024878:	0e24      	lsrs	r4, r4, #24
 802487a:	9417      	str	r4, [sp, #92]	; 0x5c
 802487c:	b170      	cbz	r0, 802489c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 802487e:	eb07 0e01 	add.w	lr, r7, r1
 8024882:	5c79      	ldrb	r1, [r7, r1]
 8024884:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024888:	910b      	str	r1, [sp, #44]	; 0x2c
 802488a:	0e09      	lsrs	r1, r1, #24
 802488c:	9114      	str	r1, [sp, #80]	; 0x50
 802488e:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8024892:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024896:	9111      	str	r1, [sp, #68]	; 0x44
 8024898:	0e09      	lsrs	r1, r1, #24
 802489a:	9118      	str	r1, [sp, #96]	; 0x60
 802489c:	b292      	uxth	r2, r2
 802489e:	b280      	uxth	r0, r0
 80248a0:	fb02 f800 	mul.w	r8, r2, r0
 80248a4:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 80248a8:	0112      	lsls	r2, r2, #4
 80248aa:	eba2 0e08 	sub.w	lr, r2, r8
 80248ae:	b280      	uxth	r0, r0
 80248b0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80248b4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80248b6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80248b8:	fa1f fe8e 	uxth.w	lr, lr
 80248bc:	1a12      	subs	r2, r2, r0
 80248be:	b292      	uxth	r2, r2
 80248c0:	fb0e f101 	mul.w	r1, lr, r1
 80248c4:	fb02 110c 	mla	r1, r2, ip, r1
 80248c8:	fb00 1104 	mla	r1, r0, r4, r1
 80248cc:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80248ce:	fb08 1104 	mla	r1, r8, r4, r1
 80248d2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80248d6:	2900      	cmp	r1, #0
 80248d8:	f000 80f5 	beq.w	8024ac6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80248dc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80248e0:	d019      	beq.n	8024916 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x580>
 80248e2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80248e6:	fb0c fa0a 	mul.w	sl, ip, sl
 80248ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80248ee:	fb0c fc03 	mul.w	ip, ip, r3
 80248f2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80248f6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80248fa:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80248fe:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8024902:	4453      	add	r3, sl
 8024904:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8024908:	0a1b      	lsrs	r3, r3, #8
 802490a:	0a3f      	lsrs	r7, r7, #8
 802490c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024910:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024914:	433b      	orrs	r3, r7
 8024916:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024918:	2cff      	cmp	r4, #255	; 0xff
 802491a:	d020      	beq.n	802495e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c8>
 802491c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802491e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8024922:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8024924:	4367      	muls	r7, r4
 8024926:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024928:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802492c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 802492e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024932:	fb04 fa0a 	mul.w	sl, r4, sl
 8024936:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802493a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802493e:	44bc      	add	ip, r7
 8024940:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8024944:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024948:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802494c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024950:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024954:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024958:	ea4c 040a 	orr.w	r4, ip, sl
 802495c:	9410      	str	r4, [sp, #64]	; 0x40
 802495e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024960:	2cff      	cmp	r4, #255	; 0xff
 8024962:	d020      	beq.n	80249a6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8024964:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024966:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802496a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802496c:	4367      	muls	r7, r4
 802496e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024970:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024974:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8024976:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802497a:	fb04 fa0a 	mul.w	sl, r4, sl
 802497e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024982:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024986:	44bc      	add	ip, r7
 8024988:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802498c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8024990:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024994:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024998:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802499c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80249a0:	ea4c 040a 	orr.w	r4, ip, sl
 80249a4:	940b      	str	r4, [sp, #44]	; 0x2c
 80249a6:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80249a8:	2cff      	cmp	r4, #255	; 0xff
 80249aa:	d020      	beq.n	80249ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x658>
 80249ac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80249ae:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80249b2:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80249b4:	4367      	muls	r7, r4
 80249b6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80249b8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80249bc:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80249be:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80249c2:	fb04 fa0a 	mul.w	sl, r4, sl
 80249c6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80249ca:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80249ce:	44bc      	add	ip, r7
 80249d0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80249d4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80249d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80249dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80249e0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80249e4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80249e8:	ea4c 040a 	orr.w	r4, ip, sl
 80249ec:	9411      	str	r4, [sp, #68]	; 0x44
 80249ee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80249f0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80249f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80249f6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80249fa:	fb0e f707 	mul.w	r7, lr, r7
 80249fe:	fb02 770c 	mla	r7, r2, ip, r7
 8024a02:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024a06:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024a08:	fb00 770c 	mla	r7, r0, ip, r7
 8024a0c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024a10:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024a12:	fb08 770c 	mla	r7, r8, ip, r7
 8024a16:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8024a1a:	fb0e fe0c 	mul.w	lr, lr, ip
 8024a1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024a22:	fb02 e303 	mla	r3, r2, r3, lr
 8024a26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024a28:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8024a2a:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8024a2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024a30:	fb00 330a 	mla	r3, r0, sl, r3
 8024a34:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8024a38:	fb08 3c0c 	mla	ip, r8, ip, r3
 8024a3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024a3e:	f8b9 0000 	ldrh.w	r0, [r9]
 8024a42:	434b      	muls	r3, r1
 8024a44:	0a3f      	lsrs	r7, r7, #8
 8024a46:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024a4a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024a4e:	1c59      	adds	r1, r3, #1
 8024a50:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8024a54:	ea47 070c 	orr.w	r7, r7, ip
 8024a58:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8024a5c:	1202      	asrs	r2, r0, #8
 8024a5e:	0c3b      	lsrs	r3, r7, #16
 8024a60:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8024a64:	b2c9      	uxtb	r1, r1
 8024a66:	fb13 f304 	smulbb	r3, r3, r4
 8024a6a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8024a6e:	fb02 3201 	mla	r2, r2, r1, r3
 8024a72:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8024a76:	10c3      	asrs	r3, r0, #3
 8024a78:	b2ff      	uxtb	r7, r7
 8024a7a:	00c0      	lsls	r0, r0, #3
 8024a7c:	b292      	uxth	r2, r2
 8024a7e:	fb1c fc04 	smulbb	ip, ip, r4
 8024a82:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8024a86:	b2c0      	uxtb	r0, r0
 8024a88:	fb17 f704 	smulbb	r7, r7, r4
 8024a8c:	fb03 c301 	mla	r3, r3, r1, ip
 8024a90:	fb00 7001 	mla	r0, r0, r1, r7
 8024a94:	f102 0c01 	add.w	ip, r2, #1
 8024a98:	b280      	uxth	r0, r0
 8024a9a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8024a9e:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 8024aa2:	1c42      	adds	r2, r0, #1
 8024aa4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8024aa8:	b29b      	uxth	r3, r3
 8024aaa:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8024aae:	ea42 020c 	orr.w	r2, r2, ip
 8024ab2:	f103 0c01 	add.w	ip, r3, #1
 8024ab6:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8024aba:	095b      	lsrs	r3, r3, #5
 8024abc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024ac0:	431a      	orrs	r2, r3
 8024ac2:	f8a9 2000 	strh.w	r2, [r9]
 8024ac6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8024ac8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024aca:	441a      	add	r2, r3
 8024acc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024ace:	9229      	str	r2, [sp, #164]	; 0xa4
 8024ad0:	f109 0902 	add.w	r9, r9, #2
 8024ad4:	441d      	add	r5, r3
 8024ad6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024ada:	e63d      	b.n	8024758 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8024adc:	2800      	cmp	r0, #0
 8024ade:	f43f aedd 	beq.w	802489c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8024ae2:	5c79      	ldrb	r1, [r7, r1]
 8024ae4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024ae8:	910b      	str	r1, [sp, #44]	; 0x2c
 8024aea:	0e09      	lsrs	r1, r1, #24
 8024aec:	9114      	str	r1, [sp, #80]	; 0x50
 8024aee:	e6d5      	b.n	802489c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x506>
 8024af0:	b01f      	add	sp, #124	; 0x7c
 8024af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024af6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8024af6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024afa:	b089      	sub	sp, #36	; 0x24
 8024afc:	9101      	str	r1, [sp, #4]
 8024afe:	9801      	ldr	r0, [sp, #4]
 8024b00:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 8024b04:	8800      	ldrh	r0, [r0, #0]
 8024b06:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 8024b0a:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8024b0e:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 8024b12:	1206      	asrs	r6, r0, #8
 8024b14:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 8024b18:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8024b1c:	9602      	str	r6, [sp, #8]
 8024b1e:	10c6      	asrs	r6, r0, #3
 8024b20:	00c0      	lsls	r0, r0, #3
 8024b22:	b2c0      	uxtb	r0, r0
 8024b24:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8024b28:	9004      	str	r0, [sp, #16]
 8024b2a:	2f00      	cmp	r7, #0
 8024b2c:	fb07 100c 	mla	r0, r7, ip, r1
 8024b30:	9603      	str	r6, [sp, #12]
 8024b32:	eb02 0e00 	add.w	lr, r2, r0
 8024b36:	f2c0 810a 	blt.w	8024d4e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8024b3a:	45b8      	cmp	r8, r7
 8024b3c:	f340 8107 	ble.w	8024d4e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8024b40:	2900      	cmp	r1, #0
 8024b42:	f2c0 8102 	blt.w	8024d4a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8024b46:	458c      	cmp	ip, r1
 8024b48:	f340 80ff 	ble.w	8024d4a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8024b4c:	5c12      	ldrb	r2, [r2, r0]
 8024b4e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024b52:	1c4a      	adds	r2, r1, #1
 8024b54:	f100 80fe 	bmi.w	8024d54 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8024b58:	4594      	cmp	ip, r2
 8024b5a:	f340 80fb 	ble.w	8024d54 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8024b5e:	2d00      	cmp	r5, #0
 8024b60:	f000 80fa 	beq.w	8024d58 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8024b64:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024b68:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8024b6c:	3701      	adds	r7, #1
 8024b6e:	f100 80f7 	bmi.w	8024d60 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8024b72:	45b8      	cmp	r8, r7
 8024b74:	f340 80f4 	ble.w	8024d60 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8024b78:	2c00      	cmp	r4, #0
 8024b7a:	f000 80f4 	beq.w	8024d66 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8024b7e:	2900      	cmp	r1, #0
 8024b80:	eb0e 020c 	add.w	r2, lr, ip
 8024b84:	f2c0 80ea 	blt.w	8024d5c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8024b88:	458c      	cmp	ip, r1
 8024b8a:	f340 80e7 	ble.w	8024d5c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8024b8e:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8024b92:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8024b96:	3101      	adds	r1, #1
 8024b98:	f100 80e8 	bmi.w	8024d6c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8024b9c:	458c      	cmp	ip, r1
 8024b9e:	f340 80e5 	ble.w	8024d6c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8024ba2:	2d00      	cmp	r5, #0
 8024ba4:	f000 80e4 	beq.w	8024d70 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8024ba8:	7852      	ldrb	r2, [r2, #1]
 8024baa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024bae:	0e0b      	lsrs	r3, r1, #24
 8024bb0:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8024bb4:	9300      	str	r3, [sp, #0]
 8024bb6:	b2a4      	uxth	r4, r4
 8024bb8:	b2ab      	uxth	r3, r5
 8024bba:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8024bbe:	fb03 f904 	mul.w	r9, r3, r4
 8024bc2:	fb0a f505 	mul.w	r5, sl, r5
 8024bc6:	011b      	lsls	r3, r3, #4
 8024bc8:	eba3 0e09 	sub.w	lr, r3, r9
 8024bcc:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 8024bd0:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 8024bd4:	0a28      	lsrs	r0, r5, #8
 8024bd6:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024bda:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8024bde:	4405      	add	r5, r0
 8024be0:	0a2d      	lsrs	r5, r5, #8
 8024be2:	fb0a f303 	mul.w	r3, sl, r3
 8024be6:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 8024bea:	9005      	str	r0, [sp, #20]
 8024bec:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8024bf0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8024bf4:	0a1b      	lsrs	r3, r3, #8
 8024bf6:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8024bfa:	9306      	str	r3, [sp, #24]
 8024bfc:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8024c00:	fb0b f303 	mul.w	r3, fp, r3
 8024c04:	0a1d      	lsrs	r5, r3, #8
 8024c06:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024c0a:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8024c0e:	fb0b f606 	mul.w	r6, fp, r6
 8024c12:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 8024c16:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 8024c1a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024c1e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024c22:	fb08 f707 	mul.w	r7, r8, r7
 8024c26:	441d      	add	r5, r3
 8024c28:	f506 7380 	add.w	r3, r6, #256	; 0x100
 8024c2c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8024c30:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8024c34:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8024c38:	fb08 fc0c 	mul.w	ip, r8, ip
 8024c3c:	0a1b      	lsrs	r3, r3, #8
 8024c3e:	9307      	str	r3, [sp, #28]
 8024c40:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8024c44:	0e0b      	lsrs	r3, r1, #24
 8024c46:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8024c4a:	435f      	muls	r7, r3
 8024c4c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024c50:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024c54:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8024c58:	4460      	add	r0, ip
 8024c5a:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8024c5e:	b2a4      	uxth	r4, r4
 8024c60:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8024c64:	0a2d      	lsrs	r5, r5, #8
 8024c66:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024c6a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c6e:	fa1f fe8e 	uxth.w	lr, lr
 8024c72:	4359      	muls	r1, r3
 8024c74:	1b12      	subs	r2, r2, r4
 8024c76:	9b05      	ldr	r3, [sp, #20]
 8024c78:	44bc      	add	ip, r7
 8024c7a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024c7e:	b292      	uxth	r2, r2
 8024c80:	fb05 f50e 	mul.w	r5, r5, lr
 8024c84:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024c88:	fb03 5502 	mla	r5, r3, r2, r5
 8024c8c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024c90:	9b06      	ldr	r3, [sp, #24]
 8024c92:	f501 7780 	add.w	r7, r1, #256	; 0x100
 8024c96:	0a36      	lsrs	r6, r6, #8
 8024c98:	0a00      	lsrs	r0, r0, #8
 8024c9a:	fb0c 5509 	mla	r5, ip, r9, r5
 8024c9e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8024ca2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8024ca6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8024caa:	fb00 5504 	mla	r5, r0, r4, r5
 8024cae:	fb0e f606 	mul.w	r6, lr, r6
 8024cb2:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 8024cb6:	0a09      	lsrs	r1, r1, #8
 8024cb8:	9b07      	ldr	r3, [sp, #28]
 8024cba:	fb02 6000 	mla	r0, r2, r0, r6
 8024cbe:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8024cc2:	fb09 0001 	mla	r0, r9, r1, r0
 8024cc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024cca:	fb0e fe0b 	mul.w	lr, lr, fp
 8024cce:	fb04 0003 	mla	r0, r4, r3, r0
 8024cd2:	fb02 e20a 	mla	r2, r2, sl, lr
 8024cd6:	9b00      	ldr	r3, [sp, #0]
 8024cd8:	fb04 2408 	mla	r4, r4, r8, r2
 8024cdc:	fb09 4903 	mla	r9, r9, r3, r4
 8024ce0:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8024ce4:	9b02      	ldr	r3, [sp, #8]
 8024ce6:	9a04      	ldr	r2, [sp, #16]
 8024ce8:	fa5f f989 	uxtb.w	r9, r9
 8024cec:	fb03 f109 	mul.w	r1, r3, r9
 8024cf0:	9b03      	ldr	r3, [sp, #12]
 8024cf2:	0a2d      	lsrs	r5, r5, #8
 8024cf4:	0a00      	lsrs	r0, r0, #8
 8024cf6:	fb03 f309 	mul.w	r3, r3, r9
 8024cfa:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8024cfe:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024d02:	4305      	orrs	r5, r0
 8024d04:	fb02 f909 	mul.w	r9, r2, r9
 8024d08:	1c58      	adds	r0, r3, #1
 8024d0a:	1c4a      	adds	r2, r1, #1
 8024d0c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8024d10:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024d14:	0a2b      	lsrs	r3, r5, #8
 8024d16:	0c2a      	lsrs	r2, r5, #16
 8024d18:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024d1c:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8024d20:	00db      	lsls	r3, r3, #3
 8024d22:	0212      	lsls	r2, r2, #8
 8024d24:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8024d28:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024d2c:	4313      	orrs	r3, r2
 8024d2e:	f109 0201 	add.w	r2, r9, #1
 8024d32:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8024d36:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8024d3a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8024d3e:	431d      	orrs	r5, r3
 8024d40:	9b01      	ldr	r3, [sp, #4]
 8024d42:	801d      	strh	r5, [r3, #0]
 8024d44:	b009      	add	sp, #36	; 0x24
 8024d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d4a:	2000      	movs	r0, #0
 8024d4c:	e701      	b.n	8024b52 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8024d4e:	2600      	movs	r6, #0
 8024d50:	4630      	mov	r0, r6
 8024d52:	e70b      	b.n	8024b6c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8024d54:	2600      	movs	r6, #0
 8024d56:	e709      	b.n	8024b6c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8024d58:	462e      	mov	r6, r5
 8024d5a:	e707      	b.n	8024b6c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8024d5c:	2700      	movs	r7, #0
 8024d5e:	e71a      	b.n	8024b96 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8024d60:	2100      	movs	r1, #0
 8024d62:	460f      	mov	r7, r1
 8024d64:	e723      	b.n	8024bae <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024d66:	4621      	mov	r1, r4
 8024d68:	4627      	mov	r7, r4
 8024d6a:	e720      	b.n	8024bae <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024d6c:	2100      	movs	r1, #0
 8024d6e:	e71e      	b.n	8024bae <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8024d70:	4629      	mov	r1, r5
 8024d72:	e71c      	b.n	8024bae <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

08024d74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d78:	b09b      	sub	sp, #108	; 0x6c
 8024d7a:	9218      	str	r2, [sp, #96]	; 0x60
 8024d7c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8024d7e:	9116      	str	r1, [sp, #88]	; 0x58
 8024d80:	9307      	str	r3, [sp, #28]
 8024d82:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8024d86:	9019      	str	r0, [sp, #100]	; 0x64
 8024d88:	6850      	ldr	r0, [r2, #4]
 8024d8a:	6812      	ldr	r2, [r2, #0]
 8024d8c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8024d8e:	fb00 1303 	mla	r3, r0, r3, r1
 8024d92:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8024d96:	930a      	str	r3, [sp, #40]	; 0x28
 8024d98:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024d9a:	681b      	ldr	r3, [r3, #0]
 8024d9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8024d9e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024da0:	685e      	ldr	r6, [r3, #4]
 8024da2:	3604      	adds	r6, #4
 8024da4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8024da6:	2b00      	cmp	r3, #0
 8024da8:	dc03      	bgt.n	8024db2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8024daa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024dac:	2b00      	cmp	r3, #0
 8024dae:	f340 8373 	ble.w	8025498 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8024db2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024db4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024db8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024dbc:	1e48      	subs	r0, r1, #1
 8024dbe:	1e57      	subs	r7, r2, #1
 8024dc0:	9b07      	ldr	r3, [sp, #28]
 8024dc2:	2b00      	cmp	r3, #0
 8024dc4:	f340 8190 	ble.w	80250e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8024dc8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8024dca:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8024dce:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024dd2:	d406      	bmi.n	8024de2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024dd4:	4584      	cmp	ip, r0
 8024dd6:	da04      	bge.n	8024de2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024dd8:	2b00      	cmp	r3, #0
 8024dda:	db02      	blt.n	8024de2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8024ddc:	42bb      	cmp	r3, r7
 8024dde:	f2c0 8184 	blt.w	80250ea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x376>
 8024de2:	f11c 0c01 	adds.w	ip, ip, #1
 8024de6:	f100 8172 	bmi.w	80250ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8024dea:	4561      	cmp	r1, ip
 8024dec:	f2c0 816f 	blt.w	80250ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8024df0:	3301      	adds	r3, #1
 8024df2:	f100 816c 	bmi.w	80250ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8024df6:	429a      	cmp	r2, r3
 8024df8:	f2c0 8169 	blt.w	80250ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8024dfc:	9b07      	ldr	r3, [sp, #28]
 8024dfe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8024e00:	9317      	str	r3, [sp, #92]	; 0x5c
 8024e02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8024e04:	2b00      	cmp	r3, #0
 8024e06:	f340 818e 	ble.w	8025126 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b2>
 8024e0a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024e0c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8024e10:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8024e12:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8024e16:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8024e18:	141b      	asrs	r3, r3, #16
 8024e1a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024e1e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024e22:	f100 81d1 	bmi.w	80251c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8024e26:	f101 38ff 	add.w	r8, r1, #4294967295
 8024e2a:	4543      	cmp	r3, r8
 8024e2c:	f280 81cc 	bge.w	80251c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8024e30:	f1bc 0f00 	cmp.w	ip, #0
 8024e34:	f2c0 81c8 	blt.w	80251c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8024e38:	f10e 38ff 	add.w	r8, lr, #4294967295
 8024e3c:	45c4      	cmp	ip, r8
 8024e3e:	f280 81c3 	bge.w	80251c8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x454>
 8024e42:	b209      	sxth	r1, r1
 8024e44:	fb0c 3301 	mla	r3, ip, r1, r3
 8024e48:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024e4a:	eb04 0803 	add.w	r8, r4, r3
 8024e4e:	5ce3      	ldrb	r3, [r4, r3]
 8024e50:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024e54:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8024e58:	2a00      	cmp	r2, #0
 8024e5a:	f000 81aa 	beq.w	80251b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43e>
 8024e5e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8024e62:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8024e66:	940b      	str	r4, [sp, #44]	; 0x2c
 8024e68:	0e24      	lsrs	r4, r4, #24
 8024e6a:	9412      	str	r4, [sp, #72]	; 0x48
 8024e6c:	b178      	cbz	r0, 8024e8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8024e6e:	eb08 0c01 	add.w	ip, r8, r1
 8024e72:	f818 1001 	ldrb.w	r1, [r8, r1]
 8024e76:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024e7a:	9108      	str	r1, [sp, #32]
 8024e7c:	0e09      	lsrs	r1, r1, #24
 8024e7e:	9110      	str	r1, [sp, #64]	; 0x40
 8024e80:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8024e84:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8024e88:	910c      	str	r1, [sp, #48]	; 0x30
 8024e8a:	0e09      	lsrs	r1, r1, #24
 8024e8c:	9113      	str	r1, [sp, #76]	; 0x4c
 8024e8e:	b292      	uxth	r2, r2
 8024e90:	b280      	uxth	r0, r0
 8024e92:	fb02 f900 	mul.w	r9, r2, r0
 8024e96:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8024e9a:	0112      	lsls	r2, r2, #4
 8024e9c:	eba2 0809 	sub.w	r8, r2, r9
 8024ea0:	b280      	uxth	r0, r0
 8024ea2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024ea6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8024ea8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024eaa:	fa1f f888 	uxth.w	r8, r8
 8024eae:	1a12      	subs	r2, r2, r0
 8024eb0:	b292      	uxth	r2, r2
 8024eb2:	fb08 f101 	mul.w	r1, r8, r1
 8024eb6:	fb02 110e 	mla	r1, r2, lr, r1
 8024eba:	fb00 1104 	mla	r1, r0, r4, r1
 8024ebe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024ec0:	fb09 1104 	mla	r1, r9, r4, r1
 8024ec4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8024ec8:	2900      	cmp	r1, #0
 8024eca:	f000 80f5 	beq.w	80250b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8024ece:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024ed2:	d01b      	beq.n	8024f0c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8024ed4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8024ed8:	fb0e fa0a 	mul.w	sl, lr, sl
 8024edc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024ee0:	fb0e fe03 	mul.w	lr, lr, r3
 8024ee4:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8024ee8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024eec:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8024ef0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8024ef4:	4453      	add	r3, sl
 8024ef6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8024efa:	0a1b      	lsrs	r3, r3, #8
 8024efc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024f00:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024f04:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024f08:	ea43 030c 	orr.w	r3, r3, ip
 8024f0c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024f0e:	2cff      	cmp	r4, #255	; 0xff
 8024f10:	d021      	beq.n	8024f56 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8024f12:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024f14:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024f18:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024f1a:	fb04 fb0b 	mul.w	fp, r4, fp
 8024f1e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024f20:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024f24:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8024f26:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024f2a:	fb04 fa0a 	mul.w	sl, r4, sl
 8024f2e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024f32:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024f36:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024f3a:	44de      	add	lr, fp
 8024f3c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024f40:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024f44:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024f48:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024f4c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024f50:	ea4e 040a 	orr.w	r4, lr, sl
 8024f54:	940b      	str	r4, [sp, #44]	; 0x2c
 8024f56:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024f58:	2cff      	cmp	r4, #255	; 0xff
 8024f5a:	d021      	beq.n	8024fa0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 8024f5c:	9c08      	ldr	r4, [sp, #32]
 8024f5e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024f62:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024f64:	fb04 fb0b 	mul.w	fp, r4, fp
 8024f68:	9c08      	ldr	r4, [sp, #32]
 8024f6a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024f6e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024f70:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024f74:	fb04 fa0a 	mul.w	sl, r4, sl
 8024f78:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024f7c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024f80:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024f84:	44de      	add	lr, fp
 8024f86:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024f8a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024f8e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024f92:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024f96:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024f9a:	ea4e 040a 	orr.w	r4, lr, sl
 8024f9e:	9408      	str	r4, [sp, #32]
 8024fa0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024fa2:	2cff      	cmp	r4, #255	; 0xff
 8024fa4:	d021      	beq.n	8024fea <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8024fa6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024fa8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8024fac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024fae:	fb04 fb0b 	mul.w	fp, r4, fp
 8024fb2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024fb4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8024fb8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8024fba:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8024fbe:	fb04 fa0a 	mul.w	sl, r4, sl
 8024fc2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024fc6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024fca:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8024fce:	44de      	add	lr, fp
 8024fd0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8024fd4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024fd8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024fdc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024fe0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8024fe4:	ea4e 040a 	orr.w	r4, lr, sl
 8024fe8:	940c      	str	r4, [sp, #48]	; 0x30
 8024fea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024fec:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8024ff0:	9c08      	ldr	r4, [sp, #32]
 8024ff2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024ff6:	fb08 fc0c 	mul.w	ip, r8, ip
 8024ffa:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024ffe:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8025002:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8025004:	fb00 cc0e 	mla	ip, r0, lr, ip
 8025008:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 802500c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 802500e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8025012:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8025016:	fb08 f80e 	mul.w	r8, r8, lr
 802501a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802501e:	fb02 8303 	mla	r3, r2, r3, r8
 8025022:	9a08      	ldr	r2, [sp, #32]
 8025024:	f8b7 8000 	ldrh.w	r8, [r7]
 8025028:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 802502c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802502e:	fb00 330a 	mla	r3, r0, sl, r3
 8025032:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8025036:	fb09 3900 	mla	r9, r9, r0, r3
 802503a:	43c9      	mvns	r1, r1
 802503c:	ea4f 2228 	mov.w	r2, r8, asr #8
 8025040:	fa5f fe81 	uxtb.w	lr, r1
 8025044:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025048:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802504c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025050:	fb02 f20e 	mul.w	r2, r2, lr
 8025054:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025058:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802505c:	ea4c 0c09 	orr.w	ip, ip, r9
 8025060:	1c53      	adds	r3, r2, #1
 8025062:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8025066:	ea4f 00e8 	mov.w	r0, r8, asr #3
 802506a:	ea4f 431c 	mov.w	r3, ip, lsr #16
 802506e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025072:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025076:	4a63      	ldr	r2, [pc, #396]	; (8025204 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8025078:	fb00 f00e 	mul.w	r0, r0, lr
 802507c:	b2db      	uxtb	r3, r3
 802507e:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8025082:	1c43      	adds	r3, r0, #1
 8025084:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8025088:	ea4f 231c 	mov.w	r3, ip, lsr #8
 802508c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8025090:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8025094:	b2c9      	uxtb	r1, r1
 8025096:	00db      	lsls	r3, r3, #3
 8025098:	fb01 f10e 	mul.w	r1, r1, lr
 802509c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80250a0:	4313      	orrs	r3, r2
 80250a2:	1c4a      	adds	r2, r1, #1
 80250a4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 80250a8:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80250ac:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 80250b0:	ea4c 0c03 	orr.w	ip, ip, r3
 80250b4:	f8a7 c000 	strh.w	ip, [r7]
 80250b8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80250ba:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80250bc:	441a      	add	r2, r3
 80250be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80250c0:	9225      	str	r2, [sp, #148]	; 0x94
 80250c2:	441d      	add	r5, r3
 80250c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80250c6:	3b01      	subs	r3, #1
 80250c8:	3702      	adds	r7, #2
 80250ca:	9317      	str	r3, [sp, #92]	; 0x5c
 80250cc:	e699      	b.n	8024e02 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80250ce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80250d0:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80250d2:	441c      	add	r4, r3
 80250d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80250d6:	9425      	str	r4, [sp, #148]	; 0x94
 80250d8:	441d      	add	r5, r3
 80250da:	9b07      	ldr	r3, [sp, #28]
 80250dc:	3b01      	subs	r3, #1
 80250de:	9307      	str	r3, [sp, #28]
 80250e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80250e2:	3302      	adds	r3, #2
 80250e4:	930a      	str	r3, [sp, #40]	; 0x28
 80250e6:	e66b      	b.n	8024dc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80250e8:	d024      	beq.n	8025134 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 80250ea:	9b07      	ldr	r3, [sp, #28]
 80250ec:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80250ee:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80250f0:	3b01      	subs	r3, #1
 80250f2:	fb00 4003 	mla	r0, r0, r3, r4
 80250f6:	1400      	asrs	r0, r0, #16
 80250f8:	f53f ae80 	bmi.w	8024dfc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80250fc:	3901      	subs	r1, #1
 80250fe:	4288      	cmp	r0, r1
 8025100:	f6bf ae7c 	bge.w	8024dfc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8025104:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8025106:	fb01 5303 	mla	r3, r1, r3, r5
 802510a:	141b      	asrs	r3, r3, #16
 802510c:	f53f ae76 	bmi.w	8024dfc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8025110:	3a01      	subs	r2, #1
 8025112:	4293      	cmp	r3, r2
 8025114:	f6bf ae72 	bge.w	8024dfc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8025118:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802511c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8025120:	f1bb 0f00 	cmp.w	fp, #0
 8025124:	dc70      	bgt.n	8025208 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8025126:	9b07      	ldr	r3, [sp, #28]
 8025128:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802512c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802512e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025132:	930a      	str	r3, [sp, #40]	; 0x28
 8025134:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025136:	2b00      	cmp	r3, #0
 8025138:	f340 81ae 	ble.w	8025498 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 802513c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025140:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025144:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025148:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802514a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802514e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025152:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025156:	eef0 6a62 	vmov.f32	s13, s5
 802515a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802515e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025162:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025166:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 802516a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802516e:	eef0 6a43 	vmov.f32	s13, s6
 8025172:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025176:	ee12 2a90 	vmov	r2, s5
 802517a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802517e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025182:	ee13 2a10 	vmov	r2, s6
 8025186:	9327      	str	r3, [sp, #156]	; 0x9c
 8025188:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802518a:	fb92 f3f3 	sdiv	r3, r2, r3
 802518e:	9328      	str	r3, [sp, #160]	; 0xa0
 8025190:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8025192:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8025194:	3b01      	subs	r3, #1
 8025196:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802519a:	9316      	str	r3, [sp, #88]	; 0x58
 802519c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802519e:	bf08      	it	eq
 80251a0:	4613      	moveq	r3, r2
 80251a2:	ee16 5a90 	vmov	r5, s13
 80251a6:	9307      	str	r3, [sp, #28]
 80251a8:	eeb0 3a67 	vmov.f32	s6, s15
 80251ac:	eef0 2a47 	vmov.f32	s5, s14
 80251b0:	e5f8      	b.n	8024da4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80251b2:	2800      	cmp	r0, #0
 80251b4:	f43f ae6b 	beq.w	8024e8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 80251b8:	f818 1001 	ldrb.w	r1, [r8, r1]
 80251bc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80251c0:	9108      	str	r1, [sp, #32]
 80251c2:	0e09      	lsrs	r1, r1, #24
 80251c4:	9110      	str	r1, [sp, #64]	; 0x40
 80251c6:	e662      	b.n	8024e8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 80251c8:	f113 0801 	adds.w	r8, r3, #1
 80251cc:	f53f af74 	bmi.w	80250b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80251d0:	4541      	cmp	r1, r8
 80251d2:	f6ff af71 	blt.w	80250b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80251d6:	f11c 0801 	adds.w	r8, ip, #1
 80251da:	f53f af6d 	bmi.w	80250b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80251de:	45c6      	cmp	lr, r8
 80251e0:	f6ff af6a 	blt.w	80250b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80251e4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80251e8:	b209      	sxth	r1, r1
 80251ea:	fa0f f38e 	sxth.w	r3, lr
 80251ee:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80251f2:	9301      	str	r3, [sp, #4]
 80251f4:	9100      	str	r1, [sp, #0]
 80251f6:	4633      	mov	r3, r6
 80251f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80251fa:	9819      	ldr	r0, [sp, #100]	; 0x64
 80251fc:	4639      	mov	r1, r7
 80251fe:	f7ff fc7a 	bl	8024af6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 8025202:	e759      	b.n	80250b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8025204:	fffff800 	.word	0xfffff800
 8025208:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802520a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 802520c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025210:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8025212:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025216:	1427      	asrs	r7, r4, #16
 8025218:	142b      	asrs	r3, r5, #16
 802521a:	fb01 7303 	mla	r3, r1, r3, r7
 802521e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025220:	18e7      	adds	r7, r4, r3
 8025222:	5ce3      	ldrb	r3, [r4, r3]
 8025224:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8025228:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802522c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8025230:	2a00      	cmp	r2, #0
 8025232:	f000 8127 	beq.w	8025484 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8025236:	f897 e001 	ldrb.w	lr, [r7, #1]
 802523a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802523e:	940d      	str	r4, [sp, #52]	; 0x34
 8025240:	0e24      	lsrs	r4, r4, #24
 8025242:	9414      	str	r4, [sp, #80]	; 0x50
 8025244:	b170      	cbz	r0, 8025264 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8025246:	eb07 0e01 	add.w	lr, r7, r1
 802524a:	5c79      	ldrb	r1, [r7, r1]
 802524c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025250:	9109      	str	r1, [sp, #36]	; 0x24
 8025252:	0e09      	lsrs	r1, r1, #24
 8025254:	9111      	str	r1, [sp, #68]	; 0x44
 8025256:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802525a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802525e:	910e      	str	r1, [sp, #56]	; 0x38
 8025260:	0e09      	lsrs	r1, r1, #24
 8025262:	9115      	str	r1, [sp, #84]	; 0x54
 8025264:	b292      	uxth	r2, r2
 8025266:	b280      	uxth	r0, r0
 8025268:	fb02 f800 	mul.w	r8, r2, r0
 802526c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8025270:	0112      	lsls	r2, r2, #4
 8025272:	eba2 0e08 	sub.w	lr, r2, r8
 8025276:	b280      	uxth	r0, r0
 8025278:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 802527c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802527e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025280:	fa1f fe8e 	uxth.w	lr, lr
 8025284:	1a09      	subs	r1, r1, r0
 8025286:	b289      	uxth	r1, r1
 8025288:	fb0e f202 	mul.w	r2, lr, r2
 802528c:	fb01 220c 	mla	r2, r1, ip, r2
 8025290:	fb00 2204 	mla	r2, r0, r4, r2
 8025294:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025296:	fb08 2204 	mla	r2, r8, r4, r2
 802529a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802529e:	2a00      	cmp	r2, #0
 80252a0:	f000 80e5 	beq.w	802546e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80252a4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80252a8:	d019      	beq.n	80252de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 80252aa:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80252ae:	fb0c fa0a 	mul.w	sl, ip, sl
 80252b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80252b6:	fb0c fc03 	mul.w	ip, ip, r3
 80252ba:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80252be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80252c2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80252c6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80252ca:	4453      	add	r3, sl
 80252cc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80252d0:	0a1b      	lsrs	r3, r3, #8
 80252d2:	0a3f      	lsrs	r7, r7, #8
 80252d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80252d8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80252dc:	433b      	orrs	r3, r7
 80252de:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80252e0:	2cff      	cmp	r4, #255	; 0xff
 80252e2:	d020      	beq.n	8025326 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 80252e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80252e6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80252ea:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80252ec:	4367      	muls	r7, r4
 80252ee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80252f0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80252f4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80252f6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80252fa:	fb04 fa0a 	mul.w	sl, r4, sl
 80252fe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025302:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025306:	44bc      	add	ip, r7
 8025308:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802530c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025310:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025314:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025318:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802531c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025320:	ea4c 040a 	orr.w	r4, ip, sl
 8025324:	940d      	str	r4, [sp, #52]	; 0x34
 8025326:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025328:	2cff      	cmp	r4, #255	; 0xff
 802532a:	d020      	beq.n	802536e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 802532c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802532e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8025332:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8025334:	4367      	muls	r7, r4
 8025336:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8025338:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 802533c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802533e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8025342:	fb04 fa0a 	mul.w	sl, r4, sl
 8025346:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802534a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802534e:	44bc      	add	ip, r7
 8025350:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8025354:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8025358:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802535c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8025360:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025364:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8025368:	ea4c 040a 	orr.w	r4, ip, sl
 802536c:	9409      	str	r4, [sp, #36]	; 0x24
 802536e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025370:	2cff      	cmp	r4, #255	; 0xff
 8025372:	d020      	beq.n	80253b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8025374:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025376:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 802537a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802537c:	4367      	muls	r7, r4
 802537e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025380:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8025384:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8025386:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802538a:	fb04 fa0a 	mul.w	sl, r4, sl
 802538e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8025392:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8025396:	44bc      	add	ip, r7
 8025398:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802539c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80253a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80253a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80253a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80253ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80253b0:	ea4c 040a 	orr.w	r4, ip, sl
 80253b4:	940e      	str	r4, [sp, #56]	; 0x38
 80253b6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80253b8:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80253bc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80253be:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80253c2:	fb0e f707 	mul.w	r7, lr, r7
 80253c6:	fb01 770c 	mla	r7, r1, ip, r7
 80253ca:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80253ce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80253d0:	fb00 770c 	mla	r7, r0, ip, r7
 80253d4:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80253d8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80253da:	fb08 770c 	mla	r7, r8, ip, r7
 80253de:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80253e2:	fb0e fe0c 	mul.w	lr, lr, ip
 80253e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80253ea:	fb01 e303 	mla	r3, r1, r3, lr
 80253ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80253f0:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80253f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80253f6:	fb00 330a 	mla	r3, r0, sl, r3
 80253fa:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80253fe:	fb08 3c0c 	mla	ip, r8, ip, r3
 8025402:	f8b9 3000 	ldrh.w	r3, [r9]
 8025406:	43d2      	mvns	r2, r2
 8025408:	1218      	asrs	r0, r3, #8
 802540a:	b2d2      	uxtb	r2, r2
 802540c:	10d9      	asrs	r1, r3, #3
 802540e:	0a3f      	lsrs	r7, r7, #8
 8025410:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025414:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025418:	00db      	lsls	r3, r3, #3
 802541a:	4350      	muls	r0, r2
 802541c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8025420:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8025424:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025428:	b2db      	uxtb	r3, r3
 802542a:	ea47 070c 	orr.w	r7, r7, ip
 802542e:	4351      	muls	r1, r2
 8025430:	4353      	muls	r3, r2
 8025432:	1c42      	adds	r2, r0, #1
 8025434:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8025438:	0c3a      	lsrs	r2, r7, #16
 802543a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802543e:	4a18      	ldr	r2, [pc, #96]	; (80254a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8025440:	b2c0      	uxtb	r0, r0
 8025442:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8025446:	1c4a      	adds	r2, r1, #1
 8025448:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802544c:	0a3a      	lsrs	r2, r7, #8
 802544e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025452:	00c9      	lsls	r1, r1, #3
 8025454:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025458:	4301      	orrs	r1, r0
 802545a:	1c58      	adds	r0, r3, #1
 802545c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8025460:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8025464:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8025468:	4308      	orrs	r0, r1
 802546a:	f8a9 0000 	strh.w	r0, [r9]
 802546e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8025470:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8025472:	441a      	add	r2, r3
 8025474:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025476:	9225      	str	r2, [sp, #148]	; 0x94
 8025478:	f109 0902 	add.w	r9, r9, #2
 802547c:	441d      	add	r5, r3
 802547e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8025482:	e64d      	b.n	8025120 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ac>
 8025484:	2800      	cmp	r0, #0
 8025486:	f43f aeed 	beq.w	8025264 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802548a:	5c79      	ldrb	r1, [r7, r1]
 802548c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8025490:	9109      	str	r1, [sp, #36]	; 0x24
 8025492:	0e09      	lsrs	r1, r1, #24
 8025494:	9111      	str	r1, [sp, #68]	; 0x44
 8025496:	e6e5      	b.n	8025264 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8025498:	b01b      	add	sp, #108	; 0x6c
 802549a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802549e:	bf00      	nop
 80254a0:	fffff800 	.word	0xfffff800

080254a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 80254a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254a8:	b085      	sub	sp, #20
 80254aa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 80254ae:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 80254b2:	9103      	str	r1, [sp, #12]
 80254b4:	fb00 7406 	mla	r4, r0, r6, r7
 80254b8:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 80254bc:	2800      	cmp	r0, #0
 80254be:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 80254c2:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80254c6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80254ca:	9501      	str	r5, [sp, #4]
 80254cc:	eb03 0904 	add.w	r9, r3, r4
 80254d0:	f2c0 8150 	blt.w	8025774 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80254d4:	4583      	cmp	fp, r0
 80254d6:	f340 814d 	ble.w	8025774 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80254da:	2f00      	cmp	r7, #0
 80254dc:	f2c0 8146 	blt.w	802576c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80254e0:	42be      	cmp	r6, r7
 80254e2:	f340 8143 	ble.w	802576c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80254e6:	f813 c004 	ldrb.w	ip, [r3, r4]
 80254ea:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 80254ee:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80254f2:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 80254f6:	4355      	muls	r5, r2
 80254f8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80254fc:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8025500:	fb0c f203 	mul.w	r2, ip, r3
 8025504:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8025508:	f605 0501 	addw	r5, r5, #2049	; 0x801
 802550c:	441d      	add	r5, r3
 802550e:	f102 0320 	add.w	r3, r2, #32
 8025512:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025516:	0a1b      	lsrs	r3, r3, #8
 8025518:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 802551c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025520:	431c      	orrs	r4, r3
 8025522:	1c7b      	adds	r3, r7, #1
 8025524:	f100 812b 	bmi.w	802577e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 8025528:	429e      	cmp	r6, r3
 802552a:	f340 8128 	ble.w	802577e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 802552e:	2900      	cmp	r1, #0
 8025530:	f000 8128 	beq.w	8025784 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8025534:	9a01      	ldr	r2, [sp, #4]
 8025536:	f899 3001 	ldrb.w	r3, [r9, #1]
 802553a:	8855      	ldrh	r5, [r2, #2]
 802553c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8025540:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8025544:	fb08 f802 	mul.w	r8, r8, r2
 8025548:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802554c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8025550:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8025554:	435d      	muls	r5, r3
 8025556:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802555a:	44d0      	add	r8, sl
 802555c:	f105 0a20 	add.w	sl, r5, #32
 8025560:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8025564:	0a2d      	lsrs	r5, r5, #8
 8025566:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802556a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802556e:	432a      	orrs	r2, r5
 8025570:	3001      	adds	r0, #1
 8025572:	f100 810d 	bmi.w	8025790 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8025576:	4583      	cmp	fp, r0
 8025578:	f340 810a 	ble.w	8025790 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 802557c:	f1be 0f00 	cmp.w	lr, #0
 8025580:	f000 810b 	beq.w	802579a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8025584:	2f00      	cmp	r7, #0
 8025586:	f2c0 8100 	blt.w	802578a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 802558a:	42be      	cmp	r6, r7
 802558c:	f340 80fd 	ble.w	802578a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8025590:	9801      	ldr	r0, [sp, #4]
 8025592:	f819 5006 	ldrb.w	r5, [r9, r6]
 8025596:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802559a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802559e:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 80255a2:	fb0a fa00 	mul.w	sl, sl, r0
 80255a6:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 80255aa:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 80255ae:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80255b2:	fb05 f808 	mul.w	r8, r5, r8
 80255b6:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80255ba:	4482      	add	sl, r0
 80255bc:	f108 0020 	add.w	r0, r8, #32
 80255c0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80255c4:	0a00      	lsrs	r0, r0, #8
 80255c6:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80255ca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80255ce:	ea4b 0b00 	orr.w	fp, fp, r0
 80255d2:	3701      	adds	r7, #1
 80255d4:	f100 80e6 	bmi.w	80257a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80255d8:	42be      	cmp	r6, r7
 80255da:	f340 80e3 	ble.w	80257a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80255de:	2900      	cmp	r1, #0
 80255e0:	f000 80e3 	beq.w	80257aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 80255e4:	3601      	adds	r6, #1
 80255e6:	9801      	ldr	r0, [sp, #4]
 80255e8:	f819 7006 	ldrb.w	r7, [r9, r6]
 80255ec:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80255f0:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80255f4:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 80255f8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80255fc:	fb09 f906 	mul.w	r9, r9, r6
 8025600:	fb07 f800 	mul.w	r8, r7, r0
 8025604:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8025608:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 802560c:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8025610:	44d1      	add	r9, sl
 8025612:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8025616:	f108 0020 	add.w	r0, r8, #32
 802561a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802561e:	0a00      	lsrs	r0, r0, #8
 8025620:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025624:	4330      	orrs	r0, r6
 8025626:	b28e      	uxth	r6, r1
 8025628:	fa1f f98e 	uxth.w	r9, lr
 802562c:	fb06 f809 	mul.w	r8, r6, r9
 8025630:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8025634:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8025638:	0136      	lsls	r6, r6, #4
 802563a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802563e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8025642:	9601      	str	r6, [sp, #4]
 8025644:	ea4a 0404 	orr.w	r4, sl, r4
 8025648:	fa1f f689 	uxth.w	r6, r9
 802564c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025650:	fb11 f90e 	smulbb	r9, r1, lr
 8025654:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8025658:	9602      	str	r6, [sp, #8]
 802565a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802565e:	4626      	mov	r6, r4
 8025660:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025664:	f1ce 0410 	rsb	r4, lr, #16
 8025668:	1a64      	subs	r4, r4, r1
 802566a:	ea4a 0202 	orr.w	r2, sl, r2
 802566e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8025672:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025676:	434a      	muls	r2, r1
 8025678:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802567c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025680:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025684:	fb04 2406 	mla	r4, r4, r6, r2
 8025688:	ea4a 0000 	orr.w	r0, sl, r0
 802568c:	fb09 4200 	mla	r2, r9, r0, r4
 8025690:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8025694:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8025698:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802569c:	ea44 0b0b 	orr.w	fp, r4, fp
 80256a0:	9c01      	ldr	r4, [sp, #4]
 80256a2:	9e02      	ldr	r6, [sp, #8]
 80256a4:	9903      	ldr	r1, [sp, #12]
 80256a6:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 80256aa:	1ba4      	subs	r4, r4, r6
 80256ac:	9e01      	ldr	r6, [sp, #4]
 80256ae:	8808      	ldrh	r0, [r1, #0]
 80256b0:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 80256b4:	eba6 0608 	sub.w	r6, r6, r8
 80256b8:	b2b6      	uxth	r6, r6
 80256ba:	b2a4      	uxth	r4, r4
 80256bc:	4373      	muls	r3, r6
 80256be:	fb0c 3304 	mla	r3, ip, r4, r3
 80256c2:	9c02      	ldr	r4, [sp, #8]
 80256c4:	fb04 3505 	mla	r5, r4, r5, r3
 80256c8:	fb08 5707 	mla	r7, r8, r7, r5
 80256cc:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80256d0:	b289      	uxth	r1, r1
 80256d2:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80256d6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80256da:	434f      	muls	r7, r1
 80256dc:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80256e0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80256e4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80256e8:	1c7b      	adds	r3, r7, #1
 80256ea:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80256ee:	ea42 0e0e 	orr.w	lr, r2, lr
 80256f2:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80256f6:	fa1f f28e 	uxth.w	r2, lr
 80256fa:	1203      	asrs	r3, r0, #8
 80256fc:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 8025700:	b2ff      	uxtb	r7, r7
 8025702:	1215      	asrs	r5, r2, #8
 8025704:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8025708:	fb13 f307 	smulbb	r3, r3, r7
 802570c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025710:	fb05 3501 	mla	r5, r5, r1, r3
 8025714:	10c3      	asrs	r3, r0, #3
 8025716:	10d4      	asrs	r4, r2, #3
 8025718:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802571c:	fb13 f307 	smulbb	r3, r3, r7
 8025720:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8025724:	fb04 3401 	mla	r4, r4, r1, r3
 8025728:	00c3      	lsls	r3, r0, #3
 802572a:	00d2      	lsls	r2, r2, #3
 802572c:	b2db      	uxtb	r3, r3
 802572e:	fb13 f307 	smulbb	r3, r3, r7
 8025732:	b2d2      	uxtb	r2, r2
 8025734:	fb02 3101 	mla	r1, r2, r1, r3
 8025738:	b2ad      	uxth	r5, r5
 802573a:	b289      	uxth	r1, r1
 802573c:	b2a4      	uxth	r4, r4
 802573e:	1c6b      	adds	r3, r5, #1
 8025740:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025744:	1c62      	adds	r2, r4, #1
 8025746:	1c4b      	adds	r3, r1, #1
 8025748:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802574c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8025750:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8025754:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025758:	0964      	lsrs	r4, r4, #5
 802575a:	432b      	orrs	r3, r5
 802575c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8025760:	9a03      	ldr	r2, [sp, #12]
 8025762:	4323      	orrs	r3, r4
 8025764:	8013      	strh	r3, [r2, #0]
 8025766:	b005      	add	sp, #20
 8025768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802576c:	f04f 0c00 	mov.w	ip, #0
 8025770:	4664      	mov	r4, ip
 8025772:	e6d6      	b.n	8025522 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8025774:	2300      	movs	r3, #0
 8025776:	469c      	mov	ip, r3
 8025778:	461a      	mov	r2, r3
 802577a:	461c      	mov	r4, r3
 802577c:	e6f8      	b.n	8025570 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802577e:	2300      	movs	r3, #0
 8025780:	461a      	mov	r2, r3
 8025782:	e6f5      	b.n	8025570 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8025784:	460b      	mov	r3, r1
 8025786:	460a      	mov	r2, r1
 8025788:	e6f2      	b.n	8025570 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802578a:	2500      	movs	r5, #0
 802578c:	46ab      	mov	fp, r5
 802578e:	e720      	b.n	80255d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8025790:	2700      	movs	r7, #0
 8025792:	463d      	mov	r5, r7
 8025794:	4638      	mov	r0, r7
 8025796:	46bb      	mov	fp, r7
 8025798:	e745      	b.n	8025626 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802579a:	4677      	mov	r7, lr
 802579c:	4675      	mov	r5, lr
 802579e:	4670      	mov	r0, lr
 80257a0:	46f3      	mov	fp, lr
 80257a2:	e740      	b.n	8025626 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80257a4:	2700      	movs	r7, #0
 80257a6:	4638      	mov	r0, r7
 80257a8:	e73d      	b.n	8025626 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 80257aa:	460f      	mov	r7, r1
 80257ac:	4608      	mov	r0, r1
 80257ae:	e73a      	b.n	8025626 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

080257b0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80257b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80257b4:	b097      	sub	sp, #92	; 0x5c
 80257b6:	9214      	str	r2, [sp, #80]	; 0x50
 80257b8:	9308      	str	r3, [sp, #32]
 80257ba:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80257bc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80257c0:	9312      	str	r3, [sp, #72]	; 0x48
 80257c2:	9111      	str	r1, [sp, #68]	; 0x44
 80257c4:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80257c8:	9015      	str	r0, [sp, #84]	; 0x54
 80257ca:	6850      	ldr	r0, [r2, #4]
 80257cc:	6812      	ldr	r2, [r2, #0]
 80257ce:	fb00 1303 	mla	r3, r0, r3, r1
 80257d2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80257d6:	9309      	str	r3, [sp, #36]	; 0x24
 80257d8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80257da:	681b      	ldr	r3, [r3, #0]
 80257dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80257de:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80257e0:	685b      	ldr	r3, [r3, #4]
 80257e2:	930c      	str	r3, [sp, #48]	; 0x30
 80257e4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80257e8:	930a      	str	r3, [sp, #40]	; 0x28
 80257ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80257ec:	2b00      	cmp	r3, #0
 80257ee:	dc03      	bgt.n	80257f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80257f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80257f2:	2b00      	cmp	r3, #0
 80257f4:	f340 83cb 	ble.w	8025f8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 80257f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80257fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80257fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025802:	1e48      	subs	r0, r1, #1
 8025804:	1e55      	subs	r5, r2, #1
 8025806:	9b08      	ldr	r3, [sp, #32]
 8025808:	2b00      	cmp	r3, #0
 802580a:	f340 81a3 	ble.w	8025b54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 802580e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8025810:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025812:	1436      	asrs	r6, r6, #16
 8025814:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025818:	d406      	bmi.n	8025828 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802581a:	4286      	cmp	r6, r0
 802581c:	da04      	bge.n	8025828 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802581e:	2b00      	cmp	r3, #0
 8025820:	db02      	blt.n	8025828 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8025822:	42ab      	cmp	r3, r5
 8025824:	f2c0 8197 	blt.w	8025b56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8025828:	3601      	adds	r6, #1
 802582a:	f100 8184 	bmi.w	8025b36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802582e:	42b1      	cmp	r1, r6
 8025830:	f2c0 8181 	blt.w	8025b36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8025834:	3301      	adds	r3, #1
 8025836:	f100 817e 	bmi.w	8025b36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802583a:	429a      	cmp	r2, r3
 802583c:	f2c0 817b 	blt.w	8025b36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8025840:	9b08      	ldr	r3, [sp, #32]
 8025842:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8025844:	9313      	str	r3, [sp, #76]	; 0x4c
 8025846:	f64f 061f 	movw	r6, #63519	; 0xf81f
 802584a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802584c:	2b00      	cmp	r3, #0
 802584e:	f340 81a4 	ble.w	8025b9a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8025852:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025854:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8025856:	1418      	asrs	r0, r3, #16
 8025858:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802585a:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802585e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025860:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8025864:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025866:	142d      	asrs	r5, r5, #16
 8025868:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802586c:	f100 81f8 	bmi.w	8025c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8025870:	f102 3eff 	add.w	lr, r2, #4294967295
 8025874:	4575      	cmp	r5, lr
 8025876:	f280 81f3 	bge.w	8025c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802587a:	2800      	cmp	r0, #0
 802587c:	f2c0 81f0 	blt.w	8025c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8025880:	f103 3eff 	add.w	lr, r3, #4294967295
 8025884:	4570      	cmp	r0, lr
 8025886:	f280 81eb 	bge.w	8025c60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802588a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802588c:	b212      	sxth	r2, r2
 802588e:	fb00 5002 	mla	r0, r0, r2, r5
 8025892:	fa1f fe81 	uxth.w	lr, r1
 8025896:	eb03 0a00 	add.w	sl, r3, r0
 802589a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802589e:	f813 9000 	ldrb.w	r9, [r3, r0]
 80258a2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80258a6:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80258aa:	b29b      	uxth	r3, r3
 80258ac:	f1bc 0f00 	cmp.w	ip, #0
 80258b0:	f000 81b9 	beq.w	8025c26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 80258b4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80258b8:	940d      	str	r4, [sp, #52]	; 0x34
 80258ba:	eb0a 0b02 	add.w	fp, sl, r2
 80258be:	fa1f fa8c 	uxth.w	sl, ip
 80258c2:	fb0a fe0e 	mul.w	lr, sl, lr
 80258c6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80258ca:	fa1f fa8a 	uxth.w	sl, sl
 80258ce:	eba5 050e 	sub.w	r5, r5, lr
 80258d2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80258d6:	940e      	str	r4, [sp, #56]	; 0x38
 80258d8:	eba3 030a 	sub.w	r3, r3, sl
 80258dc:	b2ad      	uxth	r5, r5
 80258de:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80258e0:	b29b      	uxth	r3, r3
 80258e2:	fb08 f505 	mul.w	r5, r8, r5
 80258e6:	fb09 5303 	mla	r3, r9, r3, r5
 80258ea:	fb0a 3304 	mla	r3, sl, r4, r3
 80258ee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80258f0:	fb0e 3304 	mla	r3, lr, r4, r3
 80258f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80258f8:	2b00      	cmp	r3, #0
 80258fa:	f000 810f 	beq.w	8025b1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80258fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025900:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025904:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8025908:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 802590c:	f000 8190 	beq.w	8025c30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8025910:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025914:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025918:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802591c:	fb09 f000 	mul.w	r0, r9, r0
 8025920:	fb0a fe0e 	mul.w	lr, sl, lr
 8025924:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 8025928:	f100 0b20 	add.w	fp, r0, #32
 802592c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025930:	44ce      	add	lr, r9
 8025932:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8025936:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802593a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802593e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025942:	ea4e 0909 	orr.w	r9, lr, r9
 8025946:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802594a:	8868      	ldrh	r0, [r5, #2]
 802594c:	d019      	beq.n	8025982 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802594e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025952:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025956:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802595a:	fb08 f800 	mul.w	r8, r8, r0
 802595e:	fb0a fe0e 	mul.w	lr, sl, lr
 8025962:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8025966:	f108 0b20 	add.w	fp, r8, #32
 802596a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 802596e:	4486      	add	lr, r0
 8025970:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025974:	0a00      	lsrs	r0, r0, #8
 8025976:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 802597a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802597e:	ea4e 0000 	orr.w	r0, lr, r0
 8025982:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025986:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 802598a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802598e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025992:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025996:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802599a:	ea4e 0909 	orr.w	r9, lr, r9
 802599e:	ea4a 0000 	orr.w	r0, sl, r0
 80259a2:	f1bc 0f00 	cmp.w	ip, #0
 80259a6:	f000 8145 	beq.w	8025c34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 80259aa:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80259ae:	3a01      	subs	r2, #1
 80259b0:	0052      	lsls	r2, r2, #1
 80259b2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80259b4:	3202      	adds	r2, #2
 80259b6:	2cff      	cmp	r4, #255	; 0xff
 80259b8:	eb05 0e02 	add.w	lr, r5, r2
 80259bc:	5aaa      	ldrh	r2, [r5, r2]
 80259be:	d018      	beq.n	80259f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80259c0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80259c4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80259c8:	fb04 fa02 	mul.w	sl, r4, r2
 80259cc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80259d0:	fb08 f805 	mul.w	r8, r8, r5
 80259d4:	f10a 0520 	add.w	r5, sl, #32
 80259d8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80259dc:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80259e0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80259e4:	4442      	add	r2, r8
 80259e6:	0a2d      	lsrs	r5, r5, #8
 80259e8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80259ec:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80259f0:	432a      	orrs	r2, r5
 80259f2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80259f4:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80259f8:	2cff      	cmp	r4, #255	; 0xff
 80259fa:	d01a      	beq.n	8025a32 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80259fc:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 8025a00:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025a04:	fb04 fa05 	mul.w	sl, r4, r5
 8025a08:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025a0c:	fb08 f80e 	mul.w	r8, r8, lr
 8025a10:	f10a 0e20 	add.w	lr, sl, #32
 8025a14:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8025a18:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8025a1c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025a20:	4445      	add	r5, r8
 8025a22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025a26:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8025a2a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025a2e:	ea45 050e 	orr.w	r5, r5, lr
 8025a32:	fb1c fe01 	smulbb	lr, ip, r1
 8025a36:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025a3a:	f1cc 0810 	rsb	r8, ip, #16
 8025a3e:	eba8 0801 	sub.w	r8, r8, r1
 8025a42:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025a46:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8025a4a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8025a4e:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8025a52:	4341      	muls	r1, r0
 8025a54:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025a58:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025a5c:	ea4a 0202 	orr.w	r2, sl, r2
 8025a60:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025a64:	fb09 1108 	mla	r1, r9, r8, r1
 8025a68:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025a6c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025a70:	fb0c 1102 	mla	r1, ip, r2, r1
 8025a74:	ea4b 0505 	orr.w	r5, fp, r5
 8025a78:	fb0e 1e05 	mla	lr, lr, r5, r1
 8025a7c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8025a80:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025a84:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025a88:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025a8c:	ea42 0e0e 	orr.w	lr, r2, lr
 8025a90:	fa1f f28e 	uxth.w	r2, lr
 8025a94:	2bff      	cmp	r3, #255	; 0xff
 8025a96:	d103      	bne.n	8025aa0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8025a98:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025a9a:	29ff      	cmp	r1, #255	; 0xff
 8025a9c:	f000 80de 	beq.w	8025c5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8025aa0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8025aa2:	8838      	ldrh	r0, [r7, #0]
 8025aa4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025aa6:	434b      	muls	r3, r1
 8025aa8:	f103 0c01 	add.w	ip, r3, #1
 8025aac:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8025ab0:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8025ab4:	fa5f fc83 	uxtb.w	ip, r3
 8025ab8:	1203      	asrs	r3, r0, #8
 8025aba:	1215      	asrs	r5, r2, #8
 8025abc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8025ac0:	fb13 f30c 	smulbb	r3, r3, ip
 8025ac4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025ac8:	fb05 3501 	mla	r5, r5, r1, r3
 8025acc:	10c3      	asrs	r3, r0, #3
 8025ace:	10d1      	asrs	r1, r2, #3
 8025ad0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8025ad4:	fb13 f30c 	smulbb	r3, r3, ip
 8025ad8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025adc:	fb01 3104 	mla	r1, r1, r4, r3
 8025ae0:	00c3      	lsls	r3, r0, #3
 8025ae2:	00d2      	lsls	r2, r2, #3
 8025ae4:	b2db      	uxtb	r3, r3
 8025ae6:	b2d2      	uxtb	r2, r2
 8025ae8:	fb13 f30c 	smulbb	r3, r3, ip
 8025aec:	b2ad      	uxth	r5, r5
 8025aee:	fb02 3304 	mla	r3, r2, r4, r3
 8025af2:	b29a      	uxth	r2, r3
 8025af4:	1c6b      	adds	r3, r5, #1
 8025af6:	b289      	uxth	r1, r1
 8025af8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025afc:	1c53      	adds	r3, r2, #1
 8025afe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8025b02:	1c4a      	adds	r2, r1, #1
 8025b04:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8025b08:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8025b0c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8025b10:	0949      	lsrs	r1, r1, #5
 8025b12:	432b      	orrs	r3, r5
 8025b14:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025b18:	430b      	orrs	r3, r1
 8025b1a:	803b      	strh	r3, [r7, #0]
 8025b1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025b1e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8025b20:	4413      	add	r3, r2
 8025b22:	9321      	str	r3, [sp, #132]	; 0x84
 8025b24:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8025b26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025b28:	441a      	add	r2, r3
 8025b2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025b2c:	9222      	str	r2, [sp, #136]	; 0x88
 8025b2e:	3b01      	subs	r3, #1
 8025b30:	3702      	adds	r7, #2
 8025b32:	9313      	str	r3, [sp, #76]	; 0x4c
 8025b34:	e689      	b.n	802584a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8025b36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025b38:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8025b3a:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8025b3c:	4433      	add	r3, r6
 8025b3e:	9321      	str	r3, [sp, #132]	; 0x84
 8025b40:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025b42:	441c      	add	r4, r3
 8025b44:	9b08      	ldr	r3, [sp, #32]
 8025b46:	9422      	str	r4, [sp, #136]	; 0x88
 8025b48:	3b01      	subs	r3, #1
 8025b4a:	9308      	str	r3, [sp, #32]
 8025b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025b4e:	3302      	adds	r3, #2
 8025b50:	9309      	str	r3, [sp, #36]	; 0x24
 8025b52:	e658      	b.n	8025806 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8025b54:	d028      	beq.n	8025ba8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8025b56:	9b08      	ldr	r3, [sp, #32]
 8025b58:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8025b5a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8025b5c:	3b01      	subs	r3, #1
 8025b5e:	fb00 5003 	mla	r0, r0, r3, r5
 8025b62:	1400      	asrs	r0, r0, #16
 8025b64:	f53f ae6c 	bmi.w	8025840 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025b68:	3901      	subs	r1, #1
 8025b6a:	4288      	cmp	r0, r1
 8025b6c:	f6bf ae68 	bge.w	8025840 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025b70:	9924      	ldr	r1, [sp, #144]	; 0x90
 8025b72:	9822      	ldr	r0, [sp, #136]	; 0x88
 8025b74:	fb01 0303 	mla	r3, r1, r3, r0
 8025b78:	141b      	asrs	r3, r3, #16
 8025b7a:	f53f ae61 	bmi.w	8025840 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025b7e:	3a01      	subs	r2, #1
 8025b80:	4293      	cmp	r3, r2
 8025b82:	f6bf ae5d 	bge.w	8025840 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8025b86:	9b08      	ldr	r3, [sp, #32]
 8025b88:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8025b8c:	9313      	str	r3, [sp, #76]	; 0x4c
 8025b8e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8025b92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025b94:	2b00      	cmp	r3, #0
 8025b96:	f300 8082 	bgt.w	8025c9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8025b9a:	9b08      	ldr	r3, [sp, #32]
 8025b9c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025ba2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8025ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8025ba8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025baa:	2b00      	cmp	r3, #0
 8025bac:	f340 81ef 	ble.w	8025f8e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8025bb0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025bb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025bb8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025bbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025bbe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025bc2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025bc6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025bca:	eef0 6a62 	vmov.f32	s13, s5
 8025bce:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025bd2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025bd6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025bda:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8025bde:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025be2:	eef0 6a43 	vmov.f32	s13, s6
 8025be6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025bea:	ee12 2a90 	vmov	r2, s5
 8025bee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025bf2:	fb92 f3f3 	sdiv	r3, r2, r3
 8025bf6:	ee13 2a10 	vmov	r2, s6
 8025bfa:	9323      	str	r3, [sp, #140]	; 0x8c
 8025bfc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025bfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8025c02:	9324      	str	r3, [sp, #144]	; 0x90
 8025c04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025c06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025c08:	3b01      	subs	r3, #1
 8025c0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025c0e:	9311      	str	r3, [sp, #68]	; 0x44
 8025c10:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025c12:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8025c16:	bf08      	it	eq
 8025c18:	4613      	moveq	r3, r2
 8025c1a:	9308      	str	r3, [sp, #32]
 8025c1c:	eeb0 3a67 	vmov.f32	s6, s15
 8025c20:	eef0 2a47 	vmov.f32	s5, s14
 8025c24:	e5e1      	b.n	80257ea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8025c26:	fb08 f505 	mul.w	r5, r8, r5
 8025c2a:	fb09 5303 	mla	r3, r9, r3, r5
 8025c2e:	e661      	b.n	80258f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8025c30:	4681      	mov	r9, r0
 8025c32:	e688      	b.n	8025946 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8025c34:	f1c1 0210 	rsb	r2, r1, #16
 8025c38:	4341      	muls	r1, r0
 8025c3a:	fb09 1902 	mla	r9, r9, r2, r1
 8025c3e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025c42:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8025c46:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025c4a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025c4e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025c52:	ea42 0909 	orr.w	r9, r2, r9
 8025c56:	fa1f f289 	uxth.w	r2, r9
 8025c5a:	e71b      	b.n	8025a94 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8025c5c:	803a      	strh	r2, [r7, #0]
 8025c5e:	e75d      	b.n	8025b1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8025c60:	f115 0e01 	adds.w	lr, r5, #1
 8025c64:	f53f af5a 	bmi.w	8025b1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8025c68:	4572      	cmp	r2, lr
 8025c6a:	f6ff af57 	blt.w	8025b1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8025c6e:	f110 0e01 	adds.w	lr, r0, #1
 8025c72:	f53f af53 	bmi.w	8025b1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8025c76:	4573      	cmp	r3, lr
 8025c78:	f6ff af50 	blt.w	8025b1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8025c7c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8025c7e:	9502      	str	r5, [sp, #8]
 8025c80:	b21b      	sxth	r3, r3
 8025c82:	b212      	sxth	r2, r2
 8025c84:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8025c88:	9301      	str	r3, [sp, #4]
 8025c8a:	9200      	str	r2, [sp, #0]
 8025c8c:	e9cd c405 	strd	ip, r4, [sp, #20]
 8025c90:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8025c94:	4639      	mov	r1, r7
 8025c96:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025c98:	f7ff fc04 	bl	80254a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8025c9c:	e73e      	b.n	8025b1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8025c9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025ca0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025ca4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025ca6:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8025caa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025cac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025cb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8025cb2:	141f      	asrs	r7, r3, #16
 8025cb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025cb6:	141b      	asrs	r3, r3, #16
 8025cb8:	fb01 3707 	mla	r7, r1, r7, r3
 8025cbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025cbe:	fa1f fc82 	uxth.w	ip, r2
 8025cc2:	eb03 0a07 	add.w	sl, r3, r7
 8025cc6:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8025cca:	f813 9007 	ldrb.w	r9, [r3, r7]
 8025cce:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025cd2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8025cd6:	b29b      	uxth	r3, r3
 8025cd8:	2d00      	cmp	r5, #0
 8025cda:	f000 813d 	beq.w	8025f58 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8025cde:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8025ce2:	940f      	str	r4, [sp, #60]	; 0x3c
 8025ce4:	eb0a 0b01 	add.w	fp, sl, r1
 8025ce8:	fa1f fa85 	uxth.w	sl, r5
 8025cec:	fb0a fc0c 	mul.w	ip, sl, ip
 8025cf0:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8025cf4:	fa1f fa8a 	uxth.w	sl, sl
 8025cf8:	eba0 000c 	sub.w	r0, r0, ip
 8025cfc:	eba3 030a 	sub.w	r3, r3, sl
 8025d00:	b280      	uxth	r0, r0
 8025d02:	fb08 f000 	mul.w	r0, r8, r0
 8025d06:	b29b      	uxth	r3, r3
 8025d08:	fb09 0303 	mla	r3, r9, r3, r0
 8025d0c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025d0e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025d12:	9410      	str	r4, [sp, #64]	; 0x40
 8025d14:	fb0a 3300 	mla	r3, sl, r0, r3
 8025d18:	fb0c 3304 	mla	r3, ip, r4, r3
 8025d1c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025d20:	2b00      	cmp	r3, #0
 8025d22:	f000 810b 	beq.w	8025f3c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8025d26:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8025d28:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025d2a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025d2e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8025d32:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8025d36:	f000 8114 	beq.w	8025f62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 8025d3a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025d3e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025d42:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025d46:	fb09 f707 	mul.w	r7, r9, r7
 8025d4a:	fb0a fc0c 	mul.w	ip, sl, ip
 8025d4e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8025d52:	f107 0b20 	add.w	fp, r7, #32
 8025d56:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025d5a:	44cc      	add	ip, r9
 8025d5c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8025d60:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025d64:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025d68:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025d6c:	ea4c 0909 	orr.w	r9, ip, r9
 8025d70:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025d74:	8847      	ldrh	r7, [r0, #2]
 8025d76:	d019      	beq.n	8025dac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 8025d78:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8025d7c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025d80:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025d84:	fb08 f807 	mul.w	r8, r8, r7
 8025d88:	fb0a fc0c 	mul.w	ip, sl, ip
 8025d8c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8025d90:	f108 0b20 	add.w	fp, r8, #32
 8025d94:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8025d98:	44bc      	add	ip, r7
 8025d9a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8025d9e:	0a3f      	lsrs	r7, r7, #8
 8025da0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8025da4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025da8:	ea4c 0707 	orr.w	r7, ip, r7
 8025dac:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8025db0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8025db4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025db8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025dbc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025dc0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8025dc4:	ea4c 0909 	orr.w	r9, ip, r9
 8025dc8:	ea4a 0707 	orr.w	r7, sl, r7
 8025dcc:	2d00      	cmp	r5, #0
 8025dce:	f000 80ca 	beq.w	8025f66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8025dd2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8025dd6:	3901      	subs	r1, #1
 8025dd8:	0049      	lsls	r1, r1, #1
 8025dda:	3102      	adds	r1, #2
 8025ddc:	eb00 0c01 	add.w	ip, r0, r1
 8025de0:	5a41      	ldrh	r1, [r0, r1]
 8025de2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8025de4:	28ff      	cmp	r0, #255	; 0xff
 8025de6:	d019      	beq.n	8025e1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8025de8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025dea:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8025dee:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025df2:	fb04 fa01 	mul.w	sl, r4, r1
 8025df6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025dfa:	fb08 f800 	mul.w	r8, r8, r0
 8025dfe:	f10a 0020 	add.w	r0, sl, #32
 8025e02:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8025e06:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8025e0a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025e0e:	4441      	add	r1, r8
 8025e10:	0a00      	lsrs	r0, r0, #8
 8025e12:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8025e16:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025e1a:	4301      	orrs	r1, r0
 8025e1c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025e1e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8025e22:	2cff      	cmp	r4, #255	; 0xff
 8025e24:	d01a      	beq.n	8025e5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 8025e26:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 8025e2a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025e2e:	fb04 fa00 	mul.w	sl, r4, r0
 8025e32:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025e36:	fb08 f80c 	mul.w	r8, r8, ip
 8025e3a:	f10a 0c20 	add.w	ip, sl, #32
 8025e3e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8025e42:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8025e46:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025e4a:	4440      	add	r0, r8
 8025e4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025e50:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8025e54:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025e58:	ea40 000c 	orr.w	r0, r0, ip
 8025e5c:	fb15 fc02 	smulbb	ip, r5, r2
 8025e60:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8025e64:	f1c5 0810 	rsb	r8, r5, #16
 8025e68:	eba8 0802 	sub.w	r8, r8, r2
 8025e6c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8025e70:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8025e74:	437a      	muls	r2, r7
 8025e76:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025e7a:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8025e7e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025e82:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025e86:	fb09 2208 	mla	r2, r9, r8, r2
 8025e8a:	ea4a 0101 	orr.w	r1, sl, r1
 8025e8e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8025e92:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025e96:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025e9a:	fb05 2201 	mla	r2, r5, r1, r2
 8025e9e:	ea4b 0000 	orr.w	r0, fp, r0
 8025ea2:	fb0c 2200 	mla	r2, ip, r0, r2
 8025ea6:	0d57      	lsrs	r7, r2, #21
 8025ea8:	0952      	lsrs	r2, r2, #5
 8025eaa:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025eae:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025eb2:	433a      	orrs	r2, r7
 8025eb4:	2bff      	cmp	r3, #255	; 0xff
 8025eb6:	b292      	uxth	r2, r2
 8025eb8:	d102      	bne.n	8025ec0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8025eba:	9912      	ldr	r1, [sp, #72]	; 0x48
 8025ebc:	29ff      	cmp	r1, #255	; 0xff
 8025ebe:	d063      	beq.n	8025f88 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 8025ec0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8025ec2:	f8be 1000 	ldrh.w	r1, [lr]
 8025ec6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025ec8:	4343      	muls	r3, r0
 8025eca:	1c58      	adds	r0, r3, #1
 8025ecc:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8025ed0:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8025ed4:	1208      	asrs	r0, r1, #8
 8025ed6:	b2db      	uxtb	r3, r3
 8025ed8:	1215      	asrs	r5, r2, #8
 8025eda:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025ede:	fb10 f003 	smulbb	r0, r0, r3
 8025ee2:	10cf      	asrs	r7, r1, #3
 8025ee4:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025ee8:	00c9      	lsls	r1, r1, #3
 8025eea:	fb05 0504 	mla	r5, r5, r4, r0
 8025eee:	b2c9      	uxtb	r1, r1
 8025ef0:	10d0      	asrs	r0, r2, #3
 8025ef2:	00d2      	lsls	r2, r2, #3
 8025ef4:	fb11 f103 	smulbb	r1, r1, r3
 8025ef8:	b2d2      	uxtb	r2, r2
 8025efa:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8025efe:	fb02 1204 	mla	r2, r2, r4, r1
 8025f02:	fb17 f703 	smulbb	r7, r7, r3
 8025f06:	b2ad      	uxth	r5, r5
 8025f08:	b292      	uxth	r2, r2
 8025f0a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025f0e:	fb00 7004 	mla	r0, r0, r4, r7
 8025f12:	1c6b      	adds	r3, r5, #1
 8025f14:	1c57      	adds	r7, r2, #1
 8025f16:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8025f1a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8025f1e:	b280      	uxth	r0, r0
 8025f20:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025f24:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8025f28:	433d      	orrs	r5, r7
 8025f2a:	1c47      	adds	r7, r0, #1
 8025f2c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8025f30:	097f      	lsrs	r7, r7, #5
 8025f32:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8025f36:	433d      	orrs	r5, r7
 8025f38:	f8ae 5000 	strh.w	r5, [lr]
 8025f3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025f3e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8025f40:	4413      	add	r3, r2
 8025f42:	9321      	str	r3, [sp, #132]	; 0x84
 8025f44:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8025f46:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025f48:	441a      	add	r2, r3
 8025f4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025f4c:	9222      	str	r2, [sp, #136]	; 0x88
 8025f4e:	3b01      	subs	r3, #1
 8025f50:	f10e 0e02 	add.w	lr, lr, #2
 8025f54:	9313      	str	r3, [sp, #76]	; 0x4c
 8025f56:	e61c      	b.n	8025b92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8025f58:	fb08 f000 	mul.w	r0, r8, r0
 8025f5c:	fb09 0303 	mla	r3, r9, r3, r0
 8025f60:	e6dc      	b.n	8025d1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 8025f62:	46b9      	mov	r9, r7
 8025f64:	e704      	b.n	8025d70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 8025f66:	f1c2 0110 	rsb	r1, r2, #16
 8025f6a:	437a      	muls	r2, r7
 8025f6c:	fb09 2901 	mla	r9, r9, r1, r2
 8025f70:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025f74:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8025f78:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8025f7c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025f80:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025f84:	4302      	orrs	r2, r0
 8025f86:	e795      	b.n	8025eb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8025f88:	f8ae 2000 	strh.w	r2, [lr]
 8025f8c:	e7d6      	b.n	8025f3c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8025f8e:	b017      	add	sp, #92	; 0x5c
 8025f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025f94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8025f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f98:	b085      	sub	sp, #20
 8025f9a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8025f9e:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 8025fa2:	9103      	str	r1, [sp, #12]
 8025fa4:	fb00 7406 	mla	r4, r0, r6, r7
 8025fa8:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 8025fac:	2800      	cmp	r0, #0
 8025fae:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 8025fb2:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 8025fb6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 8025fba:	9501      	str	r5, [sp, #4]
 8025fbc:	eb02 0904 	add.w	r9, r2, r4
 8025fc0:	f2c0 8141 	blt.w	8026246 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8025fc4:	4583      	cmp	fp, r0
 8025fc6:	f340 813e 	ble.w	8026246 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8025fca:	2f00      	cmp	r7, #0
 8025fcc:	f2c0 8137 	blt.w	802623e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8025fd0:	42be      	cmp	r6, r7
 8025fd2:	f340 8134 	ble.w	802623e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 8025fd6:	f812 c004 	ldrb.w	ip, [r2, r4]
 8025fda:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8025fde:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8025fe2:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8025fe6:	4355      	muls	r5, r2
 8025fe8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025fec:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8025ff0:	fb0c f203 	mul.w	r2, ip, r3
 8025ff4:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 8025ff8:	f605 0501 	addw	r5, r5, #2049	; 0x801
 8025ffc:	441d      	add	r5, r3
 8025ffe:	f102 0320 	add.w	r3, r2, #32
 8026002:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026006:	0a1b      	lsrs	r3, r3, #8
 8026008:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 802600c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026010:	431c      	orrs	r4, r3
 8026012:	1c7b      	adds	r3, r7, #1
 8026014:	f100 811c 	bmi.w	8026250 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 8026018:	429e      	cmp	r6, r3
 802601a:	f340 8119 	ble.w	8026250 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 802601e:	2900      	cmp	r1, #0
 8026020:	f000 8119 	beq.w	8026256 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 8026024:	9a01      	ldr	r2, [sp, #4]
 8026026:	f899 3001 	ldrb.w	r3, [r9, #1]
 802602a:	8855      	ldrh	r5, [r2, #2]
 802602c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8026030:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 8026034:	fb08 f802 	mul.w	r8, r8, r2
 8026038:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802603c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8026040:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8026044:	435d      	muls	r5, r3
 8026046:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802604a:	44d0      	add	r8, sl
 802604c:	f105 0a20 	add.w	sl, r5, #32
 8026050:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8026054:	0a2d      	lsrs	r5, r5, #8
 8026056:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802605a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802605e:	432a      	orrs	r2, r5
 8026060:	3001      	adds	r0, #1
 8026062:	f100 80fe 	bmi.w	8026262 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8026066:	4583      	cmp	fp, r0
 8026068:	f340 80fb 	ble.w	8026262 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 802606c:	f1be 0f00 	cmp.w	lr, #0
 8026070:	f000 80fc 	beq.w	802626c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8026074:	2f00      	cmp	r7, #0
 8026076:	f2c0 80f1 	blt.w	802625c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 802607a:	42be      	cmp	r6, r7
 802607c:	f340 80ee 	ble.w	802625c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8026080:	9801      	ldr	r0, [sp, #4]
 8026082:	f819 5006 	ldrb.w	r5, [r9, r6]
 8026086:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802608a:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 802608e:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 8026092:	fb0a fa00 	mul.w	sl, sl, r0
 8026096:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 802609a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 802609e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 80260a2:	fb05 f808 	mul.w	r8, r5, r8
 80260a6:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 80260aa:	4482      	add	sl, r0
 80260ac:	f108 0020 	add.w	r0, r8, #32
 80260b0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80260b4:	0a00      	lsrs	r0, r0, #8
 80260b6:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 80260ba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80260be:	ea4b 0b00 	orr.w	fp, fp, r0
 80260c2:	3701      	adds	r7, #1
 80260c4:	f100 80d7 	bmi.w	8026276 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80260c8:	42be      	cmp	r6, r7
 80260ca:	f340 80d4 	ble.w	8026276 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 80260ce:	2900      	cmp	r1, #0
 80260d0:	f000 80d4 	beq.w	802627c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 80260d4:	3601      	adds	r6, #1
 80260d6:	9801      	ldr	r0, [sp, #4]
 80260d8:	f819 7006 	ldrb.w	r7, [r9, r6]
 80260dc:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80260e0:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80260e4:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 80260e8:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80260ec:	fb09 f906 	mul.w	r9, r9, r6
 80260f0:	fb07 f800 	mul.w	r8, r7, r0
 80260f4:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80260f8:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80260fc:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8026100:	44d1      	add	r9, sl
 8026102:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 8026106:	f108 0020 	add.w	r0, r8, #32
 802610a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 802610e:	0a00      	lsrs	r0, r0, #8
 8026110:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026114:	4330      	orrs	r0, r6
 8026116:	b28e      	uxth	r6, r1
 8026118:	fa1f f98e 	uxth.w	r9, lr
 802611c:	fb06 f809 	mul.w	r8, r6, r9
 8026120:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8026124:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8026128:	0136      	lsls	r6, r6, #4
 802612a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802612e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8026132:	9601      	str	r6, [sp, #4]
 8026134:	ea4a 0404 	orr.w	r4, sl, r4
 8026138:	fa1f f689 	uxth.w	r6, r9
 802613c:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8026140:	fb11 f90e 	smulbb	r9, r1, lr
 8026144:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 8026148:	9602      	str	r6, [sp, #8]
 802614a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802614e:	4626      	mov	r6, r4
 8026150:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026154:	f1ce 0410 	rsb	r4, lr, #16
 8026158:	1a64      	subs	r4, r4, r1
 802615a:	ea4a 0202 	orr.w	r2, sl, r2
 802615e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8026162:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026166:	434a      	muls	r2, r1
 8026168:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802616c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026170:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026174:	fb04 2406 	mla	r4, r4, r6, r2
 8026178:	ea4a 0000 	orr.w	r0, sl, r0
 802617c:	fb09 4200 	mla	r2, r9, r0, r4
 8026180:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8026184:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026188:	9801      	ldr	r0, [sp, #4]
 802618a:	9903      	ldr	r1, [sp, #12]
 802618c:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8026190:	ea44 0b0b 	orr.w	fp, r4, fp
 8026194:	9c02      	ldr	r4, [sp, #8]
 8026196:	8809      	ldrh	r1, [r1, #0]
 8026198:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 802619c:	1b00      	subs	r0, r0, r4
 802619e:	9c01      	ldr	r4, [sp, #4]
 80261a0:	eba4 0608 	sub.w	r6, r4, r8
 80261a4:	b2b6      	uxth	r6, r6
 80261a6:	b280      	uxth	r0, r0
 80261a8:	4373      	muls	r3, r6
 80261aa:	fb0c 3300 	mla	r3, ip, r0, r3
 80261ae:	9802      	ldr	r0, [sp, #8]
 80261b0:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80261b4:	fb00 3505 	mla	r5, r0, r5, r3
 80261b8:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80261bc:	fb08 5707 	mla	r7, r8, r7, r5
 80261c0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80261c4:	120b      	asrs	r3, r1, #8
 80261c6:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80261ca:	ea6f 2727 	mvn.w	r7, r7, asr #8
 80261ce:	b2ff      	uxtb	r7, r7
 80261d0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80261d4:	10c8      	asrs	r0, r1, #3
 80261d6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80261da:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80261de:	00c9      	lsls	r1, r1, #3
 80261e0:	437b      	muls	r3, r7
 80261e2:	ea42 0e0e 	orr.w	lr, r2, lr
 80261e6:	b2c9      	uxtb	r1, r1
 80261e8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80261ec:	fa1f f28e 	uxth.w	r2, lr
 80261f0:	4378      	muls	r0, r7
 80261f2:	434f      	muls	r7, r1
 80261f4:	1c59      	adds	r1, r3, #1
 80261f6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80261fa:	1213      	asrs	r3, r2, #8
 80261fc:	f023 0307 	bic.w	r3, r3, #7
 8026200:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8026204:	1c41      	adds	r1, r0, #1
 8026206:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802620a:	10d1      	asrs	r1, r2, #3
 802620c:	f021 0103 	bic.w	r1, r1, #3
 8026210:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8026214:	021b      	lsls	r3, r3, #8
 8026216:	00c9      	lsls	r1, r1, #3
 8026218:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802621c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8026220:	430b      	orrs	r3, r1
 8026222:	1c79      	adds	r1, r7, #1
 8026224:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8026228:	00d2      	lsls	r2, r2, #3
 802622a:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 802622e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8026232:	431a      	orrs	r2, r3
 8026234:	9b03      	ldr	r3, [sp, #12]
 8026236:	801a      	strh	r2, [r3, #0]
 8026238:	b005      	add	sp, #20
 802623a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802623e:	f04f 0c00 	mov.w	ip, #0
 8026242:	4664      	mov	r4, ip
 8026244:	e6e5      	b.n	8026012 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8026246:	2300      	movs	r3, #0
 8026248:	469c      	mov	ip, r3
 802624a:	461a      	mov	r2, r3
 802624c:	461c      	mov	r4, r3
 802624e:	e707      	b.n	8026060 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8026250:	2300      	movs	r3, #0
 8026252:	461a      	mov	r2, r3
 8026254:	e704      	b.n	8026060 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8026256:	460b      	mov	r3, r1
 8026258:	460a      	mov	r2, r1
 802625a:	e701      	b.n	8026060 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802625c:	2500      	movs	r5, #0
 802625e:	46ab      	mov	fp, r5
 8026260:	e72f      	b.n	80260c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8026262:	2700      	movs	r7, #0
 8026264:	463d      	mov	r5, r7
 8026266:	4638      	mov	r0, r7
 8026268:	46bb      	mov	fp, r7
 802626a:	e754      	b.n	8026116 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802626c:	4677      	mov	r7, lr
 802626e:	4675      	mov	r5, lr
 8026270:	4670      	mov	r0, lr
 8026272:	46f3      	mov	fp, lr
 8026274:	e74f      	b.n	8026116 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8026276:	2700      	movs	r7, #0
 8026278:	4638      	mov	r0, r7
 802627a:	e74c      	b.n	8026116 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802627c:	460f      	mov	r7, r1
 802627e:	4608      	mov	r0, r1
 8026280:	e749      	b.n	8026116 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08026284 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026288:	b093      	sub	sp, #76	; 0x4c
 802628a:	9210      	str	r2, [sp, #64]	; 0x40
 802628c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802628e:	910e      	str	r1, [sp, #56]	; 0x38
 8026290:	9306      	str	r3, [sp, #24]
 8026292:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8026296:	9011      	str	r0, [sp, #68]	; 0x44
 8026298:	6850      	ldr	r0, [r2, #4]
 802629a:	6812      	ldr	r2, [r2, #0]
 802629c:	fb00 1303 	mla	r3, r0, r3, r1
 80262a0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80262a4:	9307      	str	r3, [sp, #28]
 80262a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80262a8:	681b      	ldr	r3, [r3, #0]
 80262aa:	9308      	str	r3, [sp, #32]
 80262ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80262ae:	685b      	ldr	r3, [r3, #4]
 80262b0:	9309      	str	r3, [sp, #36]	; 0x24
 80262b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80262b4:	2b00      	cmp	r3, #0
 80262b6:	dc03      	bgt.n	80262c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80262b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80262ba:	2b00      	cmp	r3, #0
 80262bc:	f340 83b4 	ble.w	8026a28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 80262c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80262c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80262c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80262ca:	1e48      	subs	r0, r1, #1
 80262cc:	1e55      	subs	r5, r2, #1
 80262ce:	9b06      	ldr	r3, [sp, #24]
 80262d0:	2b00      	cmp	r3, #0
 80262d2:	f340 8163 	ble.w	802659c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80262d6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80262d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80262da:	1436      	asrs	r6, r6, #16
 80262dc:	ea4f 4323 	mov.w	r3, r3, asr #16
 80262e0:	d406      	bmi.n	80262f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80262e2:	4286      	cmp	r6, r0
 80262e4:	da04      	bge.n	80262f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80262e6:	2b00      	cmp	r3, #0
 80262e8:	db02      	blt.n	80262f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80262ea:	42ab      	cmp	r3, r5
 80262ec:	f2c0 8157 	blt.w	802659e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80262f0:	3601      	adds	r6, #1
 80262f2:	f100 8144 	bmi.w	802657e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80262f6:	42b1      	cmp	r1, r6
 80262f8:	f2c0 8141 	blt.w	802657e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80262fc:	3301      	adds	r3, #1
 80262fe:	f100 813e 	bmi.w	802657e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8026302:	429a      	cmp	r2, r3
 8026304:	f2c0 813b 	blt.w	802657e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 8026308:	9b06      	ldr	r3, [sp, #24]
 802630a:	9f07      	ldr	r7, [sp, #28]
 802630c:	930f      	str	r3, [sp, #60]	; 0x3c
 802630e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8026312:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026314:	2b00      	cmp	r3, #0
 8026316:	f340 8164 	ble.w	80265e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 802631a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802631c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802631e:	1418      	asrs	r0, r3, #16
 8026320:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026322:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8026326:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8026328:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 802632c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802632e:	142d      	asrs	r5, r5, #16
 8026330:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8026334:	f100 81ee 	bmi.w	8026714 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8026338:	f102 3eff 	add.w	lr, r2, #4294967295
 802633c:	4575      	cmp	r5, lr
 802633e:	f280 81e9 	bge.w	8026714 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8026342:	2800      	cmp	r0, #0
 8026344:	f2c0 81e6 	blt.w	8026714 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8026348:	f103 3eff 	add.w	lr, r3, #4294967295
 802634c:	4570      	cmp	r0, lr
 802634e:	f280 81e1 	bge.w	8026714 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8026352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026354:	b212      	sxth	r2, r2
 8026356:	fb00 5002 	mla	r0, r0, r2, r5
 802635a:	fa1f fe81 	uxth.w	lr, r1
 802635e:	eb03 0a00 	add.w	sl, r3, r0
 8026362:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8026366:	f813 9000 	ldrb.w	r9, [r3, r0]
 802636a:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802636e:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8026372:	b29b      	uxth	r3, r3
 8026374:	f1bc 0f00 	cmp.w	ip, #0
 8026378:	f000 8179 	beq.w	802666e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 802637c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8026380:	940a      	str	r4, [sp, #40]	; 0x28
 8026382:	eb0a 0b02 	add.w	fp, sl, r2
 8026386:	fa1f fa8c 	uxth.w	sl, ip
 802638a:	fb0a fe0e 	mul.w	lr, sl, lr
 802638e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8026392:	fa1f fa8a 	uxth.w	sl, sl
 8026396:	eba5 050e 	sub.w	r5, r5, lr
 802639a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802639e:	940b      	str	r4, [sp, #44]	; 0x2c
 80263a0:	eba3 030a 	sub.w	r3, r3, sl
 80263a4:	b2ad      	uxth	r5, r5
 80263a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80263a8:	b29b      	uxth	r3, r3
 80263aa:	fb08 f505 	mul.w	r5, r8, r5
 80263ae:	fb09 5303 	mla	r3, r9, r3, r5
 80263b2:	fb0a 3304 	mla	r3, sl, r4, r3
 80263b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80263b8:	fb0e 3304 	mla	r3, lr, r4, r3
 80263bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80263c0:	2b00      	cmp	r3, #0
 80263c2:	f000 80cf 	beq.w	8026564 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80263c6:	9c08      	ldr	r4, [sp, #32]
 80263c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80263cc:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80263d0:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80263d4:	f000 8150 	beq.w	8026678 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80263d8:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80263dc:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80263e0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80263e4:	fb09 f000 	mul.w	r0, r9, r0
 80263e8:	fb0a fe0e 	mul.w	lr, sl, lr
 80263ec:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80263f0:	f100 0b20 	add.w	fp, r0, #32
 80263f4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80263f8:	44ce      	add	lr, r9
 80263fa:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80263fe:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026402:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026406:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802640a:	ea4e 0909 	orr.w	r9, lr, r9
 802640e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026412:	8868      	ldrh	r0, [r5, #2]
 8026414:	d019      	beq.n	802644a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8026416:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802641a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802641e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026422:	fb08 f800 	mul.w	r8, r8, r0
 8026426:	fb0a fe0e 	mul.w	lr, sl, lr
 802642a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 802642e:	f108 0b20 	add.w	fp, r8, #32
 8026432:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026436:	4486      	add	lr, r0
 8026438:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 802643c:	0a00      	lsrs	r0, r0, #8
 802643e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8026442:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8026446:	ea4e 0000 	orr.w	r0, lr, r0
 802644a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802644e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026452:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8026456:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802645a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802645e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026462:	ea4e 0909 	orr.w	r9, lr, r9
 8026466:	ea4a 0000 	orr.w	r0, sl, r0
 802646a:	f1bc 0f00 	cmp.w	ip, #0
 802646e:	f000 8105 	beq.w	802667c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8026472:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8026476:	3a01      	subs	r2, #1
 8026478:	0052      	lsls	r2, r2, #1
 802647a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802647c:	3202      	adds	r2, #2
 802647e:	2cff      	cmp	r4, #255	; 0xff
 8026480:	eb05 0e02 	add.w	lr, r5, r2
 8026484:	5aaa      	ldrh	r2, [r5, r2]
 8026486:	d018      	beq.n	80264ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8026488:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 802648c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026490:	fb04 fa02 	mul.w	sl, r4, r2
 8026494:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026498:	fb08 f805 	mul.w	r8, r8, r5
 802649c:	f10a 0520 	add.w	r5, sl, #32
 80264a0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 80264a4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 80264a8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80264ac:	4442      	add	r2, r8
 80264ae:	0a2d      	lsrs	r5, r5, #8
 80264b0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 80264b4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80264b8:	432a      	orrs	r2, r5
 80264ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80264bc:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80264c0:	2cff      	cmp	r4, #255	; 0xff
 80264c2:	d01a      	beq.n	80264fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80264c4:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80264c8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80264cc:	fb04 fa05 	mul.w	sl, r4, r5
 80264d0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80264d4:	fb08 f80e 	mul.w	r8, r8, lr
 80264d8:	f10a 0e20 	add.w	lr, sl, #32
 80264dc:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80264e0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80264e4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80264e8:	4445      	add	r5, r8
 80264ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80264ee:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80264f2:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80264f6:	ea45 050e 	orr.w	r5, r5, lr
 80264fa:	fb1c fe01 	smulbb	lr, ip, r1
 80264fe:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8026502:	f1cc 0810 	rsb	r8, ip, #16
 8026506:	eba8 0801 	sub.w	r8, r8, r1
 802650a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802650e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8026512:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8026516:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802651a:	4341      	muls	r1, r0
 802651c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026520:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026524:	ea4a 0202 	orr.w	r2, sl, r2
 8026528:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 802652c:	fb09 1108 	mla	r1, r9, r8, r1
 8026530:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026534:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026538:	fb0c 1102 	mla	r1, ip, r2, r1
 802653c:	ea4b 0505 	orr.w	r5, fp, r5
 8026540:	fb0e 1e05 	mla	lr, lr, r5, r1
 8026544:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8026548:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802654c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026550:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026554:	ea42 0e0e 	orr.w	lr, r2, lr
 8026558:	fa1f f28e 	uxth.w	r2, lr
 802655c:	2bff      	cmp	r3, #255	; 0xff
 802655e:	f040 80a1 	bne.w	80266a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8026562:	803a      	strh	r2, [r7, #0]
 8026564:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026566:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8026568:	4413      	add	r3, r2
 802656a:	931d      	str	r3, [sp, #116]	; 0x74
 802656c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802656e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026570:	441a      	add	r2, r3
 8026572:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026574:	921e      	str	r2, [sp, #120]	; 0x78
 8026576:	3b01      	subs	r3, #1
 8026578:	3702      	adds	r7, #2
 802657a:	930f      	str	r3, [sp, #60]	; 0x3c
 802657c:	e6c9      	b.n	8026312 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802657e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026580:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8026582:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8026584:	4433      	add	r3, r6
 8026586:	931d      	str	r3, [sp, #116]	; 0x74
 8026588:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802658a:	441c      	add	r4, r3
 802658c:	9b06      	ldr	r3, [sp, #24]
 802658e:	941e      	str	r4, [sp, #120]	; 0x78
 8026590:	3b01      	subs	r3, #1
 8026592:	9306      	str	r3, [sp, #24]
 8026594:	9b07      	ldr	r3, [sp, #28]
 8026596:	3302      	adds	r3, #2
 8026598:	9307      	str	r3, [sp, #28]
 802659a:	e698      	b.n	80262ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802659c:	d028      	beq.n	80265f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802659e:	9b06      	ldr	r3, [sp, #24]
 80265a0:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80265a2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80265a4:	3b01      	subs	r3, #1
 80265a6:	fb00 5003 	mla	r0, r0, r3, r5
 80265aa:	1400      	asrs	r0, r0, #16
 80265ac:	f53f aeac 	bmi.w	8026308 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80265b0:	3901      	subs	r1, #1
 80265b2:	4288      	cmp	r0, r1
 80265b4:	f6bf aea8 	bge.w	8026308 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80265b8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80265ba:	981e      	ldr	r0, [sp, #120]	; 0x78
 80265bc:	fb01 0303 	mla	r3, r1, r3, r0
 80265c0:	141b      	asrs	r3, r3, #16
 80265c2:	f53f aea1 	bmi.w	8026308 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80265c6:	3a01      	subs	r2, #1
 80265c8:	4293      	cmp	r3, r2
 80265ca:	f6bf ae9d 	bge.w	8026308 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80265ce:	9b06      	ldr	r3, [sp, #24]
 80265d0:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80265d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80265d6:	f64f 061f 	movw	r6, #63519	; 0xf81f
 80265da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80265dc:	2b00      	cmp	r3, #0
 80265de:	f300 80b6 	bgt.w	802674e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 80265e2:	9b06      	ldr	r3, [sp, #24]
 80265e4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80265e8:	9b07      	ldr	r3, [sp, #28]
 80265ea:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80265ee:	9307      	str	r3, [sp, #28]
 80265f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80265f2:	2b00      	cmp	r3, #0
 80265f4:	f340 8218 	ble.w	8026a28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 80265f8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80265fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026600:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026604:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026606:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802660a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802660e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026612:	eef0 6a62 	vmov.f32	s13, s5
 8026616:	ee61 7a27 	vmul.f32	s15, s2, s15
 802661a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802661e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026622:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8026626:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802662a:	eef0 6a43 	vmov.f32	s13, s6
 802662e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026632:	ee12 2a90 	vmov	r2, s5
 8026636:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802663a:	fb92 f3f3 	sdiv	r3, r2, r3
 802663e:	ee13 2a10 	vmov	r2, s6
 8026642:	931f      	str	r3, [sp, #124]	; 0x7c
 8026644:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026646:	fb92 f3f3 	sdiv	r3, r2, r3
 802664a:	9320      	str	r3, [sp, #128]	; 0x80
 802664c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802664e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026650:	3b01      	subs	r3, #1
 8026652:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026656:	930e      	str	r3, [sp, #56]	; 0x38
 8026658:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802665a:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 802665e:	bf08      	it	eq
 8026660:	4613      	moveq	r3, r2
 8026662:	9306      	str	r3, [sp, #24]
 8026664:	eeb0 3a67 	vmov.f32	s6, s15
 8026668:	eef0 2a47 	vmov.f32	s5, s14
 802666c:	e621      	b.n	80262b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802666e:	fb08 f505 	mul.w	r5, r8, r5
 8026672:	fb09 5303 	mla	r3, r9, r3, r5
 8026676:	e6a1      	b.n	80263bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8026678:	4681      	mov	r9, r0
 802667a:	e6c8      	b.n	802640e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802667c:	f1c1 0210 	rsb	r2, r1, #16
 8026680:	4341      	muls	r1, r0
 8026682:	fb09 1902 	mla	r9, r9, r2, r1
 8026686:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802668a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802668e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8026692:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026696:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802669a:	ea42 0909 	orr.w	r9, r2, r9
 802669e:	fa1f f289 	uxth.w	r2, r9
 80266a2:	e75b      	b.n	802655c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 80266a4:	f8b7 c000 	ldrh.w	ip, [r7]
 80266a8:	43db      	mvns	r3, r3
 80266aa:	ea4f 202c 	mov.w	r0, ip, asr #8
 80266ae:	fa5f fe83 	uxtb.w	lr, r3
 80266b2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80266b6:	fb00 f00e 	mul.w	r0, r0, lr
 80266ba:	1c41      	adds	r1, r0, #1
 80266bc:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80266c0:	1211      	asrs	r1, r2, #8
 80266c2:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80266c6:	f021 0107 	bic.w	r1, r1, #7
 80266ca:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80266ce:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80266d2:	48d7      	ldr	r0, [pc, #860]	; (8026a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 80266d4:	fb05 f50e 	mul.w	r5, r5, lr
 80266d8:	b2c9      	uxtb	r1, r1
 80266da:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 80266de:	1c69      	adds	r1, r5, #1
 80266e0:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80266e4:	10d1      	asrs	r1, r2, #3
 80266e6:	f021 0103 	bic.w	r1, r1, #3
 80266ea:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80266ee:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80266f2:	b2db      	uxtb	r3, r3
 80266f4:	00c9      	lsls	r1, r1, #3
 80266f6:	fb03 f30e 	mul.w	r3, r3, lr
 80266fa:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80266fe:	4301      	orrs	r1, r0
 8026700:	1c58      	adds	r0, r3, #1
 8026702:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026706:	00d2      	lsls	r2, r2, #3
 8026708:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802670c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8026710:	430a      	orrs	r2, r1
 8026712:	e726      	b.n	8026562 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 8026714:	f115 0e01 	adds.w	lr, r5, #1
 8026718:	f53f af24 	bmi.w	8026564 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802671c:	4572      	cmp	r2, lr
 802671e:	f6ff af21 	blt.w	8026564 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8026722:	f110 0e01 	adds.w	lr, r0, #1
 8026726:	f53f af1d 	bmi.w	8026564 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802672a:	4573      	cmp	r3, lr
 802672c:	f6ff af1a 	blt.w	8026564 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8026730:	b21b      	sxth	r3, r3
 8026732:	b212      	sxth	r2, r2
 8026734:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8026738:	e9cd 5002 	strd	r5, r0, [sp, #8]
 802673c:	9301      	str	r3, [sp, #4]
 802673e:	9200      	str	r2, [sp, #0]
 8026740:	4639      	mov	r1, r7
 8026742:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8026746:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026748:	f7ff fc24 	bl	8025f94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 802674c:	e70a      	b.n	8026564 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802674e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026750:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026754:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8026756:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802675a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802675c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026760:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8026762:	141f      	asrs	r7, r3, #16
 8026764:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026766:	141b      	asrs	r3, r3, #16
 8026768:	fb01 3707 	mla	r7, r1, r7, r3
 802676c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802676e:	fa1f fc82 	uxth.w	ip, r2
 8026772:	eb03 0a07 	add.w	sl, r3, r7
 8026776:	ea4f 100c 	mov.w	r0, ip, lsl #4
 802677a:	f813 9007 	ldrb.w	r9, [r3, r7]
 802677e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8026782:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8026786:	b29b      	uxth	r3, r3
 8026788:	2d00      	cmp	r5, #0
 802678a:	f000 80fe 	beq.w	802698a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 802678e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8026792:	940c      	str	r4, [sp, #48]	; 0x30
 8026794:	eb0a 0b01 	add.w	fp, sl, r1
 8026798:	fa1f fa85 	uxth.w	sl, r5
 802679c:	fb0a fc0c 	mul.w	ip, sl, ip
 80267a0:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 80267a4:	fa1f fa8a 	uxth.w	sl, sl
 80267a8:	eba0 000c 	sub.w	r0, r0, ip
 80267ac:	eba3 030a 	sub.w	r3, r3, sl
 80267b0:	b280      	uxth	r0, r0
 80267b2:	fb08 f000 	mul.w	r0, r8, r0
 80267b6:	b29b      	uxth	r3, r3
 80267b8:	fb09 0303 	mla	r3, r9, r3, r0
 80267bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80267be:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80267c2:	940d      	str	r4, [sp, #52]	; 0x34
 80267c4:	fb0a 3300 	mla	r3, sl, r0, r3
 80267c8:	fb0c 3304 	mla	r3, ip, r4, r3
 80267cc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80267d0:	2b00      	cmp	r3, #0
 80267d2:	f000 80cc 	beq.w	802696e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 80267d6:	9808      	ldr	r0, [sp, #32]
 80267d8:	9c08      	ldr	r4, [sp, #32]
 80267da:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80267de:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80267e2:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80267e6:	f000 80d5 	beq.w	8026994 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80267ea:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 80267ee:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80267f2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80267f6:	fb09 f707 	mul.w	r7, r9, r7
 80267fa:	fb0a fc0c 	mul.w	ip, sl, ip
 80267fe:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8026802:	f107 0b20 	add.w	fp, r7, #32
 8026806:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802680a:	44cc      	add	ip, r9
 802680c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8026810:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026814:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026818:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802681c:	ea4c 0909 	orr.w	r9, ip, r9
 8026820:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8026824:	8847      	ldrh	r7, [r0, #2]
 8026826:	d019      	beq.n	802685c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 8026828:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 802682c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026830:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026834:	fb08 f807 	mul.w	r8, r8, r7
 8026838:	fb0a fc0c 	mul.w	ip, sl, ip
 802683c:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8026840:	f108 0b20 	add.w	fp, r8, #32
 8026844:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 8026848:	44bc      	add	ip, r7
 802684a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802684e:	0a3f      	lsrs	r7, r7, #8
 8026850:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8026854:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8026858:	ea4c 0707 	orr.w	r7, ip, r7
 802685c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8026860:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8026864:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8026868:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802686c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026870:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8026874:	ea4c 0909 	orr.w	r9, ip, r9
 8026878:	ea4a 0707 	orr.w	r7, sl, r7
 802687c:	2d00      	cmp	r5, #0
 802687e:	f000 808b 	beq.w	8026998 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8026882:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026886:	3901      	subs	r1, #1
 8026888:	0049      	lsls	r1, r1, #1
 802688a:	3102      	adds	r1, #2
 802688c:	eb00 0c01 	add.w	ip, r0, r1
 8026890:	5a41      	ldrh	r1, [r0, r1]
 8026892:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026894:	28ff      	cmp	r0, #255	; 0xff
 8026896:	d019      	beq.n	80268cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 8026898:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802689a:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 802689e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80268a2:	fb04 fa01 	mul.w	sl, r4, r1
 80268a6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80268aa:	fb08 f800 	mul.w	r8, r8, r0
 80268ae:	f10a 0020 	add.w	r0, sl, #32
 80268b2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 80268b6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 80268ba:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80268be:	4441      	add	r1, r8
 80268c0:	0a00      	lsrs	r0, r0, #8
 80268c2:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 80268c6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80268ca:	4301      	orrs	r1, r0
 80268cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80268ce:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80268d2:	2cff      	cmp	r4, #255	; 0xff
 80268d4:	d01a      	beq.n	802690c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 80268d6:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80268da:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80268de:	fb04 fa00 	mul.w	sl, r4, r0
 80268e2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80268e6:	fb08 f80c 	mul.w	r8, r8, ip
 80268ea:	f10a 0c20 	add.w	ip, sl, #32
 80268ee:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80268f2:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80268f6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80268fa:	4440      	add	r0, r8
 80268fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026900:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8026904:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026908:	ea40 000c 	orr.w	r0, r0, ip
 802690c:	fb15 fc02 	smulbb	ip, r5, r2
 8026910:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8026914:	f1c5 0810 	rsb	r8, r5, #16
 8026918:	eba8 0802 	sub.w	r8, r8, r2
 802691c:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026920:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8026924:	437a      	muls	r2, r7
 8026926:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802692a:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802692e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026932:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026936:	fb09 2208 	mla	r2, r9, r8, r2
 802693a:	ea4a 0101 	orr.w	r1, sl, r1
 802693e:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8026942:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026946:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802694a:	fb05 2201 	mla	r2, r5, r1, r2
 802694e:	ea4b 0000 	orr.w	r0, fp, r0
 8026952:	fb0c 2200 	mla	r2, ip, r0, r2
 8026956:	0d57      	lsrs	r7, r2, #21
 8026958:	0952      	lsrs	r2, r2, #5
 802695a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802695e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026962:	433a      	orrs	r2, r7
 8026964:	2bff      	cmp	r3, #255	; 0xff
 8026966:	b292      	uxth	r2, r2
 8026968:	d127      	bne.n	80269ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 802696a:	f8ae 2000 	strh.w	r2, [lr]
 802696e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026970:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8026972:	4413      	add	r3, r2
 8026974:	931d      	str	r3, [sp, #116]	; 0x74
 8026976:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8026978:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802697a:	441a      	add	r2, r3
 802697c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802697e:	921e      	str	r2, [sp, #120]	; 0x78
 8026980:	3b01      	subs	r3, #1
 8026982:	f10e 0e02 	add.w	lr, lr, #2
 8026986:	930f      	str	r3, [sp, #60]	; 0x3c
 8026988:	e627      	b.n	80265da <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 802698a:	fb08 f000 	mul.w	r0, r8, r0
 802698e:	fb09 0303 	mla	r3, r9, r3, r0
 8026992:	e71b      	b.n	80267cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8026994:	46b9      	mov	r9, r7
 8026996:	e743      	b.n	8026820 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 8026998:	f1c2 0110 	rsb	r1, r2, #16
 802699c:	437a      	muls	r2, r7
 802699e:	fb09 2901 	mla	r9, r9, r1, r2
 80269a2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80269a6:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80269aa:	ea4f 1259 	mov.w	r2, r9, lsr #5
 80269ae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80269b2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80269b6:	4302      	orrs	r2, r0
 80269b8:	e7d4      	b.n	8026964 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 80269ba:	f8be 7000 	ldrh.w	r7, [lr]
 80269be:	4c1c      	ldr	r4, [pc, #112]	; (8026a30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 80269c0:	43db      	mvns	r3, r3
 80269c2:	1238      	asrs	r0, r7, #8
 80269c4:	fa5f fc83 	uxtb.w	ip, r3
 80269c8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80269cc:	10fd      	asrs	r5, r7, #3
 80269ce:	fb00 f00c 	mul.w	r0, r0, ip
 80269d2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80269d6:	fb05 f10c 	mul.w	r1, r5, ip
 80269da:	1c45      	adds	r5, r0, #1
 80269dc:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80269e0:	1215      	asrs	r5, r2, #8
 80269e2:	f025 0507 	bic.w	r5, r5, #7
 80269e6:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80269ea:	1c4d      	adds	r5, r1, #1
 80269ec:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 80269f0:	10d1      	asrs	r1, r2, #3
 80269f2:	f021 0103 	bic.w	r1, r1, #3
 80269f6:	00fb      	lsls	r3, r7, #3
 80269f8:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80269fc:	b2db      	uxtb	r3, r3
 80269fe:	b2c0      	uxtb	r0, r0
 8026a00:	00c9      	lsls	r1, r1, #3
 8026a02:	fb03 f30c 	mul.w	r3, r3, ip
 8026a06:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026a0a:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8026a0e:	4308      	orrs	r0, r1
 8026a10:	1c59      	adds	r1, r3, #1
 8026a12:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8026a16:	00d2      	lsls	r2, r2, #3
 8026a18:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8026a1c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8026a20:	4318      	orrs	r0, r3
 8026a22:	f8ae 0000 	strh.w	r0, [lr]
 8026a26:	e7a2      	b.n	802696e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8026a28:	b013      	add	sp, #76	; 0x4c
 8026a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a2e:	bf00      	nop
 8026a30:	fffff800 	.word	0xfffff800

08026a34 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8026a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026a38:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 8026a3c:	fb05 4c03 	mla	ip, r5, r3, r4
 8026a40:	2d00      	cmp	r5, #0
 8026a42:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8026a46:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8026a4a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8026a4e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8026a52:	8808      	ldrh	r0, [r1, #0]
 8026a54:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8026a58:	f2c0 80a7 	blt.w	8026baa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8026a5c:	45aa      	cmp	sl, r5
 8026a5e:	f340 80a4 	ble.w	8026baa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8026a62:	2c00      	cmp	r4, #0
 8026a64:	f2c0 809f 	blt.w	8026ba6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8026a68:	42a3      	cmp	r3, r4
 8026a6a:	f340 809c 	ble.w	8026ba6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8026a6e:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8026a72:	1c62      	adds	r2, r4, #1
 8026a74:	f100 809c 	bmi.w	8026bb0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8026a78:	4293      	cmp	r3, r2
 8026a7a:	f340 8099 	ble.w	8026bb0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8026a7e:	f1b9 0f00 	cmp.w	r9, #0
 8026a82:	f000 8095 	beq.w	8026bb0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8026a86:	f8be c002 	ldrh.w	ip, [lr, #2]
 8026a8a:	3501      	adds	r5, #1
 8026a8c:	f100 8094 	bmi.w	8026bb8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8026a90:	45aa      	cmp	sl, r5
 8026a92:	f340 8091 	ble.w	8026bb8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8026a96:	2f00      	cmp	r7, #0
 8026a98:	f000 808e 	beq.w	8026bb8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8026a9c:	2c00      	cmp	r4, #0
 8026a9e:	f2c0 8089 	blt.w	8026bb4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8026aa2:	42a3      	cmp	r3, r4
 8026aa4:	f340 8086 	ble.w	8026bb4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8026aa8:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8026aac:	3401      	adds	r4, #1
 8026aae:	f100 8086 	bmi.w	8026bbe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8026ab2:	42a3      	cmp	r3, r4
 8026ab4:	f340 8083 	ble.w	8026bbe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8026ab8:	f1b9 0f00 	cmp.w	r9, #0
 8026abc:	d07f      	beq.n	8026bbe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8026abe:	3301      	adds	r3, #1
 8026ac0:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8026ac4:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8026ac8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026acc:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8026ad0:	fb19 fe07 	smulbb	lr, r9, r7
 8026ad4:	ea44 0808 	orr.w	r8, r4, r8
 8026ad8:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8026adc:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8026ae0:	f1c7 0210 	rsb	r2, r7, #16
 8026ae4:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8026ae8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026aec:	ea44 0c0c 	orr.w	ip, r4, ip
 8026af0:	eba2 0209 	sub.w	r2, r2, r9
 8026af4:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8026af8:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8026afc:	fb04 f40c 	mul.w	r4, r4, ip
 8026b00:	fb02 4808 	mla	r8, r2, r8, r4
 8026b04:	041a      	lsls	r2, r3, #16
 8026b06:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026b0a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026b0e:	4313      	orrs	r3, r2
 8026b10:	042a      	lsls	r2, r5, #16
 8026b12:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026b16:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8026b1a:	fb0e 8303 	mla	r3, lr, r3, r8
 8026b1e:	432a      	orrs	r2, r5
 8026b20:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8026b24:	fb07 3202 	mla	r2, r7, r2, r3
 8026b28:	0d53      	lsrs	r3, r2, #21
 8026b2a:	0952      	lsrs	r2, r2, #5
 8026b2c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026b30:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026b34:	431a      	orrs	r2, r3
 8026b36:	b293      	uxth	r3, r2
 8026b38:	b2b4      	uxth	r4, r6
 8026b3a:	1202      	asrs	r2, r0, #8
 8026b3c:	43f6      	mvns	r6, r6
 8026b3e:	b2f6      	uxtb	r6, r6
 8026b40:	121d      	asrs	r5, r3, #8
 8026b42:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026b46:	fb12 f206 	smulbb	r2, r2, r6
 8026b4a:	10c7      	asrs	r7, r0, #3
 8026b4c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8026b50:	00c0      	lsls	r0, r0, #3
 8026b52:	fb05 2504 	mla	r5, r5, r4, r2
 8026b56:	b2c0      	uxtb	r0, r0
 8026b58:	10da      	asrs	r2, r3, #3
 8026b5a:	00db      	lsls	r3, r3, #3
 8026b5c:	b2db      	uxtb	r3, r3
 8026b5e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8026b62:	fb10 f006 	smulbb	r0, r0, r6
 8026b66:	b2ad      	uxth	r5, r5
 8026b68:	fb03 0004 	mla	r0, r3, r4, r0
 8026b6c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026b70:	fb17 f706 	smulbb	r7, r7, r6
 8026b74:	b280      	uxth	r0, r0
 8026b76:	1c6b      	adds	r3, r5, #1
 8026b78:	fb02 7204 	mla	r2, r2, r4, r7
 8026b7c:	b292      	uxth	r2, r2
 8026b7e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026b82:	1c43      	adds	r3, r0, #1
 8026b84:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026b88:	1c50      	adds	r0, r2, #1
 8026b8a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8026b8e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 8026b92:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026b96:	0952      	lsrs	r2, r2, #5
 8026b98:	432b      	orrs	r3, r5
 8026b9a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026b9e:	4313      	orrs	r3, r2
 8026ba0:	800b      	strh	r3, [r1, #0]
 8026ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026ba6:	4680      	mov	r8, r0
 8026ba8:	e763      	b.n	8026a72 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8026baa:	4684      	mov	ip, r0
 8026bac:	4680      	mov	r8, r0
 8026bae:	e76c      	b.n	8026a8a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8026bb0:	4684      	mov	ip, r0
 8026bb2:	e76a      	b.n	8026a8a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8026bb4:	4605      	mov	r5, r0
 8026bb6:	e779      	b.n	8026aac <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8026bb8:	4603      	mov	r3, r0
 8026bba:	4605      	mov	r5, r0
 8026bbc:	e782      	b.n	8026ac4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8026bbe:	4603      	mov	r3, r0
 8026bc0:	e780      	b.n	8026ac4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08026bc2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026bc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026bc6:	b093      	sub	sp, #76	; 0x4c
 8026bc8:	461d      	mov	r5, r3
 8026bca:	9210      	str	r2, [sp, #64]	; 0x40
 8026bcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026bce:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8026bd2:	920b      	str	r2, [sp, #44]	; 0x2c
 8026bd4:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8026bd8:	910a      	str	r1, [sp, #40]	; 0x28
 8026bda:	6859      	ldr	r1, [r3, #4]
 8026bdc:	681b      	ldr	r3, [r3, #0]
 8026bde:	9011      	str	r0, [sp, #68]	; 0x44
 8026be0:	fb01 2707 	mla	r7, r1, r7, r2
 8026be4:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8026be8:	9307      	str	r3, [sp, #28]
 8026bea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026bec:	681b      	ldr	r3, [r3, #0]
 8026bee:	9309      	str	r3, [sp, #36]	; 0x24
 8026bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026bf2:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8026bf6:	43db      	mvns	r3, r3
 8026bf8:	b2db      	uxtb	r3, r3
 8026bfa:	9308      	str	r3, [sp, #32]
 8026bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026bfe:	2b00      	cmp	r3, #0
 8026c00:	dc03      	bgt.n	8026c0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026c02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026c04:	2b00      	cmp	r3, #0
 8026c06:	f340 8203 	ble.w	8027010 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8026c0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026c0c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026c10:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026c14:	1e48      	subs	r0, r1, #1
 8026c16:	f102 3cff 	add.w	ip, r2, #4294967295
 8026c1a:	2d00      	cmp	r5, #0
 8026c1c:	f340 80da 	ble.w	8026dd4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8026c20:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026c24:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026c28:	d406      	bmi.n	8026c38 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026c2a:	4586      	cmp	lr, r0
 8026c2c:	da04      	bge.n	8026c38 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026c2e:	2b00      	cmp	r3, #0
 8026c30:	db02      	blt.n	8026c38 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8026c32:	4563      	cmp	r3, ip
 8026c34:	f2c0 80cf 	blt.w	8026dd6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8026c38:	f11e 0e01 	adds.w	lr, lr, #1
 8026c3c:	f100 80c1 	bmi.w	8026dc2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026c40:	4571      	cmp	r1, lr
 8026c42:	f2c0 80be 	blt.w	8026dc2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026c46:	3301      	adds	r3, #1
 8026c48:	f100 80bb 	bmi.w	8026dc2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026c4c:	429a      	cmp	r2, r3
 8026c4e:	f2c0 80b8 	blt.w	8026dc2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8026c52:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8026c56:	46a9      	mov	r9, r5
 8026c58:	f1b9 0f00 	cmp.w	r9, #0
 8026c5c:	f340 80d8 	ble.w	8026e10 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8026c60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026c62:	1421      	asrs	r1, r4, #16
 8026c64:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026c68:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026c6c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026c70:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026c74:	f100 8111 	bmi.w	8026e9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8026c78:	f10e 3aff 	add.w	sl, lr, #4294967295
 8026c7c:	4551      	cmp	r1, sl
 8026c7e:	f280 810c 	bge.w	8026e9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8026c82:	2800      	cmp	r0, #0
 8026c84:	f2c0 8109 	blt.w	8026e9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8026c88:	f103 3aff 	add.w	sl, r3, #4294967295
 8026c8c:	4550      	cmp	r0, sl
 8026c8e:	f280 8104 	bge.w	8026e9a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8026c92:	fa0f f38e 	sxth.w	r3, lr
 8026c96:	fb00 1103 	mla	r1, r0, r3, r1
 8026c9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026c9c:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8026ca0:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8026ca4:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8026ca8:	f1bc 0f00 	cmp.w	ip, #0
 8026cac:	d007      	beq.n	8026cbe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8026cae:	005b      	lsls	r3, r3, #1
 8026cb0:	eb0a 0003 	add.w	r0, sl, r3
 8026cb4:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8026cb8:	930c      	str	r3, [sp, #48]	; 0x30
 8026cba:	8843      	ldrh	r3, [r0, #2]
 8026cbc:	930d      	str	r3, [sp, #52]	; 0x34
 8026cbe:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8026cc2:	fb12 f30c 	smulbb	r3, r2, ip
 8026cc6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8026cca:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8026cce:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026cd2:	10db      	asrs	r3, r3, #3
 8026cd4:	ea40 000e 	orr.w	r0, r0, lr
 8026cd8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8026cdc:	f1cc 0e10 	rsb	lr, ip, #16
 8026ce0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026ce4:	ebae 0e02 	sub.w	lr, lr, r2
 8026ce8:	ea4a 0101 	orr.w	r1, sl, r1
 8026cec:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026cf0:	4351      	muls	r1, r2
 8026cf2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026cf4:	9f08      	ldr	r7, [sp, #32]
 8026cf6:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8026cfa:	fb0e 1e00 	mla	lr, lr, r0, r1
 8026cfe:	0410      	lsls	r0, r2, #16
 8026d00:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026d04:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026d08:	4310      	orrs	r0, r2
 8026d0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026d0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026d0e:	0412      	lsls	r2, r2, #16
 8026d10:	fb03 e000 	mla	r0, r3, r0, lr
 8026d14:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026d18:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8026d1c:	ea42 020e 	orr.w	r2, r2, lr
 8026d20:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8026d24:	fb03 0302 	mla	r3, r3, r2, r0
 8026d28:	0d5a      	lsrs	r2, r3, #21
 8026d2a:	095b      	lsrs	r3, r3, #5
 8026d2c:	f8b8 0000 	ldrh.w	r0, [r8]
 8026d30:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026d34:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026d38:	4313      	orrs	r3, r2
 8026d3a:	b29b      	uxth	r3, r3
 8026d3c:	1201      	asrs	r1, r0, #8
 8026d3e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8026d42:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8026d46:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026d4a:	fb11 f107 	smulbb	r1, r1, r7
 8026d4e:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8026d52:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8026d56:	00c0      	lsls	r0, r0, #3
 8026d58:	fb0c 1c02 	mla	ip, ip, r2, r1
 8026d5c:	b2c0      	uxtb	r0, r0
 8026d5e:	10d9      	asrs	r1, r3, #3
 8026d60:	00db      	lsls	r3, r3, #3
 8026d62:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8026d66:	b2db      	uxtb	r3, r3
 8026d68:	fb10 f007 	smulbb	r0, r0, r7
 8026d6c:	fa1f fc8c 	uxth.w	ip, ip
 8026d70:	fb03 0302 	mla	r3, r3, r2, r0
 8026d74:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026d78:	fb1e fe07 	smulbb	lr, lr, r7
 8026d7c:	fb01 e102 	mla	r1, r1, r2, lr
 8026d80:	b29a      	uxth	r2, r3
 8026d82:	f10c 0301 	add.w	r3, ip, #1
 8026d86:	b289      	uxth	r1, r1
 8026d88:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8026d8c:	1c53      	adds	r3, r2, #1
 8026d8e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8026d92:	1c4a      	adds	r2, r1, #1
 8026d94:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026d98:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8026d9c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026da0:	0949      	lsrs	r1, r1, #5
 8026da2:	ea43 030c 	orr.w	r3, r3, ip
 8026da6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026daa:	430b      	orrs	r3, r1
 8026dac:	f8a8 3000 	strh.w	r3, [r8]
 8026db0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026db2:	441c      	add	r4, r3
 8026db4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026db6:	f108 0802 	add.w	r8, r8, #2
 8026dba:	441e      	add	r6, r3
 8026dbc:	f109 39ff 	add.w	r9, r9, #4294967295
 8026dc0:	e74a      	b.n	8026c58 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8026dc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026dc4:	441c      	add	r4, r3
 8026dc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026dc8:	441e      	add	r6, r3
 8026dca:	9b07      	ldr	r3, [sp, #28]
 8026dcc:	3302      	adds	r3, #2
 8026dce:	3d01      	subs	r5, #1
 8026dd0:	9307      	str	r3, [sp, #28]
 8026dd2:	e722      	b.n	8026c1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8026dd4:	d022      	beq.n	8026e1c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8026dd6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8026dd8:	1e6b      	subs	r3, r5, #1
 8026dda:	fb00 4003 	mla	r0, r0, r3, r4
 8026dde:	1400      	asrs	r0, r0, #16
 8026de0:	f53f af37 	bmi.w	8026c52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026de4:	3901      	subs	r1, #1
 8026de6:	4288      	cmp	r0, r1
 8026de8:	f6bf af33 	bge.w	8026c52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026dec:	9920      	ldr	r1, [sp, #128]	; 0x80
 8026dee:	fb01 6303 	mla	r3, r1, r3, r6
 8026df2:	141b      	asrs	r3, r3, #16
 8026df4:	f53f af2d 	bmi.w	8026c52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026df8:	3a01      	subs	r2, #1
 8026dfa:	4293      	cmp	r3, r2
 8026dfc:	f6bf af29 	bge.w	8026c52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8026e00:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8026e04:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 8026e08:	46a8      	mov	r8, r5
 8026e0a:	f1b8 0f00 	cmp.w	r8, #0
 8026e0e:	dc5e      	bgt.n	8026ece <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8026e10:	9b07      	ldr	r3, [sp, #28]
 8026e12:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026e16:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8026e1a:	9307      	str	r3, [sp, #28]
 8026e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026e1e:	2b00      	cmp	r3, #0
 8026e20:	f340 80f6 	ble.w	8027010 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8026e24:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026e28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026e2c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026e30:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026e32:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026e36:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026e3a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026e3e:	eef0 6a62 	vmov.f32	s13, s5
 8026e42:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026e46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026e4a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026e4e:	ee16 4a90 	vmov	r4, s13
 8026e52:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026e56:	eef0 6a43 	vmov.f32	s13, s6
 8026e5a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026e5e:	ee12 2a90 	vmov	r2, s5
 8026e62:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026e66:	fb92 f3f3 	sdiv	r3, r2, r3
 8026e6a:	ee13 2a10 	vmov	r2, s6
 8026e6e:	931f      	str	r3, [sp, #124]	; 0x7c
 8026e70:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026e72:	fb92 f3f3 	sdiv	r3, r2, r3
 8026e76:	9320      	str	r3, [sp, #128]	; 0x80
 8026e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026e7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026e7c:	3b01      	subs	r3, #1
 8026e7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026e82:	930a      	str	r3, [sp, #40]	; 0x28
 8026e84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026e86:	ee16 6a90 	vmov	r6, s13
 8026e8a:	bf14      	ite	ne
 8026e8c:	461d      	movne	r5, r3
 8026e8e:	4615      	moveq	r5, r2
 8026e90:	eeb0 3a67 	vmov.f32	s6, s15
 8026e94:	eef0 2a47 	vmov.f32	s5, s14
 8026e98:	e6b0      	b.n	8026bfc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026e9a:	f111 0a01 	adds.w	sl, r1, #1
 8026e9e:	d487      	bmi.n	8026db0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026ea0:	45d6      	cmp	lr, sl
 8026ea2:	db85      	blt.n	8026db0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026ea4:	f110 0a01 	adds.w	sl, r0, #1
 8026ea8:	d482      	bmi.n	8026db0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026eaa:	4553      	cmp	r3, sl
 8026eac:	db80      	blt.n	8026db0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026eae:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8026eb0:	9101      	str	r1, [sp, #4]
 8026eb2:	b21b      	sxth	r3, r3
 8026eb4:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8026eb8:	9300      	str	r3, [sp, #0]
 8026eba:	e9cd c704 	strd	ip, r7, [sp, #16]
 8026ebe:	fa0f f38e 	sxth.w	r3, lr
 8026ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026ec4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8026ec6:	4641      	mov	r1, r8
 8026ec8:	f7ff fdb4 	bl	8026a34 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8026ecc:	e770      	b.n	8026db0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8026ece:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026ed0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8026ed2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026ed6:	1430      	asrs	r0, r6, #16
 8026ed8:	1423      	asrs	r3, r4, #16
 8026eda:	fb01 3000 	mla	r0, r1, r0, r3
 8026ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026ee0:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8026ee4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8026ee8:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8026eec:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026ef0:	8858      	ldrh	r0, [r3, #2]
 8026ef2:	f1be 0f00 	cmp.w	lr, #0
 8026ef6:	d00b      	beq.n	8026f10 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8026ef8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8026efc:	3901      	subs	r1, #1
 8026efe:	0049      	lsls	r1, r1, #1
 8026f00:	3102      	adds	r1, #2
 8026f02:	eb03 0b01 	add.w	fp, r3, r1
 8026f06:	5a5b      	ldrh	r3, [r3, r1]
 8026f08:	930e      	str	r3, [sp, #56]	; 0x38
 8026f0a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8026f0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8026f10:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8026f14:	fb12 f30e 	smulbb	r3, r2, lr
 8026f18:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026f1c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026f20:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8026f24:	10db      	asrs	r3, r3, #3
 8026f26:	ea41 010c 	orr.w	r1, r1, ip
 8026f2a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026f2e:	f1ce 0c10 	rsb	ip, lr, #16
 8026f32:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026f36:	ebac 0c02 	sub.w	ip, ip, r2
 8026f3a:	ea4b 0000 	orr.w	r0, fp, r0
 8026f3e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026f42:	4350      	muls	r0, r2
 8026f44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026f46:	9f08      	ldr	r7, [sp, #32]
 8026f48:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8026f4c:	fb0c 0c01 	mla	ip, ip, r1, r0
 8026f50:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8026f54:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8026f58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026f5a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8026f5c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026f60:	0412      	lsls	r2, r2, #16
 8026f62:	ea4b 0101 	orr.w	r1, fp, r1
 8026f66:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026f6a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026f6e:	fb03 c101 	mla	r1, r3, r1, ip
 8026f72:	4302      	orrs	r2, r0
 8026f74:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8026f78:	fb03 1202 	mla	r2, r3, r2, r1
 8026f7c:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8026f80:	0952      	lsrs	r2, r2, #5
 8026f82:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8026f86:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8026f8a:	f8b9 2000 	ldrh.w	r2, [r9]
 8026f8e:	ea4b 0303 	orr.w	r3, fp, r3
 8026f92:	b29b      	uxth	r3, r3
 8026f94:	1211      	asrs	r1, r2, #8
 8026f96:	1218      	asrs	r0, r3, #8
 8026f98:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026f9c:	fb11 f107 	smulbb	r1, r1, r7
 8026fa0:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8026fa4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026fa8:	00d2      	lsls	r2, r2, #3
 8026faa:	fb00 100a 	mla	r0, r0, sl, r1
 8026fae:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8026fb2:	10d9      	asrs	r1, r3, #3
 8026fb4:	b2d2      	uxtb	r2, r2
 8026fb6:	00db      	lsls	r3, r3, #3
 8026fb8:	fb1c fc07 	smulbb	ip, ip, r7
 8026fbc:	fb12 f207 	smulbb	r2, r2, r7
 8026fc0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8026fc4:	b2db      	uxtb	r3, r3
 8026fc6:	b280      	uxth	r0, r0
 8026fc8:	fb01 c10a 	mla	r1, r1, sl, ip
 8026fcc:	fb03 230a 	mla	r3, r3, sl, r2
 8026fd0:	b29b      	uxth	r3, r3
 8026fd2:	b289      	uxth	r1, r1
 8026fd4:	1c42      	adds	r2, r0, #1
 8026fd6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8026fda:	f101 0c01 	add.w	ip, r1, #1
 8026fde:	1c5a      	adds	r2, r3, #1
 8026fe0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8026fe4:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8026fe8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8026fea:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8026fee:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8026ff2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8026ff6:	4310      	orrs	r0, r2
 8026ff8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026ffc:	441c      	add	r4, r3
 8026ffe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027000:	ea40 000c 	orr.w	r0, r0, ip
 8027004:	f829 0b02 	strh.w	r0, [r9], #2
 8027008:	441e      	add	r6, r3
 802700a:	f108 38ff 	add.w	r8, r8, #4294967295
 802700e:	e6fc      	b.n	8026e0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8027010:	b013      	add	sp, #76	; 0x4c
 8027012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027016 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8027016:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802701a:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 802701e:	fb0e 4703 	mla	r7, lr, r3, r4
 8027022:	f1be 0f00 	cmp.w	lr, #0
 8027026:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 802702a:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 802702e:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8027032:	8808      	ldrh	r0, [r1, #0]
 8027034:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8027038:	db60      	blt.n	80270fc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802703a:	45f1      	cmp	r9, lr
 802703c:	dd5e      	ble.n	80270fc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802703e:	2c00      	cmp	r4, #0
 8027040:	db5a      	blt.n	80270f8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8027042:	42a3      	cmp	r3, r4
 8027044:	dd58      	ble.n	80270f8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8027046:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 802704a:	1c62      	adds	r2, r4, #1
 802704c:	d459      	bmi.n	8027102 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802704e:	4293      	cmp	r3, r2
 8027050:	dd57      	ble.n	8027102 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8027052:	2d00      	cmp	r5, #0
 8027054:	d055      	beq.n	8027102 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8027056:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 802705a:	f11e 0e01 	adds.w	lr, lr, #1
 802705e:	d454      	bmi.n	802710a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8027060:	45f1      	cmp	r9, lr
 8027062:	dd52      	ble.n	802710a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8027064:	2e00      	cmp	r6, #0
 8027066:	d050      	beq.n	802710a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8027068:	2c00      	cmp	r4, #0
 802706a:	db4c      	blt.n	8027106 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 802706c:	42a3      	cmp	r3, r4
 802706e:	dd4a      	ble.n	8027106 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8027070:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8027074:	3401      	adds	r4, #1
 8027076:	d405      	bmi.n	8027084 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8027078:	42a3      	cmp	r3, r4
 802707a:	dd03      	ble.n	8027084 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802707c:	b115      	cbz	r5, 8027084 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802707e:	3301      	adds	r3, #1
 8027080:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8027084:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8027088:	fb15 f406 	smulbb	r4, r5, r6
 802708c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8027090:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8027094:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027098:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 802709c:	ea43 0c0c 	orr.w	ip, r3, ip
 80270a0:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80270a4:	f1c6 0310 	rsb	r3, r6, #16
 80270a8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80270ac:	1b5b      	subs	r3, r3, r5
 80270ae:	ea4e 0707 	orr.w	r7, lr, r7
 80270b2:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 80270b6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80270ba:	437d      	muls	r5, r7
 80270bc:	fb03 5c0c 	mla	ip, r3, ip, r5
 80270c0:	0403      	lsls	r3, r0, #16
 80270c2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80270c6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80270ca:	4318      	orrs	r0, r3
 80270cc:	0413      	lsls	r3, r2, #16
 80270ce:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80270d2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80270d6:	4313      	orrs	r3, r2
 80270d8:	fb04 c000 	mla	r0, r4, r0, ip
 80270dc:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 80270e0:	fb06 0003 	mla	r0, r6, r3, r0
 80270e4:	0d43      	lsrs	r3, r0, #21
 80270e6:	0940      	lsrs	r0, r0, #5
 80270e8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80270ec:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80270f0:	4318      	orrs	r0, r3
 80270f2:	8008      	strh	r0, [r1, #0]
 80270f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80270f8:	4684      	mov	ip, r0
 80270fa:	e7a6      	b.n	802704a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 80270fc:	4607      	mov	r7, r0
 80270fe:	4684      	mov	ip, r0
 8027100:	e7ab      	b.n	802705a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8027102:	4607      	mov	r7, r0
 8027104:	e7a9      	b.n	802705a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8027106:	4602      	mov	r2, r0
 8027108:	e7b4      	b.n	8027074 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 802710a:	4602      	mov	r2, r0
 802710c:	e7ba      	b.n	8027084 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0802710e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802710e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027112:	b08f      	sub	sp, #60	; 0x3c
 8027114:	461d      	mov	r5, r3
 8027116:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027118:	920c      	str	r2, [sp, #48]	; 0x30
 802711a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 802711e:	9107      	str	r1, [sp, #28]
 8027120:	6859      	ldr	r1, [r3, #4]
 8027122:	681b      	ldr	r3, [r3, #0]
 8027124:	900d      	str	r0, [sp, #52]	; 0x34
 8027126:	fb01 2707 	mla	r7, r1, r7, r2
 802712a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802712e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027130:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8027134:	f8d3 8000 	ldr.w	r8, [r3]
 8027138:	9b07      	ldr	r3, [sp, #28]
 802713a:	2b00      	cmp	r3, #0
 802713c:	dc03      	bgt.n	8027146 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802713e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027140:	2b00      	cmp	r3, #0
 8027142:	f340 8181 	ble.w	8027448 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8027146:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027148:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802714c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027150:	1e48      	subs	r0, r1, #1
 8027152:	f102 3cff 	add.w	ip, r2, #4294967295
 8027156:	2d00      	cmp	r5, #0
 8027158:	f340 809b 	ble.w	8027292 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 802715c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8027160:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027164:	d406      	bmi.n	8027174 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8027166:	4586      	cmp	lr, r0
 8027168:	da04      	bge.n	8027174 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802716a:	2b00      	cmp	r3, #0
 802716c:	db02      	blt.n	8027174 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802716e:	4563      	cmp	r3, ip
 8027170:	f2c0 8090 	blt.w	8027294 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8027174:	f11e 0e01 	adds.w	lr, lr, #1
 8027178:	f100 8084 	bmi.w	8027284 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802717c:	4571      	cmp	r1, lr
 802717e:	f2c0 8081 	blt.w	8027284 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8027182:	3301      	adds	r3, #1
 8027184:	d47e      	bmi.n	8027284 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8027186:	429a      	cmp	r2, r3
 8027188:	db7c      	blt.n	8027284 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802718a:	46aa      	mov	sl, r5
 802718c:	46b9      	mov	r9, r7
 802718e:	f1ba 0f00 	cmp.w	sl, #0
 8027192:	f340 8099 	ble.w	80272c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8027196:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027198:	1421      	asrs	r1, r4, #16
 802719a:	ea4f 4026 	mov.w	r0, r6, asr #16
 802719e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80271a2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80271a6:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80271aa:	f100 80d0 	bmi.w	802734e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80271ae:	f10e 3bff 	add.w	fp, lr, #4294967295
 80271b2:	4559      	cmp	r1, fp
 80271b4:	f280 80cb 	bge.w	802734e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80271b8:	2800      	cmp	r0, #0
 80271ba:	f2c0 80c8 	blt.w	802734e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80271be:	f103 3bff 	add.w	fp, r3, #4294967295
 80271c2:	4558      	cmp	r0, fp
 80271c4:	f280 80c3 	bge.w	802734e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80271c8:	fa0f fe8e 	sxth.w	lr, lr
 80271cc:	fb00 110e 	mla	r1, r0, lr, r1
 80271d0:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80271d4:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80271d8:	8841      	ldrh	r1, [r0, #2]
 80271da:	f1bc 0f00 	cmp.w	ip, #0
 80271de:	d00b      	beq.n	80271f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 80271e0:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80271e4:	3b01      	subs	r3, #1
 80271e6:	005b      	lsls	r3, r3, #1
 80271e8:	3302      	adds	r3, #2
 80271ea:	eb00 0e03 	add.w	lr, r0, r3
 80271ee:	5ac3      	ldrh	r3, [r0, r3]
 80271f0:	9308      	str	r3, [sp, #32]
 80271f2:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80271f6:	9309      	str	r3, [sp, #36]	; 0x24
 80271f8:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80271fc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027200:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8027204:	ea40 000b 	orr.w	r0, r0, fp
 8027208:	fb12 f30c 	smulbb	r3, r2, ip
 802720c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8027210:	10db      	asrs	r3, r3, #3
 8027212:	f1cc 0e10 	rsb	lr, ip, #16
 8027216:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802721a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802721e:	ebae 0e02 	sub.w	lr, lr, r2
 8027222:	ea4b 0101 	orr.w	r1, fp, r1
 8027226:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802722a:	4351      	muls	r1, r2
 802722c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802722e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8027232:	fb0e 1e00 	mla	lr, lr, r0, r1
 8027236:	0410      	lsls	r0, r2, #16
 8027238:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802723c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8027240:	4310      	orrs	r0, r2
 8027242:	9a08      	ldr	r2, [sp, #32]
 8027244:	9908      	ldr	r1, [sp, #32]
 8027246:	0412      	lsls	r2, r2, #16
 8027248:	fb03 e000 	mla	r0, r3, r0, lr
 802724c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027250:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8027254:	ea42 020e 	orr.w	r2, r2, lr
 8027258:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802725c:	fb03 0302 	mla	r3, r3, r2, r0
 8027260:	0d5a      	lsrs	r2, r3, #21
 8027262:	095b      	lsrs	r3, r3, #5
 8027264:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027268:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802726c:	4313      	orrs	r3, r2
 802726e:	f8a9 3000 	strh.w	r3, [r9]
 8027272:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027274:	441c      	add	r4, r3
 8027276:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027278:	f109 0902 	add.w	r9, r9, #2
 802727c:	441e      	add	r6, r3
 802727e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8027282:	e784      	b.n	802718e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8027284:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027286:	441c      	add	r4, r3
 8027288:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802728a:	3d01      	subs	r5, #1
 802728c:	441e      	add	r6, r3
 802728e:	3702      	adds	r7, #2
 8027290:	e761      	b.n	8027156 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027292:	d01d      	beq.n	80272d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027294:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8027296:	1e6b      	subs	r3, r5, #1
 8027298:	fb00 4003 	mla	r0, r0, r3, r4
 802729c:	1400      	asrs	r0, r0, #16
 802729e:	f53f af74 	bmi.w	802718a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80272a2:	3901      	subs	r1, #1
 80272a4:	4288      	cmp	r0, r1
 80272a6:	f6bf af70 	bge.w	802718a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80272aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80272ac:	fb01 6303 	mla	r3, r1, r3, r6
 80272b0:	141b      	asrs	r3, r3, #16
 80272b2:	f53f af6a 	bmi.w	802718a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80272b6:	3a01      	subs	r2, #1
 80272b8:	4293      	cmp	r3, r2
 80272ba:	f6bf af66 	bge.w	802718a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80272be:	46a9      	mov	r9, r5
 80272c0:	46ba      	mov	sl, r7
 80272c2:	f1b9 0f00 	cmp.w	r9, #0
 80272c6:	dc5a      	bgt.n	802737e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 80272c8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80272cc:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80272d0:	9b07      	ldr	r3, [sp, #28]
 80272d2:	2b00      	cmp	r3, #0
 80272d4:	f340 80b8 	ble.w	8027448 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80272d8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80272dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80272e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80272e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80272e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80272ea:	ee31 1a05 	vadd.f32	s2, s2, s10
 80272ee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80272f2:	eef0 6a62 	vmov.f32	s13, s5
 80272f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80272fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80272fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027302:	ee16 4a90 	vmov	r4, s13
 8027306:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802730a:	eef0 6a43 	vmov.f32	s13, s6
 802730e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027312:	ee12 2a90 	vmov	r2, s5
 8027316:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802731a:	fb92 f3f3 	sdiv	r3, r2, r3
 802731e:	ee13 2a10 	vmov	r2, s6
 8027322:	931b      	str	r3, [sp, #108]	; 0x6c
 8027324:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027326:	fb92 f3f3 	sdiv	r3, r2, r3
 802732a:	931c      	str	r3, [sp, #112]	; 0x70
 802732c:	9b07      	ldr	r3, [sp, #28]
 802732e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027330:	3b01      	subs	r3, #1
 8027332:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027336:	9307      	str	r3, [sp, #28]
 8027338:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802733a:	ee16 6a90 	vmov	r6, s13
 802733e:	bf14      	ite	ne
 8027340:	461d      	movne	r5, r3
 8027342:	4615      	moveq	r5, r2
 8027344:	eeb0 3a67 	vmov.f32	s6, s15
 8027348:	eef0 2a47 	vmov.f32	s5, s14
 802734c:	e6f4      	b.n	8027138 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 802734e:	f111 0b01 	adds.w	fp, r1, #1
 8027352:	d48e      	bmi.n	8027272 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8027354:	45de      	cmp	lr, fp
 8027356:	db8c      	blt.n	8027272 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8027358:	f110 0b01 	adds.w	fp, r0, #1
 802735c:	d489      	bmi.n	8027272 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802735e:	455b      	cmp	r3, fp
 8027360:	db87      	blt.n	8027272 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8027362:	b21b      	sxth	r3, r3
 8027364:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8027368:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 802736c:	9300      	str	r3, [sp, #0]
 802736e:	4642      	mov	r2, r8
 8027370:	fa0f f38e 	sxth.w	r3, lr
 8027374:	4649      	mov	r1, r9
 8027376:	980d      	ldr	r0, [sp, #52]	; 0x34
 8027378:	f7ff fe4d 	bl	8027016 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 802737c:	e779      	b.n	8027272 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802737e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027380:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8027384:	1420      	asrs	r0, r4, #16
 8027386:	1431      	asrs	r1, r6, #16
 8027388:	fb03 0101 	mla	r1, r3, r1, r0
 802738c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8027390:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8027394:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8027398:	8841      	ldrh	r1, [r0, #2]
 802739a:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802739e:	f1be 0f00 	cmp.w	lr, #0
 80273a2:	d00b      	beq.n	80273bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 80273a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80273a8:	3b01      	subs	r3, #1
 80273aa:	005b      	lsls	r3, r3, #1
 80273ac:	3302      	adds	r3, #2
 80273ae:	eb00 0b03 	add.w	fp, r0, r3
 80273b2:	5ac3      	ldrh	r3, [r0, r3]
 80273b4:	930a      	str	r3, [sp, #40]	; 0x28
 80273b6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80273ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80273bc:	ea4f 400c 	mov.w	r0, ip, lsl #16
 80273c0:	fb12 f30e 	smulbb	r3, r2, lr
 80273c4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80273c8:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80273cc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80273d0:	10db      	asrs	r3, r3, #3
 80273d2:	ea40 000c 	orr.w	r0, r0, ip
 80273d6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80273da:	f1ce 0c10 	rsb	ip, lr, #16
 80273de:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80273e2:	ebac 0c02 	sub.w	ip, ip, r2
 80273e6:	ea4b 0101 	orr.w	r1, fp, r1
 80273ea:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80273ee:	4351      	muls	r1, r2
 80273f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80273f2:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80273f6:	fb0c 1c00 	mla	ip, ip, r0, r1
 80273fa:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80273fe:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8027402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027404:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027406:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802740a:	0412      	lsls	r2, r2, #16
 802740c:	ea4b 0000 	orr.w	r0, fp, r0
 8027410:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8027414:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8027418:	fb03 c000 	mla	r0, r3, r0, ip
 802741c:	ea42 0b0b 	orr.w	fp, r2, fp
 8027420:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8027424:	fb03 000b 	mla	r0, r3, fp, r0
 8027428:	0d43      	lsrs	r3, r0, #21
 802742a:	0940      	lsrs	r0, r0, #5
 802742c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027430:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8027434:	4318      	orrs	r0, r3
 8027436:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8027438:	f82a 0b02 	strh.w	r0, [sl], #2
 802743c:	441c      	add	r4, r3
 802743e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8027440:	f109 39ff 	add.w	r9, r9, #4294967295
 8027444:	441e      	add	r6, r3
 8027446:	e73c      	b.n	80272c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8027448:	b00f      	add	sp, #60	; 0x3c
 802744a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802744e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 802744e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027452:	b085      	sub	sp, #20
 8027454:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8027458:	9102      	str	r1, [sp, #8]
 802745a:	2c00      	cmp	r4, #0
 802745c:	fb04 7103 	mla	r1, r4, r3, r7
 8027460:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8027464:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8027468:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 802746c:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8027470:	f2c0 811b 	blt.w	80276aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8027474:	45a6      	cmp	lr, r4
 8027476:	f340 8118 	ble.w	80276aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 802747a:	2f00      	cmp	r7, #0
 802747c:	f2c0 8113 	blt.w	80276a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8027480:	42bb      	cmp	r3, r7
 8027482:	f340 8110 	ble.w	80276a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8027486:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802748a:	1c7a      	adds	r2, r7, #1
 802748c:	f100 8110 	bmi.w	80276b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8027490:	4293      	cmp	r3, r2
 8027492:	f340 810d 	ble.w	80276b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8027496:	2e00      	cmp	r6, #0
 8027498:	f000 810c 	beq.w	80276b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 802749c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80274a0:	3401      	adds	r4, #1
 80274a2:	f100 810b 	bmi.w	80276bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80274a6:	45a6      	cmp	lr, r4
 80274a8:	f340 8108 	ble.w	80276bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 80274ac:	2800      	cmp	r0, #0
 80274ae:	f000 8108 	beq.w	80276c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 80274b2:	2f00      	cmp	r7, #0
 80274b4:	f2c0 8100 	blt.w	80276b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80274b8:	42bb      	cmp	r3, r7
 80274ba:	f340 80fd 	ble.w	80276b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 80274be:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80274c2:	3701      	adds	r7, #1
 80274c4:	f100 8100 	bmi.w	80276c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80274c8:	42bb      	cmp	r3, r7
 80274ca:	f340 80fd 	ble.w	80276c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 80274ce:	2e00      	cmp	r6, #0
 80274d0:	f000 80fc 	beq.w	80276cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 80274d4:	3301      	adds	r3, #1
 80274d6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80274da:	b2b6      	uxth	r6, r6
 80274dc:	b280      	uxth	r0, r0
 80274de:	fb00 fe06 	mul.w	lr, r0, r6
 80274e2:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80274e6:	0136      	lsls	r6, r6, #4
 80274e8:	eba6 070e 	sub.w	r7, r6, lr
 80274ec:	b280      	uxth	r0, r0
 80274ee:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80274f2:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80274f6:	b2bf      	uxth	r7, r7
 80274f8:	1a1b      	subs	r3, r3, r0
 80274fa:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80274fe:	b29b      	uxth	r3, r3
 8027500:	fb0a f607 	mul.w	r6, sl, r7
 8027504:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8027508:	fb0b 6603 	mla	r6, fp, r3, r6
 802750c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8027510:	fb00 6609 	mla	r6, r0, r9, r6
 8027514:	fb0e 6608 	mla	r6, lr, r8, r6
 8027518:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802751c:	9600      	str	r6, [sp, #0]
 802751e:	2e00      	cmp	r6, #0
 8027520:	f000 80be 	beq.w	80276a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 8027524:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027528:	fb0b fc0c 	mul.w	ip, fp, ip
 802752c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027530:	fb0b f505 	mul.w	r5, fp, r5
 8027534:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8027538:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 802753c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027540:	44dc      	add	ip, fp
 8027542:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027546:	9501      	str	r5, [sp, #4]
 8027548:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 802754c:	9503      	str	r5, [sp, #12]
 802754e:	9d01      	ldr	r5, [sp, #4]
 8027550:	9e02      	ldr	r6, [sp, #8]
 8027552:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8027556:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802755a:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 802755e:	fb0a fc0c 	mul.w	ip, sl, ip
 8027562:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8027566:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802756a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802756e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027572:	4465      	add	r5, ip
 8027574:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027578:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802757c:	fb09 fc0c 	mul.w	ip, r9, ip
 8027580:	fb09 f904 	mul.w	r9, r9, r4
 8027584:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8027588:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802758c:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8027590:	fb08 f404 	mul.w	r4, r8, r4
 8027594:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027598:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802759c:	fb08 f802 	mul.w	r8, r8, r2
 80275a0:	fb0a fa01 	mul.w	sl, sl, r1
 80275a4:	0a22      	lsrs	r2, r4, #8
 80275a6:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80275aa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80275ae:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 80275b2:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80275b6:	4414      	add	r4, r2
 80275b8:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80275bc:	f508 7280 	add.w	r2, r8, #256	; 0x100
 80275c0:	0a2d      	lsrs	r5, r5, #8
 80275c2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80275c6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80275ca:	9a03      	ldr	r2, [sp, #12]
 80275cc:	8836      	ldrh	r6, [r6, #0]
 80275ce:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80275d2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80275d6:	437d      	muls	r5, r7
 80275d8:	4461      	add	r1, ip
 80275da:	0a24      	lsrs	r4, r4, #8
 80275dc:	fb02 5503 	mla	r5, r2, r3, r5
 80275e0:	0a09      	lsrs	r1, r1, #8
 80275e2:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80275e6:	fb04 540e 	mla	r4, r4, lr, r5
 80275ea:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80275ee:	fb01 4100 	mla	r1, r1, r0, r4
 80275f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80275f6:	0a09      	lsrs	r1, r1, #8
 80275f8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80275fc:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8027600:	fb07 f70a 	mul.w	r7, r7, sl
 8027604:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027608:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 802760c:	fb03 7101 	mla	r1, r3, r1, r7
 8027610:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027614:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027618:	fb0e 1e08 	mla	lr, lr, r8, r1
 802761c:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8027620:	fb00 e101 	mla	r1, r0, r1, lr
 8027624:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8027628:	9a00      	ldr	r2, [sp, #0]
 802762a:	b287      	uxth	r7, r0
 802762c:	437a      	muls	r2, r7
 802762e:	0a09      	lsrs	r1, r1, #8
 8027630:	1c53      	adds	r3, r2, #1
 8027632:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027636:	4321      	orrs	r1, r4
 8027638:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802763c:	1235      	asrs	r5, r6, #8
 802763e:	0c0a      	lsrs	r2, r1, #16
 8027640:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8027644:	b2db      	uxtb	r3, r3
 8027646:	fb12 f207 	smulbb	r2, r2, r7
 802764a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802764e:	fb05 2503 	mla	r5, r5, r3, r2
 8027652:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8027656:	10f2      	asrs	r2, r6, #3
 8027658:	b2c8      	uxtb	r0, r1
 802765a:	00f6      	lsls	r6, r6, #3
 802765c:	fb14 f407 	smulbb	r4, r4, r7
 8027660:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8027664:	b2f6      	uxtb	r6, r6
 8027666:	fb10 f007 	smulbb	r0, r0, r7
 802766a:	fb02 4203 	mla	r2, r2, r3, r4
 802766e:	b2ad      	uxth	r5, r5
 8027670:	fb06 0303 	mla	r3, r6, r3, r0
 8027674:	b299      	uxth	r1, r3
 8027676:	b294      	uxth	r4, r2
 8027678:	1c6b      	adds	r3, r5, #1
 802767a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802767e:	1c62      	adds	r2, r4, #1
 8027680:	1c4b      	adds	r3, r1, #1
 8027682:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8027686:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802768a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 802768e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027692:	0952      	lsrs	r2, r2, #5
 8027694:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027698:	432b      	orrs	r3, r5
 802769a:	4313      	orrs	r3, r2
 802769c:	9a02      	ldr	r2, [sp, #8]
 802769e:	8013      	strh	r3, [r2, #0]
 80276a0:	b005      	add	sp, #20
 80276a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80276a6:	2500      	movs	r5, #0
 80276a8:	e6ef      	b.n	802748a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 80276aa:	2100      	movs	r1, #0
 80276ac:	460d      	mov	r5, r1
 80276ae:	e6f7      	b.n	80274a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80276b0:	2100      	movs	r1, #0
 80276b2:	e6f5      	b.n	80274a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80276b4:	4631      	mov	r1, r6
 80276b6:	e6f3      	b.n	80274a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 80276b8:	2400      	movs	r4, #0
 80276ba:	e702      	b.n	80274c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 80276bc:	2200      	movs	r2, #0
 80276be:	4614      	mov	r4, r2
 80276c0:	e70b      	b.n	80274da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80276c2:	4602      	mov	r2, r0
 80276c4:	4604      	mov	r4, r0
 80276c6:	e708      	b.n	80274da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80276c8:	2200      	movs	r2, #0
 80276ca:	e706      	b.n	80274da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 80276cc:	4632      	mov	r2, r6
 80276ce:	e704      	b.n	80274da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

080276d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80276d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80276d4:	b09d      	sub	sp, #116	; 0x74
 80276d6:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 80276da:	9219      	str	r2, [sp, #100]	; 0x64
 80276dc:	9307      	str	r3, [sp, #28]
 80276de:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80276e0:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80276e4:	931a      	str	r3, [sp, #104]	; 0x68
 80276e6:	9117      	str	r1, [sp, #92]	; 0x5c
 80276e8:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80276ec:	901b      	str	r0, [sp, #108]	; 0x6c
 80276ee:	6850      	ldr	r0, [r2, #4]
 80276f0:	6812      	ldr	r2, [r2, #0]
 80276f2:	fb00 1303 	mla	r3, r0, r3, r1
 80276f6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80276fa:	930a      	str	r3, [sp, #40]	; 0x28
 80276fc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80276fe:	681b      	ldr	r3, [r3, #0]
 8027700:	9310      	str	r3, [sp, #64]	; 0x40
 8027702:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8027706:	930b      	str	r3, [sp, #44]	; 0x2c
 8027708:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802770a:	2b00      	cmp	r3, #0
 802770c:	dc03      	bgt.n	8027716 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 802770e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8027710:	2b00      	cmp	r3, #0
 8027712:	f340 8375 	ble.w	8027e00 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8027716:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027718:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802771c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027720:	1e48      	subs	r0, r1, #1
 8027722:	1e57      	subs	r7, r2, #1
 8027724:	9b07      	ldr	r3, [sp, #28]
 8027726:	2b00      	cmp	r3, #0
 8027728:	f340 818e 	ble.w	8027a48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 802772c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8027730:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027734:	d406      	bmi.n	8027744 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8027736:	4584      	cmp	ip, r0
 8027738:	da04      	bge.n	8027744 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802773a:	2b00      	cmp	r3, #0
 802773c:	db02      	blt.n	8027744 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802773e:	42bb      	cmp	r3, r7
 8027740:	f2c0 8183 	blt.w	8027a4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8027744:	f11c 0c01 	adds.w	ip, ip, #1
 8027748:	f100 8173 	bmi.w	8027a32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802774c:	4561      	cmp	r1, ip
 802774e:	f2c0 8170 	blt.w	8027a32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027752:	3301      	adds	r3, #1
 8027754:	f100 816d 	bmi.w	8027a32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8027758:	429a      	cmp	r2, r3
 802775a:	f2c0 816a 	blt.w	8027a32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802775e:	9b07      	ldr	r3, [sp, #28]
 8027760:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027762:	9318      	str	r3, [sp, #96]	; 0x60
 8027764:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027766:	2b00      	cmp	r3, #0
 8027768:	f340 818c 	ble.w	8027a84 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802776c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 802776e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027770:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8027774:	689b      	ldr	r3, [r3, #8]
 8027776:	1422      	asrs	r2, r4, #16
 8027778:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802777c:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8027780:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027784:	f100 81cd 	bmi.w	8027b22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8027788:	f103 38ff 	add.w	r8, r3, #4294967295
 802778c:	4542      	cmp	r2, r8
 802778e:	f280 81c8 	bge.w	8027b22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8027792:	f1bc 0f00 	cmp.w	ip, #0
 8027796:	f2c0 81c4 	blt.w	8027b22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802779a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802779e:	45c4      	cmp	ip, r8
 80277a0:	f280 81bf 	bge.w	8027b22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80277a4:	b21b      	sxth	r3, r3
 80277a6:	fb0c 2203 	mla	r2, ip, r3, r2
 80277aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80277ac:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 80277b0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80277b4:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 80277b8:	2800      	cmp	r0, #0
 80277ba:	f000 81a9 	beq.w	8027b10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 80277be:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80277c2:	950c      	str	r5, [sp, #48]	; 0x30
 80277c4:	0e2d      	lsrs	r5, r5, #24
 80277c6:	9513      	str	r5, [sp, #76]	; 0x4c
 80277c8:	b181      	cbz	r1, 80277ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80277ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80277ce:	3b01      	subs	r3, #1
 80277d0:	009b      	lsls	r3, r3, #2
 80277d2:	3304      	adds	r3, #4
 80277d4:	eb08 0c03 	add.w	ip, r8, r3
 80277d8:	f858 3003 	ldr.w	r3, [r8, r3]
 80277dc:	9308      	str	r3, [sp, #32]
 80277de:	0e1b      	lsrs	r3, r3, #24
 80277e0:	9311      	str	r3, [sp, #68]	; 0x44
 80277e2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80277e6:	930d      	str	r3, [sp, #52]	; 0x34
 80277e8:	0e1b      	lsrs	r3, r3, #24
 80277ea:	9314      	str	r3, [sp, #80]	; 0x50
 80277ec:	b280      	uxth	r0, r0
 80277ee:	b289      	uxth	r1, r1
 80277f0:	fb00 f901 	mul.w	r9, r0, r1
 80277f4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80277f8:	0100      	lsls	r0, r0, #4
 80277fa:	eba0 0809 	sub.w	r8, r0, r9
 80277fe:	b289      	uxth	r1, r1
 8027800:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8027804:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8027806:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027808:	fa1f f888 	uxth.w	r8, r8
 802780c:	1a5b      	subs	r3, r3, r1
 802780e:	b29b      	uxth	r3, r3
 8027810:	fb08 f000 	mul.w	r0, r8, r0
 8027814:	fb03 000e 	mla	r0, r3, lr, r0
 8027818:	fb01 0005 	mla	r0, r1, r5, r0
 802781c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802781e:	fb09 0005 	mla	r0, r9, r5, r0
 8027822:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8027826:	2800      	cmp	r0, #0
 8027828:	f000 80fa 	beq.w	8027a20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802782c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8027830:	d01b      	beq.n	802786a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8027832:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8027836:	fb0e fa0a 	mul.w	sl, lr, sl
 802783a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802783e:	fb0e fe02 	mul.w	lr, lr, r2
 8027842:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8027846:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802784a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802784e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8027852:	4452      	add	r2, sl
 8027854:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027858:	0a12      	lsrs	r2, r2, #8
 802785a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802785e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027862:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027866:	ea42 020c 	orr.w	r2, r2, ip
 802786a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802786c:	2dff      	cmp	r5, #255	; 0xff
 802786e:	d021      	beq.n	80278b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8027870:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027872:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027876:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027878:	fb05 fb0b 	mul.w	fp, r5, fp
 802787c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802787e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027882:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8027884:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027888:	fb05 fa0a 	mul.w	sl, r5, sl
 802788c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027890:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027894:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8027898:	44de      	add	lr, fp
 802789a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802789e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80278a2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80278a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80278aa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80278ae:	ea4e 050a 	orr.w	r5, lr, sl
 80278b2:	950c      	str	r5, [sp, #48]	; 0x30
 80278b4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80278b6:	2dff      	cmp	r5, #255	; 0xff
 80278b8:	d021      	beq.n	80278fe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80278ba:	9d08      	ldr	r5, [sp, #32]
 80278bc:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80278c0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80278c2:	fb05 fb0b 	mul.w	fp, r5, fp
 80278c6:	9d08      	ldr	r5, [sp, #32]
 80278c8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80278cc:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80278ce:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80278d2:	fb05 fa0a 	mul.w	sl, r5, sl
 80278d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80278da:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80278de:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80278e2:	44de      	add	lr, fp
 80278e4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80278e8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80278ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80278f0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80278f4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80278f8:	ea4e 050a 	orr.w	r5, lr, sl
 80278fc:	9508      	str	r5, [sp, #32]
 80278fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027900:	2dff      	cmp	r5, #255	; 0xff
 8027902:	d021      	beq.n	8027948 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8027904:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027906:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802790a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802790c:	fb05 fb0b 	mul.w	fp, r5, fp
 8027910:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027912:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027916:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8027918:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802791c:	fb05 fa0a 	mul.w	sl, r5, sl
 8027920:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027924:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027928:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802792c:	44de      	add	lr, fp
 802792e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027932:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027936:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802793a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802793e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027942:	ea4e 050a 	orr.w	r5, lr, sl
 8027946:	950d      	str	r5, [sp, #52]	; 0x34
 8027948:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802794a:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802794e:	9d08      	ldr	r5, [sp, #32]
 8027950:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8027954:	fb08 fc0c 	mul.w	ip, r8, ip
 8027958:	fb03 cc0e 	mla	ip, r3, lr, ip
 802795c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027960:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027962:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027966:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802796a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802796c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027970:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8027974:	fb08 f80e 	mul.w	r8, r8, lr
 8027978:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802797c:	fb03 8202 	mla	r2, r3, r2, r8
 8027980:	9b08      	ldr	r3, [sp, #32]
 8027982:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027984:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8027988:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802798a:	fb01 220a 	mla	r2, r1, sl, r2
 802798e:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8027992:	fb09 2901 	mla	r9, r9, r1, r2
 8027996:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027998:	883b      	ldrh	r3, [r7, #0]
 802799a:	4342      	muls	r2, r0
 802799c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80279a0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80279a4:	1c50      	adds	r0, r2, #1
 80279a6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80279aa:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80279ae:	ea4c 0c09 	orr.w	ip, ip, r9
 80279b2:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80279b6:	1219      	asrs	r1, r3, #8
 80279b8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80279bc:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80279c0:	b2c0      	uxtb	r0, r0
 80279c2:	fb12 f205 	smulbb	r2, r2, r5
 80279c6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80279ca:	fb01 2100 	mla	r1, r1, r0, r2
 80279ce:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80279d2:	10da      	asrs	r2, r3, #3
 80279d4:	fa5f fc8c 	uxtb.w	ip, ip
 80279d8:	00db      	lsls	r3, r3, #3
 80279da:	fb1c fc05 	smulbb	ip, ip, r5
 80279de:	b2db      	uxtb	r3, r3
 80279e0:	b289      	uxth	r1, r1
 80279e2:	fb03 c300 	mla	r3, r3, r0, ip
 80279e6:	fa1f fc83 	uxth.w	ip, r3
 80279ea:	1c4b      	adds	r3, r1, #1
 80279ec:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80279f0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80279f4:	fb1e fe05 	smulbb	lr, lr, r5
 80279f8:	f10c 0301 	add.w	r3, ip, #1
 80279fc:	fb02 e200 	mla	r2, r2, r0, lr
 8027a00:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8027a04:	b292      	uxth	r2, r2
 8027a06:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8027a0a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027a0e:	430b      	orrs	r3, r1
 8027a10:	1c51      	adds	r1, r2, #1
 8027a12:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027a16:	0952      	lsrs	r2, r2, #5
 8027a18:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8027a1c:	4313      	orrs	r3, r2
 8027a1e:	803b      	strh	r3, [r7, #0]
 8027a20:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027a22:	441c      	add	r4, r3
 8027a24:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027a26:	441e      	add	r6, r3
 8027a28:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027a2a:	3b01      	subs	r3, #1
 8027a2c:	3702      	adds	r7, #2
 8027a2e:	9318      	str	r3, [sp, #96]	; 0x60
 8027a30:	e698      	b.n	8027764 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8027a32:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027a34:	441c      	add	r4, r3
 8027a36:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027a38:	441e      	add	r6, r3
 8027a3a:	9b07      	ldr	r3, [sp, #28]
 8027a3c:	3b01      	subs	r3, #1
 8027a3e:	9307      	str	r3, [sp, #28]
 8027a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027a42:	3302      	adds	r3, #2
 8027a44:	930a      	str	r3, [sp, #40]	; 0x28
 8027a46:	e66d      	b.n	8027724 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8027a48:	d023      	beq.n	8027a92 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8027a4a:	9b07      	ldr	r3, [sp, #28]
 8027a4c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8027a4e:	3b01      	subs	r3, #1
 8027a50:	fb00 4003 	mla	r0, r0, r3, r4
 8027a54:	1400      	asrs	r0, r0, #16
 8027a56:	f53f ae82 	bmi.w	802775e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027a5a:	3901      	subs	r1, #1
 8027a5c:	4288      	cmp	r0, r1
 8027a5e:	f6bf ae7e 	bge.w	802775e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027a62:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8027a64:	fb01 6303 	mla	r3, r1, r3, r6
 8027a68:	141b      	asrs	r3, r3, #16
 8027a6a:	f53f ae78 	bmi.w	802775e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027a6e:	3a01      	subs	r2, #1
 8027a70:	4293      	cmp	r3, r2
 8027a72:	f6bf ae74 	bge.w	802775e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8027a76:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8027a7a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8027a7e:	f1bb 0f00 	cmp.w	fp, #0
 8027a82:	dc6c      	bgt.n	8027b5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8027a84:	9b07      	ldr	r3, [sp, #28]
 8027a86:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8027a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027a8c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8027a90:	930a      	str	r3, [sp, #40]	; 0x28
 8027a92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027a94:	2b00      	cmp	r3, #0
 8027a96:	f340 81b3 	ble.w	8027e00 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8027a9a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027a9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027aa2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027aa6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027aa8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027aac:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027ab0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027ab4:	eef0 6a62 	vmov.f32	s13, s5
 8027ab8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027abc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ac0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027ac4:	ee16 4a90 	vmov	r4, s13
 8027ac8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027acc:	eef0 6a43 	vmov.f32	s13, s6
 8027ad0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027ad4:	ee12 2a90 	vmov	r2, s5
 8027ad8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027adc:	fb92 f3f3 	sdiv	r3, r2, r3
 8027ae0:	ee13 2a10 	vmov	r2, s6
 8027ae4:	9329      	str	r3, [sp, #164]	; 0xa4
 8027ae6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027ae8:	fb92 f3f3 	sdiv	r3, r2, r3
 8027aec:	932a      	str	r3, [sp, #168]	; 0xa8
 8027aee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027af0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8027af2:	3b01      	subs	r3, #1
 8027af4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027af8:	9317      	str	r3, [sp, #92]	; 0x5c
 8027afa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027afc:	bf08      	it	eq
 8027afe:	4613      	moveq	r3, r2
 8027b00:	ee16 6a90 	vmov	r6, s13
 8027b04:	9307      	str	r3, [sp, #28]
 8027b06:	eeb0 3a67 	vmov.f32	s6, s15
 8027b0a:	eef0 2a47 	vmov.f32	s5, s14
 8027b0e:	e5fb      	b.n	8027708 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8027b10:	2900      	cmp	r1, #0
 8027b12:	f43f ae6b 	beq.w	80277ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8027b16:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8027b1a:	9308      	str	r3, [sp, #32]
 8027b1c:	0e1b      	lsrs	r3, r3, #24
 8027b1e:	9311      	str	r3, [sp, #68]	; 0x44
 8027b20:	e664      	b.n	80277ec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8027b22:	f112 0801 	adds.w	r8, r2, #1
 8027b26:	f53f af7b 	bmi.w	8027a20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027b2a:	4543      	cmp	r3, r8
 8027b2c:	f6ff af78 	blt.w	8027a20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027b30:	f11c 0801 	adds.w	r8, ip, #1
 8027b34:	f53f af74 	bmi.w	8027a20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027b38:	45c6      	cmp	lr, r8
 8027b3a:	f6ff af71 	blt.w	8027a20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027b3e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8027b40:	9201      	str	r2, [sp, #4]
 8027b42:	fa0f f28e 	sxth.w	r2, lr
 8027b46:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8027b4a:	e9cd c002 	strd	ip, r0, [sp, #8]
 8027b4e:	9200      	str	r2, [sp, #0]
 8027b50:	b21b      	sxth	r3, r3
 8027b52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8027b54:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8027b56:	4639      	mov	r1, r7
 8027b58:	f7ff fc79 	bl	802744e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8027b5c:	e760      	b.n	8027a20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8027b5e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8027b60:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027b62:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027b66:	1427      	asrs	r7, r4, #16
 8027b68:	1433      	asrs	r3, r6, #16
 8027b6a:	fb01 7303 	mla	r3, r1, r3, r7
 8027b6e:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8027b72:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027b76:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027b7a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8027b7e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027b82:	2a00      	cmp	r2, #0
 8027b84:	f000 8133 	beq.w	8027dee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8027b88:	687d      	ldr	r5, [r7, #4]
 8027b8a:	950e      	str	r5, [sp, #56]	; 0x38
 8027b8c:	0e2d      	lsrs	r5, r5, #24
 8027b8e:	9515      	str	r5, [sp, #84]	; 0x54
 8027b90:	b178      	cbz	r0, 8027bb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027b92:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8027b96:	3901      	subs	r1, #1
 8027b98:	0089      	lsls	r1, r1, #2
 8027b9a:	3104      	adds	r1, #4
 8027b9c:	eb07 0e01 	add.w	lr, r7, r1
 8027ba0:	5879      	ldr	r1, [r7, r1]
 8027ba2:	9109      	str	r1, [sp, #36]	; 0x24
 8027ba4:	0e09      	lsrs	r1, r1, #24
 8027ba6:	9112      	str	r1, [sp, #72]	; 0x48
 8027ba8:	f8de 1004 	ldr.w	r1, [lr, #4]
 8027bac:	910f      	str	r1, [sp, #60]	; 0x3c
 8027bae:	0e09      	lsrs	r1, r1, #24
 8027bb0:	9116      	str	r1, [sp, #88]	; 0x58
 8027bb2:	b292      	uxth	r2, r2
 8027bb4:	b280      	uxth	r0, r0
 8027bb6:	fb02 f800 	mul.w	r8, r2, r0
 8027bba:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8027bbe:	0112      	lsls	r2, r2, #4
 8027bc0:	eba2 0e08 	sub.w	lr, r2, r8
 8027bc4:	b280      	uxth	r0, r0
 8027bc6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8027bca:	9915      	ldr	r1, [sp, #84]	; 0x54
 8027bcc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027bce:	fa1f fe8e 	uxth.w	lr, lr
 8027bd2:	1a12      	subs	r2, r2, r0
 8027bd4:	b292      	uxth	r2, r2
 8027bd6:	fb0e f101 	mul.w	r1, lr, r1
 8027bda:	fb02 110c 	mla	r1, r2, ip, r1
 8027bde:	fb00 1105 	mla	r1, r0, r5, r1
 8027be2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027be4:	fb08 1105 	mla	r1, r8, r5, r1
 8027be8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8027bec:	2900      	cmp	r1, #0
 8027bee:	f000 80f5 	beq.w	8027ddc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8027bf2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8027bf6:	d019      	beq.n	8027c2c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8027bf8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8027bfc:	fb0c fa0a 	mul.w	sl, ip, sl
 8027c00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027c04:	fb0c fc03 	mul.w	ip, ip, r3
 8027c08:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027c0c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027c10:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8027c14:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8027c18:	4453      	add	r3, sl
 8027c1a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8027c1e:	0a1b      	lsrs	r3, r3, #8
 8027c20:	0a3f      	lsrs	r7, r7, #8
 8027c22:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027c26:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8027c2a:	433b      	orrs	r3, r7
 8027c2c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027c2e:	2dff      	cmp	r5, #255	; 0xff
 8027c30:	d020      	beq.n	8027c74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8027c32:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027c34:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027c38:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027c3a:	436f      	muls	r7, r5
 8027c3c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027c3e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027c42:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8027c44:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027c48:	fb05 fa0a 	mul.w	sl, r5, sl
 8027c4c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027c50:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027c54:	44bc      	add	ip, r7
 8027c56:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027c5a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027c5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027c62:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027c66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027c6a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027c6e:	ea4c 050a 	orr.w	r5, ip, sl
 8027c72:	950e      	str	r5, [sp, #56]	; 0x38
 8027c74:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027c76:	2dff      	cmp	r5, #255	; 0xff
 8027c78:	d020      	beq.n	8027cbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8027c7a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027c7c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027c80:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027c82:	436f      	muls	r7, r5
 8027c84:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027c86:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027c8a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027c8c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027c90:	fb05 fa0a 	mul.w	sl, r5, sl
 8027c94:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027c98:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027c9c:	44bc      	add	ip, r7
 8027c9e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027ca2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027ca6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027caa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027cae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027cb2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027cb6:	ea4c 050a 	orr.w	r5, ip, sl
 8027cba:	9509      	str	r5, [sp, #36]	; 0x24
 8027cbc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027cbe:	2dff      	cmp	r5, #255	; 0xff
 8027cc0:	d020      	beq.n	8027d04 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8027cc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027cc4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027cc8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027cca:	436f      	muls	r7, r5
 8027ccc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027cce:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027cd2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8027cd4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027cd8:	fb05 fa0a 	mul.w	sl, r5, sl
 8027cdc:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8027ce0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027ce4:	44bc      	add	ip, r7
 8027ce6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8027cea:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027cee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027cf2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027cf6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8027cfa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027cfe:	ea4c 050a 	orr.w	r5, ip, sl
 8027d02:	950f      	str	r5, [sp, #60]	; 0x3c
 8027d04:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027d06:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8027d0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8027d0c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8027d10:	fb0e f707 	mul.w	r7, lr, r7
 8027d14:	fb02 770c 	mla	r7, r2, ip, r7
 8027d18:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027d1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027d1e:	fb00 770c 	mla	r7, r0, ip, r7
 8027d22:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027d26:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027d28:	fb08 770c 	mla	r7, r8, ip, r7
 8027d2c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8027d30:	fb0e fe0c 	mul.w	lr, lr, ip
 8027d34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027d38:	fb02 e303 	mla	r3, r2, r3, lr
 8027d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027d3e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027d40:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8027d44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8027d46:	fb00 330a 	mla	r3, r0, sl, r3
 8027d4a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8027d4e:	fb08 3c0c 	mla	ip, r8, ip, r3
 8027d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027d54:	f8b9 0000 	ldrh.w	r0, [r9]
 8027d58:	4359      	muls	r1, r3
 8027d5a:	0a3f      	lsrs	r7, r7, #8
 8027d5c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027d60:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027d64:	1c4b      	adds	r3, r1, #1
 8027d66:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8027d6a:	ea47 070c 	orr.w	r7, r7, ip
 8027d6e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8027d72:	1202      	asrs	r2, r0, #8
 8027d74:	0c3b      	lsrs	r3, r7, #16
 8027d76:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8027d7a:	b2c9      	uxtb	r1, r1
 8027d7c:	fb13 f305 	smulbb	r3, r3, r5
 8027d80:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8027d84:	fb02 3201 	mla	r2, r2, r1, r3
 8027d88:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8027d8c:	10c3      	asrs	r3, r0, #3
 8027d8e:	b2ff      	uxtb	r7, r7
 8027d90:	00c0      	lsls	r0, r0, #3
 8027d92:	b2c0      	uxtb	r0, r0
 8027d94:	fb17 f705 	smulbb	r7, r7, r5
 8027d98:	fb00 7001 	mla	r0, r0, r1, r7
 8027d9c:	b292      	uxth	r2, r2
 8027d9e:	fb1c fc05 	smulbb	ip, ip, r5
 8027da2:	b280      	uxth	r0, r0
 8027da4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8027da8:	fb03 c301 	mla	r3, r3, r1, ip
 8027dac:	1c51      	adds	r1, r2, #1
 8027dae:	f100 0c01 	add.w	ip, r0, #1
 8027db2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027db6:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8027dba:	b29b      	uxth	r3, r3
 8027dbc:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8027dc0:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8027dc4:	ea4c 0202 	orr.w	r2, ip, r2
 8027dc8:	f103 0c01 	add.w	ip, r3, #1
 8027dcc:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8027dd0:	095b      	lsrs	r3, r3, #5
 8027dd2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8027dd6:	431a      	orrs	r2, r3
 8027dd8:	f8a9 2000 	strh.w	r2, [r9]
 8027ddc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8027dde:	441c      	add	r4, r3
 8027de0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8027de2:	f109 0902 	add.w	r9, r9, #2
 8027de6:	441e      	add	r6, r3
 8027de8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027dec:	e647      	b.n	8027a7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8027dee:	2800      	cmp	r0, #0
 8027df0:	f43f aedf 	beq.w	8027bb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027df4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8027df8:	9109      	str	r1, [sp, #36]	; 0x24
 8027dfa:	0e09      	lsrs	r1, r1, #24
 8027dfc:	9112      	str	r1, [sp, #72]	; 0x48
 8027dfe:	e6d8      	b.n	8027bb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027e00:	b01d      	add	sp, #116	; 0x74
 8027e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027e06 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8027e06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e0a:	b085      	sub	sp, #20
 8027e0c:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8027e10:	9102      	str	r1, [sp, #8]
 8027e12:	2c00      	cmp	r4, #0
 8027e14:	fb04 7103 	mla	r1, r4, r3, r7
 8027e18:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8027e1c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8027e20:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8027e24:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8027e28:	f2c0 810c 	blt.w	8028044 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8027e2c:	45a6      	cmp	lr, r4
 8027e2e:	f340 8109 	ble.w	8028044 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8027e32:	2f00      	cmp	r7, #0
 8027e34:	f2c0 8104 	blt.w	8028040 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8027e38:	42bb      	cmp	r3, r7
 8027e3a:	f340 8101 	ble.w	8028040 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8027e3e:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8027e42:	1c7a      	adds	r2, r7, #1
 8027e44:	f100 8101 	bmi.w	802804a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8027e48:	4293      	cmp	r3, r2
 8027e4a:	f340 80fe 	ble.w	802804a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8027e4e:	2e00      	cmp	r6, #0
 8027e50:	f000 80fd 	beq.w	802804e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8027e54:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8027e58:	3401      	adds	r4, #1
 8027e5a:	f100 80fc 	bmi.w	8028056 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8027e5e:	45a6      	cmp	lr, r4
 8027e60:	f340 80f9 	ble.w	8028056 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8027e64:	2800      	cmp	r0, #0
 8027e66:	f000 80f9 	beq.w	802805c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8027e6a:	2f00      	cmp	r7, #0
 8027e6c:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8027e70:	f2c0 80ef 	blt.w	8028052 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8027e74:	42bb      	cmp	r3, r7
 8027e76:	f340 80ec 	ble.w	8028052 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8027e7a:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8027e7e:	3701      	adds	r7, #1
 8027e80:	f100 80ef 	bmi.w	8028062 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8027e84:	42bb      	cmp	r3, r7
 8027e86:	f340 80ec 	ble.w	8028062 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8027e8a:	2e00      	cmp	r6, #0
 8027e8c:	f000 80eb 	beq.w	8028066 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8027e90:	6852      	ldr	r2, [r2, #4]
 8027e92:	b2b6      	uxth	r6, r6
 8027e94:	b280      	uxth	r0, r0
 8027e96:	fb00 fe06 	mul.w	lr, r0, r6
 8027e9a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8027e9e:	0136      	lsls	r6, r6, #4
 8027ea0:	eba6 070e 	sub.w	r7, r6, lr
 8027ea4:	b280      	uxth	r0, r0
 8027ea6:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8027eaa:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8027eae:	b2bf      	uxth	r7, r7
 8027eb0:	1a1b      	subs	r3, r3, r0
 8027eb2:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8027eb6:	b29b      	uxth	r3, r3
 8027eb8:	fb07 f60a 	mul.w	r6, r7, sl
 8027ebc:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8027ec0:	fb0b 6603 	mla	r6, fp, r3, r6
 8027ec4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8027ec8:	fb00 6609 	mla	r6, r0, r9, r6
 8027ecc:	fb0e 6608 	mla	r6, lr, r8, r6
 8027ed0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8027ed4:	9600      	str	r6, [sp, #0]
 8027ed6:	2e00      	cmp	r6, #0
 8027ed8:	f000 80af 	beq.w	802803a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8027edc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027ee0:	fb0b fc0c 	mul.w	ip, fp, ip
 8027ee4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027ee8:	fb0b f505 	mul.w	r5, fp, r5
 8027eec:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8027ef0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8027ef4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027ef8:	44dc      	add	ip, fp
 8027efa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027efe:	9501      	str	r5, [sp, #4]
 8027f00:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8027f04:	9503      	str	r5, [sp, #12]
 8027f06:	9d01      	ldr	r5, [sp, #4]
 8027f08:	9e02      	ldr	r6, [sp, #8]
 8027f0a:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8027f0e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8027f12:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8027f16:	fb0a fc0c 	mul.w	ip, sl, ip
 8027f1a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8027f1e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8027f22:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027f26:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027f2a:	4465      	add	r5, ip
 8027f2c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027f30:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027f34:	fb09 fc0c 	mul.w	ip, r9, ip
 8027f38:	fb09 f904 	mul.w	r9, r9, r4
 8027f3c:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8027f40:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8027f44:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8027f48:	fb08 f404 	mul.w	r4, r8, r4
 8027f4c:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027f50:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027f54:	fb08 f802 	mul.w	r8, r8, r2
 8027f58:	fb0a fa01 	mul.w	sl, sl, r1
 8027f5c:	0a22      	lsrs	r2, r4, #8
 8027f5e:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8027f62:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027f66:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8027f6a:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8027f6e:	4414      	add	r4, r2
 8027f70:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8027f74:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8027f78:	0a2d      	lsrs	r5, r5, #8
 8027f7a:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8027f7e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027f82:	9a03      	ldr	r2, [sp, #12]
 8027f84:	8836      	ldrh	r6, [r6, #0]
 8027f86:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027f8a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027f8e:	437d      	muls	r5, r7
 8027f90:	4461      	add	r1, ip
 8027f92:	0a24      	lsrs	r4, r4, #8
 8027f94:	fb02 5503 	mla	r5, r2, r3, r5
 8027f98:	0a09      	lsrs	r1, r1, #8
 8027f9a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027f9e:	fb04 540e 	mla	r4, r4, lr, r5
 8027fa2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8027fa6:	fb01 4100 	mla	r1, r1, r0, r4
 8027faa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027fae:	0a09      	lsrs	r1, r1, #8
 8027fb0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027fb4:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8027fb8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027fbc:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8027fc0:	fb07 f70a 	mul.w	r7, r7, sl
 8027fc4:	fb03 7101 	mla	r1, r3, r1, r7
 8027fc8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027fcc:	9b00      	ldr	r3, [sp, #0]
 8027fce:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027fd2:	fb0e 1e08 	mla	lr, lr, r8, r1
 8027fd6:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8027fda:	fb00 e101 	mla	r1, r0, r1, lr
 8027fde:	43da      	mvns	r2, r3
 8027fe0:	1233      	asrs	r3, r6, #8
 8027fe2:	b2d2      	uxtb	r2, r2
 8027fe4:	10f0      	asrs	r0, r6, #3
 8027fe6:	0a09      	lsrs	r1, r1, #8
 8027fe8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8027fec:	00f6      	lsls	r6, r6, #3
 8027fee:	4353      	muls	r3, r2
 8027ff0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8027ff4:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8027ff8:	b2f6      	uxtb	r6, r6
 8027ffa:	4321      	orrs	r1, r4
 8027ffc:	4350      	muls	r0, r2
 8027ffe:	4356      	muls	r6, r2
 8028000:	1c5a      	adds	r2, r3, #1
 8028002:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8028006:	0c0b      	lsrs	r3, r1, #16
 8028008:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802800c:	1c42      	adds	r2, r0, #1
 802800e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8028012:	0a0a      	lsrs	r2, r1, #8
 8028014:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8028018:	021b      	lsls	r3, r3, #8
 802801a:	00d2      	lsls	r2, r2, #3
 802801c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028020:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8028024:	4313      	orrs	r3, r2
 8028026:	1c72      	adds	r2, r6, #1
 8028028:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 802802c:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8028030:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8028034:	4319      	orrs	r1, r3
 8028036:	9b02      	ldr	r3, [sp, #8]
 8028038:	8019      	strh	r1, [r3, #0]
 802803a:	b005      	add	sp, #20
 802803c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028040:	2500      	movs	r5, #0
 8028042:	e6fe      	b.n	8027e42 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8028044:	2100      	movs	r1, #0
 8028046:	460d      	mov	r5, r1
 8028048:	e706      	b.n	8027e58 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802804a:	2100      	movs	r1, #0
 802804c:	e704      	b.n	8027e58 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802804e:	4631      	mov	r1, r6
 8028050:	e702      	b.n	8027e58 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8028052:	2400      	movs	r4, #0
 8028054:	e713      	b.n	8027e7e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8028056:	2200      	movs	r2, #0
 8028058:	4614      	mov	r4, r2
 802805a:	e71a      	b.n	8027e92 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802805c:	4602      	mov	r2, r0
 802805e:	4604      	mov	r4, r0
 8028060:	e717      	b.n	8027e92 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8028062:	2200      	movs	r2, #0
 8028064:	e715      	b.n	8027e92 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8028066:	4632      	mov	r2, r6
 8028068:	e713      	b.n	8027e92 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

0802806c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802806c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028070:	b09b      	sub	sp, #108	; 0x6c
 8028072:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8028076:	9218      	str	r2, [sp, #96]	; 0x60
 8028078:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802807a:	9116      	str	r1, [sp, #88]	; 0x58
 802807c:	9307      	str	r3, [sp, #28]
 802807e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8028082:	9019      	str	r0, [sp, #100]	; 0x64
 8028084:	6850      	ldr	r0, [r2, #4]
 8028086:	6812      	ldr	r2, [r2, #0]
 8028088:	fb00 1303 	mla	r3, r0, r3, r1
 802808c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028090:	930a      	str	r3, [sp, #40]	; 0x28
 8028092:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028094:	681b      	ldr	r3, [r3, #0]
 8028096:	930f      	str	r3, [sp, #60]	; 0x3c
 8028098:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802809a:	2b00      	cmp	r3, #0
 802809c:	dc03      	bgt.n	80280a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802809e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80280a0:	2b00      	cmp	r3, #0
 80280a2:	f340 8386 	ble.w	80287b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 80280a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80280a8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80280ac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80280b0:	1e48      	subs	r0, r1, #1
 80280b2:	1e57      	subs	r7, r2, #1
 80280b4:	9b07      	ldr	r3, [sp, #28]
 80280b6:	2b00      	cmp	r3, #0
 80280b8:	f340 8166 	ble.w	8028388 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80280bc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80280c0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80280c4:	d406      	bmi.n	80280d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80280c6:	4584      	cmp	ip, r0
 80280c8:	da04      	bge.n	80280d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80280ca:	2b00      	cmp	r3, #0
 80280cc:	db02      	blt.n	80280d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80280ce:	42bb      	cmp	r3, r7
 80280d0:	f2c0 815b 	blt.w	802838a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80280d4:	f11c 0c01 	adds.w	ip, ip, #1
 80280d8:	f100 814b 	bmi.w	8028372 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80280dc:	4561      	cmp	r1, ip
 80280de:	f2c0 8148 	blt.w	8028372 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80280e2:	3301      	adds	r3, #1
 80280e4:	f100 8145 	bmi.w	8028372 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80280e8:	429a      	cmp	r2, r3
 80280ea:	f2c0 8142 	blt.w	8028372 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80280ee:	9b07      	ldr	r3, [sp, #28]
 80280f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80280f2:	9317      	str	r3, [sp, #92]	; 0x5c
 80280f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80280f6:	2b00      	cmp	r3, #0
 80280f8:	f340 8165 	ble.w	80283c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80280fc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80280fe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8028100:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8028104:	689b      	ldr	r3, [r3, #8]
 8028106:	1422      	asrs	r2, r4, #16
 8028108:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802810c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8028110:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028114:	f100 81d5 	bmi.w	80284c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8028118:	f103 38ff 	add.w	r8, r3, #4294967295
 802811c:	4542      	cmp	r2, r8
 802811e:	f280 81d0 	bge.w	80284c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8028122:	f1bc 0f00 	cmp.w	ip, #0
 8028126:	f2c0 81cc 	blt.w	80284c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802812a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802812e:	45c4      	cmp	ip, r8
 8028130:	f280 81c7 	bge.w	80284c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8028134:	b21b      	sxth	r3, r3
 8028136:	fb0c 2203 	mla	r2, ip, r3, r2
 802813a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802813c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8028140:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8028144:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8028148:	2900      	cmp	r1, #0
 802814a:	f000 8182 	beq.w	8028452 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802814e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8028152:	950b      	str	r5, [sp, #44]	; 0x2c
 8028154:	0e2d      	lsrs	r5, r5, #24
 8028156:	9512      	str	r5, [sp, #72]	; 0x48
 8028158:	b180      	cbz	r0, 802817c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802815a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802815e:	3b01      	subs	r3, #1
 8028160:	009b      	lsls	r3, r3, #2
 8028162:	3304      	adds	r3, #4
 8028164:	eb08 0c03 	add.w	ip, r8, r3
 8028168:	f858 3003 	ldr.w	r3, [r8, r3]
 802816c:	9308      	str	r3, [sp, #32]
 802816e:	0e1b      	lsrs	r3, r3, #24
 8028170:	9310      	str	r3, [sp, #64]	; 0x40
 8028172:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8028176:	930c      	str	r3, [sp, #48]	; 0x30
 8028178:	0e1b      	lsrs	r3, r3, #24
 802817a:	9313      	str	r3, [sp, #76]	; 0x4c
 802817c:	b289      	uxth	r1, r1
 802817e:	b280      	uxth	r0, r0
 8028180:	fb01 f900 	mul.w	r9, r1, r0
 8028184:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8028188:	0109      	lsls	r1, r1, #4
 802818a:	eba1 0809 	sub.w	r8, r1, r9
 802818e:	b280      	uxth	r0, r0
 8028190:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8028194:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8028196:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028198:	fa1f f888 	uxth.w	r8, r8
 802819c:	1a09      	subs	r1, r1, r0
 802819e:	b289      	uxth	r1, r1
 80281a0:	fb08 f303 	mul.w	r3, r8, r3
 80281a4:	fb01 330e 	mla	r3, r1, lr, r3
 80281a8:	fb00 3305 	mla	r3, r0, r5, r3
 80281ac:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80281ae:	fb09 3305 	mla	r3, r9, r5, r3
 80281b2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80281b6:	2b00      	cmp	r3, #0
 80281b8:	f000 80d2 	beq.w	8028360 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80281bc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80281c0:	d01b      	beq.n	80281fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 80281c2:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80281c6:	fb0e fa0a 	mul.w	sl, lr, sl
 80281ca:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80281ce:	fb0e fe02 	mul.w	lr, lr, r2
 80281d2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80281d6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80281da:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80281de:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80281e2:	4452      	add	r2, sl
 80281e4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80281e8:	0a12      	lsrs	r2, r2, #8
 80281ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80281ee:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80281f2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80281f6:	ea42 020c 	orr.w	r2, r2, ip
 80281fa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80281fc:	2dff      	cmp	r5, #255	; 0xff
 80281fe:	d021      	beq.n	8028244 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8028200:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028202:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028206:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028208:	fb05 fb0b 	mul.w	fp, r5, fp
 802820c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802820e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028212:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028214:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028218:	fb05 fa0a 	mul.w	sl, r5, sl
 802821c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028220:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028224:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028228:	44de      	add	lr, fp
 802822a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802822e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028232:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028236:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802823a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802823e:	ea4e 050a 	orr.w	r5, lr, sl
 8028242:	950b      	str	r5, [sp, #44]	; 0x2c
 8028244:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028246:	2dff      	cmp	r5, #255	; 0xff
 8028248:	d021      	beq.n	802828e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802824a:	9d08      	ldr	r5, [sp, #32]
 802824c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028250:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028252:	fb05 fb0b 	mul.w	fp, r5, fp
 8028256:	9d08      	ldr	r5, [sp, #32]
 8028258:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802825c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802825e:	fb05 fa0e 	mul.w	sl, r5, lr
 8028262:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8028266:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802826a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802826e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028272:	44de      	add	lr, fp
 8028274:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028278:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802827c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028280:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028284:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028288:	ea4e 050a 	orr.w	r5, lr, sl
 802828c:	9508      	str	r5, [sp, #32]
 802828e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028290:	2dff      	cmp	r5, #255	; 0xff
 8028292:	d021      	beq.n	80282d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8028294:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028296:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802829a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802829c:	fb05 fb0b 	mul.w	fp, r5, fp
 80282a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80282a2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80282a6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80282a8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80282ac:	fb05 fa0a 	mul.w	sl, r5, sl
 80282b0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80282b4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80282b8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80282bc:	44de      	add	lr, fp
 80282be:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80282c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80282c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80282ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80282ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80282d2:	ea4e 050a 	orr.w	r5, lr, sl
 80282d6:	950c      	str	r5, [sp, #48]	; 0x30
 80282d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80282da:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80282de:	9d08      	ldr	r5, [sp, #32]
 80282e0:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80282e4:	fb08 fc0c 	mul.w	ip, r8, ip
 80282e8:	fb01 cc0e 	mla	ip, r1, lr, ip
 80282ec:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80282f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80282f2:	fb00 cc0e 	mla	ip, r0, lr, ip
 80282f6:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80282fa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80282fc:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028300:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8028304:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028308:	fb08 f80e 	mul.w	r8, r8, lr
 802830c:	fb01 8202 	mla	r2, r1, r2, r8
 8028310:	9908      	ldr	r1, [sp, #32]
 8028312:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8028316:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028318:	fb00 220a 	mla	r2, r0, sl, r2
 802831c:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8028320:	fb09 2900 	mla	r9, r9, r0, r2
 8028324:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028328:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802832c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028330:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8028334:	ea4c 0c09 	orr.w	ip, ip, r9
 8028338:	2bff      	cmp	r3, #255	; 0xff
 802833a:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802833e:	f040 8091 	bne.w	8028464 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8028342:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8028346:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 802834a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802834e:	f022 0207 	bic.w	r2, r2, #7
 8028352:	431a      	orrs	r2, r3
 8028354:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8028358:	ea4c 0c02 	orr.w	ip, ip, r2
 802835c:	f8a7 c000 	strh.w	ip, [r7]
 8028360:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028362:	441c      	add	r4, r3
 8028364:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028366:	441e      	add	r6, r3
 8028368:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802836a:	3b01      	subs	r3, #1
 802836c:	3702      	adds	r7, #2
 802836e:	9317      	str	r3, [sp, #92]	; 0x5c
 8028370:	e6c0      	b.n	80280f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8028372:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028374:	441c      	add	r4, r3
 8028376:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028378:	441e      	add	r6, r3
 802837a:	9b07      	ldr	r3, [sp, #28]
 802837c:	3b01      	subs	r3, #1
 802837e:	9307      	str	r3, [sp, #28]
 8028380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028382:	3302      	adds	r3, #2
 8028384:	930a      	str	r3, [sp, #40]	; 0x28
 8028386:	e695      	b.n	80280b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8028388:	d024      	beq.n	80283d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802838a:	9b07      	ldr	r3, [sp, #28]
 802838c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802838e:	3b01      	subs	r3, #1
 8028390:	fb00 4003 	mla	r0, r0, r3, r4
 8028394:	1400      	asrs	r0, r0, #16
 8028396:	f53f aeaa 	bmi.w	80280ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802839a:	3901      	subs	r1, #1
 802839c:	4288      	cmp	r0, r1
 802839e:	f6bf aea6 	bge.w	80280ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80283a2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80283a4:	fb01 6303 	mla	r3, r1, r3, r6
 80283a8:	141b      	asrs	r3, r3, #16
 80283aa:	f53f aea0 	bmi.w	80280ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80283ae:	3a01      	subs	r2, #1
 80283b0:	4293      	cmp	r3, r2
 80283b2:	f6bf ae9c 	bge.w	80280ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80283b6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80283ba:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80283be:	f1bb 0f00 	cmp.w	fp, #0
 80283c2:	f300 809a 	bgt.w	80284fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80283c6:	9b07      	ldr	r3, [sp, #28]
 80283c8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80283cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80283ce:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80283d2:	930a      	str	r3, [sp, #40]	; 0x28
 80283d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80283d6:	2b00      	cmp	r3, #0
 80283d8:	f340 81eb 	ble.w	80287b2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x746>
 80283dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80283e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80283e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80283e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80283ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80283ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 80283f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80283f6:	eef0 6a62 	vmov.f32	s13, s5
 80283fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 80283fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028402:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028406:	ee16 4a90 	vmov	r4, s13
 802840a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802840e:	eef0 6a43 	vmov.f32	s13, s6
 8028412:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028416:	ee12 2a90 	vmov	r2, s5
 802841a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802841e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028422:	ee13 2a10 	vmov	r2, s6
 8028426:	9327      	str	r3, [sp, #156]	; 0x9c
 8028428:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802842a:	fb92 f3f3 	sdiv	r3, r2, r3
 802842e:	9328      	str	r3, [sp, #160]	; 0xa0
 8028430:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028432:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8028434:	3b01      	subs	r3, #1
 8028436:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802843a:	9316      	str	r3, [sp, #88]	; 0x58
 802843c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802843e:	bf08      	it	eq
 8028440:	4613      	moveq	r3, r2
 8028442:	ee16 6a90 	vmov	r6, s13
 8028446:	9307      	str	r3, [sp, #28]
 8028448:	eeb0 3a67 	vmov.f32	s6, s15
 802844c:	eef0 2a47 	vmov.f32	s5, s14
 8028450:	e622      	b.n	8028098 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8028452:	2800      	cmp	r0, #0
 8028454:	f43f ae92 	beq.w	802817c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8028458:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802845c:	9308      	str	r3, [sp, #32]
 802845e:	0e1b      	lsrs	r3, r3, #24
 8028460:	9310      	str	r3, [sp, #64]	; 0x40
 8028462:	e68b      	b.n	802817c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8028464:	8839      	ldrh	r1, [r7, #0]
 8028466:	4dd4      	ldr	r5, [pc, #848]	; (80287b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 8028468:	43db      	mvns	r3, r3
 802846a:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802846e:	fa5f f883 	uxtb.w	r8, r3
 8028472:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8028476:	fb0e fe08 	mul.w	lr, lr, r8
 802847a:	10c8      	asrs	r0, r1, #3
 802847c:	00cb      	lsls	r3, r1, #3
 802847e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028482:	f10e 0101 	add.w	r1, lr, #1
 8028486:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 802848a:	fb00 f008 	mul.w	r0, r0, r8
 802848e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8028492:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8028496:	f100 0e01 	add.w	lr, r0, #1
 802849a:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802849e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80284a2:	b2db      	uxtb	r3, r3
 80284a4:	b2c9      	uxtb	r1, r1
 80284a6:	00d2      	lsls	r2, r2, #3
 80284a8:	fb03 f308 	mul.w	r3, r3, r8
 80284ac:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 80284b0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80284b4:	430a      	orrs	r2, r1
 80284b6:	1c59      	adds	r1, r3, #1
 80284b8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80284bc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80284c0:	e748      	b.n	8028354 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80284c2:	f112 0801 	adds.w	r8, r2, #1
 80284c6:	f53f af4b 	bmi.w	8028360 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80284ca:	4543      	cmp	r3, r8
 80284cc:	f6ff af48 	blt.w	8028360 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80284d0:	f11c 0801 	adds.w	r8, ip, #1
 80284d4:	f53f af44 	bmi.w	8028360 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80284d8:	45c6      	cmp	lr, r8
 80284da:	f6ff af41 	blt.w	8028360 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80284de:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80284e2:	fa0f f28e 	sxth.w	r2, lr
 80284e6:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80284ea:	9200      	str	r2, [sp, #0]
 80284ec:	b21b      	sxth	r3, r3
 80284ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80284f0:	9819      	ldr	r0, [sp, #100]	; 0x64
 80284f2:	4639      	mov	r1, r7
 80284f4:	f7ff fc87 	bl	8027e06 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 80284f8:	e732      	b.n	8028360 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80284fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80284fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80284fe:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8028502:	1421      	asrs	r1, r4, #16
 8028504:	1433      	asrs	r3, r6, #16
 8028506:	fb07 1303 	mla	r3, r7, r3, r1
 802850a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802850c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8028510:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8028514:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028518:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802851c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8028520:	2a00      	cmp	r2, #0
 8028522:	f000 8107 	beq.w	8028734 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c8>
 8028526:	684d      	ldr	r5, [r1, #4]
 8028528:	950d      	str	r5, [sp, #52]	; 0x34
 802852a:	0e2d      	lsrs	r5, r5, #24
 802852c:	9514      	str	r5, [sp, #80]	; 0x50
 802852e:	b178      	cbz	r0, 8028550 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8028530:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8028534:	3f01      	subs	r7, #1
 8028536:	00bf      	lsls	r7, r7, #2
 8028538:	3704      	adds	r7, #4
 802853a:	eb01 0e07 	add.w	lr, r1, r7
 802853e:	59c9      	ldr	r1, [r1, r7]
 8028540:	9109      	str	r1, [sp, #36]	; 0x24
 8028542:	0e09      	lsrs	r1, r1, #24
 8028544:	9111      	str	r1, [sp, #68]	; 0x44
 8028546:	f8de 1004 	ldr.w	r1, [lr, #4]
 802854a:	910e      	str	r1, [sp, #56]	; 0x38
 802854c:	0e09      	lsrs	r1, r1, #24
 802854e:	9115      	str	r1, [sp, #84]	; 0x54
 8028550:	b292      	uxth	r2, r2
 8028552:	b280      	uxth	r0, r0
 8028554:	fb02 f900 	mul.w	r9, r2, r0
 8028558:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802855c:	0112      	lsls	r2, r2, #4
 802855e:	eba2 0e09 	sub.w	lr, r2, r9
 8028562:	b280      	uxth	r0, r0
 8028564:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8028568:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802856a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802856c:	fa1f fe8e 	uxth.w	lr, lr
 8028570:	1a09      	subs	r1, r1, r0
 8028572:	b289      	uxth	r1, r1
 8028574:	fb0e f202 	mul.w	r2, lr, r2
 8028578:	fb01 220c 	mla	r2, r1, ip, r2
 802857c:	fb00 2205 	mla	r2, r0, r5, r2
 8028580:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028582:	fb09 2205 	mla	r2, r9, r5, r2
 8028586:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802858a:	2a00      	cmp	r2, #0
 802858c:	f000 80c9 	beq.w	8028722 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 8028590:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028594:	d019      	beq.n	80285ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8028596:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802859a:	fb0c fa0a 	mul.w	sl, ip, sl
 802859e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80285a2:	fb0c fc03 	mul.w	ip, ip, r3
 80285a6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80285aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80285ae:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80285b2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80285b6:	4453      	add	r3, sl
 80285b8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80285bc:	0a1b      	lsrs	r3, r3, #8
 80285be:	0a3f      	lsrs	r7, r7, #8
 80285c0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80285c4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80285c8:	433b      	orrs	r3, r7
 80285ca:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80285cc:	2dff      	cmp	r5, #255	; 0xff
 80285ce:	d020      	beq.n	8028612 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 80285d0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80285d2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80285d6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80285d8:	436f      	muls	r7, r5
 80285da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80285dc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80285e0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80285e2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80285e6:	fb05 fa0a 	mul.w	sl, r5, sl
 80285ea:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80285ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80285f2:	44bc      	add	ip, r7
 80285f4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80285f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80285fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028600:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028604:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028608:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802860c:	ea4c 050a 	orr.w	r5, ip, sl
 8028610:	950d      	str	r5, [sp, #52]	; 0x34
 8028612:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028614:	2dff      	cmp	r5, #255	; 0xff
 8028616:	d020      	beq.n	802865a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8028618:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802861a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802861e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028620:	436f      	muls	r7, r5
 8028622:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8028624:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8028628:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802862a:	fb05 fa0c 	mul.w	sl, r5, ip
 802862e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028632:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028636:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802863a:	44bc      	add	ip, r7
 802863c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028640:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8028644:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028648:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802864c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028650:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028654:	ea4c 050a 	orr.w	r5, ip, sl
 8028658:	9509      	str	r5, [sp, #36]	; 0x24
 802865a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802865c:	2dff      	cmp	r5, #255	; 0xff
 802865e:	d020      	beq.n	80286a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8028660:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028662:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8028666:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028668:	436f      	muls	r7, r5
 802866a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802866c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028670:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028672:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8028676:	fb05 fa0a 	mul.w	sl, r5, sl
 802867a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802867e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028682:	44bc      	add	ip, r7
 8028684:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8028688:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802868c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028690:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028694:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8028698:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802869c:	ea4c 050a 	orr.w	r5, ip, sl
 80286a0:	950e      	str	r5, [sp, #56]	; 0x38
 80286a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80286a4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80286a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80286aa:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80286ae:	fb0e f707 	mul.w	r7, lr, r7
 80286b2:	fb01 770c 	mla	r7, r1, ip, r7
 80286b6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80286ba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80286bc:	fb00 770c 	mla	r7, r0, ip, r7
 80286c0:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80286c4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80286c6:	fb09 770c 	mla	r7, r9, ip, r7
 80286ca:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80286ce:	fb0e fe0c 	mul.w	lr, lr, ip
 80286d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80286d6:	fb01 e303 	mla	r3, r1, r3, lr
 80286da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80286dc:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80286e0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80286e2:	fb00 330a 	mla	r3, r0, sl, r3
 80286e6:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80286ea:	fb09 3c0c 	mla	ip, r9, ip, r3
 80286ee:	0a3f      	lsrs	r7, r7, #8
 80286f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80286f4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80286f8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80286fc:	ea47 070c 	orr.w	r7, r7, ip
 8028700:	2aff      	cmp	r2, #255	; 0xff
 8028702:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8028706:	d11e      	bne.n	8028746 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6da>
 8028708:	097a      	lsrs	r2, r7, #5
 802870a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 802870e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8028712:	f023 0307 	bic.w	r3, r3, #7
 8028716:	4313      	orrs	r3, r2
 8028718:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802871c:	431f      	orrs	r7, r3
 802871e:	f8a8 7000 	strh.w	r7, [r8]
 8028722:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8028724:	441c      	add	r4, r3
 8028726:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028728:	f108 0802 	add.w	r8, r8, #2
 802872c:	441e      	add	r6, r3
 802872e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028732:	e644      	b.n	80283be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8028734:	2800      	cmp	r0, #0
 8028736:	f43f af0b 	beq.w	8028550 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802873a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802873e:	9109      	str	r1, [sp, #36]	; 0x24
 8028740:	0e09      	lsrs	r1, r1, #24
 8028742:	9111      	str	r1, [sp, #68]	; 0x44
 8028744:	e704      	b.n	8028550 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8028746:	f8b8 1000 	ldrh.w	r1, [r8]
 802874a:	43d2      	mvns	r2, r2
 802874c:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8028750:	fa5f fe82 	uxtb.w	lr, r2
 8028754:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8028758:	fb0c fc0e 	mul.w	ip, ip, lr
 802875c:	10c8      	asrs	r0, r1, #3
 802875e:	00ca      	lsls	r2, r1, #3
 8028760:	f10c 0101 	add.w	r1, ip, #1
 8028764:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028768:	0c39      	lsrs	r1, r7, #16
 802876a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802876e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028772:	4911      	ldr	r1, [pc, #68]	; (80287b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74c>)
 8028774:	fb00 f00e 	mul.w	r0, r0, lr
 8028778:	fa5f fc8c 	uxtb.w	ip, ip
 802877c:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8028780:	b2d2      	uxtb	r2, r2
 8028782:	1c41      	adds	r1, r0, #1
 8028784:	fb02 f20e 	mul.w	r2, r2, lr
 8028788:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802878c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028790:	1c51      	adds	r1, r2, #1
 8028792:	00c0      	lsls	r0, r0, #3
 8028794:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028798:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802879c:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80287a0:	ea4c 0c00 	orr.w	ip, ip, r0
 80287a4:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 80287a8:	ea47 0c0c 	orr.w	ip, r7, ip
 80287ac:	f8a8 c000 	strh.w	ip, [r8]
 80287b0:	e7b7      	b.n	8028722 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b6>
 80287b2:	b01b      	add	sp, #108	; 0x6c
 80287b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80287b8:	fffff800 	.word	0xfffff800

080287bc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 80287bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80287c0:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 80287c4:	2d00      	cmp	r5, #0
 80287c6:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80287ca:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80287ce:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80287d2:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 80287d6:	fb05 0e03 	mla	lr, r5, r3, r0
 80287da:	f2c0 808c 	blt.w	80288f6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 80287de:	45a9      	cmp	r9, r5
 80287e0:	f340 8089 	ble.w	80288f6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 80287e4:	2800      	cmp	r0, #0
 80287e6:	f2c0 8084 	blt.w	80288f2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80287ea:	4580      	cmp	r8, r0
 80287ec:	f340 8081 	ble.w	80288f2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 80287f0:	ea4f 045e 	mov.w	r4, lr, lsr #1
 80287f4:	f01e 0f01 	tst.w	lr, #1
 80287f8:	5d16      	ldrb	r6, [r2, r4]
 80287fa:	bf0c      	ite	eq
 80287fc:	f006 060f 	andeq.w	r6, r6, #15
 8028800:	1136      	asrne	r6, r6, #4
 8028802:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028806:	b2f6      	uxtb	r6, r6
 8028808:	1c44      	adds	r4, r0, #1
 802880a:	d477      	bmi.n	80288fc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802880c:	45a0      	cmp	r8, r4
 802880e:	dd75      	ble.n	80288fc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8028810:	2f00      	cmp	r7, #0
 8028812:	d075      	beq.n	8028900 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8028814:	f10e 0a01 	add.w	sl, lr, #1
 8028818:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802881c:	f01a 0f01 	tst.w	sl, #1
 8028820:	5d14      	ldrb	r4, [r2, r4]
 8028822:	bf0c      	ite	eq
 8028824:	f004 040f 	andeq.w	r4, r4, #15
 8028828:	1124      	asrne	r4, r4, #4
 802882a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802882e:	b2e4      	uxtb	r4, r4
 8028830:	3501      	adds	r5, #1
 8028832:	d469      	bmi.n	8028908 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8028834:	45a9      	cmp	r9, r5
 8028836:	dd67      	ble.n	8028908 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8028838:	f1bc 0f00 	cmp.w	ip, #0
 802883c:	d067      	beq.n	802890e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 802883e:	2800      	cmp	r0, #0
 8028840:	db60      	blt.n	8028904 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8028842:	4580      	cmp	r8, r0
 8028844:	dd5e      	ble.n	8028904 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8028846:	eb03 090e 	add.w	r9, r3, lr
 802884a:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802884e:	f019 0f01 	tst.w	r9, #1
 8028852:	5d55      	ldrb	r5, [r2, r5]
 8028854:	bf0c      	ite	eq
 8028856:	f005 050f 	andeq.w	r5, r5, #15
 802885a:	112d      	asrne	r5, r5, #4
 802885c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8028860:	b2ed      	uxtb	r5, r5
 8028862:	3001      	adds	r0, #1
 8028864:	d456      	bmi.n	8028914 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8028866:	4580      	cmp	r8, r0
 8028868:	dd54      	ble.n	8028914 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802886a:	2f00      	cmp	r7, #0
 802886c:	d054      	beq.n	8028918 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802886e:	3301      	adds	r3, #1
 8028870:	449e      	add	lr, r3
 8028872:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028876:	f01e 0f01 	tst.w	lr, #1
 802887a:	5cd0      	ldrb	r0, [r2, r3]
 802887c:	bf0c      	ite	eq
 802887e:	f000 000f 	andeq.w	r0, r0, #15
 8028882:	1100      	asrne	r0, r0, #4
 8028884:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028888:	b2c3      	uxtb	r3, r0
 802888a:	b2ba      	uxth	r2, r7
 802888c:	fa1f fc8c 	uxth.w	ip, ip
 8028890:	fb02 f00c 	mul.w	r0, r2, ip
 8028894:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8028898:	0112      	lsls	r2, r2, #4
 802889a:	fa1f fc8c 	uxth.w	ip, ip
 802889e:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80288a2:	1a12      	subs	r2, r2, r0
 80288a4:	eba7 070c 	sub.w	r7, r7, ip
 80288a8:	b292      	uxth	r2, r2
 80288aa:	b2bf      	uxth	r7, r7
 80288ac:	4362      	muls	r2, r4
 80288ae:	fb06 2207 	mla	r2, r6, r7, r2
 80288b2:	fb0c 2505 	mla	r5, ip, r5, r2
 80288b6:	fb00 5303 	mla	r3, r0, r3, r5
 80288ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80288be:	b1b3      	cbz	r3, 80288ee <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80288c0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80288c4:	435a      	muls	r2, r3
 80288c6:	1c53      	adds	r3, r2, #1
 80288c8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80288cc:	4a2d      	ldr	r2, [pc, #180]	; (8028984 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 80288ce:	121b      	asrs	r3, r3, #8
 80288d0:	6812      	ldr	r2, [r2, #0]
 80288d2:	2bff      	cmp	r3, #255	; 0xff
 80288d4:	ea4f 2612 	mov.w	r6, r2, lsr #8
 80288d8:	d120      	bne.n	802891c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 80288da:	4b2b      	ldr	r3, [pc, #172]	; (8028988 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 80288dc:	0950      	lsrs	r0, r2, #5
 80288de:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80288e2:	4033      	ands	r3, r6
 80288e4:	4318      	orrs	r0, r3
 80288e6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80288ea:	4302      	orrs	r2, r0
 80288ec:	800a      	strh	r2, [r1, #0]
 80288ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80288f2:	2600      	movs	r6, #0
 80288f4:	e788      	b.n	8028808 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 80288f6:	2400      	movs	r4, #0
 80288f8:	4626      	mov	r6, r4
 80288fa:	e799      	b.n	8028830 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 80288fc:	2400      	movs	r4, #0
 80288fe:	e797      	b.n	8028830 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8028900:	463c      	mov	r4, r7
 8028902:	e795      	b.n	8028830 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8028904:	2500      	movs	r5, #0
 8028906:	e7ac      	b.n	8028862 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8028908:	2300      	movs	r3, #0
 802890a:	461d      	mov	r5, r3
 802890c:	e7bd      	b.n	802888a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802890e:	4663      	mov	r3, ip
 8028910:	4665      	mov	r5, ip
 8028912:	e7ba      	b.n	802888a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8028914:	2300      	movs	r3, #0
 8028916:	e7b8      	b.n	802888a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8028918:	463b      	mov	r3, r7
 802891a:	e7b6      	b.n	802888a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802891c:	880d      	ldrh	r5, [r1, #0]
 802891e:	b29f      	uxth	r7, r3
 8028920:	122c      	asrs	r4, r5, #8
 8028922:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8028926:	43db      	mvns	r3, r3
 8028928:	b2db      	uxtb	r3, r3
 802892a:	fb10 f007 	smulbb	r0, r0, r7
 802892e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8028932:	fb04 0403 	mla	r4, r4, r3, r0
 8028936:	b2f6      	uxtb	r6, r6
 8028938:	10e8      	asrs	r0, r5, #3
 802893a:	b2d2      	uxtb	r2, r2
 802893c:	00ed      	lsls	r5, r5, #3
 802893e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8028942:	fb12 f207 	smulbb	r2, r2, r7
 8028946:	fb16 f607 	smulbb	r6, r6, r7
 802894a:	b2ed      	uxtb	r5, r5
 802894c:	b2a4      	uxth	r4, r4
 802894e:	fb00 6603 	mla	r6, r0, r3, r6
 8028952:	fb05 2303 	mla	r3, r5, r3, r2
 8028956:	b29a      	uxth	r2, r3
 8028958:	1c63      	adds	r3, r4, #1
 802895a:	b2b0      	uxth	r0, r6
 802895c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8028960:	1c53      	adds	r3, r2, #1
 8028962:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028966:	1c42      	adds	r2, r0, #1
 8028968:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802896c:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8028970:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028974:	0940      	lsrs	r0, r0, #5
 8028976:	4323      	orrs	r3, r4
 8028978:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802897c:	4303      	orrs	r3, r0
 802897e:	800b      	strh	r3, [r1, #0]
 8028980:	e7b5      	b.n	80288ee <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8028982:	bf00      	nop
 8028984:	20008e38 	.word	0x20008e38
 8028988:	00fff800 	.word	0x00fff800

0802898c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802898c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028990:	b097      	sub	sp, #92	; 0x5c
 8028992:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8028996:	9214      	str	r2, [sp, #80]	; 0x50
 8028998:	9309      	str	r3, [sp, #36]	; 0x24
 802899a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802899c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80289a0:	910d      	str	r1, [sp, #52]	; 0x34
 80289a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80289a4:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80289a8:	9015      	str	r0, [sp, #84]	; 0x54
 80289aa:	6850      	ldr	r0, [r2, #4]
 80289ac:	6812      	ldr	r2, [r2, #0]
 80289ae:	fb00 1303 	mla	r3, r0, r3, r1
 80289b2:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80289b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80289b8:	689b      	ldr	r3, [r3, #8]
 80289ba:	3301      	adds	r3, #1
 80289bc:	f023 0301 	bic.w	r3, r3, #1
 80289c0:	930a      	str	r3, [sp, #40]	; 0x28
 80289c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80289c4:	681f      	ldr	r7, [r3, #0]
 80289c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80289c8:	2b00      	cmp	r3, #0
 80289ca:	dc03      	bgt.n	80289d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80289cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80289ce:	2b00      	cmp	r3, #0
 80289d0:	f340 8287 	ble.w	8028ee2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 80289d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80289d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80289da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80289de:	1e48      	subs	r0, r1, #1
 80289e0:	f102 3cff 	add.w	ip, r2, #4294967295
 80289e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80289e6:	2b00      	cmp	r3, #0
 80289e8:	f340 80c4 	ble.w	8028b74 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80289ec:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80289f0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80289f4:	d406      	bmi.n	8028a04 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80289f6:	4586      	cmp	lr, r0
 80289f8:	da04      	bge.n	8028a04 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80289fa:	2b00      	cmp	r3, #0
 80289fc:	db02      	blt.n	8028a04 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80289fe:	4563      	cmp	r3, ip
 8028a00:	f2c0 80b9 	blt.w	8028b76 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8028a04:	f11e 0e01 	adds.w	lr, lr, #1
 8028a08:	f100 80aa 	bmi.w	8028b60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8028a0c:	4571      	cmp	r1, lr
 8028a0e:	f2c0 80a7 	blt.w	8028b60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8028a12:	3301      	adds	r3, #1
 8028a14:	f100 80a4 	bmi.w	8028b60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8028a18:	429a      	cmp	r2, r3
 8028a1a:	f2c0 80a1 	blt.w	8028b60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8028a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028a20:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8028a24:	930e      	str	r3, [sp, #56]	; 0x38
 8028a26:	46c8      	mov	r8, r9
 8028a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028a2a:	2b00      	cmp	r3, #0
 8028a2c:	f340 80c3 	ble.w	8028bb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8028a30:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028a32:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028a36:	1423      	asrs	r3, r4, #16
 8028a38:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028a3c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028a40:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8028a44:	f100 814d 	bmi.w	8028ce2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028a48:	f10c 3bff 	add.w	fp, ip, #4294967295
 8028a4c:	455b      	cmp	r3, fp
 8028a4e:	f280 8148 	bge.w	8028ce2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028a52:	2800      	cmp	r0, #0
 8028a54:	f2c0 8145 	blt.w	8028ce2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028a58:	f10e 3bff 	add.w	fp, lr, #4294967295
 8028a5c:	4558      	cmp	r0, fp
 8028a5e:	f280 8140 	bge.w	8028ce2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028a62:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8028a64:	fb00 3305 	mla	r3, r0, r5, r3
 8028a68:	0858      	lsrs	r0, r3, #1
 8028a6a:	07dd      	lsls	r5, r3, #31
 8028a6c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8028a70:	bf54      	ite	pl
 8028a72:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028a76:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028a7a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028a7e:	fa5f fc8c 	uxtb.w	ip, ip
 8028a82:	2a00      	cmp	r2, #0
 8028a84:	f000 80db 	beq.w	8028c3e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b2>
 8028a88:	1c58      	adds	r0, r3, #1
 8028a8a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028a8e:	07c0      	lsls	r0, r0, #31
 8028a90:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8028a94:	bf54      	ite	pl
 8028a96:	f00e 0e0f 	andpl.w	lr, lr, #15
 8028a9a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028a9e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028aa2:	fa5f f08e 	uxtb.w	r0, lr
 8028aa6:	9010      	str	r0, [sp, #64]	; 0x40
 8028aa8:	b1c9      	cbz	r1, 8028ade <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8028aaa:	4453      	add	r3, sl
 8028aac:	0858      	lsrs	r0, r3, #1
 8028aae:	07dd      	lsls	r5, r3, #31
 8028ab0:	5c38      	ldrb	r0, [r7, r0]
 8028ab2:	bf54      	ite	pl
 8028ab4:	f000 000f 	andpl.w	r0, r0, #15
 8028ab8:	1100      	asrmi	r0, r0, #4
 8028aba:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028abe:	3301      	adds	r3, #1
 8028ac0:	b2c0      	uxtb	r0, r0
 8028ac2:	900b      	str	r0, [sp, #44]	; 0x2c
 8028ac4:	0858      	lsrs	r0, r3, #1
 8028ac6:	07dd      	lsls	r5, r3, #31
 8028ac8:	f817 e000 	ldrb.w	lr, [r7, r0]
 8028acc:	bf54      	ite	pl
 8028ace:	f00e 030f 	andpl.w	r3, lr, #15
 8028ad2:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8028ad6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028ada:	b2db      	uxtb	r3, r3
 8028adc:	9311      	str	r3, [sp, #68]	; 0x44
 8028ade:	b292      	uxth	r2, r2
 8028ae0:	b289      	uxth	r1, r1
 8028ae2:	fb02 f301 	mul.w	r3, r2, r1
 8028ae6:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8028aea:	0112      	lsls	r2, r2, #4
 8028aec:	b289      	uxth	r1, r1
 8028aee:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8028af2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028af4:	1ad2      	subs	r2, r2, r3
 8028af6:	1a40      	subs	r0, r0, r1
 8028af8:	b292      	uxth	r2, r2
 8028afa:	436a      	muls	r2, r5
 8028afc:	b280      	uxth	r0, r0
 8028afe:	fb0c 2c00 	mla	ip, ip, r0, r2
 8028b02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028b04:	fb01 c102 	mla	r1, r1, r2, ip
 8028b08:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8028b0a:	fb03 1302 	mla	r3, r3, r2, r1
 8028b0e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028b12:	b1db      	cbz	r3, 8028b4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8028b14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028b16:	4353      	muls	r3, r2
 8028b18:	1c5a      	adds	r2, r3, #1
 8028b1a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028b1e:	4ac6      	ldr	r2, [pc, #792]	; (8028e38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8028b20:	121b      	asrs	r3, r3, #8
 8028b22:	6812      	ldr	r2, [r2, #0]
 8028b24:	2bff      	cmp	r3, #255	; 0xff
 8028b26:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8028b2a:	f040 8099 	bne.w	8028c60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8028b2e:	0953      	lsrs	r3, r2, #5
 8028b30:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8028b34:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028b38:	f02c 0c07 	bic.w	ip, ip, #7
 8028b3c:	ea43 0c0c 	orr.w	ip, r3, ip
 8028b40:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028b44:	ea4c 0202 	orr.w	r2, ip, r2
 8028b48:	f8a8 2000 	strh.w	r2, [r8]
 8028b4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028b4e:	441c      	add	r4, r3
 8028b50:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028b52:	441e      	add	r6, r3
 8028b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8028b56:	3b01      	subs	r3, #1
 8028b58:	f108 0802 	add.w	r8, r8, #2
 8028b5c:	930e      	str	r3, [sp, #56]	; 0x38
 8028b5e:	e763      	b.n	8028a28 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8028b60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028b62:	441c      	add	r4, r3
 8028b64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028b66:	441e      	add	r6, r3
 8028b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028b6a:	3b01      	subs	r3, #1
 8028b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8028b6e:	f109 0902 	add.w	r9, r9, #2
 8028b72:	e737      	b.n	80289e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8028b74:	d024      	beq.n	8028bc0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8028b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028b78:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8028b7a:	3b01      	subs	r3, #1
 8028b7c:	fb00 4003 	mla	r0, r0, r3, r4
 8028b80:	1400      	asrs	r0, r0, #16
 8028b82:	f53f af4c 	bmi.w	8028a1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028b86:	3901      	subs	r1, #1
 8028b88:	4288      	cmp	r0, r1
 8028b8a:	f6bf af48 	bge.w	8028a1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028b8e:	9924      	ldr	r1, [sp, #144]	; 0x90
 8028b90:	fb01 6303 	mla	r3, r1, r3, r6
 8028b94:	141b      	asrs	r3, r3, #16
 8028b96:	f53f af42 	bmi.w	8028a1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028b9a:	3a01      	subs	r2, #1
 8028b9c:	4293      	cmp	r3, r2
 8028b9e:	f6bf af3e 	bge.w	8028a1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028ba2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8028ba6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8028baa:	930e      	str	r3, [sp, #56]	; 0x38
 8028bac:	46c8      	mov	r8, r9
 8028bae:	f1bb 0f00 	cmp.w	fp, #0
 8028bb2:	f300 80b7 	bgt.w	8028d24 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 8028bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028bb8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8028bbc:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8028bc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028bc2:	2b00      	cmp	r3, #0
 8028bc4:	f340 818d 	ble.w	8028ee2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8028bc8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028bcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028bd0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028bd4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028bd6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028bda:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028bde:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028be2:	eef0 6a62 	vmov.f32	s13, s5
 8028be6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028bea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028bee:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028bf2:	ee16 4a90 	vmov	r4, s13
 8028bf6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028bfa:	eef0 6a43 	vmov.f32	s13, s6
 8028bfe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028c02:	ee12 2a90 	vmov	r2, s5
 8028c06:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028c0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8028c0e:	ee13 2a10 	vmov	r2, s6
 8028c12:	9323      	str	r3, [sp, #140]	; 0x8c
 8028c14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028c16:	fb92 f3f3 	sdiv	r3, r2, r3
 8028c1a:	9324      	str	r3, [sp, #144]	; 0x90
 8028c1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028c1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028c20:	3b01      	subs	r3, #1
 8028c22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028c26:	930d      	str	r3, [sp, #52]	; 0x34
 8028c28:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028c2a:	bf08      	it	eq
 8028c2c:	4613      	moveq	r3, r2
 8028c2e:	ee16 6a90 	vmov	r6, s13
 8028c32:	9309      	str	r3, [sp, #36]	; 0x24
 8028c34:	eeb0 3a67 	vmov.f32	s6, s15
 8028c38:	eef0 2a47 	vmov.f32	s5, s14
 8028c3c:	e6c3      	b.n	80289c6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8028c3e:	2900      	cmp	r1, #0
 8028c40:	f43f af4d 	beq.w	8028ade <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8028c44:	eb0a 0003 	add.w	r0, sl, r3
 8028c48:	0843      	lsrs	r3, r0, #1
 8028c4a:	07c0      	lsls	r0, r0, #31
 8028c4c:	5cfb      	ldrb	r3, [r7, r3]
 8028c4e:	bf54      	ite	pl
 8028c50:	f003 030f 	andpl.w	r3, r3, #15
 8028c54:	111b      	asrmi	r3, r3, #4
 8028c56:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028c5a:	b2db      	uxtb	r3, r3
 8028c5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8028c5e:	e73e      	b.n	8028ade <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8028c60:	f8b8 e000 	ldrh.w	lr, [r8]
 8028c64:	fa1f fb83 	uxth.w	fp, r3
 8028c68:	ea4f 202e 	mov.w	r0, lr, asr #8
 8028c6c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8028c70:	43db      	mvns	r3, r3
 8028c72:	b2db      	uxtb	r3, r3
 8028c74:	fb11 f10b 	smulbb	r1, r1, fp
 8028c78:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028c7c:	fb00 1003 	mla	r0, r0, r3, r1
 8028c80:	fa5f fc8c 	uxtb.w	ip, ip
 8028c84:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8028c88:	b2d2      	uxtb	r2, r2
 8028c8a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8028c8e:	b280      	uxth	r0, r0
 8028c90:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028c94:	fb1c fc0b 	smulbb	ip, ip, fp
 8028c98:	fa5f fe8e 	uxtb.w	lr, lr
 8028c9c:	fb12 fb0b 	smulbb	fp, r2, fp
 8028ca0:	fb01 cc03 	mla	ip, r1, r3, ip
 8028ca4:	fb0e bb03 	mla	fp, lr, r3, fp
 8028ca8:	1c43      	adds	r3, r0, #1
 8028caa:	fa1f fc8c 	uxth.w	ip, ip
 8028cae:	fa1f fb8b 	uxth.w	fp, fp
 8028cb2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028cb6:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8028cba:	f10c 0101 	add.w	r1, ip, #1
 8028cbe:	f10b 0001 	add.w	r0, fp, #1
 8028cc2:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8028cc6:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028cca:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8028cce:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028cd2:	4318      	orrs	r0, r3
 8028cd4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028cd8:	ea40 000c 	orr.w	r0, r0, ip
 8028cdc:	f8a8 0000 	strh.w	r0, [r8]
 8028ce0:	e734      	b.n	8028b4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8028ce2:	f113 0b01 	adds.w	fp, r3, #1
 8028ce6:	f53f af31 	bmi.w	8028b4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8028cea:	45dc      	cmp	ip, fp
 8028cec:	f6ff af2e 	blt.w	8028b4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8028cf0:	f110 0b01 	adds.w	fp, r0, #1
 8028cf4:	f53f af2a 	bmi.w	8028b4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8028cf8:	45de      	cmp	lr, fp
 8028cfa:	f6ff af27 	blt.w	8028b4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8028cfe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8028d00:	9302      	str	r3, [sp, #8]
 8028d02:	fa0f f38e 	sxth.w	r3, lr
 8028d06:	9301      	str	r3, [sp, #4]
 8028d08:	fa0f f38c 	sxth.w	r3, ip
 8028d0c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8028d10:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8028d14:	9300      	str	r3, [sp, #0]
 8028d16:	463a      	mov	r2, r7
 8028d18:	4653      	mov	r3, sl
 8028d1a:	4641      	mov	r1, r8
 8028d1c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8028d1e:	f7ff fd4d 	bl	80287bc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8028d22:	e713      	b.n	8028b4c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8028d24:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8028d26:	1422      	asrs	r2, r4, #16
 8028d28:	1433      	asrs	r3, r6, #16
 8028d2a:	fb05 2303 	mla	r3, r5, r3, r2
 8028d2e:	085a      	lsrs	r2, r3, #1
 8028d30:	07dd      	lsls	r5, r3, #31
 8028d32:	5cba      	ldrb	r2, [r7, r2]
 8028d34:	bf54      	ite	pl
 8028d36:	f002 020f 	andpl.w	r2, r2, #15
 8028d3a:	1112      	asrmi	r2, r2, #4
 8028d3c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8028d40:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8028d44:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8028d48:	b2d2      	uxtb	r2, r2
 8028d4a:	2900      	cmp	r1, #0
 8028d4c:	d076      	beq.n	8028e3c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8028d4e:	f103 0e01 	add.w	lr, r3, #1
 8028d52:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8028d56:	f01e 0f01 	tst.w	lr, #1
 8028d5a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028d5e:	bf0c      	ite	eq
 8028d60:	f00c 0c0f 	andeq.w	ip, ip, #15
 8028d64:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8028d68:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028d6c:	fa5f f58c 	uxtb.w	r5, ip
 8028d70:	9512      	str	r5, [sp, #72]	; 0x48
 8028d72:	b300      	cbz	r0, 8028db6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8028d74:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028d76:	442b      	add	r3, r5
 8028d78:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028d7c:	07dd      	lsls	r5, r3, #31
 8028d7e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028d82:	bf54      	ite	pl
 8028d84:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028d88:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028d8c:	3301      	adds	r3, #1
 8028d8e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028d92:	fa5f f58c 	uxtb.w	r5, ip
 8028d96:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028d9a:	950c      	str	r5, [sp, #48]	; 0x30
 8028d9c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028da0:	07dd      	lsls	r5, r3, #31
 8028da2:	bf54      	ite	pl
 8028da4:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028da8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028dac:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028db0:	fa5f f38c 	uxtb.w	r3, ip
 8028db4:	9313      	str	r3, [sp, #76]	; 0x4c
 8028db6:	b289      	uxth	r1, r1
 8028db8:	b280      	uxth	r0, r0
 8028dba:	fb01 f300 	mul.w	r3, r1, r0
 8028dbe:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8028dc2:	0109      	lsls	r1, r1, #4
 8028dc4:	b280      	uxth	r0, r0
 8028dc6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 8028dca:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028dcc:	1ac9      	subs	r1, r1, r3
 8028dce:	ebac 0c00 	sub.w	ip, ip, r0
 8028dd2:	b289      	uxth	r1, r1
 8028dd4:	4369      	muls	r1, r5
 8028dd6:	fa1f fc8c 	uxth.w	ip, ip
 8028dda:	fb02 120c 	mla	r2, r2, ip, r1
 8028dde:	990c      	ldr	r1, [sp, #48]	; 0x30
 8028de0:	fb00 2001 	mla	r0, r0, r1, r2
 8028de4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8028de6:	fb03 0302 	mla	r3, r3, r2, r0
 8028dea:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028dee:	b1d3      	cbz	r3, 8028e26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8028df0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8028df2:	4353      	muls	r3, r2
 8028df4:	1c5a      	adds	r2, r3, #1
 8028df6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028dfa:	4a0f      	ldr	r2, [pc, #60]	; (8028e38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8028dfc:	121b      	asrs	r3, r3, #8
 8028dfe:	6812      	ldr	r2, [r2, #0]
 8028e00:	2bff      	cmp	r3, #255	; 0xff
 8028e02:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8028e06:	d12d      	bne.n	8028e64 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8028e08:	0953      	lsrs	r3, r2, #5
 8028e0a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8028e0e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8028e12:	f02c 0c07 	bic.w	ip, ip, #7
 8028e16:	ea43 0c0c 	orr.w	ip, r3, ip
 8028e1a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028e1e:	ea4c 0202 	orr.w	r2, ip, r2
 8028e22:	f8a8 2000 	strh.w	r2, [r8]
 8028e26:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028e28:	441c      	add	r4, r3
 8028e2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028e2c:	f108 0802 	add.w	r8, r8, #2
 8028e30:	441e      	add	r6, r3
 8028e32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8028e36:	e6ba      	b.n	8028bae <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8028e38:	20008e38 	.word	0x20008e38
 8028e3c:	2800      	cmp	r0, #0
 8028e3e:	d0ba      	beq.n	8028db6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8028e40:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028e42:	442b      	add	r3, r5
 8028e44:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8028e48:	07db      	lsls	r3, r3, #31
 8028e4a:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8028e4e:	bf54      	ite	pl
 8028e50:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028e54:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028e58:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028e5c:	fa5f f38c 	uxtb.w	r3, ip
 8028e60:	930c      	str	r3, [sp, #48]	; 0x30
 8028e62:	e7a8      	b.n	8028db6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8028e64:	f8b8 e000 	ldrh.w	lr, [r8]
 8028e68:	fa1f fa83 	uxth.w	sl, r3
 8028e6c:	ea4f 202e 	mov.w	r0, lr, asr #8
 8028e70:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8028e74:	43db      	mvns	r3, r3
 8028e76:	b2db      	uxtb	r3, r3
 8028e78:	fb11 f10a 	smulbb	r1, r1, sl
 8028e7c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8028e80:	fb00 1003 	mla	r0, r0, r3, r1
 8028e84:	b2d2      	uxtb	r2, r2
 8028e86:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8028e8a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8028e8e:	fa5f fe8e 	uxtb.w	lr, lr
 8028e92:	fb12 f20a 	smulbb	r2, r2, sl
 8028e96:	fb0e 2203 	mla	r2, lr, r3, r2
 8028e9a:	fa5f fc8c 	uxtb.w	ip, ip
 8028e9e:	b280      	uxth	r0, r0
 8028ea0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8028ea4:	b292      	uxth	r2, r2
 8028ea6:	fb1c fc0a 	smulbb	ip, ip, sl
 8028eaa:	fb01 cc03 	mla	ip, r1, r3, ip
 8028eae:	1c43      	adds	r3, r0, #1
 8028eb0:	1c51      	adds	r1, r2, #1
 8028eb2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8028eb6:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8028eba:	fa1f fc8c 	uxth.w	ip, ip
 8028ebe:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8028ec2:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8028ec6:	4308      	orrs	r0, r1
 8028ec8:	f10c 0101 	add.w	r1, ip, #1
 8028ecc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8028ed0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8028ed4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8028ed8:	ea40 000c 	orr.w	r0, r0, ip
 8028edc:	f8a8 0000 	strh.w	r0, [r8]
 8028ee0:	e7a1      	b.n	8028e26 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8028ee2:	b017      	add	sp, #92	; 0x5c
 8028ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028ee8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8028ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028eec:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8028ef0:	2d00      	cmp	r5, #0
 8028ef2:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8028ef6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8028efa:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8028efe:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8028f02:	fb05 0e03 	mla	lr, r5, r3, r0
 8028f06:	f2c0 80b0 	blt.w	802906a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8028f0a:	45a9      	cmp	r9, r5
 8028f0c:	f340 80ad 	ble.w	802906a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8028f10:	2800      	cmp	r0, #0
 8028f12:	f2c0 80a8 	blt.w	8029066 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8028f16:	4580      	cmp	r8, r0
 8028f18:	f340 80a5 	ble.w	8029066 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8028f1c:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8028f20:	f01e 0f01 	tst.w	lr, #1
 8028f24:	5d16      	ldrb	r6, [r2, r4]
 8028f26:	bf0c      	ite	eq
 8028f28:	f006 060f 	andeq.w	r6, r6, #15
 8028f2c:	1136      	asrne	r6, r6, #4
 8028f2e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8028f32:	b2f6      	uxtb	r6, r6
 8028f34:	1c44      	adds	r4, r0, #1
 8028f36:	f100 809b 	bmi.w	8029070 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8028f3a:	45a0      	cmp	r8, r4
 8028f3c:	f340 8098 	ble.w	8029070 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8028f40:	2f00      	cmp	r7, #0
 8028f42:	f000 8097 	beq.w	8029074 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8028f46:	f10e 0a01 	add.w	sl, lr, #1
 8028f4a:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8028f4e:	f01a 0f01 	tst.w	sl, #1
 8028f52:	5d14      	ldrb	r4, [r2, r4]
 8028f54:	bf0c      	ite	eq
 8028f56:	f004 040f 	andeq.w	r4, r4, #15
 8028f5a:	1124      	asrne	r4, r4, #4
 8028f5c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028f60:	b2e4      	uxtb	r4, r4
 8028f62:	3501      	adds	r5, #1
 8028f64:	f100 808a 	bmi.w	802907c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8028f68:	45a9      	cmp	r9, r5
 8028f6a:	f340 8087 	ble.w	802907c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8028f6e:	f1bc 0f00 	cmp.w	ip, #0
 8028f72:	f000 8086 	beq.w	8029082 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8028f76:	2800      	cmp	r0, #0
 8028f78:	db7e      	blt.n	8029078 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8028f7a:	4580      	cmp	r8, r0
 8028f7c:	dd7c      	ble.n	8029078 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8028f7e:	eb03 090e 	add.w	r9, r3, lr
 8028f82:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8028f86:	f019 0f01 	tst.w	r9, #1
 8028f8a:	5d55      	ldrb	r5, [r2, r5]
 8028f8c:	bf0c      	ite	eq
 8028f8e:	f005 050f 	andeq.w	r5, r5, #15
 8028f92:	112d      	asrne	r5, r5, #4
 8028f94:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8028f98:	b2ed      	uxtb	r5, r5
 8028f9a:	3001      	adds	r0, #1
 8028f9c:	d474      	bmi.n	8029088 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8028f9e:	4580      	cmp	r8, r0
 8028fa0:	dd72      	ble.n	8029088 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8028fa2:	2f00      	cmp	r7, #0
 8028fa4:	d072      	beq.n	802908c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8028fa6:	3301      	adds	r3, #1
 8028fa8:	449e      	add	lr, r3
 8028faa:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028fae:	f01e 0f01 	tst.w	lr, #1
 8028fb2:	5cd0      	ldrb	r0, [r2, r3]
 8028fb4:	bf0c      	ite	eq
 8028fb6:	f000 000f 	andeq.w	r0, r0, #15
 8028fba:	1100      	asrne	r0, r0, #4
 8028fbc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028fc0:	b2c3      	uxtb	r3, r0
 8028fc2:	b2ba      	uxth	r2, r7
 8028fc4:	fa1f fc8c 	uxth.w	ip, ip
 8028fc8:	fb02 f00c 	mul.w	r0, r2, ip
 8028fcc:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8028fd0:	0112      	lsls	r2, r2, #4
 8028fd2:	fa1f fc8c 	uxth.w	ip, ip
 8028fd6:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8028fda:	1a12      	subs	r2, r2, r0
 8028fdc:	eba7 070c 	sub.w	r7, r7, ip
 8028fe0:	b292      	uxth	r2, r2
 8028fe2:	b2bf      	uxth	r7, r7
 8028fe4:	4362      	muls	r2, r4
 8028fe6:	fb06 2207 	mla	r2, r6, r7, r2
 8028fea:	fb0c 2505 	mla	r5, ip, r5, r2
 8028fee:	fb00 5303 	mla	r3, r0, r3, r5
 8028ff2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028ff6:	b3a3      	cbz	r3, 8029062 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8028ff8:	4a25      	ldr	r2, [pc, #148]	; (8029090 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8028ffa:	880e      	ldrh	r6, [r1, #0]
 8028ffc:	6815      	ldr	r5, [r2, #0]
 8028ffe:	1234      	asrs	r4, r6, #8
 8029000:	b29a      	uxth	r2, r3
 8029002:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8029006:	43db      	mvns	r3, r3
 8029008:	b2db      	uxtb	r3, r3
 802900a:	fb10 f002 	smulbb	r0, r0, r2
 802900e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8029012:	fb04 0403 	mla	r4, r4, r3, r0
 8029016:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802901a:	10f0      	asrs	r0, r6, #3
 802901c:	b2ed      	uxtb	r5, r5
 802901e:	00f6      	lsls	r6, r6, #3
 8029020:	fb17 f702 	smulbb	r7, r7, r2
 8029024:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8029028:	fb15 f202 	smulbb	r2, r5, r2
 802902c:	b2f6      	uxtb	r6, r6
 802902e:	b2a4      	uxth	r4, r4
 8029030:	fb00 7003 	mla	r0, r0, r3, r7
 8029034:	fb06 2303 	mla	r3, r6, r3, r2
 8029038:	b29a      	uxth	r2, r3
 802903a:	1c63      	adds	r3, r4, #1
 802903c:	b280      	uxth	r0, r0
 802903e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8029042:	1c53      	adds	r3, r2, #1
 8029044:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029048:	1c42      	adds	r2, r0, #1
 802904a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802904e:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8029052:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029056:	0940      	lsrs	r0, r0, #5
 8029058:	4323      	orrs	r3, r4
 802905a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802905e:	4303      	orrs	r3, r0
 8029060:	800b      	strh	r3, [r1, #0]
 8029062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029066:	2600      	movs	r6, #0
 8029068:	e764      	b.n	8028f34 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802906a:	2400      	movs	r4, #0
 802906c:	4626      	mov	r6, r4
 802906e:	e778      	b.n	8028f62 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8029070:	2400      	movs	r4, #0
 8029072:	e776      	b.n	8028f62 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8029074:	463c      	mov	r4, r7
 8029076:	e774      	b.n	8028f62 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8029078:	2500      	movs	r5, #0
 802907a:	e78e      	b.n	8028f9a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 802907c:	2300      	movs	r3, #0
 802907e:	461d      	mov	r5, r3
 8029080:	e79f      	b.n	8028fc2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8029082:	4663      	mov	r3, ip
 8029084:	4665      	mov	r5, ip
 8029086:	e79c      	b.n	8028fc2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8029088:	2300      	movs	r3, #0
 802908a:	e79a      	b.n	8028fc2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802908c:	463b      	mov	r3, r7
 802908e:	e798      	b.n	8028fc2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8029090:	20008e38 	.word	0x20008e38

08029094 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8029094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029098:	b093      	sub	sp, #76	; 0x4c
 802909a:	461d      	mov	r5, r3
 802909c:	920c      	str	r2, [sp, #48]	; 0x30
 802909e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80290a0:	9107      	str	r1, [sp, #28]
 80290a2:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80290a6:	9011      	str	r0, [sp, #68]	; 0x44
 80290a8:	6850      	ldr	r0, [r2, #4]
 80290aa:	6812      	ldr	r2, [r2, #0]
 80290ac:	fb00 1303 	mla	r3, r0, r3, r1
 80290b0:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80290b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80290b6:	689b      	ldr	r3, [r3, #8]
 80290b8:	3301      	adds	r3, #1
 80290ba:	f023 0301 	bic.w	r3, r3, #1
 80290be:	9306      	str	r3, [sp, #24]
 80290c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80290c2:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80290c6:	681f      	ldr	r7, [r3, #0]
 80290c8:	9b07      	ldr	r3, [sp, #28]
 80290ca:	2b00      	cmp	r3, #0
 80290cc:	dc03      	bgt.n	80290d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80290ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80290d0:	2b00      	cmp	r3, #0
 80290d2:	f340 8267 	ble.w	80295a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80290d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80290d8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80290dc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80290e0:	1e48      	subs	r0, r1, #1
 80290e2:	f102 3cff 	add.w	ip, r2, #4294967295
 80290e6:	2d00      	cmp	r5, #0
 80290e8:	f340 80b8 	ble.w	802925c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80290ec:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80290f0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80290f4:	d406      	bmi.n	8029104 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80290f6:	4586      	cmp	lr, r0
 80290f8:	da04      	bge.n	8029104 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80290fa:	2b00      	cmp	r3, #0
 80290fc:	db02      	blt.n	8029104 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80290fe:	4563      	cmp	r3, ip
 8029100:	f2c0 80ad 	blt.w	802925e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8029104:	f11e 0e01 	adds.w	lr, lr, #1
 8029108:	f100 80a0 	bmi.w	802924c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802910c:	4571      	cmp	r1, lr
 802910e:	f2c0 809d 	blt.w	802924c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8029112:	3301      	adds	r3, #1
 8029114:	f100 809a 	bmi.w	802924c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8029118:	429a      	cmp	r2, r3
 802911a:	f2c0 8097 	blt.w	802924c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802911e:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8029122:	9509      	str	r5, [sp, #36]	; 0x24
 8029124:	46c8      	mov	r8, r9
 8029126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029128:	2b00      	cmp	r3, #0
 802912a:	f340 80b6 	ble.w	802929a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802912e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8029132:	9308      	str	r3, [sp, #32]
 8029134:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8029136:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802913a:	1423      	asrs	r3, r4, #16
 802913c:	ea4f 4026 	mov.w	r0, r6, asr #16
 8029140:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029144:	f100 813e 	bmi.w	80293c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8029148:	f10c 3bff 	add.w	fp, ip, #4294967295
 802914c:	455b      	cmp	r3, fp
 802914e:	f280 8139 	bge.w	80293c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8029152:	2800      	cmp	r0, #0
 8029154:	f2c0 8136 	blt.w	80293c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8029158:	f10e 3bff 	add.w	fp, lr, #4294967295
 802915c:	4558      	cmp	r0, fp
 802915e:	f280 8131 	bge.w	80293c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8029162:	9a06      	ldr	r2, [sp, #24]
 8029164:	fb00 3302 	mla	r3, r0, r2, r3
 8029168:	0858      	lsrs	r0, r3, #1
 802916a:	07da      	lsls	r2, r3, #31
 802916c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8029170:	9a08      	ldr	r2, [sp, #32]
 8029172:	bf54      	ite	pl
 8029174:	f00c 0c0f 	andpl.w	ip, ip, #15
 8029178:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802917c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8029180:	fa5f fc8c 	uxtb.w	ip, ip
 8029184:	2a00      	cmp	r2, #0
 8029186:	f000 80cb 	beq.w	8029320 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802918a:	1c58      	adds	r0, r3, #1
 802918c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8029190:	07c0      	lsls	r0, r0, #31
 8029192:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8029196:	bf54      	ite	pl
 8029198:	f00e 0e0f 	andpl.w	lr, lr, #15
 802919c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80291a0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80291a4:	fa5f fe8e 	uxtb.w	lr, lr
 80291a8:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80291ac:	b1b9      	cbz	r1, 80291de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80291ae:	4453      	add	r3, sl
 80291b0:	0858      	lsrs	r0, r3, #1
 80291b2:	07da      	lsls	r2, r3, #31
 80291b4:	5c38      	ldrb	r0, [r7, r0]
 80291b6:	bf54      	ite	pl
 80291b8:	f000 000f 	andpl.w	r0, r0, #15
 80291bc:	1100      	asrmi	r0, r0, #4
 80291be:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80291c2:	b2c0      	uxtb	r0, r0
 80291c4:	900a      	str	r0, [sp, #40]	; 0x28
 80291c6:	1c58      	adds	r0, r3, #1
 80291c8:	0843      	lsrs	r3, r0, #1
 80291ca:	07c2      	lsls	r2, r0, #31
 80291cc:	5cfb      	ldrb	r3, [r7, r3]
 80291ce:	bf54      	ite	pl
 80291d0:	f003 030f 	andpl.w	r3, r3, #15
 80291d4:	111b      	asrmi	r3, r3, #4
 80291d6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80291da:	b2db      	uxtb	r3, r3
 80291dc:	930e      	str	r3, [sp, #56]	; 0x38
 80291de:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80291e2:	b289      	uxth	r1, r1
 80291e4:	fb02 f301 	mul.w	r3, r2, r1
 80291e8:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80291ec:	0112      	lsls	r2, r2, #4
 80291ee:	b289      	uxth	r1, r1
 80291f0:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80291f4:	1a40      	subs	r0, r0, r1
 80291f6:	fa1f fe80 	uxth.w	lr, r0
 80291fa:	1ad2      	subs	r2, r2, r3
 80291fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80291fe:	b292      	uxth	r2, r2
 8029200:	4342      	muls	r2, r0
 8029202:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8029206:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029208:	fb01 c102 	mla	r1, r1, r2, ip
 802920c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802920e:	fb03 1302 	mla	r3, r3, r2, r1
 8029212:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029216:	2bff      	cmp	r3, #255	; 0xff
 8029218:	f040 8093 	bne.w	8029342 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 802921c:	4bbe      	ldr	r3, [pc, #760]	; (8029518 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802921e:	681a      	ldr	r2, [r3, #0]
 8029220:	4bbe      	ldr	r3, [pc, #760]	; (802951c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8029222:	0951      	lsrs	r1, r2, #5
 8029224:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8029228:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802922c:	430b      	orrs	r3, r1
 802922e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8029232:	4313      	orrs	r3, r2
 8029234:	f8a8 3000 	strh.w	r3, [r8]
 8029238:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802923a:	441c      	add	r4, r3
 802923c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802923e:	441e      	add	r6, r3
 8029240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029242:	3b01      	subs	r3, #1
 8029244:	f108 0802 	add.w	r8, r8, #2
 8029248:	9309      	str	r3, [sp, #36]	; 0x24
 802924a:	e76c      	b.n	8029126 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802924c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802924e:	441c      	add	r4, r3
 8029250:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8029252:	3d01      	subs	r5, #1
 8029254:	441e      	add	r6, r3
 8029256:	f109 0902 	add.w	r9, r9, #2
 802925a:	e744      	b.n	80290e6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802925c:	d021      	beq.n	80292a2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802925e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8029260:	1e6b      	subs	r3, r5, #1
 8029262:	fb00 4003 	mla	r0, r0, r3, r4
 8029266:	1400      	asrs	r0, r0, #16
 8029268:	f53f af59 	bmi.w	802911e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802926c:	3901      	subs	r1, #1
 802926e:	4288      	cmp	r0, r1
 8029270:	f6bf af55 	bge.w	802911e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8029274:	9920      	ldr	r1, [sp, #128]	; 0x80
 8029276:	fb01 6303 	mla	r3, r1, r3, r6
 802927a:	141b      	asrs	r3, r3, #16
 802927c:	f53f af4f 	bmi.w	802911e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8029280:	3a01      	subs	r2, #1
 8029282:	4293      	cmp	r3, r2
 8029284:	f6bf af4b 	bge.w	802911e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8029288:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802928c:	9308      	str	r3, [sp, #32]
 802928e:	46a8      	mov	r8, r5
 8029290:	46ce      	mov	lr, r9
 8029292:	f1b8 0f00 	cmp.w	r8, #0
 8029296:	f300 80b5 	bgt.w	8029404 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 802929a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802929e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80292a2:	9b07      	ldr	r3, [sp, #28]
 80292a4:	2b00      	cmp	r3, #0
 80292a6:	f340 817d 	ble.w	80295a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 80292aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 80292ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80292b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80292b6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80292b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80292bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80292c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80292c4:	eef0 6a62 	vmov.f32	s13, s5
 80292c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80292cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80292d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80292d4:	ee16 4a90 	vmov	r4, s13
 80292d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80292dc:	eef0 6a43 	vmov.f32	s13, s6
 80292e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80292e4:	ee12 2a90 	vmov	r2, s5
 80292e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80292ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80292f0:	ee13 2a10 	vmov	r2, s6
 80292f4:	931f      	str	r3, [sp, #124]	; 0x7c
 80292f6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80292f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80292fc:	9320      	str	r3, [sp, #128]	; 0x80
 80292fe:	9b07      	ldr	r3, [sp, #28]
 8029300:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029302:	3b01      	subs	r3, #1
 8029304:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029308:	9307      	str	r3, [sp, #28]
 802930a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802930c:	ee16 6a90 	vmov	r6, s13
 8029310:	bf14      	ite	ne
 8029312:	461d      	movne	r5, r3
 8029314:	4615      	moveq	r5, r2
 8029316:	eeb0 3a67 	vmov.f32	s6, s15
 802931a:	eef0 2a47 	vmov.f32	s5, s14
 802931e:	e6d3      	b.n	80290c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8029320:	2900      	cmp	r1, #0
 8029322:	f43f af5c 	beq.w	80291de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8029326:	eb0a 0003 	add.w	r0, sl, r3
 802932a:	0843      	lsrs	r3, r0, #1
 802932c:	07c0      	lsls	r0, r0, #31
 802932e:	5cfb      	ldrb	r3, [r7, r3]
 8029330:	bf54      	ite	pl
 8029332:	f003 030f 	andpl.w	r3, r3, #15
 8029336:	111b      	asrmi	r3, r3, #4
 8029338:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802933c:	b2db      	uxtb	r3, r3
 802933e:	930a      	str	r3, [sp, #40]	; 0x28
 8029340:	e74d      	b.n	80291de <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8029342:	2b00      	cmp	r3, #0
 8029344:	f43f af78 	beq.w	8029238 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8029348:	4a73      	ldr	r2, [pc, #460]	; (8029518 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802934a:	f8b8 c000 	ldrh.w	ip, [r8]
 802934e:	6810      	ldr	r0, [r2, #0]
 8029350:	fa1f fe83 	uxth.w	lr, r3
 8029354:	ea4f 212c 	mov.w	r1, ip, asr #8
 8029358:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802935c:	43db      	mvns	r3, r3
 802935e:	b2db      	uxtb	r3, r3
 8029360:	fb12 f20e 	smulbb	r2, r2, lr
 8029364:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029368:	fb01 2103 	mla	r1, r1, r3, r2
 802936c:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8029370:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8029374:	b2c0      	uxtb	r0, r0
 8029376:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802937a:	fb1b fb0e 	smulbb	fp, fp, lr
 802937e:	b289      	uxth	r1, r1
 8029380:	fb10 fe0e 	smulbb	lr, r0, lr
 8029384:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8029388:	fa5f fc8c 	uxtb.w	ip, ip
 802938c:	fb02 b203 	mla	r2, r2, r3, fp
 8029390:	1c48      	adds	r0, r1, #1
 8029392:	fb0c e303 	mla	r3, ip, r3, lr
 8029396:	b292      	uxth	r2, r2
 8029398:	b29b      	uxth	r3, r3
 802939a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802939e:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 80293a2:	f102 0b01 	add.w	fp, r2, #1
 80293a6:	1c59      	adds	r1, r3, #1
 80293a8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80293ac:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80293b0:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80293b4:	0952      	lsrs	r2, r2, #5
 80293b6:	4301      	orrs	r1, r0
 80293b8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80293bc:	4311      	orrs	r1, r2
 80293be:	f8a8 1000 	strh.w	r1, [r8]
 80293c2:	e739      	b.n	8029238 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80293c4:	f113 0b01 	adds.w	fp, r3, #1
 80293c8:	f53f af36 	bmi.w	8029238 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80293cc:	45dc      	cmp	ip, fp
 80293ce:	f6ff af33 	blt.w	8029238 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80293d2:	f110 0b01 	adds.w	fp, r0, #1
 80293d6:	f53f af2f 	bmi.w	8029238 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80293da:	45de      	cmp	lr, fp
 80293dc:	f6ff af2c 	blt.w	8029238 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80293e0:	9a08      	ldr	r2, [sp, #32]
 80293e2:	9302      	str	r3, [sp, #8]
 80293e4:	fa0f f38e 	sxth.w	r3, lr
 80293e8:	9301      	str	r3, [sp, #4]
 80293ea:	fa0f f38c 	sxth.w	r3, ip
 80293ee:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80293f2:	9105      	str	r1, [sp, #20]
 80293f4:	9300      	str	r3, [sp, #0]
 80293f6:	463a      	mov	r2, r7
 80293f8:	4653      	mov	r3, sl
 80293fa:	4641      	mov	r1, r8
 80293fc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80293fe:	f7ff fd73 	bl	8028ee8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8029402:	e719      	b.n	8029238 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8029404:	9906      	ldr	r1, [sp, #24]
 8029406:	1422      	asrs	r2, r4, #16
 8029408:	1433      	asrs	r3, r6, #16
 802940a:	fb01 2303 	mla	r3, r1, r3, r2
 802940e:	085a      	lsrs	r2, r3, #1
 8029410:	07d9      	lsls	r1, r3, #31
 8029412:	5cba      	ldrb	r2, [r7, r2]
 8029414:	bf54      	ite	pl
 8029416:	f002 020f 	andpl.w	r2, r2, #15
 802941a:	1112      	asrmi	r2, r2, #4
 802941c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8029420:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8029424:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8029428:	b2d2      	uxtb	r2, r2
 802942a:	2800      	cmp	r0, #0
 802942c:	d062      	beq.n	80294f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 802942e:	f103 0a01 	add.w	sl, r3, #1
 8029432:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8029436:	f01a 0f01 	tst.w	sl, #1
 802943a:	5c79      	ldrb	r1, [r7, r1]
 802943c:	bf0c      	ite	eq
 802943e:	f001 010f 	andeq.w	r1, r1, #15
 8029442:	1109      	asrne	r1, r1, #4
 8029444:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029448:	b2c9      	uxtb	r1, r1
 802944a:	910f      	str	r1, [sp, #60]	; 0x3c
 802944c:	f1bc 0f00 	cmp.w	ip, #0
 8029450:	d019      	beq.n	8029486 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8029452:	9908      	ldr	r1, [sp, #32]
 8029454:	440b      	add	r3, r1
 8029456:	0859      	lsrs	r1, r3, #1
 8029458:	f013 0f01 	tst.w	r3, #1
 802945c:	5c79      	ldrb	r1, [r7, r1]
 802945e:	bf0c      	ite	eq
 8029460:	f001 010f 	andeq.w	r1, r1, #15
 8029464:	1109      	asrne	r1, r1, #4
 8029466:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802946a:	b2c9      	uxtb	r1, r1
 802946c:	3301      	adds	r3, #1
 802946e:	910b      	str	r1, [sp, #44]	; 0x2c
 8029470:	0859      	lsrs	r1, r3, #1
 8029472:	07db      	lsls	r3, r3, #31
 8029474:	5c79      	ldrb	r1, [r7, r1]
 8029476:	bf54      	ite	pl
 8029478:	f001 010f 	andpl.w	r1, r1, #15
 802947c:	1109      	asrmi	r1, r1, #4
 802947e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029482:	b2c9      	uxtb	r1, r1
 8029484:	9110      	str	r1, [sp, #64]	; 0x40
 8029486:	b280      	uxth	r0, r0
 8029488:	fa1f fc8c 	uxth.w	ip, ip
 802948c:	fb00 f30c 	mul.w	r3, r0, ip
 8029490:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8029494:	0100      	lsls	r0, r0, #4
 8029496:	fa1f fc8c 	uxth.w	ip, ip
 802949a:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802949e:	eba1 010c 	sub.w	r1, r1, ip
 80294a2:	fa1f fa81 	uxth.w	sl, r1
 80294a6:	1ac0      	subs	r0, r0, r3
 80294a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80294aa:	b280      	uxth	r0, r0
 80294ac:	4348      	muls	r0, r1
 80294ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80294b0:	fb02 020a 	mla	r2, r2, sl, r0
 80294b4:	fb0c 2c01 	mla	ip, ip, r1, r2
 80294b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80294ba:	fb03 c302 	mla	r3, r3, r2, ip
 80294be:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80294c2:	2bff      	cmp	r3, #255	; 0xff
 80294c4:	d12c      	bne.n	8029520 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 80294c6:	4b14      	ldr	r3, [pc, #80]	; (8029518 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80294c8:	681a      	ldr	r2, [r3, #0]
 80294ca:	4b14      	ldr	r3, [pc, #80]	; (802951c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 80294cc:	0951      	lsrs	r1, r2, #5
 80294ce:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 80294d2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80294d6:	430b      	orrs	r3, r1
 80294d8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80294dc:	4313      	orrs	r3, r2
 80294de:	f8ae 3000 	strh.w	r3, [lr]
 80294e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80294e4:	441c      	add	r4, r3
 80294e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80294e8:	f10e 0e02 	add.w	lr, lr, #2
 80294ec:	441e      	add	r6, r3
 80294ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80294f2:	e6ce      	b.n	8029292 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 80294f4:	f1bc 0f00 	cmp.w	ip, #0
 80294f8:	d0c5      	beq.n	8029486 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80294fa:	9908      	ldr	r1, [sp, #32]
 80294fc:	440b      	add	r3, r1
 80294fe:	0859      	lsrs	r1, r3, #1
 8029500:	07db      	lsls	r3, r3, #31
 8029502:	5c79      	ldrb	r1, [r7, r1]
 8029504:	bf54      	ite	pl
 8029506:	f001 010f 	andpl.w	r1, r1, #15
 802950a:	1109      	asrmi	r1, r1, #4
 802950c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029510:	b2c9      	uxtb	r1, r1
 8029512:	910b      	str	r1, [sp, #44]	; 0x2c
 8029514:	e7b7      	b.n	8029486 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8029516:	bf00      	nop
 8029518:	20008e38 	.word	0x20008e38
 802951c:	fffff800 	.word	0xfffff800
 8029520:	2b00      	cmp	r3, #0
 8029522:	d0de      	beq.n	80294e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8029524:	4a21      	ldr	r2, [pc, #132]	; (80295ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 8029526:	f8be c000 	ldrh.w	ip, [lr]
 802952a:	6810      	ldr	r0, [r2, #0]
 802952c:	fa1f fa83 	uxth.w	sl, r3
 8029530:	ea4f 212c 	mov.w	r1, ip, asr #8
 8029534:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8029538:	43db      	mvns	r3, r3
 802953a:	b2db      	uxtb	r3, r3
 802953c:	fb12 f20a 	smulbb	r2, r2, sl
 8029540:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8029544:	fb01 2103 	mla	r1, r1, r3, r2
 8029548:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802954c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8029550:	b2c0      	uxtb	r0, r0
 8029552:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8029556:	fa5f fc8c 	uxtb.w	ip, ip
 802955a:	fb10 f00a 	smulbb	r0, r0, sl
 802955e:	fb0c 0003 	mla	r0, ip, r3, r0
 8029562:	b289      	uxth	r1, r1
 8029564:	fb1b fb0a 	smulbb	fp, fp, sl
 8029568:	b280      	uxth	r0, r0
 802956a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802956e:	fb02 b203 	mla	r2, r2, r3, fp
 8029572:	1c4b      	adds	r3, r1, #1
 8029574:	f100 0b01 	add.w	fp, r0, #1
 8029578:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802957c:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8029580:	b292      	uxth	r2, r2
 8029582:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8029586:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802958a:	ea4b 0101 	orr.w	r1, fp, r1
 802958e:	f102 0b01 	add.w	fp, r2, #1
 8029592:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8029596:	0952      	lsrs	r2, r2, #5
 8029598:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802959c:	4311      	orrs	r1, r2
 802959e:	f8ae 1000 	strh.w	r1, [lr]
 80295a2:	e79e      	b.n	80294e2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 80295a4:	b013      	add	sp, #76	; 0x4c
 80295a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80295aa:	bf00      	nop
 80295ac:	20008e38 	.word	0x20008e38

080295b0 <CRC_Lock>:
 80295b0:	b530      	push	{r4, r5, lr}
 80295b2:	4a20      	ldr	r2, [pc, #128]	; (8029634 <CRC_Lock+0x84>)
 80295b4:	6813      	ldr	r3, [r2, #0]
 80295b6:	f023 0301 	bic.w	r3, r3, #1
 80295ba:	6013      	str	r3, [r2, #0]
 80295bc:	4b1e      	ldr	r3, [pc, #120]	; (8029638 <CRC_Lock+0x88>)
 80295be:	681a      	ldr	r2, [r3, #0]
 80295c0:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80295c4:	4022      	ands	r2, r4
 80295c6:	f24c 2540 	movw	r5, #49728	; 0xc240
 80295ca:	42aa      	cmp	r2, r5
 80295cc:	d005      	beq.n	80295da <CRC_Lock+0x2a>
 80295ce:	681b      	ldr	r3, [r3, #0]
 80295d0:	f24c 2270 	movw	r2, #49776	; 0xc270
 80295d4:	4023      	ands	r3, r4
 80295d6:	4293      	cmp	r3, r2
 80295d8:	d124      	bne.n	8029624 <CRC_Lock+0x74>
 80295da:	4b18      	ldr	r3, [pc, #96]	; (802963c <CRC_Lock+0x8c>)
 80295dc:	681b      	ldr	r3, [r3, #0]
 80295de:	bb0b      	cbnz	r3, 8029624 <CRC_Lock+0x74>
 80295e0:	4b17      	ldr	r3, [pc, #92]	; (8029640 <CRC_Lock+0x90>)
 80295e2:	681a      	ldr	r2, [r3, #0]
 80295e4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80295e8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80295ec:	d00d      	beq.n	802960a <CRC_Lock+0x5a>
 80295ee:	681a      	ldr	r2, [r3, #0]
 80295f0:	f240 4483 	movw	r4, #1155	; 0x483
 80295f4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80295f8:	42a2      	cmp	r2, r4
 80295fa:	d006      	beq.n	802960a <CRC_Lock+0x5a>
 80295fc:	681b      	ldr	r3, [r3, #0]
 80295fe:	f240 4285 	movw	r2, #1157	; 0x485
 8029602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8029606:	4293      	cmp	r3, r2
 8029608:	d10c      	bne.n	8029624 <CRC_Lock+0x74>
 802960a:	4b0e      	ldr	r3, [pc, #56]	; (8029644 <CRC_Lock+0x94>)
 802960c:	2201      	movs	r2, #1
 802960e:	601a      	str	r2, [r3, #0]
 8029610:	681a      	ldr	r2, [r3, #0]
 8029612:	2a00      	cmp	r2, #0
 8029614:	d1fc      	bne.n	8029610 <CRC_Lock+0x60>
 8029616:	4b0c      	ldr	r3, [pc, #48]	; (8029648 <CRC_Lock+0x98>)
 8029618:	6018      	str	r0, [r3, #0]
 802961a:	6818      	ldr	r0, [r3, #0]
 802961c:	1a43      	subs	r3, r0, r1
 802961e:	4258      	negs	r0, r3
 8029620:	4158      	adcs	r0, r3
 8029622:	bd30      	pop	{r4, r5, pc}
 8029624:	4b09      	ldr	r3, [pc, #36]	; (802964c <CRC_Lock+0x9c>)
 8029626:	2201      	movs	r2, #1
 8029628:	601a      	str	r2, [r3, #0]
 802962a:	681a      	ldr	r2, [r3, #0]
 802962c:	2a00      	cmp	r2, #0
 802962e:	d1fc      	bne.n	802962a <CRC_Lock+0x7a>
 8029630:	4b07      	ldr	r3, [pc, #28]	; (8029650 <CRC_Lock+0xa0>)
 8029632:	e7f1      	b.n	8029618 <CRC_Lock+0x68>
 8029634:	e0002000 	.word	0xe0002000
 8029638:	e000ed00 	.word	0xe000ed00
 802963c:	e0042000 	.word	0xe0042000
 8029640:	5c001000 	.word	0x5c001000
 8029644:	58024c08 	.word	0x58024c08
 8029648:	58024c00 	.word	0x58024c00
 802964c:	40023008 	.word	0x40023008
 8029650:	40023000 	.word	0x40023000

08029654 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8029654:	6101      	str	r1, [r0, #16]
 8029656:	4770      	bx	lr

08029658 <_ZN8touchgfx8Gestures4tickEv>:
 8029658:	7b83      	ldrb	r3, [r0, #14]
 802965a:	b14b      	cbz	r3, 8029670 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802965c:	8903      	ldrh	r3, [r0, #8]
 802965e:	3301      	adds	r3, #1
 8029660:	b29b      	uxth	r3, r3
 8029662:	2b07      	cmp	r3, #7
 8029664:	8103      	strh	r3, [r0, #8]
 8029666:	bf81      	itttt	hi
 8029668:	2300      	movhi	r3, #0
 802966a:	8143      	strhhi	r3, [r0, #10]
 802966c:	8183      	strhhi	r3, [r0, #12]
 802966e:	7383      	strbhi	r3, [r0, #14]
 8029670:	4770      	bx	lr
	...

08029674 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8029674:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8029678:	4698      	mov	r8, r3
 802967a:	8883      	ldrh	r3, [r0, #4]
 802967c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8029680:	eba8 0303 	sub.w	r3, r8, r3
 8029684:	b21b      	sxth	r3, r3
 8029686:	4604      	mov	r4, r0
 8029688:	2b00      	cmp	r3, #0
 802968a:	4617      	mov	r7, r2
 802968c:	4a18      	ldr	r2, [pc, #96]	; (80296f0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802968e:	9200      	str	r2, [sp, #0]
 8029690:	bfb8      	it	lt
 8029692:	425b      	neglt	r3, r3
 8029694:	8aa2      	ldrh	r2, [r4, #20]
 8029696:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802969a:	f8ad 800a 	strh.w	r8, [sp, #10]
 802969e:	b21b      	sxth	r3, r3
 80296a0:	460e      	mov	r6, r1
 80296a2:	4293      	cmp	r3, r2
 80296a4:	88c1      	ldrh	r1, [r0, #6]
 80296a6:	f8ad 1008 	strh.w	r1, [sp, #8]
 80296aa:	f04f 0000 	mov.w	r0, #0
 80296ae:	f88d 0004 	strb.w	r0, [sp, #4]
 80296b2:	f8ad 500c 	strh.w	r5, [sp, #12]
 80296b6:	dc07      	bgt.n	80296c8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 80296b8:	1a69      	subs	r1, r5, r1
 80296ba:	b209      	sxth	r1, r1
 80296bc:	2900      	cmp	r1, #0
 80296be:	bfb8      	it	lt
 80296c0:	4249      	neglt	r1, r1
 80296c2:	b209      	sxth	r1, r1
 80296c4:	428a      	cmp	r2, r1
 80296c6:	da10      	bge.n	80296ea <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 80296c8:	6920      	ldr	r0, [r4, #16]
 80296ca:	6803      	ldr	r3, [r0, #0]
 80296cc:	4669      	mov	r1, sp
 80296ce:	685b      	ldr	r3, [r3, #4]
 80296d0:	4798      	blx	r3
 80296d2:	eba8 0606 	sub.w	r6, r8, r6
 80296d6:	2300      	movs	r3, #0
 80296d8:	1bef      	subs	r7, r5, r7
 80296da:	2001      	movs	r0, #1
 80296dc:	8123      	strh	r3, [r4, #8]
 80296de:	8166      	strh	r6, [r4, #10]
 80296e0:	81a7      	strh	r7, [r4, #12]
 80296e2:	f8a4 8004 	strh.w	r8, [r4, #4]
 80296e6:	80e5      	strh	r5, [r4, #6]
 80296e8:	73a0      	strb	r0, [r4, #14]
 80296ea:	b004      	add	sp, #16
 80296ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80296f0:	0802cc68 	.word	0x0802cc68

080296f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80296f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80296f6:	461e      	mov	r6, r3
 80296f8:	1e4b      	subs	r3, r1, #1
 80296fa:	2b01      	cmp	r3, #1
 80296fc:	b085      	sub	sp, #20
 80296fe:	4604      	mov	r4, r0
 8029700:	460d      	mov	r5, r1
 8029702:	4617      	mov	r7, r2
 8029704:	d84b      	bhi.n	802979e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8029706:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802970a:	1cd3      	adds	r3, r2, #3
 802970c:	b29b      	uxth	r3, r3
 802970e:	2b06      	cmp	r3, #6
 8029710:	d916      	bls.n	8029740 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8029712:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80297b4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029716:	f8cd c004 	str.w	ip, [sp, #4]
 802971a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802971e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029722:	6900      	ldr	r0, [r0, #16]
 8029724:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029728:	f04f 0c00 	mov.w	ip, #0
 802972c:	f88d c008 	strb.w	ip, [sp, #8]
 8029730:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029734:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029738:	6803      	ldr	r3, [r0, #0]
 802973a:	a901      	add	r1, sp, #4
 802973c:	689b      	ldr	r3, [r3, #8]
 802973e:	4798      	blx	r3
 8029740:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029744:	1cd3      	adds	r3, r2, #3
 8029746:	b29b      	uxth	r3, r3
 8029748:	2b06      	cmp	r3, #6
 802974a:	d916      	bls.n	802977a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802974c:	f8df c064 	ldr.w	ip, [pc, #100]	; 80297b4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029750:	f8cd c004 	str.w	ip, [sp, #4]
 8029754:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029758:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802975c:	6920      	ldr	r0, [r4, #16]
 802975e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029762:	f04f 0c01 	mov.w	ip, #1
 8029766:	f88d c008 	strb.w	ip, [sp, #8]
 802976a:	f8ad 200a 	strh.w	r2, [sp, #10]
 802976e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029772:	6803      	ldr	r3, [r0, #0]
 8029774:	a901      	add	r1, sp, #4
 8029776:	689b      	ldr	r3, [r3, #8]
 8029778:	4798      	blx	r3
 802977a:	4b0d      	ldr	r3, [pc, #52]	; (80297b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802977c:	9301      	str	r3, [sp, #4]
 802977e:	6920      	ldr	r0, [r4, #16]
 8029780:	f88d 5008 	strb.w	r5, [sp, #8]
 8029784:	2300      	movs	r3, #0
 8029786:	f8ad 700a 	strh.w	r7, [sp, #10]
 802978a:	f8ad 600c 	strh.w	r6, [sp, #12]
 802978e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029792:	6803      	ldr	r3, [r0, #0]
 8029794:	a901      	add	r1, sp, #4
 8029796:	681b      	ldr	r3, [r3, #0]
 8029798:	4798      	blx	r3
 802979a:	b005      	add	sp, #20
 802979c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802979e:	2900      	cmp	r1, #0
 80297a0:	d1eb      	bne.n	802977a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80297a2:	80a2      	strh	r2, [r4, #4]
 80297a4:	80c6      	strh	r6, [r0, #6]
 80297a6:	60a1      	str	r1, [r4, #8]
 80297a8:	81a1      	strh	r1, [r4, #12]
 80297aa:	73a1      	strb	r1, [r4, #14]
 80297ac:	e7e5      	b.n	802977a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80297ae:	bf00      	nop
 80297b0:	0802cc54 	.word	0x0802cc54
 80297b4:	0802cc7c 	.word	0x0802cc7c

080297b8 <__aeabi_atexit>:
 80297b8:	460b      	mov	r3, r1
 80297ba:	4601      	mov	r1, r0
 80297bc:	4618      	mov	r0, r3
 80297be:	f000 b853 	b.w	8029868 <__cxa_atexit>

080297c2 <_ZdlPvj>:
 80297c2:	f000 b812 	b.w	80297ea <_ZdlPv>

080297c6 <__cxa_guard_acquire>:
 80297c6:	6803      	ldr	r3, [r0, #0]
 80297c8:	07db      	lsls	r3, r3, #31
 80297ca:	d406      	bmi.n	80297da <__cxa_guard_acquire+0x14>
 80297cc:	7843      	ldrb	r3, [r0, #1]
 80297ce:	b103      	cbz	r3, 80297d2 <__cxa_guard_acquire+0xc>
 80297d0:	deff      	udf	#255	; 0xff
 80297d2:	2301      	movs	r3, #1
 80297d4:	7043      	strb	r3, [r0, #1]
 80297d6:	4618      	mov	r0, r3
 80297d8:	4770      	bx	lr
 80297da:	2000      	movs	r0, #0
 80297dc:	4770      	bx	lr

080297de <__cxa_guard_release>:
 80297de:	2301      	movs	r3, #1
 80297e0:	6003      	str	r3, [r0, #0]
 80297e2:	4770      	bx	lr

080297e4 <__cxa_pure_virtual>:
 80297e4:	b508      	push	{r3, lr}
 80297e6:	f000 f80f 	bl	8029808 <_ZSt9terminatev>

080297ea <_ZdlPv>:
 80297ea:	f000 b983 	b.w	8029af4 <free>

080297ee <_ZN10__cxxabiv111__terminateEPFvvE>:
 80297ee:	b508      	push	{r3, lr}
 80297f0:	4780      	blx	r0
 80297f2:	f000 f80e 	bl	8029812 <abort>
	...

080297f8 <_ZSt13get_terminatev>:
 80297f8:	4b02      	ldr	r3, [pc, #8]	; (8029804 <_ZSt13get_terminatev+0xc>)
 80297fa:	6818      	ldr	r0, [r3, #0]
 80297fc:	f3bf 8f5b 	dmb	ish
 8029800:	4770      	bx	lr
 8029802:	bf00      	nop
 8029804:	20000094 	.word	0x20000094

08029808 <_ZSt9terminatev>:
 8029808:	b508      	push	{r3, lr}
 802980a:	f7ff fff5 	bl	80297f8 <_ZSt13get_terminatev>
 802980e:	f7ff ffee 	bl	80297ee <_ZN10__cxxabiv111__terminateEPFvvE>

08029812 <abort>:
 8029812:	b508      	push	{r3, lr}
 8029814:	2006      	movs	r0, #6
 8029816:	f000 fdfb 	bl	802a410 <raise>
 802981a:	2001      	movs	r0, #1
 802981c:	f001 f964 	bl	802aae8 <_exit>

08029820 <__assert_func>:
 8029820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8029822:	4614      	mov	r4, r2
 8029824:	461a      	mov	r2, r3
 8029826:	4b09      	ldr	r3, [pc, #36]	; (802984c <__assert_func+0x2c>)
 8029828:	681b      	ldr	r3, [r3, #0]
 802982a:	4605      	mov	r5, r0
 802982c:	68d8      	ldr	r0, [r3, #12]
 802982e:	b14c      	cbz	r4, 8029844 <__assert_func+0x24>
 8029830:	4b07      	ldr	r3, [pc, #28]	; (8029850 <__assert_func+0x30>)
 8029832:	9100      	str	r1, [sp, #0]
 8029834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8029838:	4906      	ldr	r1, [pc, #24]	; (8029854 <__assert_func+0x34>)
 802983a:	462b      	mov	r3, r5
 802983c:	f000 f8f8 	bl	8029a30 <fiprintf>
 8029840:	f7ff ffe7 	bl	8029812 <abort>
 8029844:	4b04      	ldr	r3, [pc, #16]	; (8029858 <__assert_func+0x38>)
 8029846:	461c      	mov	r4, r3
 8029848:	e7f3      	b.n	8029832 <__assert_func+0x12>
 802984a:	bf00      	nop
 802984c:	20000098 	.word	0x20000098
 8029850:	0802cf44 	.word	0x0802cf44
 8029854:	0802cf51 	.word	0x0802cf51
 8029858:	0802cf7f 	.word	0x0802cf7f

0802985c <atexit>:
 802985c:	2300      	movs	r3, #0
 802985e:	4601      	mov	r1, r0
 8029860:	461a      	mov	r2, r3
 8029862:	4618      	mov	r0, r3
 8029864:	f000 bf06 	b.w	802a674 <__register_exitproc>

08029868 <__cxa_atexit>:
 8029868:	b510      	push	{r4, lr}
 802986a:	4c05      	ldr	r4, [pc, #20]	; (8029880 <__cxa_atexit+0x18>)
 802986c:	4613      	mov	r3, r2
 802986e:	b12c      	cbz	r4, 802987c <__cxa_atexit+0x14>
 8029870:	460a      	mov	r2, r1
 8029872:	4601      	mov	r1, r0
 8029874:	2002      	movs	r0, #2
 8029876:	f000 fefd 	bl	802a674 <__register_exitproc>
 802987a:	bd10      	pop	{r4, pc}
 802987c:	4620      	mov	r0, r4
 802987e:	e7fc      	b.n	802987a <__cxa_atexit+0x12>
 8029880:	0802a675 	.word	0x0802a675

08029884 <std>:
 8029884:	2300      	movs	r3, #0
 8029886:	b510      	push	{r4, lr}
 8029888:	4604      	mov	r4, r0
 802988a:	e9c0 3300 	strd	r3, r3, [r0]
 802988e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8029892:	6083      	str	r3, [r0, #8]
 8029894:	8181      	strh	r1, [r0, #12]
 8029896:	6643      	str	r3, [r0, #100]	; 0x64
 8029898:	81c2      	strh	r2, [r0, #14]
 802989a:	6183      	str	r3, [r0, #24]
 802989c:	4619      	mov	r1, r3
 802989e:	2208      	movs	r2, #8
 80298a0:	305c      	adds	r0, #92	; 0x5c
 80298a2:	f000 f93d 	bl	8029b20 <memset>
 80298a6:	4b05      	ldr	r3, [pc, #20]	; (80298bc <std+0x38>)
 80298a8:	6263      	str	r3, [r4, #36]	; 0x24
 80298aa:	4b05      	ldr	r3, [pc, #20]	; (80298c0 <std+0x3c>)
 80298ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80298ae:	4b05      	ldr	r3, [pc, #20]	; (80298c4 <std+0x40>)
 80298b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80298b2:	4b05      	ldr	r3, [pc, #20]	; (80298c8 <std+0x44>)
 80298b4:	6224      	str	r4, [r4, #32]
 80298b6:	6323      	str	r3, [r4, #48]	; 0x30
 80298b8:	bd10      	pop	{r4, pc}
 80298ba:	bf00      	nop
 80298bc:	0802a449 	.word	0x0802a449
 80298c0:	0802a46b 	.word	0x0802a46b
 80298c4:	0802a4a3 	.word	0x0802a4a3
 80298c8:	0802a4c7 	.word	0x0802a4c7

080298cc <_cleanup_r>:
 80298cc:	4901      	ldr	r1, [pc, #4]	; (80298d4 <_cleanup_r+0x8>)
 80298ce:	f000 b8c1 	b.w	8029a54 <_fwalk_reent>
 80298d2:	bf00      	nop
 80298d4:	0802a865 	.word	0x0802a865

080298d8 <__sfmoreglue>:
 80298d8:	b570      	push	{r4, r5, r6, lr}
 80298da:	2268      	movs	r2, #104	; 0x68
 80298dc:	1e4d      	subs	r5, r1, #1
 80298de:	4355      	muls	r5, r2
 80298e0:	460e      	mov	r6, r1
 80298e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80298e6:	f000 f98f 	bl	8029c08 <_malloc_r>
 80298ea:	4604      	mov	r4, r0
 80298ec:	b140      	cbz	r0, 8029900 <__sfmoreglue+0x28>
 80298ee:	2100      	movs	r1, #0
 80298f0:	e9c0 1600 	strd	r1, r6, [r0]
 80298f4:	300c      	adds	r0, #12
 80298f6:	60a0      	str	r0, [r4, #8]
 80298f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80298fc:	f000 f910 	bl	8029b20 <memset>
 8029900:	4620      	mov	r0, r4
 8029902:	bd70      	pop	{r4, r5, r6, pc}

08029904 <__sfp_lock_acquire>:
 8029904:	4801      	ldr	r0, [pc, #4]	; (802990c <__sfp_lock_acquire+0x8>)
 8029906:	f000 b8ea 	b.w	8029ade <__retarget_lock_acquire_recursive>
 802990a:	bf00      	nop
 802990c:	20008f2e 	.word	0x20008f2e

08029910 <__sfp_lock_release>:
 8029910:	4801      	ldr	r0, [pc, #4]	; (8029918 <__sfp_lock_release+0x8>)
 8029912:	f000 b8e6 	b.w	8029ae2 <__retarget_lock_release_recursive>
 8029916:	bf00      	nop
 8029918:	20008f2e 	.word	0x20008f2e

0802991c <__sinit_lock_acquire>:
 802991c:	4801      	ldr	r0, [pc, #4]	; (8029924 <__sinit_lock_acquire+0x8>)
 802991e:	f000 b8de 	b.w	8029ade <__retarget_lock_acquire_recursive>
 8029922:	bf00      	nop
 8029924:	20008f2f 	.word	0x20008f2f

08029928 <__sinit_lock_release>:
 8029928:	4801      	ldr	r0, [pc, #4]	; (8029930 <__sinit_lock_release+0x8>)
 802992a:	f000 b8da 	b.w	8029ae2 <__retarget_lock_release_recursive>
 802992e:	bf00      	nop
 8029930:	20008f2f 	.word	0x20008f2f

08029934 <__sinit>:
 8029934:	b510      	push	{r4, lr}
 8029936:	4604      	mov	r4, r0
 8029938:	f7ff fff0 	bl	802991c <__sinit_lock_acquire>
 802993c:	69a3      	ldr	r3, [r4, #24]
 802993e:	b11b      	cbz	r3, 8029948 <__sinit+0x14>
 8029940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029944:	f7ff bff0 	b.w	8029928 <__sinit_lock_release>
 8029948:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802994c:	6523      	str	r3, [r4, #80]	; 0x50
 802994e:	4b13      	ldr	r3, [pc, #76]	; (802999c <__sinit+0x68>)
 8029950:	4a13      	ldr	r2, [pc, #76]	; (80299a0 <__sinit+0x6c>)
 8029952:	681b      	ldr	r3, [r3, #0]
 8029954:	62a2      	str	r2, [r4, #40]	; 0x28
 8029956:	42a3      	cmp	r3, r4
 8029958:	bf04      	itt	eq
 802995a:	2301      	moveq	r3, #1
 802995c:	61a3      	streq	r3, [r4, #24]
 802995e:	4620      	mov	r0, r4
 8029960:	f000 f820 	bl	80299a4 <__sfp>
 8029964:	6060      	str	r0, [r4, #4]
 8029966:	4620      	mov	r0, r4
 8029968:	f000 f81c 	bl	80299a4 <__sfp>
 802996c:	60a0      	str	r0, [r4, #8]
 802996e:	4620      	mov	r0, r4
 8029970:	f000 f818 	bl	80299a4 <__sfp>
 8029974:	2200      	movs	r2, #0
 8029976:	60e0      	str	r0, [r4, #12]
 8029978:	2104      	movs	r1, #4
 802997a:	6860      	ldr	r0, [r4, #4]
 802997c:	f7ff ff82 	bl	8029884 <std>
 8029980:	68a0      	ldr	r0, [r4, #8]
 8029982:	2201      	movs	r2, #1
 8029984:	2109      	movs	r1, #9
 8029986:	f7ff ff7d 	bl	8029884 <std>
 802998a:	68e0      	ldr	r0, [r4, #12]
 802998c:	2202      	movs	r2, #2
 802998e:	2112      	movs	r1, #18
 8029990:	f7ff ff78 	bl	8029884 <std>
 8029994:	2301      	movs	r3, #1
 8029996:	61a3      	str	r3, [r4, #24]
 8029998:	e7d2      	b.n	8029940 <__sinit+0xc>
 802999a:	bf00      	nop
 802999c:	0802cfe0 	.word	0x0802cfe0
 80299a0:	080298cd 	.word	0x080298cd

080299a4 <__sfp>:
 80299a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80299a6:	4607      	mov	r7, r0
 80299a8:	f7ff ffac 	bl	8029904 <__sfp_lock_acquire>
 80299ac:	4b1e      	ldr	r3, [pc, #120]	; (8029a28 <__sfp+0x84>)
 80299ae:	681e      	ldr	r6, [r3, #0]
 80299b0:	69b3      	ldr	r3, [r6, #24]
 80299b2:	b913      	cbnz	r3, 80299ba <__sfp+0x16>
 80299b4:	4630      	mov	r0, r6
 80299b6:	f7ff ffbd 	bl	8029934 <__sinit>
 80299ba:	3648      	adds	r6, #72	; 0x48
 80299bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80299c0:	3b01      	subs	r3, #1
 80299c2:	d503      	bpl.n	80299cc <__sfp+0x28>
 80299c4:	6833      	ldr	r3, [r6, #0]
 80299c6:	b30b      	cbz	r3, 8029a0c <__sfp+0x68>
 80299c8:	6836      	ldr	r6, [r6, #0]
 80299ca:	e7f7      	b.n	80299bc <__sfp+0x18>
 80299cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80299d0:	b9d5      	cbnz	r5, 8029a08 <__sfp+0x64>
 80299d2:	4b16      	ldr	r3, [pc, #88]	; (8029a2c <__sfp+0x88>)
 80299d4:	60e3      	str	r3, [r4, #12]
 80299d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80299da:	6665      	str	r5, [r4, #100]	; 0x64
 80299dc:	f000 f87e 	bl	8029adc <__retarget_lock_init_recursive>
 80299e0:	f7ff ff96 	bl	8029910 <__sfp_lock_release>
 80299e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80299e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80299ec:	6025      	str	r5, [r4, #0]
 80299ee:	61a5      	str	r5, [r4, #24]
 80299f0:	2208      	movs	r2, #8
 80299f2:	4629      	mov	r1, r5
 80299f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80299f8:	f000 f892 	bl	8029b20 <memset>
 80299fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8029a00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8029a04:	4620      	mov	r0, r4
 8029a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8029a08:	3468      	adds	r4, #104	; 0x68
 8029a0a:	e7d9      	b.n	80299c0 <__sfp+0x1c>
 8029a0c:	2104      	movs	r1, #4
 8029a0e:	4638      	mov	r0, r7
 8029a10:	f7ff ff62 	bl	80298d8 <__sfmoreglue>
 8029a14:	4604      	mov	r4, r0
 8029a16:	6030      	str	r0, [r6, #0]
 8029a18:	2800      	cmp	r0, #0
 8029a1a:	d1d5      	bne.n	80299c8 <__sfp+0x24>
 8029a1c:	f7ff ff78 	bl	8029910 <__sfp_lock_release>
 8029a20:	230c      	movs	r3, #12
 8029a22:	603b      	str	r3, [r7, #0]
 8029a24:	e7ee      	b.n	8029a04 <__sfp+0x60>
 8029a26:	bf00      	nop
 8029a28:	0802cfe0 	.word	0x0802cfe0
 8029a2c:	ffff0001 	.word	0xffff0001

08029a30 <fiprintf>:
 8029a30:	b40e      	push	{r1, r2, r3}
 8029a32:	b503      	push	{r0, r1, lr}
 8029a34:	4601      	mov	r1, r0
 8029a36:	ab03      	add	r3, sp, #12
 8029a38:	4805      	ldr	r0, [pc, #20]	; (8029a50 <fiprintf+0x20>)
 8029a3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8029a3e:	6800      	ldr	r0, [r0, #0]
 8029a40:	9301      	str	r3, [sp, #4]
 8029a42:	f000 f97f 	bl	8029d44 <_vfiprintf_r>
 8029a46:	b002      	add	sp, #8
 8029a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8029a4c:	b003      	add	sp, #12
 8029a4e:	4770      	bx	lr
 8029a50:	20000098 	.word	0x20000098

08029a54 <_fwalk_reent>:
 8029a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029a58:	4606      	mov	r6, r0
 8029a5a:	4688      	mov	r8, r1
 8029a5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8029a60:	2700      	movs	r7, #0
 8029a62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8029a66:	f1b9 0901 	subs.w	r9, r9, #1
 8029a6a:	d505      	bpl.n	8029a78 <_fwalk_reent+0x24>
 8029a6c:	6824      	ldr	r4, [r4, #0]
 8029a6e:	2c00      	cmp	r4, #0
 8029a70:	d1f7      	bne.n	8029a62 <_fwalk_reent+0xe>
 8029a72:	4638      	mov	r0, r7
 8029a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8029a78:	89ab      	ldrh	r3, [r5, #12]
 8029a7a:	2b01      	cmp	r3, #1
 8029a7c:	d907      	bls.n	8029a8e <_fwalk_reent+0x3a>
 8029a7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8029a82:	3301      	adds	r3, #1
 8029a84:	d003      	beq.n	8029a8e <_fwalk_reent+0x3a>
 8029a86:	4629      	mov	r1, r5
 8029a88:	4630      	mov	r0, r6
 8029a8a:	47c0      	blx	r8
 8029a8c:	4307      	orrs	r7, r0
 8029a8e:	3568      	adds	r5, #104	; 0x68
 8029a90:	e7e9      	b.n	8029a66 <_fwalk_reent+0x12>
	...

08029a94 <__libc_init_array>:
 8029a94:	b570      	push	{r4, r5, r6, lr}
 8029a96:	4d0d      	ldr	r5, [pc, #52]	; (8029acc <__libc_init_array+0x38>)
 8029a98:	4c0d      	ldr	r4, [pc, #52]	; (8029ad0 <__libc_init_array+0x3c>)
 8029a9a:	1b64      	subs	r4, r4, r5
 8029a9c:	10a4      	asrs	r4, r4, #2
 8029a9e:	2600      	movs	r6, #0
 8029aa0:	42a6      	cmp	r6, r4
 8029aa2:	d109      	bne.n	8029ab8 <__libc_init_array+0x24>
 8029aa4:	4d0b      	ldr	r5, [pc, #44]	; (8029ad4 <__libc_init_array+0x40>)
 8029aa6:	4c0c      	ldr	r4, [pc, #48]	; (8029ad8 <__libc_init_array+0x44>)
 8029aa8:	f001 f820 	bl	802aaec <_init>
 8029aac:	1b64      	subs	r4, r4, r5
 8029aae:	10a4      	asrs	r4, r4, #2
 8029ab0:	2600      	movs	r6, #0
 8029ab2:	42a6      	cmp	r6, r4
 8029ab4:	d105      	bne.n	8029ac2 <__libc_init_array+0x2e>
 8029ab6:	bd70      	pop	{r4, r5, r6, pc}
 8029ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8029abc:	4798      	blx	r3
 8029abe:	3601      	adds	r6, #1
 8029ac0:	e7ee      	b.n	8029aa0 <__libc_init_array+0xc>
 8029ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8029ac6:	4798      	blx	r3
 8029ac8:	3601      	adds	r6, #1
 8029aca:	e7f2      	b.n	8029ab2 <__libc_init_array+0x1e>
 8029acc:	0804a744 	.word	0x0804a744
 8029ad0:	0804a744 	.word	0x0804a744
 8029ad4:	0804a744 	.word	0x0804a744
 8029ad8:	0804a758 	.word	0x0804a758

08029adc <__retarget_lock_init_recursive>:
 8029adc:	4770      	bx	lr

08029ade <__retarget_lock_acquire_recursive>:
 8029ade:	4770      	bx	lr

08029ae0 <__retarget_lock_release>:
 8029ae0:	4770      	bx	lr

08029ae2 <__retarget_lock_release_recursive>:
 8029ae2:	4770      	bx	lr

08029ae4 <malloc>:
 8029ae4:	4b02      	ldr	r3, [pc, #8]	; (8029af0 <malloc+0xc>)
 8029ae6:	4601      	mov	r1, r0
 8029ae8:	6818      	ldr	r0, [r3, #0]
 8029aea:	f000 b88d 	b.w	8029c08 <_malloc_r>
 8029aee:	bf00      	nop
 8029af0:	20000098 	.word	0x20000098

08029af4 <free>:
 8029af4:	4b02      	ldr	r3, [pc, #8]	; (8029b00 <free+0xc>)
 8029af6:	4601      	mov	r1, r0
 8029af8:	6818      	ldr	r0, [r3, #0]
 8029afa:	f000 b819 	b.w	8029b30 <_free_r>
 8029afe:	bf00      	nop
 8029b00:	20000098 	.word	0x20000098

08029b04 <memcpy>:
 8029b04:	440a      	add	r2, r1
 8029b06:	4291      	cmp	r1, r2
 8029b08:	f100 33ff 	add.w	r3, r0, #4294967295
 8029b0c:	d100      	bne.n	8029b10 <memcpy+0xc>
 8029b0e:	4770      	bx	lr
 8029b10:	b510      	push	{r4, lr}
 8029b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029b16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029b1a:	4291      	cmp	r1, r2
 8029b1c:	d1f9      	bne.n	8029b12 <memcpy+0xe>
 8029b1e:	bd10      	pop	{r4, pc}

08029b20 <memset>:
 8029b20:	4402      	add	r2, r0
 8029b22:	4603      	mov	r3, r0
 8029b24:	4293      	cmp	r3, r2
 8029b26:	d100      	bne.n	8029b2a <memset+0xa>
 8029b28:	4770      	bx	lr
 8029b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8029b2e:	e7f9      	b.n	8029b24 <memset+0x4>

08029b30 <_free_r>:
 8029b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029b32:	2900      	cmp	r1, #0
 8029b34:	d044      	beq.n	8029bc0 <_free_r+0x90>
 8029b36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8029b3a:	9001      	str	r0, [sp, #4]
 8029b3c:	2b00      	cmp	r3, #0
 8029b3e:	f1a1 0404 	sub.w	r4, r1, #4
 8029b42:	bfb8      	it	lt
 8029b44:	18e4      	addlt	r4, r4, r3
 8029b46:	f000 ff41 	bl	802a9cc <__malloc_lock>
 8029b4a:	4a1e      	ldr	r2, [pc, #120]	; (8029bc4 <_free_r+0x94>)
 8029b4c:	9801      	ldr	r0, [sp, #4]
 8029b4e:	6813      	ldr	r3, [r2, #0]
 8029b50:	b933      	cbnz	r3, 8029b60 <_free_r+0x30>
 8029b52:	6063      	str	r3, [r4, #4]
 8029b54:	6014      	str	r4, [r2, #0]
 8029b56:	b003      	add	sp, #12
 8029b58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029b5c:	f000 bf3c 	b.w	802a9d8 <__malloc_unlock>
 8029b60:	42a3      	cmp	r3, r4
 8029b62:	d908      	bls.n	8029b76 <_free_r+0x46>
 8029b64:	6825      	ldr	r5, [r4, #0]
 8029b66:	1961      	adds	r1, r4, r5
 8029b68:	428b      	cmp	r3, r1
 8029b6a:	bf01      	itttt	eq
 8029b6c:	6819      	ldreq	r1, [r3, #0]
 8029b6e:	685b      	ldreq	r3, [r3, #4]
 8029b70:	1949      	addeq	r1, r1, r5
 8029b72:	6021      	streq	r1, [r4, #0]
 8029b74:	e7ed      	b.n	8029b52 <_free_r+0x22>
 8029b76:	461a      	mov	r2, r3
 8029b78:	685b      	ldr	r3, [r3, #4]
 8029b7a:	b10b      	cbz	r3, 8029b80 <_free_r+0x50>
 8029b7c:	42a3      	cmp	r3, r4
 8029b7e:	d9fa      	bls.n	8029b76 <_free_r+0x46>
 8029b80:	6811      	ldr	r1, [r2, #0]
 8029b82:	1855      	adds	r5, r2, r1
 8029b84:	42a5      	cmp	r5, r4
 8029b86:	d10b      	bne.n	8029ba0 <_free_r+0x70>
 8029b88:	6824      	ldr	r4, [r4, #0]
 8029b8a:	4421      	add	r1, r4
 8029b8c:	1854      	adds	r4, r2, r1
 8029b8e:	42a3      	cmp	r3, r4
 8029b90:	6011      	str	r1, [r2, #0]
 8029b92:	d1e0      	bne.n	8029b56 <_free_r+0x26>
 8029b94:	681c      	ldr	r4, [r3, #0]
 8029b96:	685b      	ldr	r3, [r3, #4]
 8029b98:	6053      	str	r3, [r2, #4]
 8029b9a:	4421      	add	r1, r4
 8029b9c:	6011      	str	r1, [r2, #0]
 8029b9e:	e7da      	b.n	8029b56 <_free_r+0x26>
 8029ba0:	d902      	bls.n	8029ba8 <_free_r+0x78>
 8029ba2:	230c      	movs	r3, #12
 8029ba4:	6003      	str	r3, [r0, #0]
 8029ba6:	e7d6      	b.n	8029b56 <_free_r+0x26>
 8029ba8:	6825      	ldr	r5, [r4, #0]
 8029baa:	1961      	adds	r1, r4, r5
 8029bac:	428b      	cmp	r3, r1
 8029bae:	bf04      	itt	eq
 8029bb0:	6819      	ldreq	r1, [r3, #0]
 8029bb2:	685b      	ldreq	r3, [r3, #4]
 8029bb4:	6063      	str	r3, [r4, #4]
 8029bb6:	bf04      	itt	eq
 8029bb8:	1949      	addeq	r1, r1, r5
 8029bba:	6021      	streq	r1, [r4, #0]
 8029bbc:	6054      	str	r4, [r2, #4]
 8029bbe:	e7ca      	b.n	8029b56 <_free_r+0x26>
 8029bc0:	b003      	add	sp, #12
 8029bc2:	bd30      	pop	{r4, r5, pc}
 8029bc4:	20008f30 	.word	0x20008f30

08029bc8 <sbrk_aligned>:
 8029bc8:	b570      	push	{r4, r5, r6, lr}
 8029bca:	4e0e      	ldr	r6, [pc, #56]	; (8029c04 <sbrk_aligned+0x3c>)
 8029bcc:	460c      	mov	r4, r1
 8029bce:	6831      	ldr	r1, [r6, #0]
 8029bd0:	4605      	mov	r5, r0
 8029bd2:	b911      	cbnz	r1, 8029bda <sbrk_aligned+0x12>
 8029bd4:	f000 fbe4 	bl	802a3a0 <_sbrk_r>
 8029bd8:	6030      	str	r0, [r6, #0]
 8029bda:	4621      	mov	r1, r4
 8029bdc:	4628      	mov	r0, r5
 8029bde:	f000 fbdf 	bl	802a3a0 <_sbrk_r>
 8029be2:	1c43      	adds	r3, r0, #1
 8029be4:	d00a      	beq.n	8029bfc <sbrk_aligned+0x34>
 8029be6:	1cc4      	adds	r4, r0, #3
 8029be8:	f024 0403 	bic.w	r4, r4, #3
 8029bec:	42a0      	cmp	r0, r4
 8029bee:	d007      	beq.n	8029c00 <sbrk_aligned+0x38>
 8029bf0:	1a21      	subs	r1, r4, r0
 8029bf2:	4628      	mov	r0, r5
 8029bf4:	f000 fbd4 	bl	802a3a0 <_sbrk_r>
 8029bf8:	3001      	adds	r0, #1
 8029bfa:	d101      	bne.n	8029c00 <sbrk_aligned+0x38>
 8029bfc:	f04f 34ff 	mov.w	r4, #4294967295
 8029c00:	4620      	mov	r0, r4
 8029c02:	bd70      	pop	{r4, r5, r6, pc}
 8029c04:	20008f34 	.word	0x20008f34

08029c08 <_malloc_r>:
 8029c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029c0c:	1ccd      	adds	r5, r1, #3
 8029c0e:	f025 0503 	bic.w	r5, r5, #3
 8029c12:	3508      	adds	r5, #8
 8029c14:	2d0c      	cmp	r5, #12
 8029c16:	bf38      	it	cc
 8029c18:	250c      	movcc	r5, #12
 8029c1a:	2d00      	cmp	r5, #0
 8029c1c:	4607      	mov	r7, r0
 8029c1e:	db01      	blt.n	8029c24 <_malloc_r+0x1c>
 8029c20:	42a9      	cmp	r1, r5
 8029c22:	d905      	bls.n	8029c30 <_malloc_r+0x28>
 8029c24:	230c      	movs	r3, #12
 8029c26:	603b      	str	r3, [r7, #0]
 8029c28:	2600      	movs	r6, #0
 8029c2a:	4630      	mov	r0, r6
 8029c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029c30:	4e2e      	ldr	r6, [pc, #184]	; (8029cec <_malloc_r+0xe4>)
 8029c32:	f000 fecb 	bl	802a9cc <__malloc_lock>
 8029c36:	6833      	ldr	r3, [r6, #0]
 8029c38:	461c      	mov	r4, r3
 8029c3a:	bb34      	cbnz	r4, 8029c8a <_malloc_r+0x82>
 8029c3c:	4629      	mov	r1, r5
 8029c3e:	4638      	mov	r0, r7
 8029c40:	f7ff ffc2 	bl	8029bc8 <sbrk_aligned>
 8029c44:	1c43      	adds	r3, r0, #1
 8029c46:	4604      	mov	r4, r0
 8029c48:	d14d      	bne.n	8029ce6 <_malloc_r+0xde>
 8029c4a:	6834      	ldr	r4, [r6, #0]
 8029c4c:	4626      	mov	r6, r4
 8029c4e:	2e00      	cmp	r6, #0
 8029c50:	d140      	bne.n	8029cd4 <_malloc_r+0xcc>
 8029c52:	6823      	ldr	r3, [r4, #0]
 8029c54:	4631      	mov	r1, r6
 8029c56:	4638      	mov	r0, r7
 8029c58:	eb04 0803 	add.w	r8, r4, r3
 8029c5c:	f000 fba0 	bl	802a3a0 <_sbrk_r>
 8029c60:	4580      	cmp	r8, r0
 8029c62:	d13a      	bne.n	8029cda <_malloc_r+0xd2>
 8029c64:	6821      	ldr	r1, [r4, #0]
 8029c66:	3503      	adds	r5, #3
 8029c68:	1a6d      	subs	r5, r5, r1
 8029c6a:	f025 0503 	bic.w	r5, r5, #3
 8029c6e:	3508      	adds	r5, #8
 8029c70:	2d0c      	cmp	r5, #12
 8029c72:	bf38      	it	cc
 8029c74:	250c      	movcc	r5, #12
 8029c76:	4629      	mov	r1, r5
 8029c78:	4638      	mov	r0, r7
 8029c7a:	f7ff ffa5 	bl	8029bc8 <sbrk_aligned>
 8029c7e:	3001      	adds	r0, #1
 8029c80:	d02b      	beq.n	8029cda <_malloc_r+0xd2>
 8029c82:	6823      	ldr	r3, [r4, #0]
 8029c84:	442b      	add	r3, r5
 8029c86:	6023      	str	r3, [r4, #0]
 8029c88:	e00e      	b.n	8029ca8 <_malloc_r+0xa0>
 8029c8a:	6822      	ldr	r2, [r4, #0]
 8029c8c:	1b52      	subs	r2, r2, r5
 8029c8e:	d41e      	bmi.n	8029cce <_malloc_r+0xc6>
 8029c90:	2a0b      	cmp	r2, #11
 8029c92:	d916      	bls.n	8029cc2 <_malloc_r+0xba>
 8029c94:	1961      	adds	r1, r4, r5
 8029c96:	42a3      	cmp	r3, r4
 8029c98:	6025      	str	r5, [r4, #0]
 8029c9a:	bf18      	it	ne
 8029c9c:	6059      	strne	r1, [r3, #4]
 8029c9e:	6863      	ldr	r3, [r4, #4]
 8029ca0:	bf08      	it	eq
 8029ca2:	6031      	streq	r1, [r6, #0]
 8029ca4:	5162      	str	r2, [r4, r5]
 8029ca6:	604b      	str	r3, [r1, #4]
 8029ca8:	4638      	mov	r0, r7
 8029caa:	f104 060b 	add.w	r6, r4, #11
 8029cae:	f000 fe93 	bl	802a9d8 <__malloc_unlock>
 8029cb2:	f026 0607 	bic.w	r6, r6, #7
 8029cb6:	1d23      	adds	r3, r4, #4
 8029cb8:	1af2      	subs	r2, r6, r3
 8029cba:	d0b6      	beq.n	8029c2a <_malloc_r+0x22>
 8029cbc:	1b9b      	subs	r3, r3, r6
 8029cbe:	50a3      	str	r3, [r4, r2]
 8029cc0:	e7b3      	b.n	8029c2a <_malloc_r+0x22>
 8029cc2:	6862      	ldr	r2, [r4, #4]
 8029cc4:	42a3      	cmp	r3, r4
 8029cc6:	bf0c      	ite	eq
 8029cc8:	6032      	streq	r2, [r6, #0]
 8029cca:	605a      	strne	r2, [r3, #4]
 8029ccc:	e7ec      	b.n	8029ca8 <_malloc_r+0xa0>
 8029cce:	4623      	mov	r3, r4
 8029cd0:	6864      	ldr	r4, [r4, #4]
 8029cd2:	e7b2      	b.n	8029c3a <_malloc_r+0x32>
 8029cd4:	4634      	mov	r4, r6
 8029cd6:	6876      	ldr	r6, [r6, #4]
 8029cd8:	e7b9      	b.n	8029c4e <_malloc_r+0x46>
 8029cda:	230c      	movs	r3, #12
 8029cdc:	603b      	str	r3, [r7, #0]
 8029cde:	4638      	mov	r0, r7
 8029ce0:	f000 fe7a 	bl	802a9d8 <__malloc_unlock>
 8029ce4:	e7a1      	b.n	8029c2a <_malloc_r+0x22>
 8029ce6:	6025      	str	r5, [r4, #0]
 8029ce8:	e7de      	b.n	8029ca8 <_malloc_r+0xa0>
 8029cea:	bf00      	nop
 8029cec:	20008f30 	.word	0x20008f30

08029cf0 <__sfputc_r>:
 8029cf0:	6893      	ldr	r3, [r2, #8]
 8029cf2:	3b01      	subs	r3, #1
 8029cf4:	2b00      	cmp	r3, #0
 8029cf6:	b410      	push	{r4}
 8029cf8:	6093      	str	r3, [r2, #8]
 8029cfa:	da08      	bge.n	8029d0e <__sfputc_r+0x1e>
 8029cfc:	6994      	ldr	r4, [r2, #24]
 8029cfe:	42a3      	cmp	r3, r4
 8029d00:	db01      	blt.n	8029d06 <__sfputc_r+0x16>
 8029d02:	290a      	cmp	r1, #10
 8029d04:	d103      	bne.n	8029d0e <__sfputc_r+0x1e>
 8029d06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029d0a:	f000 bbe1 	b.w	802a4d0 <__swbuf_r>
 8029d0e:	6813      	ldr	r3, [r2, #0]
 8029d10:	1c58      	adds	r0, r3, #1
 8029d12:	6010      	str	r0, [r2, #0]
 8029d14:	7019      	strb	r1, [r3, #0]
 8029d16:	4608      	mov	r0, r1
 8029d18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029d1c:	4770      	bx	lr

08029d1e <__sfputs_r>:
 8029d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029d20:	4606      	mov	r6, r0
 8029d22:	460f      	mov	r7, r1
 8029d24:	4614      	mov	r4, r2
 8029d26:	18d5      	adds	r5, r2, r3
 8029d28:	42ac      	cmp	r4, r5
 8029d2a:	d101      	bne.n	8029d30 <__sfputs_r+0x12>
 8029d2c:	2000      	movs	r0, #0
 8029d2e:	e007      	b.n	8029d40 <__sfputs_r+0x22>
 8029d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029d34:	463a      	mov	r2, r7
 8029d36:	4630      	mov	r0, r6
 8029d38:	f7ff ffda 	bl	8029cf0 <__sfputc_r>
 8029d3c:	1c43      	adds	r3, r0, #1
 8029d3e:	d1f3      	bne.n	8029d28 <__sfputs_r+0xa>
 8029d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08029d44 <_vfiprintf_r>:
 8029d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029d48:	460d      	mov	r5, r1
 8029d4a:	b09d      	sub	sp, #116	; 0x74
 8029d4c:	4614      	mov	r4, r2
 8029d4e:	4698      	mov	r8, r3
 8029d50:	4606      	mov	r6, r0
 8029d52:	b118      	cbz	r0, 8029d5c <_vfiprintf_r+0x18>
 8029d54:	6983      	ldr	r3, [r0, #24]
 8029d56:	b90b      	cbnz	r3, 8029d5c <_vfiprintf_r+0x18>
 8029d58:	f7ff fdec 	bl	8029934 <__sinit>
 8029d5c:	4b89      	ldr	r3, [pc, #548]	; (8029f84 <_vfiprintf_r+0x240>)
 8029d5e:	429d      	cmp	r5, r3
 8029d60:	d11b      	bne.n	8029d9a <_vfiprintf_r+0x56>
 8029d62:	6875      	ldr	r5, [r6, #4]
 8029d64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029d66:	07d9      	lsls	r1, r3, #31
 8029d68:	d405      	bmi.n	8029d76 <_vfiprintf_r+0x32>
 8029d6a:	89ab      	ldrh	r3, [r5, #12]
 8029d6c:	059a      	lsls	r2, r3, #22
 8029d6e:	d402      	bmi.n	8029d76 <_vfiprintf_r+0x32>
 8029d70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029d72:	f7ff feb4 	bl	8029ade <__retarget_lock_acquire_recursive>
 8029d76:	89ab      	ldrh	r3, [r5, #12]
 8029d78:	071b      	lsls	r3, r3, #28
 8029d7a:	d501      	bpl.n	8029d80 <_vfiprintf_r+0x3c>
 8029d7c:	692b      	ldr	r3, [r5, #16]
 8029d7e:	b9eb      	cbnz	r3, 8029dbc <_vfiprintf_r+0x78>
 8029d80:	4629      	mov	r1, r5
 8029d82:	4630      	mov	r0, r6
 8029d84:	f000 fc08 	bl	802a598 <__swsetup_r>
 8029d88:	b1c0      	cbz	r0, 8029dbc <_vfiprintf_r+0x78>
 8029d8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029d8c:	07dc      	lsls	r4, r3, #31
 8029d8e:	d50e      	bpl.n	8029dae <_vfiprintf_r+0x6a>
 8029d90:	f04f 30ff 	mov.w	r0, #4294967295
 8029d94:	b01d      	add	sp, #116	; 0x74
 8029d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029d9a:	4b7b      	ldr	r3, [pc, #492]	; (8029f88 <_vfiprintf_r+0x244>)
 8029d9c:	429d      	cmp	r5, r3
 8029d9e:	d101      	bne.n	8029da4 <_vfiprintf_r+0x60>
 8029da0:	68b5      	ldr	r5, [r6, #8]
 8029da2:	e7df      	b.n	8029d64 <_vfiprintf_r+0x20>
 8029da4:	4b79      	ldr	r3, [pc, #484]	; (8029f8c <_vfiprintf_r+0x248>)
 8029da6:	429d      	cmp	r5, r3
 8029da8:	bf08      	it	eq
 8029daa:	68f5      	ldreq	r5, [r6, #12]
 8029dac:	e7da      	b.n	8029d64 <_vfiprintf_r+0x20>
 8029dae:	89ab      	ldrh	r3, [r5, #12]
 8029db0:	0598      	lsls	r0, r3, #22
 8029db2:	d4ed      	bmi.n	8029d90 <_vfiprintf_r+0x4c>
 8029db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029db6:	f7ff fe94 	bl	8029ae2 <__retarget_lock_release_recursive>
 8029dba:	e7e9      	b.n	8029d90 <_vfiprintf_r+0x4c>
 8029dbc:	2300      	movs	r3, #0
 8029dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8029dc0:	2320      	movs	r3, #32
 8029dc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8029dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8029dca:	2330      	movs	r3, #48	; 0x30
 8029dcc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8029f90 <_vfiprintf_r+0x24c>
 8029dd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8029dd4:	f04f 0901 	mov.w	r9, #1
 8029dd8:	4623      	mov	r3, r4
 8029dda:	469a      	mov	sl, r3
 8029ddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8029de0:	b10a      	cbz	r2, 8029de6 <_vfiprintf_r+0xa2>
 8029de2:	2a25      	cmp	r2, #37	; 0x25
 8029de4:	d1f9      	bne.n	8029dda <_vfiprintf_r+0x96>
 8029de6:	ebba 0b04 	subs.w	fp, sl, r4
 8029dea:	d00b      	beq.n	8029e04 <_vfiprintf_r+0xc0>
 8029dec:	465b      	mov	r3, fp
 8029dee:	4622      	mov	r2, r4
 8029df0:	4629      	mov	r1, r5
 8029df2:	4630      	mov	r0, r6
 8029df4:	f7ff ff93 	bl	8029d1e <__sfputs_r>
 8029df8:	3001      	adds	r0, #1
 8029dfa:	f000 80aa 	beq.w	8029f52 <_vfiprintf_r+0x20e>
 8029dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8029e00:	445a      	add	r2, fp
 8029e02:	9209      	str	r2, [sp, #36]	; 0x24
 8029e04:	f89a 3000 	ldrb.w	r3, [sl]
 8029e08:	2b00      	cmp	r3, #0
 8029e0a:	f000 80a2 	beq.w	8029f52 <_vfiprintf_r+0x20e>
 8029e0e:	2300      	movs	r3, #0
 8029e10:	f04f 32ff 	mov.w	r2, #4294967295
 8029e14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8029e18:	f10a 0a01 	add.w	sl, sl, #1
 8029e1c:	9304      	str	r3, [sp, #16]
 8029e1e:	9307      	str	r3, [sp, #28]
 8029e20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8029e24:	931a      	str	r3, [sp, #104]	; 0x68
 8029e26:	4654      	mov	r4, sl
 8029e28:	2205      	movs	r2, #5
 8029e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029e2e:	4858      	ldr	r0, [pc, #352]	; (8029f90 <_vfiprintf_r+0x24c>)
 8029e30:	f7d6 f9de 	bl	80001f0 <memchr>
 8029e34:	9a04      	ldr	r2, [sp, #16]
 8029e36:	b9d8      	cbnz	r0, 8029e70 <_vfiprintf_r+0x12c>
 8029e38:	06d1      	lsls	r1, r2, #27
 8029e3a:	bf44      	itt	mi
 8029e3c:	2320      	movmi	r3, #32
 8029e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029e42:	0713      	lsls	r3, r2, #28
 8029e44:	bf44      	itt	mi
 8029e46:	232b      	movmi	r3, #43	; 0x2b
 8029e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8029e50:	2b2a      	cmp	r3, #42	; 0x2a
 8029e52:	d015      	beq.n	8029e80 <_vfiprintf_r+0x13c>
 8029e54:	9a07      	ldr	r2, [sp, #28]
 8029e56:	4654      	mov	r4, sl
 8029e58:	2000      	movs	r0, #0
 8029e5a:	f04f 0c0a 	mov.w	ip, #10
 8029e5e:	4621      	mov	r1, r4
 8029e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029e64:	3b30      	subs	r3, #48	; 0x30
 8029e66:	2b09      	cmp	r3, #9
 8029e68:	d94e      	bls.n	8029f08 <_vfiprintf_r+0x1c4>
 8029e6a:	b1b0      	cbz	r0, 8029e9a <_vfiprintf_r+0x156>
 8029e6c:	9207      	str	r2, [sp, #28]
 8029e6e:	e014      	b.n	8029e9a <_vfiprintf_r+0x156>
 8029e70:	eba0 0308 	sub.w	r3, r0, r8
 8029e74:	fa09 f303 	lsl.w	r3, r9, r3
 8029e78:	4313      	orrs	r3, r2
 8029e7a:	9304      	str	r3, [sp, #16]
 8029e7c:	46a2      	mov	sl, r4
 8029e7e:	e7d2      	b.n	8029e26 <_vfiprintf_r+0xe2>
 8029e80:	9b03      	ldr	r3, [sp, #12]
 8029e82:	1d19      	adds	r1, r3, #4
 8029e84:	681b      	ldr	r3, [r3, #0]
 8029e86:	9103      	str	r1, [sp, #12]
 8029e88:	2b00      	cmp	r3, #0
 8029e8a:	bfbb      	ittet	lt
 8029e8c:	425b      	neglt	r3, r3
 8029e8e:	f042 0202 	orrlt.w	r2, r2, #2
 8029e92:	9307      	strge	r3, [sp, #28]
 8029e94:	9307      	strlt	r3, [sp, #28]
 8029e96:	bfb8      	it	lt
 8029e98:	9204      	strlt	r2, [sp, #16]
 8029e9a:	7823      	ldrb	r3, [r4, #0]
 8029e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8029e9e:	d10c      	bne.n	8029eba <_vfiprintf_r+0x176>
 8029ea0:	7863      	ldrb	r3, [r4, #1]
 8029ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8029ea4:	d135      	bne.n	8029f12 <_vfiprintf_r+0x1ce>
 8029ea6:	9b03      	ldr	r3, [sp, #12]
 8029ea8:	1d1a      	adds	r2, r3, #4
 8029eaa:	681b      	ldr	r3, [r3, #0]
 8029eac:	9203      	str	r2, [sp, #12]
 8029eae:	2b00      	cmp	r3, #0
 8029eb0:	bfb8      	it	lt
 8029eb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8029eb6:	3402      	adds	r4, #2
 8029eb8:	9305      	str	r3, [sp, #20]
 8029eba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8029fa0 <_vfiprintf_r+0x25c>
 8029ebe:	7821      	ldrb	r1, [r4, #0]
 8029ec0:	2203      	movs	r2, #3
 8029ec2:	4650      	mov	r0, sl
 8029ec4:	f7d6 f994 	bl	80001f0 <memchr>
 8029ec8:	b140      	cbz	r0, 8029edc <_vfiprintf_r+0x198>
 8029eca:	2340      	movs	r3, #64	; 0x40
 8029ecc:	eba0 000a 	sub.w	r0, r0, sl
 8029ed0:	fa03 f000 	lsl.w	r0, r3, r0
 8029ed4:	9b04      	ldr	r3, [sp, #16]
 8029ed6:	4303      	orrs	r3, r0
 8029ed8:	3401      	adds	r4, #1
 8029eda:	9304      	str	r3, [sp, #16]
 8029edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029ee0:	482c      	ldr	r0, [pc, #176]	; (8029f94 <_vfiprintf_r+0x250>)
 8029ee2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8029ee6:	2206      	movs	r2, #6
 8029ee8:	f7d6 f982 	bl	80001f0 <memchr>
 8029eec:	2800      	cmp	r0, #0
 8029eee:	d03f      	beq.n	8029f70 <_vfiprintf_r+0x22c>
 8029ef0:	4b29      	ldr	r3, [pc, #164]	; (8029f98 <_vfiprintf_r+0x254>)
 8029ef2:	bb1b      	cbnz	r3, 8029f3c <_vfiprintf_r+0x1f8>
 8029ef4:	9b03      	ldr	r3, [sp, #12]
 8029ef6:	3307      	adds	r3, #7
 8029ef8:	f023 0307 	bic.w	r3, r3, #7
 8029efc:	3308      	adds	r3, #8
 8029efe:	9303      	str	r3, [sp, #12]
 8029f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029f02:	443b      	add	r3, r7
 8029f04:	9309      	str	r3, [sp, #36]	; 0x24
 8029f06:	e767      	b.n	8029dd8 <_vfiprintf_r+0x94>
 8029f08:	fb0c 3202 	mla	r2, ip, r2, r3
 8029f0c:	460c      	mov	r4, r1
 8029f0e:	2001      	movs	r0, #1
 8029f10:	e7a5      	b.n	8029e5e <_vfiprintf_r+0x11a>
 8029f12:	2300      	movs	r3, #0
 8029f14:	3401      	adds	r4, #1
 8029f16:	9305      	str	r3, [sp, #20]
 8029f18:	4619      	mov	r1, r3
 8029f1a:	f04f 0c0a 	mov.w	ip, #10
 8029f1e:	4620      	mov	r0, r4
 8029f20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029f24:	3a30      	subs	r2, #48	; 0x30
 8029f26:	2a09      	cmp	r2, #9
 8029f28:	d903      	bls.n	8029f32 <_vfiprintf_r+0x1ee>
 8029f2a:	2b00      	cmp	r3, #0
 8029f2c:	d0c5      	beq.n	8029eba <_vfiprintf_r+0x176>
 8029f2e:	9105      	str	r1, [sp, #20]
 8029f30:	e7c3      	b.n	8029eba <_vfiprintf_r+0x176>
 8029f32:	fb0c 2101 	mla	r1, ip, r1, r2
 8029f36:	4604      	mov	r4, r0
 8029f38:	2301      	movs	r3, #1
 8029f3a:	e7f0      	b.n	8029f1e <_vfiprintf_r+0x1da>
 8029f3c:	ab03      	add	r3, sp, #12
 8029f3e:	9300      	str	r3, [sp, #0]
 8029f40:	462a      	mov	r2, r5
 8029f42:	4b16      	ldr	r3, [pc, #88]	; (8029f9c <_vfiprintf_r+0x258>)
 8029f44:	a904      	add	r1, sp, #16
 8029f46:	4630      	mov	r0, r6
 8029f48:	f3af 8000 	nop.w
 8029f4c:	4607      	mov	r7, r0
 8029f4e:	1c78      	adds	r0, r7, #1
 8029f50:	d1d6      	bne.n	8029f00 <_vfiprintf_r+0x1bc>
 8029f52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029f54:	07d9      	lsls	r1, r3, #31
 8029f56:	d405      	bmi.n	8029f64 <_vfiprintf_r+0x220>
 8029f58:	89ab      	ldrh	r3, [r5, #12]
 8029f5a:	059a      	lsls	r2, r3, #22
 8029f5c:	d402      	bmi.n	8029f64 <_vfiprintf_r+0x220>
 8029f5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029f60:	f7ff fdbf 	bl	8029ae2 <__retarget_lock_release_recursive>
 8029f64:	89ab      	ldrh	r3, [r5, #12]
 8029f66:	065b      	lsls	r3, r3, #25
 8029f68:	f53f af12 	bmi.w	8029d90 <_vfiprintf_r+0x4c>
 8029f6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029f6e:	e711      	b.n	8029d94 <_vfiprintf_r+0x50>
 8029f70:	ab03      	add	r3, sp, #12
 8029f72:	9300      	str	r3, [sp, #0]
 8029f74:	462a      	mov	r2, r5
 8029f76:	4b09      	ldr	r3, [pc, #36]	; (8029f9c <_vfiprintf_r+0x258>)
 8029f78:	a904      	add	r1, sp, #16
 8029f7a:	4630      	mov	r0, r6
 8029f7c:	f000 f880 	bl	802a080 <_printf_i>
 8029f80:	e7e4      	b.n	8029f4c <_vfiprintf_r+0x208>
 8029f82:	bf00      	nop
 8029f84:	0802cfa0 	.word	0x0802cfa0
 8029f88:	0802cfc0 	.word	0x0802cfc0
 8029f8c:	0802cf80 	.word	0x0802cf80
 8029f90:	0802cfe4 	.word	0x0802cfe4
 8029f94:	0802cfee 	.word	0x0802cfee
 8029f98:	00000000 	.word	0x00000000
 8029f9c:	08029d1f 	.word	0x08029d1f
 8029fa0:	0802cfea 	.word	0x0802cfea

08029fa4 <_printf_common>:
 8029fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8029fa8:	4616      	mov	r6, r2
 8029faa:	4699      	mov	r9, r3
 8029fac:	688a      	ldr	r2, [r1, #8]
 8029fae:	690b      	ldr	r3, [r1, #16]
 8029fb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8029fb4:	4293      	cmp	r3, r2
 8029fb6:	bfb8      	it	lt
 8029fb8:	4613      	movlt	r3, r2
 8029fba:	6033      	str	r3, [r6, #0]
 8029fbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8029fc0:	4607      	mov	r7, r0
 8029fc2:	460c      	mov	r4, r1
 8029fc4:	b10a      	cbz	r2, 8029fca <_printf_common+0x26>
 8029fc6:	3301      	adds	r3, #1
 8029fc8:	6033      	str	r3, [r6, #0]
 8029fca:	6823      	ldr	r3, [r4, #0]
 8029fcc:	0699      	lsls	r1, r3, #26
 8029fce:	bf42      	ittt	mi
 8029fd0:	6833      	ldrmi	r3, [r6, #0]
 8029fd2:	3302      	addmi	r3, #2
 8029fd4:	6033      	strmi	r3, [r6, #0]
 8029fd6:	6825      	ldr	r5, [r4, #0]
 8029fd8:	f015 0506 	ands.w	r5, r5, #6
 8029fdc:	d106      	bne.n	8029fec <_printf_common+0x48>
 8029fde:	f104 0a19 	add.w	sl, r4, #25
 8029fe2:	68e3      	ldr	r3, [r4, #12]
 8029fe4:	6832      	ldr	r2, [r6, #0]
 8029fe6:	1a9b      	subs	r3, r3, r2
 8029fe8:	42ab      	cmp	r3, r5
 8029fea:	dc26      	bgt.n	802a03a <_printf_common+0x96>
 8029fec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8029ff0:	1e13      	subs	r3, r2, #0
 8029ff2:	6822      	ldr	r2, [r4, #0]
 8029ff4:	bf18      	it	ne
 8029ff6:	2301      	movne	r3, #1
 8029ff8:	0692      	lsls	r2, r2, #26
 8029ffa:	d42b      	bmi.n	802a054 <_printf_common+0xb0>
 8029ffc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802a000:	4649      	mov	r1, r9
 802a002:	4638      	mov	r0, r7
 802a004:	47c0      	blx	r8
 802a006:	3001      	adds	r0, #1
 802a008:	d01e      	beq.n	802a048 <_printf_common+0xa4>
 802a00a:	6823      	ldr	r3, [r4, #0]
 802a00c:	68e5      	ldr	r5, [r4, #12]
 802a00e:	6832      	ldr	r2, [r6, #0]
 802a010:	f003 0306 	and.w	r3, r3, #6
 802a014:	2b04      	cmp	r3, #4
 802a016:	bf08      	it	eq
 802a018:	1aad      	subeq	r5, r5, r2
 802a01a:	68a3      	ldr	r3, [r4, #8]
 802a01c:	6922      	ldr	r2, [r4, #16]
 802a01e:	bf0c      	ite	eq
 802a020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802a024:	2500      	movne	r5, #0
 802a026:	4293      	cmp	r3, r2
 802a028:	bfc4      	itt	gt
 802a02a:	1a9b      	subgt	r3, r3, r2
 802a02c:	18ed      	addgt	r5, r5, r3
 802a02e:	2600      	movs	r6, #0
 802a030:	341a      	adds	r4, #26
 802a032:	42b5      	cmp	r5, r6
 802a034:	d11a      	bne.n	802a06c <_printf_common+0xc8>
 802a036:	2000      	movs	r0, #0
 802a038:	e008      	b.n	802a04c <_printf_common+0xa8>
 802a03a:	2301      	movs	r3, #1
 802a03c:	4652      	mov	r2, sl
 802a03e:	4649      	mov	r1, r9
 802a040:	4638      	mov	r0, r7
 802a042:	47c0      	blx	r8
 802a044:	3001      	adds	r0, #1
 802a046:	d103      	bne.n	802a050 <_printf_common+0xac>
 802a048:	f04f 30ff 	mov.w	r0, #4294967295
 802a04c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a050:	3501      	adds	r5, #1
 802a052:	e7c6      	b.n	8029fe2 <_printf_common+0x3e>
 802a054:	18e1      	adds	r1, r4, r3
 802a056:	1c5a      	adds	r2, r3, #1
 802a058:	2030      	movs	r0, #48	; 0x30
 802a05a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802a05e:	4422      	add	r2, r4
 802a060:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802a064:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802a068:	3302      	adds	r3, #2
 802a06a:	e7c7      	b.n	8029ffc <_printf_common+0x58>
 802a06c:	2301      	movs	r3, #1
 802a06e:	4622      	mov	r2, r4
 802a070:	4649      	mov	r1, r9
 802a072:	4638      	mov	r0, r7
 802a074:	47c0      	blx	r8
 802a076:	3001      	adds	r0, #1
 802a078:	d0e6      	beq.n	802a048 <_printf_common+0xa4>
 802a07a:	3601      	adds	r6, #1
 802a07c:	e7d9      	b.n	802a032 <_printf_common+0x8e>
	...

0802a080 <_printf_i>:
 802a080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802a084:	7e0f      	ldrb	r7, [r1, #24]
 802a086:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a088:	2f78      	cmp	r7, #120	; 0x78
 802a08a:	4691      	mov	r9, r2
 802a08c:	4680      	mov	r8, r0
 802a08e:	460c      	mov	r4, r1
 802a090:	469a      	mov	sl, r3
 802a092:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802a096:	d807      	bhi.n	802a0a8 <_printf_i+0x28>
 802a098:	2f62      	cmp	r7, #98	; 0x62
 802a09a:	d80a      	bhi.n	802a0b2 <_printf_i+0x32>
 802a09c:	2f00      	cmp	r7, #0
 802a09e:	f000 80d8 	beq.w	802a252 <_printf_i+0x1d2>
 802a0a2:	2f58      	cmp	r7, #88	; 0x58
 802a0a4:	f000 80a3 	beq.w	802a1ee <_printf_i+0x16e>
 802a0a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802a0ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802a0b0:	e03a      	b.n	802a128 <_printf_i+0xa8>
 802a0b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802a0b6:	2b15      	cmp	r3, #21
 802a0b8:	d8f6      	bhi.n	802a0a8 <_printf_i+0x28>
 802a0ba:	a101      	add	r1, pc, #4	; (adr r1, 802a0c0 <_printf_i+0x40>)
 802a0bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802a0c0:	0802a119 	.word	0x0802a119
 802a0c4:	0802a12d 	.word	0x0802a12d
 802a0c8:	0802a0a9 	.word	0x0802a0a9
 802a0cc:	0802a0a9 	.word	0x0802a0a9
 802a0d0:	0802a0a9 	.word	0x0802a0a9
 802a0d4:	0802a0a9 	.word	0x0802a0a9
 802a0d8:	0802a12d 	.word	0x0802a12d
 802a0dc:	0802a0a9 	.word	0x0802a0a9
 802a0e0:	0802a0a9 	.word	0x0802a0a9
 802a0e4:	0802a0a9 	.word	0x0802a0a9
 802a0e8:	0802a0a9 	.word	0x0802a0a9
 802a0ec:	0802a239 	.word	0x0802a239
 802a0f0:	0802a15d 	.word	0x0802a15d
 802a0f4:	0802a21b 	.word	0x0802a21b
 802a0f8:	0802a0a9 	.word	0x0802a0a9
 802a0fc:	0802a0a9 	.word	0x0802a0a9
 802a100:	0802a25b 	.word	0x0802a25b
 802a104:	0802a0a9 	.word	0x0802a0a9
 802a108:	0802a15d 	.word	0x0802a15d
 802a10c:	0802a0a9 	.word	0x0802a0a9
 802a110:	0802a0a9 	.word	0x0802a0a9
 802a114:	0802a223 	.word	0x0802a223
 802a118:	682b      	ldr	r3, [r5, #0]
 802a11a:	1d1a      	adds	r2, r3, #4
 802a11c:	681b      	ldr	r3, [r3, #0]
 802a11e:	602a      	str	r2, [r5, #0]
 802a120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802a124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802a128:	2301      	movs	r3, #1
 802a12a:	e0a3      	b.n	802a274 <_printf_i+0x1f4>
 802a12c:	6820      	ldr	r0, [r4, #0]
 802a12e:	6829      	ldr	r1, [r5, #0]
 802a130:	0606      	lsls	r6, r0, #24
 802a132:	f101 0304 	add.w	r3, r1, #4
 802a136:	d50a      	bpl.n	802a14e <_printf_i+0xce>
 802a138:	680e      	ldr	r6, [r1, #0]
 802a13a:	602b      	str	r3, [r5, #0]
 802a13c:	2e00      	cmp	r6, #0
 802a13e:	da03      	bge.n	802a148 <_printf_i+0xc8>
 802a140:	232d      	movs	r3, #45	; 0x2d
 802a142:	4276      	negs	r6, r6
 802a144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a148:	485e      	ldr	r0, [pc, #376]	; (802a2c4 <_printf_i+0x244>)
 802a14a:	230a      	movs	r3, #10
 802a14c:	e019      	b.n	802a182 <_printf_i+0x102>
 802a14e:	680e      	ldr	r6, [r1, #0]
 802a150:	602b      	str	r3, [r5, #0]
 802a152:	f010 0f40 	tst.w	r0, #64	; 0x40
 802a156:	bf18      	it	ne
 802a158:	b236      	sxthne	r6, r6
 802a15a:	e7ef      	b.n	802a13c <_printf_i+0xbc>
 802a15c:	682b      	ldr	r3, [r5, #0]
 802a15e:	6820      	ldr	r0, [r4, #0]
 802a160:	1d19      	adds	r1, r3, #4
 802a162:	6029      	str	r1, [r5, #0]
 802a164:	0601      	lsls	r1, r0, #24
 802a166:	d501      	bpl.n	802a16c <_printf_i+0xec>
 802a168:	681e      	ldr	r6, [r3, #0]
 802a16a:	e002      	b.n	802a172 <_printf_i+0xf2>
 802a16c:	0646      	lsls	r6, r0, #25
 802a16e:	d5fb      	bpl.n	802a168 <_printf_i+0xe8>
 802a170:	881e      	ldrh	r6, [r3, #0]
 802a172:	4854      	ldr	r0, [pc, #336]	; (802a2c4 <_printf_i+0x244>)
 802a174:	2f6f      	cmp	r7, #111	; 0x6f
 802a176:	bf0c      	ite	eq
 802a178:	2308      	moveq	r3, #8
 802a17a:	230a      	movne	r3, #10
 802a17c:	2100      	movs	r1, #0
 802a17e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802a182:	6865      	ldr	r5, [r4, #4]
 802a184:	60a5      	str	r5, [r4, #8]
 802a186:	2d00      	cmp	r5, #0
 802a188:	bfa2      	ittt	ge
 802a18a:	6821      	ldrge	r1, [r4, #0]
 802a18c:	f021 0104 	bicge.w	r1, r1, #4
 802a190:	6021      	strge	r1, [r4, #0]
 802a192:	b90e      	cbnz	r6, 802a198 <_printf_i+0x118>
 802a194:	2d00      	cmp	r5, #0
 802a196:	d04d      	beq.n	802a234 <_printf_i+0x1b4>
 802a198:	4615      	mov	r5, r2
 802a19a:	fbb6 f1f3 	udiv	r1, r6, r3
 802a19e:	fb03 6711 	mls	r7, r3, r1, r6
 802a1a2:	5dc7      	ldrb	r7, [r0, r7]
 802a1a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802a1a8:	4637      	mov	r7, r6
 802a1aa:	42bb      	cmp	r3, r7
 802a1ac:	460e      	mov	r6, r1
 802a1ae:	d9f4      	bls.n	802a19a <_printf_i+0x11a>
 802a1b0:	2b08      	cmp	r3, #8
 802a1b2:	d10b      	bne.n	802a1cc <_printf_i+0x14c>
 802a1b4:	6823      	ldr	r3, [r4, #0]
 802a1b6:	07de      	lsls	r6, r3, #31
 802a1b8:	d508      	bpl.n	802a1cc <_printf_i+0x14c>
 802a1ba:	6923      	ldr	r3, [r4, #16]
 802a1bc:	6861      	ldr	r1, [r4, #4]
 802a1be:	4299      	cmp	r1, r3
 802a1c0:	bfde      	ittt	le
 802a1c2:	2330      	movle	r3, #48	; 0x30
 802a1c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 802a1c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 802a1cc:	1b52      	subs	r2, r2, r5
 802a1ce:	6122      	str	r2, [r4, #16]
 802a1d0:	f8cd a000 	str.w	sl, [sp]
 802a1d4:	464b      	mov	r3, r9
 802a1d6:	aa03      	add	r2, sp, #12
 802a1d8:	4621      	mov	r1, r4
 802a1da:	4640      	mov	r0, r8
 802a1dc:	f7ff fee2 	bl	8029fa4 <_printf_common>
 802a1e0:	3001      	adds	r0, #1
 802a1e2:	d14c      	bne.n	802a27e <_printf_i+0x1fe>
 802a1e4:	f04f 30ff 	mov.w	r0, #4294967295
 802a1e8:	b004      	add	sp, #16
 802a1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a1ee:	4835      	ldr	r0, [pc, #212]	; (802a2c4 <_printf_i+0x244>)
 802a1f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802a1f4:	6829      	ldr	r1, [r5, #0]
 802a1f6:	6823      	ldr	r3, [r4, #0]
 802a1f8:	f851 6b04 	ldr.w	r6, [r1], #4
 802a1fc:	6029      	str	r1, [r5, #0]
 802a1fe:	061d      	lsls	r5, r3, #24
 802a200:	d514      	bpl.n	802a22c <_printf_i+0x1ac>
 802a202:	07df      	lsls	r7, r3, #31
 802a204:	bf44      	itt	mi
 802a206:	f043 0320 	orrmi.w	r3, r3, #32
 802a20a:	6023      	strmi	r3, [r4, #0]
 802a20c:	b91e      	cbnz	r6, 802a216 <_printf_i+0x196>
 802a20e:	6823      	ldr	r3, [r4, #0]
 802a210:	f023 0320 	bic.w	r3, r3, #32
 802a214:	6023      	str	r3, [r4, #0]
 802a216:	2310      	movs	r3, #16
 802a218:	e7b0      	b.n	802a17c <_printf_i+0xfc>
 802a21a:	6823      	ldr	r3, [r4, #0]
 802a21c:	f043 0320 	orr.w	r3, r3, #32
 802a220:	6023      	str	r3, [r4, #0]
 802a222:	2378      	movs	r3, #120	; 0x78
 802a224:	4828      	ldr	r0, [pc, #160]	; (802a2c8 <_printf_i+0x248>)
 802a226:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802a22a:	e7e3      	b.n	802a1f4 <_printf_i+0x174>
 802a22c:	0659      	lsls	r1, r3, #25
 802a22e:	bf48      	it	mi
 802a230:	b2b6      	uxthmi	r6, r6
 802a232:	e7e6      	b.n	802a202 <_printf_i+0x182>
 802a234:	4615      	mov	r5, r2
 802a236:	e7bb      	b.n	802a1b0 <_printf_i+0x130>
 802a238:	682b      	ldr	r3, [r5, #0]
 802a23a:	6826      	ldr	r6, [r4, #0]
 802a23c:	6961      	ldr	r1, [r4, #20]
 802a23e:	1d18      	adds	r0, r3, #4
 802a240:	6028      	str	r0, [r5, #0]
 802a242:	0635      	lsls	r5, r6, #24
 802a244:	681b      	ldr	r3, [r3, #0]
 802a246:	d501      	bpl.n	802a24c <_printf_i+0x1cc>
 802a248:	6019      	str	r1, [r3, #0]
 802a24a:	e002      	b.n	802a252 <_printf_i+0x1d2>
 802a24c:	0670      	lsls	r0, r6, #25
 802a24e:	d5fb      	bpl.n	802a248 <_printf_i+0x1c8>
 802a250:	8019      	strh	r1, [r3, #0]
 802a252:	2300      	movs	r3, #0
 802a254:	6123      	str	r3, [r4, #16]
 802a256:	4615      	mov	r5, r2
 802a258:	e7ba      	b.n	802a1d0 <_printf_i+0x150>
 802a25a:	682b      	ldr	r3, [r5, #0]
 802a25c:	1d1a      	adds	r2, r3, #4
 802a25e:	602a      	str	r2, [r5, #0]
 802a260:	681d      	ldr	r5, [r3, #0]
 802a262:	6862      	ldr	r2, [r4, #4]
 802a264:	2100      	movs	r1, #0
 802a266:	4628      	mov	r0, r5
 802a268:	f7d5 ffc2 	bl	80001f0 <memchr>
 802a26c:	b108      	cbz	r0, 802a272 <_printf_i+0x1f2>
 802a26e:	1b40      	subs	r0, r0, r5
 802a270:	6060      	str	r0, [r4, #4]
 802a272:	6863      	ldr	r3, [r4, #4]
 802a274:	6123      	str	r3, [r4, #16]
 802a276:	2300      	movs	r3, #0
 802a278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a27c:	e7a8      	b.n	802a1d0 <_printf_i+0x150>
 802a27e:	6923      	ldr	r3, [r4, #16]
 802a280:	462a      	mov	r2, r5
 802a282:	4649      	mov	r1, r9
 802a284:	4640      	mov	r0, r8
 802a286:	47d0      	blx	sl
 802a288:	3001      	adds	r0, #1
 802a28a:	d0ab      	beq.n	802a1e4 <_printf_i+0x164>
 802a28c:	6823      	ldr	r3, [r4, #0]
 802a28e:	079b      	lsls	r3, r3, #30
 802a290:	d413      	bmi.n	802a2ba <_printf_i+0x23a>
 802a292:	68e0      	ldr	r0, [r4, #12]
 802a294:	9b03      	ldr	r3, [sp, #12]
 802a296:	4298      	cmp	r0, r3
 802a298:	bfb8      	it	lt
 802a29a:	4618      	movlt	r0, r3
 802a29c:	e7a4      	b.n	802a1e8 <_printf_i+0x168>
 802a29e:	2301      	movs	r3, #1
 802a2a0:	4632      	mov	r2, r6
 802a2a2:	4649      	mov	r1, r9
 802a2a4:	4640      	mov	r0, r8
 802a2a6:	47d0      	blx	sl
 802a2a8:	3001      	adds	r0, #1
 802a2aa:	d09b      	beq.n	802a1e4 <_printf_i+0x164>
 802a2ac:	3501      	adds	r5, #1
 802a2ae:	68e3      	ldr	r3, [r4, #12]
 802a2b0:	9903      	ldr	r1, [sp, #12]
 802a2b2:	1a5b      	subs	r3, r3, r1
 802a2b4:	42ab      	cmp	r3, r5
 802a2b6:	dcf2      	bgt.n	802a29e <_printf_i+0x21e>
 802a2b8:	e7eb      	b.n	802a292 <_printf_i+0x212>
 802a2ba:	2500      	movs	r5, #0
 802a2bc:	f104 0619 	add.w	r6, r4, #25
 802a2c0:	e7f5      	b.n	802a2ae <_printf_i+0x22e>
 802a2c2:	bf00      	nop
 802a2c4:	0802cff5 	.word	0x0802cff5
 802a2c8:	0802d006 	.word	0x0802d006

0802a2cc <cleanup_glue>:
 802a2cc:	b538      	push	{r3, r4, r5, lr}
 802a2ce:	460c      	mov	r4, r1
 802a2d0:	6809      	ldr	r1, [r1, #0]
 802a2d2:	4605      	mov	r5, r0
 802a2d4:	b109      	cbz	r1, 802a2da <cleanup_glue+0xe>
 802a2d6:	f7ff fff9 	bl	802a2cc <cleanup_glue>
 802a2da:	4621      	mov	r1, r4
 802a2dc:	4628      	mov	r0, r5
 802a2de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a2e2:	f7ff bc25 	b.w	8029b30 <_free_r>
	...

0802a2e8 <_reclaim_reent>:
 802a2e8:	4b2c      	ldr	r3, [pc, #176]	; (802a39c <_reclaim_reent+0xb4>)
 802a2ea:	681b      	ldr	r3, [r3, #0]
 802a2ec:	4283      	cmp	r3, r0
 802a2ee:	b570      	push	{r4, r5, r6, lr}
 802a2f0:	4604      	mov	r4, r0
 802a2f2:	d051      	beq.n	802a398 <_reclaim_reent+0xb0>
 802a2f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 802a2f6:	b143      	cbz	r3, 802a30a <_reclaim_reent+0x22>
 802a2f8:	68db      	ldr	r3, [r3, #12]
 802a2fa:	2b00      	cmp	r3, #0
 802a2fc:	d14a      	bne.n	802a394 <_reclaim_reent+0xac>
 802a2fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802a300:	6819      	ldr	r1, [r3, #0]
 802a302:	b111      	cbz	r1, 802a30a <_reclaim_reent+0x22>
 802a304:	4620      	mov	r0, r4
 802a306:	f7ff fc13 	bl	8029b30 <_free_r>
 802a30a:	6961      	ldr	r1, [r4, #20]
 802a30c:	b111      	cbz	r1, 802a314 <_reclaim_reent+0x2c>
 802a30e:	4620      	mov	r0, r4
 802a310:	f7ff fc0e 	bl	8029b30 <_free_r>
 802a314:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802a316:	b111      	cbz	r1, 802a31e <_reclaim_reent+0x36>
 802a318:	4620      	mov	r0, r4
 802a31a:	f7ff fc09 	bl	8029b30 <_free_r>
 802a31e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802a320:	b111      	cbz	r1, 802a328 <_reclaim_reent+0x40>
 802a322:	4620      	mov	r0, r4
 802a324:	f7ff fc04 	bl	8029b30 <_free_r>
 802a328:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802a32a:	b111      	cbz	r1, 802a332 <_reclaim_reent+0x4a>
 802a32c:	4620      	mov	r0, r4
 802a32e:	f7ff fbff 	bl	8029b30 <_free_r>
 802a332:	6c21      	ldr	r1, [r4, #64]	; 0x40
 802a334:	b111      	cbz	r1, 802a33c <_reclaim_reent+0x54>
 802a336:	4620      	mov	r0, r4
 802a338:	f7ff fbfa 	bl	8029b30 <_free_r>
 802a33c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802a33e:	b111      	cbz	r1, 802a346 <_reclaim_reent+0x5e>
 802a340:	4620      	mov	r0, r4
 802a342:	f7ff fbf5 	bl	8029b30 <_free_r>
 802a346:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802a348:	b111      	cbz	r1, 802a350 <_reclaim_reent+0x68>
 802a34a:	4620      	mov	r0, r4
 802a34c:	f7ff fbf0 	bl	8029b30 <_free_r>
 802a350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a352:	b111      	cbz	r1, 802a35a <_reclaim_reent+0x72>
 802a354:	4620      	mov	r0, r4
 802a356:	f7ff fbeb 	bl	8029b30 <_free_r>
 802a35a:	69a3      	ldr	r3, [r4, #24]
 802a35c:	b1e3      	cbz	r3, 802a398 <_reclaim_reent+0xb0>
 802a35e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802a360:	4620      	mov	r0, r4
 802a362:	4798      	blx	r3
 802a364:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802a366:	b1b9      	cbz	r1, 802a398 <_reclaim_reent+0xb0>
 802a368:	4620      	mov	r0, r4
 802a36a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802a36e:	f7ff bfad 	b.w	802a2cc <cleanup_glue>
 802a372:	5949      	ldr	r1, [r1, r5]
 802a374:	b941      	cbnz	r1, 802a388 <_reclaim_reent+0xa0>
 802a376:	3504      	adds	r5, #4
 802a378:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802a37a:	2d80      	cmp	r5, #128	; 0x80
 802a37c:	68d9      	ldr	r1, [r3, #12]
 802a37e:	d1f8      	bne.n	802a372 <_reclaim_reent+0x8a>
 802a380:	4620      	mov	r0, r4
 802a382:	f7ff fbd5 	bl	8029b30 <_free_r>
 802a386:	e7ba      	b.n	802a2fe <_reclaim_reent+0x16>
 802a388:	680e      	ldr	r6, [r1, #0]
 802a38a:	4620      	mov	r0, r4
 802a38c:	f7ff fbd0 	bl	8029b30 <_free_r>
 802a390:	4631      	mov	r1, r6
 802a392:	e7ef      	b.n	802a374 <_reclaim_reent+0x8c>
 802a394:	2500      	movs	r5, #0
 802a396:	e7ef      	b.n	802a378 <_reclaim_reent+0x90>
 802a398:	bd70      	pop	{r4, r5, r6, pc}
 802a39a:	bf00      	nop
 802a39c:	20000098 	.word	0x20000098

0802a3a0 <_sbrk_r>:
 802a3a0:	b538      	push	{r3, r4, r5, lr}
 802a3a2:	4d06      	ldr	r5, [pc, #24]	; (802a3bc <_sbrk_r+0x1c>)
 802a3a4:	2300      	movs	r3, #0
 802a3a6:	4604      	mov	r4, r0
 802a3a8:	4608      	mov	r0, r1
 802a3aa:	602b      	str	r3, [r5, #0]
 802a3ac:	f000 fb86 	bl	802aabc <_sbrk>
 802a3b0:	1c43      	adds	r3, r0, #1
 802a3b2:	d102      	bne.n	802a3ba <_sbrk_r+0x1a>
 802a3b4:	682b      	ldr	r3, [r5, #0]
 802a3b6:	b103      	cbz	r3, 802a3ba <_sbrk_r+0x1a>
 802a3b8:	6023      	str	r3, [r4, #0]
 802a3ba:	bd38      	pop	{r3, r4, r5, pc}
 802a3bc:	20009040 	.word	0x20009040

0802a3c0 <_raise_r>:
 802a3c0:	291f      	cmp	r1, #31
 802a3c2:	b538      	push	{r3, r4, r5, lr}
 802a3c4:	4604      	mov	r4, r0
 802a3c6:	460d      	mov	r5, r1
 802a3c8:	d904      	bls.n	802a3d4 <_raise_r+0x14>
 802a3ca:	2316      	movs	r3, #22
 802a3cc:	6003      	str	r3, [r0, #0]
 802a3ce:	f04f 30ff 	mov.w	r0, #4294967295
 802a3d2:	bd38      	pop	{r3, r4, r5, pc}
 802a3d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802a3d6:	b112      	cbz	r2, 802a3de <_raise_r+0x1e>
 802a3d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802a3dc:	b94b      	cbnz	r3, 802a3f2 <_raise_r+0x32>
 802a3de:	4620      	mov	r0, r4
 802a3e0:	f000 f830 	bl	802a444 <_getpid_r>
 802a3e4:	462a      	mov	r2, r5
 802a3e6:	4601      	mov	r1, r0
 802a3e8:	4620      	mov	r0, r4
 802a3ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802a3ee:	f000 b817 	b.w	802a420 <_kill_r>
 802a3f2:	2b01      	cmp	r3, #1
 802a3f4:	d00a      	beq.n	802a40c <_raise_r+0x4c>
 802a3f6:	1c59      	adds	r1, r3, #1
 802a3f8:	d103      	bne.n	802a402 <_raise_r+0x42>
 802a3fa:	2316      	movs	r3, #22
 802a3fc:	6003      	str	r3, [r0, #0]
 802a3fe:	2001      	movs	r0, #1
 802a400:	e7e7      	b.n	802a3d2 <_raise_r+0x12>
 802a402:	2400      	movs	r4, #0
 802a404:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802a408:	4628      	mov	r0, r5
 802a40a:	4798      	blx	r3
 802a40c:	2000      	movs	r0, #0
 802a40e:	e7e0      	b.n	802a3d2 <_raise_r+0x12>

0802a410 <raise>:
 802a410:	4b02      	ldr	r3, [pc, #8]	; (802a41c <raise+0xc>)
 802a412:	4601      	mov	r1, r0
 802a414:	6818      	ldr	r0, [r3, #0]
 802a416:	f7ff bfd3 	b.w	802a3c0 <_raise_r>
 802a41a:	bf00      	nop
 802a41c:	20000098 	.word	0x20000098

0802a420 <_kill_r>:
 802a420:	b538      	push	{r3, r4, r5, lr}
 802a422:	4d07      	ldr	r5, [pc, #28]	; (802a440 <_kill_r+0x20>)
 802a424:	2300      	movs	r3, #0
 802a426:	4604      	mov	r4, r0
 802a428:	4608      	mov	r0, r1
 802a42a:	4611      	mov	r1, r2
 802a42c:	602b      	str	r3, [r5, #0]
 802a42e:	f000 fb2d 	bl	802aa8c <_kill>
 802a432:	1c43      	adds	r3, r0, #1
 802a434:	d102      	bne.n	802a43c <_kill_r+0x1c>
 802a436:	682b      	ldr	r3, [r5, #0]
 802a438:	b103      	cbz	r3, 802a43c <_kill_r+0x1c>
 802a43a:	6023      	str	r3, [r4, #0]
 802a43c:	bd38      	pop	{r3, r4, r5, pc}
 802a43e:	bf00      	nop
 802a440:	20009040 	.word	0x20009040

0802a444 <_getpid_r>:
 802a444:	f000 bb12 	b.w	802aa6c <_getpid>

0802a448 <__sread>:
 802a448:	b510      	push	{r4, lr}
 802a44a:	460c      	mov	r4, r1
 802a44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a450:	f000 fac8 	bl	802a9e4 <_read_r>
 802a454:	2800      	cmp	r0, #0
 802a456:	bfab      	itete	ge
 802a458:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802a45a:	89a3      	ldrhlt	r3, [r4, #12]
 802a45c:	181b      	addge	r3, r3, r0
 802a45e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802a462:	bfac      	ite	ge
 802a464:	6563      	strge	r3, [r4, #84]	; 0x54
 802a466:	81a3      	strhlt	r3, [r4, #12]
 802a468:	bd10      	pop	{r4, pc}

0802a46a <__swrite>:
 802a46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a46e:	461f      	mov	r7, r3
 802a470:	898b      	ldrh	r3, [r1, #12]
 802a472:	05db      	lsls	r3, r3, #23
 802a474:	4605      	mov	r5, r0
 802a476:	460c      	mov	r4, r1
 802a478:	4616      	mov	r6, r2
 802a47a:	d505      	bpl.n	802a488 <__swrite+0x1e>
 802a47c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a480:	2302      	movs	r3, #2
 802a482:	2200      	movs	r2, #0
 802a484:	f000 fa2a 	bl	802a8dc <_lseek_r>
 802a488:	89a3      	ldrh	r3, [r4, #12]
 802a48a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a48e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802a492:	81a3      	strh	r3, [r4, #12]
 802a494:	4632      	mov	r2, r6
 802a496:	463b      	mov	r3, r7
 802a498:	4628      	mov	r0, r5
 802a49a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802a49e:	f000 b869 	b.w	802a574 <_write_r>

0802a4a2 <__sseek>:
 802a4a2:	b510      	push	{r4, lr}
 802a4a4:	460c      	mov	r4, r1
 802a4a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a4aa:	f000 fa17 	bl	802a8dc <_lseek_r>
 802a4ae:	1c43      	adds	r3, r0, #1
 802a4b0:	89a3      	ldrh	r3, [r4, #12]
 802a4b2:	bf15      	itete	ne
 802a4b4:	6560      	strne	r0, [r4, #84]	; 0x54
 802a4b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802a4ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802a4be:	81a3      	strheq	r3, [r4, #12]
 802a4c0:	bf18      	it	ne
 802a4c2:	81a3      	strhne	r3, [r4, #12]
 802a4c4:	bd10      	pop	{r4, pc}

0802a4c6 <__sclose>:
 802a4c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a4ca:	f000 b935 	b.w	802a738 <_close_r>
	...

0802a4d0 <__swbuf_r>:
 802a4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a4d2:	460e      	mov	r6, r1
 802a4d4:	4614      	mov	r4, r2
 802a4d6:	4605      	mov	r5, r0
 802a4d8:	b118      	cbz	r0, 802a4e2 <__swbuf_r+0x12>
 802a4da:	6983      	ldr	r3, [r0, #24]
 802a4dc:	b90b      	cbnz	r3, 802a4e2 <__swbuf_r+0x12>
 802a4de:	f7ff fa29 	bl	8029934 <__sinit>
 802a4e2:	4b21      	ldr	r3, [pc, #132]	; (802a568 <__swbuf_r+0x98>)
 802a4e4:	429c      	cmp	r4, r3
 802a4e6:	d12b      	bne.n	802a540 <__swbuf_r+0x70>
 802a4e8:	686c      	ldr	r4, [r5, #4]
 802a4ea:	69a3      	ldr	r3, [r4, #24]
 802a4ec:	60a3      	str	r3, [r4, #8]
 802a4ee:	89a3      	ldrh	r3, [r4, #12]
 802a4f0:	071a      	lsls	r2, r3, #28
 802a4f2:	d52f      	bpl.n	802a554 <__swbuf_r+0x84>
 802a4f4:	6923      	ldr	r3, [r4, #16]
 802a4f6:	b36b      	cbz	r3, 802a554 <__swbuf_r+0x84>
 802a4f8:	6923      	ldr	r3, [r4, #16]
 802a4fa:	6820      	ldr	r0, [r4, #0]
 802a4fc:	1ac0      	subs	r0, r0, r3
 802a4fe:	6963      	ldr	r3, [r4, #20]
 802a500:	b2f6      	uxtb	r6, r6
 802a502:	4283      	cmp	r3, r0
 802a504:	4637      	mov	r7, r6
 802a506:	dc04      	bgt.n	802a512 <__swbuf_r+0x42>
 802a508:	4621      	mov	r1, r4
 802a50a:	4628      	mov	r0, r5
 802a50c:	f000 f9aa 	bl	802a864 <_fflush_r>
 802a510:	bb30      	cbnz	r0, 802a560 <__swbuf_r+0x90>
 802a512:	68a3      	ldr	r3, [r4, #8]
 802a514:	3b01      	subs	r3, #1
 802a516:	60a3      	str	r3, [r4, #8]
 802a518:	6823      	ldr	r3, [r4, #0]
 802a51a:	1c5a      	adds	r2, r3, #1
 802a51c:	6022      	str	r2, [r4, #0]
 802a51e:	701e      	strb	r6, [r3, #0]
 802a520:	6963      	ldr	r3, [r4, #20]
 802a522:	3001      	adds	r0, #1
 802a524:	4283      	cmp	r3, r0
 802a526:	d004      	beq.n	802a532 <__swbuf_r+0x62>
 802a528:	89a3      	ldrh	r3, [r4, #12]
 802a52a:	07db      	lsls	r3, r3, #31
 802a52c:	d506      	bpl.n	802a53c <__swbuf_r+0x6c>
 802a52e:	2e0a      	cmp	r6, #10
 802a530:	d104      	bne.n	802a53c <__swbuf_r+0x6c>
 802a532:	4621      	mov	r1, r4
 802a534:	4628      	mov	r0, r5
 802a536:	f000 f995 	bl	802a864 <_fflush_r>
 802a53a:	b988      	cbnz	r0, 802a560 <__swbuf_r+0x90>
 802a53c:	4638      	mov	r0, r7
 802a53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802a540:	4b0a      	ldr	r3, [pc, #40]	; (802a56c <__swbuf_r+0x9c>)
 802a542:	429c      	cmp	r4, r3
 802a544:	d101      	bne.n	802a54a <__swbuf_r+0x7a>
 802a546:	68ac      	ldr	r4, [r5, #8]
 802a548:	e7cf      	b.n	802a4ea <__swbuf_r+0x1a>
 802a54a:	4b09      	ldr	r3, [pc, #36]	; (802a570 <__swbuf_r+0xa0>)
 802a54c:	429c      	cmp	r4, r3
 802a54e:	bf08      	it	eq
 802a550:	68ec      	ldreq	r4, [r5, #12]
 802a552:	e7ca      	b.n	802a4ea <__swbuf_r+0x1a>
 802a554:	4621      	mov	r1, r4
 802a556:	4628      	mov	r0, r5
 802a558:	f000 f81e 	bl	802a598 <__swsetup_r>
 802a55c:	2800      	cmp	r0, #0
 802a55e:	d0cb      	beq.n	802a4f8 <__swbuf_r+0x28>
 802a560:	f04f 37ff 	mov.w	r7, #4294967295
 802a564:	e7ea      	b.n	802a53c <__swbuf_r+0x6c>
 802a566:	bf00      	nop
 802a568:	0802cfa0 	.word	0x0802cfa0
 802a56c:	0802cfc0 	.word	0x0802cfc0
 802a570:	0802cf80 	.word	0x0802cf80

0802a574 <_write_r>:
 802a574:	b538      	push	{r3, r4, r5, lr}
 802a576:	4d07      	ldr	r5, [pc, #28]	; (802a594 <_write_r+0x20>)
 802a578:	4604      	mov	r4, r0
 802a57a:	4608      	mov	r0, r1
 802a57c:	4611      	mov	r1, r2
 802a57e:	2200      	movs	r2, #0
 802a580:	602a      	str	r2, [r5, #0]
 802a582:	461a      	mov	r2, r3
 802a584:	f000 faa8 	bl	802aad8 <_write>
 802a588:	1c43      	adds	r3, r0, #1
 802a58a:	d102      	bne.n	802a592 <_write_r+0x1e>
 802a58c:	682b      	ldr	r3, [r5, #0]
 802a58e:	b103      	cbz	r3, 802a592 <_write_r+0x1e>
 802a590:	6023      	str	r3, [r4, #0]
 802a592:	bd38      	pop	{r3, r4, r5, pc}
 802a594:	20009040 	.word	0x20009040

0802a598 <__swsetup_r>:
 802a598:	4b32      	ldr	r3, [pc, #200]	; (802a664 <__swsetup_r+0xcc>)
 802a59a:	b570      	push	{r4, r5, r6, lr}
 802a59c:	681d      	ldr	r5, [r3, #0]
 802a59e:	4606      	mov	r6, r0
 802a5a0:	460c      	mov	r4, r1
 802a5a2:	b125      	cbz	r5, 802a5ae <__swsetup_r+0x16>
 802a5a4:	69ab      	ldr	r3, [r5, #24]
 802a5a6:	b913      	cbnz	r3, 802a5ae <__swsetup_r+0x16>
 802a5a8:	4628      	mov	r0, r5
 802a5aa:	f7ff f9c3 	bl	8029934 <__sinit>
 802a5ae:	4b2e      	ldr	r3, [pc, #184]	; (802a668 <__swsetup_r+0xd0>)
 802a5b0:	429c      	cmp	r4, r3
 802a5b2:	d10f      	bne.n	802a5d4 <__swsetup_r+0x3c>
 802a5b4:	686c      	ldr	r4, [r5, #4]
 802a5b6:	89a3      	ldrh	r3, [r4, #12]
 802a5b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a5bc:	0719      	lsls	r1, r3, #28
 802a5be:	d42c      	bmi.n	802a61a <__swsetup_r+0x82>
 802a5c0:	06dd      	lsls	r5, r3, #27
 802a5c2:	d411      	bmi.n	802a5e8 <__swsetup_r+0x50>
 802a5c4:	2309      	movs	r3, #9
 802a5c6:	6033      	str	r3, [r6, #0]
 802a5c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802a5cc:	81a3      	strh	r3, [r4, #12]
 802a5ce:	f04f 30ff 	mov.w	r0, #4294967295
 802a5d2:	e03e      	b.n	802a652 <__swsetup_r+0xba>
 802a5d4:	4b25      	ldr	r3, [pc, #148]	; (802a66c <__swsetup_r+0xd4>)
 802a5d6:	429c      	cmp	r4, r3
 802a5d8:	d101      	bne.n	802a5de <__swsetup_r+0x46>
 802a5da:	68ac      	ldr	r4, [r5, #8]
 802a5dc:	e7eb      	b.n	802a5b6 <__swsetup_r+0x1e>
 802a5de:	4b24      	ldr	r3, [pc, #144]	; (802a670 <__swsetup_r+0xd8>)
 802a5e0:	429c      	cmp	r4, r3
 802a5e2:	bf08      	it	eq
 802a5e4:	68ec      	ldreq	r4, [r5, #12]
 802a5e6:	e7e6      	b.n	802a5b6 <__swsetup_r+0x1e>
 802a5e8:	0758      	lsls	r0, r3, #29
 802a5ea:	d512      	bpl.n	802a612 <__swsetup_r+0x7a>
 802a5ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a5ee:	b141      	cbz	r1, 802a602 <__swsetup_r+0x6a>
 802a5f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a5f4:	4299      	cmp	r1, r3
 802a5f6:	d002      	beq.n	802a5fe <__swsetup_r+0x66>
 802a5f8:	4630      	mov	r0, r6
 802a5fa:	f7ff fa99 	bl	8029b30 <_free_r>
 802a5fe:	2300      	movs	r3, #0
 802a600:	6363      	str	r3, [r4, #52]	; 0x34
 802a602:	89a3      	ldrh	r3, [r4, #12]
 802a604:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802a608:	81a3      	strh	r3, [r4, #12]
 802a60a:	2300      	movs	r3, #0
 802a60c:	6063      	str	r3, [r4, #4]
 802a60e:	6923      	ldr	r3, [r4, #16]
 802a610:	6023      	str	r3, [r4, #0]
 802a612:	89a3      	ldrh	r3, [r4, #12]
 802a614:	f043 0308 	orr.w	r3, r3, #8
 802a618:	81a3      	strh	r3, [r4, #12]
 802a61a:	6923      	ldr	r3, [r4, #16]
 802a61c:	b94b      	cbnz	r3, 802a632 <__swsetup_r+0x9a>
 802a61e:	89a3      	ldrh	r3, [r4, #12]
 802a620:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802a624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802a628:	d003      	beq.n	802a632 <__swsetup_r+0x9a>
 802a62a:	4621      	mov	r1, r4
 802a62c:	4630      	mov	r0, r6
 802a62e:	f000 f98d 	bl	802a94c <__smakebuf_r>
 802a632:	89a0      	ldrh	r0, [r4, #12]
 802a634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802a638:	f010 0301 	ands.w	r3, r0, #1
 802a63c:	d00a      	beq.n	802a654 <__swsetup_r+0xbc>
 802a63e:	2300      	movs	r3, #0
 802a640:	60a3      	str	r3, [r4, #8]
 802a642:	6963      	ldr	r3, [r4, #20]
 802a644:	425b      	negs	r3, r3
 802a646:	61a3      	str	r3, [r4, #24]
 802a648:	6923      	ldr	r3, [r4, #16]
 802a64a:	b943      	cbnz	r3, 802a65e <__swsetup_r+0xc6>
 802a64c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802a650:	d1ba      	bne.n	802a5c8 <__swsetup_r+0x30>
 802a652:	bd70      	pop	{r4, r5, r6, pc}
 802a654:	0781      	lsls	r1, r0, #30
 802a656:	bf58      	it	pl
 802a658:	6963      	ldrpl	r3, [r4, #20]
 802a65a:	60a3      	str	r3, [r4, #8]
 802a65c:	e7f4      	b.n	802a648 <__swsetup_r+0xb0>
 802a65e:	2000      	movs	r0, #0
 802a660:	e7f7      	b.n	802a652 <__swsetup_r+0xba>
 802a662:	bf00      	nop
 802a664:	20000098 	.word	0x20000098
 802a668:	0802cfa0 	.word	0x0802cfa0
 802a66c:	0802cfc0 	.word	0x0802cfc0
 802a670:	0802cf80 	.word	0x0802cf80

0802a674 <__register_exitproc>:
 802a674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a678:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802a734 <__register_exitproc+0xc0>
 802a67c:	4606      	mov	r6, r0
 802a67e:	f8d8 0000 	ldr.w	r0, [r8]
 802a682:	461f      	mov	r7, r3
 802a684:	460d      	mov	r5, r1
 802a686:	4691      	mov	r9, r2
 802a688:	f7ff fa29 	bl	8029ade <__retarget_lock_acquire_recursive>
 802a68c:	4b25      	ldr	r3, [pc, #148]	; (802a724 <__register_exitproc+0xb0>)
 802a68e:	681c      	ldr	r4, [r3, #0]
 802a690:	b934      	cbnz	r4, 802a6a0 <__register_exitproc+0x2c>
 802a692:	4c25      	ldr	r4, [pc, #148]	; (802a728 <__register_exitproc+0xb4>)
 802a694:	601c      	str	r4, [r3, #0]
 802a696:	4b25      	ldr	r3, [pc, #148]	; (802a72c <__register_exitproc+0xb8>)
 802a698:	b113      	cbz	r3, 802a6a0 <__register_exitproc+0x2c>
 802a69a:	681b      	ldr	r3, [r3, #0]
 802a69c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802a6a0:	6863      	ldr	r3, [r4, #4]
 802a6a2:	2b1f      	cmp	r3, #31
 802a6a4:	dd07      	ble.n	802a6b6 <__register_exitproc+0x42>
 802a6a6:	f8d8 0000 	ldr.w	r0, [r8]
 802a6aa:	f7ff fa1a 	bl	8029ae2 <__retarget_lock_release_recursive>
 802a6ae:	f04f 30ff 	mov.w	r0, #4294967295
 802a6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a6b6:	b34e      	cbz	r6, 802a70c <__register_exitproc+0x98>
 802a6b8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802a6bc:	b988      	cbnz	r0, 802a6e2 <__register_exitproc+0x6e>
 802a6be:	4b1c      	ldr	r3, [pc, #112]	; (802a730 <__register_exitproc+0xbc>)
 802a6c0:	b923      	cbnz	r3, 802a6cc <__register_exitproc+0x58>
 802a6c2:	f8d8 0000 	ldr.w	r0, [r8]
 802a6c6:	f7ff fa0b 	bl	8029ae0 <__retarget_lock_release>
 802a6ca:	e7f0      	b.n	802a6ae <__register_exitproc+0x3a>
 802a6cc:	f44f 7084 	mov.w	r0, #264	; 0x108
 802a6d0:	f7ff fa08 	bl	8029ae4 <malloc>
 802a6d4:	2800      	cmp	r0, #0
 802a6d6:	d0f4      	beq.n	802a6c2 <__register_exitproc+0x4e>
 802a6d8:	2300      	movs	r3, #0
 802a6da:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802a6de:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802a6e2:	6863      	ldr	r3, [r4, #4]
 802a6e4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802a6e8:	2201      	movs	r2, #1
 802a6ea:	409a      	lsls	r2, r3
 802a6ec:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802a6f0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802a6f4:	4313      	orrs	r3, r2
 802a6f6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802a6fa:	2e02      	cmp	r6, #2
 802a6fc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802a700:	bf02      	ittt	eq
 802a702:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802a706:	4313      	orreq	r3, r2
 802a708:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802a70c:	6863      	ldr	r3, [r4, #4]
 802a70e:	f8d8 0000 	ldr.w	r0, [r8]
 802a712:	1c5a      	adds	r2, r3, #1
 802a714:	3302      	adds	r3, #2
 802a716:	6062      	str	r2, [r4, #4]
 802a718:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802a71c:	f7ff f9e1 	bl	8029ae2 <__retarget_lock_release_recursive>
 802a720:	2000      	movs	r0, #0
 802a722:	e7c6      	b.n	802a6b2 <__register_exitproc+0x3e>
 802a724:	200090d0 	.word	0x200090d0
 802a728:	20009044 	.word	0x20009044
 802a72c:	0802d018 	.word	0x0802d018
 802a730:	08029ae5 	.word	0x08029ae5
 802a734:	200000fc 	.word	0x200000fc

0802a738 <_close_r>:
 802a738:	b538      	push	{r3, r4, r5, lr}
 802a73a:	4d06      	ldr	r5, [pc, #24]	; (802a754 <_close_r+0x1c>)
 802a73c:	2300      	movs	r3, #0
 802a73e:	4604      	mov	r4, r0
 802a740:	4608      	mov	r0, r1
 802a742:	602b      	str	r3, [r5, #0]
 802a744:	f000 f982 	bl	802aa4c <_close>
 802a748:	1c43      	adds	r3, r0, #1
 802a74a:	d102      	bne.n	802a752 <_close_r+0x1a>
 802a74c:	682b      	ldr	r3, [r5, #0]
 802a74e:	b103      	cbz	r3, 802a752 <_close_r+0x1a>
 802a750:	6023      	str	r3, [r4, #0]
 802a752:	bd38      	pop	{r3, r4, r5, pc}
 802a754:	20009040 	.word	0x20009040

0802a758 <__sflush_r>:
 802a758:	898a      	ldrh	r2, [r1, #12]
 802a75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a75e:	4605      	mov	r5, r0
 802a760:	0710      	lsls	r0, r2, #28
 802a762:	460c      	mov	r4, r1
 802a764:	d458      	bmi.n	802a818 <__sflush_r+0xc0>
 802a766:	684b      	ldr	r3, [r1, #4]
 802a768:	2b00      	cmp	r3, #0
 802a76a:	dc05      	bgt.n	802a778 <__sflush_r+0x20>
 802a76c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802a76e:	2b00      	cmp	r3, #0
 802a770:	dc02      	bgt.n	802a778 <__sflush_r+0x20>
 802a772:	2000      	movs	r0, #0
 802a774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a778:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802a77a:	2e00      	cmp	r6, #0
 802a77c:	d0f9      	beq.n	802a772 <__sflush_r+0x1a>
 802a77e:	2300      	movs	r3, #0
 802a780:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802a784:	682f      	ldr	r7, [r5, #0]
 802a786:	602b      	str	r3, [r5, #0]
 802a788:	d032      	beq.n	802a7f0 <__sflush_r+0x98>
 802a78a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802a78c:	89a3      	ldrh	r3, [r4, #12]
 802a78e:	075a      	lsls	r2, r3, #29
 802a790:	d505      	bpl.n	802a79e <__sflush_r+0x46>
 802a792:	6863      	ldr	r3, [r4, #4]
 802a794:	1ac0      	subs	r0, r0, r3
 802a796:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802a798:	b10b      	cbz	r3, 802a79e <__sflush_r+0x46>
 802a79a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802a79c:	1ac0      	subs	r0, r0, r3
 802a79e:	2300      	movs	r3, #0
 802a7a0:	4602      	mov	r2, r0
 802a7a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802a7a4:	6a21      	ldr	r1, [r4, #32]
 802a7a6:	4628      	mov	r0, r5
 802a7a8:	47b0      	blx	r6
 802a7aa:	1c43      	adds	r3, r0, #1
 802a7ac:	89a3      	ldrh	r3, [r4, #12]
 802a7ae:	d106      	bne.n	802a7be <__sflush_r+0x66>
 802a7b0:	6829      	ldr	r1, [r5, #0]
 802a7b2:	291d      	cmp	r1, #29
 802a7b4:	d82c      	bhi.n	802a810 <__sflush_r+0xb8>
 802a7b6:	4a2a      	ldr	r2, [pc, #168]	; (802a860 <__sflush_r+0x108>)
 802a7b8:	40ca      	lsrs	r2, r1
 802a7ba:	07d6      	lsls	r6, r2, #31
 802a7bc:	d528      	bpl.n	802a810 <__sflush_r+0xb8>
 802a7be:	2200      	movs	r2, #0
 802a7c0:	6062      	str	r2, [r4, #4]
 802a7c2:	04d9      	lsls	r1, r3, #19
 802a7c4:	6922      	ldr	r2, [r4, #16]
 802a7c6:	6022      	str	r2, [r4, #0]
 802a7c8:	d504      	bpl.n	802a7d4 <__sflush_r+0x7c>
 802a7ca:	1c42      	adds	r2, r0, #1
 802a7cc:	d101      	bne.n	802a7d2 <__sflush_r+0x7a>
 802a7ce:	682b      	ldr	r3, [r5, #0]
 802a7d0:	b903      	cbnz	r3, 802a7d4 <__sflush_r+0x7c>
 802a7d2:	6560      	str	r0, [r4, #84]	; 0x54
 802a7d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802a7d6:	602f      	str	r7, [r5, #0]
 802a7d8:	2900      	cmp	r1, #0
 802a7da:	d0ca      	beq.n	802a772 <__sflush_r+0x1a>
 802a7dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802a7e0:	4299      	cmp	r1, r3
 802a7e2:	d002      	beq.n	802a7ea <__sflush_r+0x92>
 802a7e4:	4628      	mov	r0, r5
 802a7e6:	f7ff f9a3 	bl	8029b30 <_free_r>
 802a7ea:	2000      	movs	r0, #0
 802a7ec:	6360      	str	r0, [r4, #52]	; 0x34
 802a7ee:	e7c1      	b.n	802a774 <__sflush_r+0x1c>
 802a7f0:	6a21      	ldr	r1, [r4, #32]
 802a7f2:	2301      	movs	r3, #1
 802a7f4:	4628      	mov	r0, r5
 802a7f6:	47b0      	blx	r6
 802a7f8:	1c41      	adds	r1, r0, #1
 802a7fa:	d1c7      	bne.n	802a78c <__sflush_r+0x34>
 802a7fc:	682b      	ldr	r3, [r5, #0]
 802a7fe:	2b00      	cmp	r3, #0
 802a800:	d0c4      	beq.n	802a78c <__sflush_r+0x34>
 802a802:	2b1d      	cmp	r3, #29
 802a804:	d001      	beq.n	802a80a <__sflush_r+0xb2>
 802a806:	2b16      	cmp	r3, #22
 802a808:	d101      	bne.n	802a80e <__sflush_r+0xb6>
 802a80a:	602f      	str	r7, [r5, #0]
 802a80c:	e7b1      	b.n	802a772 <__sflush_r+0x1a>
 802a80e:	89a3      	ldrh	r3, [r4, #12]
 802a810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a814:	81a3      	strh	r3, [r4, #12]
 802a816:	e7ad      	b.n	802a774 <__sflush_r+0x1c>
 802a818:	690f      	ldr	r7, [r1, #16]
 802a81a:	2f00      	cmp	r7, #0
 802a81c:	d0a9      	beq.n	802a772 <__sflush_r+0x1a>
 802a81e:	0793      	lsls	r3, r2, #30
 802a820:	680e      	ldr	r6, [r1, #0]
 802a822:	bf08      	it	eq
 802a824:	694b      	ldreq	r3, [r1, #20]
 802a826:	600f      	str	r7, [r1, #0]
 802a828:	bf18      	it	ne
 802a82a:	2300      	movne	r3, #0
 802a82c:	eba6 0807 	sub.w	r8, r6, r7
 802a830:	608b      	str	r3, [r1, #8]
 802a832:	f1b8 0f00 	cmp.w	r8, #0
 802a836:	dd9c      	ble.n	802a772 <__sflush_r+0x1a>
 802a838:	6a21      	ldr	r1, [r4, #32]
 802a83a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802a83c:	4643      	mov	r3, r8
 802a83e:	463a      	mov	r2, r7
 802a840:	4628      	mov	r0, r5
 802a842:	47b0      	blx	r6
 802a844:	2800      	cmp	r0, #0
 802a846:	dc06      	bgt.n	802a856 <__sflush_r+0xfe>
 802a848:	89a3      	ldrh	r3, [r4, #12]
 802a84a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802a84e:	81a3      	strh	r3, [r4, #12]
 802a850:	f04f 30ff 	mov.w	r0, #4294967295
 802a854:	e78e      	b.n	802a774 <__sflush_r+0x1c>
 802a856:	4407      	add	r7, r0
 802a858:	eba8 0800 	sub.w	r8, r8, r0
 802a85c:	e7e9      	b.n	802a832 <__sflush_r+0xda>
 802a85e:	bf00      	nop
 802a860:	20400001 	.word	0x20400001

0802a864 <_fflush_r>:
 802a864:	b538      	push	{r3, r4, r5, lr}
 802a866:	690b      	ldr	r3, [r1, #16]
 802a868:	4605      	mov	r5, r0
 802a86a:	460c      	mov	r4, r1
 802a86c:	b913      	cbnz	r3, 802a874 <_fflush_r+0x10>
 802a86e:	2500      	movs	r5, #0
 802a870:	4628      	mov	r0, r5
 802a872:	bd38      	pop	{r3, r4, r5, pc}
 802a874:	b118      	cbz	r0, 802a87e <_fflush_r+0x1a>
 802a876:	6983      	ldr	r3, [r0, #24]
 802a878:	b90b      	cbnz	r3, 802a87e <_fflush_r+0x1a>
 802a87a:	f7ff f85b 	bl	8029934 <__sinit>
 802a87e:	4b14      	ldr	r3, [pc, #80]	; (802a8d0 <_fflush_r+0x6c>)
 802a880:	429c      	cmp	r4, r3
 802a882:	d11b      	bne.n	802a8bc <_fflush_r+0x58>
 802a884:	686c      	ldr	r4, [r5, #4]
 802a886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a88a:	2b00      	cmp	r3, #0
 802a88c:	d0ef      	beq.n	802a86e <_fflush_r+0xa>
 802a88e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802a890:	07d0      	lsls	r0, r2, #31
 802a892:	d404      	bmi.n	802a89e <_fflush_r+0x3a>
 802a894:	0599      	lsls	r1, r3, #22
 802a896:	d402      	bmi.n	802a89e <_fflush_r+0x3a>
 802a898:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a89a:	f7ff f920 	bl	8029ade <__retarget_lock_acquire_recursive>
 802a89e:	4628      	mov	r0, r5
 802a8a0:	4621      	mov	r1, r4
 802a8a2:	f7ff ff59 	bl	802a758 <__sflush_r>
 802a8a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802a8a8:	07da      	lsls	r2, r3, #31
 802a8aa:	4605      	mov	r5, r0
 802a8ac:	d4e0      	bmi.n	802a870 <_fflush_r+0xc>
 802a8ae:	89a3      	ldrh	r3, [r4, #12]
 802a8b0:	059b      	lsls	r3, r3, #22
 802a8b2:	d4dd      	bmi.n	802a870 <_fflush_r+0xc>
 802a8b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802a8b6:	f7ff f914 	bl	8029ae2 <__retarget_lock_release_recursive>
 802a8ba:	e7d9      	b.n	802a870 <_fflush_r+0xc>
 802a8bc:	4b05      	ldr	r3, [pc, #20]	; (802a8d4 <_fflush_r+0x70>)
 802a8be:	429c      	cmp	r4, r3
 802a8c0:	d101      	bne.n	802a8c6 <_fflush_r+0x62>
 802a8c2:	68ac      	ldr	r4, [r5, #8]
 802a8c4:	e7df      	b.n	802a886 <_fflush_r+0x22>
 802a8c6:	4b04      	ldr	r3, [pc, #16]	; (802a8d8 <_fflush_r+0x74>)
 802a8c8:	429c      	cmp	r4, r3
 802a8ca:	bf08      	it	eq
 802a8cc:	68ec      	ldreq	r4, [r5, #12]
 802a8ce:	e7da      	b.n	802a886 <_fflush_r+0x22>
 802a8d0:	0802cfa0 	.word	0x0802cfa0
 802a8d4:	0802cfc0 	.word	0x0802cfc0
 802a8d8:	0802cf80 	.word	0x0802cf80

0802a8dc <_lseek_r>:
 802a8dc:	b538      	push	{r3, r4, r5, lr}
 802a8de:	4d07      	ldr	r5, [pc, #28]	; (802a8fc <_lseek_r+0x20>)
 802a8e0:	4604      	mov	r4, r0
 802a8e2:	4608      	mov	r0, r1
 802a8e4:	4611      	mov	r1, r2
 802a8e6:	2200      	movs	r2, #0
 802a8e8:	602a      	str	r2, [r5, #0]
 802a8ea:	461a      	mov	r2, r3
 802a8ec:	f000 f8d6 	bl	802aa9c <_lseek>
 802a8f0:	1c43      	adds	r3, r0, #1
 802a8f2:	d102      	bne.n	802a8fa <_lseek_r+0x1e>
 802a8f4:	682b      	ldr	r3, [r5, #0]
 802a8f6:	b103      	cbz	r3, 802a8fa <_lseek_r+0x1e>
 802a8f8:	6023      	str	r3, [r4, #0]
 802a8fa:	bd38      	pop	{r3, r4, r5, pc}
 802a8fc:	20009040 	.word	0x20009040

0802a900 <__swhatbuf_r>:
 802a900:	b570      	push	{r4, r5, r6, lr}
 802a902:	460e      	mov	r6, r1
 802a904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802a908:	2900      	cmp	r1, #0
 802a90a:	b096      	sub	sp, #88	; 0x58
 802a90c:	4614      	mov	r4, r2
 802a90e:	461d      	mov	r5, r3
 802a910:	da08      	bge.n	802a924 <__swhatbuf_r+0x24>
 802a912:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802a916:	2200      	movs	r2, #0
 802a918:	602a      	str	r2, [r5, #0]
 802a91a:	061a      	lsls	r2, r3, #24
 802a91c:	d410      	bmi.n	802a940 <__swhatbuf_r+0x40>
 802a91e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802a922:	e00e      	b.n	802a942 <__swhatbuf_r+0x42>
 802a924:	466a      	mov	r2, sp
 802a926:	f000 f86f 	bl	802aa08 <_fstat_r>
 802a92a:	2800      	cmp	r0, #0
 802a92c:	dbf1      	blt.n	802a912 <__swhatbuf_r+0x12>
 802a92e:	9a01      	ldr	r2, [sp, #4]
 802a930:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802a934:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802a938:	425a      	negs	r2, r3
 802a93a:	415a      	adcs	r2, r3
 802a93c:	602a      	str	r2, [r5, #0]
 802a93e:	e7ee      	b.n	802a91e <__swhatbuf_r+0x1e>
 802a940:	2340      	movs	r3, #64	; 0x40
 802a942:	2000      	movs	r0, #0
 802a944:	6023      	str	r3, [r4, #0]
 802a946:	b016      	add	sp, #88	; 0x58
 802a948:	bd70      	pop	{r4, r5, r6, pc}
	...

0802a94c <__smakebuf_r>:
 802a94c:	898b      	ldrh	r3, [r1, #12]
 802a94e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802a950:	079d      	lsls	r5, r3, #30
 802a952:	4606      	mov	r6, r0
 802a954:	460c      	mov	r4, r1
 802a956:	d507      	bpl.n	802a968 <__smakebuf_r+0x1c>
 802a958:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802a95c:	6023      	str	r3, [r4, #0]
 802a95e:	6123      	str	r3, [r4, #16]
 802a960:	2301      	movs	r3, #1
 802a962:	6163      	str	r3, [r4, #20]
 802a964:	b002      	add	sp, #8
 802a966:	bd70      	pop	{r4, r5, r6, pc}
 802a968:	ab01      	add	r3, sp, #4
 802a96a:	466a      	mov	r2, sp
 802a96c:	f7ff ffc8 	bl	802a900 <__swhatbuf_r>
 802a970:	9900      	ldr	r1, [sp, #0]
 802a972:	4605      	mov	r5, r0
 802a974:	4630      	mov	r0, r6
 802a976:	f7ff f947 	bl	8029c08 <_malloc_r>
 802a97a:	b948      	cbnz	r0, 802a990 <__smakebuf_r+0x44>
 802a97c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802a980:	059a      	lsls	r2, r3, #22
 802a982:	d4ef      	bmi.n	802a964 <__smakebuf_r+0x18>
 802a984:	f023 0303 	bic.w	r3, r3, #3
 802a988:	f043 0302 	orr.w	r3, r3, #2
 802a98c:	81a3      	strh	r3, [r4, #12]
 802a98e:	e7e3      	b.n	802a958 <__smakebuf_r+0xc>
 802a990:	4b0d      	ldr	r3, [pc, #52]	; (802a9c8 <__smakebuf_r+0x7c>)
 802a992:	62b3      	str	r3, [r6, #40]	; 0x28
 802a994:	89a3      	ldrh	r3, [r4, #12]
 802a996:	6020      	str	r0, [r4, #0]
 802a998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802a99c:	81a3      	strh	r3, [r4, #12]
 802a99e:	9b00      	ldr	r3, [sp, #0]
 802a9a0:	6163      	str	r3, [r4, #20]
 802a9a2:	9b01      	ldr	r3, [sp, #4]
 802a9a4:	6120      	str	r0, [r4, #16]
 802a9a6:	b15b      	cbz	r3, 802a9c0 <__smakebuf_r+0x74>
 802a9a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802a9ac:	4630      	mov	r0, r6
 802a9ae:	f000 f83d 	bl	802aa2c <_isatty_r>
 802a9b2:	b128      	cbz	r0, 802a9c0 <__smakebuf_r+0x74>
 802a9b4:	89a3      	ldrh	r3, [r4, #12]
 802a9b6:	f023 0303 	bic.w	r3, r3, #3
 802a9ba:	f043 0301 	orr.w	r3, r3, #1
 802a9be:	81a3      	strh	r3, [r4, #12]
 802a9c0:	89a0      	ldrh	r0, [r4, #12]
 802a9c2:	4305      	orrs	r5, r0
 802a9c4:	81a5      	strh	r5, [r4, #12]
 802a9c6:	e7cd      	b.n	802a964 <__smakebuf_r+0x18>
 802a9c8:	080298cd 	.word	0x080298cd

0802a9cc <__malloc_lock>:
 802a9cc:	4801      	ldr	r0, [pc, #4]	; (802a9d4 <__malloc_lock+0x8>)
 802a9ce:	f7ff b886 	b.w	8029ade <__retarget_lock_acquire_recursive>
 802a9d2:	bf00      	nop
 802a9d4:	20008f2d 	.word	0x20008f2d

0802a9d8 <__malloc_unlock>:
 802a9d8:	4801      	ldr	r0, [pc, #4]	; (802a9e0 <__malloc_unlock+0x8>)
 802a9da:	f7ff b882 	b.w	8029ae2 <__retarget_lock_release_recursive>
 802a9de:	bf00      	nop
 802a9e0:	20008f2d 	.word	0x20008f2d

0802a9e4 <_read_r>:
 802a9e4:	b538      	push	{r3, r4, r5, lr}
 802a9e6:	4d07      	ldr	r5, [pc, #28]	; (802aa04 <_read_r+0x20>)
 802a9e8:	4604      	mov	r4, r0
 802a9ea:	4608      	mov	r0, r1
 802a9ec:	4611      	mov	r1, r2
 802a9ee:	2200      	movs	r2, #0
 802a9f0:	602a      	str	r2, [r5, #0]
 802a9f2:	461a      	mov	r2, r3
 802a9f4:	f000 f85a 	bl	802aaac <_read>
 802a9f8:	1c43      	adds	r3, r0, #1
 802a9fa:	d102      	bne.n	802aa02 <_read_r+0x1e>
 802a9fc:	682b      	ldr	r3, [r5, #0]
 802a9fe:	b103      	cbz	r3, 802aa02 <_read_r+0x1e>
 802aa00:	6023      	str	r3, [r4, #0]
 802aa02:	bd38      	pop	{r3, r4, r5, pc}
 802aa04:	20009040 	.word	0x20009040

0802aa08 <_fstat_r>:
 802aa08:	b538      	push	{r3, r4, r5, lr}
 802aa0a:	4d07      	ldr	r5, [pc, #28]	; (802aa28 <_fstat_r+0x20>)
 802aa0c:	2300      	movs	r3, #0
 802aa0e:	4604      	mov	r4, r0
 802aa10:	4608      	mov	r0, r1
 802aa12:	4611      	mov	r1, r2
 802aa14:	602b      	str	r3, [r5, #0]
 802aa16:	f000 f821 	bl	802aa5c <_fstat>
 802aa1a:	1c43      	adds	r3, r0, #1
 802aa1c:	d102      	bne.n	802aa24 <_fstat_r+0x1c>
 802aa1e:	682b      	ldr	r3, [r5, #0]
 802aa20:	b103      	cbz	r3, 802aa24 <_fstat_r+0x1c>
 802aa22:	6023      	str	r3, [r4, #0]
 802aa24:	bd38      	pop	{r3, r4, r5, pc}
 802aa26:	bf00      	nop
 802aa28:	20009040 	.word	0x20009040

0802aa2c <_isatty_r>:
 802aa2c:	b538      	push	{r3, r4, r5, lr}
 802aa2e:	4d06      	ldr	r5, [pc, #24]	; (802aa48 <_isatty_r+0x1c>)
 802aa30:	2300      	movs	r3, #0
 802aa32:	4604      	mov	r4, r0
 802aa34:	4608      	mov	r0, r1
 802aa36:	602b      	str	r3, [r5, #0]
 802aa38:	f000 f820 	bl	802aa7c <_isatty>
 802aa3c:	1c43      	adds	r3, r0, #1
 802aa3e:	d102      	bne.n	802aa46 <_isatty_r+0x1a>
 802aa40:	682b      	ldr	r3, [r5, #0]
 802aa42:	b103      	cbz	r3, 802aa46 <_isatty_r+0x1a>
 802aa44:	6023      	str	r3, [r4, #0]
 802aa46:	bd38      	pop	{r3, r4, r5, pc}
 802aa48:	20009040 	.word	0x20009040

0802aa4c <_close>:
 802aa4c:	4b02      	ldr	r3, [pc, #8]	; (802aa58 <_close+0xc>)
 802aa4e:	2258      	movs	r2, #88	; 0x58
 802aa50:	601a      	str	r2, [r3, #0]
 802aa52:	f04f 30ff 	mov.w	r0, #4294967295
 802aa56:	4770      	bx	lr
 802aa58:	20009040 	.word	0x20009040

0802aa5c <_fstat>:
 802aa5c:	4b02      	ldr	r3, [pc, #8]	; (802aa68 <_fstat+0xc>)
 802aa5e:	2258      	movs	r2, #88	; 0x58
 802aa60:	601a      	str	r2, [r3, #0]
 802aa62:	f04f 30ff 	mov.w	r0, #4294967295
 802aa66:	4770      	bx	lr
 802aa68:	20009040 	.word	0x20009040

0802aa6c <_getpid>:
 802aa6c:	4b02      	ldr	r3, [pc, #8]	; (802aa78 <_getpid+0xc>)
 802aa6e:	2258      	movs	r2, #88	; 0x58
 802aa70:	601a      	str	r2, [r3, #0]
 802aa72:	f04f 30ff 	mov.w	r0, #4294967295
 802aa76:	4770      	bx	lr
 802aa78:	20009040 	.word	0x20009040

0802aa7c <_isatty>:
 802aa7c:	4b02      	ldr	r3, [pc, #8]	; (802aa88 <_isatty+0xc>)
 802aa7e:	2258      	movs	r2, #88	; 0x58
 802aa80:	601a      	str	r2, [r3, #0]
 802aa82:	2000      	movs	r0, #0
 802aa84:	4770      	bx	lr
 802aa86:	bf00      	nop
 802aa88:	20009040 	.word	0x20009040

0802aa8c <_kill>:
 802aa8c:	4b02      	ldr	r3, [pc, #8]	; (802aa98 <_kill+0xc>)
 802aa8e:	2258      	movs	r2, #88	; 0x58
 802aa90:	601a      	str	r2, [r3, #0]
 802aa92:	f04f 30ff 	mov.w	r0, #4294967295
 802aa96:	4770      	bx	lr
 802aa98:	20009040 	.word	0x20009040

0802aa9c <_lseek>:
 802aa9c:	4b02      	ldr	r3, [pc, #8]	; (802aaa8 <_lseek+0xc>)
 802aa9e:	2258      	movs	r2, #88	; 0x58
 802aaa0:	601a      	str	r2, [r3, #0]
 802aaa2:	f04f 30ff 	mov.w	r0, #4294967295
 802aaa6:	4770      	bx	lr
 802aaa8:	20009040 	.word	0x20009040

0802aaac <_read>:
 802aaac:	4b02      	ldr	r3, [pc, #8]	; (802aab8 <_read+0xc>)
 802aaae:	2258      	movs	r2, #88	; 0x58
 802aab0:	601a      	str	r2, [r3, #0]
 802aab2:	f04f 30ff 	mov.w	r0, #4294967295
 802aab6:	4770      	bx	lr
 802aab8:	20009040 	.word	0x20009040

0802aabc <_sbrk>:
 802aabc:	4a04      	ldr	r2, [pc, #16]	; (802aad0 <_sbrk+0x14>)
 802aabe:	6811      	ldr	r1, [r2, #0]
 802aac0:	4603      	mov	r3, r0
 802aac2:	b909      	cbnz	r1, 802aac8 <_sbrk+0xc>
 802aac4:	4903      	ldr	r1, [pc, #12]	; (802aad4 <_sbrk+0x18>)
 802aac6:	6011      	str	r1, [r2, #0]
 802aac8:	6810      	ldr	r0, [r2, #0]
 802aaca:	4403      	add	r3, r0
 802aacc:	6013      	str	r3, [r2, #0]
 802aace:	4770      	bx	lr
 802aad0:	200090d4 	.word	0x200090d4
 802aad4:	2000acf8 	.word	0x2000acf8

0802aad8 <_write>:
 802aad8:	4b02      	ldr	r3, [pc, #8]	; (802aae4 <_write+0xc>)
 802aada:	2258      	movs	r2, #88	; 0x58
 802aadc:	601a      	str	r2, [r3, #0]
 802aade:	f04f 30ff 	mov.w	r0, #4294967295
 802aae2:	4770      	bx	lr
 802aae4:	20009040 	.word	0x20009040

0802aae8 <_exit>:
 802aae8:	e7fe      	b.n	802aae8 <_exit>
	...

0802aaec <_init>:
 802aaec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802aaee:	bf00      	nop
 802aaf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802aaf2:	bc08      	pop	{r3}
 802aaf4:	469e      	mov	lr, r3
 802aaf6:	4770      	bx	lr

0802aaf8 <_fini>:
 802aaf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802aafa:	bf00      	nop
 802aafc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802aafe:	bc08      	pop	{r3}
 802ab00:	469e      	mov	lr, r3
 802ab02:	4770      	bx	lr
